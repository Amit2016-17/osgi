/*
 * Master Gradle build script
 *
 * Depends on bndPlugin property set by settings.gradle.
 * and bnd_* values from gradle.properties.
 */

import aQute.lib.io.IO

/* Add bnd gradle plugin as a script dependency */
buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'ru.vyarus:gradle-animalsniffer-plugin:1.2.0'
  }
}

/* Configure the subprojects */
def signatures7 = ['':'org.codehaus.mojo.signature:java17:1.0@signature',
                   'compact1':':java17:1.0:compact1@signature',
                   'compact2':':java17:1.0:compact2@signature',
                   'compact3':':java17:1.0:compact3@signature']
subprojects {
  if (plugins.hasPlugin('biz.aQute.bnd')) {
    if (bndis('companion.code')) {
      apply from: cnf.file('gradle/companion.gradle')
    }
    plugins.apply 'ru.vyarus.animalsniffer'
    repositories {
      mavenCentral()
      flatDir {
        dirs "${bnd('licensed')}/animalsniffer"
      }
    }
    if (sourceCompatibility.isJava7()) { 
      String javacProfile = bnd('javac.profile', '')
      tasks.withType(JavaCompile) {
        options.compilerArgs.add('-Xlint:-options')
        if (!javacProfile.empty) {
          options.compilerArgs.removeAll(['-profile', javacProfile])
        }
      }
      dependencies {
        signature signatures7[javacProfile]
      }
    } else { 
      dependencies {
        signature 'org.codehaus.mojo.signature:java18:1.0@signature'
      }
    }
    animalsniffer {
      sourceSets = [sourceSets.main]
    }
    jar {
      dependsOn animalsnifferMain
      doFirst {
        project.mkdir(compileJava.destinationDir)
      }
    }
    test {
      testLogging {
        exceptionFormat 'full'
      }
      if (System.properties['maven.repo.local']) {
        systemProperty 'maven.repo.local', IO.getFile(gradle.startParameter.currentDir, System.properties['maven.repo.local'])
      }
    }
  }
}

task wrapper(type: Wrapper) {
  jarFile = rootProject.file('.gradle-wrapper/gradle-wrapper.jar')
}

task buildscriptDependencies {
  doLast {
    println "bnd_plugin: ${bnd_plugin}"
    println "bnd_repourl: ${bnd_repourl}"
    println buildscript.configurations.classpath.asPath
  }
}
