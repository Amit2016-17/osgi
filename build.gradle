/*
 * Master Gradle build script
 *
 * Depends on bndPlugin property set by settings.gradle.
 * and bnd_* values from gradle.properties.
 */

import aQute.bnd.build.Workspace
import aQute.bnd.osgi.Constants
import aQute.lib.io.IO

/* Add bnd gradle plugin as a script dependency */
buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath bndPlugin
    classpath 'ru.vyarus:gradle-animalsniffer-plugin:1.2.0'
  }
}

/* Initialize the bnd workspace */
Workspace.setDriver(Constants.BNDDRIVER_GRADLE)
Workspace.addGestalt(Constants.GESTALT_BATCH, null)
ext.bndWorkspace = new Workspace(rootDir, bnd_cnf).setOffline(gradle.startParameter.offline)

ext.cnf = rootProject.project(bnd_cnf)

/* Configure the subprojects */
subprojects {
  def bndProject = bndWorkspace.getProject(name)
  if (bndProject != null) {
    plugins.apply 'biz.aQute.bnd'
    plugins.apply 'ru.vyarus.animalsniffer'
    repositories {
      mavenCentral()
    }
    dependencies {
      signature "org.codehaus.mojo.signature:${bnd('animalsniffer.signature', 'java17:1.0')}@signature"
    }
    animalsniffer {
      sourceSets = [sourceSets.main]
    }
    test {
      testLogging {
        exceptionFormat 'full'
      }
      if (System.properties['maven.repo.local']) {
        systemProperty 'maven.repo.local', IO.getFile(rootProject.rootDir, System.properties['maven.repo.local'])
      }
    }
    assemble {
      dependsOn animalsnifferMain
    }
  }
}
subprojects {
  if (project.hasProperty('bnd')) {
    if (parseBoolean(bnd('companion.code', 'false'))) {
      apply from: cnf.file('gradle/companion.gradle')
    }
  }
}

task wrapper(type: Wrapper) {
  jarFile = rootProject.file('.gradle-wrapper/gradle-wrapper.jar')
}

def boolean parseBoolean(String value) {
  return 'on'.equalsIgnoreCase(value) || 'true'.equalsIgnoreCase(value)
}
