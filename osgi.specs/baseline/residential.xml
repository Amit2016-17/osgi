<?xml version="1.0" encoding="utf-8"?><book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:ns4="http://www.w3.org/2000/svg" xmlns:ns3="http://www.w3.org/1998/Math/MathML" xmlns:ns="http://docbook.org/ns/docbook" revision="$Id: 8e391bacfe2bcbad1031701a9923cf52ea919995 $" status="final" version="5" xml:id="residential.book">
  <info>
    <title>OSGi Residential</title>

    <author>
      <orgname>The OSGi Alliance</orgname>
    </author>

    <releaseinfo xml:id="residential.book-release">Release 6</releaseinfo>

    <pubdate>July 2015</pubdate>

    <copyright>
      <year>2000, 2015</year>

      <holder>OSGi Alliance</holder>
    </copyright>
  </info>

  <preface xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" condition="draft" revision="$Id: 688841e939d5ee27edfcf79c20af9125b97ca93f $" role="frontmatter" version="5" xml:base="../license/distribution.feedback.license.2.0.xml">
  <title>Distribution and Feedback License, Version 2.0</title>

  <section>
    <title>License Grant</title>

    <para>The OSGi Alliance hereby grants you a limited copyright license to
    copy and display this document (the "Distribution") in any medium without
    fee or royalty. This Distribution license is exclusively for the purpose
    of reviewing and providing feedback to the OSGi Alliance. You agree not to
    modify the Distribution in any way and further agree to not participate in
    any way in the making of derivative works thereof, other than as a
    necessary result of reviewing and providing feedback to the Distribution.
    You also agree to cause this notice, along with the accompanying consent,
    to be included on all copies (or portions thereof) of the Distribution.
    The OSGi Alliance also grants you a perpetual, non-exclusive, worldwide,
    fully paid-up, royalty free, limited license (without the right to
    sublicense) under any applicable copyrights, to create and/or distribute
    an implementation of the Distribution that: (i) fully implements the
    Distribution including all its required interfaces and functionality; (ii)
    does not modify, subset, superset or otherwise extend the OSGi Name Space,
    or include any public or protected packages, classes, Java interfaces,
    fields or methods within the OSGi Name Space other than those required and
    authorized by the Distribution. An implementation that does not satisfy
    limitations (i)-(ii) is not considered an implementation of the
    Distribution, does not receive the benefits of this license, and must not
    be described as an implementation of the Distribution. "OSGi Name Space"
    shall mean the public class or interface declarations whose names begin
    with "org.osgi" or any recognized successors or replacements thereof. The
    OSGi Alliance expressly reserves all rights not granted pursuant to these
    limited copyright licenses including termination of the license at will at
    any time.</para>

    <para>EXCEPT FOR THE LIMITED COPYRIGHT LICENSES GRANTED ABOVE, THE OSGi
    ALLIANCE DOES NOT GRANT, EITHER EXPRESSLY OR IMPLIEDLY, A LICENSE TO ANY
    INTELLECTUAL PROPERTY IT, OR ANY THIRD PARTIES, OWN OR CONTROL. Title to
    the copyright in the Distribution will at all times remain with the OSGi
    Alliance. The example companies, organizations, products, domain names,
    e-mail addresses, logos, people, places, and events depicted therein are
    fictitious. No association with any real company, organization, product,
    domain name, email address, logo, person, place, or event is intended or
    should be inferred.</para>

    <para>THE DISTRIBUTION IS PROVIDED "AS IS," AND THE OSGi ALLIANCE
    (INCLUDING ANY THIRD PARTIES THAT HAVE CONTRIBUTED TO THE DISTRIBUTION)
    MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, BUT
    NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    PURPOSE, NON-INFRINGEMENT, OR TITLE; THAT THE CONTENTS OF THE DISTRIBUTION
    ARE SUITABLE FOR ANY PURPOSE; NOR THAT THE IMPLEMENTATION OF SUCH CONTENTS
    WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER
    RIGHTS.</para>

    <para>NEITHER THE OSGi ALLIANCE NOR ANY THIRD PARTY WILL BE LIABLE FOR ANY
    DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT
    OF OR RELATING TO ANY USE OR DISTRIBUTION OF THE DISTRIBUTION.</para>

    <para>Implementation of certain elements of this Distribution may be
    subject to third party intellectual property rights, including without
    limitation, patent rights (such a third party may or may not be a member
    of the OSGi Alliance). The OSGi Alliance is not responsible and shall not
    be held responsible in any manner for identifying or failing to identify
    any or all such third party intellectual property rights.</para>

    <para>The Distribution is a draft. As a result, the final product may
    change substantially by the time of final publication, and you are
    cautioned against relying on the content of this Distribution. You are
    encouraged to update any implementation of the Distribution if and when
    such Distribution becomes a final specification.</para>

    <para>The OSGi Alliance is willing to receive input, suggestions and other
    feedback ("Feedback") on the Distribution. By providing such Feedback to
    the OSGi Alliance, you grant to the OSGi Alliance and all its Members a
    non-exclusive, non-transferable, worldwide, perpetual, irrevocable,
    royalty-free copyright license to copy, publish, license, modify,
    sublicense or otherwise distribute and exploit your Feedback for any
    purpose. Likewise, if incorporation of your Feedback would cause an
    implementation of the Distribution, including as it may be modified,
    amended, or published at any point in the future ("Future Specification"),
    to necessarily infringe a patent or patent application that you own or
    control, you hereby commit to grant to all implementers of such
    Distribution or Future Specification an irrevocable, worldwide,
    sublicenseable, royalty free license under such patent or patent
    application to make, have made, use, sell, offer for sale, import and
    export products or services that implement such Distribution or Future
    Specification. You warrant that (a) to the best of your knowledge you have
    the right to provide this Feedback, and if you are providing Feedback on
    behalf of a company, you have the rights to provide Feedback on behalf of
    your company; (b) the Feedback is not confidential to you and does not
    violate the copyright or trade secret interests of another; and (c) to the
    best of your knowledge, use of the Feedback would not cause an
    implementation of the Distribution or a Future Specification to
    necessarily infringe any third-party patent or patent application known to
    you. You also acknowledge that the OSGi Alliance is not required to
    incorporate your Feedback into any version of the Distribution or a Future
    Specification.</para>

    <para>I HEREBY ACKNOWLEDGE AND AGREE TO THE TERMS AND CONDITIONS
    DELINEATED ABOVE.</para>
  </section>

  <section role="trademarks">
    <title>Trademarks</title>

    <para>OSGi™ is a trademark, registered trademark, or service mark of the
    OSGi Alliance in the US and other countries. Java is a trademark,
    registered trademark, or service mark of Oracle Corporation in the US and
    other countries. All other trademarks, registered trademarks, or service
    marks used in this document are the property of their respective owners
    and are hereby recognized.</para>
  </section>

  <section role="feedback">
    <title>Feedback</title>

    <para>This specification can be downloaded from the OSGi Alliance web
    site:</para>

    <programlisting>http://www.osgi.org</programlisting>

    <para>Comments about this specification can be raised at:</para>

    <programlisting>https://osgi.org/bugzilla/</programlisting>
  </section>
</preface>

  <preface xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" condition="final" revision="$Id: 7e570e2ddb2ae6191b2ec88b07ec764f074f8a77 $" role="frontmatter" version="5" xml:base="../license/osgi.specification.license.2.0.xml">
  <title>OSGi Specification License, Version 2.0</title>

  <section>
    <title>License Grant</title>

    <para>OSGi Alliance ("OSGi") hereby grants you a fully-paid,
    non-exclusive, non-transferable, worldwide, limited license (without the
    right to sublicense), under OSGi's applicable intellectual property rights
    to view, download, and reproduce this OSGi Specification ("Specification")
    which follows this License Agreement ("Agreement"). You are not authorized
    to create any derivative work of the Specification. However, to the extent
    that an implementation of the Specification would necessarily be a
    derivative work of the Specification, OSGi also grants you a perpetual,
    non-exclusive, worldwide, fully paid-up, royalty free, limited license
    (without the right to sublicense) under any applicable copyrights, to
    create and/or distribute an implementation of the Specification that: (i)
    fully implements the Specification including all its required interfaces
    and functionality; (ii) does not modify, subset, superset or otherwise
    extend the OSGi Name Space, or include any public or protected packages,
    classes, Java interfaces, fields or methods within the OSGi Name Space
    other than those required and authorized by the Specification. An
    implementation that does not satisfy limitations (i)-(ii) is not
    considered an implementation of the Specification, does not receive the
    benefits of this license, and must not be described as an implementation
    of the Specification. An implementation of the Specification must not
    claim to be a compliant implementation of the Specification unless it
    passes the OSGi Compliance Tests for the Specification in accordance with
    OSGi processes. "OSGi Name Space" shall mean the public class or interface
    declarations whose names begin with "org.osgi" or any recognized
    successors or replacements thereof.</para>

    <para>OSGi Participants (as such term is defined in the OSGi Intellectual
    Property Rights Policy) have made non-assert and licensing commitments
    regarding patent claims necessary to implement the Specification, if any,
    under the OSGi Intellectual Property Rights Policy which is available for
    examination on the OSGi public web site (www.osgi.org).</para>
  </section>

  <section>
    <title>No Warranties and Limitation of Liability</title>

    <para>THE SPECIFICATION IS PROVIDED "AS IS," AND OSGi AND ANY OTHER
    AUTHORS MAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED,
    INCLUDING, BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR
    A PARTICULAR PURPOSE, NON-INFRINGEMENT, OR TITLE; THAT THE CONTENTS OF THE
    SPECIFICATION ARE SUITABLE FOR ANY PURPOSE; NOR THAT THE IMPLEMENTATION OF
    SUCH CONTENTS WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS,
    TRADEMARKS OR OTHER RIGHTS. OSGi AND ANY OTHER AUTHORS WILL NOT BE LIABLE
    FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
    ARISING OUT OF ANY USE OF THE SPECIFICATION OR THE PERFORMANCE OR
    IMPLEMENTATION OF THE CONTENTS THEREOF.</para>
  </section>

  <section>
    <title>Covenant Not to Assert</title>

    <para>As a material condition to this license you hereby agree, to the
    extent that you have any patent claims which are necessarily infringed by
    an implementation of the Specification, not to assert any such patent
    claims against the creation, distribution or use of an implementation of
    the Specification.</para>
  </section>

  <section>
    <title>General</title>

    <para>The name and trademarks of OSGi or any other Authors may NOT be used
    in any manner, including advertising or publicity pertaining to the
    Specification or its contents without specific, written prior permission.
    Title to copyright in the Specification will at all times remain with
    OSGi.</para>

    <para>No other rights are granted by implication, estoppel or
    otherwise.</para>
  </section>

  <section role="trademarks">
    <title>Trademarks</title>

    <para>OSGi™ is a trademark, registered trademark, or service mark of the
    OSGi Alliance in the US and other countries. Java is a trademark,
    registered trademark, or service mark of Oracle Corporation in the US and
    other countries. All other trademarks, registered trademarks, or service
    marks used in this document are the property of their respective owners
    and are hereby recognized.</para>
  </section>

  <section role="feedback">
    <title>Feedback</title>

    <para>This specification can be downloaded from the OSGi Alliance web
    site:</para>

    <programlisting>http://www.osgi.org</programlisting>

    <para>Comments about this specification can be raised at:</para>

    <programlisting>https://osgi.org/bugzilla/</programlisting>
  </section>
</preface>

  <chapter label="1" revision="$Id: 3372d72892a7b85cbee7ea6057ce4f847435af61 $" version="5" xml:base="001/introduction.xml">
  <title>Introduction</title>

  <para>When the OSGi Alliance started in 1998, the focus was in residential
  gateways the organization's name contained the word
  <emphasis>gateway</emphasis> before it was changed to the OSGi Alliance.
  Since that time, OSGi flourished in several different markets. With the
  release of the OSGi Residential Specification in January 2012, it made it
  also to widespread adoption for residential gateways/home gateways. This is
  due to the fact that:</para>

  <itemizedlist>
    <listitem>
      <para>Hardware cost of service gateways have been reduced.</para>
    </listitem>

    <listitem>
      <para>Capabilities of those small devices increased many fold.</para>
    </listitem>

    <listitem>
      <para>The number of devices in a household has increased.</para>
    </listitem>

    <listitem>
      <para>Smart Home has become mainstream due to the growing interest in
      the Internet-of-Things (IoT).</para>
    </listitem>

    <listitem>
      <para>The need for interoperability due to the increasing amount of
      communication protocols.</para>
    </listitem>

    <listitem>
      <para>Always-on and broadband access to the Internet has become
      pervasive.</para>
    </listitem>
  </itemizedlist>

  <para>This specification, produced by the OSGi Residential Expert Group
  (REG), defines a set of new and refined service specifications that focus on
  the residential market. The REG is chartered to define the requirements and
  specifications to tailor the OSGi framework for fixed network connected
  devices. Examples of such devices include residential gateways, building
  automation controllers, white goods, consumer electronics and many
  others.</para>

  <para>Technical areas addressed by the REG include the requirements,
  functional specifications, and APIs for gateway devices. The first release
  of the OSGi Residential Specification resolved the requirements of
  inter-operation with existing management systems and protocols, the need to
  remotely manage user applications life cycle as well as the need for
  large-scale deployments and adequate security.</para>

  <para>With this second release of the OSGi Residential Specification we
  introduce new specifications for abstracting devices, sensors, actuators,
  etc. from their corresponding communication protocols and facilitate the
  development of new innovative application and services. This release also
  contains specifications that address device connectivity via the EnOcean
  wireless protocol, USB and serial port. With the Resource Monitoring
  Specification, resources consumed by bundles can be monitored in order to
  fairly share resources and preserve the overall quality of service. The
  Network Interface Information Service Specification enables dynamic
  discovery of changes in the network interface.</para>

  <para>It is not suggested, or expected, that a solution will support all
  listed specifications. More likely, platform providers define their specific
  runtime environment. It is highly recommended to choose the mandatory and
  optional services defined by the <xref linkend="i435333"/> as a basis. A
  solution can further include other core and compendium services that are not
  listed as part the Residential Specification.</para>

  <section>
    <title>Overview of the Residential Specifications</title>

    <section>
      <title>Remote Management</title>

      <para>Support for remotely managing the service and their applications
      is essential to all systems that are installed on customer's premises.
      The specification therefore has special focus on large scale remote
      management of the OSGi Framework. The architecture provides a solution
      to allow management over different protocols although the primary focus
      is to allow the use Broadband Forum's suite of specifications on an OSGi
      residential gateway. This section introduces the related
      specifications.</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Dmt Admin Service Specification - </emphasis>The Dmt
          Admin Service specification provides an API for a remote manager to
          manage the device and its diverse services running on it. The Dmt
          Admin provides a generic tree structure, the Device Management Tree
          (DMT), to a Protocol Adapter. The nodes of those trees are
          implemented by the devices and services. Different Protocol Adapters
          can leverage the same DMT for different protocols. The Dmt Admin
          service also provides guidelines for object models that can be made
          available over different protocols. For more details see the <xref linkend="service.dmt"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Residential Device Management</emphasis> - This
          specification defines a Residential Management Tree, the RMT. This
          tree provides a general Dmt Admin object model that allows browsing
          and managing the OSGi Framework remotely over different Protocol
          Adapters. The RMT provides access to the Framework and the Log
          service. It also provides a filter function on top of Dmt Admin. See
          the <xref linkend="dmtree.residential"/> for details.</para>
        </listitem>

        <listitem>
          <para><emphasis>TR-157a3 Software Module</emphasis> - <xref linkend="i434640"/> has defined a generic model for mapping software
          modules in <xref linkend="i437933"/>. This specification provides a
          recommended mapping for the generic concepts to the OSGi Framework
          concepts. See <xref linkend="tr157softwaremodules"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>TR-069 Connector Service Specification</emphasis> -
          The Dmt Admin service and the TR-069 protocol have different
          semantics and primitives. This specification contains the <xref linkend="service.tr069todmt"/>. This specification provides an API
          based on the TR-069 Remote Procedure Calls concept that is
          implemented on top of Dmt Admin. This connector supports data
          conversion and the object modeling constructs defined in the Dmt
          Admin service, <xref linkend="service.dmt.osgiobjectmodeling"/>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Configuration, Monitoring and Management Services</title>

      <para>The OSGi Framework is unique in that it does not hide anything,
      all aspects are manageable from the system itself. To locally manage the
      system, the following services are available:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Conditional Permission Admin Service
          Specification</emphasis> - The Conditional Permission Admin service
          allows an operator to control the Java Permissions to be granted to
          the bundles running on the OSGi Framework using a condition based
          model. See <xref linkend="intro.core.release" xrefstyle="template:%t"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Permission Admin Service Specification</emphasis> -
          The Permission Admin service allows an operator to control the Java
          Permissions to be granted to the bundles running on the OSGi
          Framework based on the bundle location. Permission Admin has been
          superseded by Conditional Permission Admin, but is included for
          backwards compatibility. See <xref linkend="intro.core.release" xrefstyle="template:%t"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>URL Handlers Service Specification</emphasis> - This
          specification standardizes the mechanism to extend the Java run-time
          with new URL schemes and content handlers. Dynamically extending the
          URL schemes that are supported in an OSGi Framework is a very
          powerful concept to provide more functionality to existing
          applications. See <xref linkend="intro.core.release" xrefstyle="template:%t"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>User Admin Service Specification</emphasis> - The
          User Admin Service specification provides authorization for OSGi
          Framework actions based on authenticated users instead of using the
          Java code-based permission model. See the <xref linkend="service.useradmin"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Initial Provisioning Specification</emphasis> - The
          Initial Provisioning specification defines how a Management Agent
          and other initial bundles can be deployed on an uninitialized OSGi
          Framework. It gives a structured view of the problems and their
          corresponding resolution methods. The purpose of this specification
          is to enable the management of a Framework by an operator, and
          (optionally) to hand over the management of the Framework later to
          another operator. See the <xref linkend="service.provisioning"/> for
          more details.</para>
        </listitem>

        <listitem>
          <para><emphasis>Configuration Admin Service Specification</emphasis>
          - The Configuration Admin service allows an operator or an
          application bundle developer to set the configuration information of
          bundles. See <xref linkend="service.cm"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Metatype Service Specification</emphasis> - The
          Metatype specification defines interfaces that allow bundle
          developers to describe attribute types in a computer readable form
          using metadata. It is mostly used in conjunction with the
          Configuration Admin Service. See <xref linkend="service.metatype"/>
          for details.</para>
        </listitem>

        <listitem>
          <para><emphasis>Network Interface Information Service
          Specification</emphasis> - The Network Interface Information Service
          specification defines services that provides a standard way for
          bundles to receive notifications about changes in the network
          interfaces and IP addresses. See <xref linkend="service.network"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Resource Monitoring Specification</emphasis> - The
          Resource Monitoring specification defines an API for applications to
          monitor hardware resources consumed by any set of bundles. Monitored
          data may enable applications to take decisions on management actions
          to apply. Resource management actions are mentioned as examples in
          this chapter including actions on the lifecycle of components,
          bundles, the framework and the JVM, Java threads, and the raising of
          exceptions. See <xref linkend="service.resourcemonitoring"/>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Component Models</title>

      <para>Component models allow the code in bundles to remain unaware of
      OSGi API by using Dependency Injection (DI) while still providing full
      support for the OSGi service model.</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Declarative Services Specification</emphasis> - The
          Declarative Services specification provides dependency injection for
          services. It handles the service life cycle dynamics by notifying
          the component or managing the components life cycle. See <xref linkend="service.component"/>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>HTTP and Servlets</title>

      <para>HTTP Server and Servlets functions are often needed for the
      residential gateway. The Specification contains this
      specification:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Http Service Specification</emphasis> - Developers
          typically need to develop communication and user interface solutions
          for standard technologies such as HTTP, HTML, XML, and servlets. See
          the <xref linkend="service.http"/>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Event models</title>

      <para>The OSGi service model is based on synchronous APIs. Support for
      asynchronous invocations and event driven interactions usually involves
      the definition of listeners. However, this model does not scale well for
      fine grained events that must be dispatched to many different handlers.
      The Specification therefore contains the Event Admin Service
      Specification:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Event Admin Service Specification</emphasis> - The
          Event Admin service provides an inter-bundle communication
          mechanism. It is based on a event publish and subscribe model,
          popular in many message based systems. See <xref linkend="service.event"/>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Device Interoperability</title>

      <para>A residential gateway can directly attach devices, for example via
      a USB adapter, through a home network. There is therefore a need to have
      a unified device abstraction, discovery and control model. For this
      purpose, this Specification contains the following services:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Device Access Specification</emphasis> - The Device
          Access specification supports the coordination of automatic
          detection and attachment of existing devices on an OSGi Framework,
          facilitates hot-plugging and -unplugging of new devices, and
          downloads and installs device drivers on demand. See <xref linkend="service.device"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>UPnP™ Device Service Specification</emphasis> - The
          UPnP specification specifies how OSGi bundles can be developed that
          inter-operate with UPnP (Universal Plug and Play) devices and UPnP
          control points. The specification is based on <xref linkend="i437630"/>. See <xref linkend="service.upnp"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Device Abstraction Layer Specification</emphasis> -
          The Device Abstraction Layer specification provides a unified
          interface for application developers to interact with sensor,
          devices, etc. connected to a gateway. Application developers don't
          have to deal with protocol specific details which simplifies the
          development of their applications. See <xref linkend="service.dal"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Device Abstraction Layer Functions
          Specification</emphasis> - The Device Abstraction Layer Functions
          specification defines a minimal set of basic device operations and
          the related properties. They can be extended or replaced to cover
          domain specific scenarios. The set is not closed and can be
          incorporated with vendor specific functions. There is support for
          control, monitoring and metering information. See <xref linkend="service.dal.functions"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>EnOcean Device Service Specification</emphasis> -
          This specification defines how OSGi bundles can be developed to
          discover and control EnOcean devices on the one hand, and act as
          EnOcean devices and interoperate with EnOcean clients on the other
          hand. In particular, a Java mapping is provided for the standard
          representation of EnOcean devices called EnOcean Equipment Profile
          (EEP). See <xref linkend="service.enocean"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>USB Information Device Category
          Specification</emphasis> - The USB Information Device Category
          specification defines a new device category for USB devices in order
          to handle the integration of communication protocols, for example,
          ZigBee and Z-Wave via USB dongles. See <xref linkend="service.usbinfo"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Serial Device Service Specification</emphasis> - The
          Serial Device Service specification defines an API to communicate
          with controllers connected to a serial port. See <xref linkend="service.serial"/>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Miscellaneous Supporting Services</title>

      <para>Services providing solutions to common infrastructure requirements
      include:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Log Service Specification</emphasis> - Provides a
          general purpose message logger for the OSGi Framework. See the <xref linkend="service.log"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>XML Parser Service Specification</emphasis> -
          Addresses how the classes defined in JAXP can be used in an OSGi
          Framework. See <xref linkend="util.xml"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Promises Specification</emphasis> - An asynchronous
          programming model by which clients retrieve the result of the
          asynchronous task. See <xref linkend="util.promise"/>.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Version Information</title>

    <para>This document is the Residential Specification for the OSGi
    Residential <xref endterm="residential.book-release" linkend="residential.book"/>.</para>

    <section xml:id="intro.core.release">
      <title>OSGi Core Release 6</title>

      <para>This specification is based on the OSGi Core Release 6. This
      specification can be downloaded from:</para>

      <programlisting>http://www.osgi.org/Specifications/HomePage</programlisting>
    </section>

    <section>
      <title>Component Versions</title>

      <para>Components in this specification have their own specification
      version, independent of this specification. The following table
      summarizes the packages and specification versions for the different
      subjects.</para>

      <table pgwide="1">
        <title>Packages and versions</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="2.5*"/>

          <colspec colnum="3" colwidth="0.8*"/>

          <thead>
            <row>
              <entry>Item</entry>

              <entry>Package(s)</entry>

              <entry>Version</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><xref linkend="dmtree.residential" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.dmt.residential"/></code><superscript>*</superscript></entry>

              <entry><code><xref endterm="org.osgi.dmt.residential-version" linkend="dmtree.residential"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.log" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.log"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.log-version" linkend="service.log"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.http" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.http"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.http-version" linkend="service.http"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.device" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.device"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.device-version" linkend="service.device"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.cm" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.cm"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.cm-version" linkend="service.cm"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.metatype" xrefstyle="template:%n %t"/></entry>

              <entry><para><code><xref linkend="org.osgi.service.metatype"/></code></para><para><code><xref linkend="org.osgi.service.metatype.annotations"/></code></para></entry>

              <entry><code><xref endterm="org.osgi.service.metatype-version" linkend="service.metatype"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.useradmin" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.useradmin"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.useradmin-version" linkend="service.useradmin"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.provisioning" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.provisioning"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.provisioning-version" linkend="service.provisioning"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.upnp" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.upnp"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.upnp-version" linkend="service.upnp"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.component" xrefstyle="template:%n %t"/></entry>

              <entry><para><code><xref linkend="org.osgi.service.component"/></code></para><para><code><xref linkend="org.osgi.service.component.annotations"/></code></para><para><code><xref linkend="org.osgi.service.component.runtime"/></code></para><para><code><xref linkend="org.osgi.service.component.runtime.dto"/></code></para></entry>

              <entry><code><xref endterm="org.osgi.service.component-version" linkend="service.component"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.event" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.event"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.event-version" linkend="service.event"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.dmt" xrefstyle="template:%n %t"/></entry>

              <entry><para><code><xref linkend="org.osgi.service.dmt"/></code></para><para><code><xref linkend="org.osgi.service.dmt.notification"/></code></para><para><code><xref linkend="org.osgi.service.dmt.notification.spi"/></code></para><para><code><xref linkend="org.osgi.service.dmt.security"/></code></para><para><code><xref linkend="org.osgi.service.dmt.spi"/></code></para></entry>

              <entry><code><xref endterm="org.osgi.service.dmt-version" linkend="service.dmt"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.tr069todmt" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.tr069todmt"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.tr069todmt-version" linkend="service.tr069todmt"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.namespaces" xrefstyle="template:%n %t"/></entry>

              <entry><para><code><xref linkend="org.osgi.namespace.contract"/></code></para><para><code><xref linkend="org.osgi.namespace.extender"/></code></para><para><code><xref linkend="org.osgi.namespace.implementation"/></code></para><para><code><xref linkend="org.osgi.namespace.service"/></code></para></entry>

              <entry><code><xref endterm="service.namespaces-version" linkend="service.namespaces"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.enocean" xrefstyle="template:%n %t"/></entry>

              <entry><para><code><xref linkend="org.osgi.service.enocean"/></code></para><para><code><xref linkend="org.osgi.service.enocean.descriptions"/></code></para></entry>

              <entry><code><xref endterm="org.osgi.service.enocean-version" linkend="service.enocean"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.dal" xrefstyle="template:%n %t"/></entry>

              <entry><para><code><xref linkend="org.osgi.service.dal"/></code></para></entry>

              <entry><code><xref endterm="org.osgi.service.dal-version" linkend="service.dal"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.dal.functions" xrefstyle="template:%n %t"/></entry>

              <entry><para><code><xref linkend="org.osgi.service.dal.functions"/></code></para><para><code><xref linkend="org.osgi.service.dal.functions.data"/></code></para></entry>

              <entry><code><xref endterm="org.osgi.service.dal.functions-version" linkend="service.dal.functions"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.network" xrefstyle="template:%n %t"/></entry>

              <entry><para><code><xref linkend="org.osgi.service.networkadapter"/></code></para></entry>

              <entry><code><xref endterm="org.osgi.service.networkadapter-version" linkend="service.network"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.resourcemonitoring" xrefstyle="template:%n %t"/></entry>

              <entry><para><code><xref linkend="org.osgi.service.resourcemonitoring"/></code></para><para><code><xref linkend="org.osgi.service.resourcemonitoring.monitor"/></code></para></entry>

              <entry><code><xref endterm="org.osgi.service.resourcemonitoring-version" linkend="service.resourcemonitoring"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.usbinfo" xrefstyle="template:%n %t"/></entry>

              <entry><para><code><xref linkend="org.osgi.service.usbinfo"/></code></para></entry>

              <entry><code><xref endterm="org.osgi.service.usbinfo-version" linkend="service.usbinfo"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.serial" xrefstyle="template:%n %t"/></entry>

              <entry><para><code><xref linkend="org.osgi.service.serial"/></code></para></entry>

              <entry><code><xref endterm="org.osgi.service.serial-version" linkend="service.serial"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="util.xml" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.util.xml"/></code></entry>

              <entry><code><xref endterm="org.osgi.util.xml-version" linkend="util.xml"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="util.promise" xrefstyle="template:%n %t"/></entry>

              <entry><para><code><xref linkend="org.osgi.util.promise"/></code></para><para><code><xref linkend="org.osgi.util.function"/></code></para></entry>

              <entry><code><xref endterm="org.osgi.util.promise-version" linkend="util.promise"/></code></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para><superscript>*</superscript> - This is not a Java package but
      contains DMT Types.</para>

      <para>When a component is represented in a bundle, a
      <code>version</code> attribute is needed in the declaration of the
      Import-Package or Export-Package manifest headers.</para>
    </section>
  </section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i310173"><title>Bradner, S., Key words for use in
      RFCs to Indicate Requirement
      Levels</title>http://www.ietf.org/rfc/rfc2119.txt, March
      1997.</bibliomixed>

      <bibliomixed xml:id="i434636"><title>Home Gateway
      Initiative</title>http://www.homegatewayinitiative.org</bibliomixed>

      <bibliomixed xml:id="i435333"><title>HG Requirements for HGI Open
      Platform
      2.0</title>http://www.homegatewayinitiative.org/publis/HGI-RD048-HG_Requirements_for_HGI_Open_Platform_2_0_published_text.pdf</bibliomixed>

      <bibliomixed xml:id="i434644"><title>UPnP™
      Forum</title>http://upnp.org</bibliomixed>

      <bibliomixed xml:id="i434640"><title>Broadband
      Forum</title>http://www.broadband-forum.org</bibliomixed>

      <bibliomixed xml:id="i437630"><title>UPnP Device Architecture
      1.0</title>http://www.upnp.org/specs/arch/UPnP-arch-DeviceArchitecture-v1.0.pdf</bibliomixed>

      <bibliomixed xml:id="i437933"><title>TR-157 Amendment 3 Component
      Objects for
      CWMP</title>http://www.broadband-forum.org/technical/download/TR-157_Amendment-3.pdf</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="2" revision="$Id: 03a9aa82677ecc92395625823cd19c588d2bae26 $" version="5" xml:id="dmtree.residential" xml:base="002/dmtree.residential.xml">
  <title>Residential Device Management Tree Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.dmt.residential-version" linkend="org.osgi.dmt.residential"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The chapter defines the Device Management Tree (DMT) for residential
    applications called the <emphasis>Residential Management Tree</emphasis>
    (RMT). This RMT is based on the <xref linkend="service.dmt"/>. The RMT
    allows remote managers to manage the residential device through an
    abstract tree. As this tree is an abstract representation, different
    management protocols can use the same underlying management components,
    the Dmt Admin Plugins, in the OSGi framework.</para>

    <para>This chapter requires full understanding of the concepts in the
    <xref linkend="service.dmt"/> and uses its terminology.</para>

    <section>
      <title>Essentials</title>

      <para>The following essentials are associated with the Residential
      Management Tree specification:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Complete</emphasis> - The RMT must cover all
          functionality to completely manage an OSGi Framework as defined by
          <xref linkend="intro.core.release" xrefstyle="template:%t"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Performance</emphasis> - The RMT runs on devices
          with limited resources.</para>
        </listitem>

        <listitem>
          <para><emphasis>Searchable</emphasis> - Provide an efficient way to
          search the RMT remotely.</para>
        </listitem>

        <listitem>
          <para><emphasis>Services</emphasis> - Provide efficient access to
          standardized services like the Log Service.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Remote Manager</emphasis> - The entity that remotely
          controls an OSGi Framework.</para>
        </listitem>

        <listitem>
          <para><emphasis>Management Agent</emphasis> - An entity running on
          the device that is responsible for the management of the local OSGi
          Framework. It usually acts as a proxy for a Remote Manager.</para>
        </listitem>

        <listitem>
          <para><emphasis>Protocol Adapter</emphasis> - Communicates with a
          Remote Manager and translates the protocol instructions to
          instructions to a local Management Agent.</para>
        </listitem>

        <listitem>
          <para><emphasis>DMT</emphasis> - The Device Management Tree. This is
          the general structure available through the Dmt Admin
          service.</para>
        </listitem>

        <listitem>
          <para><emphasis>RMT</emphasis> - The Residential Management Tree.
          This is the part of the DMT that is involved with residential
          management.</para>
        </listitem>
      </itemizedlist>

      <figure xml:id="i758771">
        <title>Device Management Architecture</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.926in" contentwidth="5.236in" fileref="device-management-architecture.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>The Residential Management Tree</title>

    <para>The <emphasis>OSGi</emphasis> node is the root node for OSGi
    specific information. This OSGi node can be placed anywhere in the Device
    Management Tree and acts as parent to all the top level nodes in this
    specification. Therefore, in this specification the parent node of, for
    example, the <xref linkend="org.osgi.dmt.residential.Framework" xrefstyle="hyperlink"/> node is referred to as <xref linkend="org.osgi.dmt.residential.-" xrefstyle="hyperlink"/>, which
    effectively represents the OSGi node. The description of the nodes are
    using the types defined in <xref linkend="service.dmt.osgiobjectmodeling"/>.</para>

    <para>The value of <code>$</code> for a specific system can be defined
    with the following Framework property:</para>

    <programlisting>org.osgi.dmt.residential</programlisting>

    <para>For this specifications, the RMT Consists of the following top level
    nodes:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.dmt.residential.Framework" xrefstyle="hyperlink"/> - Managing the local Framework</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.dmt.residential.Filter" xrefstyle="hyperlink"/> - Searching nodes in the DMT</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.dmt.service.log.Log" xrefstyle="hyperlink"/> - Access to the log</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Managing Bundles</title>

    <para>The <xref linkend="org.osgi.dmt.residential.Framework" xrefstyle="hyperlink"/> node provides a remote management model for
    managing the life cycle of bundles and inspecting the Framework's
    state.</para>

    <para>To change the state, for example install a new bundle, requires an
    atomic session on at least the Framework node. The model is constructed to
    reflect the requested state. When the session is committed, the underlying
    Plugin must effectuate these requested states into the real state.</para>

    <para>For example, to install a bundle it is first necessary to create a
    new <xref linkend="org.osgi.dmt.residential.Bundle" xrefstyle="hyperlink"/> child node. The <xref linkend="org.osgi.dmt.residential.Bundle" xrefstyle="hyperlink"/> node is
    a <code>MAP</code> node, the name of the child node is the
    <code>location</code> of the bundle as given in the
    <code>installBundle(location,input stream)</code> method and returned from
    the <code>getLocation()</code> method.</para>

    <para>This location should not be treated as the actual URL of the bundle,
    the location is better intended to be used a management name for the
    bundle as the remote manager can choose it. It is normally best to make
    this name a reverse domain name, for example <code>com.acme.admin</code>.
    The name " <code>System Bundle</code>" is a reserved name for the system
    bundle. The Framework management plugin must therefore not treat the
    location as a URL.</para>

    <para>Creating the child node has no effect as long as the session is not
    committed. This new <code>Bundle</code> node automatically gets the
    members defined in the <xref linkend="org.osgi.dmt.residential.Bundle" xrefstyle="hyperlink"/> type.</para>

    <para>The <xref linkend="org.osgi.dmt.residential.Bundle.URL--" xrefstyle="hyperlink"/> node should be set to the download URL, the URL
    used to download the JAR file from. The <xref linkend="org.osgi.dmt.residential.Bundle.URL--" xrefstyle="hyperlink"/>
    node is used as the download URL for an install operation (after the node
    is created newly) or the update location when the node is changed after
    the bundle had been installed in a previous session. Creating a new <xref linkend="org.osgi.dmt.residential.Bundle" xrefstyle="hyperlink"/> node
    without setting the URL must generate an error when the session is
    committed.</para>

    <para>To start this newly installed bundle, the manager can set the <xref linkend="org.osgi.dmt.residential.Bundle.RequestedState--" xrefstyle="hyperlink"/> to <xref linkend="org.osgi.dmt.residential.Bundle.ACTIVE" xrefstyle="hyperlink"/>.
    If this bundle needs to be started when the framework is restarted, then
    the <xref linkend="org.osgi.dmt.residential.Bundle.AutoStart--" xrefstyle="hyperlink"/> node can be set to <code>true</code>. If there
    bundles to be uninstalled then their <xref linkend="org.osgi.dmt.residential.Bundle.RequestedState--" xrefstyle="hyperlink"/> node must be set to <xref linkend="org.osgi.dmt.residential.Bundle.UNINSTALLED" xrefstyle="hyperlink"/> as it is not possible to delete a <xref linkend="org.osgi.dmt.residential.Bundle" xrefstyle="hyperlink"/> node.
    The <xref linkend="org.osgi.dmt.residential.Bundle.RequestedState--" xrefstyle="hyperlink"/> must be applied after the bundle has been
    installed or updated. An uninstalled bundle will be automatically removed
    from the RMT.</para>

    <para>The <xref linkend="org.osgi.dmt.residential.Bundle.RequestedState--" xrefstyle="hyperlink"/> node is really the requested state, depending on
    start levels and other existing conditions the bundle can either follow
    the requested state or have another state if, for example, its start level
    is not met. The <code>RequestedState</code> must be stored persistently
    between invocations, its initial value is <xref linkend="org.osgi.dmt.residential.Bundle.INSTALLED" xrefstyle="hyperlink"/>.</para>

    <para>The manager can create any number of new <xref linkend="org.osgi.dmt.residential.Bundle" xrefstyle="hyperlink"/> nodes to
    install a number of bundles at the same time during commit. It can also
    change the life cycle of existing bundles. None of these changes must have
    any effect until the session is committed.</para>

    <para>If the session is finally committed, the Plugin must compare the
    state in the Dmt Admin tree with the actual state and update the framework
    accordingly. The order in which the operations occur is up to the
    implementation except for framework operations, they must always occur
    last. After bundles have been installed, uninstalled, or updated, the
    Plugin must refresh all the packages to ensure that the remote management
    system sees a consistent state.</para>

    <para>Downloading the bundles from a remote system can take substantial
    time. As the commit is used synchronously, it is sometimes advisable to
    download the bundles to the device before they are installed.</para>

    <para>If any error occurs, any changes that were made since the beginning
    of the last transaction point must be rolled back. An error should be
    reported. The remote manager therefore gets an atomic behavior, either all
    changes succeed or all fail. A manager should also be aware that if its
    own bundle, or any of its dependencies, is updated it will be stopped and
    will not be able to properly report the outcome to the management system,
    either a failure or success.</para>

    <section>
      <title>Bundle Life Cycle Example</title>

      <para>For example, the following code installs <code>my_bundle</code>,
      updates <code>up_bundle</code>, and uninstalls
      <code>old_bundle</code>:</para>

      <programlisting>String $ = ... // get the OSGi node
DmtSession session = admin.getSession($ + "/Framework",
                DmtSession.LOCK_TYPE_ATOMIC);
try {
  session.createInteriorNode("Bundle/my_bundle");
  session.setNodeValue("Bundle/my_bundle/URL", new DmtData(
    "http://www.example.com/bundles/my_bundle.jar"));
  session.setNodeValue("Bundle/my_bundle/AutoStart",
    DmtData.TRUE_VALUE);
  session.setNodeValue("Bundle/my_bundle/RequestedState",
    new DmtData("ACTIVE"));

  session.setNodeValue("Bundle/up_bundle/URL", new DmtData(
    "http://www.example.com/bundles/up_bundle-2.jar"));

  session.setNodeValue("Bundle/old_bundle/RequestedState",
    new DmtData("UNINSTALLED"));
  try {
    session.commit();
  } catch (Exception e) {
     // failure ...
     log....
  }
} catch (Exception e) {
  session.rollback();
  log...
}</programlisting>
    </section>

    <section>
      <title>Framework Restart</title>

      <para>There are no special operations for managing the life cycle of the
      Framework, these operations are done on the System Bundle, or bundle 0.
      The framework can be stopped or restarted:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Restart</emphasis> - Restarting is an update,
          requiring the <xref linkend="org.osgi.dmt.residential.Bundle.URL--" xrefstyle="hyperlink"/> to be set to a new URL. This must shutdown
          the framework after the commit has succeeded.</para>
        </listitem>

        <listitem>
          <para><emphasis>Stopping</emphasis> - Stopping is setting the <xref linkend="org.osgi.dmt.residential.Bundle.RequestedState--" xrefstyle="hyperlink"/> to <xref linkend="org.osgi.dmt.residential.Bundle.INSTALLED" xrefstyle="hyperlink"/></para>
        </listitem>
      </itemizedlist>

      <para>If the <xref linkend="org.osgi.dmt.residential.Bundle.URL--" xrefstyle="hyperlink"/> node has changed, the <xref linkend="org.osgi.dmt.residential.Bundle.RequestedState--" xrefstyle="hyperlink"/> will be ignored and the framework must only be
      restarted.</para>

      <para>Sessions that modify nodes inside the <xref linkend="org.osgi.dmt.residential.Framework" xrefstyle="hyperlink"/>
      sub-tree must always be atomic and opened on the <xref linkend="org.osgi.dmt.residential.Framework" xrefstyle="hyperlink"/>
      node. The Data Plugin managing the <xref linkend="org.osgi.dmt.residential.Framework" xrefstyle="hyperlink"/>
      node is only required to handle a single simultaneous atomic session for
      its whole sub-tree.</para>

      <para>For example, the following code restarts the framework after the
      commit has succeeded.</para>

      <programlisting>DmtSession session = admin.getSession($ +"/Framework",
                DmtSession.LOCK_TYPE_ATOMIC);
session.setNodeValue("Bundle/System Bundle/URL", 
  new DmtData(""));
session.commit();</programlisting>
    </section>

    <section>
      <title>Access to Wiring</title>

      <para>During runtime a bundle is wired to several different entities,
      other bundles, fragments, packages, and services. The framework defines
      a general Requirement-Capability model and this model is reflected in
      the Wiring API in <xref linkend="dmtree.residential.extref.1"/>. The
      Requirement-Capability model maps to a very generic way of describing
      wires between requirers and providers that is applicable to all of the
      OSGi constructs.</para>

      <para>The Core defines namespaces for:</para>

      <itemizedlist>
        <listitem>
          <para><code>osgi.wiring.bundle</code> - The namespace for the
          Require-Bundle header. It wires the bundle with the Require-Bundle
          header to the bundle with the required Bundle-SymbolicName and
          Bundle-Version header.</para>
        </listitem>

        <listitem>
          <para><code>osgi.wiring.host</code> - The namespace for the
          Fragment-Host header. It wires from bundle with the Fragment-Host
          header to the bundle with the required Bundle-SymbolicName and
          Bundle-Version header.</para>
        </listitem>

        <listitem>
          <para><code>osgi.wiring.package</code> - The namespace for the
          Import/Export-Package header. It wires from bundle with the
          Import-Package header to the bundle with the Export-Package
          header.</para>
        </listitem>
      </itemizedlist>

      <para>In the Core API, the wiring is based on the Bundle revisions.
      However, this specification requires that all bundles are refreshed
      after a management operation to ensure a consistent wiring state. The
      management model therefore ignores the Bundle Revision and instead
      provides wiring only for bundles since the manager is unable to see
      different revision of a bundle anyway. The general
      Requirement-Capability model is depicted in <xref linkend="i730417"/>.</para>

      <figure pgwide="1" xml:id="i730417">
        <title>Requirements and Capabilities and their Wiring</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.800in" contentwidth="6.199in" fileref="req-cap-wiring.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The core does not specify a namespace for services. However,
      services can also be modeled with requirements capabilities. The
      registrar is the provider and the service properties are the capability.
      The getter is the requirer, its filter is the requirement. This
      specification therefore also defines a namespaces for services:</para>

      <programlisting>osgi.wiring.rmt.service</programlisting>

      <para>This namespace is defined in <xref linkend="i738135"/>.</para>

      <para>To access the wiring, each <xref linkend="org.osgi.dmt.residential.Bundle" xrefstyle="hyperlink"/> node
      has a <xref linkend="org.osgi.dmt.residential.Bundle.Wires--" xrefstyle="hyperlink"/> node. This is a <code>MAP</code> of
      <code>LIST</code> of <xref linkend="org.osgi.dmt.residential.Wire" xrefstyle="hyperlink"/>. The key of the <code>MAP</code> node is the
      name of the namespace, that is, the wires are organized by namespace.
      This provides convenient access to all wires of a given namespace. The
      value of the <code>MAP</code> node is a <code>LIST</code> node,
      providing sequential access to the actual wires.</para>

      <para>A <xref linkend="org.osgi.dmt.residential.Wire" xrefstyle="hyperlink"/> node provides the following information:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.dmt.residential.Wire.Namespace--" xrefstyle="hyperlink"/> - The namespace of the wire</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.dmt.residential.Wire.Requirement--" xrefstyle="hyperlink"/> - The requirement that cause the wire</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.dmt.residential.Wire.Capability--" xrefstyle="hyperlink"/> - The capability that satisfied the
          wire</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.dmt.residential.Wire.Requirer--" xrefstyle="hyperlink"/> - The location of the bundle that required
          the wire</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.dmt.residential.Wire.Provider--" xrefstyle="hyperlink"/> - The location of the bundle that satisfied
          the requirement</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Wiring Example</title>

      <para>The following example code demonstrates how the wires can be
      printed out:</para>

      <programlisting>String prefix ="Bundle/my_bundle/Wires/osgi.wiring.package";
String [] wires = session.getChildNodeNames(prefix);
for ( String wire : wires ) {
  String name = session.getNodeValue(prefix + "/" 
     + wire + "/Capability/Attribute/osgi.wiring.package").getString();
  String provider = session.getNodeValue(prefix + "/" 
     + wire + "/Provider" ).getString();
  String requirer = session.getNodeValue(prefix + "/" 
     + wire + "/Requirer" ).getString();
  System.out.printf("%-20s %-30s %s\n", name, provider, requirer);
}</programlisting>
    </section>
  </section>

  <section>
    <title>Filtering</title>

    <para>Frequently it is necessary to search through the tree of nodes for
    nodes matching specific criteria. Having to use Java to do this filtering
    can become cumbersome and impossible if the searching has to happen
    remotely. For that reason, the RMT contains a <xref linkend="org.osgi.dmt.residential.Filter" xrefstyle="hyperlink"/> node.
    This node allows a manager to specify a <xref linkend="org.osgi.dmt.residential.Filter.Target--" xrefstyle="hyperlink"/>
    and a <xref linkend="org.osgi.dmt.residential.Filter.Filter--" xrefstyle="hyperlink"/>. The <xref linkend="org.osgi.dmt.residential.Filter.Target--" xrefstyle="hyperlink"/>
    is an absolute URI that defines a set of nodes that the Filter Plugin must
    search. This set is defined by allowing wildcards in the target. A single
    asterisk (<code>'*' \u002A</code>) matches a single level, the minus sign
    (<code>'-' \u002C</code>) specifies any number of levels and must not be
    used at the end of the URI. This implies that there is always a
    <emphasis>final node</emphasis>. The reason that a minus sign must not be
    last is that the final node's type would be undefined, any node on any
    sub-level would match.</para>

    <para>The <xref linkend="org.osgi.dmt.residential.Filter.Target--" xrefstyle="hyperlink"/> node must be specified as an absolute URI that
    must always end in a solidus (<code>'/' \u002F</code>) to signify that it
    represents a path to an interior node. The URI is absolute because the
    Filter is specified in a persistent node. It is possible to open a
    session, create the filter specification, close the session, and then open
    a new session, and use the earlier specified <xref linkend="org.osgi.dmt.residential.Filter.Target--" xrefstyle="hyperlink"/>. As the two involved session do not have to have
    the same session, the base could differ, making it hard to use relative
    addressing. However, the result is always unique to a session. It is
    therefore possible to use relative URIs in the read out of the
    result.</para>

    <para>For example, the tree in <xref linkend="i734027"/> defines a
    sub-tree.</para>

    <figure xml:id="i734027">
      <title>Example Sub-Tree</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.958in" contentwidth="6.255in" fileref="subtree-example.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The following table shows a number of example targets on the
    previous sub-tree and their resulting final nodes, assuming the result is
    read in a session open on <code>./A</code>.</para>

    <table>
      <title>Example Target and results on a session opened on ./A</title>

      <tgroup cols="2">
        <colspec colnum="1" colwidth="1*"/>

        <colspec colnum="2" colwidth="4*"/>

        <thead>
          <row>
            <entry>Target</entry>

            <entry>Final nodes</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>./A/*/</code></entry>

            <entry><code>B, C</code></entry>
          </row>

          <row>
            <entry><code>./A/*/E/*/</code></entry>

            <entry><code>C/E/F, C/E/G</code></entry>
          </row>

          <row>
            <entry><code>./A/-/G/</code></entry>

            <entry><code>C/D/G, C/E/G</code></entry>
          </row>

          <row>
            <entry><code>./A/*/*/*/</code></entry>

            <entry><code>C/D/G, C/E/F, C/E/G</code></entry>
          </row>

          <row>
            <entry><code>./A/-/*/</code></entry>

            <entry><para>This is an error,<code>./A/-/*/</code> is the same as
            <code>./A/-/</code>, which is not allowed. </para></entry>
          </row>

          <row>
            <entry><code>./A/*/*/</code></entry>

            <entry><code>C/D, C/E</code></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The <xref linkend="org.osgi.dmt.residential.Filter.Filter--" xrefstyle="hyperlink"/> specifies a standard OSGi Filter expression that
    is applied to the final nodes. If no filter is specified then all final
    nodes match. However, when there is a filter specified it is applied
    against the final node and only the final nodes that are matching the
    filter as included in the result.</para>

    <para>A node is matched against a filter by using some of its children as
    properties. The properties of a node are defined by:</para>

    <itemizedlist>
      <listitem>
        <para>Primitive child nodes, or</para>
      </listitem>

      <listitem>
        <para><code>LIST</code> nodes that have primitive as child nodes. Such
        nodes must be treated as multi-valued properties.</para>
      </listitem>
    </itemizedlist>

    <para>The matching rules in the filter must follow the standard OSGi
    Filter rules. If the filter matches such a node then it must be available
    as a session relative URI in the <xref linkend="org.osgi.dmt.residential.Filter.ResultUriList--" xrefstyle="hyperlink"/> node. The relative URIs are listed in the <xref linkend="org.osgi.dmt.residential.Filter.ResultUriList--" xrefstyle="hyperlink"/>.</para>

    <para>The result nodes must only include nodes that satisfy the following
    conditions:</para>

    <itemizedlist>
      <listitem>
        <para>The node must match the <xref linkend="org.osgi.dmt.residential.Filter.Target--" xrefstyle="hyperlink"/> node's URI specification</para>
      </listitem>

      <listitem>
        <para>The node must be visible in the current session</para>
      </listitem>

      <listitem>
        <para>The node must not reside in the Filter sub-tree</para>
      </listitem>

      <listitem>
        <para>The node must be an interior node</para>
      </listitem>

      <listitem>
        <para>The caller must have access to the node</para>
      </listitem>

      <listitem>
        <para>It must be possible to get all the values of the child nodes
        that are necessary for filter matching</para>
      </listitem>

      <listitem>
        <para>The node must match the filter if a filter is specified</para>
      </listitem>
    </itemizedlist>

    <para>The result is also available as a sub-tree under the <xref linkend="org.osgi.dmt.residential.Filter.Result--" xrefstyle="hyperlink"/>
    node and can be traversed as sub-tree in <xref linkend="org.osgi.dmt.residential.Filter.Result--" xrefstyle="hyperlink"/>. This tree contains all the result nodes and their
    sub-tree. The results under the <code>Result</code> node are a snapshot
    and cannot be modified, they are read only. This result can be removed
    after the session is closed.</para>

    <section>
      <title>Example</title>

      <para>For example, the following code prints out the location of active
      bundles:</para>

      <programlisting>session.createInteriorNode("Filter/mq-1");
session.setNodeValue("Filter/mq-1/Target", 
  new DmtData($+"/Framework/Bundle/*/"));
session.setNodeValue("Filter/mq-1/Filter", new DmtData("(AutoStart=true)"));

String[] autostarted = session.getChildNodeNames(
   "Filter/mq-1/Result/Framework/Bundle");
System.out.println("Auto started bundles");
for ( String location : autostarted)
  System.out.println(location);

session.deleteNode("Filter/mq-1");</programlisting>
    </section>
  </section>

  <section>
    <title>Log Access</title>

    <para>The <code>Log</code> node provides access to the Log Service, the
    node contains a <code>LIST</code> of <code>LogEntry</code> nodes. The
    length of this list is implementation dependent. The list is sorted in
    most recent first order. This allows a manager to retrieve the latest
    logs. For example, the following code print out the latest 100 log
    entries:</para>

    <programlisting>DataSession session = admin.getSession($+"/Log/LogEntries");
try {
  for ( int i =0; i&lt;100; i++ ) {
    Date date = session.getNodeValue( i+"/Time").getDateTime();
    String message = session.getNodeValue( i+"/Message").getString();
    System.out.println( date + " " + message );
  }
} finally {
  session.close();
}</programlisting>
  </section>

  <section xml:id="i738135">
    <title>osgi.wiring.rmt.service Namespace</title>

    <para>This section defines a namespace for the Requirement-Capability
    model to maintain services through the standard wiring API. A service is a
    capability, the Capability attributes are the service properties. The
    bundle that gets the service has a requirement on that service.</para>

    <para>The filter of the service requirement is not the original filter
    since this is not possible to obtain reliably. Instead the filter must
    assert of the <code>service.id</code>, for example:
    <code>(service.id=123)</code>.</para>

    <para>The resulting filter is specified as the <code>filter:</code>
    directive on the Requirement. This is depicted in <xref linkend="i738141"/>.</para>

    <figure xml:id="i738141">
      <title>Requirements and Capabilities and their Wiring</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="0.839in" contentwidth="6.199in" fileref="service-req-cap-wiring.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The <code>osgi.wiring.rmt.service</code> attributes are defined in
    the following table.</para>

    <table pgwide="1">
      <title>osgi.wiring.rmt.service namespace</title>

      <tgroup cols="4">
        <colspec colnum="1" colwidth="3*"/>

        <colspec colnum="2" colwidth="1.5*"/>

        <colspec colnum="3" colwidth="3*"/>

        <colspec colnum="4" colwidth="6*"/>

        <thead>
          <row>
            <entry>Attribute Name</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.wiring.rmt.service</code></entry>

            <entry><code>String</code></entry>

            <entry><code>service.id</code></entry>

            <entry><para>The service id.</para></entry>
          </row>

          <row>
            <entry><code>objectClass</code></entry>

            <entry><code>String[]</code></entry>

            <entry><code>fqn</code></entry>

            <entry><para>Fully qualified name of the types under which this
            service is listed</para></entry>
          </row>

          <row>
            <entry><code>*</code></entry>

            <entry><code>*</code></entry>

            <entry><code>*</code></entry>

            <entry><para>Any service property</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section version="5" xml:base="002/../../../generated/residentialdmt/treesummary.xml">
  <title>Tree Summary</title>
  <programlisting>$                                          _G__  NODE                      1   P
</programlisting>
<section>
  <title>Framework</title>
  <programlisting>  Framework                                _G__  NODE                      1   P
    StartLevel                             _GR_  integer                   1   A
    InitialBundleStartLevel                _GR_  integer                   1   A

                                                                org.osgi/1.0/MAP
    Bundle                                 _G__  MAP                       1   A
      [string]                             AG__  NODE                   0..*   D
        State                              _G__  string                  0,1   A
        Version                            _G__  string                  0,1   A
        StartLevel                         _GR_  integer                   1   A
        URL                                _GR_  string                    1   A
        RequestedState                     _GR_  string                    1   A
        AutoStart                          _GR_  boolean                   1   A
        FaultType                          _G__  integer                 0,1   A
        FaultMessage                       _G__  string                  0,1   A
        BundleId                           _G__  long                    0,1   A
        SymbolicName                       _G__  string                  0,1   A

                                                               org.osgi/1.0/LIST
        BundleType                         _G__  LIST                    0,1   A
          [list]                           _G__  string                 0..*   D

                                                                org.osgi/1.0/MAP
        Headers                            _G__  MAP                     0,1   A
          [string]                         _G__  string                 0..*   D
        Location                           _G__  string                    1   A
        LastModified                       _G__  date_time               0,1   A

                                                                org.osgi/1.0/MAP
        Wires                              _G__  MAP                     0,1   A

                                                               org.osgi/1.0/LIST
          [string]                         _G__  LIST                   0..*   D
            [list]                         _G__  NODE                   0..*   D
              InstanceId                   _G__  integer                   1   A
              Capability                   _G__  NODE                      1   A

                                                                org.osgi/1.0/MAP
                Directive                  _G__  MAP                       1   A
                  [string]                 _G__  string                 0..*   D

                                                                org.osgi/1.0/MAP
                Attribute                  _G__  MAP                       1   A
                  [string]                 _G__  string                 0..*   D
              Requirement                  _G__  NODE                      1   A
                Filter                     _G__  string                    1   A

                                                                org.osgi/1.0/MAP
                Directive                  _G__  MAP                       1   A
                  [string]                 _G__  string                 0..*   D

                                                                org.osgi/1.0/MAP
                Attribute                  _G__  MAP                       1   A
                  [string]                 _G__  string                 0..*   D
              Namespace                    _G__  string                    1   A
              Requirer                     _G__  string                    1   A
              Provider                     _G__  string                    1   A

                                                               org.osgi/1.0/LIST
        Signers                            _G__  LIST                    0,1   A
          [list]                           _G__  NODE                   0..*   D
            InstanceId                     _G__  integer                   1   A
            IsTrusted                      _G__  boolean                   1   A

                                                               org.osgi/1.0/LIST
            CertificateChain               _G__  LIST                      1   A
              [list]                       _G__  string                 0..*   D

                                                               org.osgi/1.0/LIST
        Entries                            _G__  LIST                    0,1   A
          [list]                           _G__  NODE                   0..*   D
            InstanceId                     _G__  integer                   1   A
            Path                           _G__  string                    1   A
            Content                        _G__  binary                    1   A
        InstanceId                         _G__  integer                   1   A

                                                                org.osgi/1.0/MAP
    Property                               _G__  MAP                       1   A
      [string]                             _G__  string                 0..*   D
</programlisting>
</section>
<section>
  <title>Filter</title>
  <programlisting>
                                                                org.osgi/1.0/MAP
  Filter                                   _G__  MAP                     0,1   P
    [string]                               AG_D  NODE                   0..*   D
      Filter                               _GR_  string                    1   A
      InstanceId                           _G__  integer                   1   A
      Target                               _GR_  string                    1   A
      Limit                                _GR_  integer                   1   A
      Result                               _G__  Node                      1   A

                                                               org.osgi/1.0/LIST
      ResultUriList                        _G__  LIST                      1   A
        [list]                             _G__  string                 0..*   D
</programlisting>
</section>
<section>
  <title>Log</title>
  <programlisting>  Log                                      _G__  NODE                    0,1   P

                                                               org.osgi/1.0/LIST
    LogEntries                             _G__  LIST                      1   A
      [list]                               _G__  NODE                   0..*   D
        Bundle                             _G__  string                    1   A
        Level                              _G__  integer                   1   A
        Message                            _G__  string                    1   A
        Time                               _G__  date_time                 1   A
        Exception                          _G__  string                  0,1   A
</programlisting>
</section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.dmt.residential" xml:id="org.osgi.dmt.residential" xml:base="002/../../../generated/javadoc/docbook/org.osgi.dmt.residential-ddf.xml">
   <title>org.osgi.dmt.residential</title>
   <info>
      <releaseinfo xml:id="org.osgi.dmt.residential-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.dmt.residential-version.number">1.0</edition>
   </info>
   <section role="class" xreflabel="$" xml:id="org.osgi.dmt.residential.-">
      <title>$</title>
      <para>
The $ describes the root node for OSGi Residential Management. The path to
 this node is defined in the system property: <code>org.osgi.dmt.residential</code>
 .
   </para>
      <table tabstyle="ddfsubtree" pgwide="1">
         <title>Sub-tree Description for $</title>
         <tgroup cols="6">
            <colspec colwidth="1*"/>
            <colspec colwidth="0.6*"/>
            <colspec colwidth="1.5*"/>
            <colspec colwidth="0.5*"/>
            <colspec colwidth="0.2*"/>
            <colspec colwidth="2.5*"/>
            <thead>
               <row>
                  <entry>Name</entry>
                  <entry>Act</entry>
                  <entry>Type</entry>
                  <entry>Card.</entry>
                  <entry>S</entry>
                  <entry>Description</entry>
               </row>
            </thead>
            <tbody>
               <row>
                  <entry>
                     <para xreflabel="Framework" xml:id="org.osgi.dmt.residential.-.Framework--">
                        <code>Framework</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>Framework</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>P</code>
                  </entry>
                  <entry>
                     <para>
The Framework node used to manage the local framework.
   </para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="Filter" xml:id="org.osgi.dmt.residential.-.Filter--">
                        <code>Filter</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>MAP</code>
                  </entry>
                  <entry>
                     <code>0,1</code>
                  </entry>
                  <entry>
                     <code>P</code>
                  </entry>
                  <entry morerows="1">
                     <para>
The Filters node searches the nodes in a tree that correspond to a target
 URI and an optional filter expression. A new <link linkend="org.osgi.dmt.residential.Filter">Filter</link> is created by
 adding a node to the Filters node. The name of the node is chosen by the
 remote manager. If multiple managers are active they must agree on a
 scheme to avoid conflicts or an atomic sessions must be used to claim
 exclusiveness.
 </para>
                     <para>
 Filter nodes are persistent but an implementation can remove the node
 after a suitable timeout that should at least be 1 hour.
 </para>
                     <para>
 If this functionality is not supported on this device then the node is
 not present.</para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para>
                        <code>  [String]</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Add Del Get </code>
                  </entry>
                  <entry>
                     <code>Filter</code>
                  </entry>
                  <entry>
                     <code>0..*</code>
                  </entry>
                  <entry>
                     <code>D</code>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="Log" xml:id="org.osgi.dmt.residential.-.Log--">
                        <code>Log</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>Log</code>
                  </entry>
                  <entry>
                     <code>0,1</code>
                  </entry>
                  <entry>
                     <code>P</code>
                  </entry>
                  <entry>
                     <para>
Access to the optional Log.
 </para>
                     <para>
 If this functionality is not supported on this device then the node is
 not present.</para>
                  </entry>
               </row>
            </tbody>
         </tgroup>
      </table>
   </section>
   <section role="class" xreflabel="Bundle" xml:id="org.osgi.dmt.residential.Bundle">
      <title>Bundle</title>
      <para>
The management node for a Bundle. It provides access to the life cycle
 control of the bundle as well to its metadata, resources, and wiring.
 </para>
      <para/>
      <para>
 To install a new bundle an instance of this node must be created. Since many
 of the sub-nodes are not yet valid as the information from the bundle is not
 yet available. These nodes are marked to be optional and will only exists
 after the bundle has been really installed.
   </para>
      <section role="field" xreflabel="FRAGMENT" xml:id="org.osgi.dmt.residential.Bundle.FRAGMENT">
         <title>FRAGMENT = "FRAGMENT"</title>
         <para>
The type returned for a fragment bundle.
   </para>
      </section>
      <section role="field" xreflabel="INSTALLED" xml:id="org.osgi.dmt.residential.Bundle.INSTALLED">
         <title>INSTALLED = "INSTALLED"</title>
         <para>
The Bundle <code>INSTALLED</code> state.
   </para>
      </section>
      <section role="field" xreflabel="RESOLVED" xml:id="org.osgi.dmt.residential.Bundle.RESOLVED">
         <title>RESOLVED = "RESOLVED"</title>
         <para>
The Bundle <code>RESOLVED</code> state.
   </para>
      </section>
      <section role="field" xreflabel="STARTING" xml:id="org.osgi.dmt.residential.Bundle.STARTING">
         <title>STARTING = "STARTING"</title>
         <para>
The Bundle <code>STARTING</code> state.
   </para>
      </section>
      <section role="field" xreflabel="ACTIVE" xml:id="org.osgi.dmt.residential.Bundle.ACTIVE">
         <title>ACTIVE = "ACTIVE"</title>
         <para>
The Bundle <code>ACTIVE</code> state.
   </para>
      </section>
      <section role="field" xreflabel="STOPPING" xml:id="org.osgi.dmt.residential.Bundle.STOPPING">
         <title>STOPPING = "STOPPING"</title>
         <para>
The Bundle <code>STOPPING</code> state.
   </para>
      </section>
      <section role="field" xreflabel="UNINSTALLED" xml:id="org.osgi.dmt.residential.Bundle.UNINSTALLED">
         <title>UNINSTALLED = "UNINSTALLED"</title>
         <para>
The Bundle <code>UNINSTALLED</code> state.
   </para>
         <table tabstyle="ddfsubtree" pgwide="1">
            <title>Sub-tree Description for Bundle</title>
            <tgroup cols="6">
               <colspec colwidth="1*"/>
               <colspec colwidth="0.6*"/>
               <colspec colwidth="1.5*"/>
               <colspec colwidth="0.5*"/>
               <colspec colwidth="0.2*"/>
               <colspec colwidth="2.5*"/>
               <thead>
                  <row>
                     <entry>Name</entry>
                     <entry>Act</entry>
                     <entry>Type</entry>
                     <entry>Card.</entry>
                     <entry>S</entry>
                     <entry>Description</entry>
                  </row>
               </thead>
               <tbody>
                  <row>
                     <entry>
                        <para xreflabel="URL" xml:id="org.osgi.dmt.residential.Bundle.URL--">
                           <code>URL</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get Set </code>
                     </entry>
                     <entry>
                        <code>string</code>
                     </entry>
                     <entry>
                        <code>1</code>
                     </entry>
                     <entry>
                        <code>A</code>
                     </entry>
                     <entry>
                        <para>
The URL to download the archive from for this bundle.
 
 By default this is the empty string. In an atomic session this URL can be
 replaced to a new URL, which will trigger an update of this bundle during
 commit. If this value is set it must point to a valid JAR from which a
 URL can be downloaded, unless it is the system bundle. If it is the empty
 string no action must be taken except when it is the system bundle.
 
 </para>
                        <para>
 If the URL of Bundle 0 (The system bundle) is replaced to any value,
 including the empty string, then the framework will restart.
 </para>
                        <para>
 If both a the URL node has been set the bundle must be updated before any
 of the other aspects are handled like <link linkend="org.osgi.dmt.residential.Bundle.RequestedState--">RequestedState</link> and <link linkend="org.osgi.dmt.residential.Bundle.StartLevel--">StartLevel</link>.</para>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para xreflabel="AutoStart" xml:id="org.osgi.dmt.residential.Bundle.AutoStart--">
                           <code>AutoStart</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get Set </code>
                     </entry>
                     <entry>
                        <code>boolean</code>
                     </entry>
                     <entry>
                        <code>1</code>
                     </entry>
                     <entry>
                        <code>A</code>
                     </entry>
                     <entry>
                        <para>
Indicates if this Bundle must be started when the Framework is started.
 </para>
                        <para>
 If the AutoStart node is <code>true</code> then this bundle is started when
 the framework is started and its <link linkend="org.osgi.dmt.residential.Bundle.StartLevel--">StartLevel</link> is met.
 </para>
                        <para>
 If the <code>AutoStart</code> node is set to <code>true</code> and the bundle is
 not started then it will automatically be started if the start level
 permits it. If the <code>AutoStart</code> node is set to <code>false</code> then
 the bundle must not be stopped immediately.
 </para>
                        <para>
 If the <code>AutoStart</code> value of the System Bundle is changed then the
 operation must be ignored.
 </para>
                        <para>
 The default value for this node is <code>true</code>
                        </para>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para xreflabel="FaultType" xml:id="org.osgi.dmt.residential.Bundle.FaultType--">
                           <code>FaultType</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get </code>
                     </entry>
                     <entry>
                        <code>integer</code>
                     </entry>
                     <entry>
                        <code>0,1</code>
                     </entry>
                     <entry>
                        <code>A</code>
                     </entry>
                     <entry>
                        <para>
The BundleException type associated with a failure on this bundle, -1 if
 no fault is associated with this bundle. If there was no Bundle Exception
 associated with the failure the code must be 0 (UNSPECIFIED). The
 <link linkend="org.osgi.dmt.residential.Bundle.FaultMessage--">FaultMessage</link> provides a human readable message.
 </para>
                        <para/>
                        <para>
 Only present after the bundle is installed.
   </para>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para xreflabel="FaultMessage" xml:id="org.osgi.dmt.residential.Bundle.FaultMessage--">
                           <code>FaultMessage</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get </code>
                     </entry>
                     <entry>
                        <code>string</code>
                     </entry>
                     <entry>
                        <code>0,1</code>
                     </entry>
                     <entry>
                        <code>A</code>
                     </entry>
                     <entry>
                        <para>
A human readable message detailing an error situation or an empty string
 if no fault is associated with this bundle.
 </para>
                        <para/>
                        <para>
 Only present after the bundle is installed.
   </para>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para xreflabel="BundleId" xml:id="org.osgi.dmt.residential.Bundle.BundleId--">
                           <code>BundleId</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get </code>
                     </entry>
                     <entry>
                        <code>long</code>
                     </entry>
                     <entry>
                        <code>0,1</code>
                     </entry>
                     <entry>
                        <code>A</code>
                     </entry>
                     <entry>
                        <para>
The Bundle Id as defined by the <code>getBundleId()</code> method.
 </para>
                        <para>
 If there is no installed Bundle yet, then this node is not present.</para>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para xreflabel="SymbolicName" xml:id="org.osgi.dmt.residential.Bundle.SymbolicName--">
                           <code>SymbolicName</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get </code>
                     </entry>
                     <entry>
                        <code>string</code>
                     </entry>
                     <entry>
                        <code>0,1</code>
                     </entry>
                     <entry>
                        <code>A</code>
                     </entry>
                     <entry>
                        <para>
The Bundle Symbolic Name as defined by the Bundle
 <code>getSymbolicName()</code> method. If this result is <code>null</code> then the
 value of this node must be the empty string.
 </para>
                        <para>
 If there is no installed Bundle yet, then this node is not present.</para>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para xreflabel="Version" xml:id="org.osgi.dmt.residential.Bundle.Version--">
                           <code>Version</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get </code>
                     </entry>
                     <entry>
                        <code>string</code>
                     </entry>
                     <entry>
                        <code>0,1</code>
                     </entry>
                     <entry>
                        <code>A</code>
                     </entry>
                     <entry>
                        <para>
The Bundle's version as defined by the Bundle <code>getVersion()</code>
 method.
 
 </para>
                        <para>
 If there is no installed Bundle yet, then this node is not present.</para>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para xreflabel="BundleType" xml:id="org.osgi.dmt.residential.Bundle.BundleType--">
                           <code>BundleType</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get </code>
                     </entry>
                     <entry>
                        <code>LIST</code>
                     </entry>
                     <entry>
                        <code>0,1</code>
                     </entry>
                     <entry>
                        <code>A</code>
                     </entry>
                     <entry morerows="1">
                        <para>
A list of the types of the bundle. Currently only a single type is
 provided:
 </para>
                        <itemizedlist>
                           <listitem>
                              <para>
                                 <link linkend="org.osgi.dmt.residential.Bundle.FRAGMENT">FRAGMENT</link>
                              </para>
                           </listitem>
                        </itemizedlist>
                        <para>
 If there is no installed Bundle yet, then this node is not present.</para>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para>
                           <code>  [list]</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get </code>
                     </entry>
                     <entry>
                        <code>string</code>
                     </entry>
                     <entry>
                        <code>0..*</code>
                     </entry>
                     <entry>
                        <code>D</code>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para xreflabel="Headers" xml:id="org.osgi.dmt.residential.Bundle.Headers--">
                           <code>Headers</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get </code>
                     </entry>
                     <entry>
                        <code>MAP</code>
                     </entry>
                     <entry>
                        <code>0,1</code>
                     </entry>
                     <entry>
                        <code>A</code>
                     </entry>
                     <entry morerows="1">
                        <para>
The Bundle <code>getHeaders()</code> method.
 </para>
                        <para>
 If there is no installed Bundle yet, then this node is not present.</para>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para>
                           <code>  [String]</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get </code>
                     </entry>
                     <entry>
                        <code>string</code>
                     </entry>
                     <entry>
                        <code>0..*</code>
                     </entry>
                     <entry>
                        <code>D</code>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para xreflabel="Location" xml:id="org.osgi.dmt.residential.Bundle.Location--">
                           <code>Location</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get </code>
                     </entry>
                     <entry>
                        <code>string</code>
                     </entry>
                     <entry>
                        <code>1</code>
                     </entry>
                     <entry>
                        <code>A</code>
                     </entry>
                     <entry>
                        <para>
The Bundle's Location as defined by the Bundle <code>getLocation()</code>
 method.
 </para>
                        <para>
 The location is specified by the management agent when the bundle is
 installed. This location should be a unique name for a bundle chosen by
 the management system. The Bundle Location is immutable for the Bundle's
 life (it is not changed when the Bundle is updated). The Bundle Location
 is also part of the URI to this node.</para>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para xreflabel="State" xml:id="org.osgi.dmt.residential.Bundle.State--">
                           <code>State</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get </code>
                     </entry>
                     <entry>
                        <code>string</code>
                     </entry>
                     <entry>
                        <code>0,1</code>
                     </entry>
                     <entry>
                        <code>A</code>
                     </entry>
                     <entry>
                        <para>
Return the state of the current Bundle. The values can be:
 
 </para>
                        <itemizedlist>
                           <listitem>
                              <para>
                                 <link linkend="org.osgi.dmt.residential.Bundle.INSTALLED">INSTALLED</link>
                              </para>
                           </listitem>
                           <listitem>
                              <para>
                                 <link linkend="org.osgi.dmt.residential.Bundle.RESOLVED">RESOLVED</link>
                              </para>
                           </listitem>
                           <listitem>
                              <para>
                                 <link linkend="org.osgi.dmt.residential.Bundle.STARTING">STARTING</link>
                              </para>
                           </listitem>
                           <listitem>
                              <para>
                                 <link linkend="org.osgi.dmt.residential.Bundle.ACTIVE">ACTIVE</link>
                              </para>
                           </listitem>
                           <listitem>
                              <para>
                                 <link linkend="org.osgi.dmt.residential.Bundle.STOPPING">STOPPING</link>
                              </para>
                           </listitem>
                        </itemizedlist>
                        <para/>
                        <para>
 If there is no installed Bundle yet, then this node is not present.
 </para>
                        <para/>
                        <para>
 The default value is <link linkend="org.osgi.dmt.residential.Bundle.UNINSTALLED">UNINSTALLED</link> after creation.
   </para>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para xreflabel="RequestedState" xml:id="org.osgi.dmt.residential.Bundle.RequestedState--">
                           <code>RequestedState</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get Set </code>
                     </entry>
                     <entry>
                        <code>string</code>
                     </entry>
                     <entry>
                        <code>1</code>
                     </entry>
                     <entry>
                        <code>A</code>
                     </entry>
                     <entry>
                        <para>
Is the requested state the manager wants the bundle to be in. Can be:
 </para>
                        <para/>
                        <itemizedlist>
                           <listitem>
                              <para>
                                 <link linkend="org.osgi.dmt.residential.Bundle.INSTALLED">INSTALLED</link> - Ensure the bundle is stopped and refreshed.</para>
                           </listitem>
                           <listitem>
                              <para>
                                 <link linkend="org.osgi.dmt.residential.Bundle.RESOLVED">RESOLVED</link> - Ensure the bundle is resolved.</para>
                           </listitem>
                           <listitem>
                              <para>
                                 <link linkend="org.osgi.dmt.residential.Bundle.ACTIVE">ACTIVE</link> - Ensure the bundle is started.</para>
                           </listitem>
                           <listitem>
                              <para>
                                 <link linkend="org.osgi.dmt.residential.Bundle.UNINSTALLED">UNINSTALLED</link> - Uninstall the bundle.</para>
                           </listitem>
                        </itemizedlist>
                        <para>
 The Requested State is a request. The management agent must attempt to
 achieve the desired state but there is a no guarantee that this state is
 achievable. For example,a Framework can resolve a bundle at any time or
 the active start level can prevent a bundle from running. Any errors must
 be reported on <link linkend="org.osgi.dmt.residential.Bundle.FaultType--">FaultType</link> and <link linkend="org.osgi.dmt.residential.Bundle.FaultMessage--">FaultMessage</link>.
 </para>
                        <para>
 
 If the <link linkend="org.osgi.dmt.residential.Bundle.AutoStart--">AutoStart</link> node is <code>true</code> then the
 bundle must be persistently started, otherwise it must be transiently
 started. If the <link linkend="org.osgi.dmt.residential.Bundle.StartLevel--">StartLevel</link> is not met then the
 commit must fail if <link linkend="org.osgi.dmt.residential.Bundle.AutoStart--">AutoStart</link> is <code>false</code> as a
 Bundle cannot be transiently started when the start level is not met.
 </para>
                        <para>
 If both a the <link linkend="org.osgi.dmt.residential.Bundle.URL--">URL</link> node has been set as well as the
 RequestedState node then this must result in an update after which the
 bundle should go to the RequestedState.
 </para>
                        <para>
 The RequestedState must be stored persistently so that it contains the
 last requested state. The initial value of the RequestedState must be
 <link linkend="org.osgi.dmt.residential.Bundle.INSTALLED">INSTALLED</link>.</para>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para xreflabel="StartLevel" xml:id="org.osgi.dmt.residential.Bundle.StartLevel--">
                           <code>StartLevel</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get Set </code>
                     </entry>
                     <entry>
                        <code>integer</code>
                     </entry>
                     <entry>
                        <code>1</code>
                     </entry>
                     <entry>
                        <code>A</code>
                     </entry>
                     <entry>
                        <para>
The Bundle's current Start Level as defined by the BundleStartLevel adapt
 interface <code>getStartLevel()</code> method. Changing the StartLevel can
 change the Bundle State as a bundle can become eligible for starting or
 stopping.
 </para>
                        <para>
 If the <link linkend="org.osgi.dmt.residential.Bundle.URL--">URL</link> node is set then a bundle must be updated
 before the start level is set,</para>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para xreflabel="LastModified" xml:id="org.osgi.dmt.residential.Bundle.LastModified--">
                           <code>LastModified</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get </code>
                     </entry>
                     <entry>
                        <code>date_time</code>
                     </entry>
                     <entry>
                        <code>0,1</code>
                     </entry>
                     <entry>
                        <code>A</code>
                     </entry>
                     <entry>
                        <para>
The Last Modified time of this bundle as defined by the Bundle
 <code>getlastModified()</code> method.
 </para>
                        <para>
 If there is no installed Bundle yet then this node is not present.</para>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para xreflabel="Wires" xml:id="org.osgi.dmt.residential.Bundle.Wires--">
                           <code>Wires</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get </code>
                     </entry>
                     <entry>
                        <code>MAP</code>
                     </entry>
                     <entry>
                        <code>0,1</code>
                     </entry>
                     <entry>
                        <code>A</code>
                     </entry>
                     <entry morerows="2">
                        <para>
A MAP of name space -&gt; to Wire. A Wire is a relation between to bundles
 where the type of the relation is defined by the name space. For example,
 <code>osgi.wiring.package</code> name space defines the exporting and
 importing of packages. Standard osgi name spaces are:
 </para>
                        <itemizedlist>
                           <listitem>
                              <para>
                                 <code>osgi.wiring.bundle</code>
                              </para>
                           </listitem>
                           <listitem>
                              <para>
                                 <code>osgi.wiring.package</code>
                              </para>
                           </listitem>
                           <listitem>
                              <para>
                                 <code>osgi.wiring.host</code>
                              </para>
                           </listitem>
                        </itemizedlist>
                        <para>
 As the Core specification allows custom name spaces this list can be more
 extensive.
 </para>
                        <para>
 This specification adds one additional name space to reflect the
 services, this is the <code>osgi.wiring.rmt.service</code> name space. This
 name space will have a wire for each time a registered service by this
 Bundle was gotten for the first time by a bundle. A capability in the
 service name space holds all the registered service properties. The
 requirement has no attributes and a single <code>filter</code> directive that
 matches the service id property.
 </para>
                        <para>
 If there is no installed Bundle yet then this node is not present.</para>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para>
                           <code>  [String]</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get </code>
                     </entry>
                     <entry>
                        <code>LIST</code>
                     </entry>
                     <entry>
                        <code>0..*</code>
                     </entry>
                     <entry>
                        <code>D</code>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para>
                           <code>    [list]</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get </code>
                     </entry>
                     <entry>
                        <code>Wire</code>
                     </entry>
                     <entry>
                        <code>0..*</code>
                     </entry>
                     <entry>
                        <code>D</code>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para xreflabel="Signers" xml:id="org.osgi.dmt.residential.Bundle.Signers--">
                           <code>Signers</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get </code>
                     </entry>
                     <entry>
                        <code>LIST</code>
                     </entry>
                     <entry>
                        <code>0,1</code>
                     </entry>
                     <entry>
                        <code>A</code>
                     </entry>
                     <entry morerows="1">
                        <para>
Return all signers of the bundle. See the Bundle
 <code>getSignerCertificates()</code> method with the <code>SIGNERS_ALL</code>
 parameter.
 </para>
                        <para>
 If there is no installed Bundle yet then this node is not present.</para>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para>
                           <code>  [list]</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get </code>
                     </entry>
                     <entry>
                        <code>Certificate</code>
                     </entry>
                     <entry>
                        <code>0..*</code>
                     </entry>
                     <entry>
                        <code>D</code>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para xreflabel="Entries" xml:id="org.osgi.dmt.residential.Bundle.Entries--">
                           <code>Entries</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get </code>
                     </entry>
                     <entry>
                        <code>LIST</code>
                     </entry>
                     <entry>
                        <code>0,1</code>
                     </entry>
                     <entry>
                        <code>A</code>
                     </entry>
                     <entry morerows="1">
                        <para>
An optional node providing access to the entries in the Bundle's JAR.
 This list must be created from the Bundle <code>getEntryPaths()</code> method
 called with an empty String. For each found entry, an Entry object must
 be made available.
 </para>
                        <para>
 If there is no installed Bundle yet then this node is not present.</para>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para>
                           <code>  [list]</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get </code>
                     </entry>
                     <entry>
                        <code>Entry</code>
                     </entry>
                     <entry>
                        <code>0..*</code>
                     </entry>
                     <entry>
                        <code>D</code>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para xreflabel="InstanceId" xml:id="org.osgi.dmt.residential.Bundle.InstanceId--">
                           <code>InstanceId</code>
                        </para>
                     </entry>
                     <entry>
                        <code>Get </code>
                     </entry>
                     <entry>
                        <code>integer</code>
                     </entry>
                     <entry>
                        <code>1</code>
                     </entry>
                     <entry>
                        <code>A</code>
                     </entry>
                     <entry>
                        <para>
Instance Id used by foreign protocol adapters as a unique integer key not
 equal to 0.
 
 The instance id for a bundle must be (Bundle Id % 2^32) + 1.
   </para>
                     </entry>
                  </row>
               </tbody>
            </tgroup>
         </table>
      </section>
   </section>
   <section role="class" xreflabel="Bundle.Certificate" xml:id="org.osgi.dmt.residential.Bundle.Certificate">
      <title>Bundle.Certificate</title>
      <para>
Place holder for the Signers DN names.
   </para>
      <table tabstyle="ddfsubtree" pgwide="1">
         <title>Sub-tree Description for Bundle.Certificate</title>
         <tgroup cols="6">
            <colspec colwidth="1*"/>
            <colspec colwidth="0.6*"/>
            <colspec colwidth="1.5*"/>
            <colspec colwidth="0.5*"/>
            <colspec colwidth="0.2*"/>
            <colspec colwidth="2.5*"/>
            <thead>
               <row>
                  <entry>Name</entry>
                  <entry>Act</entry>
                  <entry>Type</entry>
                  <entry>Card.</entry>
                  <entry>S</entry>
                  <entry>Description</entry>
               </row>
            </thead>
            <tbody>
               <row>
                  <entry>
                     <para xreflabel="IsTrusted" xml:id="org.osgi.dmt.residential.Bundle.Certificate.IsTrusted--">
                        <code>IsTrusted</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>boolean</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
Return if this Certificate is trusted.
   </para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="CertificateChain" xml:id="org.osgi.dmt.residential.Bundle.Certificate.CertificateChain--">
                        <code>CertificateChain</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>LIST</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry morerows="1">
                     <para>
A list of signer DNs of the certificates in the chain.
   </para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para>
                        <code>  [list]</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>string</code>
                  </entry>
                  <entry>
                     <code>0..*</code>
                  </entry>
                  <entry>
                     <code>D</code>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="InstanceId" xml:id="org.osgi.dmt.residential.Bundle.Certificate.InstanceId--">
                        <code>InstanceId</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>integer</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
Instance Id to allow addressing by Instance Id.
   </para>
                  </entry>
               </row>
            </tbody>
         </tgroup>
      </table>
   </section>
   <section role="class" xreflabel="Bundle.Entry" xml:id="org.osgi.dmt.residential.Bundle.Entry">
      <title>Bundle.Entry</title>
      <para>
An Entry describes an entry in the Bundle, it combines the path of an
 entry with the content. Only entries that have content will be returned,
 that is, empty directories in the Bundle's archive are not returned.
   </para>
      <table tabstyle="ddfsubtree" pgwide="1">
         <title>Sub-tree Description for Bundle.Entry</title>
         <tgroup cols="6">
            <colspec colwidth="1*"/>
            <colspec colwidth="0.6*"/>
            <colspec colwidth="1.5*"/>
            <colspec colwidth="0.5*"/>
            <colspec colwidth="0.2*"/>
            <colspec colwidth="2.5*"/>
            <thead>
               <row>
                  <entry>Name</entry>
                  <entry>Act</entry>
                  <entry>Type</entry>
                  <entry>Card.</entry>
                  <entry>S</entry>
                  <entry>Description</entry>
               </row>
            </thead>
            <tbody>
               <row>
                  <entry>
                     <para xreflabel="Path" xml:id="org.osgi.dmt.residential.Bundle.Entry.Path--">
                        <code>Path</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>string</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
The path in the Bundle archive to the entry.
   </para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="Content" xml:id="org.osgi.dmt.residential.Bundle.Entry.Content--">
                        <code>Content</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>binary</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
The binary content of the entry.
   </para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="InstanceId" xml:id="org.osgi.dmt.residential.Bundle.Entry.InstanceId--">
                        <code>InstanceId</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>integer</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
Instance Id to allow addressing by Instance Id.
   </para>
                  </entry>
               </row>
            </tbody>
         </tgroup>
      </table>
   </section>
   <section role="class" xreflabel="Filter" xml:id="org.osgi.dmt.residential.Filter">
      <title>Filter</title>
      <para>
A Filter node can find the nodes in a given sub-tree that correspond to a
 given filter expression. This Filter node is a generic mechanism to select a
 part of the sub-tree (<emphasis>except</emphasis> itself).
 </para>
      <para>
 Searching is done by treating an interior node as a map where its leaf nodes
 are attributes for a filter expression. That is, an interior node matches
 when a filter matches on its children. The matching nodes' URIs are gathered
 under a <link linkend="org.osgi.dmt.residential.Filter.ResultUriList--">ResultUriList</link> node and as a virtual sub-tree
 under the <link linkend="org.osgi.dmt.residential.Filter.Result--">Result</link> node.
 </para>
      <para>
 The Filter node can specify the <link linkend="org.osgi.dmt.residential.Filter.Target--">Target</link> node. The
 <link linkend="org.osgi.dmt.residential.Filter.Target--">Target</link> is an absolute URI ending in a slash, potentially
 with wild cards. Only nodes that match the target node are included in the
 result.
 </para>
      <para>
 There are two different wild cards:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <emphasis>Asterisk</emphasis> (<code>'*'</code> \u002A) - Specifies a wild card for
 one interior node name only. That is <code>A/*</code>
               <code>/</code> matches an interior
 nodes <code>A/B</code>, <code>A/C</code>, but not <code>A/X/Y</code>. The asterisk wild card
 can be used anywhere in the URI like <code>A/*</code>
               <code>/C</code>. Partial matches
 are not supported, that is a URI like <code>A/xyz*</code> is invalid.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>Minus sign</emphasis> (<code>'-'</code> \u002D) - Specifies a wildcard for
 any number of descendant nodes. This is <code>A/-/X/</code> matches <code>A/B/X</code>,
 <code>A/C/X</code>, but also <code>A/X</code>. Partial matches are not supported, that
 is a URI like <code>A/xyz-</code> is not supported. The - wild card must not be
 used at the last segment of a URI</para>
         </listitem>
      </itemizedlist>
      <para>
 The <link linkend="org.osgi.dmt.residential.Filter.Target--">Target</link> node selects a set of nodes <code>N</code> that can
 be viewed as a list of URIs or as a virtual sub-tree. The <link linkend="org.osgi.dmt.residential.Filter.Result--">Result</link> node is the virtual sub-tree (beginning at the session base) and the
 <link linkend="org.osgi.dmt.residential.Filter.ResultUriList--">ResultUriList</link> is a LIST of session relative URIs.
 The actual selection of the nodes must be postponed until either of these
 nodes (or one of their sub-nodes) is accessed for the first time. Either
 nodes represent a read-only snapshot that is valid until the end of the
 session.
 </para>
      <para>
 It is possible to further refine the selection by specifying the Filter node.
 The Filter node is an LDAP filter expression or a simple wild card ('*')
 which selects all the nodes. As the wild card is the default, all nodes
 selected by the <link linkend="org.osgi.dmt.residential.Filter.Target--">Target</link> are selected by default.
 </para>
      <para>
 The Filter must be applied to each of the nodes selected by target in the set
 <code>N</code>. By definition, these nodes are <emphasis>interior nodes only</emphasis>. LDAP
 expressions assert values depending on their <emphasis>key</emphasis>. In this case, the
 child leaf nodes of a node in set <code>N</code> are treated as the property on
 their parent node.
 </para>
      <para>
 The attribute name in the LDAP filter can only reference a direct leaf node
 of the node in the set <code>N</code> or an interior node with the DDF type
 <link linkend="org.osgi.service.dmt.DmtConstants.DDF_LIST">org.osgi.service.dmt.DmtConstants.DDF_LIST</link> with leaf nodes as
 children, i.e. a <emphasis>LIST</emphasis>. A LIST of primitives must be treated in the
 filter as a multi valued property, any of its values satisfy an assertion on
 that attribute.
 </para>
      <para>
 Attribute names must not contains a slash, that is, it is only possible to
 assert values directly below the node selected by the <code>target</code>.
 </para>
      <para>
 
 Each of these leaf nodes and LISTs can be used in the LDAP Filter as a
 key/value pair. The comparison must be done with the type used in the Dmt
 Data object of the compared node. That is, if the Dmt Admin data is a number,
 then the comparison rules of the number must be used. The attributes given to
 the filter must be converted to the Java object that represents their type.
 </para>
      <para>
 The set <code>N</code> must therefore consists only of nodes where the Filter
 matches.
 </para>
      <para>
 It is allowed to change the <link linkend="org.osgi.dmt.residential.Filter.Target--">Target</link> or the Filter node after
 the results are read. In that case, the <link linkend="org.osgi.dmt.residential.Filter.Result--">Result</link> and
 <link linkend="org.osgi.dmt.residential.Filter.ResultUriList--">ResultUriList</link> must be cleared instantaneously and
 the search redone once either result node is read.
 </para>
      <para>
 The initial value of <link linkend="org.osgi.dmt.residential.Filter.Target--">Target</link> is the empty string, which
 indicates no target.</para>
      <table tabstyle="ddfsubtree" pgwide="1">
         <title>Sub-tree Description for Filter</title>
         <tgroup cols="6">
            <colspec colwidth="1*"/>
            <colspec colwidth="0.6*"/>
            <colspec colwidth="1.5*"/>
            <colspec colwidth="0.5*"/>
            <colspec colwidth="0.2*"/>
            <colspec colwidth="2.5*"/>
            <thead>
               <row>
                  <entry>Name</entry>
                  <entry>Act</entry>
                  <entry>Type</entry>
                  <entry>Card.</entry>
                  <entry>S</entry>
                  <entry>Description</entry>
               </row>
            </thead>
            <tbody>
               <row>
                  <entry>
                     <para xreflabel="Target" xml:id="org.osgi.dmt.residential.Filter.Target--">
                        <code>Target</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get Set </code>
                  </entry>
                  <entry>
                     <code>string</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
An absolute URI always ending in a slash (’/’), with optional wildcards,
 selecting a set of sub-nodes <code>N</code>. Wildcards can be an asterisk (
 <code>'*'</code> \u002A) or a minus sign (<code>'-'</code> \u002D). An
 asterisk can be used in place of a single node name in the URI, a minus
 sign stands for any number of consecutive node names. The default value
 of this node is the empty string, which indicates that no nodes must be
 selected. Changing this value must clear any existing results. If the
 <link linkend="org.osgi.dmt.residential.Filter.Result--">Result()</link> or <link linkend="org.osgi.dmt.residential.Filter.ResultUriList--">ResultUriList</link> is read to
 get <code>N</code> then a new search must be executed.
 </para>
                     <para>
 A URI must always end in '/' to indicate that the target can only select
 interior nodes.</para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="Filter" xml:id="org.osgi.dmt.residential.Filter.Filter--">
                        <code>Filter</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get Set </code>
                  </entry>
                  <entry>
                     <code>string</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
An optional filter expression that filters nodes in the set <code>N</code>
 selected by <link linkend="org.osgi.dmt.residential.Filter.Target--">Target</link>. The filter expression is an LDAP
 filter or an asterisk ('*'). An asterisk is the default value and matches
 any node in set <code>N</code>. If an LDAP expression is set in the Filter
 node then the set <code>N</code> must only contain nodes that match the given
 filter. The values the filter asserts are the immediate leafs and LIST
 nodes of the nodes in set <code>N</code>. The name of these child nodes is the
 name of the attribute matched in the filter.
 </para>
                     <para>
 The nodes can be removed by the Filter implementation after a timeout
 defined by the implementation.</para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="Limit" xml:id="org.osgi.dmt.residential.Filter.Limit--">
                        <code>Limit</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get Set </code>
                  </entry>
                  <entry>
                     <code>integer</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
Limits the number of results to the given number. If this node is not set
 there is no limit. The default value is not set, thus no limit.
   </para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="Result" xml:id="org.osgi.dmt.residential.Filter.Result--">
                        <code>Result</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>NODE</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
The Result tree is a virtual read-only tree of all nodes that were
 selected by the <link linkend="org.osgi.dmt.residential.Filter.Target--">Target</link> and matched the Filter, that is,
 all nodes in set <code>N</code>. The <link linkend="org.osgi.dmt.residential.Filter.Result--">Result</link> node acts as a
 parent instead of the session root for each node in <code>N</code>.
 </para>
                     <para>
 The <link linkend="org.osgi.dmt.residential.Filter.Result--">Result</link> node is a snapshot taken the first time it
 is accessed after a change in the <code>Filter</code> and/or the
 <code>Target</code> nodes.</para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="ResultUriList" xml:id="org.osgi.dmt.residential.Filter.ResultUriList--">
                        <code>ResultUriList</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>LIST</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry morerows="1">
                     <para>
A list of URIs of nodes in the Device Management Tree from the node
 selected by the <link linkend="org.osgi.dmt.residential.Filter.Target--">Target</link> that match the Filter node. All
 URIs are relative to current session.
 
 The <link linkend="org.osgi.dmt.residential.Filter.Result--">Result</link> node is a snapshot taken the first time it
 is accessed after a change in the <code>Filter</code> and/or the
 <code>Target</code> nodes.
   </para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para>
                        <code>  [list]</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>string</code>
                  </entry>
                  <entry>
                     <code>0..*</code>
                  </entry>
                  <entry>
                     <code>D</code>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="InstanceId" xml:id="org.osgi.dmt.residential.Filter.InstanceId--">
                        <code>InstanceId</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>integer</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
Instance Id to allow addressing by Instance Id.
   </para>
                  </entry>
               </row>
            </tbody>
         </tgroup>
      </table>
   </section>
   <section role="class" xreflabel="Framework" xml:id="org.osgi.dmt.residential.Framework">
      <title>Framework</title>
      <para>
The Framework node represents the information about the Framework itself.
 
 The Framework node allows manipulation of the OSGi framework, start level,
 framework life cycle, and bundle life cycle.
 </para>
      <para>
 All modifications to a Framework object must occur in an atomic session. All
 changes to the framework must occur during the commit.
 </para>
      <para>
 The Framework node allows the manager to install (create a new child node in
 <link linkend="org.osgi.dmt.residential.Framework.Bundle--">Bundle</link>), to uninstall change the state of the bundle (see
 <link linkend="org.osgi.dmt.residential.Bundle.RequestedState--">Bundle.RequestedState()</link>), update the bundle (see <link linkend="org.osgi.dmt.residential.Bundle.URL--">URL</link> ), start/stop bundles, and update the framework. The implementation must
 execute these actions in the following order during the commit of the
 session:
 </para>
      <orderedlist>
         <listitem>
            <para>Create a snapshot of the current installed bundles and their state.</para>
         </listitem>
         <listitem>
            <para>stop all bundles that will be uinstalled and updated</para>
         </listitem>
         <listitem>
            <para>Uninstall all the to be uninstalled bundles (bundles whose RequestedState
 is <link linkend="org.osgi.dmt.residential.Bundle.UNINSTALLED">Bundle.UNINSTALLED</link>)</para>
         </listitem>
         <listitem>
            <para>Update all bundles that have a modified <link linkend="org.osgi.dmt.residential.Bundle.URL--">URL</link> with
 this URL using the Bundle <code>update(InputStream)</code> method in the order
 that the order that the URLs were last set.</para>
         </listitem>
         <listitem>
            <para>Install any new bundles from their <link linkend="org.osgi.dmt.residential.Bundle.URL--">URL</link> in the order
 that the order that the URLs were last set.</para>
         </listitem>
         <listitem>
            <para>Refresh all bundles that were updated and installed</para>
         </listitem>
         <listitem>
            <para>Ensure that all the bundles have their correct start level</para>
         </listitem>
         <listitem>
            <para>If the <link linkend="org.osgi.dmt.residential.Bundle.RequestedState--">RequestedState</link> was set, follow
 this state. Otherwise ensure that any Bundles that have the
 <link linkend="org.osgi.dmt.residential.Bundle.AutoStart--">AutoStart</link> flag set to <code>true</code> are started
 persistently. Transiently started bundles that were stopped in this process
 are not restarted. The bundle id order must be used.</para>
         </listitem>
         <listitem>
            <para>Wait until the desired start level has been reached</para>
         </listitem>
         <listitem>
            <para>Return from the commit without error.</para>
         </listitem>
      </orderedlist>
      <para>
 If any of the above steps runs in an error (except the restart) than the
 actions should be undone and the system state must be restored to the
 snapshot.
 </para>
      <para>
 If the System Bundle was updated (its URL) node was modified, then after the
 commit has returned successfully, the OSGi Framework must be restarted.</para>
      <table tabstyle="ddfsubtree" pgwide="1">
         <title>Sub-tree Description for Framework</title>
         <tgroup cols="6">
            <colspec colwidth="1*"/>
            <colspec colwidth="0.6*"/>
            <colspec colwidth="1.5*"/>
            <colspec colwidth="0.5*"/>
            <colspec colwidth="0.2*"/>
            <colspec colwidth="2.5*"/>
            <thead>
               <row>
                  <entry>Name</entry>
                  <entry>Act</entry>
                  <entry>Type</entry>
                  <entry>Card.</entry>
                  <entry>S</entry>
                  <entry>Description</entry>
               </row>
            </thead>
            <tbody>
               <row>
                  <entry>
                     <para xreflabel="StartLevel" xml:id="org.osgi.dmt.residential.Framework.StartLevel--">
                        <code>StartLevel</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get Set </code>
                  </entry>
                  <entry>
                     <code>integer</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
The StartLevel manages the Framework's current Start Level. Maps to the
 Framework Start Level <code>set/getStartLevel()</code> methods.
 </para>
                     <para>
 This node can set the requested Framework's StartLevel, however it
 doesn't store the value. This node returns the Framework's StartLevel at
 the moment of the call.</para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="InitialBundleStartLevel" xml:id="org.osgi.dmt.residential.Framework.InitialBundleStartLevel--">
                        <code>InitialBundleStartLevel</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get Set </code>
                  </entry>
                  <entry>
                     <code>integer</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
Configures the initial bundle start level, maps to the the
 FrameworkStartLevel <code>set/getInitialBundleStartLevel()</code> method.
   </para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="Bundle" xml:id="org.osgi.dmt.residential.Framework.Bundle--">
                        <code>Bundle</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>MAP</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry morerows="1">
                     <para>
The MAP of location -&gt; Bundle. Each Bundle is uniquely identified by its
 location. The location is a string that must be unique for each bundle
 and can be chosen by the management system.
 </para>
                     <para>
 The Bundles node will be automatically filled from the installed bundles,
 representing the actual state.
 </para>
                     <para>
 New bundles can be installed by creating a new node with a given
 location. At commit, this bundle will be installed from their
 <link linkend="org.osgi.dmt.residential.Bundle.URL--">Bundle.URL</link> node.
 </para>
                     <para>
 The location of the System Bundle must be "System Bundle" (see the Core's
 <code>Constants.SYSTEM_BUNDLE_LOCATION</code>), this node cannot be
 uninstalled and most operations on this node have special meaning.
 </para>
                     <para>
 It is strongly recommended to use a logical name for the location of a
 bundle, for example reverse domain names or a UUID.
 </para>
                     <para>
 To uninstall a bundle, set the <link linkend="org.osgi.dmt.residential.Bundle.RequestedState--">Bundle.RequestedState</link> to
 <code>UNINSTALLED</code>, the nodes in <link linkend="org.osgi.dmt.residential.Framework.Bundle--">Bundle</link> cannot be deleted.</para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para>
                        <code>  [String]</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Add Get </code>
                  </entry>
                  <entry>
                     <code>Bundle</code>
                  </entry>
                  <entry>
                     <code>0..*</code>
                  </entry>
                  <entry>
                     <code>D</code>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="Property" xml:id="org.osgi.dmt.residential.Framework.Property--">
                        <code>Property</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>MAP</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry morerows="1">
                     <para>
The Framework Properties.
 </para>
                     <para>
 The Framework properties come from the Bundle Context
 <code>getProperty()</code> method. However, this method does not provide the
 names of the available properties. If the handler of this node is aware
 of the framework properties then these should be used to provide the node
 names. If these properties are now known, the handler must synthesize the
 names from the following sources
 </para>
                     <itemizedlist>
                        <listitem>
                           <para>System Properties (as they are backing the Framework properties)</para>
                        </listitem>
                        <listitem>
                           <para>Launching properties as defined in the OSGi Core specification</para>
                        </listitem>
                        <listitem>
                           <para>Properties in the residential specification</para>
                        </listitem>
                        <listitem>
                           <para>Other known properties</para>
                        </listitem>
                     </itemizedlist>
                     <para/>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para>
                        <code>  [String]</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>string</code>
                  </entry>
                  <entry>
                     <code>0..*</code>
                  </entry>
                  <entry>
                     <code>D</code>
                  </entry>
               </row>
            </tbody>
         </tgroup>
      </table>
   </section>
   <section role="class" xreflabel="Wire" xml:id="org.osgi.dmt.residential.Wire">
      <title>Wire</title>
      <para>
A Wire is a link between two bundles where the semantics of this link is
 defined by the used name space. This is closely modeled after the Wiring API
 in the Core Framework.
   </para>
      <table tabstyle="ddfsubtree" pgwide="1">
         <title>Sub-tree Description for Wire</title>
         <tgroup cols="6">
            <colspec colwidth="1*"/>
            <colspec colwidth="0.6*"/>
            <colspec colwidth="1.5*"/>
            <colspec colwidth="0.5*"/>
            <colspec colwidth="0.2*"/>
            <colspec colwidth="2.5*"/>
            <thead>
               <row>
                  <entry>Name</entry>
                  <entry>Act</entry>
                  <entry>Type</entry>
                  <entry>Card.</entry>
                  <entry>S</entry>
                  <entry>Description</entry>
               </row>
            </thead>
            <tbody>
               <row>
                  <entry>
                     <para xreflabel="Namespace" xml:id="org.osgi.dmt.residential.Wire.Namespace--">
                        <code>Namespace</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>string</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
The name space of this wire. Can be:
 </para>
                     <itemizedlist>
                        <listitem>
                           <para>osgi.wiring.bundle - Defined in the OSGi Core</para>
                        </listitem>
                        <listitem>
                           <para>osgi.wiring.package - Defined in the OSGi Core</para>
                        </listitem>
                        <listitem>
                           <para>osgi.wiring.host - Defined in the OSGi Core</para>
                        </listitem>
                        <listitem>
                           <para>osgi.wiring.rmt.service - Defined in this specification</para>
                        </listitem>
                        <listitem>
                           <para>* - Generic name spaces</para>
                        </listitem>
                     </itemizedlist>
                     <para>
 The osgi.wiring.rmt.service name space is not defined by the OSGi Core as
 it is not part of the module layer. The name space has the following
 layout:
 </para>
                     <itemizedlist>
                        <listitem>
                           <para>Requirement - A filter on the service.id service property.</para>
                        </listitem>
                        <listitem>
                           <para>Capability - All service properties as attributes. No defined
 directives.</para>
                        </listitem>
                        <listitem>
                           <para>Requirer - The bundle that has gotten the service</para>
                        </listitem>
                        <listitem>
                           <para>Provider - The bundle that has registered the service</para>
                        </listitem>
                     </itemizedlist>
                     <para>
 There is a wire for each registration-get pair. That is, if a service is
 registered by A and gotten by B and C then there are two wires:
 <code>B-&gt;A</code> and <code>C-&gt;A</code>.</para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="Requirement" xml:id="org.osgi.dmt.residential.Wire.Requirement--">
                        <code>Requirement</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>Requirement</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
The Requirement that caused this wire.
   </para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="Capability" xml:id="org.osgi.dmt.residential.Wire.Capability--">
                        <code>Capability</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>Capability</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
The Capability that satisfied the requirement of this wire.
   </para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="Requirer" xml:id="org.osgi.dmt.residential.Wire.Requirer--">
                        <code>Requirer</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>string</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
The location of the Bundle that contains the requirement for this wire.
   </para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="Provider" xml:id="org.osgi.dmt.residential.Wire.Provider--">
                        <code>Provider</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>string</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
The location of the Bundle that provides the capability for this wire.
   </para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="InstanceId" xml:id="org.osgi.dmt.residential.Wire.InstanceId--">
                        <code>InstanceId</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>integer</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
Instance Id to allow addressing by Instance Id.
   </para>
                  </entry>
               </row>
            </tbody>
         </tgroup>
      </table>
   </section>
   <section role="class" xreflabel="Wire.Capability" xml:id="org.osgi.dmt.residential.Wire.Capability">
      <title>Wire.Capability</title>
      <para>
Describes a Capability.
   </para>
      <table tabstyle="ddfsubtree" pgwide="1">
         <title>Sub-tree Description for Wire.Capability</title>
         <tgroup cols="6">
            <colspec colwidth="1*"/>
            <colspec colwidth="0.6*"/>
            <colspec colwidth="1.5*"/>
            <colspec colwidth="0.5*"/>
            <colspec colwidth="0.2*"/>
            <colspec colwidth="2.5*"/>
            <thead>
               <row>
                  <entry>Name</entry>
                  <entry>Act</entry>
                  <entry>Type</entry>
                  <entry>Card.</entry>
                  <entry>S</entry>
                  <entry>Description</entry>
               </row>
            </thead>
            <tbody>
               <row>
                  <entry>
                     <para xreflabel="Directive" xml:id="org.osgi.dmt.residential.Wire.Capability.Directive--">
                        <code>Directive</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>MAP</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry morerows="1">
                     <para>
The Directives for this capability.
   </para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para>
                        <code>  [String]</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>string</code>
                  </entry>
                  <entry>
                     <code>0..*</code>
                  </entry>
                  <entry>
                     <code>D</code>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="Attribute" xml:id="org.osgi.dmt.residential.Wire.Capability.Attribute--">
                        <code>Attribute</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>MAP</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry morerows="1">
                     <para>
The Attributes for this capability.
   </para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para>
                        <code>  [String]</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>string</code>
                  </entry>
                  <entry>
                     <code>0..*</code>
                  </entry>
                  <entry>
                     <code>D</code>
                  </entry>
               </row>
            </tbody>
         </tgroup>
      </table>
   </section>
   <section role="class" xreflabel="Wire.Requirement" xml:id="org.osgi.dmt.residential.Wire.Requirement">
      <title>Wire.Requirement</title>
      <para>
Describes a Requirement.
   </para>
      <table tabstyle="ddfsubtree" pgwide="1">
         <title>Sub-tree Description for Wire.Requirement</title>
         <tgroup cols="6">
            <colspec colwidth="1*"/>
            <colspec colwidth="0.6*"/>
            <colspec colwidth="1.5*"/>
            <colspec colwidth="0.5*"/>
            <colspec colwidth="0.2*"/>
            <colspec colwidth="2.5*"/>
            <thead>
               <row>
                  <entry>Name</entry>
                  <entry>Act</entry>
                  <entry>Type</entry>
                  <entry>Card.</entry>
                  <entry>S</entry>
                  <entry>Description</entry>
               </row>
            </thead>
            <tbody>
               <row>
                  <entry>
                     <para xreflabel="Filter" xml:id="org.osgi.dmt.residential.Wire.Requirement.Filter--">
                        <code>Filter</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>string</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
The Filter string for this requirement.
   </para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="Directive" xml:id="org.osgi.dmt.residential.Wire.Requirement.Directive--">
                        <code>Directive</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>MAP</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry morerows="1">
                     <para>
The Directives for this requirement. These directives must contain
 the filter: directive as described by the Core.
   </para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para>
                        <code>  [String]</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>string</code>
                  </entry>
                  <entry>
                     <code>0..*</code>
                  </entry>
                  <entry>
                     <code>D</code>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="Attribute" xml:id="org.osgi.dmt.residential.Wire.Requirement.Attribute--">
                        <code>Attribute</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>MAP</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry morerows="1">
                     <para>
The Attributes for this requirement.
   </para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para>
                        <code>  [String]</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>string</code>
                  </entry>
                  <entry>
                     <code>0..*</code>
                  </entry>
                  <entry>
                     <code>D</code>
                  </entry>
               </row>
            </tbody>
         </tgroup>
      </table>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.dmt.service.log" xml:id="org.osgi.dmt.service.log" xml:base="002/../../../generated/javadoc/docbook/org.osgi.dmt.service.log-ddf.xml">
   <title>org.osgi.dmt.service.log</title>
   <info>
      <releaseinfo xml:id="org.osgi.dmt.service.log-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.dmt.service.log-version.number">1.0</edition>
   </info>
   <section role="class" xreflabel="Log" xml:id="org.osgi.dmt.service.log.Log">
      <title>Log</title>
      <para>
Provides access to the Log Entries of the Log Service.
   </para>
      <table tabstyle="ddfsubtree" pgwide="1">
         <title>Sub-tree Description for Log</title>
         <tgroup cols="6">
            <colspec colwidth="1*"/>
            <colspec colwidth="0.6*"/>
            <colspec colwidth="1.5*"/>
            <colspec colwidth="0.5*"/>
            <colspec colwidth="0.2*"/>
            <colspec colwidth="2.5*"/>
            <thead>
               <row>
                  <entry>Name</entry>
                  <entry>Act</entry>
                  <entry>Type</entry>
                  <entry>Card.</entry>
                  <entry>S</entry>
                  <entry>Description</entry>
               </row>
            </thead>
            <tbody>
               <row>
                  <entry>
                     <para xreflabel="LogEntries" xml:id="org.osgi.dmt.service.log.Log.LogEntries--">
                        <code>LogEntries</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>LIST</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry morerows="1">
                     <para>
A potentially long list of Log Entries. The length of this list is
 implementation dependent. The order of the list is most recent event at
 index 0 and later events with higher consecutive indexes.
 
 No new entries must be added to the log when there is an open exclusive
 or atomic session.
   </para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para>
                        <code>  [list]</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>LogEntry</code>
                  </entry>
                  <entry>
                     <code>0..*</code>
                  </entry>
                  <entry>
                     <code>D</code>
                  </entry>
               </row>
            </tbody>
         </tgroup>
      </table>
   </section>
   <section role="class" xreflabel="LogEntry" xml:id="org.osgi.dmt.service.log.LogEntry">
      <title>LogEntry</title>
      <para>
A Log Entry node is the representation of a LogEntry from the OSGi Log
 Service.
   </para>
      <table tabstyle="ddfsubtree" pgwide="1">
         <title>Sub-tree Description for LogEntry</title>
         <tgroup cols="6">
            <colspec colwidth="1*"/>
            <colspec colwidth="0.6*"/>
            <colspec colwidth="1.5*"/>
            <colspec colwidth="0.5*"/>
            <colspec colwidth="0.2*"/>
            <colspec colwidth="2.5*"/>
            <thead>
               <row>
                  <entry>Name</entry>
                  <entry>Act</entry>
                  <entry>Type</entry>
                  <entry>Card.</entry>
                  <entry>S</entry>
                  <entry>Description</entry>
               </row>
            </thead>
            <tbody>
               <row>
                  <entry>
                     <para xreflabel="Time" xml:id="org.osgi.dmt.service.log.LogEntry.Time--">
                        <code>Time</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>date_time</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
Time of the Log Entry.
   </para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="Level" xml:id="org.osgi.dmt.service.log.LogEntry.Level--">
                        <code>Level</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>integer</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
The severity level of the log entry. The value is the same as the Log
 Service level values:
 </para>
                     <itemizedlist>
                        <listitem>
                           <para>LOG_ERROR 1</para>
                        </listitem>
                        <listitem>
                           <para>LOG_WARNING 2</para>
                        </listitem>
                        <listitem>
                           <para>LOG_INFO 3</para>
                        </listitem>
                        <listitem>
                           <para>LOG_DEBUG 4</para>
                        </listitem>
                     </itemizedlist>
                     <para>
 Other values are possible because the Log Service allows custom levels.</para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="Message" xml:id="org.osgi.dmt.service.log.LogEntry.Message--">
                        <code>Message</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>string</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
Textual, human-readable description of the log entry.
   </para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="Bundle" xml:id="org.osgi.dmt.service.log.LogEntry.Bundle--">
                        <code>Bundle</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>string</code>
                  </entry>
                  <entry>
                     <code>1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
The location of the bundle that originated this log or an empty string.
   </para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para xreflabel="Exception" xml:id="org.osgi.dmt.service.log.LogEntry.Exception--">
                        <code>Exception</code>
                     </para>
                  </entry>
                  <entry>
                     <code>Get </code>
                  </entry>
                  <entry>
                     <code>string</code>
                  </entry>
                  <entry>
                     <code>0,1</code>
                  </entry>
                  <entry>
                     <code>A</code>
                  </entry>
                  <entry>
                     <para>
Human readable information about an exception.
 
 Provides the exception information if any, optionally including the stack
 trace.
   </para>
                  </entry>
               </row>
            </tbody>
         </tgroup>
      </table>
   </section>
</section>
</chapter>

  <chapter label="3" revision="$Id: e36c3d3c56383e2ef9dd819a5cd178ffd42500fc $" version="5" xml:id="tr157softwaremodules" xml:base="003/tr157softwaremodules.xml">
  <title>TR-157 Amendment 3 Software Module Guidelines</title>

  <info>
    <releaseinfo xml:id="tr157softwaremodules-version">Version
    1.0</releaseinfo>
  </info>

  <para><xref linkend="i747111"/> (BBF) has defined an object model for
  managing the software modules in a CPE. The BBF Software Modules object
  defines Execution Environments, Deployment Units, and Execution Units. These
  concepts are mapped in the following table.</para>

  <table>
    <title>Mapping of concepts</title>

    <tgroup cols="2">
      <colspec colnum="1" colwidth="1*"/>

      <colspec colnum="2" colwidth="2*"/>

      <thead>
        <row>
          <entry>Software Modules Concept</entry>

          <entry>OSGi Concept</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry><code>Execution Environment</code></entry>

          <entry><code>OSGi Framework</code></entry>
        </row>

        <row>
          <entry><code>Deployment Unit</code></entry>

          <entry><code>Bundle</code></entry>
        </row>

        <row>
          <entry><code>Execution Unit</code></entry>

          <entry><code>Bundle</code></entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <para>There can be multiple Execution Environments of the same or different
  types. The parent Execution Environment is either the native environment,
  for example Linux, or it can be another Framework. A BBF Deployment Unit and
  Execution Unit both map to a bundle since there is no need to separate those
  concepts in OSGi. An implementation of this object model should have access
  to all the Execution Environments as the Deployment Units and Execution
  Units are represented in a single table.</para>

  <para>This section is not a specification in the normal sense. The intention
  of this chapter is to provide guidelines for implementers of the <xref linkend="i751018"/> on an OSGi Framework.</para>

  <section>
    <title>Management Agent</title>

    <para>The Broadband Forum TR-157 Software Modules standard provides a
    uniform view of the different execution environments that are available in
    a device. Execution Environments can model the underlying operating
    system, an OSGi framework, or other environments that support managing the
    execution of code.</para>

    <para>Most parameters in the Software Modules object model map very well
    to their OSGi counter parts. However, there are a number of issues that
    require support from a <emphasis>management agent</emphasis>. This
    management agent must maintain state to implement the contract implied by
    the Software Modules standard. For example, the OSGi Framework does not
    have an Initial Start Level, an OSGi Framework always starts at an
    environment property defined start level. However, the standard requires
    that a Framework must start at a given level after it is launched.</para>

    <para>There are many other actions that require a management agent to
    provide the functionality required by TR-157 that is not build into the
    OSGi Framework since the standard requires a view that covers the whole
    device, not just the OSGi environment. The assumed architecture is
    depicted in <xref linkend="i751444"/>.</para>

    <figure xml:id="i751444">
      <title>Management Agent Architecture</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="3.025in" contentwidth="5.261in" fileref="management-agent-architecture.svg"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section>
    <title>Parameter Mapping</title>

    <para>The following table provides OSGi specific information for the
    different parameters in the Software Modules object model.</para>

    <table pgwide="1">
      <title>OSGi Specific Information for the BBF Software Modules object
      model</title>

      <tgroup cols="2">
        <colspec colnum="1" colwidth="1*"/>

        <colspec colnum="2" colwidth="2*"/>

        <thead>
          <row>
            <entry><para>TR-069 Software Module</para><para>Object
            Parameter</para></entry>

            <entry>Mapping in case of OSGi</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>Device.SoftwareModules.</code></entry>

            <entry><para/></entry>
          </row>

          <row>
            <entry><code> ExecEnvNumberOfEntries</code></entry>

            <entry><para/></entry>
          </row>

          <row>
            <entry><code> DeploymentUnitNumberOfEntries</code></entry>

            <entry><para/></entry>
          </row>

          <row>
            <entry><code> ExecutionUnitNumberOfEntries</code></entry>

            <entry><para/></entry>
          </row>

          <row>
            <entry><code>Device.SoftwareModules.ExecEnv.{i}.</code></entry>

            <entry><para/></entry>
          </row>

          <row>
            <entry><code> Enable</code></entry>

            <entry><para>Indicates whether or not this OSGi Framework is
            enabled. Disabling an enabled OSGi Framework must stop it, while
            enabling a disabled OSGi Framework must launch it. When an
            Execution Environment is disabled, Bundles installed in that OSGi
            Framework will be unaffected, but any Bundles on that OSGi
            Framework are automatically made inactive. When an OSGi Framework
            is disabled it is impossible to make changes to the installed
            bundles, install new bundles, or query any information about the
            bundles. Disabling the OSGi Framework could place the device in a
            non-manageable state. For example, if the OSGi Framework runs the
            Protocol Adapter or has a management agent then it is possible
            that the device can no longer be restarted.</para></entry>
          </row>

          <row>
            <entry><code> Status</code></entry>

            <entry><para>Indicates the status of the OSGi Framework.
            Enumeration of:</para><itemizedlist>
                <listitem>
                  <para><code>Up</code> - The OSGi Framework is up and
                  running.</para>
                </listitem>

                <listitem>
                  <para><code>Error</code> - The OSGi Framework could not be
                  launched.</para>
                </listitem>

                <listitem>
                  <para><code>Disabled</code> - The OSGi Framework is not
                  enabled</para>
                </listitem>
              </itemizedlist></entry>
          </row>

          <row>
            <entry><code> Reset</code></entry>

            <entry><para>Setting this parameter to <code>true</code> causes
            this OSGi Framework to revert back to the state it was in when the
            device last issued a <code>0 BOOTSTRAP Inform</code> event
            (bootstrap). The following requirements dictate what must happen
            for the reset to be complete:</para><itemizedlist>
                <listitem>
                  <para>The system must restore the set of bundles that were
                  present at the last bootstrap event. That means that
                  installed bundles since that moment must be uninstalled,
                  updated bundles rolled back, and uninstalled bundles
                  re-installed.</para>
                </listitem>

                <listitem>
                  <para>The OSGi Framework must roll back to the version it
                  had during the previous rollback.</para>
                </listitem>

                <listitem>
                  <para>The OSGi Framework must be restarted after the
                  previous requirements have been met.</para>
                </listitem>
              </itemizedlist><para>The value of this parameter is not part of
            the device configuration and is always <code>false</code> when
            read.</para></entry>
          </row>

          <row>
            <entry><code> Alias</code></entry>

            <entry><para>A non-volatile handle used to reference this instance
            for alias based addressing.</para></entry>
          </row>

          <row>
            <entry><code> Name</code></entry>

            <entry><para>A Name that adequately distinguishes this OSGi
            Framework from all other OSGi Frameworks. This must be the OSGi
            Framework UUID as stored in the
            <code>org.osgi.framework.uuid</code> property. </para></entry>
          </row>

          <row>
            <entry><code> Type</code></entry>

            <entry><para>Indicates the complete type and specification version
            of this <code>ExecEnv</code>. For an OSGi Framework it must
            be:</para><programlisting>OSGi &lt;version&gt;</programlisting><para>Where
            the <code>&lt;version&gt;</code> is the value of the framework
            property <code>org.osgi.framework.version</code></para></entry>
          </row>

          <row>
            <entry><code> InitialRunLevel</code></entry>

            <entry><para>The run level that this <code>ExecEnv</code> will be
            in upon startup (whether that is caused by a CPE Boot or the
            Execution Environment starting). Run levels map to directly OSGi
            start levels. However, the OSGi Framework has no concept of an
            initial start level, it can use the
            <code>org.osgi.framework.startlevel.beginning</code> environment
            property but this requires a management to control it. A
            management agent must therefore handle this value and instruct the
            OSGi Framework to move to this start level after a
            reboot.</para><para>If the value of <code>CurrentRunLevel</code>
            is set to -1, then the value of this parameter is irrelevant when
            read. Setting its value to -1 must have no impact on the start
            level of this OSGi Framework.</para></entry>
          </row>

          <row>
            <entry><code> RequestedRunLevel</code></entry>

            <entry><para>Sets the start level of this OSGi Framework, meaning
            that altering this parameter's value will change the value of the
            <code>CurrentRunLevel</code> asynchronously. Start levels dictate
            which Bundles will be started. Setting this value when
            <code>CurrentRunLevel</code> is -1 must have no impact on the
            start Level of this OSGi Framework. The value of this parameter is
            not part of the device configuration and must always be -1 when
            read.</para></entry>
          </row>

          <row>
            <entry><code> CurrentRunLevel</code></entry>

            <entry><para>The start level that this OSGi Framework is currently
            operating in. This value is altered by changing the
            <code>RequestedRunLevel</code> parameter. Upon startup (whether
            that is caused by a CPE Boot or the Execution Environment
            starting) <code>CurrentRunLevel</code> must be set equal to
            <code>InitialRunLevel</code> by some management agent.
            </para><para>If Run Levels are not supported by this OSGi
            Framework then <code>CurrentRunLevel</code> must be
            -1.</para></entry>
          </row>

          <row>
            <entry><code> Version</code></entry>

            <entry><para>The Version of this OSGi Framework as specified by
            its Vendor. This is not the version of its specification. Must be
            the value of the System Bundle's <code>getVersion()</code>
            method.</para></entry>
          </row>

          <row>
            <entry><code> Vendor</code></entry>

            <entry><para>The vendor that produced this OSGi Framework, the
            value of the <code>org.osgi.framework.vendor</code> Framework
            property.</para></entry>
          </row>

          <row>
            <entry><code> ParentExecEnv</code></entry>

            <entry><para>The value must be the path name of a row in the
            <code>ExecEnv</code> table, it can either be the operating system
            or another OSGi Framework if the framework is nested. If the
            referenced object is deleted, the parameter value must be set to
            an empty string. If this value is an empty string then this is
            the<emphasis> Primary Execution
            Environment</emphasis>.</para></entry>
          </row>

          <row>
            <entry><code> AllocatedDiskSpace</code></entry>

            <entry><para>Implementation specific.</para></entry>
          </row>

          <row>
            <entry><code> AvailableDiskSpace</code></entry>

            <entry><para>Implementation specific.</para></entry>
          </row>

          <row>
            <entry><code> AllocatedMemory</code></entry>

            <entry><para>Implementation specific.</para></entry>
          </row>

          <row>
            <entry><code> AvailableMemory</code></entry>

            <entry><para>Implementation specific.</para></entry>
          </row>

          <row>
            <entry><code> ProcessorRefList</code></entry>

            <entry><para>Comma-separated list of paths into the
            <code>DeviceInfo.Processor</code> table. If the referenced object
            is deleted, the corresponding item must be removed from the list.
            Represents the processors that this OSGi Framework has available
            to it.</para></entry>
          </row>

          <row>
            <entry><code> ActiveExecutionUnits</code></entry>

            <entry><para>Comma-separated list of paths into the
            <code>ExecutionUnit</code> table. If the referenced object is
            deleted, the corresponding item must be removed from the list.
            Represents the Bundles currently active on this OSGi
            Framework.</para></entry>
          </row>

          <row>
            <entry><para><code>Device.SoftwareModules.</code></para><para><code>    DeploymentUnit.{i}.</code></para></entry>

            <entry><para>This table serves as the Bundles inventory and
            contains status information about each Bundle. A new instance of
            this table gets created during the installation of a
            Bundle.</para></entry>
          </row>

          <row>
            <entry><code> UUID</code></entry>

            <entry><para>A Universally Unique Identifier either provided by
            the ACS, or generated by the CPE, at the time of Deployment Unit
            Installation. The format of this value is defined by <xref linkend="i749662"/> Version 3 (Name-Based) and <xref linkend="i749742"/>. This value must not be altered when the
            Bundle is updated. A management agent should use the UUID as the
            bundle location since the location plays the same
            role.</para></entry>
          </row>

          <row>
            <entry><code> DUID</code></entry>

            <entry><para>The Bundle id from the <code>getBundleId()</code>
            method.</para></entry>
          </row>

          <row>
            <entry><code> Alias</code></entry>

            <entry><para>A non-volatile handle used to reference this
            instance.</para></entry>
          </row>

          <row>
            <entry><code> Name</code></entry>

            <entry><para>Indicates the Bundle Symbolic Name of this Bundle.
            The value of this parameter is used in the generation of the UUID
            based on the rules defined in <xref linkend="i749742"/>.</para></entry>
          </row>

          <row>
            <entry><code> Status</code></entry>

            <entry><para>Indicates the status of this Bundle. Enumeration
            of:</para><itemizedlist>
                <listitem>
                  <para><code>Installing</code> - This bundle is in the
                  process of being Installed and should transition to the
                  Installed state. This state will never be visible in an OSGi
                  Framework.</para>
                </listitem>

                <listitem>
                  <para><code>Installed</code> - This bundle has been
                  successfully installed.This maps to the Bundle
                  <code>INSTALLED</code> or <code>RESOLVED</code>
                  state.</para>
                </listitem>

                <listitem>
                  <para><code>Updating</code> - This bundle is in the process
                  of being updated and should transition to the Installed
                  state. This state will never be visible in an OSGi
                  Framework.</para>
                </listitem>

                <listitem>
                  <para><code>Uninstalling</code> - This bundle is in the
                  process of being uninstalled and should transition to the
                  uninstalled state.This state will never be visible in an
                  OSGi Framework.</para>
                </listitem>

                <listitem>
                  <para><code>Uninstalled</code> - This bundle has been
                  successfully uninstalled. This state will never be visible
                  in an OSGi Framework.</para>
                </listitem>
              </itemizedlist></entry>
          </row>

          <row>
            <entry><code> Resolved</code></entry>

            <entry><para>Indicates whether or not this
            <code>DeploymentUnit</code> has resolved all of its dependencies.
            Must be true if this Bundle's state is <code>ACTIVE</code>,
            <code>STARTING</code>, <code>STOPPING</code>, or
            <code>RESOLVED</code>. Otherwise it must be
            <code>false</code>.</para></entry>
          </row>

          <row>
            <entry><code> URL</code></entry>

            <entry><para>Contains the URL used by the most recent
            <code>ChangeDUState</code> RPC to either Install or Update this
            Bundle. This must be remembered by a management agent since this
            information is not available in a Bundle.</para></entry>
          </row>

          <row>
            <entry><code> Description</code></entry>

            <entry><para>Textual description of this Bundle, must be the value
            of the Bundle-Description manifest header or an empty string if
            not present.</para></entry>
          </row>

          <row>
            <entry><code> Vendor</code></entry>

            <entry><para>The author of this <code>DeploymentUnit</code>
            formatted as a domain name. The value of this parameter is used in
            the generation of the UUID based on the rules defined in <xref linkend="i749742"/>. The recommended value is the value of the
            Bundle-Vendor header.</para></entry>
          </row>

          <row>
            <entry><code> Version</code></entry>

            <entry><para>Version of this Bundle, it mist be he value of the
            <code>geVersion()</code> method.</para></entry>
          </row>

          <row>
            <entry><code> VendorLogList</code></entry>

            <entry><para>Empty String</para></entry>
          </row>

          <row>
            <entry><code> VendorConfigList</code></entry>

            <entry><para>Empty String</para></entry>
          </row>

          <row>
            <entry><code> ExecutionUnitList</code></entry>

            <entry><para>A path into the <code>ExecutionUnit</code> table for
            the corresponding <code>ExecutionUnit</code> for this Bundle,
            which is also the bundle since the relation is 1:1.</para></entry>
          </row>

          <row>
            <entry><code> ExecutionEnvRef</code></entry>

            <entry><para>The value must be the path name of a row in the
            <code>ExecEnv</code> table of the corresponding OSGi
            Framework.</para></entry>
          </row>

          <row>
            <entry><para><code>Device.SoftwareModules.</code></para><para><code>     ExecutionUnit.{i}.</code></para></entry>

            <entry><para>This table serves as the Execution Unit inventory and
            contains both status information about each Execution Unit as well
            as configurable parameters for each Execution Unit. This list
            contains all the bundles since in an OSGi Framework Deployment
            Unit and Execution Unit are mapped to Bundles.</para></entry>
          </row>

          <row>
            <entry><code> EUID</code></entry>

            <entry><para>Table wide identifier for a bundle chosen by the OSGi
            Framework during installation of the associated
            <code>DeploymentUnit</code>. The value must be unique across
            <code>ExecEnv</code> instances. It is recommended that this be a
            combination of the <code>ExecEnv.{i}.Name</code> and an OSGi
            Framework local unique value. The unique value for an OSGi
            framework should be the Bundle Location.</para></entry>
          </row>

          <row>
            <entry><code> Alias</code></entry>

            <entry><para>A non-volatile handle used to reference this
            instance.</para></entry>
          </row>

          <row>
            <entry><code> Name</code></entry>

            <entry><para>The name should be unique across all Bundles
            instances contained within its associated
            <code>DeploymentUnit</code>. As the Deployment Unit and the
            Execution Unit are the same the value must be the Bundle Symbolic
            Name.</para></entry>
          </row>

          <row>
            <entry><code> ExecEnvLabel</code></entry>

            <entry><para>The name must be unique across all Bundles contained
            within a specific OSGi Framework. This must therefore be the
            Bundle Id.</para></entry>
          </row>

          <row>
            <entry><code> AutoStart</code></entry>

            <entry><para>If <code>true</code> and the proper start level is
            met, then this Bundle will be automatically started by the device
            after its OSGi Framework's start level is met. If
            <code>false</code> this Bundle must not be started after launch
            until it is explicitly commanded to do so.</para><para>An OSGi
            bundle is persistently started or transiently started. It is not
            possible to change this state without affecting the active state
            of the bundle. Therefore, if the <code>AutoStart</code> is set to
            <code>true</code>, the bundle must be started persistently, even
            if it is already started. This will record the persistent start
            state. If the <code>AutoStart</code> is set to <code>false</code>,
            the bundle must be stopped. Therefore, in an OSGi Framework
            setting the <code>AutoStart</code> flag to <code>true</code> has
            the side effect that the bundle is started if it was not active;
            setting it to <code>false</code> will stop the
            bundle.</para></entry>
          </row>

          <row>
            <entry><code> RunLevel</code></entry>

            <entry><para>Determines when this Bundle will be started. If
            <code>AutoStart</code> is <code>true</code> and the <code>
            CurrentRunLevel</code> is greater than or equal to this
            <code>RunLevel</code>, then this <code>ExecutionUnit</code> must
            be started, if run levels are enabled. This maps directly to the
            Bundles start level.</para></entry>
          </row>

          <row>
            <entry><code> Status</code></entry>

            <entry><para>Indicates the status of this
            <code>ExecutionUnit</code>. Enumeration of:</para><itemizedlist>
                <listitem>
                  <para><code>Idle</code> - This Bundle is in an Idle state
                  and not running. This maps to the Bundle
                  <code>INSTALLED</code> or Bundle <code>RESOLVED</code>
                  state.</para>
                </listitem>

                <listitem>
                  <para><code>Starting</code> - This Bundle is in the process
                  of starting and should transition to the Active state. This
                  maps to the <code>STARTING</code> state in OSGi. In an OSGi
                  Framework, lazily activated bundles can remain in the
                  <code>STARTING</code> state for a long time.</para>
                </listitem>

                <listitem>
                  <para><code>Active</code> - This instance is currently
                  running. This maps to the Bundle <code>ACTIVE</code>
                  state.</para>
                </listitem>

                <listitem>
                  <para><code>Stopping</code> - This instance is in the
                  process of stopping and should transition to the Idle
                  state.</para>
                </listitem>
              </itemizedlist></entry>
          </row>

          <row>
            <entry><code> RequestedState</code></entry>

            <entry><para>Indicates the state transition that the ACS is
            requesting for this Bundle. Enumeration of:</para><itemizedlist>
                <listitem>
                  <para><code>Idle</code> - If this Bundle is currently in
                  <code>STARTING</code> or <code>ACTIVE</code> state then the
                  CPE must attempt to stop the Bundle; otherwise this
                  requested state is ignored.</para>
                </listitem>

                <listitem>
                  <para><code>Active</code> - If this Bundle is currently in
                  the <code>INSTALLED</code> or <code>RESOLVED</code> state
                  the management agent must attempt to start the Bundle. If
                  this ExecutionUnit is in the <code>STOPPING</code> state the
                  request is rejected and a fault raised. Otherwise this
                  requested state is ignored.</para>
                </listitem>
              </itemizedlist><para>If this Bundle is disabled and an attempt
            is made to alter this value, then a CWMP Fault must be generated.
            The value of this parameter is not part of the device
            configuration and is always an empty string when read. Bundles
            must be started transiently when the <code>AutoStart</code> is
            <code>false</code>, otherwise persistently.</para></entry>
          </row>

          <row>
            <entry><code> ExecutionFaultCode</code></entry>

            <entry><para>If while running or transitioning between states this
            Bundle raises an Exception then this parameter embodies the
            problem. Enumeration of:</para><itemizedlist>
                <listitem>
                  <para><code>NoFault</code> - No fault, default value.</para>
                </listitem>

                <listitem>
                  <para><code>FailureOnStart</code> - Threw an exception when
                  started.</para>
                </listitem>

                <listitem>
                  <para><code>FailureOnAutoStart</code> - Failed to be started
                  by the framework, this must be intercepted by the management
                  agent because this is a Framework Error event.</para>
                </listitem>

                <listitem>
                  <para><code>FailureOnStop</code> - Raised an exception while
                  stopping</para>
                </listitem>

                <listitem>
                  <para><code>FailureWhileActive</code> - Raised when a bundle
                  cannot be restarted after a background operation of the
                  Framework, for example refreshing.</para>
                </listitem>

                <listitem>
                  <para><code>DependencyFailure</code> - Failed to
                  resolve</para>
                </listitem>

                <listitem>
                  <para><code>UnStartable</code> - Cannot be raised in OSGi
                  since this is the same error as
                  <code>FailureOnStart</code>.</para>
                </listitem>
              </itemizedlist><para>For fault codes not included in this list,
            the vendor can include vendor-specific values, which must use the
            format defined in Section 3.3 of <xref linkend="i749746"/>.</para></entry>
          </row>

          <row>
            <entry><code> ExecutionFaultMessage</code></entry>

            <entry><para>If while running or transitioning between states this
            Bundle identifies a fault this parameter provides a more detailed
            explanation of the problem enumerated in the
            <code>ExecutionFaultCode</code>.</para><para>If
            <code>ExecutionFaultCode</code> has the value of
            <code>NoFault</code> then the value of this parameter must be an
            empty string and ignored. This message must be the message value
            of the exception thrown by the Bundle.</para></entry>
          </row>

          <row>
            <entry><code> Vendor</code></entry>

            <entry><para>Vendor of this Bundle. The value of the Bundle-Vendor
            manifest header</para></entry>
          </row>

          <row>
            <entry><code> Description</code></entry>

            <entry><para>Textual description of this Bundle. The value of the
            Bundle-Description manifest header</para></entry>
          </row>

          <row>
            <entry><code> Version</code></entry>

            <entry><para>Version of the Bundle. The value of the
            <code>getVersion()</code> method.</para></entry>
          </row>

          <row>
            <entry><code> VendorLogList</code></entry>

            <entry><para>Empty string.</para></entry>
          </row>

          <row>
            <entry><code> VendorConfigList</code></entry>

            <entry><para>Empty string.</para></entry>
          </row>

          <row>
            <entry><code> DiskSpaceInUse</code></entry>

            <entry><para>Implementation defined</para></entry>
          </row>

          <row>
            <entry><code> MemoryInUse</code></entry>

            <entry><para>Implementation defined</para></entry>
          </row>

          <row>
            <entry><code> References</code></entry>

            <entry><para>Empty String</para></entry>
          </row>

          <row>
            <entry><code> AssociatedProcessList</code></entry>

            <entry><para>Empty String as an OSGi bundle reuses the process of
            the VM.</para></entry>
          </row>

          <row>
            <entry><code> SupportedDataModelList</code></entry>

            <entry><para>Comma-separated list of strings. Each list item must
            be the path name of a row in the DeviceInfo.SupportedDataModel
            table. If the referenced object is deleted, the corresponding item
            must be removed from the list. Represents the CWMP-DT schema
            instances that have been introduced to this device because of the
            existence of this <code>ExecutionUnit</code>. In OSGi this is
            implementation defined.</para></entry>
          </row>

          <row>
            <entry><code> ExecutionEnvRef</code></entry>

            <entry><para>The path to the OSGi Framework that hosts this bundle
            in the <code>ExecEnv</code> table.</para></entry>
          </row>

          <row>
            <entry><para><code>Device.SoftwareModules.</code></para><para><code> ExecutionUnit.{i}.Extensions.</code></para></entry>

            <entry><para>This object proposes a general location for vendor
            extensions specific to this Execution Unit, which allows multiple
            Execution Units to expose parameters without the concern of
            conflicting parameter names. This part is not used in
            OSGi.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i747111"><title>Broadband
      Forum</title>http://www.broadband-forum.org</bibliomixed>

      <bibliomixed xml:id="i749662"><title>RFC 4122 A Universally Unique
      IDentifier (UUID) URN
      Namespace</title>http://tools.ietf.org/html/rfc4122</bibliomixed>

      <bibliomixed><title>TR-157a3 Component Objects for
      CWMP</title>http://www.broadband-forum.org/technical/download/TR-157_Amendment-3.pdf</bibliomixed>

      <bibliomixed xml:id="i751018"><title>TR-157a3 Internet Gateway Device
      Software
      Modules</title>http://www.broadband-forum.org/cwmp/tr-157-1-3-0-igd.html#D.InternetGatewayDevice.SoftwareModules</bibliomixed>

      <bibliomixed xml:id="i749742"><title>TR-069a3 CPE WAN Management
      Protocol</title>http://www.broadband-forum.org/technical/download/TR-069_Amendment-3.pdf</bibliomixed>

      <bibliomixed xml:id="i749746"><title>TR-106a4 Data Model Template for
      TR-069-Enabled
      Devices</title>http://www.broadband-forum.org/technical/download/TR-106_Amendment-4.pdf</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="101" revision="$Id: d938b01c5db41c3b9b67febbfce090bf52dc3025 $" version="5" xml:id="service.log" xml:base="../101/service.log.xml">
  <title>Log Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.log-version" linkend="org.osgi.service.log"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para xml:id="i1492311">The Log Service provides a general purpose message
    logger for the OSGi framework. It consists of two services, one for
    logging information and another for retrieving current or previously
    recorded log information.</para>

    <para>This specification defines the methods and semantics of interfaces
    which bundle developers can use to log entries and to retrieve log
    entries.</para>

    <para xml:id="i1294527">Bundles can use the Log Service to log information
    for the Operator. Other bundles, oriented toward management of the
    environment, can use the Log Reader Service to retrieve Log Entry objects
    that were recorded recently or to receive Log Entry objects as they are
    logged by other bundles.</para>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>LogService</emphasis> - The service interface that
          allows a bundle to log information, including a message, a level, an
          exception, a <code>ServiceReference</code> object, and a
          <code>Bundle</code> object.</para>
        </listitem>

        <listitem>
          <para><emphasis>LogEntry</emphasis> - An interface that allows
          access to a log entry in the log. It includes all the information
          that can be logged through the Log Service and a time stamp.</para>
        </listitem>

        <listitem>
          <para><emphasis>LogReaderService</emphasis> - A service interface
          that allows access to a list of recent <code>LogEntry</code>
          objects, and allows the registration of a <code>LogListener</code>
          object that receives <code>LogEntry</code> objects as they are
          created.</para>
        </listitem>

        <listitem>
          <para><emphasis>LogListener</emphasis> - The interface for the
          listener to <code>LogEntry</code> objects. Must be registered with
          the Log Reader Service.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>Log Service Class Diagram org.osgi.service.log package</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.944in" contentwidth="7.000in" fileref="logservice-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>The Log Service Interface</title>

    <para>The <code>LogService</code> interface allows bundle developers to
    log messages that can be distributed to other bundles, which in turn can
    forward the logged entries to a file system, remote system, or some other
    destination.</para>

    <para>The <code>LogService</code> interface allows the bundle developer
    to:</para>

    <itemizedlist xml:id="i1294532">
      <listitem>
        <para>Specify a message and/or exception to be logged.</para>
      </listitem>

      <listitem xml:id="i1294533">
        <para>Supply a log level representing the severity of the message
        being logged. This should be one of the levels defined in the
        <code>LogService</code> interface but it may be any integer that is
        interpreted in a user-defined way.</para>
      </listitem>

      <listitem>
        <para>Specify the Service associated with the log requests.</para>
      </listitem>
    </itemizedlist>

    <para xml:id="i1294534">By obtaining a <code>LogService</code> object from
    the Framework service registry, a bundle can start logging messages to the
    LogService object by calling one of the <code>LogService</code> methods. A
    Log Service object can log any message, but it is primarily intended for
    reporting events and error conditions.</para>

    <para>The <code>LogService</code> interface defines these methods for
    logging messages:</para>

    <itemizedlist>
      <listitem>
        <para><code>log(int, String)</code> - This method logs a simple
        message at a given log level.</para>
      </listitem>

      <listitem>
        <para><code>log(int, String, Throwable)</code> - This method logs a
        message with an exception at a given log level.</para>
      </listitem>

      <listitem>
        <para><code>log(ServiceReference, int, String)</code> - This method
        logs a message associated with a specific service.</para>
      </listitem>

      <listitem>
        <para><code>log(ServiceReference, int, String, Throwable)</code> -
        This method logs a message with an exception associated with a
        specific service.</para>
      </listitem>
    </itemizedlist>

    <para xml:id="i1294535">While it is possible for a bundle to call one of
    the <code>log</code> methods without providing a
    <code>ServiceReference</code> object, it is recommended that the caller
    supply the <code>ServiceReference</code> argument whenever appropriate,
    because it provides important context information to the operator in the
    event of problems.</para>

    <para>The following example demonstrates the use of a <code>log</code>
    method to write a message into the log.</para>

    <programlisting>logService.log(
    myServiceReference,
    LogService.LOG_INFO, 
    "myService is up and running"
);</programlisting>

    <para>In the example, the <code>myServiceReference</code> parameter
    identifies the service associated with the log request. The specified
    level, <code>LogService.LOG_INFO</code>, indicates that this message is
    informational.</para>

    <para>The following example code records error conditions as log
    messages.</para>

    <programlisting>try {
    FileInputStream fis = new FileInputStream("myFile");
    int b;
    while ( (b = fis.read()) != -1 ) {
      ...
    }
    fis.close();
}
catch ( IOException exception ) {
    logService.log(
        myServiceReference, 
        LogService.LOG_ERROR, 
        "Cannot access file", 
        exception );
}</programlisting>

    <para xml:id="i1294536">Notice that in addition to the error message, the
    exception itself is also logged. Providing this information can
    significantly simplify problem determination by the Operator.</para>
  </section>

  <section>
    <title>Log Level and Error Severity</title>

    <para>The <code>log</code> methods expect a log level indicating error
    severity, which can be used to filter log messages when they are
    retrieved. The severity levels are defined in the <code>LogService</code>
    interface.</para>

    <para>Callers must supply the log levels that they deem appropriate when
    making log requests.</para>

    <para>The following table lists the log levels.</para>

    <table>
      <title>Log Levels</title>

      <tgroup cols="2">
        <colspec colnum="1" colwidth="1.2*"/>

        <colspec colnum="2" colwidth="5*"/>

        <thead>
          <row>
            <entry>Level</entry>

            <entry>Descriptions</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><para><code>LOG_DEBUG</code></para></entry>

            <entry><para>Used for problem determination and may be irrelevant
            to anyone but the bundle developer.</para></entry>
          </row>

          <row>
            <entry><para><code>LOG_ERROR</code></para></entry>

            <entry><para>Indicates the bundle or service may not be
            functional. Action should be taken to correct this
            situation.</para></entry>
          </row>

          <row>
            <entry><para><code>LOG_INFO</code></para></entry>

            <entry><para>May be the result of any change in the bundle or
            service and does not indicate a problem.</para></entry>
          </row>

          <row>
            <entry><para><code>LOG_WARNING</code></para></entry>

            <entry><para>Indicates a bundle or service is still functioning
            but may experience problems in the future because of the warning
            condition.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section xml:id="i1210758">
    <title>Log Reader Service</title>

    <para>The Log Reader Service maintains a list of <code>LogEntry</code>
    objects called the <emphasis>log</emphasis>. The Log Reader Service is a
    service that bundle developers can use to retrieve information contained
    in this log, and receive notifications about <code>LogEntry</code> objects
    when they are created through the Log Service.</para>

    <para>The size of the log is implementation-specific, and it determines
    how far into the past the log entries go. Additionally, some log entries
    may not be recorded in the log in order to save space. In particular,
    <code>LOG_DEBUG</code> log entries may not be recorded. Note that this
    rule is implementation-dependent. Some implementations may allow a
    configurable policy to ignore certain <code>LogEntry</code> object
    types.</para>

    <para>The <code>LogReaderService</code> interface defines these methods
    for retrieving log entries.</para>

    <itemizedlist>
      <listitem>
        <para><code>getLog()</code> - This method retrieves past log entries
        as an enumeration with the most recent entry first.</para>
      </listitem>

      <listitem>
        <para><code>addLogListener(LogListener)</code> - This method is used
        to subscribe to the Log Reader Service in order to receive log
        messages as they occur. Unlike the previously recorded log entries,
        all log messages must be sent to subscribers of the Log Reader Service
        as they are recorded.</para>

        <para>A subscriber to the Log Reader Service must implement the
        <code>LogListener</code> interface.</para>

        <para>After a subscription to the Log Reader Service has been started,
        the subscriber's <code>LogListener.logged</code> method must be called
        with a <code>Log-Entry</code> object for the message each time a
        message is logged.</para>
      </listitem>
    </itemizedlist>

    <para>The <code>LogListener</code> interface defines the following
    method:</para>

    <itemizedlist>
      <listitem>
        <para><code>logged(LogEntry)</code> - This method is called for each
        <code>Log-Entry</code> object created. A Log Reader Service
        implementation must not filter entries to the <code>LogListener</code>
        interface as it is allowed to do for its log. A
        <code>LogListener</code> object should see all <code>LogEntry</code>
        objects that are created.</para>
      </listitem>
    </itemizedlist>

    <para>The delivery of <code>LogEntry</code> objects to the
    <code>LogListener</code> object should be done asynchronously.</para>
  </section>

  <section xml:id="i1231250">
    <title>Log Entry Interface</title>

    <para>The <code>LogEntry</code> interface abstracts a log entry. It is a
    record of the information that was passed when an event was logged, and
    consists of a superset of information which can be passed through the
    <code>LogService</code> methods. The <code>LogEntry</code> interface
    defines these methods to retrieve information related to
    <code>Log-Entry</code> objects:</para>

    <itemizedlist>
      <listitem>
        <para><code>getBundle()</code> - This method returns the Bundle object
        related to a <code>Log-Entry</code> object.</para>
      </listitem>

      <listitem>
        <para><code>getException()</code> - This method returns the exception
        related to a <code>Log-Entry</code> object. In some implementations,
        the returned exception may not be the original exception. To avoid
        references to a bundle defined exception class, thus preventing an
        uninstalled bundle from being garbage collected, the Log Service may
        return an exception object of an implementation defined Throwable
        subclass. This object will attempt to return as much information as
        possible, such as the message and stack trace, from the original
        exception object .</para>
      </listitem>

      <listitem>
        <para><code>getLevel()</code> - This method returns the severity level
        related to a <code>Log-Entry</code> object.</para>
      </listitem>

      <listitem>
        <para><code>getMessage()</code> - This method returns the message
        related to a <code>Log-Entry</code> object.</para>
      </listitem>

      <listitem>
        <para><code>getServiceReference()</code> - This method returns the
        <code>ServiceReference</code> object of the service related to a
        <code>Log-Entry</code> object.</para>
      </listitem>

      <listitem>
        <para><code>getTime()</code> - This method returns the time that the
        log entry was created.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Mapping of Events</title>

    <para>Implementations of a Log Service must log Framework-generated events
    and map the information to <code>LogEntry</code> objects in a consistent
    way. Framework events must be treated exactly the same as other logged
    events and distributed to all <code>LogListener</code> objects that are
    associated with the Log Reader Service. The following sections define the
    mapping for the three different event types: Bundle, Service, and
    Framework.</para>

    <section>
      <title>Bundle Events Mapping</title>

      <para>A Bundle Event is mapped to a <code>LogEntry</code> object
      according to the following table.</para>

      <table>
        <title>Mapping of Bundle Events to Log Entries</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>Log Entry method</entry>

              <entry>Information about Bundle Event</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>getLevel()</code></entry>

              <entry><para><code>LOG_INFO</code></para></entry>
            </row>

            <row>
              <entry><code>getBundle()</code></entry>

              <entry><para>Identifies the bundle to which the event happened.
              In other words, it identifies the bundle that was installed,
              started, stopped, updated, or uninstalled. This identification
              is obtained by calling <code>getBundle()</code> on the
              <code>BundleEvent</code> object.</para></entry>
            </row>

            <row>
              <entry><code>getException()</code></entry>

              <entry><para><code>null</code></para></entry>
            </row>

            <row>
              <entry><code>getServiceReference()</code></entry>

              <entry><para><code>null</code></para></entry>
            </row>

            <row>
              <entry><code>getMessage()</code></entry>

              <entry><para>The message depends on the event
              type:</para><itemizedlist>
                  <listitem>
                    <para><code>INSTALLED</code> - "BundleEvent
                    INSTALLED"</para>
                  </listitem>

                  <listitem>
                    <para><code>STARTED</code> - "BundleEvent STARTED"</para>
                  </listitem>

                  <listitem>
                    <para><code>STOPPED</code> - "BundleEvent STOPPED"</para>
                  </listitem>

                  <listitem>
                    <para><code>UPDATED</code> - "BundleEvent UPDATED"</para>
                  </listitem>

                  <listitem>
                    <para><code>UNINSTALLED</code> - "BundleEvent
                    UNINSTALLED"</para>
                  </listitem>

                  <listitem>
                    <para><code>RESOLVED</code> - "BundleEvent
                    RESOLVED"</para>
                  </listitem>

                  <listitem>
                    <para><code>UNRESOLVED</code> - "BundleEvent
                    UNRESOLVED"</para>
                  </listitem>
                </itemizedlist></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Service Events Mapping</title>

      <para>A Service Event is mapped to a <code>LogEntry</code> object
      according to the following table.</para>

      <table>
        <title>Mapping of Service Events to Log Entries</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>Log Entry method</entry>

              <entry>Information about Service Event</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>getLevel()</code></entry>

              <entry><para><code>LOG_INFO</code>, except for the
              <code>ServiceEvent.MODIFIED</code> event. This event can happen
              frequently and contains relatively little information. It must
              be logged with a level of <code>LOG_DEBUG</code>.</para></entry>
            </row>

            <row>
              <entry><code>getBundle()</code></entry>

              <entry><para>Identifies the bundle that registered the service
              associated with this event. It is obtained by calling
              <code>getServiceReference().getBundle()</code> on the
              <code>ServiceEvent</code> object.</para></entry>
            </row>

            <row>
              <entry><code>getException()</code></entry>

              <entry><para><code>null</code></para></entry>
            </row>

            <row>
              <entry><code>getServiceReference()</code></entry>

              <entry><para>Identifies a reference to the service associated
              with the event. It is obtained by calling
              <code>getServiceReference()</code> on the
              <code>ServiceEvent</code> object.</para></entry>
            </row>

            <row>
              <entry><code>getMessage()</code></entry>

              <entry><para>This message depends on the actual event type. The
              messages are mapped as follows:</para><itemizedlist>
                  <listitem>
                    <para><code>REGISTERED</code> - "ServiceEvent
                    REGISTERED"</para>
                  </listitem>

                  <listitem>
                    <para><code>MODIFIED</code> - "ServiceEvent
                    MODIFIED"</para>
                  </listitem>

                  <listitem>
                    <para><code>UNREGISTERING</code> - "ServiceEvent
                    UNREGISTERING"</para>
                  </listitem>
                </itemizedlist></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Framework Events Mapping</title>

      <para>A Framework Event is mapped to a LogEntry object according to the
      following table.</para>

      <table>
        <title>Mapping of Framework Event to Log Entries</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>Log Entry method</entry>

              <entry>Information about Framework Event</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>getLevel()</code></entry>

              <entry><para><code>LOG_INFO</code>, except for the
              FrameworkEvent<code>.ERROR</code> event. This event represents
              an error and is logged with a level of
              <code>LOG_ERROR</code>.</para></entry>
            </row>

            <row>
              <entry><code>getBundle()</code></entry>

              <entry><para>Identifies the bundle associated with the event.
              This may be the system bundle. It is obtained by calling
              <code>getBundle()</code> on the <code>FrameworkEvent</code>
              object.</para></entry>
            </row>

            <row>
              <entry><code>getException()</code></entry>

              <entry><para>Identifies the exception associated with the error.
              This will be null for event types other than ERROR. It is
              obtained by calling <code>getThrowable()</code> on the
              <code>FrameworkEvent</code> object.</para></entry>
            </row>

            <row>
              <entry><code>getServiceReference()</code></entry>

              <entry><para><code>null</code></para></entry>
            </row>

            <row>
              <entry><code>getMessage()</code></entry>

              <entry><para>This message depends on the actual event type. The
              messages are mapped as follows:</para><itemizedlist>
                  <listitem>
                    <para><code>STARTED</code> - "FrameworkEvent
                    STARTED"</para>
                  </listitem>

                  <listitem>
                    <para><code>ERROR</code> - "FrameworkEvent ERROR"</para>
                  </listitem>

                  <listitem>
                    <para><code>PACKAGES_REFRESHED</code> - "FrameworkEvent
                    PACKAGES REFRESHED"</para>
                  </listitem>

                  <listitem>
                    <para><code>STARTLEVEL_CHANGED</code> - "FrameworkEvent
                    STARTLEVEL CHANGED"</para>
                  </listitem>

                  <listitem>
                    <para><code>WARNING</code> - "FrameworkEvent
                    WARNING"</para>
                  </listitem>

                  <listitem>
                    <para><code>INFO</code> - "FrameworkEvent INFO"</para>
                  </listitem>
                </itemizedlist></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="i1479168">
      <title>Log Events</title>

      <para>Log events must be delivered by the Log Service implementation to
      the Event Admin service (if present) asynchronously under the
      topic:</para>

      <programlisting>org/osgi/service/log/LogEntry/&lt;event type&gt;</programlisting>

      <para>The logging level is used as event type:</para>

      <programlisting>LOG_ERROR
LOG_WARNING
LOG_INFO
LOG_DEBUG
LOG_OTHER  (when event is not recognized)</programlisting>

      <para>The properties of a log event are:</para>

      <itemizedlist>
        <listitem>
          <para><code>bundle.id</code> - (Long) The source bundle's id.</para>
        </listitem>

        <listitem>
          <para><code>bundle.symbolicName</code> - (<code>String</code>) The
          source bundle's symbolic name. Only set if not
          <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><code>bundle</code> - (<code>Bundle</code>) The source
          bundle.</para>
        </listitem>

        <listitem>
          <para><code>log.level</code> - (<code>Integer</code>) The log
          level.</para>
        </listitem>

        <listitem>
          <para><code>message</code> - (<code>String</code>) The log
          message.</para>
        </listitem>

        <listitem>
          <para><code>timestamp</code> - (<code>Long</code>) The log entry's
          timestamp.</para>
        </listitem>

        <listitem>
          <para>log.entry - (<code>LogEntry</code>) The LogEntry
          object.</para>
        </listitem>
      </itemizedlist>

      <para>If the log entry has an associated Exception:</para>

      <itemizedlist>
        <listitem>
          <para><code>exception.class</code> - (<code>String</code>) The
          fully-qualified class name of the attached exception. Only set if
          the <code>getException</code>method returns a non-<code>null</code>
          value.</para>
        </listitem>

        <listitem>
          <para><code>exception.message</code> - (<code>String</code>) The
          message of the attached Exception. Only set if the Exception message
          is not <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><code>exception</code> - (<code>Throwable</code>) The
          Exception returned by the <code>getException</code> method.</para>
        </listitem>
      </itemizedlist>

      <para>If the <code>getServiceReference</code> method returns a non-
      <code>null</code> value:</para>

      <itemizedlist>
        <listitem>
          <para><code>service</code> - (<code>ServiceReference</code>) The
          result of the <code>getServiceReference</code> method.</para>
        </listitem>

        <listitem>
          <para><code>service.id</code> - (<code>Long</code>) The id of the
          service.</para>
        </listitem>

        <listitem>
          <para><code>service.pid</code> - (<code>String</code>) The service's
          persistent identity. Only set if the <code>service.pid</code>
          service property is not <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><code>service.objectClass</code> - (<code>String[]</code>) The
          object class of the service object.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>The Log Service should only be implemented by trusted bundles. This
    bundle requires <code>ServicePermission[LogService|LogReaderService,
    REGISTER]</code>. Virtually all bundles should get
    <code>ServicePermission[LogService, GET]</code>. The
    <code>ServicePermission[LogReaderService, GET]</code> should only be
    assigned to trusted bundles.</para>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.log" xml:id="org.osgi.service.log" xml:base="../../generated/javadoc/docbook/org.osgi.service.log.xml">
   <title>org.osgi.service.log</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.log-version">Version 1.3</releaseinfo>
      <edition xml:id="org.osgi.service.log-version.number">1.3</edition>
   </info>
   <para>
Log Service Package Version 1.3.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.log; version="[1.3,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.log; version="[1.3,1.4)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.LogEntry">
                  <code>LogEntry</code>
               </link> - 
Provides methods to access the information contained in an individual Log
 Service log entry.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.LogListener">
                  <code>LogListener</code>
               </link> - 
Subscribes to <code>LogEntry</code> objects from the <code>LogReaderService</code>.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.LogReaderService">
                  <code>LogReaderService</code>
               </link> - 
Provides methods to retrieve <code>LogEntry</code> objects from the log.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.LogService">
                  <code>LogService</code>
               </link> - 
Provides methods for bundles to write messages to the log.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="LogEntry" xml:id="org.osgi.service.log.LogEntry">
      <title>public interface LogEntry</title>
      <para>
Provides methods to access the information contained in an individual Log
 Service log entry.
 
 </para>
      <para>
 A <code>LogEntry</code> object may be acquired from the
 <code>LogReaderService.getLog</code> method or by registering a
 <code>LogListener</code> object.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.log.LogReaderService.getLog--">LogReaderService.getLog</link>, <link linkend="org.osgi.service.log.LogListener">LogListener</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>No Implement</title>
         <para>Consumers of this API must not implement this interface</para>
      </formalpara>
      <section role="method" xreflabel="getBundle()" xml:id="org.osgi.service.log.LogEntry.getBundle--">
         <title>public Bundle getBundle()</title>
         <para role="description">
Returns the bundle that created this <code>LogEntry</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The bundle that created this <code>LogEntry</code> object;
         <code>null</code> if no bundle is associated with this
         <code>LogEntry</code> object.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getException()" xml:id="org.osgi.service.log.LogEntry.getException--">
         <title>public Throwable getException()</title>
         <para role="description">
Returns the exception object associated with this <code>LogEntry</code>
 object.
 
 </para>
         <para>
 In some implementations, the returned exception may not be the original
 exception. To avoid references to a bundle defined exception class, thus
 preventing an uninstalled bundle from being garbage collected, the Log
 Service may return an exception object of an implementation defined
 Throwable subclass. The returned object will attempt to provide as much
 information as possible from the original exception object such as the
 message and stack trace.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>Throwable</code> object of the exception associated with this
         <code>LogEntry</code>;<code>null</code> if no exception is associated with
         this <code>LogEntry</code> object.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getLevel()" xml:id="org.osgi.service.log.LogEntry.getLevel--">
         <title>public int getLevel()</title>
         <para role="description">
Returns the severity level of this <code>LogEntry</code> object.
 
 </para>
         <para>
 This is one of the severity levels defined by the <code>LogService</code>
 interface.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Severity level of this <code>LogEntry</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.log.LogService.LOG_ERROR">LogService.LOG_ERROR</link>, <link linkend="org.osgi.service.log.LogService.LOG_WARNING">LogService.LOG_WARNING</link>, <link linkend="org.osgi.service.log.LogService.LOG_INFO">LogService.LOG_INFO</link>, <link linkend="org.osgi.service.log.LogService.LOG_DEBUG">LogService.LOG_DEBUG</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMessage()" xml:id="org.osgi.service.log.LogEntry.getMessage--">
         <title>public String getMessage()</title>
         <para role="description">
Returns the human readable message associated with this <code>LogEntry</code>
 object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>String</code> containing the message associated with this
         <code>LogEntry</code> object.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getServiceReference()" xml:id="org.osgi.service.log.LogEntry.getServiceReference--">
         <title>public ServiceReference getServiceReference()</title>
         <para role="description">
Returns the <code>ServiceReference</code> object for the service associated
 with this <code>LogEntry</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>ServiceReference</code> object for the service associated with
         this <code>LogEntry</code> object; <code>null</code> if no
         <code>ServiceReference</code> object was provided.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getTime()" xml:id="org.osgi.service.log.LogEntry.getTime--">
         <title>public long getTime()</title>
         <para role="description">
Returns the value of <code>currentTimeMillis()</code> at the time this
 <code>LogEntry</code> object was created.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The system time in milliseconds when this <code>LogEntry</code> object
         was created.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>System.currentTimeMillis()</code>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="LogListener" xml:id="org.osgi.service.log.LogListener">
      <title>public interface LogListener<?line-break?> extends EventListener</title>
      <para>
Subscribes to <code>LogEntry</code> objects from the <code>LogReaderService</code>.
 
 </para>
      <para>
 A <code>LogListener</code> object may be registered with the Log Reader Service
 using the <code>LogReaderService.addLogListener</code> method. After the listener
 is registered, the <code>logged</code> method will be called for each
 <code>LogEntry</code> object created. The <code>LogListener</code> object may be
 unregistered by calling the <code>LogReaderService.removeLogListener</code>
 method.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.log.LogReaderService">LogReaderService</link>, <link linkend="org.osgi.service.log.LogEntry">LogEntry</link>, <link linkend="org.osgi.service.log.LogReaderService.addLogListener-LogListener-">LogReaderService.addLogListener(LogListener)</link>, <link linkend="org.osgi.service.log.LogReaderService.removeLogListener-LogListener-">LogReaderService.removeLogListener(LogListener)</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="logged(LogEntry)" xml:id="org.osgi.service.log.LogListener.logged-LogEntry-">
         <title>public void logged(LogEntry entry)</title>
         <formalpara role="parameter">
            <title>entry</title>
            <para>A <code>LogEntry</code> object containing log information.</para>
         </formalpara>
         <para role="description">
Listener method called for each LogEntry object created.
 
 </para>
         <para>
 As with all event listeners, this method should return to its caller as
 soon as possible.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.log.LogEntry">LogEntry</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="LogReaderService" xml:id="org.osgi.service.log.LogReaderService">
      <title>public interface LogReaderService</title>
      <para>
Provides methods to retrieve <code>LogEntry</code> objects from the log.
 </para>
      <para>
 There are two ways to retrieve <code>LogEntry</code> objects:
 </para>
      <itemizedlist>
         <listitem>
            <para>The primary way to retrieve <code>LogEntry</code> objects is to register a
 <code>LogListener</code> object whose <code>LogListener.logged</code> method will be
 called for each entry added to the log.</para>
         </listitem>
         <listitem>
            <para>To retrieve past <code>LogEntry</code> objects, the <code>getLog</code> method can
 be called which will return an <code>Enumeration</code> of all <code>LogEntry</code>
 objects in the log.</para>
         </listitem>
      </itemizedlist>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.log.LogEntry">LogEntry</link>, <link linkend="org.osgi.service.log.LogListener">LogListener</link>, <link linkend="org.osgi.service.log.LogListener.logged-LogEntry-">LogListener.logged(LogEntry)</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="addLogListener(LogListener)" xml:id="org.osgi.service.log.LogReaderService.addLogListener-LogListener-">
         <title>public void addLogListener(LogListener listener)</title>
         <formalpara role="parameter">
            <title>listener</title>
            <para>A <code>LogListener</code> object to register; the
        <code>LogListener</code> object is used to receive <code>LogEntry</code>
        objects.</para>
         </formalpara>
         <para role="description">
Subscribes to <code>LogEntry</code> objects.
 
 </para>
         <para>
 This method registers a <code>LogListener</code> object with the Log Reader
 Service. The <code>LogListener.logged(LogEntry)</code> method will be called
 for each <code>LogEntry</code> object placed into the log.
 
 </para>
         <para>
 When a bundle which registers a <code>LogListener</code> object is stopped or
 otherwise releases the Log Reader Service, the Log Reader Service must
 remove all of the bundle's listeners.
 
 </para>
         <para>
 If this Log Reader Service's list of listeners already contains a
 listener <code>l</code> such that <code>(l==listener)</code>, this method does
 nothing.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.log.LogListener">LogListener</link>, <link linkend="org.osgi.service.log.LogEntry">LogEntry</link>, <link linkend="org.osgi.service.log.LogListener.logged-LogEntry-">LogListener.logged(LogEntry)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getLog()" xml:id="org.osgi.service.log.LogReaderService.getLog--">
         <title>public Enumeration getLog()</title>
         <para role="description">
Returns an <code>Enumeration</code> of all <code>LogEntry</code> objects in the
 log.
 
 </para>
         <para>
 Each element of the enumeration is a <code>LogEntry</code> object, ordered
 with the most recent entry first. Whether the enumeration is of all
 <code>LogEntry</code> objects since the Log Service was started or some recent
 past is implementation-specific. Also implementation-specific is whether
 informational and debug <code>LogEntry</code> objects are included in the
 enumeration.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An <code>Enumeration</code> of all <code>LogEntry</code> objects in the
         log.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="removeLogListener(LogListener)" xml:id="org.osgi.service.log.LogReaderService.removeLogListener-LogListener-">
         <title>public void removeLogListener(LogListener listener)</title>
         <formalpara role="parameter">
            <title>listener</title>
            <para>A <code>LogListener</code> object to unregister.</para>
         </formalpara>
         <para role="description">
Unsubscribes to <code>LogEntry</code> objects.
 
 </para>
         <para>
 This method unregisters a <code>LogListener</code> object from the Log Reader
 Service.
 
 </para>
         <para>
 If <code>listener</code> is not contained in this Log Reader Service's list of
 listeners, this method does nothing.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.log.LogListener">LogListener</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="LogService" xml:id="org.osgi.service.log.LogService">
      <title>public interface LogService</title>
      <para>
Provides methods for bundles to write messages to the log.
 
 </para>
      <para>
         <code>LogService</code> methods are provided to log messages; optionally with a
 <code>ServiceReference</code> object or an exception.
 
 </para>
      <para>
 Bundles must log messages in the OSGi environment with a severity level
 according to the following hierarchy:
 </para>
      <orderedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.LogService.LOG_ERROR">LOG_ERROR</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.LogService.LOG_WARNING">LOG_WARNING</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.LogService.LOG_INFO">LOG_INFO</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.LogService.LOG_DEBUG">LOG_DEBUG</link>
            </para>
         </listitem>
      </orderedlist>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>No Implement</title>
         <para>Consumers of this API must not implement this interface</para>
      </formalpara>
      <section role="field" xreflabel="LOG_DEBUG" xml:id="org.osgi.service.log.LogService.LOG_DEBUG">
         <title>public static final int LOG_DEBUG = 4</title>
         <para>
A debugging message (Value 4).
 
 </para>
         <para>
 This log entry is used for problem determination and may be irrelevant to
 anyone but the bundle developer.</para>
      </section>
      <section role="field" xreflabel="LOG_ERROR" xml:id="org.osgi.service.log.LogService.LOG_ERROR">
         <title>public static final int LOG_ERROR = 1</title>
         <para>
An error message (Value 1).
 
 </para>
         <para>
 This log entry indicates the bundle or service may not be functional.</para>
      </section>
      <section role="field" xreflabel="LOG_INFO" xml:id="org.osgi.service.log.LogService.LOG_INFO">
         <title>public static final int LOG_INFO = 3</title>
         <para>
An informational message (Value 3).
 
 </para>
         <para>
 This log entry may be the result of any change in the bundle or service
 and does not indicate a problem.</para>
      </section>
      <section role="field" xreflabel="LOG_WARNING" xml:id="org.osgi.service.log.LogService.LOG_WARNING">
         <title>public static final int LOG_WARNING = 2</title>
         <para>
A warning message (Value 2).
 
 </para>
         <para>
 This log entry indicates a bundle or service is still functioning but may
 experience problems in the future because of the warning condition.</para>
      </section>
      <section role="method" xreflabel="log(int,String)" xml:id="org.osgi.service.log.LogService.log-int-String-">
         <title>public void log(int level,String message)</title>
         <formalpara role="parameter">
            <title>level</title>
            <para>The severity of the message. This should be one of the
        defined log levels but may be any integer that is interpreted in a
        user defined way.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>message</title>
            <para>Human readable string describing the condition or
        <code>null</code>.</para>
         </formalpara>
         <para role="description">
Logs a message.
 
 </para>
         <para>
 The <code>ServiceReference</code> field and the <code>Throwable</code> field of the
 <code>LogEntry</code> object will be set to <code>null</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.log.LogService.LOG_ERROR">LOG_ERROR</link>, <link linkend="org.osgi.service.log.LogService.LOG_WARNING">LOG_WARNING</link>, <link linkend="org.osgi.service.log.LogService.LOG_INFO">LOG_INFO</link>, <link linkend="org.osgi.service.log.LogService.LOG_DEBUG">LOG_DEBUG</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="log(int,String,Throwable)" xml:id="org.osgi.service.log.LogService.log-int-String-Throwable-">
         <title>public void log(int level,String message,Throwable exception)</title>
         <formalpara role="parameter">
            <title>level</title>
            <para>The severity of the message. This should be one of the
        defined log levels but may be any integer that is interpreted in a
        user defined way.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>message</title>
            <para>The human readable string describing the condition or
        <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>exception</title>
            <para>The exception that reflects the condition or
        <code>null</code>.</para>
         </formalpara>
         <para role="description">
Logs a message with an exception.
 
 </para>
         <para>
 The <code>ServiceReference</code> field of the <code>LogEntry</code> object will be
 set to <code>null</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.log.LogService.LOG_ERROR">LOG_ERROR</link>, <link linkend="org.osgi.service.log.LogService.LOG_WARNING">LOG_WARNING</link>, <link linkend="org.osgi.service.log.LogService.LOG_INFO">LOG_INFO</link>, <link linkend="org.osgi.service.log.LogService.LOG_DEBUG">LOG_DEBUG</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="log(ServiceReference,int,String)" xml:id="org.osgi.service.log.LogService.log-ServiceReference-int-String-">
         <title>public void log(ServiceReference sr,int level,String message)</title>
         <formalpara role="parameter">
            <title>sr</title>
            <para>The <code>ServiceReference</code> object of the service that this
        message is associated with or <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>level</title>
            <para>The severity of the message. This should be one of the
        defined log levels but may be any integer that is interpreted in a
        user defined way.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>message</title>
            <para>Human readable string describing the condition or
        <code>null</code>.</para>
         </formalpara>
         <para role="description">
Logs a message associated with a specific <code>ServiceReference</code>
 object.
 
 </para>
         <para>
 The <code>Throwable</code> field of the <code>LogEntry</code> will be set to
 <code>null</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.log.LogService.LOG_ERROR">LOG_ERROR</link>, <link linkend="org.osgi.service.log.LogService.LOG_WARNING">LOG_WARNING</link>, <link linkend="org.osgi.service.log.LogService.LOG_INFO">LOG_INFO</link>, <link linkend="org.osgi.service.log.LogService.LOG_DEBUG">LOG_DEBUG</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="log(ServiceReference,int,String,Throwable)" xml:id="org.osgi.service.log.LogService.log-ServiceReference-int-String-Throwable-">
         <title>public void log(ServiceReference sr,int level,String message,Throwable exception)</title>
         <formalpara role="parameter">
            <title>sr</title>
            <para>The <code>ServiceReference</code> object of the service that this
        message is associated with.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>level</title>
            <para>The severity of the message. This should be one of the
        defined log levels but may be any integer that is interpreted in a
        user defined way.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>message</title>
            <para>Human readable string describing the condition or
        <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>exception</title>
            <para>The exception that reflects the condition or
        <code>null</code>.</para>
         </formalpara>
         <para role="description">
Logs a message with an exception associated and a
 <code>ServiceReference</code> object.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.log.LogService.LOG_ERROR">LOG_ERROR</link>, <link linkend="org.osgi.service.log.LogService.LOG_WARNING">LOG_WARNING</link>, <link linkend="org.osgi.service.log.LogService.LOG_INFO">LOG_INFO</link>, <link linkend="org.osgi.service.log.LogService.LOG_DEBUG">LOG_DEBUG</link>
            </para>
         </formalpara>
      </section>
   </section>
</section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="102" revision="$Id: c9efc6920adff43078e90227bbd10891a14c1c1b $" version="5" xml:id="service.http" xml:base="../102/service.http.xml">
  <title>Http Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.http-version" linkend="org.osgi.service.http"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>An OSGi framework normally provides users with access to services on
    the Internet and other networks. This access allows users to remotely
    retrieve information from, and send control to, services in an OSGi
    framework using a standard web browser.</para>

    <para>Bundle developers typically need to develop communication and user
    interface solutions for standard technologies such as HTTP, HTML, XML, and
    servlets.</para>

    <para>The Http Service supports two standard techniques for this
    purpose:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Registering servlets</emphasis> - A servlet is a Java
        object which implements the Java Servlet API. Registering a servlet in
        the Framework gives it control over some part of the Http Service URI
        name-space.</para>
      </listitem>

      <listitem>
        <para><emphasis>Registering resources</emphasis> - Registering a
        resource allows HTML files, image files, and other static resources to
        be made visible in the Http Service URI name-space by the requesting
        bundle.</para>
      </listitem>
    </itemizedlist>

    <para>Implementations of the Http Service can be based on:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="i1231452"/></para>
      </listitem>

      <listitem>
        <para><xref linkend="i1215926"/></para>
      </listitem>
    </itemizedlist>

    <para>Alternatively, implementations of this service can support other
    protocols if these protocols can conform to the semantics of the
    <code>javax.servlet</code> API. This additional support is necessary
    because the Http Service is closely related to <xref linkend="i1217577"/>.
    Http Service implementations must support at least version 2.1 of the Java
    Servlet API.</para>

    <section>
      <title>Entities</title>

      <para>This specification defines the following interfaces which a bundle
      developer can implement collectively as an Http Service or use
      individually:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis><xref linkend="org.osgi.service.http.HttpContext" xrefstyle="hyperlink"/></emphasis> - Allows bundles to provide
          information for a servlet or resource registration.</para>
        </listitem>

        <listitem>
          <para><emphasis><xref linkend="org.osgi.service.http.HttpService" xrefstyle="hyperlink"/></emphasis> - Allows other bundles in the
          Framework to dynamically register and unregister resources and
          servlets into the Http Service URI name-space.</para>
        </listitem>

        <listitem>
          <para><emphasis><xref linkend="org.osgi.service.http.NamespaceException" xrefstyle="hyperlink"/></emphasis> - Is thrown to indicate an error
          with the caller's request to register a servlet or resource into the
          Http Service URI name-space.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>Http Service Overview Diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.313in" contentwidth="6.496in" fileref="httpservice-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section xml:id="i1223311">
    <title>Registering Servlets</title>

    <para><code>javax.servlet.Servlet</code> objects can be registered with
    the Http Service by using the <code>HttpService</code> interface. For this
    purpose, the <code>HttpService</code> interface defines the method <xref linkend="org.osgi.service.http.HttpService.registerServlet-String-javax.servlet.Servlet-Dictionary-HttpContext-" xrefstyle="hyperlink"/>.</para>

    <para>For example, if the Http Service implementation is listening to port
    80 on the machine <code>www.acme.com</code> and the <code>Servlet</code>
    object is registered with the name <code>"/servlet"</code>, then the
    <code>Servlet</code> object's <code>service</code> method is called when
    the following URL is used from a web browser:</para>

    <programlisting>http://www.acme.com/servlet?name=bugs</programlisting>

    <para>All <code>Servlet</code> objects and resource registrations share
    the same name-space. If an attempt is made to register a resource or
    <code>Servlet</code> object under the same name as a currently registered
    resource or <code>Servlet</code> object, a <code>NamespaceException</code>
    is thrown. See <xref linkend="i1208280"/> for more information about the
    handling of the Http Service name-space.</para>

    <para>Each <code>Servlet</code> registration must be accompanied with an
    <code>HttpContext</code> object. This object provides the handling of
    resources, media typing, and a method to handle authentication of remote
    requests. See <xref linkend="service.http.authentication"/>.</para>

    <para>For convenience, a default <code>HttpContext</code> object is
    provided by the Http Service and can be obtained with <xref linkend="org.osgi.service.http.HttpService.createDefaultHttpContext--" xrefstyle="hyperlink"/>. Passing a <code>null</code> parameter to the
    registration method achieves the same effect.</para>

    <para><code>Servlet</code> objects require a <code>ServletContext</code>
    object. This object provides a number of functions to access the Http
    Service Java Servlet environment. It is created by the implementation of
    the Http Service for each unique <code>HttpContext</code> object with
    which a <code>Servlet</code> object is registered. Thus,
    <code>Servlet</code> objects registered with the same
    <code>HttpContext</code> object must also share the same
    <code>ServletContext</code> object.</para>

    <para><code>Servlet</code> objects are initialized by the Http Service
    when they are registered and bound to that specific Http Service. The
    initialization is done by calling the <code>Servlet</code> object's
    <code>Servlet.init(ServletConfig)</code> method. The
    <code>ServletConfig</code> parameter provides access to the initialization
    parameters specified when the <code>Servlet</code> object was
    registered.</para>

    <para>Therefore, the same <code>Servlet</code> instance must not be reused
    for registration with another Http Service, nor can it be registered under
    multiple names. Unique instances are required for each
    registration.</para>

    <para>The following example code demonstrates the use of the
    <code>registerServlet</code> method:</para>

    <programlisting xml:id="i1223332">Hashtable initparams = new Hashtable();
initparams.put( "name", "value" );

Servlet myServlet = new HttpServlet() {
    String name = "&lt;not set&gt;";

    public void init( ServletConfig config ) {
        this.name = (String)
            config.getInitParameter( "name" );
    }

    public void doGet( 
        HttpServletRequest req,
        HttpServletResponse rsp 
    ) throws IOException {
        rsp.setContentType( "text/plain" );
        req.getWriter().println( this.name );
    }
};

getHttpService().registerServlet(
    "/servletAlias", 
    myServlet, 
    initparams, 
    null // use default context
);
// myServlet has been registered 
// and its init method has been called. Remote
// requests are now handled and forwarded to 
// the servlet.
...
getHttpService().unregister("/servletAlias");
// myServlet has been unregistered and its 
// destroy method has been called
</programlisting>

    <para>This example registers the servlet, <code>myServlet</code>, at
    alias: <code>/servletAlias</code>. Future requests for
    <code>http://www.acme.com/servletAlias</code> maps to the servlet,
    <code>myServlet</code>, whose <code>service</code> method is called to
    process the request. (The <code>service</code> method is called in the
    <code>HttpServlet</code> base class and dispatched to a
    <code>doGet</code>, <code>doPut</code>, <code>doPost</code>,
    <code>doOptions</code>, <code>doTrace</code>, or <code>doDelete</code>
    call depending on the HTTP request method used.)</para>
  </section>

  <section>
    <title>Registering Resources</title>

    <para>A resource is a file containing images, static HTML pages, sounds,
    movies, applets, etc. Resources do not require any handling from the
    bundle. They are transferred directly from their source - usually the JAR
    file that contains the code for the bundle - to the requester using
    HTTP.</para>

    <para>Resources could be handled by Servlet objects as explained in <xref linkend="i1223311"/>. Transferring a resource over HTTP, however, would
    require very similar <code>Servlet</code> objects for each bundle. To
    prevent this redundancy, resources can be registered directly with the
    Http Service via the <xref linkend="org.osgi.service.http.HttpService" xrefstyle="hyperlink"/> interface. This <code>HttpService</code> interface
    defines the
    <code>registerResources(String,String,HttpContext)</code>method for
    registering a resource into the Http Service URI name-space.</para>

    <para>The first parameter is the external alias under which the resource
    is registered with the Http Service. The second parameter is an internal
    prefix to map this resource to the bundle's name-space. When a request is
    received, the <code>HttpService</code> object must remove the external
    alias from the URI, replace it with the internal prefix, and call the
    <code>getResource(String)</code> method with this new name on the
    associated <code>HttpContext</code> object. The <code>HttpContext</code>
    object is further used to get the MIME type of the resource and to
    authenticate the request.</para>

    <para>Resources are returned as a <code>java.net.URL</code> object. The
    Http Service must read from this <code>URL</code> object and transfer the
    content to the initiator of the HTTP request.</para>

    <para>This return type was chosen because it matches the return type of
    the <code>java.lang.Class.getResource(String resource)</code> method. This
    method can retrieve resources directly from the same place as the one from
    which the class was loaded - often a package directory in the JAR file of
    the bundle. This method makes it very convenient to retrieve resources
    from the bundle that are contained in the package.</para>

    <para>The following example code demonstrates the use of the
    <code>register Resources</code> method:</para>

    <programlisting>package com.acme;
...
HttpContext context = new HttpContext() {
    public boolean handleSecurity(
        HttpServletRequest request,
        HttpServletResponse response
    ) throws IOException {
        return true;
    }

    public URL getResource(String name) {
        return getClass().getResource(name);
    }

    public String getMimeType(String name) {
        return null;
    }
};

getHttpService().registerResources (
    "/files", 
    "www", 
    context
);
...
getHttpService().unregister("/files");
</programlisting>

    <para>This example registers the alias /files on the Http Service.
    Requests for resources below this name-space are transferred to the
    <code>HttpContext</code> object with an internal name of
    <code>www/&lt;name&gt;</code>. This example uses the <code>Class.get
    Resource(String)</code> method. Because the internal name does not start
    with a "/", it must map to a resource in the "<code>com/acme/www</code>"
    directory of the JAR file. If the internal name did start with a "/", the
    package name would not have to be prefixed and the JAR file would be
    searched from the root. Consult the
    <code>java.lang.Class.getResource(String)</code> method for more
    information.</para>

    <para>In the example, a request for
    <code>http://www.acme.com/files/myfile.html</code> must map to the name
    "<code>com/acme/www/myfile.html"</code> which is in the bundle's JAR
    file.</para>

    <para>More sophisticated implementations of the
    <code>getResource(String</code>) method could filter the input name,
    restricting the resources that may be returned or map the input name onto
    the file system (if the security implications of this action are
    acceptable).</para>

    <para>Alternatively, the resource registration could have used a default
    <code>HttpContext</code> object, as demonstrated in the following call to
    <code>registerResources</code>:</para>

    <programlisting>getHttpService().registerResources(
    "/files", 
    "/com/acme/www", 
    null
);</programlisting>

    <para>In this case, the Http Service implementation would call the <xref linkend="org.osgi.service.http.HttpService.createDefaultHttpContext--" xrefstyle="hyperlink"/> method and use its return value as the
    <code>HttpContext</code> argument for the <code>registerResources</code>
    method. The default implementation must map the resource request to the
    bundle's resource, using <code>Bundle.getResource(String)</code>. In the
    case of the previous example, however, the internal name must now specify
    the full path to the directory containing the resource files in the JAR
    file. No automatic prefixing of the package name is done.</para>

    <para>The <code>getMimeType(String)</code> implementation of the default
    <code>HttpContext</code> object should rely on the default mapping
    provided by the Http Service by returning <code>null</code>. Its
    <code>handleSecurity(HttpServletRequest,HttpServletResponse)</code> may
    implement an authentication mechanism that is
    implementation-dependent.</para>
  </section>

  <section xml:id="i1208280">
    <title>Mapping HTTP Requests to Servlet and Resource Registrations</title>

    <para>When an HTTP request comes in from a client, the Http Service checks
    to see if the requested URI matches any registered aliases. A URI matches
    only if the path part of the URI is exactly the same string. Matching is
    case sensitive.</para>

    <para>If it does match, a matching registration takes place, which is
    processed as follows:</para>

    <orderedlist>
      <listitem>
        <para>If the registration corresponds to a servlet, the authorization
        is verified by calling the <code>handleSecurity</code> method of the
        associated <code>HttpContext</code> object. See <xref linkend="service.http.authentication"/>. If the request is authorized,
        the servlet must be called by its <code>service</code> method to
        complete the HTTP request.</para>
      </listitem>

      <listitem>
        <para>If the registration corresponds to a resource, the authorization
        is verified by calling the <code>handleSecurity</code> method of the
        associated <code>HttpContext</code> object. See <xref linkend="service.http.authentication"/>. If the request is authorized,
        a target resource name is constructed from the requested URI by
        substituting the alias from the registration with the internal name
        from the registration if the alias is not "/". If the alias is "/",
        then the target resource name is constructed by prefixing the
        requested URI with the internal name. An internal name of "/" is
        considered to have the value of the empty string ("") during this
        process.</para>
      </listitem>

      <listitem>
        <para>The target resource name must be passed to the
        <code>getResource</code> method of the associated
        <code>HttpContext</code> object.</para>
      </listitem>

      <listitem>
        <para>If the returned <code>URL</code> object is not
        <code>null</code>, the Http Service must return the contents of the
        <code>URL</code> to the client completing the HTTP request. The
        translated target name, as opposed to the original requested URI, must
        also be used as the argument to
        <code>HttpContext.getMimeType</code>.</para>
      </listitem>

      <listitem>
        <para>If the returned <code>URL</code> object is <code>null</code>,
        the Http Service continues as if there was no match.</para>
      </listitem>

      <listitem>
        <para>If there is no match, the Http Service must attempt to match
        sub-strings of the requested URI to registered aliases. The
        sub-strings of the requested URI are selected by removing the last
        <code>"/"</code> and everything to the right of the last "/".</para>
      </listitem>
    </orderedlist>

    <para>The Http Service must repeat this process until either a match is
    found or the sub-string is an empty string. If the sub-string is empty and
    the alias <code>"/"</code> is registered, the request is considered to
    match the alias <code>"/"</code>. Otherwise, the Http Service must return
    <code>HttpServletResponse.SC_NOT_FOUND(404)</code> to the client.</para>

    <para>For example, an HTTP request comes in with a request URI of
    <code>"/fudd/bugs/foo.txt"</code>, and the only registered alias is
    <code>"/fudd"</code>. A search for <code>"/fudd/bugs/foo.txt"</code> will
    not match an alias. Therefore, the Http Service will search for the alias
    "<code>/fudd/bugs"</code> and the alias "<code>/fudd"</code>. The latter
    search will result in a match and the matched alias registration must be
    used.</para>

    <para>Registrations for identical aliases are not allowed. If a bundle
    registers the alias "<code>/fudd"</code>, and another bundle tries to
    register the exactly the same alias, the second caller must receive a
    <code>NamespaceException</code> and its resource or servlet must
    <emphasis>not</emphasis> be registered. It could, however, register a
    similar alias - for example, "<code>/fudd/bugs"</code>, as long as no
    other registration for this alias already exists.</para>

    <para>The following table shows some examples of the usage of the
    name-space.</para>

    <table>
      <title>Examples of Name-space Mapping</title>

      <tgroup cols="4">
        <thead>
          <row>
            <entry>Alias</entry>

            <entry>Internal Name</entry>

            <entry>URI</entry>

            <entry>getResource Parameter</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>/</code></entry>

            <entry><code>(empty string)</code></entry>

            <entry><code>/fudd/bugs</code></entry>

            <entry><code>/fudd/bugs</code></entry>
          </row>

          <row>
            <entry><code>/</code></entry>

            <entry><code>/</code></entry>

            <entry><code>/fudd/bugs</code></entry>

            <entry><code>/fudd/bugs</code></entry>
          </row>

          <row>
            <entry><code>/</code></entry>

            <entry><code>/tmp</code></entry>

            <entry><code>/fudd/bugs</code></entry>

            <entry><code>/tmp/fudd/bugs</code></entry>
          </row>

          <row>
            <entry><code>/fudd</code></entry>

            <entry><code>(empty string)</code></entry>

            <entry><code>/fudd/bugs</code></entry>

            <entry><code>/bugs</code></entry>
          </row>

          <row>
            <entry><code>/fudd</code></entry>

            <entry><code>/</code></entry>

            <entry><code>/fudd/bugs</code></entry>

            <entry><code>/bugs</code></entry>
          </row>

          <row>
            <entry><code>/fudd</code></entry>

            <entry><code>/tmp</code></entry>

            <entry><code>/fudd/bugs</code></entry>

            <entry><code>/tmp/bugs</code></entry>
          </row>

          <row>
            <entry><code>/fudd</code></entry>

            <entry><code>tmp</code></entry>

            <entry><code>/fudd/bugs/x.gif</code></entry>

            <entry><code>tmp/bugs/x.gif</code></entry>
          </row>

          <row>
            <entry><code>/fudd/bugs/x.gif</code></entry>

            <entry><code>tmp/y.gif</code></entry>

            <entry><code>/fudd/bugs/x.gif</code></entry>

            <entry><code>tmp/y.gif</code></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section>
    <title>The Default Http Context Object</title>

    <para>The <code>HttpContext</code> object in the first example
    demonstrates simple implementations of the <xref linkend="org.osgi.service.http.HttpContext" xrefstyle="hyperlink"/>
    interface methods. Alternatively, the example could have used a default
    <code>HttpContext</code> object, as demonstrated in the following call to
    <code>registerServlet</code>:</para>

    <programlisting>getHttpService().registerServlet(
    "/servletAlias", 
    myServlet,
    initparams, 
    null
); </programlisting>

    <para>In this case, the Http Service implementation must call
    <code>createDefault HttpContext</code> and use the return value as the
    <code>HttpContext</code> argument.</para>

    <para>If the default <code>HttpContext</code> object, and thus the
    <code>ServletContext</code> object, is to be shared by multiple servlet
    registrations, the previous servlet registration example code needs to be
    changed to use the same default <code>HttpContext</code> object. This
    change is demonstrated in the next example:</para>

    <programlisting>HttpContext defaultContext =
    getHttpService().createDefaultHttpContext();

getHttpService().registerServlet(   
    "/servletAlias", 
    myServlet, 
    initparams, 
    defaultContext
);

// defaultContext can be reused 
// for further servlet registrations</programlisting>
  </section>

  <section xml:id="i1243471">
    <title>Multipurpose Internet Mail Extension (MIME) Types</title>

    <para>MIME defines an extensive set of headers and procedures to encode
    binary messages in US-ASCII mails. For an overview of all the related
    RFCs, consult <xref linkend="i1219807"/>.</para>

    <para>An important aspect of this extension is the type (file format)
    mechanism of the binary messages. The type is defined by a string
    containing a general category (text, application, image, audio and video,
    multipart, and message) followed by a "/" and a specific media type, as in
    the example, <code>"text/html"</code> for HTML formatted text files. A
    MIME type string can be followed by additional specifiers by separating
    <code>key=value</code> pairs with a semicolon (<code>';' \u003B</code>).
    These specifiers can be used, for example, to define character sets as
    follows:</para>

    <programlisting>text/plain ; charset=iso-8859-1</programlisting>

    <para>The Internet Assigned Number Authority (IANA) maintains a set of
    defined MIME media types. This list can be found at <xref linkend="i1220020"/>. MIME media types are extendable, and when any part
    of the type starts with the prefix <code>"x-"</code>, it is assumed to be
    vendor-specific and can be used for testing. New types can be registered
    as described in <xref linkend="i1220024"/>.</para>

    <para>HTTP bases its media typing on the MIME RFCs. The "Content-Type"
    header should contain a MIME media type so that the browser can recognize
    the type and format the content correctly.</para>

    <para>The source of the data must define the MIME media type for each
    transfer. Most operating systems do not support types for files, but use
    conventions based on file names, such as the last part of the file name
    after the last ".". This extension is then mapped to a media type.</para>

    <para>Implementations of the Http Service should have a reasonable default
    of mapping common extensions to media types based on file
    extensions.</para>

    <table>
      <title>Sample Extension to MIME Media Mapping</title>

      <tgroup cols="3">
        <colspec colnum="1"/>

        <colspec colnum="2" colwidth="2*"/>

        <colspec colnum="3" colwidth="4*"/>

        <thead>
          <row>
            <entry>Extension</entry>

            <entry>MIME media type</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><para><code>.jpg .jpeg</code></para></entry>

            <entry><para><code>image/jpeg</code></para></entry>

            <entry><para>JPEG Files</para></entry>
          </row>

          <row>
            <entry><para><code>.gif</code></para></entry>

            <entry><para><code>image/gif</code></para></entry>

            <entry><para>GIF Files</para></entry>
          </row>

          <row>
            <entry><para><code>.css</code></para></entry>

            <entry><para><code>text/css</code></para></entry>

            <entry><para>Cascading Style Sheet Files</para></entry>
          </row>

          <row>
            <entry><para><code>.txt</code></para></entry>

            <entry><para><code>text/plain</code></para></entry>

            <entry><para>Text Files</para></entry>
          </row>

          <row>
            <entry><para><code>.wml</code></para></entry>

            <entry><para><code>text/vnd.wap.wml</code></para></entry>

            <entry><para>Wireless Access Protocol (WAP) Mark
            Language</para></entry>
          </row>

          <row>
            <entry><para><code>.htm .html</code></para></entry>

            <entry><para><code>text/html</code></para></entry>

            <entry><para>Hyper Text Markup Language</para></entry>
          </row>

          <row>
            <entry><para><code>.wbmp</code></para></entry>

            <entry><para><code>image/vnd.wap.wbmp</code></para></entry>

            <entry><para>Bitmaps for WAP</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Only the bundle developer, however, knows exactly which files have
    what media type. The <code>HttpContext</code> interface can therefore be
    used to map this knowledge to the media type. The <code>HttpContext</code>
    class has the following method for this:
    <code>getMimeType(String)</code>.</para>

    <para>The implementation of this method should inspect the file name and
    use its internal knowledge to map this name to a MIME media type.</para>

    <para>Simple implementations can extract the extension and look up this
    extension in a table.</para>

    <para>Returning <code>null</code> from this method allows the Http Service
    implementation to use its default mapping mechanism.</para>
  </section>

  <section xml:id="service.http.authentication">
    <title>Authentication</title>

    <para>The Http Service has separated the authentication and authorization
    of a request from the execution of the request. This separation allows
    bundles to use available <code>Servlet</code> sub-classes while still
    providing bundle specific authentication and authorization of the
    requests.</para>

    <para>Prior to servicing each incoming request, the Http Service calls the
    <xref linkend="org.osgi.service.http.HttpContext.handleSecurity-javax.servlet.http.HttpServletRequest-javax.servlet.http.HttpServletResponse-" xrefstyle="hyperlink"/> method on the <code>HttpContext</code> object that
    is associated with the request URI. This method controls whether the
    request is processed in the normal manner or an authentication error is
    returned.</para>

    <para>If an implementation wants to authenticate the request, it can use
    the authentication mechanisms of HTTP. See <xref linkend="i1220308"/>.
    These mechanisms normally interpret the headers and decide if the user
    identity is available, and if it is, whether that user has authenticated
    itself correctly.</para>

    <para>There are many different ways of authenticating users, and the
    <code>handleSecurity</code> method on the <code>HttpContext</code> object
    can use whatever method it requires. If the method returns
    <code>true</code>, the request must continue to be processed using the
    potentially modified <code>HttpServletRequest</code> and
    <code>HttpServletResponse</code> objects. If the method returns
    <code>false</code>, the request must <emphasis>not</emphasis> be
    processed.</para>

    <para>A common standard for HTTP is the basic authentication scheme that
    is not secure when used with HTTP. Basic authentication passes the
    password in base 64 encoded strings that are trivial to decode into clear
    text. Secure transport protocols like HTTPS use SSL to hide this
    information. With these protocols basic authentication is secure.</para>

    <para>Using basic authentication requires the following steps:</para>

    <orderedlist>
      <listitem>
        <para>If no <code>Authorization</code> header is set in the request,
        the method should set the <code>WWW-Authenticate</code> header in the
        response. This header indicates the desired authentication mechanism
        and the realm. For example, <code>WWW-Authenticate: Basic
        realm="ACME"</code>.</para>

        <para>The header should be set with the response object that is given
        as a parameter to the <code>handleSecurity</code> method. The
        <code>handleSecurity</code> method should set the status to
        <code>HttpServletResponse.SC_UNAUTHORIZED (401)</code> and return
        <code>false</code>.</para>
      </listitem>

      <listitem>
        <para>Secure connections can be verified with the
        <code>ServletRequest.getScheme()</code> method. This method returns,
        for example, "<code>https</code>" for an SSL connection; the
        <code>handleSecurity</code> method can use this and other information
        to decide if the connection's security level is acceptable. If not,
        the <code>handleSecurity</code> method should set the status to
        <code>HttpServletResponse.SC_FORBIDDEN</code> (403) and return
        <code>false</code>.</para>
      </listitem>

      <listitem>
        <para>Next, the request must be authenticated. When basic
        authentication is used, the <code>Authorization</code> header is
        available in the request and should be parsed to find the user and
        password. See <xref linkend="i1220308"/> for more information.</para>

        <para>If the user cannot be authenticated, the status of the response
        object should be set to <code>HttpServletResponse.SC_UNAUTHORIZED
        (401)</code> and return <code>false</code>.</para>
      </listitem>

      <listitem>
        <para>The authentication mechanism that is actually used and the
        identity of the authenticated user can be of interest to the
        <code>Servlet</code> object. Therefore, the implementation of the
        <code>handleSecurity</code> method should set this information in the
        request object using the <code>ServletRequest.setAttribute</code>
        method. This specification has defined a number of OSGi-specific
        attribute names for this purpose:</para>

        <itemizedlist>
          <listitem>
            <para><xref linkend="org.osgi.service.http.HttpContext.AUTHENTICATION_TYPE" xrefstyle="hyperlink"/> - Specifies the scheme used in
            authentication. A Servlet may retrieve the value of this attribute
            by calling the <code>HttpServletRequest.getAuthType</code> method.
            This attribute name is
            <code>org.osgi.service.http.authentication.type</code>.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.http.HttpContext.REMOTE_USER" xrefstyle="hyperlink"/> - Specifies the name of the authenticated
            user. A Servlet may retrieve the value of this attribute by
            calling the <code>HttpServletRequest.getRemoteUser</code> method.
            This attribute name is
            <code>org.osgi.service.http.authentication.remote.user</code>.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.http.HttpContext.AUTHORIZATION" xrefstyle="hyperlink"/> - If a User Admin service is available in
            the environment, then the <code>handleSecurity</code> method
            should set this attribute with the <code>Authorization</code>
            object obtained from the User Admin service. Such an object
            encapsulates the authentication of its remote user. A Servlet may
            retrieve the value of this attribute by calling
            <code>ServletRequest.getAttribute(HttpContext.AUTHORIZATION)</code>.
            This header name is
            <code>org.osgi.service.useradmin.authorization</code>.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Once the request is authenticated and any attributes are set,
        the <code>handleSecurity</code> method should return
        <code>true</code>. This return indicates to the Http Service that the
        request is authorized and processing may continue. If the request is
        for a Servlet, the Http Service must then call the
        <code>service</code> method on the <code>Servlet</code> object.</para>
      </listitem>
    </orderedlist>
  </section>

  <section>
    <title>Security</title>

    <para>This section only applies when executing in an OSGi environment
    which is enforcing Java permissions.</para>

    <section>
      <title>Accessing Resources with the Default Http Context</title>

      <para>The Http Service must be granted
      <code>AdminPermission[*,RESOURCE]</code> so that bundles may use a
      default <code>HttpContext</code> object. This is necessary because the
      implementation of the default <code>HttpContext</code> object must call
      <code>Bundle.getResource</code> to access the resources of a bundle and
      this method requires the caller to have
      <code>AdminPermission[bundle,RESOURCE]</code>.</para>

      <para>Any bundle may access resources in its own bundle by calling
      <code>Class.getResource</code>. This operation is privileged. The
      resulting <code>URL</code> object may then be passed to the Http Service
      as the result of a <code>HttpContext.getResource</code> call. No further
      permission checks are performed when accessing bundle resource
      <code>URL</code> objects, so the Http Service does not need to be
      granted any additional permissions.</para>
    </section>

    <section>
      <title>Accessing Other Types of Resources</title>

      <para>In order to access resources that were not registered using the
      default <code>HttpContext</code> object, the Http Service must be
      granted sufficient privileges to access these resources. For example, if
      the <code>getResource</code> method of the registered
      <code>HttpContext</code> object returns a file URL, the Http Service
      requires the corresponding <code>FilePermission</code> to read the file.
      Similarly, if the <code>getResource</code> method of the registered
      <code>HttpContext</code> object returns an HTTP URL, the Http Service
      requires the corresponding <code>SocketPermission</code> to connect to
      the resource.</para>

      <para>Therefore, in most cases, the Http Service should be a privileged
      service that is granted sufficient permission to serve any bundle's
      resources, no matter where these resources are located. Therefore, the
      Http Service must capture the <code>AccessControlContext</code> object
      of the bundle registering resources or a servlet, and then use the
      captured <code>AccessControlContext</code> object when accessing
      resources returned by the registered <code>HttpContext</code> object.
      This situation prevents a bundle from registering resources that it does
      not have permission to access.</para>

      <para>Therefore, the Http Service should follow a scheme like the
      following example. When a resource or servlet is registered, it should
      capture the context.</para>

      <programlisting>AccessControlContext acc = 
        AccessController.getContext();</programlisting>

      <para>When a URL returned by the <code>getResource</code> method of the
      associated <code>HttpContext</code> object is called, the Http Service
      must call the <code>getResource</code> method in a
      <code>doPrivileged</code> construct using the
      <code>AccessControlContext</code> object of the registering
      bundle:</para>

      <programlisting>AccessController.doPrivileged(
    new PrivilegedExceptionAction() {
        public Object run() throws Exception {
        ...
        }
    }, acc);</programlisting>

      <para>The Http Service must only use the captured
      <code>AccessControlContext</code> when accessing resource
      <code>URL</code> objects.</para>
    </section>

    <section>
      <title>Servlet and HttpContext objects</title>

      <para>This specification does not require that the Http Service is
      granted All Permission or wraps calls to the Servlet and Http Context
      objects in a <code>doPrivileged</code> block. Therefore, it is the
      responsibility of the Servlet and Http Context implementations to use a
      <code>doPrivileged</code> block when performing privileged
      operations.</para>
    </section>
  </section>

  <section>
    <title>Configuration Properties</title>

    <para>If the Http Service does not have its port values configured through
    some other means, the Http Service implementation should use the following
    properties to determine the port values upon which to listen.</para>

    <para>The following OSGi environment properties are used to specify
    default HTTP ports:</para>

    <itemizedlist>
      <listitem>
        <para><code>org.osgi.service.http.port</code> - This property
        specifies the port used for servlets and resources accessible via
        HTTP. The default value for this property is 80.</para>
      </listitem>

      <listitem>
        <para><code>org.osgi.service.http.port.secure</code> - This property
        specifies the port used for servlets and resources accessible via
        HTTPS. The default value for this property is 443.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.http" xml:id="org.osgi.service.http" xml:base="../../generated/javadoc/docbook/org.osgi.service.http.xml">
   <title>org.osgi.service.http</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.http-version">Version 1.2</releaseinfo>
      <edition xml:id="org.osgi.service.http-version.number">1.2</edition>
   </info>
   <para>
Http Service Package Version 1.2.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.http; version="[1.2,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.http; version="[1.2,1.3)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.HttpContext">
                  <code>HttpContext</code>
               </link> - 
Context for HTTP Requests.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.HttpService">
                  <code>HttpService</code>
               </link> - 
The Http Service allows other bundles in the OSGi environment to dynamically
 register resources and servlets into the URI namespace of Http Service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.NamespaceException">
                  <code>NamespaceException</code>
               </link> - 
A NamespaceException is thrown to indicate an error with the caller's request
 to register a servlet or resources into the URI namespace of the Http
 Service.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="HttpContext" xml:id="org.osgi.service.http.HttpContext">
      <title>public interface HttpContext</title>
      <para>
Context for HTTP Requests.
 
 </para>
      <para>
 This service defines methods that the Http Service may call to get
 information for a request.
 
 </para>
      <para>
 Servlets may be associated with an <code>HttpContext</code> service. Servlets that
 are associated using the same <code>HttpContext</code> object will share the same
 <code>ServletContext</code> object.
 
 </para>
      <para>
 If no <code>HttpContext</code> service is associated, a default
 <code>HttpContext</code> is used. The behavior of the methods on the default
 <code>HttpContext</code> is defined as follows:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <code>getMimeType</code> - Does not define any customized MIME types for the
 <code>Content-Type</code> header in the response, and always returns <code>null</code>.
 </para>
         </listitem>
         <listitem>
            <para>
               <code>handleSecurity</code> - Performs implementation-defined authentication
 on the request.</para>
         </listitem>
         <listitem>
            <para>
               <code>getResource</code> - Assumes the named resource is in the bundle of the
 servlet service. This method calls the servlet bundle's
 <code>Bundle.getResource</code> method, and returns the appropriate URL to access
 the resource. On a Java runtime environment that supports permissions, the
 Http Service needs to be granted
 <code>org.osgi.framework.AdminPermission[*,RESOURCE]</code>.</para>
         </listitem>
      </itemizedlist>
      <section role="field" xreflabel="AUTHENTICATION_TYPE" xml:id="org.osgi.service.http.HttpContext.AUTHENTICATION_TYPE">
         <title>public static final String AUTHENTICATION_TYPE = "org.osgi.service.http.authentication.type"</title>
         <para>
            <code>HttpServletRequest</code> attribute specifying the scheme used in
 authentication. The value of the attribute can be retrieved by
 <code>HttpServletRequest.getAuthType</code>. This attribute name is
 <code>org.osgi.service.http.authentication.type</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="AUTHORIZATION" xml:id="org.osgi.service.http.HttpContext.AUTHORIZATION">
         <title>public static final String AUTHORIZATION = "org.osgi.service.useradmin.authorization"</title>
         <para>
            <code>HttpServletRequest</code> attribute specifying the <code>Authorization</code>
 object obtained from the <code>org.osgi.service.useradmin.UserAdmin</code>
 service. The value of the attribute can be retrieved by
 <code>HttpServletRequest.getAttribute(HttpContext.AUTHORIZATION)</code>. This
 attribute name is <code>org.osgi.service.useradmin.authorization</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="REMOTE_USER" xml:id="org.osgi.service.http.HttpContext.REMOTE_USER">
         <title>public static final String REMOTE_USER = "org.osgi.service.http.authentication.remote.user"</title>
         <para>
            <code>HttpServletRequest</code> attribute specifying the name of the
 authenticated user. The value of the attribute can be retrieved by
 <code>HttpServletRequest.getRemoteUser</code>. This attribute name is
 <code>org.osgi.service.http.authentication.remote.user</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMimeType(String)" xml:id="org.osgi.service.http.HttpContext.getMimeType-String-">
         <title>public String getMimeType(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name for which to determine the MIME type.</para>
         </formalpara>
         <para role="description">
Maps a name to a MIME type.
 
 </para>
         <para>
 Called by the Http Service to determine the MIME type for the specified
 name. For servlets, the Http Service will call this method to support the
 <code>ServletContext</code> method <code>getMimeType</code>. For resources, the
 Http Service will call this method to determine the MIME type for the
 <code>Content-Type</code> header in the response.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The MIME type (e.g. text/html) of the specified name or
         <code>null</code> to indicate that the Http Service should determine
         the MIME type itself.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getResource(String)" xml:id="org.osgi.service.http.HttpContext.getResource-String-">
         <title>public URL getResource(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>the name of the requested resource</para>
         </formalpara>
         <para role="description">
Maps a resource name to a URL.
 
 </para>
         <para>
 Called by the Http Service to map a resource name to a URL. For servlet
 registrations, Http Service will call this method to support the
 <code>ServletContext</code> methods <code>getResource</code> and
 <code>getResourceAsStream</code>. For resource registrations, Http Service
 will call this method to locate the named resource. The context can
 control from where resources come. For example, the resource can be
 mapped to a file in the bundle's persistent storage area via
 <code>bundleContext.getDataFile(name).toURL()</code> or to a resource in the
 context's bundle via <code>getClass().getResource(name)</code>
         </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>URL that Http Service can use to read the resource or
         <code>null</code> if the resource does not exist.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="handleSecurity(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" xml:id="org.osgi.service.http.HttpContext.handleSecurity-javax.servlet.http.HttpServletRequest-javax.servlet.http.HttpServletResponse-">
         <title>public boolean handleSecurity(HttpServletRequest request,HttpServletResponse response) throws IOException</title>
         <formalpara role="parameter">
            <title>request</title>
            <para>The HTTP request.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>response</title>
            <para>The HTTP response.</para>
         </formalpara>
         <para role="description">
Handles security for the specified request.
 
 </para>
         <para>
 The Http Service calls this method prior to servicing the specified
 request. This method controls whether the request is processed in the
 normal manner or an error is returned.
 
 </para>
         <para>
 If the request requires authentication and the Authorization header in
 the request is missing or not acceptable, then this method should set the
 WWW-Authenticate header in the response object, set the status in the
 response object to Unauthorized(401) and return <code>false</code>. See also
 RFC 2617: <emphasis>HTTP Authentication: Basic and Digest Access Authentication
 </emphasis> (available at http://www.ietf.org/rfc/rfc2617.txt).
 
 </para>
         <para>
 If the request requires a secure connection and the <code>getScheme</code>
 method in the request does not return 'https' or some other acceptable
 secure protocol, then this method should set the status in the response
 object to Forbidden(403) and return <code>false</code>.
 
 </para>
         <para>
 When this method returns <code>false</code>, the Http Service will send the
 response back to the client, thereby completing the request. When this
 method returns <code>true</code>, the Http Service will proceed with servicing
 the request.
 
 </para>
         <para>
 If the specified request has been authenticated, this method must set the
 <link linkend="org.osgi.service.http.HttpContext.AUTHENTICATION_TYPE">AUTHENTICATION_TYPE</link> request attribute to the type of
 authentication used, and the <link linkend="org.osgi.service.http.HttpContext.REMOTE_USER">REMOTE_USER</link> request attribute to
 the remote user (request attributes are set using the
 <code>setAttribute</code> method on the request). If this method does not
 perform any authentication, it must not set these attributes.
 
 </para>
         <para>
 If the authenticated user is also authorized to access certain resources,
 this method must set the <link linkend="org.osgi.service.http.HttpContext.AUTHORIZATION">AUTHORIZATION</link> request attribute to the
 <code>Authorization</code> object obtained from the
 <code>org.osgi.service.useradmin.UserAdmin</code> service.
 
 </para>
         <para>
 The servlet responsible for servicing the specified request determines
 the authentication type and remote user by calling the
 <code>getAuthType</code> and <code>getRemoteUser</code> methods, respectively, on
 the request.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the request should be serviced, <code>false</code> if
         the request should not be serviced and Http Service will send the
         response back to the client.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– may be thrown by this method. If this occurs,
         the Http Service will terminate the request and close the socket.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="HttpService" xml:id="org.osgi.service.http.HttpService">
      <title>public interface HttpService</title>
      <para>
The Http Service allows other bundles in the OSGi environment to dynamically
 register resources and servlets into the URI namespace of Http Service. A
 bundle may later unregister its resources or servlets.
   </para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.http.HttpContext">HttpContext</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>No Implement</title>
         <para>Consumers of this API must not implement this interface</para>
      </formalpara>
      <section role="method" xreflabel="createDefaultHttpContext()" xml:id="org.osgi.service.http.HttpService.createDefaultHttpContext--">
         <title>public HttpContext createDefaultHttpContext()</title>
         <para role="description">
Creates a default <code>HttpContext</code> for registering servlets or
 resources with the HttpService, a new <code>HttpContext</code> object is
 created each time this method is called.
 
 </para>
         <para>
 The behavior of the methods on the default <code>HttpContext</code> is defined
 as follows:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>getMimeType</code> - Does not define any customized MIME types for
 the Content-Type header in the response, and always returns <code>null</code>.
 </para>
            </listitem>
            <listitem>
               <para>
                  <code>handleSecurity</code> - Performs implementation-defined
 authentication on the request.</para>
            </listitem>
            <listitem>
               <para>
                  <code>getResource</code> - Assumes the named resource is in the context
 bundle; this method calls the context bundle's <code>Bundle.getResource</code>
 method, and returns the appropriate URL to access the resource. On a Java
 runtime environment that supports permissions, the Http Service needs to
 be granted <code>org.osgi.framework.AdminPermission[*,RESOURCE]</code>.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a default <code>HttpContext</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="registerResources(String,String,HttpContext)" xml:id="org.osgi.service.http.HttpService.registerResources-String-String-HttpContext-">
         <title>public void registerResources(String alias,String name,HttpContext context) throws NamespaceException</title>
         <formalpara role="parameter">
            <title>alias</title>
            <para>name in the URI namespace at which the resources are
        registered</para>
         </formalpara>
         <formalpara role="parameter">
            <title>name</title>
            <para>the base name of the resources that will be registered</para>
         </formalpara>
         <formalpara role="parameter">
            <title>context</title>
            <para>the <code>HttpContext</code> object for the registered
        resources, or <code>null</code> if a default <code>HttpContext</code> is to
        be created and used.</para>
         </formalpara>
         <para role="description">
Registers resources into the URI namespace.
 
 </para>
         <para>
 The alias is the name in the URI namespace of the Http Service at which
 the registration will be mapped. An alias must begin with slash ('/') and
 must not end with slash ('/'), with the exception that an alias of the
 form "/" is used to denote the root alias. The name parameter
 must also not end with slash ('/') with the exception that a name of the
 form "/" is used to denote the root of the bundle. See the
 specification text for details on how HTTP requests are mapped to servlet
 and resource registrations.
 </para>
         <para>
 For example, suppose the resource name /tmp is registered to the alias
 /files. A request for /files/foo.txt will map to the resource name
 /tmp/foo.txt.
 
 </para>
         <programlisting> httpservice.registerResources("/files", "/tmp", context);</programlisting>
         <para>
 
 The Http Service will call the <code>HttpContext</code> argument to map
 resource names to URLs and MIME types and to handle security for
 requests. If the <code>HttpContext</code> argument is <code>null</code>, a default
 <code>HttpContext</code> is used (see <link linkend="org.osgi.service.http.HttpService.createDefaultHttpContext--">createDefaultHttpContext()</link>).
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NamespaceException</code>– if the registration fails because the alias is
         already in use.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if any of the parameters are
         invalid   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="registerServlet(String,javax.servlet.Servlet,Dictionary,HttpContext)" xml:id="org.osgi.service.http.HttpService.registerServlet-String-javax.servlet.Servlet-Dictionary-HttpContext-">
         <title>public void registerServlet(String alias,Servlet servlet,Dictionary initparams,HttpContext context) throws ServletException, NamespaceException</title>
         <formalpara role="parameter">
            <title>alias</title>
            <para>name in the URI namespace at which the servlet is registered</para>
         </formalpara>
         <formalpara role="parameter">
            <title>servlet</title>
            <para>the servlet object to register</para>
         </formalpara>
         <formalpara role="parameter">
            <title>initparams</title>
            <para>initialization arguments for the servlet or
        <code>null</code> if there are none. This argument is used by the
        servlet's <code>ServletConfig</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>context</title>
            <para>the <code>HttpContext</code> object for the registered servlet,
        or <code>null</code> if a default <code>HttpContext</code> is to be created
        and used.</para>
         </formalpara>
         <para role="description">
Registers a servlet into the URI namespace.
 
 </para>
         <para>
 The alias is the name in the URI namespace of the Http Service at which
 the registration will be mapped.
 
 </para>
         <para>
 An alias must begin with slash ('/') and must not end with slash ('/'),
 with the exception that an alias of the form "/" is used to
 denote the root alias. See the specification text for details on how HTTP
 requests are mapped to servlet and resource registrations.
 
 </para>
         <para>
 The Http Service will call the servlet's <code>init</code> method before
 returning.
 
 </para>
         <programlisting> httpService.registerServlet("/myservlet", servlet, initparams, context);</programlisting>
         <para>
 Servlets registered with the same <code>HttpContext</code> object will share
 the same <code>ServletContext</code>. The Http Service will call the
 <code>context</code> argument to support the <code>ServletContext</code> methods
 <code>getResource</code>,<code>getResourceAsStream</code> and <code>getMimeType</code>,
 and to handle security for requests. If the <code>context</code> argument is
 <code>null</code>, a default <code>HttpContext</code> object is used (see
 <link linkend="org.osgi.service.http.HttpService.createDefaultHttpContext--">createDefaultHttpContext()</link>).</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NamespaceException</code>– if the registration fails because the alias is
         already in use.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>javax.servlet.ServletException</code>– if the servlet's <code>init</code>
         method throws an exception, or the given servlet object has
         already been registered at a different alias.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if any of the arguments are
         invalid   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="unregister(String)" xml:id="org.osgi.service.http.HttpService.unregister-String-">
         <title>public void unregister(String alias)</title>
         <formalpara role="parameter">
            <title>alias</title>
            <para>name in the URI name-space of the registration to unregister</para>
         </formalpara>
         <para role="description">
Unregisters a previous registration done by <code>registerServlet</code> or
 <code>registerResources</code> methods.
 
 </para>
         <para>
 After this call, the registered alias in the URI name-space will no
 longer be available. If the registration was for a servlet, the Http
 Service must call the <code>destroy</code> method of the servlet before
 returning.
 </para>
         <para>
 If the bundle which performed the registration is stopped or otherwise
 "unget"s the Http Service without calling <link linkend="org.osgi.service.http.HttpService.unregister-String-">unregister(String)</link>
 then Http Service must automatically unregister the registration.
 However, if the registration was for a servlet, the <code>destroy</code>
 method of the servlet will not be called in this case since the bundle
 may be stopped. <link linkend="org.osgi.service.http.HttpService.unregister-String-">unregister(String)</link> must be explicitly called to
 cause the <code>destroy</code> method of the servlet to be called. This can be
 done in the <code>BundleActivator.stop</code> method of the bundle registering
 the servlet.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if there is no registration
         for the alias or the calling bundle was not the bundle which
         registered the alias.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="NamespaceException" xml:id="org.osgi.service.http.NamespaceException">
      <title>public class NamespaceException<?line-break?> extends Exception</title>
      <para>
A NamespaceException is thrown to indicate an error with the caller's request
 to register a servlet or resources into the URI namespace of the Http
 Service. This exception indicates that the requested alias already is in use.
   </para>
      <section role="method" xreflabel="NamespaceException(String)" xml:id="org.osgi.service.http.NamespaceException.NamespaceException-String-">
         <title>public  NamespaceException(String message)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>the detail message</para>
         </formalpara>
         <para role="description">
Construct a <code>NamespaceException</code> object with a detail message.
   </para>
      </section>
      <section role="method" xreflabel="NamespaceException(String,Throwable)" xml:id="org.osgi.service.http.NamespaceException.NamespaceException-String-Throwable-">
         <title>public  NamespaceException(String message,Throwable cause)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The detail message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The nested exception.</para>
         </formalpara>
         <para role="description">
Construct a <code>NamespaceException</code> object with a detail message and a
 nested exception.
   </para>
      </section>
      <section role="method" xreflabel="getCause()" xml:id="org.osgi.service.http.NamespaceException.getCause--">
         <title>public Throwable getCause()</title>
         <para role="description">
Returns the cause of this exception or <code>null</code> if no cause was set.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The cause of this exception or <code>null</code> if no cause was set.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getException()" xml:id="org.osgi.service.http.NamespaceException.getException--">
         <title>public Throwable getException()</title>
         <para role="description">
Returns the nested exception.
 
 </para>
         <para>
 This method predates the general purpose exception chaining mechanism.
 The <code>getCause()</code> method is now the preferred means of obtaining
 this information.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The result of calling <code>getCause()</code>.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="initCause(Throwable)" xml:id="org.osgi.service.http.NamespaceException.initCause-Throwable-">
         <title>public Throwable initCause(Throwable cause)</title>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception.</para>
         </formalpara>
         <para role="description">
Initializes the cause of this exception to the specified value.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>This exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified cause is this
         exception.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the cause of this exception has already
         been set.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i1231452"><title>HTTP 1.0 Specification
      RFC-1945</title>http://www.ietf.org/rfc/rfc1945.txt, May
      1996</bibliomixed>

      <bibliomixed xml:id="i1215926"><title>HTTP 1.1 Specification
      RFC-2616</title>http://www.ietf.org/rfc/rfc2616.txt, June
      1999</bibliomixed>

      <bibliomixed xml:id="i1217577"><title>Java Servlet
      Technology</title>http://www.oracle.com/technetwork/java/javaee/servlet/index.html</bibliomixed>

      <bibliomixed xml:id="i1219807"><title>MIME Multipurpose Internet Mail
      Extension</title>http://www.mhonarc.org/~ehood/MIME/MIME.html</bibliomixed>

      <bibliomixed xml:id="i1220020"><title>Assigned MIME Media
      Types</title>http://www.iana.org/assignments/media-types</bibliomixed>

      <bibliomixed xml:id="i1220024"><title>Registration Procedures for new
      MIME media
      types</title>http://www.ietf.org/rfc/rfc2048.txt</bibliomixed>

      <bibliomixed xml:id="i1220308"><title>RFC 2617: HTTP Authentication:
      Basic and Digest Access
      Authentication</title>http://www.ietf.org/rfc/rfc2617.txt</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="103" revision="$Id: 2e6175d0eb40215539cda4a06507558be6d5c2f2 $" version="5" xml:id="service.device" xml:base="../103/service.device.xml">
  <title>Device Access Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.device-version" linkend="org.osgi.service.device"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>A Framework is a meeting point for services and devices from many
    different vendors: a meeting point where users add and cancel service
    subscriptions, newly installed services find their corresponding input and
    output devices, and device drivers connect to their hardware.</para>

    <para>In an OSGi Framework, these activities will dynamically take place
    while the Framework is running. Technologies such as USB and IEEE 1394
    explicitly support plugging and unplugging devices at any time, and
    wireless technologies are even more dynamic.</para>

    <para>This flexibility makes it hard to configure all aspects of an OSGi
    Framework, particularly those relating to devices. When all of the
    possible services and device requirements are factored in, each OSGi
    Framework will be unique. Therefore, automated mechanisms are needed that
    can be extended and customized, in order to minimize the configuration
    needs of the OSGi environment.</para>

    <para>The Device Access specification supports the coordination of
    automatic detection and attachment of existing devices on an OSGi
    Framework, facilitates hot-plugging and -unplugging of new devices, and
    downloads and installs device drivers on demand.</para>

    <para>This specification, however, deliberately does not prescribe any
    particular device or network technology, and mentioned technologies are
    used as examples only. Nor does it specify a particular device discovery
    method. Rather, this specification focuses on the attachment of devices
    supplied by different vendors. It emphasizes the development of
    standardized device interfaces to be defined in device categories,
    although no such device categories are defined in this
    specification.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Embedded Devices</emphasis> - OSGi bundles will
          likely run in embedded devices. This environment implies limited
          possibility for user interaction, and low-end devices will probably
          have resource limitations.</para>
        </listitem>

        <listitem>
          <para><emphasis>Remote Administration</emphasis> - OSGi environments
          must support administration by a remote service provider.</para>
        </listitem>

        <listitem>
          <para><emphasis>Vendor Neutrality</emphasis> - OSGi-compliant driver
          bundles will be supplied by different vendors; each driver bundle
          must be well-defined, documented, and replaceable.</para>
        </listitem>

        <listitem>
          <para><emphasis>Continuous Operation</emphasis> - OSGi environments
          will be running for extended periods without being restarted,
          possibly continuously, requiring stable operation and stable
          resource consumption.</para>
        </listitem>

        <listitem>
          <para><emphasis>Dynamic Updates</emphasis> - As much as possible,
          driver bundles must be individually replaceable without affecting
          unrelated bundles. In particular, the process of updating a bundle
          should not require a restart of the whole OSGi Framework or disrupt
          operation of connected devices.</para>
        </listitem>
      </itemizedlist>

      <para>A number of requirements must be satisfied by Device Access
      implementations in order for them to be OSGi-compliant. Implementations
      must support the following capabilities:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Hot-Plugging</emphasis> - Plugging and unplugging of
          devices at any time if the underlying hardware and drivers allow
          it.</para>
        </listitem>

        <listitem>
          <para><emphasis>Legacy Systems</emphasis> - Device technologies
          which do not implement the automatic detection of plugged and
          unplugged devices.</para>
        </listitem>

        <listitem>
          <para><emphasis>Dynamic Device Driver Loading</emphasis> - Loading
          new driver bundles on demand with no prior device-specific knowledge
          of the Device service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Multiple Device Representations</emphasis> - Devices
          to be accessed from multiple levels of abstraction.</para>
        </listitem>

        <listitem>
          <para><emphasis>Deep Trees</emphasis> - Connections of devices in a
          tree of mixed network technologies of arbitrary depth.</para>
        </listitem>

        <listitem>
          <para><emphasis>Topology Independence</emphasis> - Separation of the
          interfaces of a device from where and how it is attached.</para>
        </listitem>

        <listitem>
          <para><emphasis>Complex Devices</emphasis> - Multifunction devices
          and devices that have multiple configurations.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Operation</title>

      <para>This specification defines the behavior of a device manager (which
      is <emphasis>not</emphasis> a service as might be expected). This device
      manager detects registration of Device services and is responsible for
      associating these devices with an appropriate Driver service. These
      tasks are done with the help of Driver Locator services and the Driver
      Selector service that allow a device manager to find a Driver bundle and
      install it.</para>
    </section>

    <section>
      <title>Entities</title>

      <para>The main entities of the Device Access specification are:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Device Manager</emphasis> - The bundle that controls
          the initiation of the attachment process behind the scenes.</para>
        </listitem>

        <listitem>
          <para><emphasis>Device Category</emphasis> - Defines how a Driver
          service and a Device service can cooperate.</para>
        </listitem>

        <listitem>
          <para><emphasis>Driver</emphasis> - Competes for attaching Device
          services of its recognized device category. See <xref linkend="i1282334"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Device</emphasis> - A representation of a physical
          device or other entity that can be attached by a Driver service. See
          <xref linkend="i1292342"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>DriverLocator</emphasis> - Assists in locating
          bundles that provide a Driver service. See <xref linkend="i1292350"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>DriverSelector</emphasis> - Assists in selecting
          which Driver service is best suited to a Device service. See <xref linkend="i1286950"/>.</para>
        </listitem>
      </itemizedlist>

      <para><xref linkend="i1309251"/> show the classes and their
      relationships.</para>

      <figure pgwide="1" xml:id="i1309251">
        <title>Device Access Class Overview</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="4.444in" contentwidth="7.000in" fileref="device-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section xml:id="i1292342">
    <title>Device Services</title>

    <para>A Device service represents some form of a device. It can represent
    a hardware device, but that is not a requirement. Device services differ
    widely: some represent individual physical devices and others represent
    complete networks. Several Device services can even simultaneously
    represent the same physical device at different levels of abstraction. For
    example:</para>

    <itemizedlist>
      <listitem>
        <para>A USB network.</para>
      </listitem>

      <listitem>
        <para>A device attached on the USB network.</para>
      </listitem>

      <listitem>
        <para>The same device recognized as a USB to Ethernet bridge.</para>
      </listitem>

      <listitem>
        <para>A device discovered on the Ethernet using Salutation.</para>
      </listitem>

      <listitem>
        <para>The same device recognized as a simple printer.</para>
      </listitem>

      <listitem>
        <para>The same printer refined to a PostScript printer.</para>
      </listitem>
    </itemizedlist>

    <para>A device can also be represented in different ways. For example, a
    USB mouse can be considered as:</para>

    <itemizedlist>
      <listitem>
        <para>A USB device which delivers information over the USB bus.</para>
      </listitem>

      <listitem>
        <para>A mouse device which delivers <code>x</code> and <code>y</code>
        coordinates and information about the state of its buttons.</para>
      </listitem>
    </itemizedlist>

    <para>Each representation has specific implications:</para>

    <itemizedlist>
      <listitem>
        <para>That a particular device is a mouse is irrelevant to an
        application which provides management of USB devices.</para>
      </listitem>

      <listitem>
        <para>That a mouse is attached to a USB bus or a serial port would be
        inconsequential to applications that respond to mouse-like
        input.</para>
      </listitem>
    </itemizedlist>

    <para>Device services must belong to a defined <emphasis>device
    category</emphasis>, or else they can implement a generic service which
    models a particular device, independent of its underlying technology.
    Examples of this type of implementation could be Sensor or Actuator
    services.</para>

    <para>A device category specifies the methods for communicating with a
    Device service, and enables interoperability between bundles that are
    based on the same underlying technology. Generic Device services will
    allow interoperability between bundles that are not coupled to specific
    device technologies.</para>

    <para>For example, a device category is required for the USB, so that
    Driver bundles can be written that communicate to the devices that are
    attached to the USB. If a printer is attached, it should also be available
    as a generic Printer service defined in a Printer service specification,
    indistinguishable from a Printer service attached to a parallel port.
    Generic categories, such as a Printer service, should also be described in
    a Device Category.</para>

    <para>It is expected that most Device service objects will actually
    represent a physical device in some form, but that is not a requirement of
    this specification. A Device service is represented as a normal service in
    the OSGi Framework and all coordination and activities are performed upon
    Framework services. This specification does not limit a bundle developer
    from using Framework mechanisms for services that are not related to
    physical devices.</para>

    <section xml:id="service.device-device.service.registration">
      <title>Device Service Registration</title>

      <para>A Device service is defined as a normal service registered with
      the Framework that either:</para>

      <itemizedlist>
        <listitem>
          <para>Registers a service object under the interface
          <code>org.osgi.service.Device</code> with the Framework, or</para>
        </listitem>

        <listitem>
          <para>Sets the <xref linkend="org.osgi.service.device.Constants.DEVICE_CATEGORY" xrefstyle="hyperlink"/> property in the registration. The value of
          <code>DEVICE_CATEGORY</code> is an array of <code>String</code>
          objects of all the device categories that the device belongs to.
          These strings are defined in the associated device category.</para>
        </listitem>
      </itemizedlist>

      <para>If this document mentions a Device service, it is meant to refer
      to services registered with the name
      <code>org.osgi.service.device.Device</code> <emphasis>or</emphasis>
      services registered with the <code>DEVICE_CATEGORY</code> property
      set.</para>

      <para>When a Device service is registered, additional properties may be
      set that describe the device to the device manager and potentially to
      the end users. The following properties have their semantics defined in
      this specification:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.device.Constants.DEVICE_CATEGORY" xrefstyle="hyperlink"/> - A marker property indicating that this
          service must be regarded as a Device service by the device manager.
          Its value is of type <code>String[]</code>, and its meaning is
          defined in the associated device category specification.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.device.Constants.DEVICE_DESCRIPTION" xrefstyle="hyperlink"/> - Describes the device to an end user. Its
          value is of type <code>String</code>.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.device.Constants.DEVICE_SERIAL" xrefstyle="hyperlink"/> - A unique serial number for this device. If
          the device hardware contains a serial number, the driver bundle is
          encouraged to specify it as this property. Different Device services
          representing the same physical hardware at different abstraction
          levels should set the same <code>DEVICE_SERIAL</code>, thus
          simplifying identification. Its value is of type
          <code>String</code>.</para>
        </listitem>

        <listitem>
          <para><code>service.pid</code> - Service Persistent ID (PID),
          defined in <code>org.osgi.framework.Constants</code>. Device
          services should set this property. It must be unique among all
          registered services. Even different abstraction levels of the same
          device must use different PIDs. The service PIDs must be
          reproducible, so that every time the same hardware is plugged in,
          the same PIDs are used.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Device Service Attachment</title>

      <para>When a Device service is registered with the Framework, the device
      manager is responsible for finding a suitable Driver service and
      instructing it to attach to the newly registered Device service. The
      Device service itself is passive: it only registers a Device service
      with the Framework and then waits until it is called.</para>

      <para>The actual communication with the underlying physical device is
      not defined in the <code>Device</code> interface because it differs
      significantly between different types of devices. The Driver service is
      responsible for attaching the device in a device type-specific manner.
      The rules and interfaces for this process must be defined in the
      appropriate device category.</para>

      <para>If the device manager is unable to find a suitable Driver service,
      the Device service remains unattached. In that case, if the service
      object implements the <code>Device</code> interface, it must receive a
      call to the <xref linkend="org.osgi.service.device.Device.noDriverFound--" xrefstyle="hyperlink"/> method. The Device service can wait until a new
      driver is installed, or it can unregister and attempt to register again
      with different properties that describe a more generic device or try a
      different configuration.</para>

      <section>
        <title>Idle Device Service</title>

        <para>The main purpose of the device manager is to try to attach
        drivers to idle devices. For this purpose, a Device service is
        considered <emphasis>idle</emphasis> if no bundle that itself has
        registered a Driver service is using the Device service.</para>
      </section>

      <section>
        <title>Device Service Unregistration</title>

        <para>When a Device service is unregistered, no immediate action is
        required by the device manager. The normal service of unregistering
        events, provided by the Framework, takes care of propagating the
        unregistration information to affected drivers. Drivers must take the
        appropriate action to release this Device service and perform any
        necessary cleanup, as described in their device category
        specification.</para>

        <para>The device manager may, however, take a device unregistration as
        an indication that driver bundles may have become idle and are thus
        eligible for removal. It is therefore important for Device services to
        unregister their service object when the underlying entity becomes
        unavailable.</para>
      </section>
    </section>
  </section>

  <section xml:id="service.device-device.category">
    <title>Device Category Specifications</title>

    <para>A device category specifies the rules and interfaces needed for the
    communication between a Device service and a Driver service. Only Device
    services and Driver services of the same device category can communicate
    and cooperate.</para>

    <para>The Device Access service specification is limited to the attachment
    of Device services by Driver services, and does <emphasis>not</emphasis>
    enumerate different device categories.</para>

    <para>Other specifications must specify a number of device categories
    before this specification can be made operational. Without a set of
    defined device categories, no inter-operability can be achieved.</para>

    <para>Device categories are related to a specific device technology, such
    as USB, IEEE 1394, JINI, UPnP, Salutation, CEBus, Lonworks, and others.
    The purpose of a device category specification is to make all Device
    services of that category conform to an agreed interface, so that, for
    example, a USB Driver service of vendor A can control Device services from
    vendor B attached to a USB bus.</para>

    <para>This specification is limited to defining the guidelines for device
    category definitions only. Device categories may be defined by the OSGi
    organization or by external specification bodies - for example, when these
    bodies are associated with a specific device technology.</para>

    <section>
      <title>Device Category Guidelines</title>

      <para>A device category definition comprises the following
      elements:</para>

      <itemizedlist>
        <listitem>
          <para>An interface that all devices belonging to this category must
          implement. This interface should lay out the rules of how to
          communicate with the underlying device. The specification body may
          define its own device interfaces (or classes) or leverage existing
          ones. For example, a serial port device category could use the
          <code>javax.comm.SerialPort</code> interface which is defined in
          <xref linkend="i1424268"/>.</para>

          <para>When registering a device belonging to this category with the
          Framework, the interface or class name for this category must be
          included in the registration.</para>
        </listitem>

        <listitem>
          <para>A set of service registration properties, their data types,
          and semantics, each of which must be declared as either
          <code>MANDATORY</code> or <code>OPTIONAL</code> for this device
          category.</para>
        </listitem>

        <listitem>
          <para>A range of match values specific to this device category.
          Matching is explained later in <xref linkend="i1288442"/>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i1306027">
      <title>Sample Device Category Specification</title>

      <para>The following is a partial example of a fictitious device
      category:</para>

      <programlisting>public interface /* com.acme.widget.*/ WidgetDevice{
    int MATCH_SERIAL                    = 10;
    int MATCH_VERSION                   =  8;
    int MATCH_MODEL                     =  6;
    int MATCH_MAKE                      =  4;
    int MATCH_CLASS                     =  2;
    void sendPacket( byte [] data );
    byte [] receivePacket( long timeout );
}</programlisting>

      <para>Devices in this category must implement the interface
      <code>com.acme.widget.WidgetDevice</code> to receive attachments from
      Driver services in this category.</para>

      <para>Device properties for this fictitious category are defined in the
      following table.</para>

      <table>
        <title>Example Device Category Properties, M=Mandatory,
        O=Optional</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="1.5*"/>

          <colspec colnum="4" colwidth="4*"/>

          <thead>
            <row>
              <entry>Property name</entry>

              <entry>M/O</entry>

              <entry>Type</entry>

              <entry>Value</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>DEVICE_CATEGORY</code></entry>

              <entry><code>M</code></entry>

              <entry><code>String[]</code></entry>

              <entry><code>{"Widget"}</code></entry>
            </row>

            <row>
              <entry><code>com.acme.class</code></entry>

              <entry><code>M</code></entry>

              <entry><code>String</code></entry>

              <entry><para>A class description of this device. For example
              "<code>audio</code>", "<code>video</code>",
              "<code>serial</code>", etc. An actual device category
              specification should contain an exhaustive list and define a
              process to add new classes.</para></entry>
            </row>

            <row>
              <entry><code>com.acme.model</code></entry>

              <entry><code>M</code></entry>

              <entry><code>String</code></entry>

              <entry><para>A definition of the model. This is usually vendor
              specific. For example "<code>Mouse</code>".</para></entry>
            </row>

            <row>
              <entry><code>com.acme.manufacturer</code></entry>

              <entry><code>M</code></entry>

              <entry><code>String</code></entry>

              <entry><para>Manufacturer of this device, for example "ACME
              Widget Division".</para></entry>
            </row>

            <row>
              <entry><code>com.acme.revision</code></entry>

              <entry><code>O</code></entry>

              <entry><code>String</code></entry>

              <entry><para>Revision number. For example, "42".</para></entry>
            </row>

            <row>
              <entry><code>com.acme.serial</code></entry>

              <entry><code>O</code></entry>

              <entry><code>String</code></entry>

              <entry><para>A serial number. For example
              "<code>SN6751293-12-2112/A</code>".</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Match Example</title>

      <para>Driver services and Device services are connected via a matching
      process that is explained in <xref linkend="i1288442"/>. The Driver
      service plays a pivotal role in this matching process. It must inspect
      the Device service (from its <code>ServiceReference</code> object) that
      has just been registered and decide if it potentially could cooperate
      with this Device service.</para>

      <para>It must be able to answer a value indicating the quality of the
      match. The scale of this match value must be defined in the device
      category so as to allow Driver services to match on a fair basis. The
      scale must start at least at 1 and go upwards.</para>

      <para>Driver services for this sample device category must return one of
      the match codes defined in the <code>com.acme.widget.WidgetDevice</code>
      interface or <code>Device.MATCH_NONE</code> if the Device service is not
      recognized. The device category must define the exact rules for the
      match codes in the device category specification. In this example, a
      small range from 2 to 10 (<code>MATCH_NONE</code> is 0) is defined for
      <code>WidgetDevice</code> devices. They are named in the
      <code>WidgetDevice</code> interface for convenience and have the
      following semantics.</para>

      <table>
        <title>Sample Device Category Match Scale</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="5*"/>

          <thead>
            <row>
              <entry>Match name</entry>

              <entry>Value</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>MATCH_SERIAL</code></entry>

              <entry><code>10</code></entry>

              <entry><para>An exact match, including the serial
              number.</para></entry>
            </row>

            <row>
              <entry><code>MATCH_VERSION</code></entry>

              <entry><code>8</code></entry>

              <entry><para>Matches the right class, make model, and
              version.</para></entry>
            </row>

            <row>
              <entry><code>MATCH_MODEL</code></entry>

              <entry><code>6</code></entry>

              <entry><para>Matches the right class and make
              model.</para></entry>
            </row>

            <row>
              <entry><code>MATCH_MAKE</code></entry>

              <entry><code>4</code></entry>

              <entry><para>Matches the make.</para></entry>
            </row>

            <row>
              <entry><code>MATCH_CLASS</code></entry>

              <entry><code>2</code></entry>

              <entry><para>Only matches the class.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>A Driver service should use the constants to return when it
      decides how closely the Device service matches its suitability. For
      example, if it matches the exact serial number, it should return
      <code>MATCH_SERIAL</code>.</para>
    </section>
  </section>

  <section xml:id="i1282334">
    <title>Driver Services</title>

    <para>A Driver service is responsible for attaching to suitable Device
    services under control of the device manager. Before it can attach a
    Device service, however, it must compete with other Driver services for
    control.</para>

    <para>If a Driver service wins the competition, it must attach the device
    in a device category-specific way. After that, it can perform its intended
    functionality. This functionality is not defined here nor in the device
    category; this specification only describes the behavior of the Device
    service, not how the Driver service uses it to implement its intended
    functionality. A Driver service may register one or more new Device
    services of another device category or a generic service which models a
    more refined form of the device.</para>

    <para>Both refined Device services as well as generic services should be
    defined in a Device Category. See <xref linkend="service.device-device.category"/>.</para>

    <section>
      <title>Driver Bundles</title>

      <para>A Driver service is, like <emphasis>all</emphasis> services,
      implemented in a bundle, and is recognized by the device manager by
      registering one or more <code>Driver</code> service objects with the
      Framework.</para>

      <para>Such bundles containing one or more Driver services are called
      <emphasis>driver bundles</emphasis>. The device manager must be aware of
      the fact that the cardinality of the relationship between bundles and
      Driver services is 1:1...*.</para>

      <para>A driver bundle must register <emphasis>at least</emphasis> one
      Driver service in its <code>BundleActivator.start</code>
      implementation.</para>
    </section>

    <section>
      <title>Driver Taxonomy</title>

      <para>Device Drivers may belong to one of the following
      categories:</para>

      <itemizedlist>
        <listitem>
          <para>Base Drivers (Discovery, Pure Discovery and Normal)</para>
        </listitem>

        <listitem>
          <para>Refining Drivers</para>
        </listitem>

        <listitem>
          <para>Network Drivers</para>
        </listitem>

        <listitem>
          <para>Composite Drivers</para>
        </listitem>

        <listitem>
          <para>Referring Drivers</para>
        </listitem>

        <listitem>
          <para>Bridging Drivers</para>
        </listitem>

        <listitem>
          <para>Multiplexing Drivers</para>
        </listitem>

        <listitem>
          <para>Pure Consuming Drivers</para>
        </listitem>
      </itemizedlist>

      <para>This list is not definitive, and a Driver service is not required
      to fit into one of these categories. The purpose of this taxonomy is to
      show the different topologies that have been considered for the Device
      Access service specification.</para>

      <figure>
        <title>Legend for Device Driver Services Taxonomy</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.333in" contentwidth="6.496in" fileref="driver-services-taxonomy.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <section>
        <title>Base Drivers</title>

        <para>The first category of device drivers are called <emphasis>base
        drivers</emphasis> because they provide the lowest-level
        representation of a physical device. The distinguishing factor is that
        they are not registered as Driver services because they do not have to
        compete for access to their underlying technology.</para>

        <figure>
          <title>Base Driver Types</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" contentdepth="1.465in" contentwidth="6.496in" fileref="base-driver-types.svg"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para>Base drivers discover physical devices using code not specified
        here (for example, through notifications from a device driver in
        native code) and then register corresponding Device services.</para>

        <para>When the hardware supports a discovery mechanism and reports a
        physical device, a Device service is then registered. Drivers
        supporting a discovery mechanism are called <emphasis>discovery base
        drivers</emphasis>.</para>

        <para>An example of a discovery base driver is a USB driver.
        Discovered USB devices are registered with the Framework as a generic
        USB Device service. The USB specification (see <xref linkend="i1270819"/> ) defines a tightly integrated discovery method.
        Further, devices are individually addressed; no provision exists for
        broadcasting a message to all devices attached to the USB bus.
        Therefore, there is no reason to expose the USB network itself;
        instead, a discovery base driver can register the individual devices
        as they are discovered.</para>

        <para>Not all technologies support a discovery mechanism. For example,
        most serial ports do not support detection, and it is often not even
        possible to detect whether a device is attached to a serial
        port.</para>

        <para>Although each driver bundle should perform discovery on its own,
        a driver for a non-discoverable serial port requires external help -
        either through a user interface or by allowing the Configuration Admin
        service to configure it.</para>

        <para>It is possible for the driver bundle to combine automatic
        discovery of Plug and Play-compliant devices with manual configuration
        when non-compliant devices are plugged in.</para>
      </section>

      <section>
        <title>Refining Drivers</title>

        <para>The second category of device drivers are called
        <emphasis>refining drivers</emphasis>. Refining drivers provide a
        refined view of a physical device that is already represented by
        another Device service registered with the Framework. Refining drivers
        register a Driver service with the Framework. This Driver service is
        used by the device manager to attach the refining driver to a less
        refined Device service that is registered as a result of events within
        the Framework itself.</para>

        <figure>
          <title>Refining Driver Diagram</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" contentdepth="1.365in" contentwidth="6.496in" fileref="refining-driver.svg"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para>An example of a refining driver is a mouse driver, which is
        attached to the generic USB Device service representing a physical
        mouse. It then registers a new Device service which represents it as a
        Mouse service, defined elsewhere.</para>

        <para>The majority of drivers fall into the refining driver
        type.</para>
      </section>

      <section>
        <title>Network Drivers</title>

        <para>An Internet Protocol (IP) capable network such as Ethernet
        supports individually addressable devices and allows broadcasts, but
        does not define an intrinsic discovery protocol. In this case, the
        entire network should be exposed as a single Device service.</para>

        <figure>
          <title>Network Driver diagram</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" contentdepth="1.906in" contentwidth="6.496in" fileref="network-driver.svg"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section xml:id="i1271466">
        <title>Composite Drivers</title>

        <para>Complex devices can often be broken down into several parts.
        Drivers that attach to a single service and then register multiple
        Device services are called <emphasis>composite drivers</emphasis>. For
        example, a USB speaker containing software-accessible buttons can be
        registered by its driver as two separate Device services: an Audio
        Device service and a Button Device service.</para>

        <figure>
          <title>Composite Driver structure</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" contentdepth="1.486in" contentwidth="6.496in" fileref="composite-driver.svg"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para>This approach can greatly reduce the number of interfaces
        needed, as well as enhance reusability.</para>
      </section>

      <section xml:id="i1284968">
        <title>Referring Drivers</title>

        <para>A referring driver is actually not a driver in the sense that it
        controls Device services. Instead, it acts as an intermediary to help
        locate the correct driver bundle. This process is explained in detail
        in <xref linkend="i1288442"/>.</para>

        <para>A referring driver implements the call to the
        <code>attach</code> method to inspect the Device service, and decides
        which Driver bundle would be able to attach to the device. This
        process can actually involve connecting to the physical device and
        communicating with it. The <code>attach</code> method then returns a
        <code>String</code> object that indicates the <code>DRIVER_ID</code>
        of another driver bundle. This process is called a referral.</para>

        <para>For example, a vendor ACME can implement one driver bundle that
        specializes in recognizing all of the devices the vendor produces. The
        referring driver bundle does not contain code to control the device -
        it contains only sufficient logic to recognize the assortment of
        devices. This referring driver can be small, yet can still identify a
        large product line. This approach can drastically reduce the amount of
        downloading and matching needed to find the correct driver
        bundle.</para>
      </section>

      <section>
        <title>Bridging Drivers</title>

        <para>A bridging driver registers a Device service from one device
        category but attaches it to a Device service from another device
        category.</para>

        <figure>
          <title>Bridging Driver Structure</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" contentdepth="1.476in" contentwidth="6.496in" fileref="bridging-driver.svg"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para>For example, USB to Ethernet bridges exist that allow connection
        to an Ethernet network through a USB device. In this case, the top
        level of the USB part of the Device service stack would be an Ethernet
        Device service. But the same Ethernet Device service can also be the
        bottom layer of an Ethernet layer of the Device service stack. A few
        layers up, a bridge could connect into yet another network.</para>

        <para>The stacking depth of Device services has no limit, and the same
        drivers could in fact appear at different levels in the same Device
        service stack. The graph of drivers-to-Device services roughly mirrors
        the hardware connections.</para>
      </section>

      <section xml:id="i1268244">
        <title>Multiplexing Drivers</title>

        <para>A <emphasis>multiplexing driver</emphasis> attaches a number of
        Device services and aggregates them in a new Device service.</para>

        <figure>
          <title>Multiplexing Driver Structure</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" contentdepth="1.681in" contentwidth="6.496in" fileref="multiplexing-driver.svg"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para>For example, assume that a system has a mouse on USB, a graphic
        tablet on a serial port, and a remote control facility. Each of these
        would be registered as a service with the Framework. A multiplexing
        driver can attach all three, and can merge the different positions in
        a central Cursor Position service.</para>
      </section>

      <section>
        <title>Pure Consuming Drivers</title>

        <para>A <emphasis>pure consuming driver</emphasis> bundle will attach
        to devices without registering a refined version.</para>

        <figure>
          <title>Pure Consuming Driver Structure</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" contentdepth="1.267in" contentwidth="6.496in" fileref="pure-consuming-driver.svg"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para>For example, one driver bundle could decide to handle all serial
        ports through <code>javax.comm</code> instead of registering them as
        services. When a USB serial port is plugged in, one or more Driver
        services are attached, resulting in a Device service stack with a
        Serial Port Device service. A pure consuming driver may then attach to
        the Serial Port Device service and register a new serial port with the
        <code>javax.comm.*</code> registry instead of the Framework service
        registry. This registration effectively transfers the device from the
        OSGi environment into another environment.</para>
      </section>

      <section>
        <title>Other Driver Types</title>

        <para>It should be noted that any bundle installed in the OSGi
        environment may get and use a Device service without having to
        register a Driver service.</para>

        <para>The following functionality is offered to those bundles that do
        register a Driver service and conform to the this
        specification:</para>

        <itemizedlist>
          <listitem>
            <para>The bundles can be installed and uninstalled on
            demand.</para>
          </listitem>

          <listitem>
            <para>Attachment to the Device service is only initiated after the
            winning the competition with other drivers.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section>
      <title>Driver Service Registration</title>

      <para>Drivers are recognized by registering a Driver service with the
      Framework. This event makes the device manager aware of the existence of
      the Driver service. A Driver service registration must have a <xref linkend="org.osgi.service.device.Constants.DRIVER_ID" xrefstyle="hyperlink"/> property whose value is a <code>String</code>
      object, uniquely identifying the driver to the device manager. The
      device manager must use the <code>DRIVER_ID</code> to prevent the
      installation of duplicate copies of the same driver bundle.</para>

      <para>Therefore, this <code>DRIVER_ID</code> must:</para>

      <itemizedlist>
        <listitem>
          <para>Depend only on the specific behavior of the driver, and thus
          be independent of unrelated aspects like its location or mechanism
          of downloading.</para>
        </listitem>

        <listitem>
          <para>Start with the reversed form of the domain name of the company
          that implements it: for example,
          <code>com.acme.widget.1.1</code>.</para>
        </listitem>

        <listitem>
          <para>Differ from the <code>DRIVER_ID</code> of drivers with
          different behavior. Thus, it must <emphasis>also</emphasis> be
          different for each revision of the same driver bundle so they may be
          distinguished.</para>
        </listitem>
      </itemizedlist>

      <para>When a new Driver service is registered, the Device Attachment
      Algorithm must be applied to each idle Device service. This requirement
      gives the new Driver service a chance to compete with other Driver
      services for attaching to idle devices. The techniques outlined in <xref linkend="i1313417"/> can provide significant shortcuts for this
      situation.</para>

      <para>As a result, the Driver service object can receive
      <code>match</code> and <code>attach</code> requests before the method
      which registered the service has returned.</para>

      <para>This specification does not define any method for new Driver
      services to <emphasis>steal</emphasis> already attached devices. Once a
      Device service has been attached by a Driver service, it can only be
      released by the Driver service itself.</para>
    </section>

    <section>
      <title>Driver Service Unregistration</title>

      <para>When a Driver service is unregistered, it must release all Device
      services to which it is attached. Thus, <emphasis>all</emphasis> its
      attached Device services become idle. The device manager must gather all
      of these idle Device services and try to re-attach them. This condition
      gives other Driver services a chance to take over the refinement of
      devices after the unregistering driver. The techniques outlined in <xref linkend="i1313417"/> can provide significant shortcuts for this
      situation.</para>

      <para>A Driver service that is installed by the device manager must
      remain registered as long as the driver bundle is active. Therefore, a
      Driver service should only be unregistered if the driver bundle is
      stopping, an occurrence which may precede its being uninstalled or
      updated. Driver services should thus not unregister in an attempt to
      minimize resource consumption. Such optimizations can easily introduce
      race conditions with the device manager.</para>
    </section>

    <section>
      <title>Driver Service Methods</title>

      <para>The <code>Driver</code> interface consists of the following
      methods:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.device.Driver.match-ServiceReference-" xrefstyle="hyperlink"/> - This method is called by the device
          manager to find out how well this Driver service matches the Device
          service as indicated by the <code>ServiceReference</code> argument.
          The value returned here is specific for a device category. If this
          Device service is of another device category, the value
          <code>Device.MATCH_NONE</code> must be returned. Higher values
          indicate a better match. For the exact matching algorithm, see <xref linkend="i1288442"/>.</para>

          <para>Driver match values and referrals must be deterministic, in
          that repeated calls for the same Device service must return the same
          results so that results can be cached by the device manager.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.device.Driver.attach-ServiceReference-" xrefstyle="hyperlink"/> - If the device manager decides that a
          Driver service should be attached to a Device service, it must call
          this method on the Driver service object. Once this method is
          called, the Device service is regarded as attached to that Driver
          service, and no other Driver service must be called to attach to the
          Device service. The Device service must remain
          <emphasis>owned</emphasis> by the Driver service until the Driver
          bundle is stopped. No <code>unattach</code> method exists.</para>

          <para>The <code>attach</code> method should return <code>null</code>
          when the Device service is correctly attached. A referring driver
          (see <xref linkend="i1284968"/> ) can return a <code>String</code>
          object that specifies the <code>DRIVER_ID</code> of a driver that
          can handle this Device service. In this case, the Device service is
          not attached and the device manager must attempt to install a Driver
          service with the same <code>DRIVER_ID</code> via a Driver Locator
          service. The attach method must be deterministic as described in the
          previous method.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Idle Driver Bundles</title>

      <para>An idle Driver bundle is a bundle with a registered Driver
      service, and is not attached to any Device service. Idle Driver bundles
      are consuming resources in the OSGi Framework. The device manager should
      uninstall bundles that it has installed and which are idle.</para>
    </section>
  </section>

  <section xml:id="i1292350">
    <title>Driver Locator Service</title>

    <para>The device manager must automatically install Driver bundles, which
    are obtained from Driver Locator services, when new Device services are
    registered.</para>

    <para>A Driver Locator service encapsulates the knowledge of how to fetch
    the Driver bundles needed for a specific Device service. This selection is
    made on the properties that are registered with a device: for example,
    <code>DEVICE_CATEGORY</code> and any other properties registered with the
    Device service registration.</para>

    <para>The purpose of the Driver Locator service is to separate the
    mechanism from the policy. The decision to install a new bundle is made by
    the device manager (the mechanism), but a Driver Locator service decides
    which bundle to install and from where the bundle is downloaded (the
    policy).</para>

    <para>Installing bundles has many consequences for the security of the
    system, and this process is also sensitive to network setup and other
    configuration details. Using Driver Locator services allows the Operator
    to choose a strategy that best fits its needs.</para>

    <para>Driver services are identified by the <code>DRIVER_ID</code>
    property. Driver Locator services use this particular ID to identify the
    bundles that can be installed. Driver ID properties have uniqueness
    requirements as specified in <xref linkend="service.device-device.service.registration"/>. This uniqueness
    allows the device manager to maintain a list of Driver services and
    prevent unnecessary installs.</para>

    <para>An OSGi Framework can have several different Driver Locator services
    installed. The device manager must consult all of them and use the
    combined result set, after pruning duplicates based on the
    <code>DRIVER_ID</code> values.</para>

    <section>
      <title>The DriverLocator Interface</title>

      <para>The <xref linkend="org.osgi.service.device.DriverLocator" xrefstyle="hyperlink"/> interface allows suitable driver bundles to be
      located, downloaded, and installed on demand, even when completely
      unknown devices are detected.</para>

      <para>It has the following methods:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.device.DriverLocator.findDrivers-Dictionary-" xrefstyle="hyperlink"/> - This method returns an array of driver IDs
          that potentially match a service described by the properties in the
          <code>Dictionary</code> object. A driver ID is the
          <code>String</code> object that is registered by a Driver service
          under the <code>DRIVER_ID</code> property.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.device.DriverLocator.loadDriver-String-" xrefstyle="hyperlink"/> - This method returns an
          <code>InputStream</code> object that can be used to download the
          bundle containing the Driver service as specified by the driver ID
          argument. If the Driver Locator service cannot download such a
          bundle, it should return <code>null</code>. Once this bundle is
          downloaded and installed in the Framework, it must register a Driver
          service with the <code>DRIVER_ID</code> property set to the value of
          the <code>String</code> argument.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>A Driver Example</title>

      <para>The following example shows a very minimal Driver service
      implementation. It consists of two classes. The first class is
      <code>SerialWidget</code>. This class tracks a single
      <code>WidgetDevice</code> from <xref linkend="i1306027"/>. It registers
      a <code>javax.comm.SerialPort</code> service, which is a general serial
      port specification that could also be implemented from other device
      categories like USB, a COM port, etc. It is created when the
      <code>SerialWidgetDriver</code> object is requested to attach a
      <code>WidgetDevice</code> by the device manager. It registers a new
      <code>javax.comm.SerialPort</code> service in its constructor.</para>

      <para>The <code>org.osgi.util.tracker.ServiceTracker</code> is extended
      to handle the Framework events that are needed to simplify tracking this
      service. The <code>removedService</code> method of this class is
      overridden to unregister the <code>SerialPort</code> when the underlying
      <code>WidgetDevice</code> is unregistered.</para>

      <programlisting>package com.acme.widget;
import org.osgi.service.device.*;
import org.osgi.framework.*;
import org.osgi.util.tracker.*;

class SerialWidget extends ServiceTracker
    implements javax.comm.SerialPort,
        org.osgi.service.device.Constants {
    ServiceRegistration registration;

    SerialWidget( BundleContext c, ServiceReference r ) {
        super( c, r, null );
        open(); 
    }

    public Object addingService( ServiceReference ref ) {
        WidgetDevice dev = (WidgetDevice) 
            context.getService( ref );
        registration = context.registerService( 
                javax.comm.SerialPort.class.getName(),
                this,
                null        );
            return dev;
    }

    public void removedService( ServiceReference ref,
        Object service ) {
        registration.unregister();
        context.ungetService(ref);
    }
    ... methods for javax.comm.SerialPort that are
    ... converted to underlying WidgetDevice
}</programlisting>

      <para>A <code>SerialWidgetDriver</code>object is registered with the
      Framework in the Bundle Activator start method under the
      <code>Driver</code> interface. The device manager must call the match
      method for each idle Device service that is registered. If it is chosen
      by the device manager to control this Device service, a new
      <code>SerialWidget</code> is created that offers serial port
      functionality to other bundles.</para>

      <programlisting>public class SerialWidgetDriver implementsDriver {
    BundleContext context;

    String        spec =
         "(&amp;"
        +" (objectclass=com.acme.widget.WidgetDevice)"
        +" (DEVICE_CATEGORY=WidgetDevice)"
        +" (com.acme.class=Serial)"
        +")";

    Filter        filter;

    SerialWidgetDriver( BundleContext context ) 
        throws Exception {
        this.context = context;
        filter = context.createFilter(spec);
    }
    public int match( ServiceReference d ) {
        if ( filter.match( d ) )
            return WidgetDevice.MATCH_CLASS;
        else
            return Device.MATCH_NONE;
    }
    public synchronized String attach(ServiceReference r){
        new SerialWidget( context, r );
    }
}</programlisting>
    </section>
  </section>

  <section xml:id="i1286950">
    <title>The Driver Selector Service</title>

    <para>The purpose of the Driver Selector service is to customize the
    selection of the best Driver service from a set of suitable Driver
    bundles. The device manager has a default algorithm as described in <xref linkend="i1288442"/>. When this algorithm is not sufficient and requires
    customizing by the operator, a bundle providing a Driver Selector service
    can be installed in the Framework. This service must be used by the device
    manager as the final arbiter when selecting the best match for a Device
    service.</para>

    <para>The Driver Selector service is a singleton; only one such service is
    recognized by the device manager. The Framework method
    <code>BundleContext.getServiceReference</code> must be used to obtain a
    Driver Selector service. In the erroneous case that multiple Driver
    Selector services are registered, the <code>service.ranking</code>
    property will thus define which service is actually used.</para>

    <para>A device manager implementation must invoke the method <xref linkend="org.osgi.service.device.DriverSelector.select-ServiceReference-Match---" xrefstyle="hyperlink"/>. This method receives a Service Reference to the
    Device service and an array of <xref linkend="org.osgi.service.device.Match" xrefstyle="hyperlink"/> objects.
    Each <code>Match</code> object contains a link to the
    <code>ServiceReference</code> object of a Driver service and the result of
    the match value returned from a previous call to
    <code>Driver.match</code>. The Driver Selector service should inspect the
    array of <code>Match</code> objects and use some means to decide which
    Driver service is best suited. The index of the best match should be
    returned. If none of the <code>Match</code> objects describe a possible
    Driver service, the implementation must return
    <code>DriverSelector.SELECT_NONE (-1)</code>.</para>
  </section>

  <section xml:id="i1258659">
    <title>Device Manager</title>

    <para>Device Access is controlled by the device manager in the background.
    The device manager is responsible for initiating all actions in response
    to the registration, modification, and unregistration of Device services
    and Driver services, using Driver Locator services and a Driver Selector
    service as helpers.</para>

    <para>The device manager detects the registration of Device services and
    coordinates their attachment with a suitable Driver service. Potential
    Driver services do not have to be active in the Framework to be eligible.
    The device manager must use Driver Locator services to find bundles that
    might be suitable for the detected Device service and that are not
    currently installed. This selection is done via a <code>DRIVER_ID</code>
    property that is unique for each Driver service.</para>

    <para>The device manager must install and start these bundles with the
    help of a Driver Locator service. This activity must result in the
    registration of one or more Driver services. All available Driver
    services, installed by the device manager and also others, then
    participate in a bidding process. The Driver service can inspect the
    Device service through its <code>ServiceReference</code> object to find
    out how well this Driver service matches the Device service.</para>

    <para>If a Driver Selector service is available in the Framework service
    registry, it is used to decide which of the eligible Driver services is
    the best match.</para>

    <para>If no Driver Selector service is available, the highest bidder must
    win, with tie breaks defined on the <code>service.ranking</code> and
    <code>service.id</code> properties. The selected Driver service is then
    asked to <code>attach</code> the Device service.</para>

    <para>If no Driver service is suitable, the Device service remains idle.
    When new Driver bundles are installed, these idle Device services must be
    reattached.</para>

    <para>The device manager must reattach a Device service if, at a later
    time, a Driver service is unregistered due to an uninstallation or update.
    At the same time, however, it should prevent superfluous and non-optimal
    reattachments. The device manager should also garbage-collect driver
    bundles it installed which are no longer used.</para>

    <para>The device manager is a singleton. Only one device manager may
    exist, and it must have no public interface.</para>

    <section>
      <title>Device Manager Startup</title>

      <para>To prevent race conditions during Framework startup, the device
      manager must monitor the state of Device services and Driver services
      immediately when it is started. The device manager must not, however,
      begin attaching Device services until the Framework has been fully
      started, to prevent superfluous or non-optimal attachments.</para>

      <para>The Framework has completed starting when the
      <code>FrameworkEvent.STARTED</code> event has been published.
      Publication of that event indicates that Framework has finished all its
      initialization and all bundles are started. If the device manager is
      started after the Framework has been initialized, it should detect the
      state of the Framework by examining the state of the system
      bundle.</para>
    </section>

    <section xml:id="i1288442">
      <title>The Device Attachment Algorithm</title>

      <para>A key responsibility of the device manager is to attach refining
      drivers to idle devices. The following diagram illustrates the device
      attachment algorithm.</para>

      <figure pgwide="1">
        <title>Device Attachment Algorithm</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="7.299in" contentwidth="7.027in" fileref="device-attachment-algorithm.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Legend</title>

      <table>
        <title>Driver attachment algorithm</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="6*"/>

          <thead>
            <row>
              <entry>Step</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><para>A</para></entry>

              <entry><para><code>DriverLocator.findDrivers</code> is called
              for each registered Driver Locator service, passing the
              properties of the newly detected Device service. Each method
              call returns zero or more <code>DRIVER_ID</code> values
              (identifiers of particular driver bundles).</para><para>If the
              <code>findDrivers</code> method throws an exception, it is
              ignored, and processing continues with the next Driver Locator
              service. See <xref linkend="i1313417"/> for further guidance on
              handling exceptions.</para></entry>
            </row>

            <row>
              <entry><para>B</para></entry>

              <entry><para>For each found <code>DRIVER_ID</code> that does not
              correspond to an already registered Driver service, the device
              manager calls <code>DriverLocator.loadDriver</code> to return an
              <code>InputStream</code> containing the driver bundle. Each call
              to <code>loadDriver</code> is directed to one of the Driver
              Locator services that mentioned the <code>DRIVER_ID</code> in
              step A. If the <code>loadDriver</code> method fails, the other
              Driver Locator objects are tried. If they all fail, the driver
              bundle is ignored.</para><para>If this method succeeds, the
              device manager installs and starts the driver bundle. Driver
              bundles must register their Driver services synchronously during
              bundle activation.</para></entry>
            </row>

            <row>
              <entry><para>C</para></entry>

              <entry><para>For each Driver service, except those on the
              exclusion list, call its <code>Driver.match</code> method,
              passing the <code>ServiceReference</code> object to the Device
              service.</para><para>Collect all successful matches - that is,
              those whose return values are greater than
              <code>Device.MATCH_NONE</code> - in a list of active matches. A
              match call that throws an exception is considered unsuccessful
              and is not added to the list.</para></entry>
            </row>

            <row>
              <entry><para>D</para></entry>

              <entry><para>If there is a Driver Selector service, the device
              manager calls the <code>DriverSelector.select</code> method,
              passing the array of active <code>Match</code>
              objects.</para><para>If the Driver Selector service returns the
              index of one of the <code>Match</code> objects from the array,
              its associated Driver service is selected for attaching the
              Device service. If the Driver Selector service returns
              <code>DriverSelector.SELECT_NONE</code>, no Driver service must
              be considered for attaching the Device service.</para><para>If
              the Driver Selector service throws an exception or returns an
              invalid result, the default selection algorithm is used.
              </para><para>Only one Driver Selector service is used, even if
              there is more than one registered in the Framework. See <xref linkend="i1286950"/>.</para></entry>
            </row>

            <row>
              <entry><para>E</para></entry>

              <entry><para>The winner is the one with the highest match value.
              Tie breakers are respectively: </para><itemizedlist>
                  <listitem>
                    <para>Highest <code>service.ranking</code>
                    property.</para>
                  </listitem>

                  <listitem>
                    <para>Lowest <code>service.id</code> property.</para>
                  </listitem>
                </itemizedlist></entry>
            </row>

            <row>
              <entry><para>F</para></entry>

              <entry><para>The selected Driver service's <code>attach</code>
              method is called. If the <code>attach</code> method returns
              <code>null</code>, the Device service has been successfully
              attached. If the attach method returns a <code>String</code>
              object, it is interpreted as a referral to another Driver
              service and processing continues at G. See <xref linkend="i1284968"/>.</para><para>If an exception is thrown, the
              Driver service has failed, and the algorithm proceeds to try
              another Driver service after excluding this one from further
              consideration at Step H.</para></entry>
            </row>

            <row>
              <entry><para>G</para></entry>

              <entry><para>The device manager attempts to load the referred
              driver bundle in a manner similar to Step B, except that it is
              unknown which Driver Locator service to use. Therefore, the
              <code>loadDriver</code> method must be called on each Driver
              Locator service until one succeeds (or they all fail). If one
              succeeds, the device manager installs and starts the driver
              bundle. The driver bundle must register a Driver service during
              its activation which must be added to the list of Driver
              services in this algorithm.</para></entry>
            </row>

            <row>
              <entry><para>H</para></entry>

              <entry><para>The referring driver bundle is added to the
              exclusion list. Because each new referral adds an entry to the
              exclusion list, which in turn disqualifies another driver from
              further matching, the algorithm cannot loop indefinitely. This
              list is maintained for the duration of this algorithm. The next
              time a new Device service is processed, the exclusion list
              starts out empty.</para></entry>
            </row>

            <row>
              <entry><para>I</para></entry>

              <entry><para>If no Driver service attached the Device service,
              the Device service is checked to see whether it implements the
              <code>Device</code> interface. If so, the
              <code>noDriverFound</code> method is called. Note that this
              action may cause the Device service to unregister and possibly a
              new Device service (or services) to be registered in its place.
              Each new Device service registration must restart the algorithm
              from the beginning.</para></entry>
            </row>

            <row>
              <entry><para>K</para></entry>

              <entry><para>Whether an attachment was successful or not, the
              algorithm may have installed a number of driver bundles. The
              device manager should remove any idle driver bundles that it
              installed.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="i1313417">
      <title>Optimizations</title>

      <para>Optimizations are explicitly allowed and even recommended for an
      implementation of a device manager. Implementations may use the
      following assumptions:</para>

      <itemizedlist>
        <listitem>
          <para>Driver match values and referrals must be deterministic, in
          that repeated calls for the same Device service must return the same
          results.</para>
        </listitem>

        <listitem>
          <para>The device manager may cache match values and referrals.
          Therefore, optimizations in the device attachment algorithm based on
          this assumption are allowed.</para>
        </listitem>

        <listitem>
          <para>The device manager may delay loading a driver bundle until it
          is needed. For example, a delay could occur when that
          <code>DRIVER_ID</code>'s match values are cached.</para>
        </listitem>

        <listitem>
          <para>The results of calls to <code>DriverLocator</code> and
          <code>DriverSelector</code> methods are not required to be
          deterministic, and must not be cached by the device manager.</para>
        </listitem>

        <listitem>
          <para>Thrown exceptions must not be cached. Exceptions are
          considered transient failures, and the device manager must always
          retry a method call even if it has thrown an exception on a previous
          invocation with the same arguments.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Driver Bundle Reclamation</title>

      <para>The device manager may remove driver bundles it has installed at
      any time, provided that all the Driver services in that bundle are idle.
      This recommended practice prevents unused driver bundles from
      accumulating over time. Removing driver bundles too soon, however, may
      cause unnecessary installs and associated delays when driver bundles are
      needed again.</para>

      <para>If a device manager implements driver bundle reclamation, the
      specified matching algorithm is not guaranteed to terminate unless the
      device manager takes reclamation into account.</para>

      <para>For example, assume that a new Device service triggers the
      attachment algorithm. A driver bundle recommended by a Driver Locator
      service is loaded. It does not match, so the Device service remains
      idle. The device manager is eager to reclaim space, and unloads the
      driver bundle. The disappearance of the Driver service causes the device
      manager to reattach idle devices. Because it has not kept a record of
      its previous activities, it tries to reattach the same device, which
      closes the loop.</para>

      <para>On systems where the device manager implements driver bundle
      reclamation, all refining drivers should be loaded through Driver
      Locator services. This recommendation is intended to prevent the device
      manager from erroneously uninstalling pre-installed driver bundles that
      cannot later be reinstalled when needed.</para>

      <para>The device manager can be updated or restarted. It cannot,
      however, rely on previously stored information to determine which driver
      bundles were pre-installed and which were dynamically installed and thus
      are eligible for removal. The device manager may persistently store
      cachable information for optimization, but must be able to cold start
      without any persistent information and still be able to manage an
      existing connection state, satisfying all of the requirements in this
      specification.</para>
    </section>

    <section>
      <title>Handling Driver Bundle Updates</title>

      <para>It is not straightforward to determine whether a driver bundle is
      being updated when the <code>UNREGISTER</code> event for a Driver
      service is received. In order to facilitate this distinction, the device
      manager should wait for a period of time after the unregistration for
      one of the following events to occur:</para>

      <itemizedlist>
        <listitem>
          <para>A <code>BundleEvent.UNINSTALLED</code> event for the driver
          bundle.</para>
        </listitem>

        <listitem>
          <para>A <code>ServiceEvent.REGISTERED</code> event for another
          Driver service registered by the driver bundle.</para>
        </listitem>
      </itemizedlist>

      <para>If the driver bundle is uninstalled, or if neither of the above
      events are received within the allotted time period, the driver is
      assumed to be inactive. The appropriate waiting period is
      implementation-dependent and will vary for different installations. As a
      general rule, this period should be long enough to allow a driver to be
      stopped, updated, and restarted under normal conditions, and short
      enough not to cause unnecessary delays in reattaching devices. The
      actual time should be configurable.</para>
    </section>

    <section>
      <title>Simultaneous Device Service and Driver Service
      Registration</title>

      <para>The device attachment algorithm may discover new driver bundles
      that were installed outside its direct control, which requires executing
      the device attachment algorithm recursively. However, in this case, the
      appearance of the new driver bundles should be queued until completion
      of the current device attachment algorithm.</para>

      <para>Only one device attachment algorithm may be in progress at any
      moment in time.</para>

      <para>The following example sequence illustrates this process when a
      Driver service is registered:</para>

      <itemizedlist>
        <listitem>
          <para>Collect the set of all idle devices.</para>
        </listitem>

        <listitem>
          <para>Apply the device attachment algorithm to each device in the
          set.</para>
        </listitem>

        <listitem>
          <para>If no Driver services were registered during the execution of
          the device attachment algorithm, processing terminates.</para>
        </listitem>

        <listitem>
          <para>Otherwise, restart this process.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>The device manager is the only privileged bundle in the Device
    Access specification and requires the
    <code>org.osgi.framework.AdminPermission</code> with the
    <code>LIFECYCLE</code> action to install and uninstall driver
    bundles.</para>

    <para>The device manager itself should be free from any knowledge of
    policies and should not actively set bundle permissions. Rather, if
    permissions must be set, it is up to the Management Agent to listen to
    synchronous bundle events and set the appropriate permissions.</para>

    <para>Driver Locator services can trigger the download of any bundle,
    because they deliver the content of a bundle to the privileged device
    manager and could potentially insert a Trojan horse into the environment.
    Therefore, Driver Locator bundles need the
    <code>ServicePermission[DriverLocator, REGISTER]</code> to register Driver
    Locator services, and the operator should exercise prudence in assigning
    this <code>ServicePermission</code>.</para>

    <para>Bundles with Driver Selector services only require
    <code>ServicePermission[DriverSelector, REGISTER]</code> to register the
    <code>DriverSelector</code> service. The Driver Selector service can play
    a crucial role in the selection of a suitable Driver service, but it has
    no means to define a specific bundle itself.</para>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.device" xml:id="org.osgi.service.device" xml:base="../../generated/javadoc/docbook/org.osgi.service.device.xml">
   <title>org.osgi.service.device</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.device-version">Version 1.1</releaseinfo>
      <edition xml:id="org.osgi.service.device-version.number">1.1</edition>
   </info>
   <para>
Device Access Package Version 1.1.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.device; version="[1.1,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.device; version="[1.1,1.2)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.device.Constants">
                  <code>Constants</code>
               </link> - 
This interface defines standard names for property keys associated with
 <link linkend="org.osgi.service.device.Device">Device</link> and <link linkend="org.osgi.service.device.Driver">Driver</link> services.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.device.Device">
                  <code>Device</code>
               </link> - 
 Interface for identifying device services.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.device.Driver">
                  <code>Driver</code>
               </link> - 
A <code>Driver</code> service object must be registered by each Driver bundle
 wishing to attach to Device services provided by other drivers.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.device.DriverLocator">
                  <code>DriverLocator</code>
               </link> - 
A Driver Locator service can find and load device driver bundles given a
 property set.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.device.DriverSelector">
                  <code>DriverSelector</code>
               </link> - 
When the device manager detects a new Device service, it calls all registered
 Driver services to determine if anyone matches the Device service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.device.Match">
                  <code>Match</code>
               </link> - 
Instances of <code>Match</code> are used in the
 <link linkend="org.osgi.service.device.DriverSelector.select-ServiceReference-Match---">DriverSelector.select(ServiceReference, Match[])</link> method to identify
 Driver services matching a Device service.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="Constants" xml:id="org.osgi.service.device.Constants">
      <title>public interface Constants</title>
      <para>
This interface defines standard names for property keys associated with
 <link linkend="org.osgi.service.device.Device">Device</link> and <link linkend="org.osgi.service.device.Driver">Driver</link> services.
 
 </para>
      <para>
 The values associated with these keys are of type <code>java.lang.String</code>,
 unless otherwise stated.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.device.Device">Device</link>, <link linkend="org.osgi.service.device.Driver">Driver</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>No Implement</title>
         <para>Consumers of this API must not implement this interface</para>
      </formalpara>
      <section role="field" xreflabel="DEVICE_CATEGORY" xml:id="org.osgi.service.device.Constants.DEVICE_CATEGORY">
         <title>public static final String DEVICE_CATEGORY = "DEVICE_CATEGORY"</title>
         <para>
Property (named "DEVICE_CATEGORY") containing a human readable
 description of the device categories implemented by a device. This
 property is of type <code>String[]</code>
         </para>
         <para>
 Services registered with this property will be treated as devices and
 discovered by the device manager</para>
      </section>
      <section role="field" xreflabel="DEVICE_DESCRIPTION" xml:id="org.osgi.service.device.Constants.DEVICE_DESCRIPTION">
         <title>public static final String DEVICE_DESCRIPTION = "DEVICE_DESCRIPTION"</title>
         <para>
Property (named "DEVICE_DESCRIPTION") containing a human
 readable string describing the actual hardware device.
   </para>
      </section>
      <section role="field" xreflabel="DEVICE_SERIAL" xml:id="org.osgi.service.device.Constants.DEVICE_SERIAL">
         <title>public static final String DEVICE_SERIAL = "DEVICE_SERIAL"</title>
         <para>
Property (named "DEVICE_SERIAL") specifying a device's serial
 number.
   </para>
      </section>
      <section role="field" xreflabel="DRIVER_ID" xml:id="org.osgi.service.device.Constants.DRIVER_ID">
         <title>public static final String DRIVER_ID = "DRIVER_ID"</title>
         <para>
Property (named "DRIVER_ID") identifying a driver.
 
 </para>
         <para>
 A <code>DRIVER_ID</code> should start with the reversed domain name of the
 company that implemented the driver (e.g., <code>com.acme</code>), and must
 meet the following requirements:
 
 </para>
         <itemizedlist>
            <listitem>
               <para>It must be independent of the location from where it is obtained.</para>
            </listitem>
            <listitem>
               <para>It must be independent of the <link linkend="org.osgi.service.device.DriverLocator">DriverLocator</link> service that
 downloaded it.</para>
            </listitem>
            <listitem>
               <para>It must be unique.</para>
            </listitem>
            <listitem>
               <para>It must be different for different revisions of the same driver.</para>
            </listitem>
         </itemizedlist>
         <para>
 This property is mandatory, i.e., every <code>Driver</code> service must be
 registered with it.</para>
      </section>
   </section>
   <section role="class" xreflabel="Device" xml:id="org.osgi.service.device.Device">
      <title>public interface Device</title>
      <para>
 Interface for identifying device services.
 
 </para>
      <para>
 A service must implement this interface or use the
 <link linkend="org.osgi.service.device.Constants.DEVICE_CATEGORY">Constants.DEVICE_CATEGORY</link> registration property to indicate that it
 is a device. Any services implementing this interface or registered with the
 <code>DEVICE_CATEGORY</code> property will be discovered by the device manager.
 
 </para>
      <para>
 Device services implementing this interface give the device manager the
 opportunity to indicate to the device that no drivers were found that could
 (further) refine it. In this case, the device manager calls the
 <link linkend="org.osgi.service.device.Device.noDriverFound--">noDriverFound()</link> method on the <code>Device</code> object.
 
 </para>
      <para>
 Specialized device implementations will extend this interface by adding
 methods appropriate to their device category to it.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.device.Driver">Driver</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="MATCH_NONE" xml:id="org.osgi.service.device.Device.MATCH_NONE">
         <title>public static final int MATCH_NONE = 0</title>
         <para>
Return value from <link linkend="org.osgi.service.device.Driver.match-ServiceReference-">Driver.match(ServiceReference)</link> indicating that
 the driver cannot refine the device presented to it by the device
 manager.
 
 The value is zero.
   </para>
      </section>
      <section role="method" xreflabel="noDriverFound()" xml:id="org.osgi.service.device.Device.noDriverFound--">
         <title>public void noDriverFound()</title>
         <para role="description">
Indicates to this <code>Device</code> object that the device manager has
 failed to attach any drivers to it.
 
 </para>
         <para>
 If this <code>Device</code> object can be configured differently, the driver
 that registered this <code>Device</code> object may unregister it and register
 a different Device service instead.</para>
      </section>
   </section>
   <section role="class" xreflabel="Driver" xml:id="org.osgi.service.device.Driver">
      <title>public interface Driver</title>
      <para>
A <code>Driver</code> service object must be registered by each Driver bundle
 wishing to attach to Device services provided by other drivers. For each
 newly discovered <link linkend="org.osgi.service.device.Device">Device</link> object, the device manager enters a bidding
 phase. The <code>Driver</code> object whose <link linkend="org.osgi.service.device.Driver.match-ServiceReference-">match(ServiceReference)</link>
 method bids the highest for a particular <code>Device</code> object will be
 instructed by the device manager to attach to the <code>Device</code> object.
   </para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.device.Device">Device</link>, <link linkend="org.osgi.service.device.DriverLocator">DriverLocator</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="attach(ServiceReference)" xml:id="org.osgi.service.device.Driver.attach-ServiceReference-">
         <title>public String attach(ServiceReference reference) throws Exception</title>
         <formalpara role="parameter">
            <title>reference</title>
            <para>the <code>ServiceReference</code> object of the device to
        attach to</para>
         </formalpara>
         <para role="description">
Attaches this Driver service to the Device service represented by the
 given <code>ServiceReference</code> object.
 
 </para>
         <para>
 A return value of <code>null</code> indicates that this Driver service has
 successfully attached to the given Device service. If this Driver service
 is unable to attach to the given Device service, but knows of a more
 suitable Driver service, it must return the <code>DRIVER_ID</code> of that
 Driver service. This allows for the implementation of referring drivers
 whose only purpose is to refer to other drivers capable of handling a
 given Device service.
 
 </para>
         <para>
 After having attached to the Device service, this driver may register the
 underlying device as a new service exposing driver-specific
 functionality.
 
 </para>
         <para>
 This method is called by the device manager.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>null</code> if this Driver service has successfully attached to
         the given Device service, or the <code>DRIVER_ID</code> of a more
         suitable driver</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– if the driver cannot attach to the given
         device and does not know of a more suitable driver   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="match(ServiceReference)" xml:id="org.osgi.service.device.Driver.match-ServiceReference-">
         <title>public int match(ServiceReference reference) throws Exception</title>
         <formalpara role="parameter">
            <title>reference</title>
            <para>the <code>ServiceReference</code> object of the device to
        match</para>
         </formalpara>
         <para role="description">
Checks whether this Driver service can be attached to the Device service.
 
 The Device service is represented by the given <link linkend="org.osgi.framework.ServiceReference">ServiceReference</link>
 and returns a value indicating how well this driver can support the given
 Device service, or <link linkend="org.osgi.service.device.Device.MATCH_NONE">Device.MATCH_NONE</link> if it cannot support the
 given Device service at all.
 
 </para>
         <para>
 The return value must be one of the possible match values defined in the
 device category definition for the given Device service, or
 <code>Device.MATCH_NONE</code> if the category of the Device service is not
 recognized.
 
 </para>
         <para>
 In order to make its decision, this Driver service may examine the
 properties associated with the given Device service, or may get the
 referenced service object (representing the actual physical device) to
 talk to it, as long as it ungets the service and returns the physical
 device to a normal state before this method returns.
 
 </para>
         <para>
 A Driver service must always return the same match code whenever it is
 presented with the same Device service.
 
 </para>
         <para>
 The match function is called by the device manager during the matching
 process.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>value indicating how well this driver can support the given
         Device service, or <code>Device.MATCH_NONE</code> if it cannot support
         the Device service at all</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– if this Driver service cannot examine the
         Device service   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="DriverLocator" xml:id="org.osgi.service.device.DriverLocator">
      <title>public interface DriverLocator</title>
      <para>
A Driver Locator service can find and load device driver bundles given a
 property set. Each driver is represented by a unique <code>DRIVER_ID</code>.
 </para>
      <para>
 Driver Locator services provide the mechanism for dynamically downloading new
 device driver bundles into an OSGi environment. They are supplied by
 providers and encapsulate all provider-specific details related to the
 location and acquisition of driver bundles.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.device.Driver">Driver</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="findDrivers(Dictionary)" xml:id="org.osgi.service.device.DriverLocator.findDrivers-Dictionary-">
         <title>public String[] findDrivers(Dictionary props)</title>
         <formalpara role="parameter">
            <title>props</title>
            <para>the properties of the device for which a driver is sought</para>
         </formalpara>
         <para role="description">
Returns an array of <code>DRIVER_ID</code> strings of drivers capable of
 attaching to a device with the given properties.
 
 </para>
         <para>
 The property keys in the specified <code>Dictionary</code> objects are
 case-insensitive.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>array of driver <code>DRIVER_ID</code> strings of drivers capable of
         attaching to a Device service with the given properties, or
         <code>null</code> if this Driver Locator service does not know of any
         such drivers</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="loadDriver(String)" xml:id="org.osgi.service.device.DriverLocator.loadDriver-String-">
         <title>public InputStream loadDriver(String id) throws IOException</title>
         <formalpara role="parameter">
            <title>id</title>
            <para>the <code>DRIVER_ID</code> of the driver that needs to be installed.</para>
         </formalpara>
         <para role="description">
Get an <code>InputStream</code> from which the driver bundle providing a
 driver with the giving <code>DRIVER_ID</code> can be installed.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An <code>InputStream</code> object from which the driver bundle can be
         installed or <code>null</code> if the driver with the given ID cannot
         be located</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– the input stream for the bundle cannot be
         created   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="DriverSelector" xml:id="org.osgi.service.device.DriverSelector">
      <title>public interface DriverSelector</title>
      <para>
When the device manager detects a new Device service, it calls all registered
 Driver services to determine if anyone matches the Device service. If at
 least one Driver service matches, the device manager must choose one. If
 there is a Driver Selector service registered with the Framework, the device
 manager will ask it to make the selection. If there is no Driver Selector
 service, or if it returns an invalid result, or throws an <code>Exception</code>,
 the device manager uses the default selection strategy.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="SELECT_NONE" xml:id="org.osgi.service.device.DriverSelector.SELECT_NONE">
         <title>public static final int SELECT_NONE = -1</title>
         <para>
Return value from <code>DriverSelector.select</code>, if no Driver service
 should be attached to the Device service. The value is -1.
   </para>
      </section>
      <section role="method" xreflabel="select(ServiceReference,Match[])" xml:id="org.osgi.service.device.DriverSelector.select-ServiceReference-Match---">
         <title>public int select(ServiceReference reference,Match[] matches)</title>
         <formalpara role="parameter">
            <title>reference</title>
            <para>the <code>ServiceReference</code> object of the Device
        service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>matches</title>
            <para>the array of all non-zero matches.</para>
         </formalpara>
         <para role="description">
Select one of the matching Driver services. The device manager calls this
 method if there is at least one driver bidding for a device. Only Driver
 services that have responded with nonzero (not <link linkend="org.osgi.service.device.Device.MATCH_NONE">Device.MATCH_NONE</link>)
 <code/> match values will be included in the list.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>index into the array of <code>Match</code> objects, or
         <code>SELECT_NONE</code> if no Driver service should be attached</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Match" xml:id="org.osgi.service.device.Match">
      <title>public interface Match</title>
      <para>
Instances of <code>Match</code> are used in the
 <link linkend="org.osgi.service.device.DriverSelector.select-ServiceReference-Match---">DriverSelector.select(ServiceReference, Match[])</link> method to identify
 Driver services matching a Device service.
   </para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.device.DriverSelector">DriverSelector</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>No Implement</title>
         <para>Consumers of this API must not implement this interface</para>
      </formalpara>
      <section role="method" xreflabel="getDriver()" xml:id="org.osgi.service.device.Match.getDriver--">
         <title>public ServiceReference getDriver()</title>
         <para role="description">
Return the reference to a Driver service.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>ServiceReference</code> object to a Driver service.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMatchValue()" xml:id="org.osgi.service.device.Match.getMatchValue--">
         <title>public int getMatchValue()</title>
         <para role="description">
Return the match value of this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the match value returned by this Driver service.</para>
         </formalpara>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i1424268"><title>Java Communications
      API</title>http://www.oracle.com/technetwork/java/index-jsp-141752.html</bibliomixed>

      <bibliomixed xml:id="i1270819"><title>USB
      Specification</title>http://www.usb.org</bibliomixed>

      <bibliomixed xml:id="i1271836"><title>Universal Plug and
      Play</title>http://www.upnp.org</bibliomixed>

      <bibliomixed xml:id="i1271860"><title>Jini, Service Discovery and
      Usage</title>http://en.wikipedia.org/wiki/Jini</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="104" revision="$Id: 5d9342abbb7bcdfccda5d7b35d027ce8ab2169b9 $" version="5" xml:id="service.cm" xml:base="../104/service.cm.xml">
  <title>Configuration Admin Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.cm-version" linkend="org.osgi.service.cm"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The Configuration Admin service is an important aspect of the
    deployment of an OSGi framework. It allows an Operator to configure
    deployed bundles. Configuring is the process of defining the configuration
    data for bundles and assuring that those bundles receive that data when
    they are active in the OSGi framework.</para>

    <figure>
      <title>Configuration Admin Service Overview</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.049in" contentwidth="4.917in" fileref="cm-classes.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <section>
      <title>Essentials</title>

      <para>The following requirements and patterns are associated with the
      Configuration Admin service specification:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Local Configuration</emphasis> - The Configuration
          Admin service must support bundles that have their own user
          interface to change their configurations.</para>
        </listitem>

        <listitem>
          <para><emphasis>Reflection</emphasis> - The Configuration Admin
          service must be able to deduce the names and types of the needed
          configuration data.</para>
        </listitem>

        <listitem>
          <para><emphasis>Legacy</emphasis> - The Configuration Admin service
          must support configuration data of existing entities (such as
          devices).</para>
        </listitem>

        <listitem>
          <para><emphasis>Object Oriented</emphasis> - The Configuration Admin
          service must support the creation and deletion of instances of
          configuration information so that a bundle can create the
          appropriate number of services under the control of the
          Configuration Admin service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Embedded Devices</emphasis> - The Configuration
          Admin service must be deployable on a wide range of platforms. This
          requirement means that the interface should not assume file storage
          on the platform. The choice to use file storage should be left to
          the implementation of the Configuration Admin service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Remote versus Local Management</emphasis> - The
          Configuration Admin service must allow for a remotely managed OSGi
          framework, and must not assume that con-figuration information is
          stored locally. Nor should it assume that the Configuration Admin
          service is always done remotely. Both implementation approaches
          should be viable.</para>
        </listitem>

        <listitem>
          <para><emphasis>Availability</emphasis> - The OSGi environment is a
          dynamic environment that must run continuously (24/7/365).
          Configuration updates must happen dynamically and should not require
          restarting of the system or bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Immediate Response</emphasis> - Changes in
          configuration should be reflected immediately.</para>
        </listitem>

        <listitem>
          <para><emphasis>Execution Environment</emphasis> - The Configuration
          Admin service will not require more than an environment that
          fulfills the minimal execution requirements.</para>
        </listitem>

        <listitem>
          <para><emphasis>Communications</emphasis> - The Configuration Admin
          service should not assume "always-on" connectivity, so the API is
          also applicable for mobile applications in cars, phones, or
          boats.</para>
        </listitem>

        <listitem>
          <para><emphasis>Extendability</emphasis> - The Configuration Admin
          service should expose the process of configuration to other bundles.
          This exposure should at a minimum encompass initiating an update,
          removing certain configuration properties, adding properties, and
          modifying the value of properties potentially based on existing
          property or service values.</para>
        </listitem>

        <listitem>
          <para><emphasis>Complexity Trade-offs</emphasis> - Bundles in need
          of configuration data should have a simple way of obtaining it. Most
          bundles have this need and the code to accept this data.
          Additionally, updates should be simple from the perspective of the
          receiver.</para>

          <para>Trade-offs in simplicity should be made at the expense of the
          bundle implementing the Configuration Admin service and in favor of
          bundles that need configuration information. The reason for this
          choice is that normal bundles will outnumber Configuration Admin
          bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Regions</emphasis> - It should be possible to create
          groups of bundles and a manager in a single system that share
          configuration data that is not accessible outside the region.</para>
        </listitem>

        <listitem>
          <para><emphasis>Shared Information</emphasis> - It should be
          possible to share configuration data between bundles.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Configuration information</emphasis> - The
          information needed by a bundle before it can provide its intended
          functionality.</para>
        </listitem>

        <listitem>
          <para><emphasis>Configuration dictionary</emphasis> - The
          configuration information when it is passed to the target service.
          It consists of a <code>Dictionary</code> object with a number of
          properties and identifiers.</para>
        </listitem>

        <listitem>
          <para><emphasis>Configuring Bundle</emphasis> - A bundle that
          modifies the configuration information through the Configuration
          Admin service. This bundle is either a management bundle or the
          bundle for which the configuration information is intended.</para>
        </listitem>

        <listitem>
          <para><emphasis>Configuration Target</emphasis> - The target service
          that will receive the configuration information. For services, there
          are two types of targets: <code>ManagedServiceFactory</code> or
          <code>ManagedService</code> objects.</para>
        </listitem>

        <listitem>
          <para><emphasis>Configuration Admin Service</emphasis> - This
          service is responsible for supplying configuration target bundles
          with their configuration information. It maintains a database with
          configuration information, keyed on the <code>service.pid</code> of
          configuration target services. These services receive their
          configuration dictionary/dictionaries when they are registered with
          the Framework. Configurations can be modified or extended using
          Configuration Plugin services before they reach the target
          bundle.</para>
        </listitem>

        <listitem>
          <para><emphasis>Managed Service</emphasis> - A Managed Service
          represents a client of the Configuration Admin service, and is thus
          a configuration target. Bundles should register a Managed Service to
          receive the configuration data from the Configuration Admin service.
          A Managed Service adds one or more unique <code>service.pid</code>
          service properties as a primary key for the configuration
          information.</para>
        </listitem>

        <listitem>
          <para><emphasis>Managed Service Factory</emphasis> - A Managed
          Service Factory can receive a number of configuration dictionaries
          from the Configuration Admin service, and is thus also a
          configuration target service. It should register with one or more
          <code>service.pid</code> strings and receives zero or more
          configuration dictionaries. Each dictionary has its own PID that is
          distinct from the factory PID.</para>
        </listitem>

        <listitem>
          <para><emphasis>Configuration Object</emphasis> - Implements the
          <code>Configuration</code> interface and contains the configuration
          dictionary for a Managed Service or one of the configuration
          dictionaries for a Managed Service Factory. These objects are
          manipulated by configuring bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Configuration Plugin Services</emphasis> -
          Configuration Plugin services are called before the configuration
          dictionary is given to the configuration targets. The plug-in can
          modify the configuration dictionary, which is passed to the
          Configuration Target.</para>
        </listitem>
      </itemizedlist>

      <figure xml:id="i1817860">
        <title>Overall Service Diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.962in" contentwidth="6.230in" fileref="overall.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Synopsis</title>

      <para>This specification is based on the concept of a Configuration
      Admin service that manages the configuration of an OSGi framework. It
      maintains a database of <code>Configuration</code> objects, locally or
      remotely. This service monitors the service registry and provides
      configuration information to services that are registered with a
      <code>service.pid</code> property, the Persistent IDentity (PID), and
      implement one of the following interfaces:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Managed Service</emphasis> - A service registered
          with this interface receives its <emphasis>configuration
          dictionary</emphasis> from the database or receives
          <code>null</code> when no such configuration exists.</para>
        </listitem>

        <listitem>
          <para><emphasis>Managed Service Factory</emphasis> - Services
          registered with this interface can receive several configuration
          dictionaries when registered. The database contains zero or more
          configuration dictionaries for this service. Each configuration
          dictionary is given sequentially to the service.</para>
        </listitem>
      </itemizedlist>

      <para>The database can be manipulated either by the Management Agent or
      bundles that configure themselves. Other parties can provide
      Configuration Plugin services. Such services participate in the
      configuration process. They can inspect the configuration dictionary and
      modify it before it reaches the target service.</para>
    </section>
  </section>

  <section xml:id="i1358725">
    <title>Configuration Targets</title>

    <para>One of the more complicated aspects of this specification is the
    subtle distinction between the <code>ManagedService</code> and
    <code>ManagedServiceFactory</code> classes. Both receive configuration
    information from the Configuration Admin service and are treated similarly
    in most respects. Therefore, this specification refers to
    <emphasis>configuration targets</emphasis> or simply
    <emphasis>targets</emphasis> when the distinction is irrelevant.</para>

    <para>The difference between these types is related to the cardinality of
    the configuration dictionary. A Managed Service is used when an existing
    entity needs a configuration dictionary. Thus, a one-to-one relationship
    always exists between the configuration dictionary and the configurable
    entity in the Managed Service. There can be multiple Managed Service
    targets registered with the same PID but a Managed Service can only
    configure a single entity in each given Managed Service.</para>

    <para>A Managed Service Factory is used when part of the configuration is
    to define <emphasis>how many instances are required</emphasis> for a given
    Managed Service Factory. A management bundle can create, modify, and
    delete any number of instances for a Managed Service Factory through the
    Configuration Admin service. Each instance is configured by a single
    <code>Configuration</code> object. Therefore, a Managed Service Factory
    can have multiple associated <code>Configuration</code> objects.</para>

    <figure>
      <title>Differentiation of ManagedService and ManagedServiceFactory
      Classes</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.205in" contentwidth="4.917in" fileref="ms-v-msf.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>A Configuration target updates the target when the underlying
    Configuration object is created, updated, or deleted. However, it is not
    called back when the Configuration Admin service is shutdown or the
    service is ungotten.</para>

    <para>To summarize:</para>

    <itemizedlist>
      <listitem>
        <para>A <emphasis>Managed Service</emphasis> must receive a single
        configuration dictionary when it is registered or when its
        configuration is modified.</para>
      </listitem>

      <listitem>
        <para>A <emphasis>Managed Service Factory</emphasis> must receive from
        zero to <emphasis>n</emphasis> configuration dictionaries when it
        registers, depending on the current configuration. The Managed Service
        Factory is informed of configuration dictionary changes:
        modifications, creations, and deletions.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="i1233800">
    <title>The Persistent Identity</title>

    <para>A crucial concept in the Configuration Admin service specification
    is the Persistent IDentity (PID) as defined in the Framework's service
    layer. Its purpose is to act as a primary key for objects that need a
    configuration dictionary. The name of the service property for PID is
    defined in the Framework in
    <code>org.osgi.framework.Constants.SERVICE_PID</code>.</para>

    <para>The Configuration Admin service requires the use of one or more PIDs
    with Managed Service and Managed Service Factory registrations because it
    associates its configuration data with PIDs.</para>

    <para>A service can register with multiple PIDs and PIDs can be shared
    between multiple targets (both Managed Service and Managed Service Factory
    targets) to receive the same information. If PIDs are to be shared between
    Bundles then the location of the Configuration must be a multi-location,
    see <xref linkend="service.cm-location.binding"/>.</para>

    <para>The Configuration Admin must track the configuration targets on
    their actual PID. That is, if the <code>service.pid</code> service
    property is modified then the Configuration Admin must treat it as if the
    service was unregistered and then re-registered with the new PID.</para>

    <section>
      <title>PID Syntax</title>

      <para>PIDs are intended for use by other bundles, not by people, but
      sometimes the user is confronted with a PID. For example, when
      installing an alarm system, the user needs to identify the different
      components to a wiring application. This type of application exposes the
      PID to end users.</para>

      <para>PIDs should follow the symbolic-name syntax, which uses a very
      restricted character set. The following sections define some schemes for
      common cases. These schemes are not required, but bundle developers are
      urged to use them to achieve consistency.</para>

      <section>
        <title>Local Bundle PIDs</title>

        <para>As a convention, descriptions starting with the bundle identity
        and a full stop (<code>'.' \u002E</code>) are reserved for a bundle.
        As an example, a PID of <code>"65.536"</code> would belong to the
        bundle with a bundle identity of 65.</para>
      </section>

      <section>
        <title>Software PIDs</title>

        <para>Configuration target services that are singletons can use a Java
        package name they own as the PID (the reverse domain name scheme) as
        long as they do not use characters outside the basic ASCII set. As an
        example, the PID named <code>com.acme.watchdog</code> would represent
        a Watchdog service from the ACME company.</para>
      </section>

      <section>
        <title>Devices</title>

        <para>Devices are usually organized on buses or networks. The identity
        of a device, such as a unique serial number or an address, is a good
        component of a PID. The format of the serial number should be the same
        as that printed on the housing or box, to aid in recognition.</para>

        <table pgwide="1">
          <title>Schemes for Device-Oriented PID Names</title>

          <tgroup cols="4">
            <colspec colnum="1" colwidth="1*"/>

            <colspec colnum="2" colwidth="3*"/>

            <colspec colnum="3" colwidth="4*"/>

            <colspec colnum="4" colwidth="4*"/>

            <thead>
              <row>
                <entry>Bus</entry>

                <entry>Example</entry>

                <entry>Format</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><code>USB</code></entry>

                <entry><code>USB.0123-0002-9909873</code></entry>

                <entry><para>idVendor (hex 4)</para> <para>idProduct (hex
                4)</para> <para>iSerialNumber (decimal)</para></entry>

                <entry><para>Universal Serial Bus. Use the standard device
                descriptor.</para></entry>
              </row>

              <row>
                <entry><code>IP</code></entry>

                <entry><code>IP.172.16.28.21</code></entry>

                <entry><para>IP nr (dotted decimal)</para></entry>

                <entry><para>Internet Protocol</para></entry>
              </row>

              <row>
                <entry><code>802</code></entry>

                <entry><code>802-00:60:97:00:9A:56</code></entry>

                <entry><para>MAC address with : separators</para></entry>

                <entry><para>IEEE 802 MAC address (Token Ring,
                Ethernet,...)</para></entry>
              </row>

              <row>
                <entry><code>ONE</code></entry>

                <entry><code>ONE.06-00000021E461</code></entry>

                <entry><para>Family (hex 2) and serial number including CRC
                (hex 6)</para></entry>

                <entry><para>1-wire bus of Dallas Semiconductor</para></entry>
              </row>

              <row>
                <entry><code>COM</code></entry>

                <entry><code>COM.krups-brewer-12323</code></entry>

                <entry><para>serial number or type name of
                device</para></entry>

                <entry><para>Serial ports</para></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
    </section>

    <section xml:id="service.cm-targeted.pids">
      <title>Targeted PIDs</title>

      <para>PIDs are defined as primary keys for the configuration object; any
      target that uses the PID in its service registration (and has the proper
      permissions if security is on) will receive the configuration associated
      with it, regardless of the bundle that registered the target service.
      Though in general the PID is designed to ignore the bundle, there are a
      number of cases where the bundle becomes relevant. The most typical case
      is where a bundle is available in different versions. Each version will
      request the same PID and will get therefore configured
      identically.</para>

      <para><emphasis>Targeted PIDs</emphasis> are specially formatted PIDs
      that are interpreted by the Configuration Admin service. Targeted PIDs
      work both as a normal Managed Service PID and as a Managed Service
      Factory PID. In the case of factories, the targeted PID is the Factory
      PID since the other PID is chosen by CM for each instance.</para>

      <para>The target PID scopes the applicability of the PID to a limited
      set of target bundles. The syntax of a target pid is:</para>

      <programlisting>target-pid  ::=  PID 
    ( '|' symbolic-name ( '|' version ( '|' location )? )? )?</programlisting>

      <para>Targets never register with a target PID, target PIDs should only
      be used when creating, getting, or deleting a Configuration through the
      Configuration Admin service. The target PID is still the primary key of
      the Configuration and is thus in itself a PID. The distinction is only
      made when the Configuration Admin must update a target service. Instead
      of using the non-target PID as the primary key it must first search if
      there exists a target PID in the Configuration store that matches the
      requested target PID.</para>

      <para>When a target registers and needs to be updated the Configuration
      Admin must first find the Configuration with the <emphasis>best
      matching</emphasis> PID. It must logically take the requested PID,
      append it with the bundle symbolic name, the bundle version, and the
      bundle location. The version must be formatted canonically, that is,
      according to the <code>toString()</code> method of the
      <code>Version</code> class. The rules for best matching are then as
      follows:</para>

      <para>Look for a Configuration, in the given order, with a key
      of:</para>

      <programlisting>    &lt;pid&gt;|&lt;bsn&gt;|&lt;version&gt;|&lt;location&gt;
    &lt;pid&gt;|&lt;bsn&gt;|&lt;version&gt;
    &lt;pid&gt;|&lt;bsn&gt;
    &lt;pid&gt;</programlisting>

      <para>For example:</para>

      <programlisting>    com.example.web.WebConf|com.acme.example|3.2.0|http://www.xyz.com/acme.jar
    com.example.web.WebConf|com.acme.example|3.2.0
    com.example.web.WebConf|com.acme.example
    com.example.web.WebConf</programlisting>

      <para>If a registered target service has a PID that contains a vertical
      line (<code>'|' \u007c</code>) | then the value must be taken as is and
      must not be interpreted as a targeted PID.</para>

      <para>The <code>service.pid</code> configuration property for a targeted
      PID configuration must always be set to the targeted PID. That is, if
      the PID is <code>com.example.web.WebConf</code> and the targeted PID
      <code>com.example.web.WebConf|com.acme.example|3.2.0</code> then the
      property in the Configuration dictionary must be the targeted
      PID.</para>

      <para>If a Configuration with a targeted PID is deleted or a
      Configuration with a new targeted PID is added then all targets that
      would be stale must be reevaluated against the new situation and updated
      accordingly if they are no longer bound against the best matching target
      PID.</para>
    </section>

    <section xml:id="service.cm-extenders.targeted.pids">
      <title>Extenders and Targeted PIDs</title>

      <para>Extenders like Declarative Services use Configurations but bypass
      the general Managed Service or Managed Service Factory method. It is the
      responsibility of these extenders to access the Configurations using the
      targeted PIDs.</para>

      <para>Since getting a Configuration tends to create that Configuration
      it is necessary for these extenders to use the <xref linkend="org.osgi.service.cm.ConfigurationAdmin.listConfigurations-String-" xrefstyle="hyperlink"/> method to find out if a more targeted
      Configuration exists. There are many ways the extender can find the most
      targeted PID. For example, the following code gets the most targeted PID
      for a given bundle.</para>

      <programlisting>String mostTargeted(String key, String pid, Bundle bundle) throws Exception {
    String bsn = bundle.getSymbolicName();
    Version version = bundle.getVersion();
    String location = bundle.getLocation();
    String f = String.format("(|(%1$s=%2$s)(%1$s=%2$s|%3$s)" +
        "(%1$s=%2$s|%3$s|%4$s)(%1$s=%2$s|%3$s|%4$s|%5$s))",
        key, pid, bsn, version, location );

    Configuration[] configurations = cm.listConfigurations(f);
    if (configurations == null)
        return null;

    String largest = null;
    for (Configuration c : configurations) {
        String s = (String) c.getProperties().get(key);
        if ((largest == null) || (largest.length() &lt; s.length()))
            largest = s;
    }
    return largest;
}</programlisting>
    </section>
  </section>

  <section>
    <title>The Configuration Object</title>

    <para>A <code>Configuration</code> object contains the configuration
    dictionary, which is a set of properties that configure an aspect of a
    bundle. A bundle can receive <code>Configuration</code> objects by
    registering a configuration target service with a PID service property.
    See <xref linkend="i1233800"/> for more information about PIDs.</para>

    <para>During registration, the Configuration Admin service must detect
    these configuration target services and hand over their configuration
    dictionary via a callback. If this configuration dictionary is
    subsequently modified, the modified dictionary is handed over to the
    configuration target with the same callback.</para>

    <para>The <code>Configuration</code> object is primarily a set of
    properties that can be updated by a Management Agent, user interfaces on
    the OSGi framework, or other applications. Configuration changes are first
    made persistent, and then passed to the target service via a call to the
    <code>updated</code> method in the <code>ManagedServiceFactory</code> or
    <code>ManagedService</code> class.</para>

    <para>A Configuration object must be uniquely bound to a Managed Service
    or Managed Service Factory. This implies that a bundle must not register a
    Managed Service Factory with a PID that is the same as the PID given to a
    Managed Service.</para>

    <section xml:id="service.cm-location.binding">
      <title>Location Binding</title>

      <para>When a <xref linkend="org.osgi.service.cm.Configuration" xrefstyle="hyperlink"/> object is created with either <xref linkend="org.osgi.service.cm.ConfigurationAdmin.getConfiguration-String-" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.cm.ConfigurationAdmin.createFactoryConfiguration-String-" xrefstyle="hyperlink"/>, it becomes <emphasis>bound</emphasis> to the
      location of the calling bundle. This location is obtained with the <xref linkend="org.osgi.service.cm.Configuration.getBundleLocation--" xrefstyle="hyperlink"/> method.</para>

      <para>Location binding is a security feature that assures that only
      management bundles can modify configuration data, and other bundles can
      only modify their own configuration data. A Security Exception is thrown
      if a bundle does not have <code>ConfigurationPermission[location,
      CONFIGURE]</code>.</para>

      <para>The two argument versions of <xref linkend="org.osgi.service.cm.ConfigurationAdmin.getConfiguration-String-String-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.cm.ConfigurationAdmin.createFactoryConfiguration-String-String-" xrefstyle="hyperlink"/> take a location <code>String</code> as their
      second argument. These methods require the correct permission, and they
      create <xref linkend="org.osgi.service.cm.Configuration" xrefstyle="hyperlink"/> objects bound to the specified location.</para>

      <para>Locations can be specified for a specific Bundle or use
      <emphasis>multi-locations</emphasis>. For a specific location the
      Configuration location must exactly match the location of the target's
      Bundle. A multi-location is any location that has the following
      syntax:</para>

      <programlisting>multi-location ::= '?' symbolic-name?</programlisting>

      <para>For example</para>

      <programlisting>?com.acme</programlisting>

      <para>The path after the question mark is the <emphasis>multi-location
      name</emphasis>, the multi-location name can be empty if only a question
      mark is specified. Configurations with a multi-location are dispatched
      to any target that has <emphasis>visibility</emphasis> to the
      Configuration. The visibility for a given Configuration <code>c</code>
      depends on the following rules:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Single-Location</emphasis> - If
          <code>c.location</code> is not a multi-location then a Bundle only
          has visibility if the Bundle's location exactly matches
          <code>c.location</code>. In this case there is never a security
          check.</para>
        </listitem>

        <listitem>
          <para><emphasis>Multi-Location</emphasis> - If
          <code>c.location</code> is a multi-location (that is, starts with a
          question mark):</para>

          <itemizedlist>
            <listitem>
              <para><emphasis>Security Off</emphasis> - The Bundle always has
              visibility</para>
            </listitem>

            <listitem>
              <para><emphasis>Security On</emphasis> - The target's Bundle
              must have <code>ConfigurationPermission[ c.location,</code>
              <xref linkend="org.osgi.service.cm.ConfigurationPermission.TARGET" xrefstyle="hyperlink"/> <code> ]</code> as defined by the
              Bundle's <code>hasPermission</code> method. The resource name of
              the permission must include the question mark.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <para>The permission matches on the whole name, including any leading
      <code>?</code>. The <xref linkend="org.osgi.service.cm.ConfigurationPermission.TARGET" xrefstyle="hyperlink"/> action is only applicable in the multi-location
      scenario since the security is not checked for a single-location. There
      is therefore no point in granting a Bundle a permission with <xref linkend="org.osgi.service.cm.ConfigurationPermission.TARGET" xrefstyle="hyperlink"/> action for anything but a multi-location
      (starting with a <code>?</code>).</para>

      <para>It is therefore possible to register services with the same PID
      from different bundles. If a multi-location is used then each bundle
      will be evaluated for a corresponding configuration update. If the
      bundle has visibility then it is updated, otherwise it is not.</para>

      <para>If multiple targets must be updated then the order of updating is
      the ranking order of their services.</para>

      <para>If a target loses visibility because the Configuration's location
      changes then it must immediately be deleted from the perspective of that
      target. That is, the target must see a deletion (Managed Service
      Factory) or an update with <code>null</code> (Managed Service). If a
      configuration target gains visibility then the target must see a new
      update with the proper configuration dictionary. However, the associated
      events must not be sent as the underlying Configuration is not actually
      deleted nor modified.</para>

      <para>Changes in the permissions must not initiate a recalculation of
      the visibility. If the permissions are changed this will not become
      visible until one of the other events happen that cause a recalculation
      of the visibility.</para>

      <para>If the location is changed then the Configuration Admin must send
      a <xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_LOCATION_CHANGED" xrefstyle="hyperlink"/> event to signal that the location has changed.
      It is up to the Configuration Listeners to update their state
      appropriately.</para>
    </section>

    <section>
      <title>Dynamic Binding</title>

      <para>Dynamic binding is available for backward compatibility with
      earlier versions. It is recommended that management agents explicitly
      set the location to a <code>?</code> (a multi-location) to allow
      multiple bundles to share PIDs and not use the dynamic binding facility.
      If a management agent uses ?, it must at least have
      <code>ConfigurationPermission[ ?,</code> <xref linkend="org.osgi.service.cm.ConfigurationPermission.CONFIGURE" xrefstyle="hyperlink"/> <code> ]</code> when security is on, it is also
      possible to use <code>ConfigurationPermission[ ?*,</code> <xref linkend="org.osgi.service.cm.ConfigurationPermission.CONFIGURE" xrefstyle="hyperlink"/> <code> ]</code> to not limit the management
      agent. See <xref linkend="service.cm-regions"/> for some examples of
      using the locations in isolation scenarios.</para>

      <para>A <code>null</code> location parameter can be used to create
      <code>Configuration</code> objects that are not yet bound. In this case,
      the Configuration becomes bound to a specific location the first time
      that it is compared to a Bundle's location. If a bundle becomes
      dynamically bound to a Configuration then a <xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_LOCATION_CHANGED" xrefstyle="hyperlink"/> event must be dispatched.</para>

      <para>When this <emphasis>dynamically bound</emphasis> Bundle is
      subsequently uninstalled, configurations that are bound to this bundle
      must be released. That means that for such <code>Configuration</code>
      object's the bundle location must be set to <code>null</code> again so
      it can be bound again to another bundle.</para>
    </section>

    <section xml:id="service.cm.configuration.properties">
      <title>Configuration Properties</title>

      <para>A configuration dictionary contains a set of properties in a
      <code>Dictionary</code> object. The value of the property must be the
      same type as the set of Primary Property Types specified in <xref linkend="intro.core.release" xrefstyle="template:%t"/> Filter
      Syntax.</para>

      <para>The name or key of a property must always be a <code>String</code>
      object, and is not case-sensitive during look up, but must preserve the
      original case. The format of a property name should be:</para>

      <programlisting>property-name ::= public | private
public        ::= symbolic-name // See General Syntax in Core Framework
private       ::= '.' symbolic-name</programlisting>

      <para>Properties can be used in other subsystems that have restrictions
      on the character set that can be used. The <code>symbolic-name</code>
      production uses a very minimal character set.</para>

      <para>Bundles must not use nested lists or arrays, nor must they use
      mixed types. Using mixed types or nesting makes it impossible to use the
      meta typing specification. See <xref linkend="service.metatype"/>.</para>

      <para>Property values that are collections may have an ordering that
      must be preserved when persisting the configuration so that later access
      to the property value will see the preserved ordering of the
      collection.</para>
    </section>

    <section xml:id="service.cm.propertypropagation">
      <title>Property Propagation</title>

      <para>A configuration target should copy the public configuration
      properties (properties whose name does not start with a <code>'.'</code>
      or <code>\u002E</code>) of the <code>Dictionary</code> object argument
      in <code>updated(Dictionary)</code> into the service properties on any
      resulting service registration.</para>

      <para>This propagation allows the development of applications that
      leverage the Framework service registry more extensively, so compliance
      with this mechanism is advised.</para>

      <para>A configuration target may ignore any configuration properties it
      does not recognize, or it may change the values of the configuration
      properties before these properties are registered as service properties.
      Configuration properties in the Framework service registry are not
      strictly related to the configuration information.</para>

      <para>Bundles that follow this recommendation to propagate public
      configuration properties can participate in horizontal applications. For
      example, an application that maintains physical location information in
      the Framework service registry could find out where a particular device
      is located in the house or car. This service could use a property
      dedicated to the physical location and provide functions that leverage
      this property, such as a graphic user interface that displays these
      locations.</para>

      <para>Bundles performing service registrations on behalf of other
      bundles (e.g. OSGi Declarative Services) should propagate all public
      configuration properties and not propagate private configuration
      properties.</para>
    </section>

    <section xml:id="i1374751">
      <title>Automatic Properties</title>

      <para>The Configuration Admin service must automatically add a number of
      properties to the configuration dictionary. If these properties are also
      set by a configuring bundle or a plug-in, they must always be overridden
      before they are given to the target service, see <xref linkend="i1459884"/>. Therefore, the receiving bundle or plug-in can
      assume that the following properties are defined by the Configuration
      Admin service and not by the configuring bundle:</para>

      <itemizedlist>
        <listitem>
          <para><code>service.pid</code> - Set to the PID of the associated
          <code>Configuration</code> object. This is the full the targeted PID
          if a targeted PID is used, see <xref linkend="service.cm-targeted.pids"/>.</para>
        </listitem>

        <listitem>
          <para><code>service.factoryPid</code> - Only set for a Managed
          Service Factory. It is then set to the PID of the associated Managed
          Service Factory. This is the full the targeted PID if a targeted PID
          is used.</para>
        </listitem>

        <listitem>
          <para><code>service.bundleLocation</code> - Set to the location of
          the <code>Configuration</code> object. This property can only be
          used for searching, it may not appear in the configuration
          dictionary returned from the <code>getProperties</code> method due
          to security reasons, nor may it be used when the target is
          updated.</para>
        </listitem>
      </itemizedlist>

      <para>Constants for some of these properties can be found in
      <code>org.osgi.framework.Constants</code> and the <xref linkend="org.osgi.service.cm.ConfigurationAdmin" xrefstyle="hyperlink"/>
      interface. These service properties are all of type
      <code>String</code>.</para>
    </section>

    <section xml:id="i1488808">
      <title>Equality</title>

      <para>Two different <code>Configuration</code> objects can actually
      represent the same underlying configuration. This means that a
      <code>Configuration</code> object must implement the <code>equals</code>
      and <code>hashCode</code> methods in such a way that two
      <code>Configuration</code> objects are equal when their PID is
      equal.</para>
    </section>
  </section>

  <section>
    <title>Managed Service</title>

    <para>A Managed Service is used by a bundle that needs one or more
    configuration dictionaries. It therefore registers the Managed Service
    with one or more PIDs and is thus associated with one
    <code>Configuration</code> object in the Configuration Admin service for
    each registered PID. A bundle can register any number of
    <code>ManagedService</code> objects, but each must be identified with its
    own PID or PIDs.</para>

    <para>A bundle should use a Managed Service when it needs configuration
    information for the following:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>A Singleton</emphasis> - A single entity in the bundle
        that needs to be configured.</para>
      </listitem>

      <listitem>
        <para><emphasis>Externally Detected Devices</emphasis> - Each device
        that is detected causes a registration of an associated
        <code>ManagedService</code> object. The PID of this object is related
        to the identity of the device, such as the address or serial
        number.</para>
      </listitem>
    </itemizedlist>

    <para>A Managed Service may be registered with more than one PID and
    therefore be associated with multiple Configuration objects, one for each
    PID. Using multiple PIDs for a Managed Service is not recommended. For
    example, when a configuration is deleted for a Managed Service there is no
    way to identify which PID is associated with the deleted
    configuration.</para>

    <section>
      <title>Singletons</title>

      <para>When an object must be instantiated only once, it is called a
      <emphasis>singleton</emphasis>. A singleton requires a single
      configuration dictionary. Bundles may implement several different types
      of singletons if necessary.</para>

      <para>For example, a Watchdog service could watch the registry for the
      status and presence of services in the Framework service registry. Only
      one instance of a Watchdog service is needed, so only a single
      configuration dictionary is required that contains the polling time and
      the list of services to watch.</para>
    </section>

    <section>
      <title>Networks</title>

      <para>When a device in the external world needs to be represented in the
      OSGi Environment, it must be detected in some manner. The Configuration
      Admin service cannot know the identity and the number of instances of
      the device without assistance. When a device is detected, it still needs
      configuration information in order to play a useful role.</para>

      <para>For example, a 1-Wire network can automatically detect devices
      that are attached and removed. When it detects a temperature sensor, it
      could register a Sensor service with the Framework service registry.
      This Sensor service needs configuration information specifically for
      that sensor, such as which lamps should be turned on, at what
      temperature the sensor is triggered, what timer should be started, in
      what zone it resides, and so on. One bundle could potentially have
      hundreds of these sensors and actuators, and each needs its own
      configuration information.</para>

      <para>Each of these Sensor services should be registered as a Managed
      Service with a PID related to the physical sensor (such as the address)
      to receive configuration information.</para>

      <para>Other examples are services discovered on networks with protocols
      like Jini, UPnP, and Salutation. They can usually be represented in the
      Framework service registry. A network printer, for example, could be
      detected via UPnP. Once in the service registry, these services usually
      require local configuration information. A Printer service needs to be
      configured for its local role: location, access list, and so on.</para>

      <para>This information needs to be available in the Framework service
      registry whenever that particular Printer service is registered.
      Therefore, the Configuration Admin service must remember the
      configuration information for this Printer service.</para>

      <para>This type of service should register with the Framework as a
      Managed Service in order to receive appropriate configuration
      information.</para>
    </section>

    <section xml:id="i1233865">
      <title>Configuring Managed Services</title>

      <para>A bundle that needs configuration information should register one
      or more <code>ManagedService</code> objects with a PID service property.
      If it has a default set of properties for its configuration, it may
      include them as service properties of the Managed Service. These
      properties may be used as a configuration template when a
      <code>Configuration</code> object is created for the first time. A
      Managed Service optionally implements the <code>MetaTypeProvider</code>
      interface to provide information about the property types. See <xref linkend="i1288153"/>.</para>

      <para>When this registration is detected by the Configuration Admin
      service, the following steps must occur:</para>

      <itemizedlist>
        <listitem>
          <para>The configuration stored for the registered PID must be
          retrieved. If there is a <code>Configuration</code> object for this
          PID and the configuration is visible for the associated bundle then
          it is sent to the Managed Service with <xref linkend="org.osgi.service.cm.ManagedService.updated-Dictionary-" xrefstyle="hyperlink"/>.</para>
        </listitem>

        <listitem>
          <para>If a Managed Service is registered and no configuration
          information is available or the configuration is not visible then
          the Configuration Admin service must call
          <code>updated(Dictionary)</code> with a <code>null</code>
          parameter.</para>
        </listitem>

        <listitem>
          <para>If the Configuration Admin service starts
          <emphasis>after</emphasis> a Managed Service is registered, it must
          call <xref linkend="org.osgi.service.cm.ManagedService.updated-Dictionary-" xrefstyle="hyperlink"/> on this service as soon as possible
          according to the prior rules. For this reason, a Managed Service
          must always get a callback when it registers
          <emphasis>and</emphasis> the Configuration Admin service is
          started.</para>
        </listitem>
      </itemizedlist>

      <para>Multiple Managed Services can register with the same PID, they are
      all updated as long as they have visibility to the configuration as
      defined by the location, see <xref linkend="service.cm-location.binding"/>.</para>

      <para>If the Managed Service is registered with more than one PID and
      more than one PID has no configuration information available, then
      <code>updated(Dictionary)</code> will be called multiple times with a
      <code>null</code> parameter.</para>

      <para>The <xref linkend="org.osgi.service.cm.ManagedService.updated-Dictionary-" xrefstyle="hyperlink"/> callback from the Configuration Admin service to
      the Managed Service must take place asynchronously. This requirement
      allows the Managed Service to finish its initialization in a
      synchronized method without interference from the Configuration Admin
      service callback. Care should be taken not to cause deadlocks by calling
      the Framework within a synchronized method.</para>

      <figure pgwide="1">
        <title>Managed Service Configuration Action Diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.028in" contentwidth="4.917in" fileref="ms-config-action.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The <code>updated</code> method may throw a <xref linkend="org.osgi.service.cm.ConfigurationException" xrefstyle="hyperlink"/>. This object must describe the problem and what
      property caused the exception.</para>
    </section>

    <section>
      <title>Race Conditions</title>

      <para>When a Managed Service is registered, the default properties may
      be visible in the service registry for a short period before they are
      replaced by the properties of the actual configuration dictionary. Care
      should be taken that this visibility does not cause race conditions for
      other bundles.</para>

      <para>In cases where race conditions could be harmful, the Managed
      Service must be split into two pieces: an object performing the actual
      service and a Managed Service. First, the Managed Service is registered,
      the configuration is received, and the actual service object is
      registered. In such cases, the use of a Managed Service Factory that
      performs this function should be considered.</para>
    </section>

    <section>
      <title>Examples of Managed Service</title>

      <para><xref linkend="i1379376"/> shows a Managed Service configuration
      example. Two services are registered under the
      <code>ManagedService</code> interface, each with a different PID.</para>

      <figure xml:id="i1379376">
        <title>PIDs and External Associations</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.111in" contentwidth="4.917in" fileref="pids-external-associations.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The Configuration Admin service has a database containing a
      configuration record for each PID. When the Managed Service with
      <code>service.pid = com.acme</code> is registered, the Configuration
      Admin service will retrieve the properties <code>name=Elmer</code> and
      <code>size=42</code> from its database. The properties are stored in a
      <code>Dictionary</code> object and then given to the Managed Service
      with the <code>updated(Dictionary)</code> method.</para>

      <section>
        <title>Configuring A Console Bundle</title>

        <para>In this example, a bundle can run a single debugging console
        over a Telnet connection. It is a singleton, so it uses a
        <code>ManagedService</code> object to get its configuration
        information: the port and the network name on which it should
        register.</para>

        <programlisting>class SampleManagedService implements ManagedService{
    Dictionary          properties;
    ServiceRegistration registration;
    Console             console;

    public void start( 
        BundleContext context ) throws Exception {
        properties = new Hashtable();
        properties.put( Constants.SERVICE_PID,
            "com.acme.console" );

        registration = context.registerService(
            ManagedService.class.getName(), 
            this,
            properties
        );
    }

    public synchronized void updated( Dictionary np ) {
        if ( np != null ) {
            properties = np;
            properties.put(
                Constants.SERVICE_PID, "com.acme.console" );
        }

        if (console == null)
            console = new Console();

        int port = ((Integer)properties.get("port"))
            .intValue();

        String network = (String) properties.get("network");
        console.setPort(port, network);
        registration.setProperties(properties);
    }
    ... further methods
}</programlisting>
      </section>
    </section>

    <section>
      <title>Deletion</title>

      <para>When a <code>Configuration</code> object for a Managed Service is
      deleted, the Configuration Admin service must call
      <code>updated(Dictionary)</code> with a <code>null</code> argument on a
      thread that is different from that on which the
      <code>Configuration.delete</code> was executed. This deletion must send
      out a Configuration Event <xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_DELETED" xrefstyle="hyperlink"/> asynchronously to any registered Configuration
      Listener services after the <code>updated</code> method is called with a
      <code>null</code>.</para>
    </section>
  </section>

  <section xml:id="i1299227">
    <title>Managed Service Factory</title>

    <para>A Managed Service Factory is used when configuration information is
    needed for a service that can be instantiated multiple times. When a
    Managed Service Factory is registered with the Framework, the
    Configuration Admin service consults its database and calls <xref linkend="org.osgi.service.cm.ManagedServiceFactory.updated-String-Dictionary-" xrefstyle="hyperlink"/> for each associated and visible
    <code>Configuration</code> object that matches the PIDs on the
    registration. It passes the identifier of the Configuration instance,
    which can be used as a PID, as well as a <code>Dictionary</code> object
    with the configuration properties.</para>

    <para>A Managed Service Factory is useful when the bundle can provide
    functionality a number of times, each time with different configuration
    dictionaries. In this situation, the Managed Service Factory acts like a
    <emphasis>class</emphasis> and the Configuration Admin service can use
    this Managed Service Factory to <emphasis>instantiate instances</emphasis>
    for that <emphasis>class</emphasis>.</para>

    <para>In the next section, the word <emphasis>factory</emphasis> refers to
    this concept of creating <emphasis>instances</emphasis> of a function
    defined by a bundle that registers a Managed Service Factory.</para>

    <section>
      <title>When to Use a Managed Service Factory</title>

      <para>A Managed Service Factory should be used when a bundle does not
      have an internal or external entity associated with the configuration
      information but can potentially be instantiated multiple times.</para>

      <section>
        <title>Example Email Fetcher</title>

        <para>An email fetcher program displays the number of emails that a
        user has - a function likely to be required for different users. This
        function could be viewed as a <emphasis>class</emphasis> that needs to
        be <emphasis>instantiated</emphasis> for each user. Each instance
        requires different parameters, including password, host, protocol,
        user id, and so on.</para>

        <para>An implementation of the Email Fetcher service should register a
        <code>ManagedServiceFactory</code> object. In this way, the
        Configuration Admin service can define the configuration information
        for each user separately. The Email Fetcher service will only receive
        a configuration dictionary for each required instance (user).</para>
      </section>

      <section>
        <title>Example Temperature Conversion Service</title>

        <para>Assume a bundle has the code to implement a conversion service
        that receives a temperature and, depending on settings, can turn an
        actuator on and off. This service would need to be instantiated many
        times depending on where it is needed. Each instance would require its
        own configuration information for the following:</para>

        <itemizedlist>
          <listitem>
            <para>Upper value</para>
          </listitem>

          <listitem>
            <para>Lower value</para>
          </listitem>

          <listitem>
            <para>Switch Identification</para>
          </listitem>

          <listitem>
            <para>...</para>
          </listitem>
        </itemizedlist>

        <para>Such a conversion service should register a service object under
        a <code>ManagedServiceFactory</code> interface. A configuration
        program can then use this Managed Service Factory to create instances
        as needed. For example, this program could use a Graphic User
        Interface (GUI) to create such a component and configure it.</para>
      </section>

      <section>
        <title>Serial Ports</title>

        <para>Serial ports cannot always be used by the OSGi Device Access
        specification implementations. Some environments have no means to
        identify available serial ports, and a device on a serial port cannot
        always provide information about its type.</para>

        <para>Therefore, each serial port requires a description of the device
        that is connected. The bundle managing the serial ports would need to
        instantiate a number of serial ports under the control of the
        Configuration Admin service, with the appropriate
        <code>DEVICE_CATEGORY</code> property to allow it to participate in
        the Device Access implementation.</para>

        <para>If the bundle cannot detect the available serial ports
        automatically, it should register a Managed Service Factory. The
        Configuration Admin service can then, with the help of a configuration
        program, define configuration information for each available serial
        port.</para>
      </section>
    </section>

    <section>
      <title>Registration</title>

      <para>Similar to the Managed Service configuration dictionary, the
      configuration dictionary for a Managed Service Factory is identified by
      a PID. The Managed Service Factory, however, also has a
      <emphasis>factory </emphasis>PID, which is the PID of the associated
      Managed Service Factory. It is used to group all Managed Service Factory
      configuration dictionaries together.</para>

      <para>When a <code>Configuration</code> object for a Managed Service
      Factory is created (<code>ConfigurationAdmin.</code><xref linkend="org.osgi.service.cm.ConfigurationAdmin.createFactoryConfiguration-String-String-" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.cm.ConfigurationAdmin.createFactoryConfiguration-String-" xrefstyle="hyperlink"/> ), a new unique PID is created for this object
      by the Configuration Admin service. The scheme used for this PID is
      defined by the Configuration Admin service and is unrelated to the
      factory PID, which is chosen by the registering bundle.</para>

      <para>When the Configuration Admin service detects the registration of a
      Managed Service Factory, it must find all visible configuration
      dictionaries for this factory and must then sequentially call
      <code>ManagedServiceFactory.</code><xref linkend="org.osgi.service.cm.ManagedServiceFactory.updated-String-Dictionary-" xrefstyle="hyperlink"/> for each configuration dictionary. The first
      argument is the PID of the <code>Configuration</code> object (the one
      created by the Configuration Admin service) and the second argument
      contains the configuration properties.</para>

      <para>The Managed Service Factory should then create any artifacts
      associated with that factory. Using the PID given in the
      <code>Configuration</code> object, the bundle may register new services
      (other than a Managed Service) with the Framework, but this is not
      required. This may be necessary when the PID is useful in contexts other
      than the Configuration Admin service.</para>

      <para>The receiver must <emphasis>not</emphasis> register a Managed
      Service with this PID because this would force two Configuration objects
      to have the same PID. If a bundle attempts to do this, the Configuration
      Admin service should log an error and must ignore the registration of
      the Managed Service.</para>

      <para>The Configuration Admin service must guarantee that no race
      conditions exist between initialization, updates, and deletions.</para>

      <figure pgwide="1">
        <title>Managed Service Factory Action Diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.910in" contentwidth="4.917in" fileref="msf-config-action.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>A Managed Service Factory has only one update method: <xref linkend="org.osgi.service.cm.ManagedServiceFactory.updated-String-Dictionary-" xrefstyle="hyperlink"/>. This method can be called any number of times
      as Configuration objects are created or updated.</para>

      <para>The Managed Service Factory must detect whether a PID is being
      used for the first time, in which case it should create a new
      <emphasis>instance</emphasis>, or a subsequent time, in which case it
      should update an existing instance.</para>

      <para>The Configuration Admin service must call
      <code>updated(String,Dictionary)</code> on a thread that is different
      from the one that executed the registration. This requirement allows an
      implementation of a Managed Service Factory to use a synchronized method
      to assure that the callbacks do not interfere with the Managed Service
      Factory registration.</para>

      <para>The <xref linkend="org.osgi.service.cm.ManagedServiceFactory.updated-String-Dictionary-" xrefstyle="hyperlink"/> method may throw a <xref linkend="org.osgi.service.cm.ConfigurationException" xrefstyle="hyperlink"/> object. This object describes the problem and
      what property caused the problem. These exceptions should be logged by a
      Configuration Admin service.</para>

      <para>Multiple Managed Service Factory services can be registered with
      the same PID. Each of those services that have visibility to the
      corresponding configuration will be updated in service ranking
      order.</para>
    </section>

    <section>
      <title>Deletion</title>

      <para>If a configuring bundle deletes an instance of a Managed Service
      Factory, the <xref linkend="org.osgi.service.cm.ManagedServiceFactory.deleted-String-" xrefstyle="hyperlink"/> method is called. The argument is the PID for
      this instance. The implementation of the Managed Service Factory must
      remove all information and stop any behavior associated with that PID.
      If a service was registered for this PID, it should be
      unregistered.</para>

      <para>Deletion will asynchronously send out a Configuration Event <xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_DELETED" xrefstyle="hyperlink"/> to all registered Configuration Listener
      services.</para>
    </section>

    <section>
      <title>Managed Service Factory Example</title>

      <para><xref linkend="i1318247"/> highlights the differences between a
      Managed Service and a Managed Service Factory. It shows how a Managed
      Service Factory implementation receives configuration information that
      was created before it was registered.</para>

      <itemizedlist>
        <listitem>
          <para>A bundle implements an EMail Fetcher service. It registers a
          <code>ManagedServiceFactory</code> object with
          PID=<code>com.acme.email</code>.</para>
        </listitem>

        <listitem>
          <para>The Configuration Admin service notices the registration and
          consults its database. It finds three <code>Configuration</code>
          objects for which the factory PID is equal to
          <code>com.acme.email</code>. It must call
          <code>updated(String,Dictionary)</code> for each of these
          <code>Configuration</code> objects on the newly registered
          <code>ManagedServiceFactory</code> object.</para>
        </listitem>

        <listitem>
          <para>For each configuration dictionary received, the factory should
          create a new instance of a <code>EMailFetcher</code> object, one for
          <code>erica</code> (PID=16.1), one for <code>anna</code> (PID=16.3),
          and one for <code>elmer</code> (PID=16.2).</para>
        </listitem>

        <listitem>
          <para>The <code>EMailFetcher</code> objects are registered under the
          <code>Topic</code> interface so their results can be viewed by an
          online display.</para>

          <para>If the E<code>MailFetcher</code> object is registered, it may
          safely use the PID of the <code>Configuration</code> object because
          the Configuration Admin service must guarantee its suitability for
          this purpose.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1" xml:id="i1318247">
        <title>Managed Service Factory Example</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.778in" contentwidth="4.940in" fileref="msf-example.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Multiple Consoles Example</title>

      <para>This example illustrates how multiple consoles, each of which has
      its own port and interface can run simultaneously. This approach is very
      similar to the example for the Managed Service, but highlights the
      difference by allowing multiple consoles to be created.</para>

      <programlisting>class ExampleFactory implements ManagedServiceFactory{
    Hashtable        consoles = new Hashtable();
    BundleContext    context;
    public void start( BundleContext context ) 
        throws Exception {
        this.context = context;
        Hashtable local = new Hashtable();
        local.put(Constants.SERVICE_PID,"com.acme.console");
        context.registerService(
            ManagedServiceFactory.class.getName(),
            this, 
            local );
    }

    public void updated( String pid, Dictionary config ){
        Console console = (Console) consoles.get(pid);
        if (console == null) {
            console = new Console(context);
            consoles.put(pid, console);
        }

        int port = getInt(config, "port", 2011);
        String network = getString(
            config, 
            "network",
            null /*all*/ 
        );
        console.setPort(port, network);
    }

    public void deleted(String pid) {
        Console console = (Console) consoles.get(pid);
        if (console != null) {
            consoles.remove(pid);
            console.close();
        }
    }
}</programlisting>
    </section>
  </section>

  <section>
    <title>Configuration Admin Service</title>

    <para>The <xref linkend="org.osgi.service.cm.ConfigurationAdmin" xrefstyle="hyperlink"/> interface provides methods to maintain
    configuration data in an OSGi environment. This configuration information
    is defined by a number of <code>Configuration</code> objects associated
    with specific configuration targets. <code>Configuration</code> objects
    can be created, listed, modified, and deleted through this interface.
    Either a remote management system or the bundles configuring their own
    configuration information may perform these operations.</para>

    <para>The <code>ConfigurationAdmin</code> interface has methods for
    creating and accessing <code>Configuration</code> objects for a Managed
    Service, as well as methods for managing new <code>Configuration</code>
    objects for a Managed Service Factory.</para>

    <section xml:id="i1374750">
      <title>Creating a Managed Service Configuration Object</title>

      <para>A bundle can create a new Managed Service
      <code>Configuration</code> object with
      <code>ConfigurationAdmin.getConfiguration</code>. No create method is
      offered because doing so could introduce race conditions between
      different bundles trying to create a <code>Configuration</code> object
      for the same Managed Service. The <code>getConfiguration</code> method
      must atomically create and persistently store an object if it does not
      yet exist.</para>

      <para>Two variants of this method are:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.cm.ConfigurationAdmin.getConfiguration-String-" xrefstyle="hyperlink"/> - This method is used by a bundle with a
          given location to configure its <emphasis>own</emphasis>
          <code>ManagedService</code> objects. The argument specifies the PID
          of the targeted service.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.cm.ConfigurationAdmin.getConfiguration-String-String-" xrefstyle="hyperlink"/> - This method is used by a management bundle
          to configure <emphasis>another</emphasis> bundle. Therefore, this
          management bundle needs the right permission. The first argument is
          the PID and the second argument is the location identifier of the
          targeted <code>ManagedService</code> object.</para>
        </listitem>
      </itemizedlist>

      <para>All <code>Configuration</code> objects have a method, <xref linkend="org.osgi.service.cm.Configuration.getFactoryPid--" xrefstyle="hyperlink"/>, which in this case must return
      <code>null</code> because the <code>Configuration</code> object is
      associated with a Managed Service.</para>

      <para>Creating a new Configuration object must <emphasis>not</emphasis>
      initiate a callback to the Managed Service <code>updated</code> method
      until the properties are set in the Configuration with the
      <code>update</code> method.</para>
    </section>

    <section xml:id="i1761778">
      <title>Creating a Managed Service Factory Configuration Object</title>

      <para>The <code>ConfigurationAdmin</code> class provides two methods to
      create a new instance of a Managed Service Factory:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.cm.ConfigurationAdmin.createFactoryConfiguration-String-" xrefstyle="hyperlink"/> - This method is used by a bundle with a
          given location to configure its own
          <code>ManagedServiceFactory</code> objects. The argument specifies
          the PID of the targeted <code>ManagedServiceFactory</code> object.
          This <emphasis>factory PID</emphasis> can be obtained from the
          returned <code>Configuration</code> object with the
          <code>getFactoryPid()</code> method.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.cm.ConfigurationAdmin.createFactoryConfiguration-String-String-" xrefstyle="hyperlink"/> - This method is used by a management bundle
          to configure another bundle's <code>ManagedServiceFactory</code>
          object. The first argument is the PID and the second is the location
          identifier of the targeted <code>ManagedServiceFactory</code>
          object. The <emphasis>factory PID</emphasis> can be obtained from
          the returned <code>Configuration</code> object with
          <code>getFactoryPid</code> method.</para>
        </listitem>
      </itemizedlist>

      <para>Creating a new factory configuration must <emphasis>not</emphasis>
      initiate a callback to the Managed Service Factory <code>updated</code>
      method until the properties are set in the <code>Configuration</code>
      object with the <code>update</code> method.</para>
    </section>

    <section>
      <title>Accessing Existing Configurations</title>

      <para>The existing set of <code>Configuration</code> objects can be
      listed with <xref linkend="org.osgi.service.cm.ConfigurationAdmin.listConfigurations-String-" xrefstyle="hyperlink"/>. The argument is a <code>String</code> object
      with a filter expression. This filter expression has the same syntax as
      the Framework <code>Filter</code> class. For example:</para>

      <programlisting>(&amp;(size=42)(service.factoryPid=*osgi*))</programlisting>

      <para>The Configuration Admin service must only return Configurations
      that are visible to the calling bundle, see <xref linkend="service.cm-location.binding"/>.</para>

      <para>A single <code>Configuration</code> object is identified with a
      PID, and can be obtained with <xref linkend="org.osgi.service.cm.ConfigurationAdmin.listConfigurations-String-" xrefstyle="hyperlink"/> if it is visible. <code>null</code> is returned
      in both cases when there are no visible <code>Configuration</code>
      objects.</para>

      <para>The PIDs that are filtered on can be targeted PIDs, see <xref linkend="service.cm-targeted.pids"/>.</para>
    </section>

    <section>
      <title>Updating a Configuration</title>

      <para>The process of updating a <code>Configuration</code> object is the
      same for Managed Services and Managed Service Factories. First, <xref linkend="org.osgi.service.cm.ConfigurationAdmin.listConfigurations-String-" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.cm.ConfigurationAdmin.getConfiguration-String-" xrefstyle="hyperlink"/> should be used to get a
      <code>Configuration</code> object. The properties can be obtained with
      <code>Configuration.getProperties</code>. When no update has occurred
      since this object was created, <code>getProperties</code> returns
      <code>null</code>.</para>

      <para>New properties can be set by calling
      <code>Configuration.update</code>. The Configuration Admin service must
      first store the configuration information and then call all
      configuration targets that have visibility with the <code>updated</code>
      method: either the <code>ManagedService.</code><xref linkend="org.osgi.service.cm.ManagedService.updated-Dictionary-" xrefstyle="hyperlink"/> or <code>ManagedServiceFactory.</code><xref linkend="org.osgi.service.cm.ManagedServiceFactory.updated-String-Dictionary-" xrefstyle="hyperlink"/> method. If a target service is not registered,
      the fresh configuration information must be given to the target when the
      configuration target service registers and it has visibility. Each
      update of the Configuration properties must update a counter in the
      Configuration object after the data has been persisted but before the
      target(s) have been updated and any events are sent out. This counter is
      available from the <xref linkend="org.osgi.service.cm.Configuration.getChangeCount--" xrefstyle="hyperlink"/> method.</para>

      <para>The <code>update</code> method calls in <code>Configuration</code>
      objects are not executed synchronously with the related target services
      <code>updated</code> method. The <code>updated</code> method must be
      called asynchronously. The Configuration Admin service, however, must
      have updated the persistent storage before the <code>update</code>
      method returns.</para>

      <para>The update method must also asynchronously send out a
      Configuration Event <xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_UPDATED" xrefstyle="hyperlink"/> to all registered Configuration
      Listeners.</para>
    </section>

    <section xml:id="service.cm-multi.locations">
      <title>Using Multi-Locations</title>

      <para>Sharing configuration between different bundles can be done using
      multi-locations, see <xref linkend="service.cm-location.binding"/>. A
      multi-location for a Configuration enables this Configuration to be
      delivered to any bundle that has visibility to that configuration. It is
      also possible that Bundles are interested in multiple PIDs for one
      target service, for this reason they can register multiple PIDs for one
      service.</para>

      <para>For example, a number of bundles require access to the URL of a
      remote host, associated with the PID <code>com.acme.host</code>. A
      manager, aware that this PID is used by different bundles, would need to
      specify a location for the Configuration that allows delivery to any
      bundle. A multi-location, any location starting with a question mark
      achieves this. The part after the question mark has only use if the
      system runs with security, it allows the implementation of regions, see
      <xref linkend="service.cm-regions"/>. In this example a single question
      mark is used because any Bundle can receive this Configuration. The
      manager's code could look like:</para>

      <programlisting>Configuration c = admin.getConfiguration("com.acme.host", "?" );
Hashtable ht = new Hashtable();
ht.put( "host", hostURL);
c.update(ht);</programlisting>

      <para>A Bundle interested in the host configuration would register a
      Managed Service with the following properties:</para>

      <programlisting>service.pid = [ "com.acme.host", "com.acme.system"]</programlisting>

      <para>The Bundle would be called back for both the com.acme.host and
      com.acme.system PID and must therefore discriminate between these two
      cases. This Managed Service therefore would have a callback like:</para>

      <programlisting>volatile URL url;
public void updated( Dictionary d ) {
  if ( d.get("service.pid").equals("com.acme.host"))
      this.url = new URL( d.get("host"));
  if ( d.get("service.pid").equals("com.acme.system"))
        ....
}</programlisting>
    </section>

    <section xml:id="service.cm-regions">
      <title>Regions</title>

      <para>In certain cases it is necessary to isolate bundles from each
      other. This will require that the configuration can be separated in
      <emphasis>regions</emphasis>. Each region can then be configured by a
      separate manager that is only allowed to manage bundles in its own
      region. Bundles can then only see configurations from their own region.
      Such a region based system can only be achieved with Java security as
      this is the only way to place bundles in a sandbox. This section
      describes how the Configuration's location binding can be used to
      implement regions if Java security is active.</para>

      <para>Regions are groups of bundles that share location information
      among each other but are not willing to share this information with
      others. Using the multi-locations, see <xref linkend="service.cm-location.binding"/>, and security it is possible to
      limit access to a Configuration by using a location name. A Bundle can
      only receive a Configuration when it has <xref linkend="org.osgi.service.cm.ConfigurationPermission" xrefstyle="hyperlink"/> <code>[location name,</code> <xref linkend="org.osgi.service.cm.ConfigurationPermission.TARGET" xrefstyle="hyperlink"/> <code>]</code>. It is therefore possible to
      create region by choosing a region name for the location. A management
      agent then requires <xref linkend="org.osgi.service.cm.ConfigurationPermission" xrefstyle="hyperlink"/> <code>[?region-name,</code> <xref linkend="org.osgi.service.cm.ConfigurationPermission.CONFIGURE" xrefstyle="hyperlink"/> <code>]</code> and a Bundle in the region
      requires <xref linkend="org.osgi.service.cm.ConfigurationPermission" xrefstyle="hyperlink"/> <code>[?region-name,</code> <xref linkend="org.osgi.service.cm.ConfigurationPermission.TARGET" xrefstyle="hyperlink"/> <code>]</code>.</para>

      <para>To implement regions, the management agent is required to use
      multi-locations; without the question mark a Configuration is only
      visible to a Bundle that has the exact location of the Configuration.
      With a multi-location, the Configuration is delivered to any bundle that
      has the appropriate permission. Therefore, if regions are used, no
      manager should have <code>ConfigurationPermission[*, <xref linkend="org.osgi.service.cm.ConfigurationPermission.CONFIGURE" xrefstyle="hyperlink"/> ]</code> because it would be able to configure
      anybody. This permission would enable the manager to set the location to
      any region or set the location to <code>null</code>. All managers must
      be restricted to a permission like
      <code>ConfigurationPermission[?com.acme.region.*,CONFIGURE]</code>. The
      resource name for a Configuration Permission uses substring matching as
      in the OSGi Filter, this facility can be used to simplify the
      administrative setup and implement more complex sharing schemes.</para>

      <para>For example, a management agent works for the region
      <code>com.acme</code>. It has the following permission:</para>

      <programlisting><xref linkend="org.osgi.service.cm.ConfigurationPermission" xrefstyle="hyperlink"/>[?com.acme.*,<xref linkend="org.osgi.service.cm.ConfigurationPermission.CONFIGURE" xrefstyle="hyperlink"/>]</programlisting>

      <para>The manager requires multi-location updates for
      <code>com.acme.*</code> (the last full stop is required in this
      wildcarding). For the <xref linkend="org.osgi.service.cm.ConfigurationPermission.CONFIGURE" xrefstyle="hyperlink"/> action the question mark must be specified in
      the resource name. The bundles in the region have the permission:</para>

      <programlisting><xref linkend="org.osgi.service.cm.ConfigurationPermission" xrefstyle="hyperlink"/>["?com.acme.alpha",<xref linkend="org.osgi.service.cm.ConfigurationPermission.TARGET" xrefstyle="hyperlink"/>]</programlisting>

      <para>The question mark must be specified for the <xref linkend="org.osgi.service.cm.ConfigurationPermission.TARGET" xrefstyle="hyperlink"/> permission. A management agent that needs to
      configure Bundles in a region must then do this as follows:</para>

      <programlisting>Configuration c = admin.getConfiguration("com.acme.host", "?com.acme.alpha" );
Hashtable ht = new Hashtable();
ht.put( "host", hostURL);
c.update(ht);</programlisting>

      <para>Another, similar, example with two regions:</para>

      <itemizedlist>
        <listitem>
          <para><code>system</code></para>
        </listitem>

        <listitem>
          <para><code>application</code></para>
        </listitem>
      </itemizedlist>

      <para>There is only one manager that manages all bundles. Its
      permissions look like:</para>

      <programlisting>ConfigurationPermission[?system,<xref linkend="org.osgi.service.cm.ConfigurationPermission.CONFIGURE" xrefstyle="hyperlink"/>]
ConfigurationPermission[?application,<xref linkend="org.osgi.service.cm.ConfigurationPermission.CONFIGURE" xrefstyle="hyperlink"/>]</programlisting>

      <para>A Bundle in the <code>application</code> region can have the
      following permissions:</para>

      <programlisting>ConfigurationPermission[?application,<xref linkend="org.osgi.service.cm.ConfigurationPermission.TARGET" xrefstyle="hyperlink"/>]</programlisting>

      <para>This managed bundle therefore has only visibility to
      configurations in the <code>application</code> region.</para>
    </section>

    <section>
      <title>Deletion</title>

      <para>A <code>Configuration</code> object that is no longer needed can
      be deleted with <code>Configuration.delete</code>, which removes the
      <code>Configuration</code> object from the database. The database must
      be updated before the target service's <code>updated</code> or
      <code>deleted</code> method is called. Only services that have received
      the configuration dictionary before must be called.</para>

      <para>If the target service is a Managed Service Factory, the factory is
      informed of the deleted <code>Configuration</code> object by a call to
      <code>ManagedServiceFactory.</code><xref linkend="org.osgi.service.cm.ManagedServiceFactory.deleted-String-" xrefstyle="hyperlink"/> method. It should then remove the associated
      <emphasis>instance</emphasis>. The
      <code>ManagedServiceFactory.</code><xref linkend="org.osgi.service.cm.ManagedServiceFactory.deleted-String-" xrefstyle="hyperlink"/> call must be done asynchronously with respect to
      <code>Configuration.</code><xref linkend="org.osgi.service.cm.Configuration.delete--" xrefstyle="hyperlink"/>.</para>

      <para>When a <code>Configuration</code> object of a Managed Service is
      deleted, <code>ManagedService.updated</code> is called with
      <code>null</code> for the <code>properties</code> argument. This method
      may be used for clean-up, to revert to default values, or to unregister
      a service. This method is called asynchronously from the
      <code>delete</code> method.</para>

      <para>The update method must also asynchronously send out a
      Configuration Event <xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_DELETED" xrefstyle="hyperlink"/> to all registered Configuration
      Listeners.</para>
    </section>

    <section>
      <title>Updating a Bundle's Own Configuration</title>

      <para>The Configuration Admin service specification does not distinguish
      between updates via a Management Agent and a bundle updating its own
      configuration information (as defined by its location). Even if a bundle
      updates its own configuration information, the Configuration Admin
      service must callback the associated target service's
      <code>updated</code> method.</para>

      <para>As a rule, to update its own configuration, a bundle's user
      interface should <emphasis>only</emphasis> update the configuration
      information and never its internal structures directly. This rule has
      the advantage that the events, from the bundle implementation's
      perspective, appear similar for internal updates, remote management
      updates, and initialization.</para>
    </section>
  </section>

  <section xml:id="i1693263">
    <title>Configuration Events</title>

    <para>Configuration Admin can update interested parties of changes in its
    repository. The model is based on the white board pattern where
    Configuration Listener services are registered with the service
    registry.</para>

    <para>There are two types of Configuration Listener services:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.cm.ConfigurationListener" xrefstyle="hyperlink"/> - The default Configuration Listener receives
        events asynchronously from the method that initiated the event and on
        another thread.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.cm.SynchronousConfigurationListener" xrefstyle="hyperlink"/> - A Synchronous Configuration Listener is
        guaranteed to be called on the same thread as the method call that
        initiated the event.</para>
      </listitem>
    </itemizedlist>

    <para>The Configuration Listener service will receive <xref linkend="org.osgi.service.cm.ConfigurationEvent" xrefstyle="hyperlink"/>
    objects if important changes take place. The Configuration Admin service
    must call the <xref linkend="org.osgi.service.cm.ConfigurationListener.configurationEvent-ConfigurationEvent-" xrefstyle="hyperlink"/> method with such an event. Configuration Events
    must be delivered in order for each listener as they are generated. The
    way events must be delivered is the same as described in
    <emphasis>Delivering Events</emphasis> of <xref linkend="intro.core.release" xrefstyle="template:%t"/>.</para>

    <para>The <code>ConfigurationEvent</code> object carries a factory PID (
    <xref linkend="org.osgi.service.cm.ConfigurationEvent.getFactoryPid--" xrefstyle="hyperlink"/> ) and a PID ( <xref linkend="org.osgi.service.cm.ConfigurationEvent.getPid--" xrefstyle="hyperlink"/> ). If the factory PID is <code>null</code>, the
    event is related to a Managed Service <code>Configuration</code> object,
    else the event is related to a Managed Service <code>Factory
    Configuration</code> object.</para>

    <para>The <code>ConfigurationEvent</code> object can deliver the following
    events from the <xref linkend="org.osgi.service.cm.ConfigurationEvent.getType--" xrefstyle="hyperlink"/> method:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_DELETED" xrefstyle="hyperlink"/> - The <code>Configuration</code> object is
        deleted.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_UPDATED" xrefstyle="hyperlink"/> - The <code>Configuration</code> object is
        updated.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_LOCATION_CHANGED" xrefstyle="hyperlink"/> - The location of the
        <code>Configuration</code> object changed.</para>
      </listitem>
    </itemizedlist>

    <para>The Configuration Event also carries the
    <code>ServiceReference</code> object of the Configuration Admin service
    that generated the event.</para>

    <section>
      <title>Event Admin Service and Configuration Change Events</title>

      <para>Configuration events must be delivered asynchronously by the
      Configuration Admin implementation, if present. The topic of a
      configuration event must be:</para>

      <programlisting>org/osgi/service/cm/ConfigurationEvent/&lt;eventtype&gt;</programlisting>

      <para>The &lt;event type&gt; can be any of the following:</para>

      <programlisting><xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_DELETED" xrefstyle="hyperlink"/>
<xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_UPDATED" xrefstyle="hyperlink"/>
<xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_LOCATION_CHANGED" xrefstyle="hyperlink"/></programlisting>

      <para>The properties of a configuration event are:</para>

      <itemizedlist>
        <listitem>
          <para><code>cm.factoryPid</code> - (<code>String</code>) The factory
          PID of the associated <code>Configuration</code> object, if the
          target is a Managed Service Factory. Otherwise not set.</para>
        </listitem>

        <listitem>
          <para><code>cm.pid</code> - (<code>String</code>) The PID of the
          associated <code>Configuration</code> object.</para>
        </listitem>

        <listitem>
          <para><code>service</code> - (<code>ServiceReference</code>) The
          Service Reference of the Configuration Admin service.</para>
        </listitem>

        <listitem>
          <para><code>service.id</code> - (<code>Long</code>) The
          Configuration Admin service's ID.</para>
        </listitem>

        <listitem>
          <para><code>service.objectClass</code> - (<code>String[]</code>) The
          Configuration Admin service's object class (which must include
          <code>org.osgi.service.cm.ConfigurationAdmin</code>)</para>
        </listitem>

        <listitem>
          <para><code>service.pid</code> - (<code>String</code>) The
          Configuration Admin service's persistent identity, if set.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="i1459884">
    <title>Configuration Plugin</title>

    <para>The Configuration Admin service allows third-party applications to
    participate in the configuration process. Bundles that register a service
    object under a <code>ConfigurationPlugin</code> interface can process the
    configuration dictionary just before it reaches the configuration target
    service.</para>

    <para xml:id="i1490844">Plug-ins allow sufficiently privileged bundles to
    intercept configuration dictionaries just <emphasis>before</emphasis> they
    must be passed to the intended Managed Service or Managed Service Factory
    but <emphasis>after</emphasis> the properties are stored. The changes the
    plug-in makes are dynamic and must not be stored. The plug-in must only be
    called when an update takes place while it is registered and there is a
    valid dictionary. The plugin is not called when a configuration is
    deleted.</para>

    <para>The <code>ConfigurationPlugin</code> interface has only one method:
    <xref linkend="org.osgi.service.cm.ConfigurationPlugin.modifyConfiguration-ServiceReference-Dictionary-" xrefstyle="hyperlink"/>. This method inspects or modifies configuration
    data.</para>

    <para xml:id="i1490848">All plug-ins in the service registry must be
    traversed and called before the properties are passed to the configuration
    target service. Each Configuration Plugin object gets a chance to inspect
    the existing data, look at the target object, which can be a
    <code>ManagedService</code> object or a <code>ManagedServiceFactory</code>
    object, and modify the properties of the configuration dictionary. The
    changes made by a plug-in must be visible to plugins that are called
    later.</para>

    <para><code>ConfigurationPlugin</code> objects should not modify
    properties that belong to the configuration properties of the target
    service unless the implications are understood. This functionality is
    mainly intended to provide functions that leverage the Framework service
    registry. The changes made by the plugin should normally not be validated.
    However, the Configuration Admin must ignore changes to the automatic
    properties as described in <xref linkend="i1374751"/>.</para>

    <para>For example, a Configuration Plugin service may add a physical
    location property to a service. This property can be leveraged by
    applications that want to know where a service is physically located. This
    scenario could be carried out without any further support of the service
    itself, except for the general requirement that the service should
    propagate the public properties it receives from the Configuration Admin
    service to the service registry.</para>

    <figure>
      <title>Order of Configuration Plugin Services</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.722in" contentwidth="7.000in" fileref="config-plugin-order.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <section xml:id="i1490850">
      <title>Limiting The Targets</title>

      <para xml:id="i1490849">A <code>ConfigurationPlugin</code> object may
      optionally specify a <code>cm.target</code> registration property. This
      value is the PID of the configuration target whose configuration updates
      the <code>ConfigurationPlugin</code> object wants to intercept.</para>

      <para>The <code>ConfigurationPlugin</code> object must then only be
      called with updates for the configuration target service with the
      specified PID. For a factory target service, the factory PID is used and
      the plugin will see all instances of the factory. Omitting the
      <code>cm.target</code> registration property means that it is called for
      <emphasis>all</emphasis> configuration updates.</para>
    </section>

    <section>
      <title>Example of Property Expansion</title>

      <para>Consider a Managed Service that has a configuration property
      <code>service.to</code> with the value
      <code>(objectclass=com.acme.Alarm</code>). When the Configuration Admin
      service sets this property on the target service, a
      <code>ConfigurationPlugin</code> object may replace the
      <code>(objectclass=com.acme.Alarm)</code> filter with an array of
      existing alarm systems' PIDs as follows:</para>

      <programlisting>ID "service.to=[32434,232,12421,1212]"</programlisting>

      <para>A new Alarm Service with <code>service.pid=343</code> is
      registered, requiring that the list of the target service be updated.
      The bundle which registered the Configuration Plugin service, therefore,
      wants to set the <code>service.to</code> registration property on the
      target service. It does <emphasis>not</emphasis> do this by calling
      <code>ManagedService.updated</code> directly for several reasons:</para>

      <itemizedlist>
        <listitem>
          <para>In a securely configured system, it should not have the
          permission to make this call or even obtain the target
          service.</para>
        </listitem>

        <listitem>
          <para>It could get into race conditions with the Configuration Admin
          service if it had the permissions in the previous bullet. Both
          services would compete for access simultaneously.</para>
        </listitem>
      </itemizedlist>

      <para>Instead, it must get the <code>Configuration</code> object from
      the Configuration Admin service and call the <code>update</code> method
      on it.</para>

      <para>The Configuration Admin service must schedule a new update cycle
      on another thread, and sometime in the future must call
      <code>ConfigurationPlugin.modifyProperties</code>. The
      <code>ConfigurationPlugin</code> object could then set the
      <code>service.to</code> property to <code>[32434,232,12421,1212,
      343]</code>. After that, the Configuration Admin service must call
      <code>updated</code> on the target service with the new
      <code>service.to</code> list.</para>
    </section>

    <section xml:id="i1490867">
      <title>Configuration Data Modifications</title>

      <para>Modifications to the configuration dictionary are still under the
      control of the Configuration Admin service, which must determine whether
      to accept the changes, hide critical variables, or deny the changes for
      other reasons.</para>

      <para>The <code>ConfigurationPlugin</code> interface must also allow
      plugins to detect configuration updates to the service via the callback.
      This ability allows them to synchronize the configuration updates with
      transient information.</para>
    </section>

    <section>
      <title>Forcing a Callback</title>

      <para>If a bundle needs to force a Configuration Plugin service to be
      called again, it must fetch the appropriate <code>Configuration</code>
      object from the Configuration Admin service and call the
      <code>update()</code> method (the no parameter version) on this object.
      This call forces an update with the current configuration dictionary so
      that all applicable plug-ins get called again.</para>
    </section>

    <section>
      <title>Calling Order</title>

      <para>The order in which the <code>ConfigurationPlugin</code> objects
      are called must depend on the <code>service.cmRanking</code>
      configuration property of the <code>ConfigurationPlugin</code> object.
      <xref linkend="i1624384"/> shows the usage of the
      <code>service.cmRanking</code> property for the order of calling the
      Configuration Plugin services.</para>

      <table xml:id="i1624384">
        <title><code>service.cmRanking</code> Usage For Ordering</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>service.cmRanking value</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>&lt; 0</code></entry>

              <entry><para>The Configuration Plugin service should not modify
              properties and must be called before any modifications are
              made.</para></entry>
            </row>

            <row>
              <entry><code>&gt;= 0 &amp;&amp; &lt;= 1000</code></entry>

              <entry><para xml:id="i1624378">The Configuration Plugin service
              modifies the configuration data. The calling order should be
              based on the value of the <code>service.cmRanking</code>
              property.</para></entry>
            </row>

            <row>
              <entry><code>&gt; 1000</code></entry>

              <entry><para>The Configuration Plugin service should not modify
              data and is called after all modifications are
              made.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>

  <section xml:id="i1288153">
    <title>Meta Typing</title>

    <para>This section discusses how the Metatype specification is used in the
    context of a Configuration Admin service.</para>

    <para>When a Managed Service or Managed Service Factory is registered, the
    service object may also implement the <code>MetaTypeProvider</code>
    interface.</para>

    <para>If the Managed Service or Managed Service Factory object implements
    the <code>MetaTypeProvider</code> interface, a management bundle may
    assume that the associated <code>ObjectClassDefinition</code> object can
    be used to configure the service.</para>

    <para>The <code>ObjectClassDefinition</code> and
    <code>AttributeDefinition</code> objects contain sufficient information to
    automatically build simple user interfaces. They can also be used to
    augment dedicated interfaces with accurate validations.</para>

    <para>When the Metatype specification is used, care should be taken to
    match the capabilities of the metatype package to the capabilities of the
    Configuration Admin service specification. Specifically:</para>

    <itemizedlist>
      <listitem>
        <para>The metatype specification cannot describe nested arrays and
        lists or arrays/lists of mixed type.</para>
      </listitem>
    </itemizedlist>

    <para>This specification does not address how the metatype is made
    available to a management system due to the many open issues regarding
    remote management.</para>
  </section>

  <section>
    <title>Security</title>

    <section xml:id="i1693439">
      <title>Configuration Permission</title>

      <para>Every bundle has the implicit right to receive and configure
      configurations with a location that exactly matches the Bundle's
      location or that is <code>null</code>. For all other situations the
      Configuration Admin must verify that the configuring and to be updated
      bundles have a Configuration Permission that matches the Configuration's
      location.</para>

      <para>The resource name of this permission maps to the location of the
      Configuration, the location can control the visibility of a
      Configuration for a bundle. The resource name is compared with the
      actual configuration location using the OSGi Filter sub-string matching.
      The question mark for multi-locations is part of the given resource
      name. The Configure Permission has the following actions:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.cm.ConfigurationPermission.CONFIGURE" xrefstyle="hyperlink"/> - Can manage matching configurations</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.cm.ConfigurationPermission.TARGET" xrefstyle="hyperlink"/> - Can be updated with a matching
          configuration</para>
        </listitem>
      </itemizedlist>

      <para>To be able to set the location to <code>null</code> requires a
      <code>ConfigurationPermission[*,</code> <xref linkend="org.osgi.service.cm.ConfigurationPermission.CONFIGURE" xrefstyle="hyperlink"/> <code>]</code>.</para>

      <para>It is possible to deny bundles the use of multi-locations by using
      Conditional Permission Admin's deny model.</para>
    </section>

    <section>
      <title>Permissions Summary</title>

      <para>Configuration Admin service security is implemented using Service
      Permission and Configuration Permission. The following table summarizes
      the permissions needed by the Configuration Admin bundle itself, as well
      as the typical permissions needed by the bundles with which it
      interacts.</para>

      <para>Configuration Admin:</para>

      <programlisting>ServicePermission[ ..ConfigurationAdmin, REGISTER]
ServicePermission[ ..ManagedService, GET ]
ServicePermission[ ..ManagedServiceFactory, GET ]
ServicePermission[ ..ConfigurationPlugin, GET ]
ConfigurationPermission[ *, CONFIGURE ]
AdminPermission[ *, METADATA ]</programlisting>

      <para>Managed Service:</para>

      <programlisting>ServicePermission[ ..ConfigurationAdmin, GET]
ServicePermission[ ..ManagedService, REGISTER ]
ConfigurationPermission[ ... , TARGET ]</programlisting>

      <para>Managed Service Factory:</para>

      <programlisting>ServicePermission[ ..ConfigurationAdmin, GET]
ServicePermission[ ..ManagedServiceFactory, REGISTER ]
ConfigurationPermission[ ... , TARGET ]</programlisting>

      <para>Configuration Plugin:</para>

      <programlisting>ServicePermission[ ..ConfigurationPlugin,REGISTER ]</programlisting>

      <para>Configuration Listener:</para>

      <programlisting>ServicePermission[ ..ConfigurationListener,REGISTER ]</programlisting>

      <para>The Configuration Admin service must have <code>ServicePermission[
      ConfigurationAdmin, REGISTER]</code>. It will also be the only bundle
      that needs the <code>ServicePermission[ManagedService |
      ManagedServiceFactory | ConfigurationPlugin, GET]</code>. No other
      bundle should be allowed to have <code>GET</code> permission for these
      interfaces. The Configuration Admin bundle must also hold
      <code>ConfigurationPermission[*,CONFIGURE]</code>.</para>

      <para>Bundles that can be configured must have the
      <code>ServicePermission[ManagedService | ManagedServiceFactory,
      REGISTER]</code>. Bundles registering <code>ConfigurationPlugin</code>
      objects must have <code>ServicePermission[ConfigurationPlugin,
      REGISTER]</code>. The Configuration Admin service must trust all
      services registered with the <code>ConfigurationPlugin</code> interface.
      Only the Configuration Admin service should have
      <code>ServicePermission[ ConfigurationPlugin, GET]</code>.</para>

      <para>If a Managed Service or Managed Service Factory is implemented by
      an object that is also registered under another interface, it is
      possible, although inappropriate, for a bundle other than the
      Configuration Admin service implementation to call the
      <code>updated</code> method. Security-aware bundles can avoid this
      problem by having their updated methods check that the caller has
      <code>ConfigurationPermission[*,CONFIGURE]</code>.</para>

      <para>Bundles that want to change their own configuration need
      <code>ServicePermission[ConfigurationAdmin, GET]</code>. A bundle with
      <code>ConfigurationPermission[*,CONFIGURE]</code>is allowed to access
      and modify any <code>Configuration</code> object.</para>

      <para>Pre-configuration of bundles requires
      <code>ConfigurationPermission[location,CONFIGURE]</code> (location can
      use the sub-string matching rules of the Filter) because the methods
      that specify a location require this permission.</para>
    </section>

    <section>
      <title>Configuration and Permission Administration</title>

      <para>Configuration information has a direct influence on the
      permissions needed by a bundle. For example, when the Configuration
      Admin Bundle orders a bundle to use port 2011 for a console, that bundle
      also needs permission for listening to incoming connections on that
      port.</para>

      <para>Both a simple and a complex solution exist for this
      situation.</para>

      <para>The simple solution for this situation provides the bundle with a
      set of permissions that do not define specific values but allow a range
      of values. For example, a bundle could listen to ports above 1024
      freely. All these ports could then be used for configuration.</para>

      <para>The other solution is more complicated. In an environment where
      there is very strong security, the bundle would only be allowed access
      to a specific port. This situation requires an atomic update of both the
      configuration data and the permissions. If this update was not atomic, a
      potential security hole would exist during the period of time that the
      set of permissions did not match the configuration.</para>

      <para>The following scenario can be used to update a configuration and
      the security permissions:</para>

      <orderedlist>
        <listitem>
          <para>Stop the bundle.</para>
        </listitem>

        <listitem>
          <para>Update the appropriate <code>Configuration</code> object via
          the Configuration Admin service.</para>
        </listitem>

        <listitem>
          <para>Update the permissions in the Framework.</para>
        </listitem>

        <listitem>
          <para>Start the bundle.</para>
        </listitem>
      </orderedlist>

      <para>This scenario would achieve atomicity from the point of view of
      the bundle.</para>
    </section>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.cm" xml:id="org.osgi.service.cm" xml:base="../../generated/javadoc/docbook/org.osgi.service.cm.xml">
   <title>org.osgi.service.cm</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.cm-version">Version 1.5</releaseinfo>
      <edition xml:id="org.osgi.service.cm-version.number">1.5</edition>
   </info>
   <para>
Configuration Admin Package Version 1.5.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.cm; version="[1.5,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.cm; version="[1.5,1.6)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.Configuration">
                  <code>Configuration</code>
               </link> - 
The configuration information for a <code>ManagedService</code> or
 <code>ManagedServiceFactory</code> object.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.ConfigurationAdmin">
                  <code>ConfigurationAdmin</code>
               </link> - 
Service for administering configuration data.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.ConfigurationEvent">
                  <code>ConfigurationEvent</code>
               </link> - 
A Configuration Event.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.ConfigurationException">
                  <code>ConfigurationException</code>
               </link> - 
An <code>Exception</code> class to inform the Configuration Admin service of
 problems with configuration data.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.ConfigurationListener">
                  <code>ConfigurationListener</code>
               </link> - 
Listener for Configuration Events.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.ConfigurationPermission">
                  <code>ConfigurationPermission</code>
               </link> - 
Indicates a bundle's authority to configure bundles or be updated by
 Configuration Admin.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.ConfigurationPlugin">
                  <code>ConfigurationPlugin</code>
               </link> - 
A service interface for processing configuration dictionary before the
 update.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.ManagedService">
                  <code>ManagedService</code>
               </link> - 
A service that can receive configuration data from a Configuration Admin
 service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.ManagedServiceFactory">
                  <code>ManagedServiceFactory</code>
               </link> - 
Manage multiple service instances.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.SynchronousConfigurationListener">
                  <code>SynchronousConfigurationListener</code>
               </link> - 
Synchronous Listener for Configuration Events.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section>
      <title>Permissions</title>
      <section>
         <title>
            <link linkend="org.osgi.service.cm.Configuration">Configuration</link>
         </title>
         <itemizedlist>
            <listitem>
               <para>
                  <code>
                     <link linkend="org.osgi.service.cm.Configuration.setBundleLocation-String-">setBundleLocation(String)</link>
                  </code>
               </para>
               <itemizedlist>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission[this.location,CONFIGURE]</code> -  if            this.location is not <code>null</code>
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission[location,CONFIGURE]</code> -  if location is not            <code>null</code>
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission["*",CONFIGURE]</code> -  if this.location is            <code>null</code> or if location is <code>null</code>
                     </para>
                  </listitem>
               </itemizedlist>
            </listitem>
            <listitem>
               <para>
                  <code>
                     <link linkend="org.osgi.service.cm.Configuration.getBundleLocation--">getBundleLocation()</link>
                  </code>
               </para>
               <itemizedlist>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission[this.location,CONFIGURE]</code> -  if            this.location is not <code>null</code>
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission["*",CONFIGURE]</code> -  if this.location is            <code>null</code>
                     </para>
                  </listitem>
               </itemizedlist>
            </listitem>
         </itemizedlist>
      </section>
      <section>
         <title>
            <link linkend="org.osgi.service.cm.ConfigurationAdmin">ConfigurationAdmin</link>
         </title>
         <itemizedlist>
            <listitem>
               <para>
                  <code>
                     <link linkend="org.osgi.service.cm.ConfigurationAdmin.createFactoryConfiguration-String-String-">createFactoryConfiguration(String,String)</link>
                  </code>
               </para>
               <itemizedlist>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission[location,CONFIGURE]</code> -  if location is not            <code>null</code>
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission["*",CONFIGURE]</code> -  if location is            <code>null</code>
                     </para>
                  </listitem>
               </itemizedlist>
            </listitem>
            <listitem>
               <para>
                  <code>
                     <link linkend="org.osgi.service.cm.ConfigurationAdmin.getConfiguration-String-String-">getConfiguration(String,String)</link>
                  </code>
               </para>
               <itemizedlist>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission[*,CONFIGURE]</code> -  if location is            <code>null</code> or if the returned configuration <code>c</code> already            exists and c.location is <code>null</code>
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission[location,CONFIGURE]</code> -  if location is not            <code>null</code>
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission[c.location,CONFIGURE]</code> -  if the returned            configuration <code>c</code> already exists and c.location is not            <code>null</code>
                     </para>
                  </listitem>
               </itemizedlist>
            </listitem>
            <listitem>
               <para>
                  <code>
                     <link linkend="org.osgi.service.cm.ConfigurationAdmin.getConfiguration-String-">getConfiguration(String)</link>
                  </code>
               </para>
               <itemizedlist>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission[c.location,CONFIGURE]</code> -  If the            configuration <code>c</code> already exists and c.location is not            <code>null</code>
                     </para>
                  </listitem>
               </itemizedlist>
            </listitem>
            <listitem>
               <para>
                  <code>
                     <link linkend="org.osgi.service.cm.ConfigurationAdmin.listConfigurations-String-">listConfigurations(String)</link>
                  </code>
               </para>
               <itemizedlist>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission[c.location,CONFIGURE]</code> -  Only            configurations <code>c</code> are returned for which the caller has            this permission</para>
                  </listitem>
               </itemizedlist>
            </listitem>
         </itemizedlist>
      </section>
      <section>
         <title>
            <link linkend="org.osgi.service.cm.ManagedService">ManagedService</link>
         </title>
         <itemizedlist>
            <listitem>
               <para>
                  <code>
                     <link linkend="org.osgi.service.cm.ManagedService.updated-Dictionary-">updated(Dictionary)</link>
                  </code>
               </para>
               <itemizedlist>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission[c.location,TARGET]</code> -  Required by the            bundle that registered this service</para>
                  </listitem>
               </itemizedlist>
            </listitem>
         </itemizedlist>
      </section>
      <section>
         <title>
            <link linkend="org.osgi.service.cm.ManagedServiceFactory">ManagedServiceFactory</link>
         </title>
         <itemizedlist>
            <listitem>
               <para>
                  <code>
                     <link linkend="org.osgi.service.cm.ManagedServiceFactory.updated-String-Dictionary-">updated(String,Dictionary)</link>
                  </code>
               </para>
               <itemizedlist>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission[c.location,TARGET]</code> -  Required by the            bundle that registered this service</para>
                  </listitem>
               </itemizedlist>
            </listitem>
         </itemizedlist>
      </section>
   </section>
   <section role="class" xreflabel="Configuration" xml:id="org.osgi.service.cm.Configuration">
      <title>public interface Configuration</title>
      <para>
The configuration information for a <code>ManagedService</code> or
 <code>ManagedServiceFactory</code> object.
 
 The Configuration Admin service uses this interface to represent the
 configuration information for a <code>ManagedService</code> or for a service
 instance of a <code>ManagedServiceFactory</code>.
 
 </para>
      <para>
 A <code>Configuration</code> object contains a configuration dictionary and allows
 the properties to be updated via this object. Bundles wishing to receive
 configuration dictionaries do not need to use this class - they register a
 <code>ManagedService</code> or <code>ManagedServiceFactory</code>. Only administrative
 bundles, and bundles wishing to update their own configurations need to use
 this class.
 
 </para>
      <para>
 The properties handled in this configuration have case insensitive
 <code>String</code> objects as keys. However, case must be preserved from the last
 set key/value.
 </para>
      <para>
 A configuration can be <emphasis>bound</emphasis> to a specific bundle or to a region of
 bundles using the <emphasis>location</emphasis>. In its simplest form the location is the
 location of the target bundle that registered a Managed Service or a Managed
 Service Factory. However, if the location starts with <code>?</code> then the
 location indicates multiple delivery. In such a case the configuration must
 be delivered to all targets.
 
 If security is on, the Configuration Permission can be used to restrict the
 targets that receive updates. The Configuration Admin must only update a
 target when the configuration location matches the location of the target's
 bundle or the target bundle has a Configuration Permission with the action
 <link linkend="org.osgi.service.cm.ConfigurationPermission.TARGET">ConfigurationPermission.TARGET</link> and a name that matches the
 configuration location. The name in the permission may contain wildcards (
 <code>'*'</code>) to match the location using the same substring matching rules as
 <link linkend="org.osgi.framework.Filter">Filter</link>.
 
 Bundles can always create, manipulate, and be updated from configurations
 that have a location that matches their bundle location.
 
 </para>
      <para>
 If a configuration's location is <code>null</code>, it is not yet bound to a
 location. It will become bound to the location of the first bundle that
 registers a <code>ManagedService</code> or <code>ManagedServiceFactory</code> object
 with the corresponding PID.
 </para>
      <para>
 The same <code>Configuration</code> object is used for configuring both a Managed
 Service Factory and a Managed Service. When it is important to differentiate
 between these two the term "factory configuration" is used.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="delete()" xml:id="org.osgi.service.cm.Configuration.delete--">
         <title>public void delete() throws IOException</title>
         <para role="description">
Delete this <code>Configuration</code> object.
 
 Removes this configuration object from the persistent store. Notify
 asynchronously the corresponding Managed Service or Managed Service
 Factory. A <link linkend="org.osgi.service.cm.ManagedService">ManagedService</link> object is notified by a call to its
 <code>updated</code> method with a <code>null</code> properties argument. A
 <link linkend="org.osgi.service.cm.ManagedServiceFactory">ManagedServiceFactory</link> object is notified by a call to its
 <code>deleted</code> method.
 
 </para>
         <para>
 Also notifies all Configuration Listeners with a
 <link linkend="org.osgi.service.cm.ConfigurationEvent.CM_DELETED">ConfigurationEvent.CM_DELETED</link> event.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– If delete fails.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this configuration has been deleted.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.cm.Configuration.equals-Object-">
         <title>public boolean equals(Object other)</title>
         <formalpara role="parameter">
            <title>other</title>
            <para>
               <code>Configuration</code> object to compare against</para>
         </formalpara>
         <para role="description">
Equality is defined to have equal PIDs
 
 Two Configuration objects are equal when their PIDs are equal.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if equal, <code>false</code> if not a
         <code>Configuration</code> object or one with a different PID.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getBundleLocation()" xml:id="org.osgi.service.cm.Configuration.getBundleLocation--">
         <title>public String getBundleLocation()</title>
         <para role="description">
Get the bundle location.
 
 Returns the bundle location or region to which this configuration is
 bound, or <code>null</code> if it is not yet bound to a bundle location or
 region. If the location starts with <code>?</code> then the configuration is
 delivered to all targets and not restricted to a single bundle.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>location to which this configuration is bound, or <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this configuration has been deleted.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– when the required permissions are not available   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Security</title>
            <para>
               <code>ConfigurationPermission[this.location,CONFIGURE]]
          </code>–  if            this.location is not <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title/>
            <para>
               <code>ConfigurationPermission["*",CONFIGURE]]
          </code>–  if this.location is            <code>null</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getChangeCount()" xml:id="org.osgi.service.cm.Configuration.getChangeCount--">
         <title>public long getChangeCount()</title>
         <para role="description">
Get the change count.
 
 Each Configuration must maintain a change counter that is incremented
 with a positive value every time the configuration is updated and its
 properties are stored. The counter must be incremented before the targets
 are updated and events are sent out.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A monotonically increasing value reflecting changes in this
         Configuration.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this configuration has been deleted.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFactoryPid()" xml:id="org.osgi.service.cm.Configuration.getFactoryPid--">
         <title>public String getFactoryPid()</title>
         <para role="description">
For a factory configuration return the PID of the corresponding Managed
 Service Factory, else return <code>null</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>factory PID or <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this configuration has been deleted.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getPid()" xml:id="org.osgi.service.cm.Configuration.getPid--">
         <title>public String getPid()</title>
         <para role="description">
Get the PID for this <code>Configuration</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the PID for this <code>Configuration</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– if this configuration has been deleted   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getProperties()" xml:id="org.osgi.service.cm.Configuration.getProperties--">
         <title>public Dictionary&lt;String,Object&gt; getProperties()</title>
         <para role="description">
Return the properties of this <code>Configuration</code> object.
 
 The <code>Dictionary</code> object returned is a private copy for the caller
 and may be changed without influencing the stored configuration. The keys
 in the returned dictionary are case insensitive and are always of type
 <code>String</code>.
 
 </para>
         <para>
 If called just after the configuration is created and before update has
 been called, this method returns <code>null</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A private copy of the properties for the caller or <code>null</code>.
         These properties must not contain the "service.bundleLocation"
         property. The value of this property may be obtained from the
         <link linkend="org.osgi.service.cm.Configuration.getBundleLocation--">getBundleLocation()</link> method.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this configuration has been deleted.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.cm.Configuration.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Hash code is based on PID.
 
 The hash code for two Configuration objects must be the same when the
 Configuration PID's are the same.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>hash code for this Configuration object</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setBundleLocation(String)" xml:id="org.osgi.service.cm.Configuration.setBundleLocation-String-">
         <title>public void setBundleLocation(String location)</title>
         <formalpara role="parameter">
            <title>location</title>
            <para>a location, region, or <code>null</code>
            </para>
         </formalpara>
         <para role="description">
Bind this <code>Configuration</code> object to the specified location.
 
 If the location parameter is <code>null</code> then the <code>Configuration</code>
 object will not be bound to a location/region. It will be set to the
 bundle's location before the first time a Managed Service/Managed Service
 Factory receives this <code>Configuration</code> object via the updated method
 and before any plugins are called. The bundle location or region will be
 set persistently.
 
 </para>
         <para>
 If the location starts with <code>?</code> then all targets registered with
 the given PID must be updated.
 
 </para>
         <para>
 If the location is changed then existing targets must be informed. If
 they can no longer see this configuration, the configuration must be
 deleted or updated with <code>null</code>. If this configuration becomes
 visible then they must be updated with this configuration.
 
 </para>
         <para>
 Also notifies all Configuration Listeners with a
 <link linkend="org.osgi.service.cm.ConfigurationEvent.CM_LOCATION_CHANGED">ConfigurationEvent.CM_LOCATION_CHANGED</link> event.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this configuration has been deleted.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– when the required permissions are not available   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– when the required permissions are not available   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Security</title>
            <para>
               <code>ConfigurationPermission[this.location,CONFIGURE]]
          </code>–  if            this.location is not <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title/>
            <para>
               <code>ConfigurationPermission[location,CONFIGURE]]
          </code>–  if location is not            <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title/>
            <para>
               <code>ConfigurationPermission["*",CONFIGURE]]
          </code>–  if this.location is            <code>null</code> or if location is <code>null</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="update(Dictionary)" xml:id="org.osgi.service.cm.Configuration.update-Dictionary-">
         <title>public void update(Dictionary&lt;String,?&gt; properties) throws IOException</title>
         <formalpara role="parameter">
            <title>properties</title>
            <para>the new set of properties for this configuration</para>
         </formalpara>
         <para role="description">
Update the properties of this <code>Configuration</code> object.
 
 Stores the properties in persistent storage after adding or overwriting
 the following properties:
 </para>
         <itemizedlist>
            <listitem>
               <para>"service.pid" : is set to be the PID of this configuration.</para>
            </listitem>
            <listitem>
               <para>"service.factoryPid" : if this is a factory configuration it is set
 to the factory PID else it is not set.</para>
            </listitem>
         </itemizedlist>
         <para>
 These system properties are all of type <code>String</code>.
 
 </para>
         <para>
 If the corresponding Managed Service/Managed Service Factory is
 registered, its updated method must be called asynchronously. Else, this
 callback is delayed until aforementioned registration occurs.
 
 </para>
         <para>
 Also notifies all Configuration Listeners with a
 <link linkend="org.osgi.service.cm.ConfigurationEvent.CM_UPDATED">ConfigurationEvent.CM_UPDATED</link> event.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if update cannot be made persistent   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the <code>Dictionary</code> object
         contains invalid configuration types or contains case variants of
         the same key name.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this configuration has been deleted.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="update()" xml:id="org.osgi.service.cm.Configuration.update--">
         <title>public void update() throws IOException</title>
         <para role="description">
Update the <code>Configuration</code> object with the current properties.
 
 Initiate the <code>updated</code> callback to the Managed Service or Managed
 Service Factory with the current properties asynchronously.
 
 </para>
         <para>
 This is the only way for a bundle that uses a Configuration Plugin
 service to initiate a callback. For example, when that bundle detects a
 change that requires an update of the Managed Service or Managed Service
 Factory via its <code>ConfigurationPlugin</code> object.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if update cannot access the properties in persistent
         storage   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this configuration has been deleted.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.cm.ConfigurationPlugin">ConfigurationPlugin</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ConfigurationAdmin" xml:id="org.osgi.service.cm.ConfigurationAdmin">
      <title>public interface ConfigurationAdmin</title>
      <para>
Service for administering configuration data.
 
 </para>
      <para>
 The main purpose of this interface is to store bundle configuration data
 persistently. This information is represented in <code>Configuration</code>
 objects. The actual configuration data is a <code>Dictionary</code> of properties
 inside a <code>Configuration</code> object.
 
 </para>
      <para>
 There are two principally different ways to manage configurations. First
 there is the concept of a Managed Service, where configuration data is
 uniquely associated with an object registered with the service registry.
 
 </para>
      <para>
 Next, there is the concept of a factory where the Configuration Admin service
 will maintain 0 or more <code>Configuration</code> objects for a Managed Service
 Factory that is registered with the Framework.
 
 </para>
      <para>
 The first concept is intended for configuration data about "things/services"
 whose existence is defined externally, e.g. a specific printer. Factories are
 intended for "things/services" that can be created any number of times, e.g.
 a configuration for a DHCP server for different networks.
 
 </para>
      <para>
 Bundles that require configuration should register a Managed Service or a
 Managed Service Factory in the service registry. A registration property
 named <code>service.pid</code> (persistent identifier or PID) must be used to
 identify this Managed Service or Managed Service Factory to the Configuration
 Admin service.
 
 </para>
      <para>
 When the ConfigurationAdmin detects the registration of a Managed Service, it
 checks its persistent storage for a configuration object whose
 <code>service.pid</code> property matches the PID service property (
 <code>service.pid</code>) of the Managed Service. If found, it calls
 <link linkend="org.osgi.service.cm.ManagedService.updated-Dictionary-">ManagedService.updated(Dictionary)</link> method with the new properties.
 The implementation of a Configuration Admin service must run these call-backs
 asynchronously to allow proper synchronization.
 
 </para>
      <para>
 When the Configuration Admin service detects a Managed Service Factory
 registration, it checks its storage for configuration objects whose
 <code>service.factoryPid</code> property matches the PID service property of the
 Managed Service Factory. For each such <code>Configuration</code> objects, it
 calls the <code>ManagedServiceFactory.updated</code> method asynchronously with
 the new properties. The calls to the <code>updated</code> method of a
 <code>ManagedServiceFactory</code> must be executed sequentially and not overlap
 in time.
 
 </para>
      <para>
 In general, bundles having permission to use the Configuration Admin service
 can only access and modify their own configuration information. Accessing or
 modifying the configuration of other bundles requires
 <code>ConfigurationPermission[location,CONFIGURE]</code>, where location is the
 configuration location.
 
 </para>
      <para>
         <code>Configuration</code> objects can be <emphasis>bound</emphasis> to a specified bundle
 location or to a region (configuration location starts with <code>?</code>). If a
 location is not set, it will be learned the first time a target is
 registered. If the location is learned this way, the Configuration Admin
 service must detect if the bundle corresponding to the location is
 uninstalled. If this occurs, the <code>Configuration</code> object must be
 unbound, that is its location field is set back to <code>null</code>.
 
 </para>
      <para>
 If target's bundle location matches the configuration location it is always
 updated.
 
 </para>
      <para>
 If the configuration location starts with <code>?</code>, that is, the location is
 a region, then the configuration must be delivered to all targets registered
 with the given PID. If security is on, the target bundle must have
 Configuration Permission[location,TARGET], where location matches given the
 configuration location with wildcards as in the Filter substring match. The
 security must be verified using the
 <link linkend="org.osgi.framework.Bundle.hasPermission-Object-">org.osgi.framework.Bundle.hasPermission(Object)</link> method on the target
 bundle.
 
 </para>
      <para>
 If a target cannot be updated because the location does not match or it has
 no permission and security is active then the Configuration Admin service
 must not do the normal callback.
 
 </para>
      <para>
 The method descriptions of this class refer to a concept of "the calling
 bundle". This is a loose way of referring to the bundle which obtained the
 Configuration Admin service from the service registry. Implementations of
 <code>ConfigurationAdmin</code> must use a
 <link linkend="org.osgi.framework.ServiceFactory">org.osgi.framework.ServiceFactory</link> to support this concept.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="field" xreflabel="SERVICE_BUNDLELOCATION" xml:id="org.osgi.service.cm.ConfigurationAdmin.SERVICE_BUNDLELOCATION">
         <title>public static final String SERVICE_BUNDLELOCATION = "service.bundleLocation"</title>
         <para>
Configuration property naming the location of the bundle that is
 associated with a <code>Configuration</code> object. This property can be
 searched for but must not appear in the configuration dictionary for
 security reason. The property's value is of type <code>String</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SERVICE_FACTORYPID" xml:id="org.osgi.service.cm.ConfigurationAdmin.SERVICE_FACTORYPID">
         <title>public static final String SERVICE_FACTORYPID = "service.factoryPid"</title>
         <para>
Configuration property naming the Factory PID in the configuration
 dictionary. The property's value is of type <code>String</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="createFactoryConfiguration(String)" xml:id="org.osgi.service.cm.ConfigurationAdmin.createFactoryConfiguration-String-">
         <title>public Configuration createFactoryConfiguration(String factoryPid) throws IOException</title>
         <formalpara role="parameter">
            <title>factoryPid</title>
            <para>PID of factory (not <code>null</code>).</para>
         </formalpara>
         <para role="description">
Create a new factory <code>Configuration</code> object with a new PID.
 
 The properties of the new <code>Configuration</code> object are <code>null</code>
 until the first time that its <link linkend="org.osgi.service.cm.Configuration.update-Dictionary-">Configuration.update(Dictionary)</link>
 method is called.
 
 </para>
         <para>
 It is not required that the <code>factoryPid</code> maps to a registered
 Managed Service Factory.
 
 </para>
         <para>
 The <code>Configuration</code> object is bound to the location of the calling
 bundle. It is possible that the same factoryPid has associated
 configurations that are bound to different bundles. Bundles should only
 see the factory configurations that they are bound to or have the proper
 permission.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new <code>Configuration</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if access to persistent storage fails.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="createFactoryConfiguration(String,String)" xml:id="org.osgi.service.cm.ConfigurationAdmin.createFactoryConfiguration-String-String-">
         <title>public Configuration createFactoryConfiguration(String factoryPid,String location) throws IOException</title>
         <formalpara role="parameter">
            <title>factoryPid</title>
            <para>PID of factory (not <code>null</code>).</para>
         </formalpara>
         <formalpara role="parameter">
            <title>location</title>
            <para>A bundle location string, or <code>null</code>.</para>
         </formalpara>
         <para role="description">
Create a new factory <code>Configuration</code> object with a new PID.
 
 The properties of the new <code>Configuration</code> object are <code>null</code>
 until the first time that its <link linkend="org.osgi.service.cm.Configuration.update-Dictionary-">Configuration.update(Dictionary)</link>
 method is called.
 
 </para>
         <para>
 It is not required that the <code>factoryPid</code> maps to a registered
 Managed Service Factory.
 
 </para>
         <para>
 The <code>Configuration</code> is bound to the location specified. If this
 location is <code>null</code> it will be bound to the location of the first
 bundle that registers a Managed Service Factory with a corresponding PID.
 It is possible that the same factoryPid has associated configurations
 that are bound to different bundles. Bundles should only see the factory
 configurations that they are bound to or have the proper permission.
 
 </para>
         <para>
 If the location starts with <code>?</code> then the configuration must be
 delivered to all targets with the corresponding PID.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a new <code>Configuration</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if access to persistent storage fails.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– when the require permissions are not available   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Security</title>
            <para>
               <code>ConfigurationPermission[location,CONFIGURE]]
          </code>–  if location is not            <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title/>
            <para>
               <code>ConfigurationPermission["*",CONFIGURE]]
          </code>–  if location is            <code>null</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getConfiguration(String,String)" xml:id="org.osgi.service.cm.ConfigurationAdmin.getConfiguration-String-String-">
         <title>public Configuration getConfiguration(String pid,String location) throws IOException</title>
         <formalpara role="parameter">
            <title>pid</title>
            <para>Persistent identifier.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>location</title>
            <para>The bundle location string, or <code>null</code>.</para>
         </formalpara>
         <para role="description">
Get an existing <code>Configuration</code> object from the persistent store,
 or create a new <code>Configuration</code> object.
 
 </para>
         <para>
 If a <code>Configuration</code> with this PID already exists in Configuration
 Admin service return it. The location parameter is ignored in this case
 though it is still used for a security check.
 
 </para>
         <para>
 Else, return a new <code>Configuration</code> object. This new object is bound
 to the location and the properties are set to <code>null</code>. If the
 location parameter is <code>null</code>, it will be set when a Managed Service
 with the corresponding PID is registered for the first time. If the
 location starts with <code>?</code> then the configuration is bound to all
 targets that are registered with the corresponding PID.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An existing or new <code>Configuration</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if access to persistent storage fails.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– when the require permissions are not available   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Security</title>
            <para>
               <code>ConfigurationPermission[*,CONFIGURE]]
          </code>–  if location is            <code>null</code> or if the returned configuration <code>c</code> already            exists and c.location is <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title/>
            <para>
               <code>ConfigurationPermission[location,CONFIGURE]]
          </code>–  if location is not            <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title/>
            <para>
               <code>ConfigurationPermission[c.location,CONFIGURE]]
          </code>–  if the returned            configuration <code>c</code> already exists and c.location is not            <code>null</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getConfiguration(String)" xml:id="org.osgi.service.cm.ConfigurationAdmin.getConfiguration-String-">
         <title>public Configuration getConfiguration(String pid) throws IOException</title>
         <formalpara role="parameter">
            <title>pid</title>
            <para>persistent identifier.</para>
         </formalpara>
         <para role="description">
Get an existing or new <code>Configuration</code> object from the persistent
 store.
 
 If the <code>Configuration</code> object for this PID does not exist, create a
 new <code>Configuration</code> object for that PID, where properties are
 <code>null</code>. Bind its location to the calling bundle's location.
 
 </para>
         <para>
 Otherwise, if the location of the existing <code>Configuration</code> object
 is <code>null</code>, set it to the calling bundle's location.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>an existing or new <code>Configuration</code> matching the PID.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if access to persistent storage fails.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– when the required permission is not available   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Security</title>
            <para>
               <code>ConfigurationPermission[c.location,CONFIGURE]]
          </code>–  If the            configuration <code>c</code> already exists and c.location is not            <code>null</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="listConfigurations(String)" xml:id="org.osgi.service.cm.ConfigurationAdmin.listConfigurations-String-">
         <title>public Configuration[] listConfigurations(String filter) throws IOException, InvalidSyntaxException</title>
         <formalpara role="parameter">
            <title>filter</title>
            <para>A filter string, or <code>null</code> to retrieve all
        <code>Configuration</code> objects.</para>
         </formalpara>
         <para role="description">
List the current <code>Configuration</code> objects which match the filter.
 
 </para>
         <para>
 Only <code>Configuration</code> objects with non- <code>null</code> properties are
 considered current. That is, <code>Configuration.getProperties()</code> is
 guaranteed not to return <code>null</code> for each of the returned
 <code>Configuration</code> objects.
 
 </para>
         <para>
 When there is no security on then all configurations can be returned. If
 security is on, the caller must have
 ConfigurationPermission[location,CONFIGURE].
 
 </para>
         <para>
 The syntax of the filter string is as defined in the <link linkend="org.osgi.framework.Filter">Filter</link>
 class. The filter can test any configuration properties including the
 following:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>service.pid</code> - the persistent identity</para>
            </listitem>
            <listitem>
               <para>
                  <code>service.factoryPid</code> - the factory PID, if applicable</para>
            </listitem>
            <listitem>
               <para>
                  <code>service.bundleLocation</code> - the bundle location</para>
            </listitem>
         </itemizedlist>
         <para>
 The filter can also be <code>null</code>, meaning that all
 <code>Configuration</code> objects should be returned.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>All matching <code>Configuration</code> objects, or <code>null</code> if
         there aren't any.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if access to persistent storage fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>InvalidSyntaxException</code>– if the filter string is invalid   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Security</title>
            <para>
               <code>ConfigurationPermission[c.location,CONFIGURE]]
          </code>–  Only            configurations <code>c</code> are returned for which the caller has            this permission</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ConfigurationEvent" xml:id="org.osgi.service.cm.ConfigurationEvent">
      <title>public class ConfigurationEvent</title>
      <para>
A Configuration Event.
 
 </para>
      <para>
         <code>ConfigurationEvent</code> objects are delivered to all registered
 <code>ConfigurationListener</code> service objects. ConfigurationEvents must be
 delivered in chronological order with respect to each listener.
 
 </para>
      <para>
 A type code is used to identify the type of event. The following event types
 are defined:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.ConfigurationEvent.CM_UPDATED">CM_UPDATED</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.ConfigurationEvent.CM_DELETED">CM_DELETED</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.ConfigurationEvent.CM_LOCATION_CHANGED">CM_LOCATION_CHANGED</link>
            </para>
         </listitem>
      </itemizedlist>
      <para>
 Additional event types may be defined in the future.
 
 </para>
      <para>
 Security Considerations. <code>ConfigurationEvent</code> objects do not provide
 <code>Configuration</code> objects, so no sensitive configuration information is
 available from the event. If the listener wants to locate the
 <code>Configuration</code> object for the specified pid, it must use
 <code>ConfigurationAdmin</code>.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.cm.ConfigurationListener">ConfigurationListener</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.2</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="CM_DELETED" xml:id="org.osgi.service.cm.ConfigurationEvent.CM_DELETED">
         <title>public static final int CM_DELETED = 2</title>
         <para>
A <code>Configuration</code> has been deleted.
 
 </para>
         <para>
 This <code>ConfigurationEvent</code> type that indicates that a
 <code>Configuration</code> object has been deleted.
 
 An event is fired when a call to <link linkend="org.osgi.service.cm.Configuration.delete--">Configuration.delete()</link>
 successfully deletes a configuration.</para>
      </section>
      <section role="field" xreflabel="CM_LOCATION_CHANGED" xml:id="org.osgi.service.cm.ConfigurationEvent.CM_LOCATION_CHANGED">
         <title>public static final int CM_LOCATION_CHANGED = 3</title>
         <para>
The location of a <code>Configuration</code> has been changed.
 
 </para>
         <para>
 This <code>ConfigurationEvent</code> type that indicates that the location of
 a <code>Configuration</code> object has been changed.
 
 An event is fired when a call to
 <link linkend="org.osgi.service.cm.Configuration.setBundleLocation-String-">Configuration.setBundleLocation(String)</link> successfully changes the
 location.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.4</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="CM_UPDATED" xml:id="org.osgi.service.cm.ConfigurationEvent.CM_UPDATED">
         <title>public static final int CM_UPDATED = 1</title>
         <para>
A <code>Configuration</code> has been updated.
 
 </para>
         <para>
 This <code>ConfigurationEvent</code> type that indicates that a
 <code>Configuration</code> object has been updated with new properties.
 
 An event is fired when a call to <link linkend="org.osgi.service.cm.Configuration.update-Dictionary-">Configuration.update(Dictionary)</link>
 successfully changes a configuration.</para>
      </section>
      <section role="method" xreflabel="ConfigurationEvent(ServiceReference,int,String,String)" xml:id="org.osgi.service.cm.ConfigurationEvent.ConfigurationEvent-ServiceReference-int-String-String-">
         <title>public  ConfigurationEvent(ServiceReference&lt;ConfigurationAdmin&gt; reference,int type,String factoryPid,String pid)</title>
         <formalpara role="parameter">
            <title>reference</title>
            <para>The <code>ServiceReference</code> object of the Configuration
        Admin service that created this event.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>The event type. See <link linkend="org.osgi.service.cm.ConfigurationEvent.getType--">getType()</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>factoryPid</title>
            <para>The factory pid of the associated configuration if the
        target of the configuration is a ManagedServiceFactory. Otherwise
        <code>null</code> if the target of the configuration is a
        ManagedService.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>pid</title>
            <para>The pid of the associated configuration.</para>
         </formalpara>
         <para role="description">
Constructs a <code>ConfigurationEvent</code> object from the given
 <code>ServiceReference</code> object, event type, and pids.
   </para>
      </section>
      <section role="method" xreflabel="getFactoryPid()" xml:id="org.osgi.service.cm.ConfigurationEvent.getFactoryPid--">
         <title>public String getFactoryPid()</title>
         <para role="description">
Returns the factory pid of the associated configuration.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns the factory pid of the associated configuration if the
         target of the configuration is a ManagedServiceFactory. Otherwise
         <code>null</code> if the target of the configuration is a
         ManagedService.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getPid()" xml:id="org.osgi.service.cm.ConfigurationEvent.getPid--">
         <title>public String getPid()</title>
         <para role="description">
Returns the pid of the associated configuration.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns the pid of the associated configuration.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getReference()" xml:id="org.osgi.service.cm.ConfigurationEvent.getReference--">
         <title>public ServiceReference&lt;ConfigurationAdmin&gt; getReference()</title>
         <para role="description">
Return the <code>ServiceReference</code> object of the Configuration Admin
 service that created this event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <code>ServiceReference</code> object for the Configuration Admin
         service that created this event.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.cm.ConfigurationEvent.getType--">
         <title>public int getType()</title>
         <para role="description">
Return the type of this event.
 </para>
         <para>
 The type values are:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.cm.ConfigurationEvent.CM_UPDATED">CM_UPDATED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.cm.ConfigurationEvent.CM_DELETED">CM_DELETED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.cm.ConfigurationEvent.CM_LOCATION_CHANGED">CM_LOCATION_CHANGED</link>
               </para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The type of this event.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ConfigurationException" xml:id="org.osgi.service.cm.ConfigurationException">
      <title>public class ConfigurationException<?line-break?> extends Exception</title>
      <para>
An <code>Exception</code> class to inform the Configuration Admin service of
 problems with configuration data.
   </para>
      <section role="method" xreflabel="ConfigurationException(String,String)" xml:id="org.osgi.service.cm.ConfigurationException.ConfigurationException-String-String-">
         <title>public  ConfigurationException(String property,String reason)</title>
         <formalpara role="parameter">
            <title>property</title>
            <para>name of the property that caused the problem,
        <code>null</code> if no specific property was the cause</para>
         </formalpara>
         <formalpara role="parameter">
            <title>reason</title>
            <para>reason for failure</para>
         </formalpara>
         <para role="description">
Create a <code>ConfigurationException</code> object.
   </para>
      </section>
      <section role="method" xreflabel="ConfigurationException(String,String,Throwable)" xml:id="org.osgi.service.cm.ConfigurationException.ConfigurationException-String-String-Throwable-">
         <title>public  ConfigurationException(String property,String reason,Throwable cause)</title>
         <formalpara role="parameter">
            <title>property</title>
            <para>name of the property that caused the problem,
        <code>null</code> if no specific property was the cause</para>
         </formalpara>
         <formalpara role="parameter">
            <title>reason</title>
            <para>reason for failure</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception.</para>
         </formalpara>
         <para role="description">
Create a <code>ConfigurationException</code> object.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getCause()" xml:id="org.osgi.service.cm.ConfigurationException.getCause--">
         <title>public Throwable getCause()</title>
         <para role="description">
Returns the cause of this exception or <code>null</code> if no cause was set.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The cause of this exception or <code>null</code> if no cause was set.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getProperty()" xml:id="org.osgi.service.cm.ConfigurationException.getProperty--">
         <title>public String getProperty()</title>
         <para role="description">
Return the property name that caused the failure or null.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>name of property or null if no specific property caused the
         problem</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getReason()" xml:id="org.osgi.service.cm.ConfigurationException.getReason--">
         <title>public String getReason()</title>
         <para role="description">
Return the reason for this exception.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>reason of the failure</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="initCause(Throwable)" xml:id="org.osgi.service.cm.ConfigurationException.initCause-Throwable-">
         <title>public Throwable initCause(Throwable cause)</title>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception.</para>
         </formalpara>
         <para role="description">
Initializes the cause of this exception to the specified value.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>This exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified cause is this
         exception.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the cause of this exception has already
         been set.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="ConfigurationListener" xml:id="org.osgi.service.cm.ConfigurationListener">
      <title>public interface ConfigurationListener</title>
      <para>
Listener for Configuration Events. When a <code>ConfigurationEvent</code> is
 fired, it is asynchronously delivered to all <code>ConfigurationListener</code>s.
 
 </para>
      <para>
         <code>ConfigurationListener</code> objects are registered with the Framework
 service registry and are notified with a <code>ConfigurationEvent</code> object
 when an event is fired.
 </para>
      <para>
         <code>ConfigurationListener</code> objects can inspect the received
 <code>ConfigurationEvent</code> object to determine its type, the pid of the
 <code>Configuration</code> object with which it is associated, and the
 Configuration Admin service that fired the event.
 
 </para>
      <para>
 Security Considerations. Bundles wishing to monitor configuration events will
 require <code>ServicePermission[ConfigurationListener,REGISTER]</code> to register
 a <code>ConfigurationListener</code> service.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.2</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="configurationEvent(ConfigurationEvent)" xml:id="org.osgi.service.cm.ConfigurationListener.configurationEvent-ConfigurationEvent-">
         <title>public void configurationEvent(ConfigurationEvent event)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>The <code>ConfigurationEvent</code>.</para>
         </formalpara>
         <para role="description">
Receives notification of a Configuration that has changed.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="ConfigurationPermission" xml:id="org.osgi.service.cm.ConfigurationPermission">
      <title>public final class ConfigurationPermission<?line-break?> extends BasicPermission</title>
      <para>
Indicates a bundle's authority to configure bundles or be updated by
 Configuration Admin.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.2</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="CONFIGURE" xml:id="org.osgi.service.cm.ConfigurationPermission.CONFIGURE">
         <title>public static final String CONFIGURE = "configure"</title>
         <para>
Provides permission to create new configurations for other bundles as
 well as manipulate them. The action string "configure".
   </para>
      </section>
      <section role="field" xreflabel="TARGET" xml:id="org.osgi.service.cm.ConfigurationPermission.TARGET">
         <title>public static final String TARGET = "target"</title>
         <para>
The permission to be updated, that is, act as a Managed Service or
 Managed Service Factory. The action string "target".
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.4</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="ConfigurationPermission(String,String)" xml:id="org.osgi.service.cm.ConfigurationPermission.ConfigurationPermission-String-String-">
         <title>public  ConfigurationPermission(String name,String actions)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>Name of the permission. Wildcards (<code>'*'</code>) are allowed
        in the name. During <link linkend="org.osgi.service.cm.ConfigurationPermission.implies-Permission-">implies(Permission)</link>, the name is
        matched to the requested permission using the substring matching
        rules used by <link linkend="org.osgi.framework.Filter">Filter</link>s.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>Comma separated list of <link linkend="org.osgi.service.cm.ConfigurationPermission.CONFIGURE">CONFIGURE</link>,
        <link linkend="org.osgi.service.cm.ConfigurationPermission.TARGET">TARGET</link> (case insensitive).</para>
         </formalpara>
         <para role="description">
Create a new ConfigurationPermission.
   </para>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.cm.ConfigurationPermission.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>The object being compared for equality with this object.</para>
         </formalpara>
         <para role="description">
Determines the equality of two <code>ConfigurationPermission</code> objects.
 </para>
         <para>
 Two <code>ConfigurationPermission</code> objects are equal.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if <code>obj</code> is equivalent to this
         <code>ConfigurationPermission</code>; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getActions()" xml:id="org.osgi.service.cm.ConfigurationPermission.getActions--">
         <title>public String getActions()</title>
         <para role="description">
Returns the canonical string representation of the
 <code>ConfigurationPermission</code> actions.
 
 </para>
         <para>
 Always returns present <code>ConfigurationPermission</code> actions in the
 following order: "configure", "target"</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Canonical string representation of the
         <code>ConfigurationPermission</code> actions.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.cm.ConfigurationPermission.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code value for this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Hash code value for this object.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="implies(Permission)" xml:id="org.osgi.service.cm.ConfigurationPermission.implies-Permission-">
         <title>public boolean implies(Permission p)</title>
         <formalpara role="parameter">
            <title>p</title>
            <para>The target permission to check.</para>
         </formalpara>
         <para role="description">
Determines if a <code>ConfigurationPermission</code> object "implies" the
 specified permission.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the specified permission is implied by this
         object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="newPermissionCollection()" xml:id="org.osgi.service.cm.ConfigurationPermission.newPermissionCollection--">
         <title>public PermissionCollection newPermissionCollection()</title>
         <para role="description">
Returns a new <code>PermissionCollection</code> object suitable for storing
 <code>ConfigurationPermission</code>s.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new <code>PermissionCollection</code> object.</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="ConfigurationPlugin" xml:id="org.osgi.service.cm.ConfigurationPlugin">
      <title>public interface ConfigurationPlugin</title>
      <para>
A service interface for processing configuration dictionary before the
 update.
 
 </para>
      <para>
 A bundle registers a <code>ConfigurationPlugin</code> object in order to process
 configuration updates before they reach the Managed Service or Managed
 Service Factory. The Configuration Admin service will detect registrations of
 Configuration Plugin services and must call these services every time before
 it calls the <code>ManagedService</code> or <code>ManagedServiceFactory</code>
         <code>updated</code> method. The Configuration Plugin service thus has the
 opportunity to view and modify the properties before they are passed to the
 Managed Service or Managed Service Factory.
 
 </para>
      <para>
 Configuration Plugin (plugin) services have full read/write access to all
 configuration information that passes through them.
 
 </para>
      <para>
 The <code>Integer</code>
         <code>service.cmRanking</code> registration property may be
 specified. Not specifying this registration property, or setting it to
 something other than an <code>Integer</code>, is the same as setting it to the
 <code>Integer</code> zero. The <code>service.cmRanking</code> property determines the
 order in which plugins are invoked. Lower ranked plugins are called before
 higher ranked ones. In the event of more than one plugin having the same
 value of <code>service.cmRanking</code>, then the Configuration Admin service
 arbitrarily chooses the order in which they are called.
 
 </para>
      <para>
 By convention, plugins with <code>service.cmRanking &lt; 0</code> or
 <code>service.cmRanking &gt; 1000</code> should not make modifications to the
 properties.
 
 </para>
      <para>
 The Configuration Admin service has the right to hide properties from
 plugins, or to ignore some or all the changes that they make. This might be
 done for security reasons. Any such behavior is entirely implementation
 defined.
 
 </para>
      <para>
 A plugin may optionally specify a <code>cm.target</code> registration property
 whose value is the PID of the Managed Service or Managed Service Factory
 whose configuration updates the plugin is intended to intercept. The plugin
 will then only be called with configuration updates that are targeted at the
 Managed Service or Managed Service Factory with the specified PID. Omitting
 the <code>cm.target</code> registration property means that the plugin is called
 for all configuration updates.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="CM_RANKING" xml:id="org.osgi.service.cm.ConfigurationPlugin.CM_RANKING">
         <title>public static final String CM_RANKING = "service.cmRanking"</title>
         <para>
A service property to specify the order in which plugins are invoked.
 
 This property contains an <code>Integer</code> ranking of the plugin. Not
 specifying this registration property, or setting it to something other
 than an <code>Integer</code>, is the same as setting it to the <code>Integer</code>
 zero. This property determines the order in which plugins are invoked.
 Lower ranked plugins are called before higher ranked ones.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="CM_TARGET" xml:id="org.osgi.service.cm.ConfigurationPlugin.CM_TARGET">
         <title>public static final String CM_TARGET = "cm.target"</title>
         <para>
A service property to limit the Managed Service or Managed Service
 Factory configuration dictionaries a Configuration Plugin service
 receives.
 
 This property contains a <code>String[]</code> of PIDs. A Configuration Admin
 service must call a Configuration Plugin service only when this property
 is not set, or the target service's PID is listed in this property.
   </para>
      </section>
      <section role="method" xreflabel="modifyConfiguration(ServiceReference,Dictionary)" xml:id="org.osgi.service.cm.ConfigurationPlugin.modifyConfiguration-ServiceReference-Dictionary-">
         <title>public void modifyConfiguration(ServiceReference&lt;?&gt; reference,Dictionary&lt;String,Object&gt; properties)</title>
         <formalpara role="parameter">
            <title>reference</title>
            <para>reference to the Managed Service or Managed Service
        Factory</para>
         </formalpara>
         <formalpara role="parameter">
            <title>properties</title>
            <para>The configuration properties. This argument must not
        contain the "service.bundleLocation" property. The value of this
        property may be obtained from the
        <code>Configuration.getBundleLocation</code> method.</para>
         </formalpara>
         <para role="description">
View and possibly modify the a set of configuration properties before
 they are sent to the Managed Service or the Managed Service Factory. The
 Configuration Plugin services are called in increasing order of their
 <code>service.cmRanking</code> property. If this property is undefined or is a
 non- <code>Integer</code> type, 0 is used.
 
 </para>
         <para>
 This method should not modify the properties unless the
 <code>service.cmRanking</code> of this plugin is in the range
 <code>0 &lt;= service.cmRanking &lt;= 1000</code>.
 </para>
         <para>
 If this method throws any <code>Exception</code>, the Configuration Admin
 service must catch it and should log it.
 
 </para>
         <para>
 A Configuration Plugin will only be called for properties from
 configurations that have a location for which the Configuration Plugin
 has permission when security is active. When security is not active, no
 filtering is done.</para>
      </section>
   </section>
   <section role="class" xreflabel="ManagedService" xml:id="org.osgi.service.cm.ManagedService">
      <title>public interface ManagedService</title>
      <para>
A service that can receive configuration data from a Configuration Admin
 service.
 
 </para>
      <para>
 A Managed Service is a service that needs configuration data. Such an object
 should be registered with the Framework registry with the <code>service.pid</code>
 property set to some unique identifier called a PID.
 
 </para>
      <para>
 If the Configuration Admin service has a <code>Configuration</code> object
 corresponding to this PID, it will callback the <code>updated()</code> method of
 the <code>ManagedService</code> object, passing the properties of that
 <code>Configuration</code> object.
 
 </para>
      <para>
 If it has no such <code>Configuration</code> object, then it calls back with a
 <code>null</code> properties argument. Registering a Managed Service will always
 result in a callback to the <code>updated()</code> method provided the
 Configuration Admin service is, or becomes active. This callback must always
 be done asynchronously.
 
 </para>
      <para>
 Else, every time that either of the <code>updated()</code> methods is called on
 that <code>Configuration</code> object, the <code>ManagedService.updated()</code>
 method with the new properties is called. If the <code>delete()</code> method is
 called on that <code>Configuration</code> object, <code>ManagedService.updated()</code>
 is called with a <code>null</code> for the properties parameter. All these
 callbacks must be done asynchronously.
 
 </para>
      <para>
 The following example shows the code of a serial port that will create a port
 depending on configuration information.
 
 </para>
      <programlisting> 
   class SerialPort implements ManagedService {
  
     ServiceRegistration registration;
     Hashtable configuration;
     CommPortIdentifier id;
  
     synchronized void open(CommPortIdentifier id,
     BundleContext context) {
       this.id = id;
       registration = context.registerService(
         ManagedService.class.getName(),
         this,
         getDefaults()
       );
     }
  
     Hashtable getDefaults() {
       Hashtable defaults = new Hashtable();
       defaults.put( "port", id.getName() );
       defaults.put( "product", "unknown" );
       defaults.put( "baud", "9600" );
       defaults.put( Constants.SERVICE_PID,
         "com.acme.serialport." + id.getName() );
       return defaults;
     }
  
     public synchronized void updated(
       Dictionary configuration  ) {
       if ( configuration == null )
         registration.setProperties( getDefaults() );
       else {
         setSpeed( configuration.get("baud") );
         registration.setProperties( configuration );
       }
     }
     ...
   }</programlisting>
      <para>
 As a convention, it is recommended that when a Managed Service is updated, it
 should copy all the properties it does not recognize into the service
 registration properties. This will allow the Configuration Admin service to
 set properties on services which can then be used by other applications.
 
 </para>
      <para>
 Normally, a single Managed Service for a given PID is given the configuration
 dictionary, this is the configuration that is bound to the location of the
 registering bundle. However, when security is on, a Managed Service can have
 Configuration Permission to also be updated for other locations.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="updated(Dictionary)" xml:id="org.osgi.service.cm.ManagedService.updated-Dictionary-">
         <title>public void updated(Dictionary&lt;String,?&gt; properties) throws ConfigurationException</title>
         <formalpara role="parameter">
            <title>properties</title>
            <para>A copy of the Configuration properties, or <code>null</code>
        . This argument must not contain the "service.bundleLocation"
        property. The value of this property may be obtained from the
        <code>Configuration.getBundleLocation</code> method.</para>
         </formalpara>
         <para role="description">
Update the configuration for a Managed Service.
 
 </para>
         <para>
 When the implementation of <code>updated(Dictionary)</code> detects any kind
 of error in the configuration properties, it should create a new
 <code>ConfigurationException</code> which describes the problem. This can
 allow a management system to provide useful information to a human
 administrator.
 
 </para>
         <para>
 If this method throws any other <code>Exception</code>, the Configuration
 Admin service must catch it and should log it.
 </para>
         <para>
 The Configuration Admin service must call this method asynchronously with
 the method that initiated the callback. This implies that implementors of
 Managed Service can be assured that the callback will not take place
 during registration when they execute the registration in a synchronized
 method.
 
 </para>
         <para>
 If the location allows multiple managed services to be called back for a
 single configuration then the callbacks must occur in service ranking
 order. Changes in the location must be reflected by deleting the
 configuration if the configuration is no longer visible and updating when
 it becomes visible.
 
 </para>
         <para>
 If no configuration exists for the corresponding PID, or the bundle has
 no access to the configuration, then the bundle must be called back with
 a <code>null</code> to signal that CM is active but there is no data.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ConfigurationException</code>– when the update fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Security</title>
            <para>
               <code>ConfigurationPermission[c.location,TARGET]]
          </code>–  Required by the            bundle that registered this service</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ManagedServiceFactory" xml:id="org.osgi.service.cm.ManagedServiceFactory">
      <title>public interface ManagedServiceFactory</title>
      <para>
Manage multiple service instances.
 
 Bundles registering this interface are giving the Configuration Admin service
 the ability to create and configure a number of instances of a service that
 the implementing bundle can provide. For example, a bundle implementing a
 DHCP server could be instantiated multiple times for different interfaces
 using a factory.
 
 </para>
      <para>
 Each of these <emphasis>service instances </emphasis> is represented, in the persistent
 storage of the Configuration Admin service, by a factory
 <code>Configuration</code> object that has a PID. When such a
 <code>Configuration</code> is updated, the Configuration Admin service calls the
 <code>ManagedServiceFactory</code> updated method with the new properties. When
 <code>updated</code> is called with a new PID, the Managed Service Factory should
 create a new factory instance based on these configuration properties. When
 called with a PID that it has seen before, it should update that existing
 service instance with the new configuration information.
 
 </para>
      <para>
 In general it is expected that the implementation of this interface will
 maintain a data structure that maps PIDs to the factory instances that it has
 created. The semantics of a factory instance are defined by the Managed
 Service Factory. However, if the factory instance is registered as a service
 object with the service registry, its PID should match the PID of the
 corresponding <code>Configuration</code> object (but it should <emphasis role="strong">not </emphasis> be
 registered as a Managed Service!).
 
 </para>
      <para>
 An example that demonstrates the use of a factory. It will create serial
 ports under command of the Configuration Admin service.
 
 </para>
      <programlisting> 
   class SerialPortFactory
     implements ManagedServiceFactory {
     ServiceRegistration registration;
     Hashtable ports;
     void start(BundleContext context) {
       Hashtable properties = new Hashtable();
       properties.put( Constants.SERVICE_PID,
         "com.acme.serialportfactory" );
       registration = context.registerService(
         ManagedServiceFactory.class.getName(),
         this,
         properties
       );
     }
     public void updated( String pid,
       Dictionary properties  ) {
       String portName = (String) properties.get("port");
       SerialPortService port =
         (SerialPort) ports.get( pid );
       if ( port == null ) {
         port = new SerialPortService();
         ports.put( pid, port );
         port.open();
       }
       if ( port.getPortName().equals(portName) )
         return;
       port.setPortName( portName );
     }
     public void deleted( String pid ) {
       SerialPortService port =
         (SerialPort) ports.get( pid );
       port.close();
       ports.remove( pid );
     }
     ...
   }</programlisting>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="deleted(String)" xml:id="org.osgi.service.cm.ManagedServiceFactory.deleted-String-">
         <title>public void deleted(String pid)</title>
         <formalpara role="parameter">
            <title>pid</title>
            <para>the PID of the service to be removed</para>
         </formalpara>
         <para role="description">
Remove a factory instance.
 
 Remove the factory instance associated with the PID. If the instance was
 registered with the service registry, it should be unregistered. The
 Configuration Admin must call deleted for each instance it received in
 <link linkend="org.osgi.service.cm.ManagedServiceFactory.updated-String-Dictionary-">updated(String, Dictionary)</link>.
 
 </para>
         <para>
 If this method throws any <code>Exception</code>, the Configuration Admin
 service must catch it and should log it.
 </para>
         <para>
 The Configuration Admin service must call this method asynchronously.</para>
      </section>
      <section role="method" xreflabel="getName()" xml:id="org.osgi.service.cm.ManagedServiceFactory.getName--">
         <title>public String getName()</title>
         <para role="description">
Return a descriptive name of this factory.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the name for the factory, which might be localized</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="updated(String,Dictionary)" xml:id="org.osgi.service.cm.ManagedServiceFactory.updated-String-Dictionary-">
         <title>public void updated(String pid,Dictionary&lt;String,?&gt; properties) throws ConfigurationException</title>
         <formalpara role="parameter">
            <title>pid</title>
            <para>The PID for this configuration.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>properties</title>
            <para>A copy of the configuration properties. This argument
        must not contain the service.bundleLocation" property. The value
        of this property may be obtained from the
        <code>Configuration.getBundleLocation</code> method.</para>
         </formalpara>
         <para role="description">
Create a new instance, or update the configuration of an existing
 instance.
 
 If the PID of the <code>Configuration</code> object is new for the Managed
 Service Factory, then create a new factory instance, using the
 configuration <code>properties</code> provided. Else, update the service
 instance with the provided <code>properties</code>.
 
 </para>
         <para>
 If the factory instance is registered with the Framework, then the
 configuration <code>properties</code> should be copied to its registry
 properties. This is not mandatory and security sensitive properties
 should obviously not be copied.
 
 </para>
         <para>
 If this method throws any <code>Exception</code>, the Configuration Admin
 service must catch it and should log it.
 
 </para>
         <para>
 When the implementation of updated detects any kind of error in the
 configuration properties, it should create a new
 <link linkend="org.osgi.service.cm.ConfigurationException">ConfigurationException</link> which describes the problem.
 
 </para>
         <para>
 The Configuration Admin service must call this method asynchronously.
 This implies that implementors of the <code>ManagedServiceFactory</code> class
 can be assured that the callback will not take place during registration
 when they execute the registration in a synchronized method.
 
 </para>
         <para>
 If the security allows multiple managed service factories to be called
 back for a single configuration then the callbacks must occur in service
 ranking order.
 
 </para>
         <para>
 It is valid to create multiple factory instances that are bound to
 different locations. Managed Service Factory services must only be
 updated with configurations that are bound to their location or that
 start with the <code>?</code> prefix and for which they have permission.
 Changes in the location must be reflected by deleting the corresponding
 configuration if the configuration is no longer visible or updating when
 it becomes visible.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ConfigurationException</code>– when the configuration properties are
         invalid.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Security</title>
            <para>
               <code>ConfigurationPermission[c.location,TARGET]]
          </code>–  Required by the            bundle that registered this service</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="SynchronousConfigurationListener" xml:id="org.osgi.service.cm.SynchronousConfigurationListener">
      <title>public interface SynchronousConfigurationListener<?line-break?> extends ConfigurationListener</title>
      <para>
Synchronous Listener for Configuration Events. When a
 <code>ConfigurationEvent</code> is fired, it is synchronously delivered to all
 <code>SynchronousConfigurationListener</code>s.
 
 </para>
      <para>
         <code>SynchronousConfigurationListener</code> objects are registered with the
 Framework service registry and are synchronously notified with a
 <code>ConfigurationEvent</code> object when an event is fired.
 </para>
      <para>
         <code>SynchronousConfigurationListener</code> objects can inspect the received
 <code>ConfigurationEvent</code> object to determine its type, the PID of the
 <code>Configuration</code> object with which it is associated, and the
 Configuration Admin service that fired the event.
 
 </para>
      <para>
 Security Considerations. Bundles wishing to synchronously monitor
 configuration events will require
 <code>ServicePermission[SynchronousConfigurationListener,REGISTER]</code> to
 register a <code>SynchronousConfigurationListener</code> service.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.5</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
   </section>
</section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="105" revision="$Id: eaa505902a8a3387dcf3dec89d3421587fe458f5 $" version="5" xml:id="service.metatype" xml:base="../105/service.metatype.xml">
  <title>Metatype Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.metatype-version" linkend="org.osgi.service.metatype"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The Metatype specification defines interfaces that allow bundle
    developers to describe attribute types in a computer readable form using
    so-called <emphasis>metadata</emphasis>.</para>

    <para>The purpose of this specification is to allow services to specify
    the type information of data that they can use as arguments. The data is
    based on <emphasis>attributes</emphasis>, which are key/value pairs like
    properties.</para>

    <para>A designer in a type-safe language like Java is often confronted
    with the choice of using the language constructs to exchange data or using
    a technique based on attributes/properties that are based on key/value
    pairs. Attributes provide an escape from the rigid type-safety
    requirements of modern programming languages.</para>

    <para>Type-safety works very well for software development environments in
    which multiple programmers work together on large applications or systems,
    but often lacks the flexibility needed to receive structured data from the
    outside world.</para>

    <para>The attribute paradigm has several characteristics that make this
    approach suitable when data needs to be communicated between different
    entities which "speak" different languages. Attributes are uncomplicated,
    resilient to change, and allow the receiver to dynamically adapt to
    different types of data.</para>

    <para>As an example, the OSGi framework Specifications define several
    attribute types which are used in a Framework implementation, but which
    are also used and referenced by other OSGi specifications such as the
    <xref linkend="service.cm"/>. A Configuration Admin service implementation
    deploys attributes (key/value pairs) as configuration properties.</para>

    <para>The Meta Type Service provides a unified access point to the Meta
    Type information that is associated with bundles. This Meta Type
    information can be defined by an XML resource in a bundle
    (<code>OSGI-INF/metatype</code> directories must be scanned for any XML
    resources), it can come from the Meta Type Provider service, or it can be
    obtained from Managed Service or Managed Service Factory services.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Conceptual model</emphasis> - The specification must
          have a conceptual model for how classes and attributes are
          organized.</para>
        </listitem>

        <listitem>
          <para><emphasis>Standards</emphasis> - The specification should be
          aligned with appropriate standards, and explained in situations
          where the specification is not aligned with, or cannot be mapped to,
          standards.</para>
        </listitem>

        <listitem>
          <para><emphasis>Remote Management</emphasis> - Remote management
          should be taken into account.</para>
        </listitem>

        <listitem>
          <para><emphasis>Size</emphasis> - Minimal overhead in size for a
          bundle using this specification is required.</para>
        </listitem>

        <listitem>
          <para><emphasis>Localization</emphasis> - It must be possible to use
          this specification with different languages at the same time. This
          ability allows servlets to serve information in the language
          selected in the browser.</para>
        </listitem>

        <listitem>
          <para><emphasis>Type information</emphasis> - The definition of an
          attribute should contain the name (if it is required), the
          cardinality, a label, a description, labels for enumerated values,
          and the Java class that should be used for the values.</para>
        </listitem>

        <listitem>
          <para><emphasis>Validation</emphasis> - It should be possible to
          validate the values of the attributes.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i1504332">
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Meta Type Service</emphasis> - A service that
          provides a unified access point for meta type information.</para>
        </listitem>

        <listitem>
          <para><emphasis>Attribute</emphasis> - A key/value pair.</para>
        </listitem>

        <listitem>
          <para><emphasis>PID</emphasis> - A unique persistent ID, defined in
          configuration management.</para>
        </listitem>

        <listitem>
          <para><emphasis>Attribute Definition</emphasis> - Defines a
          description, name, help text, and type information of an
          attribute.</para>
        </listitem>

        <listitem>
          <para><emphasis>Object Class Definition</emphasis> - Defines the
          type of a datum. It contains a description and name of the type plus
          a set of <code>AttributeDefinition</code> objects.</para>
        </listitem>

        <listitem>
          <para><emphasis>Meta Type Provider</emphasis> - Provides access to
          the object classes that are available for this object. Access uses
          the PID and a locale to find the best
          <code>ObjectClassDefinition</code> object.</para>
        </listitem>

        <listitem>
          <para><emphasis>Meta Type Information</emphasis> - Provides meta
          type information for a bundle.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>Class Diagram Meta Type Service,
        org.osgi.service.metatype</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.800in" contentwidth="6.500in" fileref="metatype-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Operation</title>

      <para>The Meta Type service defines a rich dynamic typing system for
      properties. The purpose of the type system is to allow reasonable User
      Interfaces to be constructed dynamically.</para>

      <para>The type information is normally carried by the bundles
      themselves. Either by implementing the <code>MetaTypeProvider</code>
      interface on the Managed Service or Managed Service Factory, by carrying
      one or more XML resources that define a number of Meta Types in the
      <code>OSGI-INF/metatype</code> directories, or registering a Meta Type
      Provider as a service. Additionally, a Meta Type service could have
      other sources that are not defined in this specification.</para>

      <para>The Meta Type Service provides unified access to Meta Types that
      are carried by the resident bundles. The Meta Type Service collects this
      information from the bundles and provides uniform access to it. A client
      can requests the Meta Type Information associated with a particular
      bundle. The <code>MetaTypeInformation</code> object provides a list of
      <code>ObjectClassDefinition</code> objects for a bundle. These objects
      define all the information for a specific <emphasis>object
      class</emphasis>. An object class is a some descriptive information and
      a set of named attributes (which are key/value pairs).</para>

      <para>Access to Object Class Definitions is qualified by a locale and a
      Persistent IDentity (PID). This specification does not specify what the
      PID means. One application is OSGi Configuration Management where a PID
      is used by the Managed Service and Managed Service Factory services. In
      general, a PID should be regarded as the name of a variable where an
      Object Class Definition defines its type.</para>
    </section>
  </section>

  <section>
    <title>Attributes Model</title>

    <para xml:id="i1279629">The Framework uses the LDAP filter syntax for
    searching the Framework registry. The usage of the attributes in this
    specification and the Framework specification closely resemble the LDAP
    attribute model. Therefore, the names used in this specification have been
    aligned with LDAP. Consequently, the interfaces which are defined by this
    Specification are:</para>

    <itemizedlist>
      <listitem>
        <para><code>AttributeDefinition</code></para>
      </listitem>

      <listitem>
        <para><code>ObjectClassDefinition</code></para>
      </listitem>

      <listitem>
        <para><code>MetaTypeProvider</code></para>
      </listitem>
    </itemizedlist>

    <para>These names correspond to the LDAP attribute model. For further
    information on ASN.1-defined attributes and X.500 object classes and
    attributes, see <xref linkend="i1215870"/>.</para>

    <para>The LDAP attribute model assumes a global name-space for attributes,
    and object classes consist of a number of attributes. So, if an object
    class inherits the same attribute from different parents, only one copy of
    the attribute must become part of the object class definition. This
    name-space implies that a given attribute, for example <code>cn</code>,
    should <emphasis>always</emphasis> be the common name and the type must
    always be a <code>String</code>. An attribute <code>cn</code> cannot be an
    <code>Integer</code> in another object class definition. In this respect,
    the OSGi approach towards attribute definitions is comparable with the
    LDAP attribute model.</para>
  </section>

  <section>
    <title>Object Class Definition</title>

    <para>The <code>ObjectClassDefinition</code> interface is used to group
    the attributes which are defined in <code>AttributeDefinition</code>
    objects.</para>

    <para xml:id="i1279638">An <code>ObjectClassDefinition</code> object
    contains the information about the overall set of attributes and has the
    following elements:</para>

    <itemizedlist>
      <listitem>
        <para>A name which can be returned in different locales.</para>
      </listitem>

      <listitem>
        <para>A global name-space in the registry, which is the same condition
        as LDAP/X.500 object classes. In these standards the OSI Object
        Identifier (OID) is used to uniquely identify object classes. If such
        an OID exists, (which can be requested at several standard
        organizations, and many companies already have a node in the tree) it
        can be returned here. Otherwise, a unique id should be returned. This
        id can be a Java class name (reverse domain name) or can be generated
        with a GUID algorithm. All LDAP-defined object classes already have an
        associated OID. It is strongly advised to define the object classes
        from existing LDAP schemes which provide many preexisting OIDs. Many
        such schemes exist ranging from postal addresses to DHCP
        parameters.</para>
      </listitem>

      <listitem>
        <para>A human-readable description of the class.</para>
      </listitem>

      <listitem>
        <para>A list of attribute definitions which can be filtered as
        required, or optional. Note that in X.500 the mandatory or required
        status of an attribute is part of the object class definition and not
        of the attribute definition.</para>
      </listitem>

      <listitem>
        <para>An icon, in different sizes.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="i1504333">
    <title>Attribute Definition</title>

    <para>The <code>AttributeDefinition</code> interface provides the means to
    describe the data type of attributes.</para>

    <para>The <code>AttributeDefinition</code> interface defines the following
    elements:</para>

    <itemizedlist>
      <listitem>
        <para>Defined names (final ints) for the data types as restricted in
        the Framework for the attributes, called the syntax in OSI terms,
        which can be obtained with the <code>getType()</code> method.</para>
      </listitem>

      <listitem>
        <para><code>AttributeDefinition</code> objects should use an ID that
        is similar to the OID as described in the ID field for
        <code>ObjectClassDefinition</code>.</para>
      </listitem>

      <listitem>
        <para>A localized name intended to be used in user interfaces.</para>
      </listitem>

      <listitem>
        <para>A localized description that defines the semantics of the
        attribute and possible constraints, which should be usable for
        tooltips.</para>
      </listitem>

      <listitem>
        <para>An indication if this attribute should be stored as a unique
        value, a <code>List</code>, or an array of values, as well as the
        maximum cardinality of the type.</para>
      </listitem>

      <listitem>
        <para>The data type, as limited by the Framework service registry
        attribute types.</para>
      </listitem>

      <listitem>
        <para>A validation function to verify if a possible value is
        correct.</para>
      </listitem>

      <listitem>
        <para>A list of values and a list of localized labels. Intended for
        popup menus in GUIs, allowing the user to choose from a set.</para>
      </listitem>

      <listitem>
        <para>A default value (String[]). The return depends on the following
        cases:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>not specified</emphasis> - Return
            <code>null</code> if this attribute is not specified.</para>
          </listitem>

          <listitem>
            <para><emphasis>cardinality = 0</emphasis> - Return an array with
            one element.</para>
          </listitem>

          <listitem>
            <para><emphasis>otherwise</emphasis> - Return an array with less
            or equal than the absolute value of cardinality, possibly empty if
            the value is an empty string.</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="i1450077">
    <title>Meta Type Service</title>

    <para>The Meta Type Service provides unified access to Meta Type
    information that is associated with a Bundle. It can get this information
    through the following means:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Meta Type Resource</emphasis> - A bundle can provide
        one or more XML resources that are contained in its JAR file. These
        resources contain an XML definition of meta types as well as to what
        PIDs these Meta Types apply. These XML resources must reside in the
        <code>OSGI-INF/metatype</code> directories of the bundle (including
        any fragments).</para>
      </listitem>

      <listitem>
        <para><emphasis>Managed Service [Factory] objects</emphasis> - As
        defined in the configuration management specification,
        <code>ManagedService</code> and <code>ManagedServiceFactory</code>
        service objects can optionally implement the
        <code>MetaTypeProvider</code> interface. The Meta Type Service will
        only search for <code>ManagedService</code> and
        <code>ManagedServiceFactory</code> service objects that implement
        <code>MetaTypeProvider</code> if no meta type resources are found in
        the bundle.</para>
      </listitem>

      <listitem>
        <para><emphasis>Meta Type Provider service</emphasis> - Bundles can
        register Meta Type Provider services to dynamically provide meta types
        for PIDs and factory PIDs.</para>
      </listitem>
    </itemizedlist>

    <figure pgwide="1" xml:id="i1386202">
      <title>Sources for Meta Types</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.619in" contentwidth="5.470in" fileref="metatype-sources.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>This model is depicted in <xref linkend="i1386202"/>.</para>

    <para>The Meta Type Service can therefore be used to retrieve meta type
    information for bundles which contain Meta Type resources or which provide
    <code>MetaTypeProvider</code> objects and/or services. If multiple sources
    define the same Object Class Definition, the Meta Type service must select
    which source to use. Meta Type Provider services must take precedence over
    Managed Service [Factory] objects implementing
    <code>MetaTypeProvider</code> or Meta Type Resources.</para>

    <para>The <code>MetaTypeService</code> interface has a single
    method:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.metatype.MetaTypeService.getMetaTypeInformation-Bundle-" xrefstyle="hyperlink"/> - Given a bundle, it must return the Meta Type
        Information for that bundle, even if there is no meta type information
        available at the moment of the call.</para>
      </listitem>
    </itemizedlist>

    <para>The returned <code>MetaTypeInformation</code> object maintains a map
    of PID to <code>ObjectClassDefinition</code> objects. The map is keyed by
    locale and PID. The list of maintained PIDs is available from the
    <code>MetaTypeInformation</code> object with the following methods:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.metatype.MetaTypeInformation.getPids--" xrefstyle="hyperlink"/> - PIDs for which Meta Types are
        available.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.metatype.MetaTypeInformation.getFactoryPids--" xrefstyle="hyperlink"/> - PIDs associated with Managed Service Factory
        services.</para>
      </listitem>
    </itemizedlist>

    <para>These methods and their interaction with the Meta Type resource are
    described in <xref linkend="i1492258"/>.</para>

    <para>The <code>MetaTypeInformation</code> interface extends the
    <code>MetaTypeProvider</code> interface. The <code>MetaTypeProvider</code>
    interface is used to access meta type information. It supports locale
    dependent information so that the text used in
    <code>AttributeDefinition</code> and <code>ObjectClassDefinition</code>
    objects can be adapted to different locales.</para>

    <para>Which locales are supported by the <code>MetaTypeProvider</code>
    object are defined by the implementer or the meta type resources. The list
    of available locales can be obtained from the
    <code>MetaTypeProvider</code> object.</para>

    <para>The MetaTypeProvider interface provides the following
    methods:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.metatype.MetaTypeProvider.getObjectClassDefinition-String-String-" xrefstyle="hyperlink"/> - Get access to an ObjectClassDefinition
        object for the given PID. The second parameter defines the
        locale.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.metatype.MetaTypeProvider.getLocales--" xrefstyle="hyperlink"/> - List the locales that are available.</para>
      </listitem>
    </itemizedlist>

    <para>Locale objects are represented in <code>String</code> objects
    because not all profiles support Locale. The <code>String</code> holds the
    standard Locale presentation of:</para>

    <programlisting>locale = language ( '_' country ( '_' variation))
language ::= &lt; defined by ISO 3166 &gt;
country  ::= &lt; defined by ISO 639 &gt;</programlisting>

    <para>For example, <code>en</code>, <code>nl_BE</code>,
    <code>en_CA_posix</code> are valid locales. The use of <code>null</code>
    for locale indicates that <code>java.util.Locale.getDefault()</code> must
    be used.</para>

    <para>The Meta Type Service implementation class is the main class. It
    registers the <code>org.osgi.service.metatype.MetaTypeService</code>
    service and has a method to get a <code>MetaTypeInformation</code> object
    for a bundle.</para>

    <para>Following is some sample code demonstrating how to print out all the
    Object Class Definitions and Attribute Definitions contained in a
    bundle:</para>

    <programlisting>void printMetaTypes( MetaTypeService mts,Bundle b ) {
    MetaTypeInformation mti = 
        mts.getMetaTypeInformation(b);
    String [] pids = mti.getPids();
    String [] locales = mti.getLocales();

    for ( int locale = 0; locale&lt;locales.length; locale++) {
        System.out.println("Locale " + locales[locale] );
        for (int i=0; i&lt; pids.length; i++) {
            ObjectClassDefinition ocd = 
                mti.getObjectClassDefinition(pids[i], null);
            AttributeDefinition[] ads = 
                ocd.getAttributeDefinitions(
                    ObjectClassDefinition.ALL);
            for (int j=0; j&lt; ads.length; j++) {
                System.out.println("OCD="+ocd.getName()
                    + "AD="+ads[j].getName());
            }
        }
    }
}</programlisting>
  </section>

  <section xml:id="i1550143">
    <title>Meta Type Provider Service</title>

    <para>A Meta Type Provider service allows third party contributions to the
    internal Object Class Definition repository. A Meta Type Provider can
    contribute multiple PIDs, both factory and singleton PIDs. A Meta Type
    Provider service must register with both or one of the following service
    properties:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.metatype.MetaTypeProvider.METATYPE_PID" xrefstyle="hyperlink"/> - (<code>String+</code>) Provides a list of
        PIDs that this Meta Type Provider can provide Object Class Definitions
        for. The listed PIDs are intended to be used as normal singleton PIDs
        used by Managed Services.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.metatype.MetaTypeProvider.METATYPE_FACTORY_PID" xrefstyle="hyperlink"/> - (<code>String+</code>) Provides a list of
        factory PIDs that this Meta Type Provider can provide Object Class
        Definitions for. The listed PIDs are intended to be used as factory
        PIDs used by Managed Service Factories.</para>
      </listitem>
    </itemizedlist>

    <para>The Object Class Definitions must originate from the bundle that
    registered the Meta Type Provider service. Third party extenders should
    therefore use the bundle of their extendee. A Meta Type Service must
    report these Object Class Definitions on the Meta Type Information of the
    registering bundle, merged with any other information from that
    bundle.</para>

    <para>The Meta Type Service must track these Meta Type Provider services
    and make their Meta Types available as if they were provided on the
    Managed Service (Factory) services. The Meta Types must become unavailable
    when the Meta Type Provider service is unregistered.</para>
  </section>

  <section xml:id="i1504250">
    <title>Using the Meta Type Resources</title>

    <para>A bundle that wants to provide meta type resources must place these
    resources in the <code>OSGI-INF/metatype</code> directory. The name of the
    resource must be a valid bundle entry path. All resources in that
    directory must be meta type documents. Fragments can contain additional
    meta type resources in the same directory and they must be taken into
    account when the meta type resources are searched. A meta type resource
    must be encoded in UTF-8.</para>

    <para>The MetaType Service must support localization of the</para>

    <itemizedlist>
      <listitem>
        <para>name</para>
      </listitem>

      <listitem>
        <para>icon</para>
      </listitem>

      <listitem>
        <para>description</para>
      </listitem>

      <listitem>
        <para>label attributes</para>
      </listitem>
    </itemizedlist>

    <para>The localization mechanism must be identical using the same
    mechanism as described in the Core module layer, see
    <emphasis>Localization</emphasis>, using the same property resource.
    However, it is possible to override the property resource in the meta type
    definition resources with the <code>localization</code> attribute of the
    <code>MetaData</code> element.</para>

    <para>The Meta Type Service must examine the bundle and its fragments to
    locate all localization resources for the localization base name. From
    that list, the Meta Type Service derives the list of locales which are
    available for the meta type information. This list can then be returned by
    <code>MetaTypeInformation.getLocales</code> method. This list can change
    at any time because the bundle could be refreshed. Clients should be
    prepared that this list changes after they received it.</para>

    <section>
      <title>XML Schema of a Meta Type Resource</title>

      <para>This section describes the schema of the meta type resource. This
      schema is not intended to be used during runtime for validating meta
      type resources. The schema is intended to be used by tools and external
      management systems.</para>

      <para>The XML namespace for meta type documents must be:</para>

      <programlisting>http://www.osgi.org/xmlns/metatype/v1.3.0</programlisting>

      <para>The namespace abbreviation should be <code>metatype</code>. That
      is, the following header should be:</para>

      <programlisting>&lt;metatype:MetaData 
    xmlns:metatype="http://www.osgi.org/xmlns/metatype/v1.3.0"&gt;</programlisting>

      <para>The file can be found in the osgi.jar file that can be downloaded
      from the www.osgi.org web site.</para>

      <figure>
        <title>XML Schema Instance Structure (Type name = Element
        name)</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.357in" contentwidth="4.280in" fileref="schema-structure.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The element structure of the XML file is:</para>

      <programlisting>MetaData    ::= OCD* Designate*

OCD         ::= AD*  Icon*
AD          ::= Option*

Designate   ::= Object
Object      ::= Attribute*

Attribute   ::= Value*</programlisting>

      <para>The different elements are described in <xref linkend="service.metatype-xml.schema"/>.</para>

      <table xml:id="service.metatype-xml.schema">
        <title>XML Schema for Meta Type resources</title>

        <tgroup cols="6">
          <colspec colname="col1" colnum="1" colwidth="0.2*"/>

          <colspec colname="col2" colnum="2" colwidth="1.5*"/>

          <colspec colname="col3" colnum="3" colwidth="1*"/>

          <colspec colname="col4" colnum="4" colwidth="1*"/>

          <colspec colname="col5" colnum="5" colwidth="2*"/>

          <colspec colname="col6" colnum="6" colwidth="4*"/>

          <spanspec nameend="col5" namest="col1" spanname="element"/>

          <thead>
            <row>
              <entry><para/></entry>

              <entry><para>Attribute</para></entry>

              <entry><para>Deflt</para></entry>

              <entry><para>Type</para></entry>

              <entry><para>Method</para></entry>

              <entry><para>Description</para></entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry spanname="element"><code>MetaData</code></entry>

              <entry colname="col6"><para>Top Element</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>localization</code></entry>

              <entry/>

              <entry><code>string</code></entry>

              <entry><para/></entry>

              <entry><para>Points to the Properties file that can localize
              this XML. See <emphasis>Localization</emphasis> in <xref linkend="intro.core.release" xrefstyle="template:%t"/>.</para></entry>
            </row>

            <row>
              <entry spanname="element"><code>OCD</code></entry>

              <entry colname="col6"><para>Object Class
              Definition</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>name</code></entry>

              <entry><code>&lt;&gt;</code></entry>

              <entry><code>string</code></entry>

              <entry><para><xref linkend="org.osgi.service.metatype.ObjectClassDefinition.getName--" xrefstyle="hyperlink"/></para></entry>

              <entry><para> A human readable name that can be
              localized.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>description</code></entry>

              <entry/>

              <entry/>

              <entry><para><xref linkend="org.osgi.service.metatype.ObjectClassDefinition.getDescription--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>A human readable description of the Object Class
              Definition that can be localized.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>id</code></entry>

              <entry><code>&lt;&gt;</code></entry>

              <entry/>

              <entry><para><xref linkend="org.osgi.service.metatype.ObjectClassDefinition.getID--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>A unique id, cannot be localized.</para></entry>
            </row>

            <row>
              <entry spanname="element"><code>Designate</code></entry>

              <entry colname="col6"><para>An association between one PID and
              an Object Class Definition. This element
              <emphasis>designates</emphasis> a PID to be of a certain
              <emphasis>type</emphasis>.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>pid</code></entry>

              <entry><code>&lt;&gt;</code></entry>

              <entry><code>string</code></entry>

              <entry><para/></entry>

              <entry><para>The PID that is associated with an
              <code>OCD</code>. This can be a reference to a factory or
              singleton configuration object. The PID can be a Targeted PID,
              if <code>factoryPid</code> is not set or empty. Either
              <code>pid</code> or <code>factoryPid</code> must be specified.
              See <xref linkend="i1492258"/>.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>factoryPid</code></entry>

              <entry/>

              <entry><code>string</code></entry>

              <entry><para/></entry>

              <entry><para>If the <code>factoryPid</code> attribute is set,
              this Designate element defines a factory configuration for the
              given factory. If it is not set or empty, it designates a
              singleton configuration. The PID can be a Targeted PID. Either
              <code>pid</code> or <code>factoryPid</code> must be specified.
              See <xref linkend="i1492258"/>.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>bundle</code></entry>

              <entry/>

              <entry><code>string</code></entry>

              <entry><para/></entry>

              <entry><para>The value is used to set the location of any
              configuration created using this Meta Type resource. This may
              contain a bundle location or a multi-location. In a Meta Type
              resource, using the wildcard value (<code>'*' \u002A</code>)
              indicates the bundle location of the bundle containing the
              resource must be used as the location. See <xref linkend="service.cm-location.binding"/></para><para>This is an
              optional attribute but can be mandatory in certain usage
              schemes, for example the Autoconf Resource
              Processor.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>optional</code></entry>

              <entry><code>false</code></entry>

              <entry><code>boolean</code></entry>

              <entry><para/></entry>

              <entry><para>If <code>true</code>, then this Designate element
              is optional, errors during processing must be
              ignored.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>merge</code></entry>

              <entry><code>false</code></entry>

              <entry><code>boolean</code></entry>

              <entry><para/></entry>

              <entry><para>If the PID refers to an existing configuration,
              then merge the properties with the existing properties if this
              attribute is <code>true</code>. Otherwise, replace the
              properties.</para></entry>
            </row>

            <row>
              <entry spanname="element"><code>AD</code></entry>

              <entry colname="col6"><para>Attribute Definition</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>name</code></entry>

              <entry/>

              <entry><code>string</code></entry>

              <entry><para><xref linkend="org.osgi.service.metatype.AttributeDefinition.getName--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>A localizable name for the Attribute Definition.
              <code>description</code></para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>description</code></entry>

              <entry/>

              <entry><code>string</code></entry>

              <entry><para><xref linkend="org.osgi.service.metatype.AttributeDefinition.getDescription--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>A localizable description for the Attribute
              Definition.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>id</code></entry>

              <entry/>

              <entry/>

              <entry><para><xref linkend="org.osgi.service.metatype.AttributeDefinition.getID--" xrefstyle="hyperlink"/></para></entry>

              <entry><para> The unique ID of the Attribute
              Definition.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>type</code></entry>

              <entry/>

              <entry><code>string</code></entry>

              <entry><para><xref linkend="org.osgi.service.metatype.AttributeDefinition.getType--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The type of an attribute is an enumeration of the
              different scalar types. The string is mapped to one of the
              constants on the AttributeDefinition interface. Valid values,
              which are defined in the <code>Scalar</code> type,
              are:</para><programlisting>String   <phrase role="symbol">↔</phrase> <xref linkend="org.osgi.service.metatype.AttributeDefinition.STRING" xrefstyle="hyperlink"/>
Long     <phrase role="symbol">↔</phrase> <xref linkend="org.osgi.service.metatype.AttributeDefinition.LONG" xrefstyle="hyperlink"/>
Double   <phrase role="symbol">↔</phrase> <xref linkend="org.osgi.service.metatype.AttributeDefinition.DOUBLE" xrefstyle="hyperlink"/>
Float    <phrase role="symbol">↔</phrase> <xref linkend="org.osgi.service.metatype.AttributeDefinition.FLOAT" xrefstyle="hyperlink"/>
Integer  <phrase role="symbol">↔</phrase> <xref linkend="org.osgi.service.metatype.AttributeDefinition.INTEGER" xrefstyle="hyperlink"/>
Byte     <phrase role="symbol">↔</phrase> <xref linkend="org.osgi.service.metatype.AttributeDefinition.BYTE" xrefstyle="hyperlink"/>
Char     <phrase role="symbol">↔</phrase> <xref linkend="org.osgi.service.metatype.AttributeDefinition.CHARACTER" xrefstyle="hyperlink"/>
Boolean  <phrase role="symbol">↔</phrase> <xref linkend="org.osgi.service.metatype.AttributeDefinition.BOOLEAN" xrefstyle="hyperlink"/>
Short    <phrase role="symbol">↔</phrase> <xref linkend="org.osgi.service.metatype.AttributeDefinition.SHORT" xrefstyle="hyperlink"/>
Password <phrase role="symbol">↔</phrase> <xref linkend="org.osgi.service.metatype.AttributeDefinition.PASSWORD" xrefstyle="hyperlink"/></programlisting></entry>
            </row>

            <row>
              <entry/>

              <entry><code>cardinality</code></entry>

              <entry><code>0</code></entry>

              <entry/>

              <entry><para><xref linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The number of elements an instance can take.
              Positive numbers describe an array (<code>[]</code>) and
              negative numbers describe a <code>List</code>
              object.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>min</code></entry>

              <entry/>

              <entry><code>string</code></entry>

              <entry><para><xref linkend="org.osgi.service.metatype.AttributeDefinition.validate-String-" xrefstyle="hyperlink"/></para></entry>

              <entry><para> A validation value. This value is not directly
              available from the <code>AttributeDefinition</code> interface.
              However, the <xref linkend="org.osgi.service.metatype.AttributeDefinition.validate-String-" xrefstyle="hyperlink"/> method must verify this. The semantics
              of this field depend on the type of this Attribute
              Definition.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>max</code></entry>

              <entry/>

              <entry><code>string</code></entry>

              <entry><para><xref linkend="org.osgi.service.metatype.AttributeDefinition.validate-String-" xrefstyle="hyperlink"/></para></entry>

              <entry><para>A validation value. Similar to the <code>min</code>
              field. When <code>min</code> or <code>max</code> are numbers,
              attribute values with a numeric data type are valid if <code>min
              &lt;= value &lt;= max</code>. Attribute values with a string (or
              equivalent) data type are valid if <code>min &lt;=
              value.length() &lt;= max</code>.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><para xml:id="i1366390"><code>default</code></para></entry>

              <entry/>

              <entry><code>string</code></entry>

              <entry><para><xref linkend="org.osgi.service.metatype.AttributeDefinition.getDefaultValue--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The default value. A default is an array of
              <code>String</code> objects. The XML attribute must contain a
              comma delimited list. The default value is trimmed and escaped
              in the same way as described in the <xref linkend="org.osgi.service.metatype.AttributeDefinition.validate-String-" xrefstyle="hyperlink"/> method. The empty string is significant
              and must be seen as an empty <code>List</code> or array if
              specified as the default for an attribute with a cardinality
              that is not equal to zero. Default values must be valid or
              otherwise ignored.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>required</code></entry>

              <entry><code>true</code></entry>

              <entry><code>boolean</code></entry>

              <entry><para/></entry>

              <entry><para>Required attribute. The <code>required</code>
              attribute indicates whether or not the attribute key must appear
              within the configuration dictionary to be valid.</para></entry>
            </row>

            <row>
              <entry spanname="element"><code>Option</code></entry>

              <entry colname="col6"><para>One option label/value for the
              options in an <code>AD</code>. Options are exclusive. The <xref linkend="org.osgi.service.metatype.AttributeDefinition.validate-String-" xrefstyle="hyperlink"/> method must verify that an attribute
              value matches one of the option values when
              present.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>label</code></entry>

              <entry><code>&lt;&gt;</code></entry>

              <entry><code>string</code></entry>

              <entry><para><xref linkend="org.osgi.service.metatype.AttributeDefinition.getOptionLabels--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The label</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>value</code></entry>

              <entry><code>&lt;&gt;</code></entry>

              <entry><code>string</code></entry>

              <entry><para><xref linkend="org.osgi.service.metatype.AttributeDefinition.getOptionValues--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The value</para></entry>
            </row>

            <row>
              <entry spanname="element"><code>Icon</code></entry>

              <entry colname="col6"><para>An icon definition.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>resource</code></entry>

              <entry><code>&lt;&gt;</code></entry>

              <entry><code>string</code></entry>

              <entry><para><xref linkend="org.osgi.service.metatype.ObjectClassDefinition.getIcon-int-" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The resource is a URL. The base URL is assumed to
              be the root of the bundle containing the XML file. That is, this
              URL can reference another resource in the bundle using a
              relative URL.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>size</code></entry>

              <entry><code>&lt;&gt;</code></entry>

              <entry><code>string</code></entry>

              <entry><para><xref linkend="org.osgi.service.metatype.ObjectClassDefinition.getIcon-int-" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The number of pixels of the icon, maps to the size
              parameter of the <xref linkend="org.osgi.service.metatype.ObjectClassDefinition.getIcon-int-" xrefstyle="hyperlink"/> method.</para></entry>
            </row>

            <row>
              <entry spanname="element"><code>Object</code></entry>

              <entry colname="col6"><para>A definition of an
              instance.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>ocdref</code></entry>

              <entry><code>&lt;&gt;</code></entry>

              <entry><code>string</code></entry>

              <entry><para/></entry>

              <entry><para>A reference to the id attribute of an OCD element.
              That is, this attribute defines the OCD type of this
              object.</para></entry>
            </row>

            <row>
              <entry spanname="element"><code>Attribute</code></entry>

              <entry colname="col6"><para>A value for an attribute of an
              object.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>adref</code></entry>

              <entry><code>&lt;&gt;</code></entry>

              <entry><code>string</code></entry>

              <entry><para/></entry>

              <entry><para>A reference to the id of the <code>AD</code> in the
              <code>OCD</code> as referenced by the parent
              <code>Object</code>.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>content</code></entry>

              <entry/>

              <entry><code>string</code></entry>

              <entry><para/></entry>

              <entry><para>The content of the attributes. If this is an array,
              the content must be separated by commas (<code>','
              \u002C</code>). Commas must be escaped as described at the <link endterm="i1366390" linkend="i1366390"/> attribute of the
              <code>AD</code> element.</para></entry>
            </row>

            <row>
              <entry spanname="element"><code>Value</code></entry>

              <entry colname="col6"><para>Holds a single value. This element
              can be repeated multiple times under an Attribute
              </para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="i1492258">
      <title>Designate Element</title>

      <para>For the MetaType Service, the <code>Designate</code> definition is
      used to declare the available PIDs and factory PIDs; the Attribute
      elements are never used by the MetaType service.</para>

      <para>The <xref linkend="org.osgi.service.metatype.MetaTypeInformation.getPids--" xrefstyle="hyperlink"/> method returns an array of PIDs that were
      specified in the <code>pid</code> attribute of the Object elements. The
      <xref linkend="org.osgi.service.metatype.MetaTypeInformation.getFactoryPids--" xrefstyle="hyperlink"/> method returns an array of the
      <code>factoryPid</code> attributes. For factories, the related
      <code>pid</code> attribute is ignored because all instances of a factory
      must share the same meta type.</para>

      <para>The following example shows a metatype reference to a singleton
      configuration and a factory configuration.</para>

      <programlisting>    &lt;Designate pid="com.acme.designate.1"&gt;
        &lt;Object ocdref="com.acme.designate"/&gt;
    &lt;/Designate&gt;
    &lt;Designate factoryPid="com.acme.designate.factory"
        bundle="*"&gt;
        &lt;Object ocdref="com.acme.designate"/&gt;
    &lt;/Designate&gt;</programlisting>

      <para>Other schemes can embed the <code>Object</code> element in the
      <code>Designate</code> element to define actual instances for the
      Configuration Admin service. In that case the <code>pid</code> attribute
      must be used together with the <code>factoryPid</code> attribute.
      However, in that case an aliasing model is required because the
      Configuration Admin service does not allow the creator to choose the
      <code>Configuration</code> object's PID.</para>
    </section>

    <section xml:id="i1504251">
      <title>Example Metadata File</title>

      <para>This example defines a meta type file for a Person record, based
      on ISO attribute types. The ids that are used are derived from ISO
      attributes.</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;MetaData 
    xmlns="http://www.osgi.org/xmlns/metatype/v1.3.0" 
    localization="person"&gt;
  &lt;OCD name="%person" id="2.5.6.6"
        description="%person record"&gt;
    &lt;AD name="%sex" id="2.5.4.12" type="Integer"&gt;
       &lt;Option label="%male" value="1"/&gt;
       &lt;Option label="%female" value="0"/&gt;
    &lt;/AD&gt;
    &lt;AD name="%sn" id="2.5.4.4" type="String"/&gt;
    &lt;AD name="%cn" id="2.5.4.3" type="String"/&gt;
    &lt;AD name="%seeAlso" id="2.5.4.34" type="String"
        cardinality="8"
        default="http://www.google.com,http://www.yahoo.com"/&gt;
    &lt;AD name="%telNumber" id="2.5.4.20" type="String"/&gt;
  &lt;/OCD&gt;

  &lt;Designate pid="com.acme.addressbook"&gt;
    &lt;Object ocdref="2.5.6.6"/&gt;
  &lt;/Designate&gt;
&lt;/MetaData&gt;</programlisting>

      <para>Translations for this file, as indicated by the localization
      attribute must be stored in the root directory (e.g.
      <code>person_du_NL.properties</code>). The default localization base
      name for the properties is <code>OSGI-INF/l10n/bundle</code>, but can be
      overridden by the manifest Bundle-Localization header and the
      <code>localization</code> attribute of the Meta Data element. The
      property files have the base name of <code>person</code>. The Dutch,
      French and English translations could look like:</para>

      <para><code>person_du_NL.properties</code>:</para>

      <programlisting>person=Persoon
person\ record=Persoons beschrijving
cn=Naam
sn=Voornaam
seeAlso=Zie ook
telNumber=Tel. Nummer
sex=Geslacht
male=Mannelijk
female=Vrouwelijk</programlisting>

      <para><code>person_fr.properties</code>:</para>

      <programlisting>person=Personne
person\ record=Description de la personne
cn=Nom
sn=Surnom
seeAlso=Reference
telNumber=Tel.
sex=Sexe
male=Homme
female=Femme</programlisting>

      <para><code>person_en_US.properties</code>:</para>

      <programlisting>person=Person
person\ record=Person Record
cn=Name
sn=Sur Name
seeAlso=See Also
telNumber=Tel.
sex=Sex
male=Male
female=Female</programlisting>
    </section>

    <section>
      <title>Object Element</title>

      <para>The <code>OCD</code> element can be used to describe the possible
      contents of a <code>Dictionary</code> object. In this case, the
      attribute name is the key. The <code>Object</code> element can be used
      to assign a value to a Dictionary object.</para>

      <para>For example:</para>

      <programlisting>&lt;Designate pid="com.acme.b"&gt;
  &lt;Object ocdref="b"&gt;
    &lt;Attribute adref="foo" content="Zaphod Beeblebrox"/&gt;
    &lt;Attribute adref="bar"&gt;
      &lt;Value&gt;1&lt;/Value&gt;
      &lt;Value&gt;2&lt;/Value&gt;
      &lt;Value&gt;3&lt;/Value&gt;
      &lt;Value&gt;4&lt;/Value&gt;
      &lt;Value&gt;5&lt;/Value&gt;
    &lt;/Attribute&gt;
  &lt;/Object&gt;
&lt;/Designate&gt;</programlisting>
    </section>
  </section>

  <section xml:id="i1502383">
    <title>Meta Type Resource XML Schema</title>

    <programlisting role="pgwide">&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"
    xmlns:metatype="http://www.osgi.org/xmlns/metatype/v1.3.0"
    targetNamespace="http://www.osgi.org/xmlns/metatype/v1.3.0"
    version="1.3.0"&gt;

    &lt;element name="MetaData" type="metatype:Tmetadata" /&gt;

    &lt;complexType name="Tmetadata"&gt;
        &lt;choice minOccurs="0" maxOccurs="unbounded"&gt;
            &lt;element name="OCD" type="metatype:Tocd" /&gt;
            &lt;element name="Designate" type="metatype:Tdesignate" /&gt;
            &lt;!-- It is non-deterministic, per W3C XML Schema 1.0: http://www.w3.org/TR/xmlschema-1/#cos-nonambig
                to use namespace="##any" below. --&gt;
            &lt;any namespace="##other" processContents="lax" /&gt;
        &lt;/choice&gt;
        &lt;attribute name="localization" type="string" use="optional" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;

    &lt;complexType name="Tocd"&gt;
        &lt;choice minOccurs="0" maxOccurs="unbounded"&gt;
            &lt;element name="AD" type="metatype:Tad" /&gt;
            &lt;element name="Icon" type="metatype:Ticon" /&gt;
            &lt;!-- It is non-deterministic, per W3C XML Schema 1.0: http://www.w3.org/TR/xmlschema-1/#cos-nonambig
                to use namespace="##any" below. --&gt;
            &lt;any namespace="##other" processContents="lax" /&gt;
        &lt;/choice&gt;
        &lt;attribute name="name" type="string" use="required" /&gt;
        &lt;attribute name="description" type="string" use="optional" /&gt;
        &lt;attribute name="id" type="string" use="required" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;

    &lt;complexType name="Tad"&gt;
        &lt;choice minOccurs="0" maxOccurs="unbounded"&gt;
            &lt;element name="Option" type="metatype:Toption" /&gt;
            &lt;!-- It is non-deterministic, per W3C XML Schema 1.0: http://www.w3.org/TR/xmlschema-1/#cos-nonambig
                to use namespace="##any" below. --&gt;
            &lt;any namespace="##other" processContents="lax"  /&gt;
        &lt;/choice&gt;
        &lt;attribute name="name" type="string" use="optional" /&gt;
        &lt;attribute name="description" type="string" use="optional" /&gt;
        &lt;attribute name="id" type="string" use="required" /&gt;
        &lt;attribute name="type" type="metatype:Tscalar" use="required" /&gt;
        &lt;attribute name="cardinality" type="int" use="optional"
            default="0" /&gt;
        &lt;attribute name="min" type="string" use="optional" /&gt;
        &lt;attribute name="max" type="string" use="optional" /&gt;
        &lt;attribute name="default" type="string" use="optional" /&gt;
        &lt;attribute name="required" type="boolean" use="optional"
            default="true" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;

    &lt;complexType name="Tobject"&gt;
        &lt;choice minOccurs="0" maxOccurs="unbounded"&gt;
            &lt;element name="Attribute" type="metatype:Tattribute" /&gt;
            &lt;!-- It is non-deterministic, per W3C XML Schema 1.0: http://www.w3.org/TR/xmlschema-1/#cos-nonambig
                to use namespace="##any" below. --&gt;
            &lt;any namespace="##other" processContents="lax" /&gt;
        &lt;/choice&gt;
        &lt;attribute name="ocdref" type="string" use="required" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;

    &lt;complexType name="Tattribute"&gt;
        &lt;choice minOccurs="0" maxOccurs="unbounded"&gt;
            &lt;element name="Value" type="string" /&gt;
            &lt;!-- It is non-deterministic, per W3C XML Schema 1.0: http://www.w3.org/TR/xmlschema-1/#cos-nonambig
                to use namespace="##any" below. --&gt;
            &lt;any namespace="##other" processContents="lax" /&gt;
        &lt;/choice&gt;
        &lt;attribute name="adref" type="string" use="required" /&gt;
        &lt;attribute name="content" type="string" use="optional" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;

    &lt;complexType name="Tdesignate"&gt;
        &lt;sequence&gt;
            &lt;element name="Object" type="metatype:Tobject" minOccurs="1"
                maxOccurs="1" /&gt;
            &lt;any namespace="##any" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;attribute name="pid" type="string" use="optional" /&gt;
        &lt;attribute name="factoryPid" type="string" use="optional" /&gt;
        &lt;attribute name="bundle" type="string" use="optional" /&gt;
        &lt;attribute name="optional" type="boolean" default="false"
            use="optional" /&gt;
        &lt;attribute name="merge" type="boolean" default="false"
            use="optional" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;

    &lt;simpleType name="Tscalar"&gt;
        &lt;restriction base="string"&gt;
            &lt;enumeration value="String" /&gt;
            &lt;enumeration value="Long" /&gt;
            &lt;enumeration value="Double" /&gt;
            &lt;enumeration value="Float" /&gt;
            &lt;enumeration value="Integer" /&gt;
            &lt;enumeration value="Byte" /&gt;
            &lt;enumeration value="Character" /&gt;
            &lt;enumeration value="Boolean" /&gt;
            &lt;enumeration value="Short" /&gt;
            &lt;enumeration value="Password" /&gt;
        &lt;/restriction&gt;
    &lt;/simpleType&gt;

    &lt;complexType name="Toption"&gt;
        &lt;sequence&gt;
            &lt;any namespace="##any" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;attribute name="label" type="string" use="required" /&gt;
        &lt;attribute name="value" type="string" use="required" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;

    &lt;complexType name="Ticon"&gt;
        &lt;sequence&gt;
            &lt;any namespace="##any" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;attribute name="resource" type="string" use="required" /&gt;
        &lt;attribute name="size" type="positiveInteger" use="required" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;

    &lt;attribute name="must-understand" type="boolean"&gt;
        &lt;annotation&gt;
            &lt;documentation xml:lang="en"&gt;
                This attribute should be used by extensions to documents
                to require that the document consumer understand the
                extension.
            &lt;/documentation&gt;
        &lt;/annotation&gt;
    &lt;/attribute&gt;
&lt;/schema&gt;
</programlisting>
  </section>

  <section xml:id="service.metatype-metatype.annotations">
    <title>Meta Type Annotations</title>

    <para>A developer can use Meta Type Annotations on a Component Property
    Type, see <xref linkend="service.component-component.property.types"/>, or
    an interface to define an Object Class Definition in a type safe manner.
    The Meta Type Annotations are <code>CLASS</code> retention annotations
    intended to be used during build time to generate Meta Type Resources from
    the Java class files providing a convenient way to create the Meta Type
    Resource XML documents.</para>

    <para>Tools processing these annotations must always generate valid Meta
    Type Resource XML documents. If the Meta Type Annotations are used in a
    way that is not supported or in error, then the tool must report the error
    to enable the developer to take corrective action.</para>

    <section>
      <title>ObjectClassDefinition Annotation</title>

      <para>The <xref linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition" xrefstyle="hyperlink"/> annotation can be applied to a Component
      Property Type or an interface. From that type, tooling can generate an
      <code>OCD</code> element. When applied to an interface, all the methods
      inherited from supertypes are include as Attribute Definitions. The tool
      processing the annotations must be able to examine all the types in the
      hierarchy of the annotated type to generate the Meta Type Resource. It
      is an error if the tool cannot examine a type in the hierarchy.</para>

      <para>It is an error to apply the <xref linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition" xrefstyle="hyperlink"/> annotation to concrete and abstract class types.
      It is also an error to apply it to an interface if any of the methods of
      the interface take arguments.</para>

      <para>The <xref linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition" xrefstyle="hyperlink"/> annotation can be applied without defining any
      element values as default values for the <xref linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition" xrefstyle="hyperlink"/> annotation elements can be generated from the
      annotated type. For example:</para>

      <programlisting>@ObjectClassDefinition
@interface Config {
  boolean enabled();
  String[] names();
  String topic();
}</programlisting>

      <para>In the following larger example, the <xref linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition" xrefstyle="hyperlink"/> annotation defines the description and name of
      the <code>OCD</code> which are to be localized using the specified
      resource as well as an icon resource. Also, <xref linkend="org.osgi.service.metatype.annotations.AttributeDefinition" xrefstyle="hyperlink"/> annotations are applied to the methods to supply
      some non-default values for the generated <code>AD</code>
      elements.</para>

      <programlisting>@ObjectClassDefinition(localization = "OSGI-INF/l10n/member",
    description = "%member.description",
    name = "%member.name"
    icon = @Icon(resource = "icon/member-32.png", size = 32))
@interface Member {
  @AttributeDefinition(type = AttributeType.PASSWORD,
    description = "%member.password.description",
    name = "%member.password.name")
  public String _password();

  @AttributeDefinition(options = {
    @Option(label = "%strategic", value = "strategic"),
    @Option(label = "%principal", value = "principal"),
    @Option(label = "%contributing", value = "contributing")
    },
    defaultValue = "contributing",
    description = "%member.membertype.description",
    name = "%member.membertype.name")
  public String type();
}</programlisting>
    </section>

    <section>
      <title>AttributeDefinition Annotation</title>

      <para>The <xref linkend="org.osgi.service.metatype.annotations.AttributeDefinition" xrefstyle="hyperlink"/> annotation is an optional annotation which can
      applied to the methods in a type annotated by <xref linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition" xrefstyle="hyperlink"/>. Each method of the type annotated by <xref linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition" xrefstyle="hyperlink"/> is mapped to an <code>AD</code> child element of
      the <code>OCD</code> element in the generated Meta Type Resource XML
      document. The <xref linkend="org.osgi.service.metatype.annotations.AttributeDefinition" xrefstyle="hyperlink"/> annotation only needs to be applied to a method
      if values other than the defaults are desired.</para>

      <para>The id of the Attribute Definition is generated from the method
      name as follows:</para>

      <itemizedlist>
        <listitem>
          <para>A single dollar sign (<code>'$' \u0024</code>) is removed
          unless it is followed by another dollar sign in which case the two
          consecutive dollar signs (<code>"$$"</code>) are converted to a
          single dollar sign.</para>
        </listitem>

        <listitem>
          <para>A single low line (<code>'_' \u005F</code>) is converted into
          a full stop (<code>'.' \u002E</code>) unless is it followed by
          another low line in which case the two consecutive low lines
          (<code>"__"</code>) are converted to a single low line.</para>
        </listitem>

        <listitem>
          <para>All other characters are unchanged.</para>
        </listitem>
      </itemizedlist>

      <para>The generated id becomes the value of the <code>id</code>
      attribute of the <code>AD</code> element in the generated Meta Type
      Resource XML document.</para>
    </section>

    <section>
      <title>Designate Annotation</title>

      <para>The <xref linkend="org.osgi.service.metatype.annotations.Designate" xrefstyle="hyperlink"/> annotation can be applied to a Declarative
      Services component class to make the connection between the pid of the
      component and an Object Class Definition. This annotation must be used
      on a type that is also annotated with the Declarative Services <xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> annotation. The component must only have a
      single PID which is used for the generated <code>Designate</code>
      element.</para>

      <para>In the following example, the <xref linkend="org.osgi.service.metatype.annotations.Designate" xrefstyle="hyperlink"/> annotation is applied to a Declarative Services
      component and references the Object Class Definition type.</para>

      <programlisting>@ObjectClassDefinition(id="my.config.ocd")
@interface Config {
  boolean enabled() default true;
  String[] names() default {"a", "b"};
  String topic() default "default/topic";
}

@Component(configurationPid="my.component.pid")
@Designate(ocd = Config.class)
public class MyComponent {
    static final String DEFAULT_TOPIC_PREFIX = "topic.prefix";
    protected void activate(Config configuration) {
        String t = configuration.topic();
    }
}</programlisting>

      <para>Tools processing these annotations will generate a
      <code>Designate</code> element in the generated Meta Type Resource XML
      document using the PID of the component and the id of the Object Class
      Definition. For example:</para>

      <programlisting>&lt;Designate pid="my.component.pid"&gt;
    &lt;Object ocdref="my.config.ocd"/&gt;
&lt;/Designate&gt;</programlisting>
    </section>
  </section>

  <section>
    <title>Limitations</title>

    <para>The OSGi MetaType specification is intended to be used for simple
    applications. It does not, therefore, support recursive data types, mixed
    types in arrays/lists, or nested arrays/lists.</para>
  </section>

  <section>
    <title>Related Standards</title>

    <para>One of the primary goals of this specification is to make metatype
    information available at run-time with minimal overhead. Many related
    standards are applicable to metatypes; except for Java beans, however, all
    other metatype standards are based on document formats (e.g. XML). In the
    OSGi framework, document format standards are deemed unsuitable due to the
    overhead required in the execution environment (they require a parser
    during run-time).</para>

    <para>Another consideration is the applicability of these standards. Most
    of these standards were developed for management systems on platforms
    where resources are not necessarily a concern. In this case, a metatype
    standard is normally used to describe the data structures needed to
    control some other computer via a network. This other computer, however,
    does not require the metatype information as it is
    <emphasis>implementing</emphasis> this information.</para>

    <para>In some traditional cases, a management system uses the metatype
    information to control objects in an OSGi framework. Therefore, the
    concepts and the syntax of the metatype information must be mappable to
    these popular standards. Clearly, then, these standards must be able to
    describe objects in an OSGi framework. This ability is usually not a
    problem, because the metatype languages used by current management systems
    are very powerful.</para>
  </section>

  <section xml:id="service.metatype-capabilities">
    <title>Capabilities</title>

    <para>Implementations of the Metatype Service specification must provide
    the following capabilities.</para>

    <itemizedlist>
      <listitem>
        <para>A capability in the <link linkend="service.namespaces-osgi.implementation.namespace"><code>osgi.implementation</code></link>
        namespace declaring a specification implementation with the name <xref linkend="org.osgi.service.metatype.MetaTypeService.METATYPE_CAPABILITY_NAME" xrefstyle="hyperlink"/>. This capability must also declare a uses
        constraint for the <code>org.osgi.service.metatype</code> package. For
        example:</para>

        <programlisting>Provide-Capability: osgi.implementation;
    osgi.implementation="osgi.metatype";
    version:Version="1.3";
    uses:="org.osgi.service.metatype"</programlisting>

        <para>This capability must follow the rules defined for the <xref linkend="service.namespaces-osgi.implementation.namespace"/>.</para>
      </listitem>

      <listitem>
        <para>A capability in the <link linkend="service.namespaces-osgi.extender.namespace"><code>osgi.extender</code></link>
        namespace declaring an extender with the name <xref linkend="org.osgi.service.metatype.MetaTypeService.METATYPE_CAPABILITY_NAME" xrefstyle="hyperlink"/>. This capability must also declare a uses
        constraint for the <code>org.osgi.service.metatype</code> package. For
        example:</para>

        <programlisting>Provide-Capability: osgi.extender;
    osgi.extender="osgi.metatype";
    version:Version="1.3";
    uses:="org.osgi.service.metatype"</programlisting>

        <para>This capability must follow the rules defined for the <xref linkend="service.namespaces-osgi.extender.namespace"/>.</para>
      </listitem>

      <listitem>
        <para>A capability in the <link linkend="service.namespaces-osgi.service.namespace"><code>osgi.service</code></link>
        namespace representing the <xref linkend="org.osgi.service.metatype.MetaTypeService" xrefstyle="hyperlink"/> service. This capability must also declare a
        uses constraint for the <code>org.osgi.service.metatype</code>
        package. For example:</para>

        <programlisting>Provide-Capability: osgi.service;
    objectClass:List&lt;String&gt;="org.osgi.service.metatype.MetaTypeService";
    uses:="org.osgi.service.metatype"</programlisting>

        <para>This capability must follow the rules defined for the <xref linkend="service.namespaces-osgi.service.namespace"/>.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Security Considerations</title>

    <para>Special security issues are not applicable for this
    specification.</para>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.metatype" xml:id="org.osgi.service.metatype" xml:base="../../generated/javadoc/docbook/org.osgi.service.metatype.xml">
   <title>org.osgi.service.metatype</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.metatype-version">Version 1.3</releaseinfo>
      <edition xml:id="org.osgi.service.metatype-version.number">1.3</edition>
   </info>
   <para>
Metatype Package Version 1.3.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.metatype; version="[1.3,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.metatype; version="[1.3,1.4)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.metatype.AttributeDefinition">
                  <code>AttributeDefinition</code>
               </link> - 
An interface to describe an attribute.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.metatype.MetaTypeInformation">
                  <code>MetaTypeInformation</code>
               </link> - 
A MetaType Information object is created by the MetaTypeService to return
 meta type information for a specific bundle.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.metatype.MetaTypeProvider">
                  <code>MetaTypeProvider</code>
               </link> - 
Provides access to metatypes.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.metatype.MetaTypeService">
                  <code>MetaTypeService</code>
               </link> - 
The MetaType Service can be used to obtain meta type information for a
 bundle.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.metatype.ObjectClassDefinition">
                  <code>ObjectClassDefinition</code>
               </link> - 
Description for the data type information of an objectclass.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="AttributeDefinition" xml:id="org.osgi.service.metatype.AttributeDefinition">
      <title>public interface AttributeDefinition</title>
      <para>
An interface to describe an attribute.
 
 </para>
      <para>
 An <code>AttributeDefinition</code> object defines a description of the data type
 of a property/attribute.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="BIGDECIMAL" xml:id="org.osgi.service.metatype.AttributeDefinition.BIGDECIMAL">
         <title>public static final int BIGDECIMAL = 10</title>
         <para>
The <code>BIGDECIMAL</code> type.
 
 Attributes of this type should be stored as <code>BigDecimal</code>,
 <code>List&lt;BigDecimal&gt;</code> or <code>BigDecimal[]</code> objects depending on
 <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link>.
   </para>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of 1.1.</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="BIGINTEGER" xml:id="org.osgi.service.metatype.AttributeDefinition.BIGINTEGER">
         <title>public static final int BIGINTEGER = 9</title>
         <para>
The <code>BIGINTEGER</code> type.
 
 Attributes of this type should be stored as <code>BigInteger</code>,
 <code>List&lt;BigInteger&gt;</code> or <code>BigInteger[]</code> objects, depending on
 the <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link> value.
   </para>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of 1.1.</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="BOOLEAN" xml:id="org.osgi.service.metatype.AttributeDefinition.BOOLEAN">
         <title>public static final int BOOLEAN = 11</title>
         <para>
The <code>BOOLEAN</code> type.
 
 Attributes of this type should be stored as <code>Boolean</code>,
 <code>List&lt;Boolean&gt;</code> or <code>boolean[]</code> objects depending on
 <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link>.
   </para>
      </section>
      <section role="field" xreflabel="BYTE" xml:id="org.osgi.service.metatype.AttributeDefinition.BYTE">
         <title>public static final int BYTE = 6</title>
         <para>
The <code>BYTE</code> type.
 
 Attributes of this type should be stored as <code>Byte</code>,
 <code>List&lt;Byte&gt;</code> or <code>byte[]</code> objects, depending on the
 <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link> value.
   </para>
      </section>
      <section role="field" xreflabel="CHARACTER" xml:id="org.osgi.service.metatype.AttributeDefinition.CHARACTER">
         <title>public static final int CHARACTER = 5</title>
         <para>
The <code>CHARACTER</code> type.
 
 Attributes of this type should be stored as <code>Character</code>,
 <code>List&lt;Character&gt;</code> or <code>char[]</code> objects, depending on the
 <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link> value.
   </para>
      </section>
      <section role="field" xreflabel="DOUBLE" xml:id="org.osgi.service.metatype.AttributeDefinition.DOUBLE">
         <title>public static final int DOUBLE = 7</title>
         <para>
The <code>DOUBLE</code> type.
 
 Attributes of this type should be stored as <code>Double</code>,
 <code>List&lt;Double&gt;</code> or <code>double[]</code> objects, depending on the
 <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link> value.
   </para>
      </section>
      <section role="field" xreflabel="FLOAT" xml:id="org.osgi.service.metatype.AttributeDefinition.FLOAT">
         <title>public static final int FLOAT = 8</title>
         <para>
The <code>FLOAT</code> type.
 
 Attributes of this type should be stored as <code>Float</code>,
 <code>List&lt;Float&gt;</code> or <code>float[]</code> objects, depending on the
 <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link> value.
   </para>
      </section>
      <section role="field" xreflabel="INTEGER" xml:id="org.osgi.service.metatype.AttributeDefinition.INTEGER">
         <title>public static final int INTEGER = 3</title>
         <para>
The <code>INTEGER</code> type.
 
 Attributes of this type should be stored as <code>Integer</code>,
 <code>List&lt;Integer&gt;</code> or <code>int[]</code> objects, depending on the
 <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link> value.
   </para>
      </section>
      <section role="field" xreflabel="LONG" xml:id="org.osgi.service.metatype.AttributeDefinition.LONG">
         <title>public static final int LONG = 2</title>
         <para>
The <code>LONG</code> type.
 
 Attributes of this type should be stored as <code>Long</code>,
 <code>List&lt;Long&gt;</code> or <code>long[]</code> objects, depending on the
 <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link> value.
   </para>
      </section>
      <section role="field" xreflabel="PASSWORD" xml:id="org.osgi.service.metatype.AttributeDefinition.PASSWORD">
         <title>public static final int PASSWORD = 12</title>
         <para>
The <code>PASSWORD</code> type.
 
 Attributes of this type must be stored as <code>String</code>,
 <code>List&lt;String&gt;</code> or <code>String[]</code> objects depending on
 <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link>. A <code>PASSWORD</code> must be treated as a string
 but the type can be used to disguise the information when displayed to a
 user to prevent others from seeing it.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SHORT" xml:id="org.osgi.service.metatype.AttributeDefinition.SHORT">
         <title>public static final int SHORT = 4</title>
         <para>
The <code>SHORT</code> type.
 
 Attributes of this type should be stored as <code>Short</code>,
 <code>List&lt;Short&gt;</code> or <code>short[]</code> objects, depending on the
 <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link> value.
   </para>
      </section>
      <section role="field" xreflabel="STRING" xml:id="org.osgi.service.metatype.AttributeDefinition.STRING">
         <title>public static final int STRING = 1</title>
         <para>
The <code>STRING</code> type.
 
 </para>
         <para>
 Attributes of this type should be stored as <code>String</code>,
 <code>List&lt;String&gt;</code> or <code>String[]</code> objects, depending on the
 <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link> value.</para>
      </section>
      <section role="method" xreflabel="getCardinality()" xml:id="org.osgi.service.metatype.AttributeDefinition.getCardinality--">
         <title>public int getCardinality()</title>
         <para role="description">
Return the cardinality of this attribute.
 
 The OSGi environment handles multi valued attributes in arrays ([]) or in
 <code>List</code> objects. The return value is defined as follows:
 
 </para>
         <programlisting> 
    x = Integer.MIN_VALUE    no limit, but use List
    x &lt; 0                    -x = max occurrences, store in List
    x &gt; 0                     x = max occurrences, store in array []
    x = Integer.MAX_VALUE    no limit, but use array []
    x = 0                     1 occurrence required</programlisting>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The cardinality of this attribute.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getDefaultValue()" xml:id="org.osgi.service.metatype.AttributeDefinition.getDefaultValue--">
         <title>public String[] getDefaultValue()</title>
         <para role="description">
Return a default for this attribute.
 
 The object must be of the appropriate type as defined by the cardinality
 and <code>getType()</code>. The return type is a list of <code>String</code>
 objects that can be converted to the appropriate type. The cardinality of
 the return array must follow the absolute cardinality of this type. For
 example, if the cardinality = 0, the array must contain 1 element. If the
 cardinality is 1, it must contain 0 or 1 elements. If it is -5, it must
 contain from 0 to max 5 elements. Note that the special case of a 0
 cardinality, meaning a single value, does not allow arrays or lists of 0
 elements.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Return a default value or <code>null</code> if no default exists.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getDescription()" xml:id="org.osgi.service.metatype.AttributeDefinition.getDescription--">
         <title>public String getDescription()</title>
         <para role="description">
Return a description of this attribute.
 
 The description may be localized and must describe the semantics of this
 type and any constraints.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The localized description of the definition.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getID()" xml:id="org.osgi.service.metatype.AttributeDefinition.getID--">
         <title>public String getID()</title>
         <para role="description">
Unique identity for this attribute.
 
 Attributes share a global namespace in the registry. For example, an
 attribute <code>cn</code> or <code>commonName</code> must always be a
 <code>String</code> and the semantics are always a name of some object. They
 share this aspect with LDAP/X.500 attributes. In these standards the OSI
 Object Identifier (OID) is used to uniquely identify an attribute. If
 such an OID exists, (which can be requested at several standard
 organizations and many companies already have a node in the tree) it can
 be returned here. Otherwise, a unique id should be returned which can be
 a Java class name (reverse domain name) or generated with a GUID
 algorithm. Note that all LDAP defined attributes already have an OID. It
 is strongly advised to define the attributes from existing LDAP schemes
 which will give the OID. Many such schemes exist ranging from postal
 addresses to DHCP parameters.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The id or oid</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getName()" xml:id="org.osgi.service.metatype.AttributeDefinition.getName--">
         <title>public String getName()</title>
         <para role="description">
Get the name of the attribute. This name may be localized.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The localized name of the definition.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getOptionLabels()" xml:id="org.osgi.service.metatype.AttributeDefinition.getOptionLabels--">
         <title>public String[] getOptionLabels()</title>
         <para role="description">
Return a list of labels of option values.
 
 </para>
         <para>
 The purpose of this method is to allow menus with localized labels. It is
 associated with <code>getOptionValues</code>. The labels returned here are
 ordered in the same way as the values in that method.
 
 </para>
         <para>
 If the function returns <code>null</code>, there are no option labels
 available.
 </para>
         <para>
 This list must be in the same sequence as the <code>getOptionValues()</code>
 method. That is, for each index i in <code>getOptionLabels</code>, i in
 <code>getOptionValues()</code> should be the associated value.
 
 </para>
         <para>
 For example, if an attribute can have the value male, female, unknown,
 this list can return (for dutch)
 <code>new String[] { "Man", "Vrouw", "Onbekend" }</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A list values</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getOptionValues()" xml:id="org.osgi.service.metatype.AttributeDefinition.getOptionValues--">
         <title>public String[] getOptionValues()</title>
         <para role="description">
Return a list of option values that this attribute can take.
 
 </para>
         <para>
 If the function returns <code>null</code>, there are no option values
 available.
 
 </para>
         <para>
 Each value must be acceptable to validate() (return "") and must be a
 <code>String</code> object that can be converted to the data type defined by
 getType() for this attribute.
 
 </para>
         <para>
 This list must be in the same sequence as <code>getOptionLabels()</code>. That
 is, for each index i in <code>getOptionValues</code>, i in
 <code>getOptionLabels()</code> should be the label.
 
 </para>
         <para>
 For example, if an attribute can have the value male, female, unknown,
 this list can return
 <code>new String[] { "male", "female", "unknown" }</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A list values</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.metatype.AttributeDefinition.getType--">
         <title>public int getType()</title>
         <para role="description">
Return the type for this attribute.
 
 </para>
         <para>
 Defined in the following constants which map to the appropriate Java
 type. <link linkend="org.osgi.service.metatype.AttributeDefinition.STRING">STRING</link>,<link linkend="org.osgi.service.metatype.AttributeDefinition.LONG">LONG</link>,<link linkend="org.osgi.service.metatype.AttributeDefinition.INTEGER">INTEGER</link>, <link linkend="org.osgi.service.metatype.AttributeDefinition.SHORT">SHORT</link>,
 <link linkend="org.osgi.service.metatype.AttributeDefinition.CHARACTER">CHARACTER</link>, <link linkend="org.osgi.service.metatype.AttributeDefinition.BYTE">BYTE</link>,<link linkend="org.osgi.service.metatype.AttributeDefinition.DOUBLE">DOUBLE</link>,<link linkend="org.osgi.service.metatype.AttributeDefinition.FLOAT">FLOAT</link>,
 <link linkend="org.osgi.service.metatype.AttributeDefinition.BOOLEAN">BOOLEAN</link>, <link linkend="org.osgi.service.metatype.AttributeDefinition.PASSWORD">PASSWORD</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The type for this attribute.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="validate(String)" xml:id="org.osgi.service.metatype.AttributeDefinition.validate-String-">
         <title>public String validate(String value)</title>
         <formalpara role="parameter">
            <title>value</title>
            <para>The value before turning it into the basic data type. If the
        cardinality indicates a multi-valued attribute then the given
        string must be escaped.</para>
         </formalpara>
         <para role="description">
Validate an attribute in <code>String</code> form.
 
 An attribute might be further constrained in value. This method will
 attempt to validate the attribute according to these constraints. It can
 return three different values:
 
 </para>
         <programlisting>  null           No validation present
  ""             No problems detected
  "..."          A localized description of why the value is wrong</programlisting>
         <para>
 
 If the cardinality of this attribute is multi-valued then this string
 must be interpreted as a comma delimited string. The complete value must
 be trimmed from white space as well as spaces around commas. Commas (
 <code>','</code> \u002C) and spaces (<code>' '</code> \u0020) and
 backslashes (<code>'\'</code> \u005C) can be escaped with another
 backslash. Escaped spaces must not be trimmed. For example:
 
 </para>
         <programlisting> value="  a\,b,b\,c,\ c\\,d   " =&gt; [ "a,b", "b,c", " c\", "d" ]</programlisting>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>null</code>, "", or another string</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="MetaTypeInformation" xml:id="org.osgi.service.metatype.MetaTypeInformation">
      <title>public interface MetaTypeInformation<?line-break?> extends MetaTypeProvider</title>
      <para>
A MetaType Information object is created by the MetaTypeService to return
 meta type information for a specific bundle.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="getBundle()" xml:id="org.osgi.service.metatype.MetaTypeInformation.getBundle--">
         <title>public Bundle getBundle()</title>
         <para role="description">
Return the bundle for which this object provides meta type information.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Bundle for which this object provides meta type information.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFactoryPids()" xml:id="org.osgi.service.metatype.MetaTypeInformation.getFactoryPids--">
         <title>public String[] getFactoryPids()</title>
         <para role="description">
Return the Factory PIDs (for ManagedServiceFactories) for which
 ObjectClassDefinition information is available.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Array of Factory PIDs.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getPids()" xml:id="org.osgi.service.metatype.MetaTypeInformation.getPids--">
         <title>public String[] getPids()</title>
         <para role="description">
Return the PIDs (for ManagedServices) for which ObjectClassDefinition
 information is available.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Array of PIDs.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="MetaTypeProvider" xml:id="org.osgi.service.metatype.MetaTypeProvider">
      <title>public interface MetaTypeProvider</title>
      <para>
Provides access to metatypes. This interface can be implemented on a Managed
 Service or Managed Service Factory as well as registered as a service. When
 registered as a service, it must be registered with a
 <link linkend="org.osgi.service.metatype.MetaTypeProvider.METATYPE_FACTORY_PID">METATYPE_FACTORY_PID</link> or <link linkend="org.osgi.service.metatype.MetaTypeProvider.METATYPE_PID">METATYPE_PID</link> service property (or
 both). Any PID mentioned in either of these factories must be a valid
 argument to the <link linkend="org.osgi.service.metatype.MetaTypeProvider.getObjectClassDefinition-String-String-">getObjectClassDefinition(String, String)</link> method.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="METATYPE_FACTORY_PID" xml:id="org.osgi.service.metatype.MetaTypeProvider.METATYPE_FACTORY_PID">
         <title>public static final String METATYPE_FACTORY_PID = "metatype.factory.pid"</title>
         <para>
Service property to signal that this service has
 <link linkend="org.osgi.service.metatype.ObjectClassDefinition">ObjectClassDefinition</link> objects for the given factory PIDs. The
 type of this service property is <code>String+</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="METATYPE_PID" xml:id="org.osgi.service.metatype.MetaTypeProvider.METATYPE_PID">
         <title>public static final String METATYPE_PID = "metatype.pid"</title>
         <para>
Service property to signal that this service has
 <link linkend="org.osgi.service.metatype.ObjectClassDefinition">ObjectClassDefinition</link> objects for the given PIDs. The type of
 this service property is <code>String+</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getLocales()" xml:id="org.osgi.service.metatype.MetaTypeProvider.getLocales--">
         <title>public String[] getLocales()</title>
         <para role="description">
Return a list of available locales.
 
 The results must be names that consists of language [ _ country [ _
 variation ]] as is customary in the <code>Locale</code> class.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An array of locale strings or <code>null</code> if there is no locale
         specific localization can be found.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getObjectClassDefinition(String,String)" xml:id="org.osgi.service.metatype.MetaTypeProvider.getObjectClassDefinition-String-String-">
         <title>public ObjectClassDefinition getObjectClassDefinition(String id,String locale)</title>
         <formalpara role="parameter">
            <title>id</title>
            <para>The ID of the requested object class. This can be a pid or
        factory pid returned by getPids or getFactoryPids.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>locale</title>
            <para>The locale of the definition or <code>null</code> for default
        locale.</para>
         </formalpara>
         <para role="description">
Returns an object class definition for the specified id localized to the
 specified locale.
 
 </para>
         <para>
 The locale parameter must be a name that consists of <code>language</code>[
 "_" <code>country</code>[ "_" <code>variation</code>] ] as is customary in the
 <code>Locale</code> class. This <code>Locale</code> class is not used because
 certain profiles do not contain it.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>ObjectClassDefinition</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the id or locale arguments are not
         valid   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="MetaTypeService" xml:id="org.osgi.service.metatype.MetaTypeService">
      <title>public interface MetaTypeService</title>
      <para>
The MetaType Service can be used to obtain meta type information for a
 bundle. The MetaType Service will examine the specified bundle for meta type
 documents to create the returned <code>MetaTypeInformation</code> object.
 
 </para>
      <para>
 If the specified bundle does not contain any meta type documents, then a
 <code>MetaTypeInformation</code> object will be returned that wrappers any
 <code>ManagedService</code> or <code>ManagedServiceFactory</code> services registered
 by the specified bundle that implement <code>MetaTypeProvider</code>. Thus the
 MetaType Service can be used to retrieve meta type information for bundles
 which contain a meta type documents or which provide their own
 <code>MetaTypeProvider</code> objects.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="field" xreflabel="METATYPE_CAPABILITY_NAME" xml:id="org.osgi.service.metatype.MetaTypeService.METATYPE_CAPABILITY_NAME">
         <title>public static final String METATYPE_CAPABILITY_NAME = "osgi.metatype"</title>
         <para>
Capability name for meta type document processors.
 
 </para>
         <para>
 Used in <code>Provide-Capability</code> and <code>Require-Capability</code>
 manifest headers with the <code>osgi.extender</code> namespace. For example:
 
 </para>
         <programlisting> Require-Capability: osgi.extender;
  filter:="(&amp;(osgi.extender=osgi.metatype)(version&gt;=1.3)(!(version&gt;=2.0)))"</programlisting>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="METATYPE_DOCUMENTS_LOCATION" xml:id="org.osgi.service.metatype.MetaTypeService.METATYPE_DOCUMENTS_LOCATION">
         <title>public static final String METATYPE_DOCUMENTS_LOCATION = "OSGI-INF/metatype"</title>
         <para>
Location of meta type documents. The MetaType Service will process each
 entry in the meta type documents directory.
   </para>
      </section>
      <section role="method" xreflabel="getMetaTypeInformation(Bundle)" xml:id="org.osgi.service.metatype.MetaTypeService.getMetaTypeInformation-Bundle-">
         <title>public MetaTypeInformation getMetaTypeInformation(Bundle bundle)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The bundle for which meta type information is requested.</para>
         </formalpara>
         <para role="description">
Return the MetaType information for the specified bundle.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A MetaTypeInformation object for the specified bundle.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ObjectClassDefinition" xml:id="org.osgi.service.metatype.ObjectClassDefinition">
      <title>public interface ObjectClassDefinition</title>
      <para>
Description for the data type information of an objectclass.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="ALL" xml:id="org.osgi.service.metatype.ObjectClassDefinition.ALL">
         <title>public static final int ALL = -1</title>
         <para>
Argument for <code>getAttributeDefinitions(int)</code>.
 </para>
         <para>
            <code>ALL</code> indicates that all the definitions are returned. The value is
 -1.</para>
      </section>
      <section role="field" xreflabel="OPTIONAL" xml:id="org.osgi.service.metatype.ObjectClassDefinition.OPTIONAL">
         <title>public static final int OPTIONAL = 2</title>
         <para>
Argument for <code>getAttributeDefinitions(int)</code>.
 </para>
         <para>
            <code>OPTIONAL</code> indicates that only the optional definitions are
 returned. The value is 2.</para>
      </section>
      <section role="field" xreflabel="REQUIRED" xml:id="org.osgi.service.metatype.ObjectClassDefinition.REQUIRED">
         <title>public static final int REQUIRED = 1</title>
         <para>
Argument for <code>getAttributeDefinitions(int)</code>.
 </para>
         <para>
            <code>REQUIRED</code> indicates that only the required definitions are
 returned. The value is 1.</para>
      </section>
      <section role="method" xreflabel="getAttributeDefinitions(int)" xml:id="org.osgi.service.metatype.ObjectClassDefinition.getAttributeDefinitions-int-">
         <title>public AttributeDefinition[] getAttributeDefinitions(int filter)</title>
         <formalpara role="parameter">
            <title>filter</title>
            <para>
               <code>ALL</code>,<code>REQUIRED</code>,<code>OPTIONAL</code>
            </para>
         </formalpara>
         <para role="description">
Return the attribute definitions for this object class.
 
 </para>
         <para>
 Return a set of attributes. The filter parameter can distinguish between
 <code>ALL</code>,<code>REQUIRED</code> or the <code>OPTIONAL</code> attributes.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An array of attribute definitions or <code>null</code> if no
         attributes are selected</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getDescription()" xml:id="org.osgi.service.metatype.ObjectClassDefinition.getDescription--">
         <title>public String getDescription()</title>
         <para role="description">
Return a description of this object class.
 
 The description may be localized.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The description of this object class.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getIcon(int)" xml:id="org.osgi.service.metatype.ObjectClassDefinition.getIcon-int-">
         <title>public InputStream getIcon(int size) throws IOException</title>
         <formalpara role="parameter">
            <title>size</title>
            <para>Requested size of an icon. For example, a 16x16 pixel icon
        has a size of 16</para>
         </formalpara>
         <para role="description">
Return an <code>InputStream</code> object that can be used to create an icon
 from.
 
 </para>
         <para>
 Indicate the size and return an <code>InputStream</code> object containing an
 icon. The returned icon maybe larger or smaller than the indicated size.
 
 </para>
         <para>
 The icon may depend on the localization.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An InputStream representing an icon or <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– If the <code>InputStream</code> cannot be returned.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getID()" xml:id="org.osgi.service.metatype.ObjectClassDefinition.getID--">
         <title>public String getID()</title>
         <para role="description">
Return the id of this object class.
 
 </para>
         <para>
            <code>ObjectDefintion</code> objects share a global namespace in the registry.
 They share this aspect with LDAP/X.500 attributes. In these standards the
 OSI Object Identifier (OID) is used to uniquely identify object classes.
 If such an OID exists, (which can be requested at several standard
 organizations and many companies already have a node in the tree) it can
 be returned here. Otherwise, a unique id should be returned which can be
 a java class name (reverse domain name) or generated with a GUID
 algorithm. Note that all LDAP defined object classes already have an OID
 associated. It is strongly advised to define the object classes from
 existing LDAP schemes which will give the OID for free. Many such schemes
 exist ranging from postal addresses to DHCP parameters.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The id of this object class.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getName()" xml:id="org.osgi.service.metatype.ObjectClassDefinition.getName--">
         <title>public String getName()</title>
         <para role="description">
Return the name of this object class.
 
 The name may be localized.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of this object class.</para>
         </formalpara>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.service.metatype.annotations" xml:id="org.osgi.service.metatype.annotations" xml:base="../../generated/javadoc/docbook/org.osgi.service.metatype.annotations.xml">
   <title>org.osgi.service.metatype.annotations</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.metatype.annotations-version">Version 1.3</releaseinfo>
      <edition xml:id="org.osgi.service.metatype.annotations-version.number">1.3</edition>
   </info>
   <para>
Metatype Annotations Package Version 1.3.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.metatype.annotations; version="[1.3,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.metatype.annotations; version="[1.3,1.4)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.metatype.annotations.AttributeDefinition">
                  <code>AttributeDefinition</code>
               </link> - <code>AttributeDefinition</code> information for the annotated method.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.metatype.annotations.AttributeType">
                  <code>AttributeType</code>
               </link> - 
Attribute types for the <link linkend="org.osgi.service.metatype.annotations.AttributeDefinition">AttributeDefinition</link> annotation.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.metatype.annotations.Designate">
                  <code>Designate</code>
               </link> - 
Generate a <code>Designate</code> element in the Meta Type Resource for an
 <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition">ObjectClassDefinition</link> using the annotated Declarative Services
 component.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.metatype.annotations.Icon">
                  <code>Icon</code>
               </link> - <code>Icon</code> information for an <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition">ObjectClassDefinition</link>.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition">
                  <code>ObjectClassDefinition</code>
               </link> - 
Generate a Meta Type Resource using the annotated type.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.metatype.annotations.Option">
                  <code>Option</code>
               </link> - <code>Option</code> information for an <link linkend="org.osgi.service.metatype.annotations.AttributeDefinition">AttributeDefinition</link>.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="AttributeDefinition" xml:id="org.osgi.service.metatype.annotations.AttributeDefinition">
      <title>@AttributeDefinition</title>
      <para>
         <code>AttributeDefinition</code> information for the annotated method.
 
 </para>
      <para>
 Each method of a type annotated by <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition">ObjectClassDefinition</link> has an
 implied AttributeDefinition annotation. This annotation is only used to
 specify non-default AttributeDefinition information.
 
 </para>
      <para>
 The <code>id</code> of this AttributeDefinition is generated from the name of the
 annotated method. The annotated method name is processed from left to right
 changing each character as follows:
 </para>
      <itemizedlist>
         <listitem>
            <para>A dollar sign (<code>'$'</code> \u0024) is removed unless it is followed
 by another dollar sign in which case the two consecutive dollar signs (
 <code>'$$'</code>) are changed to a single dollar sign.</para>
         </listitem>
         <listitem>
            <para>A low line (<code>'_'</code> \u005F) is changed to a full stop (
 <code>'.'</code> \u002E) unless is it followed by another low line in which
 case the two consecutive low lines (<code>'__'</code>) are changed to a single low
 line.</para>
         </listitem>
         <listitem>
            <para>All other characters are unchanged.</para>
         </listitem>
      </itemizedlist>
      <para>
 This id is the value of the id attribute of the generate AD element and is
 used as the name of the corresponding configuration property.
 
 </para>
      <para>
 This annotation is not processed at runtime. It must be processed by tools
 and used to contribute to a Meta Type Resource document for the bundle.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <code>The AD element of a Meta Type Resource.</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>METHOD</code>
         </para>
      </formalpara>
      <section role="method" xreflabel="name" xml:id="org.osgi.service.metatype.annotations.AttributeDefinition.name--">
         <title>String name default ""</title>
         <para role="description">
The human readable name of this AttributeDefinition.
 
 </para>
         <para>
 If not specified, the name of this AttributeDefinition is derived from
 the name of the annotated method. For example, low line (<code>'_'</code>
 \u005F) and dollar sign (<code>'$'</code> \u0024) are replaced with
 space (<code>' '</code> \u0020) and space is inserted between camel case
 words.
 
 </para>
         <para>
 If the name begins with the percent sign (<code>'%'</code> \u0025), the
 name can be <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.localization--">localized</link>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The name attribute of the AD element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="description" xml:id="org.osgi.service.metatype.annotations.AttributeDefinition.description--">
         <title>String description default ""</title>
         <para role="description">
The human readable description of this AttributeDefinition.
 
 </para>
         <para>
 If not specified, the description of this AttributeDefinition is the
 empty string.
 
 </para>
         <para>
 If the description begins with the percent sign (<code>'%'</code> \u0025),
 the description can be <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.localization--">localized</link>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The description attribute of the AD element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="type" xml:id="org.osgi.service.metatype.annotations.AttributeDefinition.type--">
         <title>AttributeType type default STRING</title>
         <para role="description">
The type of this AttributeDefinition.
 
 </para>
         <para>
 This must be one of the defined <link linkend="org.osgi.service.metatype.annotations.AttributeType">attributes types</link>.
 
 </para>
         <para>
 If not specified, the type is derived from the return type of the
 annotated method. Return types of <code>Class</code> and <code>Enum</code> are
 mapped to <link linkend="org.osgi.service.metatype.annotations.AttributeType.STRING">STRING</link>. If the return type is
 <code>List</code>, <code>Set</code>, <code>Collection</code>, <code>Iterable</code> or some
 type which can be determined at annotation processing time to
 </para>
         <orderedlist>
            <listitem>
               <para>be a subtype of <code>Collection</code> and</para>
            </listitem>
            <listitem>
               <para>have a public no argument constructor,</para>
            </listitem>
         </orderedlist>
         <para>
 then the type is derived from the generic type. For example, a return
 type of <code>List&lt;String&gt;</code> will be mapped to
 <link linkend="org.osgi.service.metatype.annotations.AttributeType.STRING">STRING</link>. A return type of a single
 dimensional array is supported and the type is the component type of the
 array. Multi dimensional arrays are not supported. Annotation return
 types are not supported. Any unrecognized type is mapped to
 <link linkend="org.osgi.service.metatype.annotations.AttributeType.STRING">STRING</link>. A tool processing the annotation
 should declare an error for unsupported return types.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The type attribute of the AD element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="cardinality" xml:id="org.osgi.service.metatype.annotations.AttributeDefinition.cardinality--">
         <title>int cardinality default 0</title>
         <para role="description">
The cardinality of this AttributeDefinition.
 
 </para>
         <para>
 If not specified, the cardinality is derived from the return type of the
 annotated method. For an array return type, the cardinality is a large
 positive value. If the return type is <code>List</code>, <code>Set</code>,
 <code>Collection</code>, <code>Iterable</code> or some type which can be determined
 at annotation processing time to
 </para>
         <orderedlist>
            <listitem>
               <para>be a subtype of <code>Collection</code> and</para>
            </listitem>
            <listitem>
               <para>have a public no argument constructor,</para>
            </listitem>
         </orderedlist>
         <para>
 the cardinality is a large negative value. Otherwise, the cardinality is
 0.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The cardinality attribute of the AD element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="min" xml:id="org.osgi.service.metatype.annotations.AttributeDefinition.min--">
         <title>String min default ""</title>
         <para role="description">
The minimum value for this AttributeDefinition.
 
 </para>
         <para>
 If not specified, there is no minimum value.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The min attribute of the AD element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="max" xml:id="org.osgi.service.metatype.annotations.AttributeDefinition.max--">
         <title>String max default ""</title>
         <para role="description">
The maximum value for this AttributeDefinition.
 
 </para>
         <para>
 If not specified, there is no maximum value.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The max attribute of the AD element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="defaultValue" xml:id="org.osgi.service.metatype.annotations.AttributeDefinition.defaultValue--">
         <title>String[] defaultValue default {}</title>
         <para role="description">
The default value for this AttributeDefinition.
 
 </para>
         <para>
 The specified values are concatenated into a comma delimited list to
 become the value of the <code>default</code> attribute of the generated
 <code>AD</code> element.
 
 </para>
         <para>
 If not specified and the annotated method is an annotation element that
 has a <code>default</code> value, then the value of this element is the
 <code>default</code> value of the annotated element. Otherwise, there is no
 default value.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The default attribute of the AD element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="required" xml:id="org.osgi.service.metatype.annotations.AttributeDefinition.required--">
         <title>boolean required default true</title>
         <para role="description">
The required value for this AttributeDefinition.
 
 </para>
         <para>
 If not specified, the value is <code>true</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The required attribute of the AD element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="options" xml:id="org.osgi.service.metatype.annotations.AttributeDefinition.options--">
         <title>Option[] options default {}</title>
         <para role="description">
The option information for this AttributeDefinition.
 
 </para>
         <para>
 For each specified <link linkend="org.osgi.service.metatype.annotations.Option">Option</link>, an <code>Option</code> element is generated
 for this AttributeDefinition.

 </para>
         <para>
 If not specified, the option information is derived from the return type
 of the annotated method. If the return type is an <code>enum</code>, a single
 dimensional array of an <code>enum</code>, or a <code>List</code>, <code>Set</code>,
 <code>Collection</code>, <code>Iterable</code> or some type which can be determined
 at annotation processing time to
 </para>
         <orderedlist>
            <listitem>
               <para>be a subtype of <code>Collection</code> and</para>
            </listitem>
            <listitem>
               <para>have a public no argument constructor,</para>
            </listitem>
         </orderedlist>
         <para>
 with a generic type of an <code>enum</code>, then the value of this element
 has an <link linkend="org.osgi.service.metatype.annotations.Option">Option</link> for each value of the <code>enum</code>. The label and
 value of each <link linkend="org.osgi.service.metatype.annotations.Option">Option</link> are set to the name of the corresponding
 <code>enum</code> value. Otherwise, no <code>Option</code> elements will be
 generated.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The Option element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="AttributeType" xml:id="org.osgi.service.metatype.annotations.AttributeType">
      <title>enum AttributeType</title>
      <para>
Attribute types for the <link linkend="org.osgi.service.metatype.annotations.AttributeDefinition">AttributeDefinition</link> annotation.
   </para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.metatype.annotations.AttributeDefinition.type--">AttributeDefinition.type()</link>
         </para>
      </formalpara>
      <section role="field" xreflabel="STRING" xml:id="org.osgi.service.metatype.annotations.AttributeType.STRING">
         <title>STRING</title>
         <para>
The <code>String</code> type.
 
 </para>
         <para>
 Attributes of this type should be stored as <code>String</code>,
 <code>List&lt;String&gt;</code> or <code>String[]</code> objects, depending on the
 <link linkend="org.osgi.service.metatype.annotations.AttributeDefinition.cardinality--">cardinality</link> value.</para>
      </section>
      <section role="field" xreflabel="LONG" xml:id="org.osgi.service.metatype.annotations.AttributeType.LONG">
         <title>LONG</title>
         <para>
The <code>Long</code> type.
 
 </para>
         <para>
 Attributes of this type should be stored as <code>Long</code>,
 <code>List&lt;Long&gt;</code> or <code>long[]</code> objects, depending on the
 <code>AttributeDefinition#cardinality() cardinality</code> value.</para>
      </section>
      <section role="field" xreflabel="INTEGER" xml:id="org.osgi.service.metatype.annotations.AttributeType.INTEGER">
         <title>INTEGER</title>
         <para>
The <code>Integer</code> type.
 
 </para>
         <para>
 Attributes of this type should be stored as <code>Integer</code>,
 <code>List&lt;Integer&gt;</code> or <code>int[]</code> objects, depending on the
 <code>AttributeDefinition#cardinality() cardinality</code> value.</para>
      </section>
      <section role="field" xreflabel="SHORT" xml:id="org.osgi.service.metatype.annotations.AttributeType.SHORT">
         <title>SHORT</title>
         <para>
The <code>Short</code> type.
 
 </para>
         <para>
 Attributes of this type should be stored as <code>Short</code>,
 <code>List&lt;Short&gt;</code> or <code>short[]</code> objects, depending on the
 <code>AttributeDefinition#cardinality() cardinality</code> value.</para>
      </section>
      <section role="field" xreflabel="CHARACTER" xml:id="org.osgi.service.metatype.annotations.AttributeType.CHARACTER">
         <title>CHARACTER</title>
         <para>
The <code>Character</code> type.
 
 </para>
         <para>
 Attributes of this type should be stored as <code>Character</code>,
 <code>List&lt;Character&gt;</code> or <code>char[]</code> objects, depending on the
 <code>AttributeDefinition#cardinality() cardinality</code> value.</para>
      </section>
      <section role="field" xreflabel="BYTE" xml:id="org.osgi.service.metatype.annotations.AttributeType.BYTE">
         <title>BYTE</title>
         <para>
The <code>Byte</code> type.
 
 </para>
         <para>
 Attributes of this type should be stored as <code>Byte</code>,
 <code>List&lt;Byte&gt;</code> or <code>byte[]</code> objects, depending on the
 <code>AttributeDefinition#cardinality() cardinality</code> value.</para>
      </section>
      <section role="field" xreflabel="DOUBLE" xml:id="org.osgi.service.metatype.annotations.AttributeType.DOUBLE">
         <title>DOUBLE</title>
         <para>
The <code>Double</code> type.
 
 </para>
         <para>
 Attributes of this type should be stored as <code>Double</code>,
 <code>List&lt;Double&gt;</code> or <code>double[]</code> objects, depending on the
 <code>AttributeDefinition#cardinality() cardinality</code> value.</para>
      </section>
      <section role="field" xreflabel="FLOAT" xml:id="org.osgi.service.metatype.annotations.AttributeType.FLOAT">
         <title>FLOAT</title>
         <para>
The <code>Float</code> type.
 
 </para>
         <para>
 Attributes of this type should be stored as <code>Float</code>,
 <code>List&lt;Float&gt;</code> or <code>float[]</code> objects, depending on the
 <code>AttributeDefinition#cardinality() cardinality</code> value.</para>
      </section>
      <section role="field" xreflabel="BOOLEAN" xml:id="org.osgi.service.metatype.annotations.AttributeType.BOOLEAN">
         <title>BOOLEAN</title>
         <para>
The <code>Boolean</code> type.
 
 </para>
         <para>
 Attributes of this type should be stored as <code>Boolean</code>,
 <code>List&lt;Boolean&gt;</code> or <code>boolean[]</code> objects depending on
 <code>AttributeDefinition#cardinality() cardinality</code>.</para>
      </section>
      <section role="field" xreflabel="PASSWORD" xml:id="org.osgi.service.metatype.annotations.AttributeType.PASSWORD">
         <title>PASSWORD</title>
         <para>
The <code>Password</code> type.
 
 </para>
         <para>
 Attributes of this type must be stored as <code>String</code>,
 <code>List&lt;String&gt;</code> or <code>String[]</code> objects depending on
 <link linkend="org.osgi.service.metatype.annotations.AttributeDefinition.cardinality--">cardinality</link>.
 
 </para>
         <para>
 A <code>Password</code> must be treated as a <code>String</code> but the type can
 be used to disguise the information when displayed to a user to prevent
 it from being seen.</para>
      </section>
   </section>
   <section role="class" xreflabel="Designate" xml:id="org.osgi.service.metatype.annotations.Designate">
      <title>@Designate</title>
      <para>
Generate a <code>Designate</code> element in the Meta Type Resource for an
 <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition">ObjectClassDefinition</link> using the annotated Declarative Services
 component.
 
 </para>
      <para>
 This annotation must be used on a type that is also annotated with the
 Declarative Services <link linkend="org.osgi.service.component.annotations.Component">Component</link> annotation. The component must only have a single PID which is
 used for the generated <code>Designate</code> element.
 
 </para>
      <para>
 This annotation is not processed at runtime. It must be processed by tools
 and used to contribute to a Meta Type Resource document for the bundle.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <code>The Designate element of a Meta Type Resource.</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>TYPE</code>
         </para>
      </formalpara>
      <section role="method" xreflabel="ocd" xml:id="org.osgi.service.metatype.annotations.Designate.ocd--">
         <title>Class&lt;?&gt; ocd</title>
         <para role="description">
The type of the <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition">ObjectClassDefinition</link> for this Designate.
 
 </para>
         <para>
 The specified type must be annotated with <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition">ObjectClassDefinition</link>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The ocdref attribute of the Designate element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="factory" xml:id="org.osgi.service.metatype.annotations.Designate.factory--">
         <title>boolean factory default false</title>
         <para role="description">
Specifies whether this Designate is for a factory PID.
 
 </para>
         <para>
 If <code>false</code>, then the PID value from the annotated component will be
 used in the <code>pid</code> attribute of the generated <code>Designate</code>
 element. If <code>true</code>, then the PID value from the annotated component
 will be used in the <code>factoryPid</code> attribute of the generated
 <code>Designate</code> element.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The pid and factoryPid attributes of the Designate element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Icon" xml:id="org.osgi.service.metatype.annotations.Icon">
      <title>@Icon</title>
      <para>
         <code>Icon</code> information for an <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition">ObjectClassDefinition</link>.
   </para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.icon--">ObjectClassDefinition.icon()</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code/>
         </para>
      </formalpara>
      <section role="method" xreflabel="resource" xml:id="org.osgi.service.metatype.annotations.Icon.resource--">
         <title>String resource</title>
         <para role="description">
The resource name for this Icon.
 
 </para>
         <para>
 The resource is a URL. The resource URL can be relative to the root of
 the bundle containing the Meta Type Resource.
 
 </para>
         <para>
 If the resource begins with the percent sign (<code>'%'</code> \u0025),
 the resource can be <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.localization--">localized</link>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The resource attribute of the Icon element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="size" xml:id="org.osgi.service.metatype.annotations.Icon.size--">
         <title>int size</title>
         <para role="description">
The pixel size of this Icon.
 
 </para>
         <para>
 For example, 32 represents a 32x32 icon.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The size attribute of the Icon element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ObjectClassDefinition" xml:id="org.osgi.service.metatype.annotations.ObjectClassDefinition">
      <title>@ObjectClassDefinition</title>
      <para>
Generate a Meta Type Resource using the annotated type.
 
 </para>
      <para>
 This annotation can be used without defining any element values since
 defaults can be generated from the annotated type. Each method of the
 annotated type has an implied <link linkend="org.osgi.service.metatype.annotations.AttributeDefinition">AttributeDefinition</link> annotation if not
 explicitly annotated.
 
 </para>
      <para>
 This annotation may only be used on annotation types and interface types. Use
 on concrete or abstract class types is unsupported. If applied to an
 interface then all methods inherited from super types are included as
 attributes.
 
 </para>
      <para>
 This annotation is not processed at runtime. It must be processed by tools
 and used to generate a Meta Type Resource document for the bundle.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <code>The OCD element of a Meta Type Resource.</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>TYPE</code>
         </para>
      </formalpara>
      <section role="method" xreflabel="id" xml:id="org.osgi.service.metatype.annotations.ObjectClassDefinition.id--">
         <title>String id default ""</title>
         <para role="description">
The id of this ObjectClassDefinition.
 
 </para>
         <para>
 If not specified, the id of this ObjectClassDefinition is the fully
 qualified name of the annotated type using the dollar sign (<code>'$'</code>
 \u0024) to separate nested class names from the name of their
 enclosing class. The id is not to be confused with a PID which can be
 specified by the <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.pid--">pid()</link> or <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.factoryPid--">factoryPid()</link> element.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The id attribute of the OCD element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="name" xml:id="org.osgi.service.metatype.annotations.ObjectClassDefinition.name--">
         <title>String name default ""</title>
         <para role="description">
The human readable name of this ObjectClassDefinition.
 
 </para>
         <para>
 If not specified, the name of this ObjectClassDefinition is derived from
 the <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.id--">id()</link>. For example, low line (<code>'_'</code> \u005F) and
 dollar sign (<code>'$'</code> \u0024) are replaced with space (<code>' '</code>
 \u0020) and space is inserted between camel case words.
 
 </para>
         <para>
 If the name begins with the percent sign (<code>'%'</code> \u0025), the
 name can be <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.localization--">localized</link>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The name attribute of the OCD element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="description" xml:id="org.osgi.service.metatype.annotations.ObjectClassDefinition.description--">
         <title>String description default ""</title>
         <para role="description">
The human readable description of this ObjectClassDefinition.
 
 </para>
         <para>
 If not specified, the description of this ObjectClassDefinition is the
 empty string.
 
 </para>
         <para>
 If the description begins with the percent sign (<code>'%'</code> \u0025),
 the description can be <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.localization--">localized</link>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The description attribute of the OCD element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="localization" xml:id="org.osgi.service.metatype.annotations.ObjectClassDefinition.localization--">
         <title>String localization default ""</title>
         <para role="description">
The localization resource of this ObjectClassDefinition.
 
 </para>
         <para>
 This refers to a resource property entry in the bundle that can be
 augmented with locale information. If not specified, the localization
 resource for this ObjectClassDefinition is the string
 "OSGI-INF/l10n/" followed by the <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.id--">id()</link>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The localization attribute of the MetaData element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="pid" xml:id="org.osgi.service.metatype.annotations.ObjectClassDefinition.pid--">
         <title>String[] pid default {}</title>
         <para role="description">
The PIDs associated with this ObjectClassDefinition.
 
 </para>
         <para>
 For each specified PID, a <code>Designate</code> element with a pid attribute
 is generated that <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.id--">references</link> this ObjectClassDefinition.
 
 </para>
         <para>
 The <link linkend="org.osgi.service.metatype.annotations.Designate">Designate</link> annotation can also be used to associate a
 Declarative Services component with an ObjectClassDefinition and generate
 a <code>Designate</code> element.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The pid attribute of the Designate element of a Meta Type Resource.</code>, <link linkend="org.osgi.service.metatype.annotations.Designate">Designate</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="factoryPid" xml:id="org.osgi.service.metatype.annotations.ObjectClassDefinition.factoryPid--">
         <title>String[] factoryPid default {}</title>
         <para role="description">
The factory PIDs associated with this ObjectClassDefinition.
 
 </para>
         <para>
 For each specified factory PID, a <code>Designate</code> element with a
 factoryPid attribute is generated that <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.id--">references</link> this
 ObjectClassDefinition.
 
 </para>
         <para>
 The <link linkend="org.osgi.service.metatype.annotations.Designate">Designate</link> annotation can also be used to associate a
 Declarative Services component with an ObjectClassDefinition and generate
 a <code>Designate</code> element.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The factoryPid attribute of the Designate element of a Meta Type Resource.</code>, <link linkend="org.osgi.service.metatype.annotations.Designate">Designate</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="icon" xml:id="org.osgi.service.metatype.annotations.ObjectClassDefinition.icon--">
         <title>Icon[] icon default {}</title>
         <para role="description">
The icon resources associated with this ObjectClassDefinition.
 
 </para>
         <para>
 For each specified <link linkend="org.osgi.service.metatype.annotations.Icon">Icon</link>, an <code>Icon</code> element is generated for
 this ObjectClassDefinition. If not specified, no <code>Icon</code> elements
 will be generated.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The Icon element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Option" xml:id="org.osgi.service.metatype.annotations.Option">
      <title>@Option</title>
      <para>
         <code>Option</code> information for an <link linkend="org.osgi.service.metatype.annotations.AttributeDefinition">AttributeDefinition</link>.
   </para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.metatype.annotations.AttributeDefinition.options--">AttributeDefinition.options()</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code/>
         </para>
      </formalpara>
      <section role="method" xreflabel="label" xml:id="org.osgi.service.metatype.annotations.Option.label--">
         <title>String label default ""</title>
         <para role="description">
The human readable label of this Option.
 
 </para>
         <para>
 If not specified, the label of this Option is the empty string.
 
 </para>
         <para>
 If the label begins with the percent sign (<code>'%'</code> \u0025), the
 label can be <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.localization--">localized</link>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The label attribute of the Option element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="value" xml:id="org.osgi.service.metatype.annotations.Option.value--">
         <title>String value</title>
         <para role="description">
The value of this Option.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The value attribute of the Option element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
   </section>
</section>

  <section xml:id="i1215848">
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i1215866"><title>LDAP.</title>http://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol</bibliomixed>

      <bibliomixed xml:id="i1215870"><title>Understanding and Deploying LDAP
      Directory services</title>Timothy Howes, et al. ISBN 1-57870-070-1,
      MacMillan Technical publishing.</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="107" revision="$Id: 75fb0224e764248a6341fa026ed0d8927294b06b $" version="5" xml:id="service.useradmin" xml:base="../107/service.useradmin.xml">
  <title>User Admin Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.useradmin-version" linkend="org.osgi.service.useradmin"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>OSGi frameworks are often used in places where end users or devices
    initiate actions. These kinds of actions inevitably create a need for
    authenticating the initiator. Authenticating can be done in many different
    ways, including with passwords, one-time token cards, biometrics, and
    certificates.</para>

    <para>Once the initiator is authenticated, it is necessary to verify that
    this principal is authorized to perform the requested action. This
    authorization can only be decided by the operator of the OSGi environment,
    and thus requires administration.</para>

    <para>The User Admin service provides this type of functionality. Bundles
    can use the User Admin service to authenticate an initiator and represent
    this authentication as an <code>Authorization</code> object. Bundles that
    execute actions on behalf of this user can use the
    <code>Authorization</code> object to verify if that user is
    authorized.</para>

    <para>The User Admin service provides authorization based on who runs the
    code, instead of using the Java code-based permission model. See <xref linkend="i1307817"/>. It performs a role similar to <xref linkend="i1307810"/>.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Authentication</emphasis> - A large number of
          authentication schemes already exist, and more will be developed.
          The User Admin service must be flexible enough to adapt to the many
          different authentication schemes that can be run on a computer
          system.</para>
        </listitem>

        <listitem>
          <para><emphasis>Authorization</emphasis> - All bundles should use
          the User Admin service to authenticate users and to find out if
          those users are authorized. It is therefore paramount that a bundle
          can find out authorization information with little effort.</para>
        </listitem>

        <listitem>
          <para><emphasis>Security</emphasis> - Detailed security, based on
          the Framework security model, is needed to provide safe access to
          the User Admin service. It should allow limited access to the
          credentials and other properties.</para>
        </listitem>

        <listitem>
          <para><emphasis>Extensibility</emphasis> - Other bundles should be
          able to build on the User Admin service. It should be possible to
          examine the information from this service and get real-time
          notifications of changes.</para>
        </listitem>

        <listitem>
          <para><emphasis>Properties</emphasis> - The User Admin service must
          maintain a persistent database of users. It must be possible to use
          this database to hold more information about this user.</para>
        </listitem>

        <listitem>
          <para><emphasis>Administration</emphasis> - Administering
          authorizations for each possible action and initiator is
          time-consuming and error-prone. It is therefore necessary to have
          mechanisms to group end users and make it simple to assign
          authorizations to all members of a group at one time.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <para>This Specification defines the following User Admin service
      entities:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>User Admin</emphasis> - This interface manages a
          database of named roles which can be used for authorization and
          authentication purposes.</para>
        </listitem>

        <listitem>
          <para><emphasis>Role</emphasis> - This interface exposes the
          characteristics shared by all roles: a name, a type, and a set of
          properties.</para>
        </listitem>

        <listitem>
          <para><emphasis>User</emphasis> - This interface (which extends
          <code>Role</code>) is used to represent any entity which may have
          credentials associated with it. These credentials can be used to
          authenticate an initiator.</para>
        </listitem>

        <listitem>
          <para><emphasis>Group</emphasis> - This interface (which extends
          <code>User</code>) is used to contain an aggregation of named
          <code>Role</code> objects (<code>Group</code> or <code>User</code>
          objects).</para>
        </listitem>

        <listitem>
          <para><emphasis>Authorization</emphasis> - This interface
          encapsulates an authorization context on which bundles can base
          authorization decisions.</para>
        </listitem>

        <listitem>
          <para><emphasis>User Admin Event</emphasis> - This class is used to
          represent a role change event.</para>
        </listitem>

        <listitem>
          <para><emphasis>User Admin Listener</emphasis> - This interface
          provides a listener for events of type <code>UserAdminEvent</code>
          that can be registered as a service.</para>
        </listitem>

        <listitem>
          <para><emphasis>User Admin Permission</emphasis> - This permission
          is needed to configure and access the roles managed by a User Admin
          service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Role.USER_ANYONE</emphasis> - This is a special User
          object that represents <emphasis>any</emphasis> user, it implies all
          other User objects. It is also used when a Group is used with only
          basic members. The <code>Role.USER_ANYONE</code> is then the only
          required member.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>User Admin Service, org.osgi.service.useradmin</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="4.681in" contentwidth="6.500in" fileref="useradmin-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Operation</title>

      <para>An Operator uses the User Admin service to define OSGi framework
      users and configure them with properties, credentials, and
      <emphasis>roles</emphasis>.</para>

      <para>A <code>Role</code> object represents the initiator of a request
      (human or otherwise). This specification defines two types of
      roles:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>User</emphasis> - A <code>User</code> object can be
          configured with credentials, such as a password, and properties,
          such as address, telephone number, and so on.</para>
        </listitem>

        <listitem>
          <para><emphasis>Group</emphasis> - A <code>Group</code> object is an
          aggregation of <emphasis>basic</emphasis> and
          <emphasis>required</emphasis> roles. Basic and required roles are
          used in the authorization phase.</para>
        </listitem>
      </itemizedlist>

      <para>An OSGi framework can have several entry points, each of which
      will be responsible for authenticating incoming requests. An example of
      an entry point is the Http Service, which delegates authentication of
      incoming requests to the <code>handleSecurity</code> method of the
      <code>HttpContext</code> object that was specified when the target
      servlet or resource of the request was registered.</para>

      <para>The OSGi framework entry points should use the information in the
      User Admin service to authenticate incoming requests, such as a password
      stored in the private credentials or the use of a certificate.</para>

      <para>A bundle can determine if a request for an action is authorized by
      looking for a <code>Role</code> object that has the name of the
      requested action.</para>

      <para>The bundle may execute the action if the <code>Role</code> object
      representing the initiator <emphasis>implies</emphasis> the
      <code>Role</code> object representing the requested action.</para>

      <para>For example, an initiator <code>Role</code> object
      <emphasis>X</emphasis> implies an action <code>Group</code> object
      <emphasis>A</emphasis> if:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>X</emphasis> implies at least one of
          <emphasis>A</emphasis>'s basic members, and</para>
        </listitem>

        <listitem>
          <para><emphasis>X</emphasis> implies all of <emphasis>A</emphasis>'s
          required members.</para>
        </listitem>
      </itemizedlist>

      <para>An initiator <code>Role</code> object <emphasis>X</emphasis>
      implies an action <code>User</code> object <emphasis>A</emphasis>
      if:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>A</emphasis> and<emphasis> X</emphasis> are
          equal.</para>
        </listitem>
      </itemizedlist>

      <para>The <code>Authorization</code> class handles this non-trivial
      logic. The User Admin service can capture the privileges of an
      authenticated <code>User</code> object into an
      <code>Authorization</code> object. The
      <code>Authorization.hasRole</code> method checks if the authenticate
      <code>User</code> object has (or implies) a specified action
      <code>Role</code> object.</para>

      <para>For example, in the case of the Http Service, the
      <code>HttpContext</code> object can authenticate the initiator and place
      an <code>Authorization</code> object in the request header. The servlet
      calls the <code>hasRole</code> method on this <code>Authorization</code>
      object to verify that the initiator has the authority to perform a
      certain action. See <xref linkend="service.http.authentication"/>.</para>
    </section>
  </section>

  <section>
    <title>Authentication</title>

    <para>The authentication phase determines if the initiator is actually the
    one it says it is. Mechanisms to authenticate always need some information
    related to the user or the OSGi framework to authenticate an external
    user. This information can consist of the following:</para>

    <itemizedlist>
      <listitem>
        <para>A secret known only to the initiator.</para>
      </listitem>

      <listitem>
        <para>Knowledge about cards that can generate a unique token.</para>
      </listitem>

      <listitem>
        <para>Public information like certificates of trusted signers.</para>
      </listitem>

      <listitem>
        <para>Information about the user that can be measured in a trusted
        way.</para>
      </listitem>

      <listitem>
        <para>Other specific information.</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Repository</title>

      <para>The User Admin service offers a repository of <code>Role</code>
      objects. Each <code>Role</code> object has a unique name and a set of
      properties that are readable by anyone, and are changeable when the
      changer has the <code>UserAdminPermission</code>. Additionally,
      <code>User</code> objects, a sub-interface of <code>Role</code>, also
      have a set of private protected properties called credentials.
      Credentials are an extra set of properties that are used to authenticate
      users and that are protected by <code>UserAdminPermission</code>.</para>

      <para>Properties are accessed with the <code>Role.getProperties()</code>
      method and credentials with the
      <code>User.getCredentials()</code>method. Both methods return a
      <code>Dictionary</code> object containing key/value pairs. The keys are
      <code>String</code> objects and the values of the
      <code>Dictionary</code> object are limited to <code>String</code> or
      <code>byte[ ]</code> objects.</para>

      <para>This specification does not define any standard keys for the
      properties or credentials. The keys depend on the implementation of the
      authentication mechanism and are not formally defined by OSGi
      specifications.</para>

      <para>The repository can be searched for objects that have a unique
      property (key/value pair) with the method
      <code>UserAdmin.getUser(String,String)</code>. This makes it easy to
      find a specific user related to a specific authentication mechanism. For
      example, a secure card mechanism that generates unique tokens could have
      a serial number identifying the user. The owner of the card could be
      found with the method</para>

      <programlisting>User owner = useradmin.getUser(
    "secure-card-serial", "132456712-1212" );</programlisting>

      <para>If multiple <code>User</code> objects have the same property (key
      <emphasis>and</emphasis> value), a <code>null</code> is returned.</para>

      <para>There is a convenience method to verify that a user has a
      credential without actually getting the credential. This is the
      <code>User.hasCredential(String,Object)</code> method.</para>

      <para>Access to credentials is protected on a name basis by
      <code>UserAdminPermission</code>. Because properties can be read by
      anyone with access to a <code>User</code> object,
      <code>UserAdminPermission</code> only protects change access to
      properties.</para>
    </section>

    <section>
      <title>Basic Authentication</title>

      <para>The following example shows a very simple authentication algorithm
      based on passwords.</para>

      <para>The vendor of the authentication bundle uses the property
      <code>"com.acme.basic-id"</code> to contain the name of a user as it
      logs in. This property is used to locate the <code>User</code> object in
      the repository. Next, the credential <code>"com.acme.password"</code>
      contains the password and is compared to the entered password. If the
      password is correct, the <code>User</code> object is returned. In all
      other cases a <code>SecurityException</code> is thrown.</para>

      <programlisting>public User authenticate(
        UserAdmin ua, String name, String pwd )
    throws SecurityException {
    User user = ua.getUser("com.acme.basicid",
        username);
    if (user == null)
        throw new SecurityException( "No such user" );

    if (!user.hasCredential("com.acme.password", pwd))
        throw new SecurityException( 
            "Invalid password" );
    return user;
}</programlisting>
    </section>

    <section>
      <title>Certificates</title>

      <para>Authentication based on certificates does not require a shared
      secret. Instead, a certificate contains a name, a public key, and the
      signature of one or more signers.</para>

      <para>The name in the certificate can be used to locate a
      <code>User</code> object in the repository. Locating a <code>User</code>
      object, however, only identifies the initiator and does not authenticate
      it.</para>

      <orderedlist>
        <listitem>
          <para>The first step to authenticate the initiator is to verify that
          it has the private key of the certificate.</para>
        </listitem>

        <listitem>
          <para>Next, the User Admin service must verify that it has a
          <code>User</code> object with the right property, for example
          <code>"com.acme.certificate"="Fudd"</code>.</para>
        </listitem>

        <listitem>
          <para>The next step is to see if the certificate is signed by a
          trusted source. The bundle could use a central list of trusted
          signers and only accept certificates signed by those sources.
          Alternatively, it could require that the certificate itself is
          already stored in the repository under a unique key as a
          <code>byte[]</code> in the credentials.</para>
        </listitem>

        <listitem>
          <para>In any case, once the certificate is verified, the associated
          <code>User</code> object is authenticated.</para>
        </listitem>
      </orderedlist>
    </section>
  </section>

  <section>
    <title>Authorization</title>

    <para>The User Admin service authorization architecture is a
    <emphasis>role-based model</emphasis>. In this model, every action that
    can be performed by a bundle is associated with a
    <emphasis>role</emphasis>. Such a role is a <code>Group</code> object
    (called group from now on) from the User Admin service repository. For
    example, if a servlet could be used to activate the alarm system, there
    should be a group named <code>AlarmSystemActivation</code>.</para>

    <para>The operator can administrate authorizations by populating the group
    with <code>User</code> objects (users) and other groups. Groups are used
    to minimize the amount of administration required. For example, it is
    easier to create one <code>Administrators</code> group and add
    administrative roles to it rather than individually administer all users
    for each role. Such a group requires only one action to remove or add a
    user as an administrator.</para>

    <para>The authorization decision can now be made in two fundamentally
    different ways:</para>

    <para>An initiator could be allowed to carry out an action (represented by
    a <code>Group</code> object) if it implied any of the <code>Group</code>
    object's members. For example, the <code>AlarmSystemActivation
    Group</code> object contains an <code>Administrators</code> and a
    <code>Family Group</code> object:</para>

    <programlisting>    Administrators        = { Elmer, Pepe,Bugs }
    Family                = { Elmer, Pepe, Daffy }

    AlarmSystemActivation = { Administrators, Family}</programlisting>

    <para>Any of the four members <code>Elmer</code>, <code>Pepe</code>,
    <code>Daffy</code>, or <code>Bugs</code> can activate the alarm
    system.</para>

    <para>Alternatively, an initiator could be allowed to perform an action
    (represented by a <code>Group</code> object) if it implied
    <emphasis>all</emphasis> the <code>Group</code> object's members. In this
    case, using the same <code>AlarmSystemActivation</code> group, only
    <code>Elmer</code> and <code>Pepe</code> would be authorized to activate
    the alarm system, since <code>Daffy</code> and <code>Bugs</code> are
    <emphasis>not</emphasis> members of <emphasis>both</emphasis> the
    <code>Administrators</code> and <code>Family Group</code> objects.</para>

    <para>The User Admin service supports a combination of both strategies by
    defining both a set of <emphasis>basic members</emphasis> (any) and a set
    of <emphasis>required members</emphasis> (all).</para>

    <programlisting>Administrators            = { Elmer, Pepe, Bugs}
Family                    = { Elmer, Pepe, Daffy }

AlarmSystemActivation 
    required              = { Administrators }
    basic                 = { Family }</programlisting>

    <para>The difference is made when <code>Role</code> objects are added to
    the <code>Group</code> object. To add a basic member, use the
    <code>Group.addMember(Role)</code> method. To add a required member, use
    the <code>Group.addRequiredMember(Role)</code> method.</para>

    <para>Basic members define the set of members that can get access and
    required members reduce this set by requiring the initiator to
    <emphasis>imply</emphasis> each required member.</para>

    <para>A <code>User</code> object implies a <code>Group</code> object if it
    implies the following:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>All</emphasis> of the Group's required members,
        and</para>
      </listitem>

      <listitem>
        <para>At <emphasis>least</emphasis> one of the Group's basic
        members</para>
      </listitem>
    </itemizedlist>

    <para>A <code>User</code> object always implies itself.</para>

    <para>If only required members are used to qualify the implication, then
    the standard user <code>Role.</code><xref linkend="org.osgi.service.useradmin.Role.USER_ANYONE" xrefstyle="hyperlink"/> can be obtained from the User Admin service and
    added to the <code>Group</code> object. This <code>Role</code> object is
    implied by anybody and therefore does not affect the required
    members.</para>

    <section>
      <title>The Authorization Object</title>

      <para>The complexity of authorization is hidden in an
      <code>Authorization</code> class. Normally, the authenticator should
      retrieve an <code>Authorization</code> object from the User Admin
      service by passing the authenticated <code>User</code> object as an
      argument. This <code>Authorization</code> object is then passed to the
      bundle that performs the action. This bundle checks the authorization
      with the <code>Authorization.hasRole(String)</code> method. The
      performing bundle must pass the name of the action as an argument. The
      <code>Authorization</code> object checks whether the authenticated user
      implies the <code>Role</code> object, specifically a <code>Group</code>
      object, with the given name. This is shown in the following
      example.</para>

      <programlisting>public void activateAlarm(Authorization auth) {
    if ( auth.hasRole( "AlarmSystemActivation" ) ) {
        // activate the alarm
        ...
    }
    else throw new SecurityException( 
        "Not authorized to activate alarm" );
}</programlisting>
    </section>

    <section>
      <title>Authorization Example</title>

      <para>This section demonstrates a possible use of the User Admin
      service. The service has a flexible model and many other schemes are
      possible.</para>

      <para>Assume an Operator installs an OSGi framework. Bundles in this
      environment have defined the following action groups:</para>

      <programlisting>AlarmSystemControl
InternetAccess
TemperatureControl
PhotoAlbumEdit
PhotoAlbumView
PortForwarding</programlisting>

      <para>Installing and uninstalling bundles could potentially extend this
      set. Therefore, the Operator also defines a number of groups that can be
      used to contain the different types of system users.</para>

      <programlisting>Administrators
Buddies
Children
Adults
Residents</programlisting>

      <para>In a particular instance, the Operator installs it in a household
      with the following residents and buddies:</para>

      <programlisting>Residents:      Elmer, Fudd, Marvin, Pepe
Buddies:        Daffy, Foghorn</programlisting>

      <para>First, the residents and buddies are assigned to the system user
      groups. Second, the user groups need to be assigned to the action
      groups.</para>

      <para>The following tables show how the groups could be assigned.</para>

      <table>
        <title>Example Groups with Basic and Required Members</title>

        <tgroup cols="7">
          <colspec colnum="1" colwidth="1.5*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="1*"/>

          <colspec colnum="4" colwidth="1*"/>

          <colspec colnum="5" colwidth="1*"/>

          <colspec colnum="6" colwidth="1*"/>

          <colspec colnum="7" colwidth="1*"/>

          <thead>
            <row>
              <entry>Groups</entry>

              <entry>Elmer</entry>

              <entry>Fudd</entry>

              <entry>Marvin</entry>

              <entry>Pepe</entry>

              <entry>Daffy</entry>

              <entry>Foghorn</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>Residents</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>
            </row>

            <row>
              <entry><code>Buddies</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>Basic</code></entry>
            </row>

            <row>
              <entry><code>Children</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>
            </row>

            <row>
              <entry><code>Adults</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>
            </row>

            <row>
              <entry><code>Administrators</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <table>
        <title>Example Action Groups with their Basic and Required
        Members</title>

        <tgroup cols="6">
          <colspec colnum="1" colwidth="2*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="1*"/>

          <colspec colnum="4" colwidth="1*"/>

          <colspec colnum="5" colwidth="1*"/>

          <colspec colnum="6" colwidth="1*"/>

          <thead>
            <row>
              <entry>Groups</entry>

              <entry>Residents</entry>

              <entry>Buddies</entry>

              <entry>Children</entry>

              <entry>Adults</entry>

              <entry>Admin</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>AlarmSystemControl</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>Required</code></entry>
            </row>

            <row>
              <entry><code>InternetAccess</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>Required</code></entry>

              <entry><code>-</code></entry>
            </row>

            <row>
              <entry><code>TemperatureControl</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>Required</code></entry>

              <entry><code>-</code></entry>
            </row>

            <row>
              <entry><code>PhotoAlbumEdit</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>-</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>-</code></entry>
            </row>

            <row>
              <entry><code>PhotoAlbumView</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>
            </row>

            <row>
              <entry><code>PortForwarding</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>Required</code></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>

  <section>
    <title>Repository Maintenance</title>

    <para>The <code>UserAdmin</code> interface is a straightforward API to
    maintain a repository of <code>User</code> and <code>Group</code> objects.
    It contains methods to create new <code>Group</code> and <code>User</code>
    objects with the <code>createRole(String,int)</code> method. The method is
    prepared so that the same signature can be used to create new types of
    roles in the future. The interface also contains a method to remove a
    <code>Role</code> object.</para>

    <para>The existing configuration can be obtained with methods that list
    all <code>Role</code> objects using a filter argument. This filter, which
    has the same syntax as the Framework filter, must only return the
    <code>Role</code> objects for which the filter matches the
    properties.</para>

    <para>Several utility methods simplify getting <code>User</code> objects
    depending on their properties.</para>
  </section>

  <section xml:id="i1529238">
    <title>User Admin Events</title>

    <para>Changes in the User Admin service can be determined in real time.
    Each User Admin service implementation must send a
    <code>UserAdminEvent</code> object to any service in the Framework service
    registry that is registered under the <code>UserAdminListener</code>
    interface. This event must be send asynchronously from the cause of the
    event. The way events must be delivered is the same as described in
    <emphasis>Delivering Events</emphasis> of <xref linkend="intro.core.release" xrefstyle="template:%t"/>.</para>

    <para>This procedure is demonstrated in the following code sample.</para>

    <programlisting>class Listener implements UserAdminListener{
    public void roleChanged( UserAdminEvent event ) {
        ...
    }
}
public class MyActivator 
    implements BundleActivator {
    public void start( BundleContext context ) {
        context.registerService( 
            UserAdminListener.class.getName(),
            new Listener(), null );
    }
    public void stop( BundleContext context ) {}
}</programlisting>

    <para>It is not necessary to unregister the listener object when the
    bundle is stopped because the Framework automatically unregisters it. Once
    registered, the <code>UserAdminListener</code> object must be notified of
    all changes to the role repository.</para>

    <section>
      <title>Event Admin and User Admin Change Events</title>

      <para>User Admin events must be delivered asynchronously to the Event
      Admin service by the implementation, if present. The topic of a User
      Admin Event is:</para>

      <programlisting>org/osgi/service/useradmin/UserAdmin/&lt;eventtype&gt;</programlisting>

      <para>The following event types are supported:</para>

      <programlisting>ROLE_CREATED
ROLE_CHANGED
ROLE_REMOVED</programlisting>

      <para>All User Admin Events must have the following properties:</para>

      <itemizedlist>
        <listitem>
          <para><code>event</code> - (<code>UserAdminEvent</code>) The event
          that was broadcast by the User Admin service.</para>
        </listitem>

        <listitem>
          <para><code>role</code> - (<code>Role</code>) The <code>Role</code>
          object that was created, modified or removed.</para>
        </listitem>

        <listitem>
          <para><code>role.name</code> - (<code>String</code>) The name of the
          role.</para>
        </listitem>

        <listitem>
          <para><code>role.type</code> - (<code>Integer</code>) One of
          <code>ROLE, USER</code> or <code>GROUP</code>.</para>
        </listitem>

        <listitem>
          <para><code>service</code> - (<code>ServiceReference</code>) The
          Service Reference of the User Admin service.</para>
        </listitem>

        <listitem>
          <para><code>service.id</code> - (<code>Long</code>) The User Admin
          service's ID.</para>
        </listitem>

        <listitem>
          <para><code>service.objectClass</code> - (<code>String[]</code>) The
          User Admin service's object class (which must include
          <code>org.osgi.service.useradmin.UserAdmin</code>)</para>
        </listitem>

        <listitem>
          <para><code>service.pid</code> - (<code>String)</code> The User
          Admin service's persistent identity</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>The User Admin service is related to the security model of the OSGi
    framework, but is complementary to the <xref linkend="i1307817"/>. The
    final permission of most code should be the intersection of the Java 2
    Permissions, which are based on the code that is executing, and the User
    Admin service authorization, which is based on the user for whom the code
    runs.</para>

    <section>
      <title>User Admin Permission</title>

      <para>The User Admin service defines the
      <code>UserAdminPermission</code> class that can be used to restrict
      bundles in accessing credentials. This permission class has the
      following actions:</para>

      <itemizedlist>
        <listitem>
          <para><code>changeProperty</code> - This permission is required to
          modify properties. The name of the permission is the prefix of the
          property name.</para>
        </listitem>

        <listitem>
          <para><code>changeCredential</code> - This action permits changing
          credentials. The name of the permission is the prefix of the name of
          the credential.</para>
        </listitem>

        <listitem>
          <para><code>getCredential</code> - This action permits getting
          credentials. The name of the permission is the prefix of the
          credential.</para>
        </listitem>
      </itemizedlist>

      <para>If the name of the permission is <code>"admin"</code>, it allows
      the owner to administer the repository. No action is associated with the
      permission in that case.</para>

      <para>Otherwise, the permission name is used to match the property name.
      This name may end with a <code>".*"</code> string to indicate a
      wildcard. For example, <code>com.acme.*</code> matches
      <code>com.acme.fudd.elmer</code> and <code>com.acme.bugs</code>.</para>
    </section>
  </section>

  <section>
    <title>Relation to JAAS</title>

    <para>At a glance, the Java Authorization and Authentication Service
    (JAAS) seems to be a very suitable model for user administration. The OSGi
    organization, however, decided to develop an independent User Admin
    service because JAAS was not deemed applicable. The reasons for this
    include dependency on Java SE version 1.3 ("JDK 1.3") and existing
    mechanisms in the previous OSGi Service Gateway 1.0 specification.</para>

    <section>
      <title>JDK 1.3 Dependencies</title>

      <para>The authorization component of JAAS relies on the
      <code>java.security.DomainCombiner</code> interface, which provides a
      means to dynamically update the <code>ProtectionDomain</code> objects
      affiliated with an <code>AccessControlContext</code> object.</para>

      <para>This interface was added in JDK 1.3. In the context of JAAS, the
      <code>SubjectDomainCombiner</code> object, which implements the
      <code>DomainCombiner</code> interface, is used to update
      <code>ProtectionDomain</code> objects. The permissions of
      <code>ProtectionDomain</code> objects depend on where code came from and
      who signed it, with permissions based on who is running the code.</para>

      <para>Leveraging JAAS would have resulted in user-based access control
      on the OSGi framework being available only with JDK 1.3, which was not
      deemed acceptable.</para>
    </section>

    <section>
      <title>Existing OSGi Mechanism</title>

      <para>JAAS provides a pluggable authentication architecture, which
      enables applications and their underlying authentication services to
      remain independent from each other.</para>

      <para>The Http Service already provides a similar feature by allowing
      servlet and resource registrations to be supported by an
      <code>HttpContext</code> object, which uses a callback mechanism to
      perform any required authentication checks before granting access to the
      servlet or resource. This way, the registering bundle has complete
      control on a per-servlet and per-resource basis over which
      authentication protocol to use, how the credentials presented by the
      remote requester are to be validated, and who should be granted access
      to the servlet or resource.</para>
    </section>

    <section>
      <title>Future Road Map</title>

      <para>In the future, the main barrier of 1.3 compatibility will be
      removed. JAAS could then be implemented in an OSGi environment. At that
      time, the User Admin service will still be needed and will provide
      complementary services in the following ways:</para>

      <itemizedlist>
        <listitem>
          <para>The authorization component relies on group membership
          information to be stored and managed outside JAAS. JAAS does not
          manage persistent information, so the User Admin service can be a
          provider of group information when principals are assigned to a
          <code>Subject</code> object.</para>
        </listitem>

        <listitem>
          <para>The authorization component allows for credentials to be
          collected and verified, but a repository is needed to actually
          validate the credentials.</para>
        </listitem>
      </itemizedlist>

      <para>In the future, the User Admin service can act as the back-end
      database to JAAS. The only aspect JAAS will remove from the User Admin
      service is the need for the <code>Authorization</code> interface.</para>
    </section>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.useradmin" xml:id="org.osgi.service.useradmin" xml:base="../../generated/javadoc/docbook/org.osgi.service.useradmin.xml">
   <title>org.osgi.service.useradmin</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.useradmin-version">Version 1.1</releaseinfo>
      <edition xml:id="org.osgi.service.useradmin-version.number">1.1</edition>
   </info>
   <para>
User Admin Package Version 1.1.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.useradmin; version="[1.1,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.useradmin; version="[1.1,1.2)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.useradmin.Authorization">
                  <code>Authorization</code>
               </link> - 
The <code>Authorization</code> interface encapsulates an authorization context on
 which bundles can base authorization decisions, where appropriate.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.useradmin.Group">
                  <code>Group</code>
               </link> - 
A named grouping of roles (<code>Role</code> objects).
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.useradmin.Role">
                  <code>Role</code>
               </link> - 
The base interface for <code>Role</code> objects managed by the User Admin
 service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.useradmin.User">
                  <code>User</code>
               </link> - 
A <code>User</code> role managed by a User Admin service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.useradmin.UserAdmin">
                  <code>UserAdmin</code>
               </link> - 
This interface is used to manage a database of named <code>Role</code> objects,
 which can be used for authentication and authorization purposes.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.useradmin.UserAdminEvent">
                  <code>UserAdminEvent</code>
               </link> - <code>Role</code> change event.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.useradmin.UserAdminListener">
                  <code>UserAdminListener</code>
               </link> - 
Listener for UserAdminEvents.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.useradmin.UserAdminPermission">
                  <code>UserAdminPermission</code>
               </link> - 
Permission to configure and access the <link linkend="org.osgi.service.useradmin.Role">Role</link> objects managed by a User
 Admin service.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="Authorization" xml:id="org.osgi.service.useradmin.Authorization">
      <title>public interface Authorization</title>
      <para>
The <code>Authorization</code> interface encapsulates an authorization context on
 which bundles can base authorization decisions, where appropriate.
 </para>
      <para>
 Bundles associate the privilege to access restricted resources or operations
 with roles. Before granting access to a restricted resource or operation, a
 bundle will check if the <code>Authorization</code> object passed to it possess
 the required role, by calling its <code>hasRole</code> method.
 </para>
      <para>
 Authorization contexts are instantiated by calling the
 <link linkend="org.osgi.service.useradmin.UserAdmin.getAuthorization-User-">UserAdmin.getAuthorization(User)</link> method.
 
 </para>
      <para>
         <emphasis>Trusting Authorization objects </emphasis>
      </para>
      <para>
 There are no restrictions regarding the creation of <code>Authorization</code>
 objects. Hence, a service must only accept <code>Authorization</code> objects from
 bundles that has been authorized to use the service using code based (or Java
 2) permissions.
 
 </para>
      <para>
 In some cases it is useful to use <code>ServicePermission</code> to do the code
 based access control. A service basing user access control on
 <code>Authorization</code> objects passed to it, will then require that a calling
 bundle has the <code>ServicePermission</code> to get the service in question. This
 is the most convenient way. The OSGi environment will do the code based
 permission check when the calling bundle attempts to get the service from the
 service registry.
 </para>
      <para>
 Example: A servlet using a service on a user's behalf. The bundle with the
 servlet must be given the <code>ServicePermission</code> to get the Http Service.
 </para>
      <para>
 However, in some cases the code based permission checks need to be more
 fine-grained. A service might allow all bundles to get it, but require
 certain code based permissions for some of its methods.
 </para>
      <para>
 Example: A servlet using a service on a user's behalf, where some service
 functionality is open to anyone, and some is restricted by code based
 permissions. When a restricted method is called (e.g., one handing over an
 <code>Authorization</code> object), the service explicitly checks that the calling
 bundle has permission to make the call.</para>
      <formalpara role="parameter">
         <title>No Implement</title>
         <para>Consumers of this API must not implement this interface</para>
      </formalpara>
      <section role="method" xreflabel="getName()" xml:id="org.osgi.service.useradmin.Authorization.getName--">
         <title>public String getName()</title>
         <para role="description">
Gets the name of the <link linkend="org.osgi.service.useradmin.User">User</link> that this <code>Authorization</code> context
 was created for.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of the <link linkend="org.osgi.service.useradmin.User">User</link> object that this
         <code>Authorization</code> context was created for, or <code>null</code> if
         no user was specified when this <code>Authorization</code> context was
         created.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRoles()" xml:id="org.osgi.service.useradmin.Authorization.getRoles--">
         <title>public String[] getRoles()</title>
         <para role="description">
Gets the names of all roles implied by this <code>Authorization</code>
 context.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The names of all roles implied by this <code>Authorization</code>
         context, or <code>null</code> if no roles are in the context. The
         predefined role <code>user.anyone</code> will not be included in this
         list.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hasRole(String)" xml:id="org.osgi.service.useradmin.Authorization.hasRole-String-">
         <title>public boolean hasRole(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the role to check for.</para>
         </formalpara>
         <para role="description">
Checks if the role with the specified name is implied by this
 <code>Authorization</code> context.
 </para>
         <para>
 
 Bundles must define globally unique role names that are associated with
 the privilege of accessing restricted resources or operations. Operators
 will grant users access to these resources, by creating a <link linkend="org.osgi.service.useradmin.Group">Group</link>
 object for each role and adding <link linkend="org.osgi.service.useradmin.User">User</link> objects to it.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this <code>Authorization</code> context implies the
         specified role, otherwise <code>false</code>.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Group" xml:id="org.osgi.service.useradmin.Group">
      <title>public interface Group<?line-break?> extends User</title>
      <para>
A named grouping of roles (<code>Role</code> objects).
 </para>
      <para>
 Whether or not a given <code>Authorization</code> context implies a <code>Group</code>
 object depends on the members of that <code>Group</code> object.
 </para>
      <para>
 A <code>Group</code> object can have two kinds of members: <emphasis>basic </emphasis> and
 <emphasis>required </emphasis>. A <code>Group</code> object is implied by an
 <code>Authorization</code> context if all of its required members are implied and
 at least one of its basic members is implied.
 </para>
      <para>
 A <code>Group</code> object must contain at least one basic member in order to be
 implied. In other words, a <code>Group</code> object without any basic member
 roles is never implied by any <code>Authorization</code> context.
 </para>
      <para>
 A <code>User</code> object always implies itself.
 </para>
      <para>
 No loop detection is performed when adding members to <code>Group</code> objects,
 which means that it is possible to create circular implications. Loop
 detection is instead done when roles are checked. The semantics is that if a
 role depends on itself (i.e., there is an implication loop), the role is not
 implied.
 </para>
      <para>
 The rule that a <code>Group</code> object must have at least one basic member to
 be implied is motivated by the following example:
 
 </para>
      <programlisting> 
  group foo
    required members: marketing
    basic members: alice, bob</programlisting>
      <para>
 
 Privileged operations that require membership in "foo" can be performed only
 by "alice" and "bob", who are in marketing.
 </para>
      <para>
 If "alice" and "bob" ever transfer to a different department, anybody in
 marketing will be able to assume the "foo" role, which certainly must be
 prevented. Requiring that "foo" (or any <code>Group</code> object for that matter)
 must have at least one basic member accomplishes that.
 </para>
      <para>
 However, this would make it impossible for a <code>Group</code> object to be
 implied by just its required members. An example where this implication might
 be useful is the following declaration: "Any citizen who is an adult is
 allowed to vote." An intuitive configuration of "voter" would be:
 
 </para>
      <programlisting> 
  group voter
    required members: citizen, adult
       basic members:</programlisting>
      <para>
 
 However, according to the above rule, the "voter" role could never be assumed
 by anybody, since it lacks any basic members. In order to address this issue
 a predefined role named "user.anyone" can be specified, which is always
 implied. The desired implication of the "voter" group can then be achieved by
 specifying "user.anyone" as its basic member, as follows:
 
 </para>
      <programlisting> 
  group voter
    required members: citizen, adult
       basic members: user.anyone</programlisting>
      <formalpara role="parameter">
         <title>No Implement</title>
         <para>Consumers of this API must not implement this interface</para>
      </formalpara>
      <section role="method" xreflabel="addMember(Role)" xml:id="org.osgi.service.useradmin.Group.addMember-Role-">
         <title>public boolean addMember(Role role)</title>
         <formalpara role="parameter">
            <title>role</title>
            <para>The role to add as a basic member.</para>
         </formalpara>
         <para role="description">
Adds the specified <code>Role</code> object as a basic member to this
 <code>Group</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the given role could be added as a basic member,
         and <code>false</code> if this <code>Group</code> object already contains a
         <code>Role</code> object whose name matches that of the specified
         role.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If a security manager exists and the caller
         does not have the <code>UserAdminPermission</code> with name
         <code>admin</code>.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="addRequiredMember(Role)" xml:id="org.osgi.service.useradmin.Group.addRequiredMember-Role-">
         <title>public boolean addRequiredMember(Role role)</title>
         <formalpara role="parameter">
            <title>role</title>
            <para>The <code>Role</code> object to add as a required member.</para>
         </formalpara>
         <para role="description">
Adds the specified <code>Role</code> object as a required member to this
 <code>Group</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the given <code>Role</code> object could be added as a
         required member, and <code>false</code> if this <code>Group</code> object
         already contains a <code>Role</code> object whose name matches that of
         the specified role.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If a security manager exists and the caller
         does not have the <code>UserAdminPermission</code> with name
         <code>admin</code>.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMembers()" xml:id="org.osgi.service.useradmin.Group.getMembers--">
         <title>public Role[] getMembers()</title>
         <para role="description">
Gets the basic members of this <code>Group</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The basic members of this <code>Group</code> object, or <code>null</code>
         if this <code>Group</code> object does not contain any basic members.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRequiredMembers()" xml:id="org.osgi.service.useradmin.Group.getRequiredMembers--">
         <title>public Role[] getRequiredMembers()</title>
         <para role="description">
Gets the required members of this <code>Group</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The required members of this <code>Group</code> object, or
         <code>null</code> if this <code>Group</code> object does not contain any
         required members.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="removeMember(Role)" xml:id="org.osgi.service.useradmin.Group.removeMember-Role-">
         <title>public boolean removeMember(Role role)</title>
         <formalpara role="parameter">
            <title>role</title>
            <para>The <code>Role</code> object to remove from this <code>Group</code>
        object.</para>
         </formalpara>
         <para role="description">
Removes the specified <code>Role</code> object from this <code>Group</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the <code>Role</code> object could be removed,
         otherwise <code>false</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If a security manager exists and the caller
         does not have the <code>UserAdminPermission</code> with name
         <code>admin</code>.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Role" xml:id="org.osgi.service.useradmin.Role">
      <title>public interface Role</title>
      <para>
The base interface for <code>Role</code> objects managed by the User Admin
 service.
 
 </para>
      <para>
 This interface exposes the characteristics shared by all <code>Role</code>
 classes: a name, a type, and a set of properties.
 </para>
      <para>
 Properties represent public information about the <code>Role</code> object that
 can be read by anyone. Specific <link linkend="org.osgi.service.useradmin.UserAdminPermission">UserAdminPermission</link> objects are
 required to change a <code>Role</code> object's properties.
 </para>
      <para>
         <code>Role</code> object properties are <code>Dictionary</code> objects. Changes to
 these objects are propagated to the User Admin service and made persistent.
 </para>
      <para>
 Every User Admin service contains a set of predefined <code>Role</code> objects
 that are always present and cannot be removed. All predefined <code>Role</code>
 objects are of type <code>ROLE</code>. This version of the
 <code>org.osgi.service.useradmin</code> package defines a single predefined role
 named "user.anyone", which is inherited by any other role. Other
 predefined roles may be added in the future. Since "user.anyone" is
 a <code>Role</code> object that has properties associated with it that can be read
 and modified. Access to these properties and their use is application
 specific and is controlled using <code>UserAdminPermission</code> in the same way
 that properties for other <code>Role</code> objects are.</para>
      <formalpara role="parameter">
         <title>No Implement</title>
         <para>Consumers of this API must not implement this interface</para>
      </formalpara>
      <section role="field" xreflabel="GROUP" xml:id="org.osgi.service.useradmin.Role.GROUP">
         <title>public static final int GROUP = 2</title>
         <para>
The type of a <link linkend="org.osgi.service.useradmin.Group">Group</link> role.
 
 </para>
         <para>
 The value of <code>GROUP</code> is 2.</para>
      </section>
      <section role="field" xreflabel="ROLE" xml:id="org.osgi.service.useradmin.Role.ROLE">
         <title>public static final int ROLE = 0</title>
         <para>
The type of a predefined role.
 
 </para>
         <para>
 The value of <code>ROLE</code> is 0.</para>
      </section>
      <section role="field" xreflabel="USER" xml:id="org.osgi.service.useradmin.Role.USER">
         <title>public static final int USER = 1</title>
         <para>
The type of a <link linkend="org.osgi.service.useradmin.User">User</link> role.
 
 </para>
         <para>
 The value of <code>USER</code> is 1.</para>
      </section>
      <section role="field" xreflabel="USER_ANYONE" xml:id="org.osgi.service.useradmin.Role.USER_ANYONE">
         <title>public static final String USER_ANYONE = "user.anyone"</title>
         <para>
The name of the predefined role, user.anyone, that all users and groups
 belong to.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getName()" xml:id="org.osgi.service.useradmin.Role.getName--">
         <title>public String getName()</title>
         <para role="description">
Returns the name of this role.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The role's name.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getProperties()" xml:id="org.osgi.service.useradmin.Role.getProperties--">
         <title>public Dictionary getProperties()</title>
         <para role="description">
Returns a <code>Dictionary</code> of the (public) properties of this
 <code>Role</code> object. Any changes to the returned <code>Dictionary</code> will
 change the properties of this <code>Role</code> object. This will cause a
 <code>UserAdminEvent</code> object of type <link linkend="org.osgi.service.useradmin.UserAdminEvent.ROLE_CHANGED">UserAdminEvent.ROLE_CHANGED</link>
 to be broadcast to any <code>UserAdminListener</code> objects.
 
 </para>
         <para>
 Only objects of type <code>String</code> may be used as property keys, and
 only objects of type <code>String</code> or <code>byte[]</code> may be used as
 property values. Any other types will cause an exception of type
 <code>IllegalArgumentException</code> to be raised.
 
 </para>
         <para>
 In order to add, change, or remove a property in the returned
 <code>Dictionary</code>, a <link linkend="org.osgi.service.useradmin.UserAdminPermission">UserAdminPermission</link> named after the
 property name (or a prefix of it) with action <code>changeProperty</code> is
 required.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>Dictionary</code> containing the properties of this <code>Role</code>
         object.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.useradmin.Role.getType--">
         <title>public int getType()</title>
         <para role="description">
Returns the type of this role.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The role's type.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="User" xml:id="org.osgi.service.useradmin.User">
      <title>public interface User<?line-break?> extends Role</title>
      <para>
A <code>User</code> role managed by a User Admin service.
 
 </para>
      <para>
 In this context, the term "user" is not limited to just human
 beings. Instead, it refers to any entity that may have any number of
 credentials associated with it that it may use to authenticate itself.
 </para>
      <para>
 In general, <code>User</code> objects are associated with a specific User Admin
 service (namely the one that created them), and cannot be used with other
 User Admin services.
 </para>
      <para>
 A <code>User</code> object may have credentials (and properties, inherited from
 the <link linkend="org.osgi.service.useradmin.Role">Role</link> class) associated with it. Specific
 <link linkend="org.osgi.service.useradmin.UserAdminPermission">UserAdminPermission</link> objects are required to read or change a
 <code>User</code> object's credentials.
 </para>
      <para>
 Credentials are <code>Dictionary</code> objects and have semantics that are
 similar to the properties in the <code>Role</code> class.</para>
      <formalpara role="parameter">
         <title>No Implement</title>
         <para>Consumers of this API must not implement this interface</para>
      </formalpara>
      <section role="method" xreflabel="getCredentials()" xml:id="org.osgi.service.useradmin.User.getCredentials--">
         <title>public Dictionary getCredentials()</title>
         <para role="description">
Returns a <code>Dictionary</code> of the credentials of this <code>User</code>
 object. Any changes to the returned <code>Dictionary</code> object will change
 the credentials of this <code>User</code> object. This will cause a
 <code>UserAdminEvent</code> object of type <link linkend="org.osgi.service.useradmin.UserAdminEvent.ROLE_CHANGED">UserAdminEvent.ROLE_CHANGED</link>
 to be broadcast to any <code>UserAdminListeners</code> objects.
 
 </para>
         <para>
 Only objects of type <code>String</code> may be used as credential keys, and
 only objects of type <code>String</code> or of type <code>byte[]</code> may be used
 as credential values. Any other types will cause an exception of type
 <code>IllegalArgumentException</code> to be raised.
 
 </para>
         <para>
 In order to retrieve a credential from the returned <code>Dictionary</code>
 object, a <link linkend="org.osgi.service.useradmin.UserAdminPermission">UserAdminPermission</link> named after the credential name (or
 a prefix of it) with action <code>getCredential</code> is required.
 </para>
         <para>
 In order to add or remove a credential from the returned
 <code>Dictionary</code> object, a <link linkend="org.osgi.service.useradmin.UserAdminPermission">UserAdminPermission</link> named after the
 credential name (or a prefix of it) with action <code>changeCredential</code>
 is required.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>Dictionary</code> object containing the credentials of this
         <code>User</code> object.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hasCredential(String,Object)" xml:id="org.osgi.service.useradmin.User.hasCredential-String-Object-">
         <title>public boolean hasCredential(String key,Object value)</title>
         <formalpara role="parameter">
            <title>key</title>
            <para>The credential <code>key</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>value</title>
            <para>The credential <code>value</code>.</para>
         </formalpara>
         <para role="description">
Checks to see if this <code>User</code> object has a credential with the
 specified <code>key</code> set to the specified <code>value</code>.
 
 </para>
         <para>
 If the specified credential <code>value</code> is not of type <code>String</code>
 or <code>byte[]</code>, it is ignored, that is, <code>false</code> is returned (as
 opposed to an <code>IllegalArgumentException</code> being raised).</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this user has the specified credential;
         <code>false</code> otherwise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If a security manager exists and the caller
         does not have the <code>UserAdminPermission</code> named after the
         credential key (or a prefix of it) with action
         <code>getCredential</code>.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="UserAdmin" xml:id="org.osgi.service.useradmin.UserAdmin">
      <title>public interface UserAdmin</title>
      <para>
This interface is used to manage a database of named <code>Role</code> objects,
 which can be used for authentication and authorization purposes.
 
 </para>
      <para>
 This version of the User Admin service defines two types of <code>Role</code>
 objects: "User" and "Group". Each type of role is represented by an
 <code>int</code> constant and an interface. The range of positive integers is
 reserved for new types of roles that may be added in the future. When
 defining proprietary role types, negative constant values must be used.
 
 </para>
      <para>
 Every role has a name and a type.
 
 </para>
      <para>
 A <link linkend="org.osgi.service.useradmin.User">User</link> object can be configured with credentials (e.g., a password)
 and properties (e.g., a street address, phone number, etc.).
 </para>
      <para>
 A <link linkend="org.osgi.service.useradmin.Group">Group</link> object represents an aggregation of <link linkend="org.osgi.service.useradmin.User">User</link> and
 <link linkend="org.osgi.service.useradmin.Group">Group</link> objects. In other words, the members of a <code>Group</code> object
 are roles themselves.
 </para>
      <para>
 Every User Admin service manages and maintains its own namespace of
 <code>Role</code> objects, in which each <code>Role</code> object has a unique name.</para>
      <formalpara role="parameter">
         <title>No Implement</title>
         <para>Consumers of this API must not implement this interface</para>
      </formalpara>
      <section role="method" xreflabel="createRole(String,int)" xml:id="org.osgi.service.useradmin.UserAdmin.createRole-String-int-">
         <title>public Role createRole(String name,int type)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The <code>name</code> of the <code>Role</code> object to create.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>The type of the <code>Role</code> object to create. Must be either
        a <link linkend="org.osgi.service.useradmin.Role.USER">Role.USER</link> type or <link linkend="org.osgi.service.useradmin.Role.GROUP">Role.GROUP</link> type.</para>
         </formalpara>
         <para role="description">
Creates a <code>Role</code> object with the given name and of the given type.
 
 </para>
         <para>
 If a <code>Role</code> object was created, a <code>UserAdminEvent</code> object of
 type <link linkend="org.osgi.service.useradmin.UserAdminEvent.ROLE_CREATED">UserAdminEvent.ROLE_CREATED</link> is broadcast to any
 <code>UserAdminListener</code> object.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The newly created <code>Role</code> object, or <code>null</code> if a role
         with the given name already exists.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if <code>type</code> is invalid.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If a security manager exists and the caller
         does not have the <code>UserAdminPermission</code> with name
         <code>admin</code>.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getAuthorization(User)" xml:id="org.osgi.service.useradmin.UserAdmin.getAuthorization-User-">
         <title>public Authorization getAuthorization(User user)</title>
         <formalpara role="parameter">
            <title>user</title>
            <para>The <code>User</code> object to create an <code>Authorization</code>
        object for, or <code>null</code> for the anonymous user.</para>
         </formalpara>
         <para role="description">
Creates an <code>Authorization</code> object that encapsulates the specified
 <code>User</code> object and the <code>Role</code> objects it possesses. The
 <code>null</code> user is interpreted as the anonymous user. The anonymous
 user represents a user that has not been authenticated. An
 <code>Authorization</code> object for an anonymous user will be unnamed, and
 will only imply groups that user.anyone implies.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the <code>Authorization</code> object for the specified <code>User</code>
         object.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRole(String)" xml:id="org.osgi.service.useradmin.UserAdmin.getRole-String-">
         <title>public Role getRole(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the <code>Role</code> object to get.</para>
         </formalpara>
         <para role="description">
Gets the <code>Role</code> object with the given <code>name</code> from this User
 Admin service.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The requested <code>Role</code> object, or <code>null</code> if this User
         Admin service does not have a <code>Role</code> object with the given
         <code>name</code>.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRoles(String)" xml:id="org.osgi.service.useradmin.UserAdmin.getRoles-String-">
         <title>public Role[] getRoles(String filter) throws InvalidSyntaxException</title>
         <formalpara role="parameter">
            <title>filter</title>
            <para>The filter criteria to match.</para>
         </formalpara>
         <para role="description">
Gets the <code>Role</code> objects managed by this User Admin service that
 have properties matching the specified LDAP filter criteria. See
 <code>org.osgi.framework.Filter</code> for a description of the filter syntax.
 If a <code>null</code> filter is specified, all Role objects managed by this
 User Admin service are returned.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <code>Role</code> objects managed by this User Admin service whose
         properties match the specified filter criteria, or all
         <code>Role</code> objects if a <code>null</code> filter is specified. If no
         roles match the filter, <code>null</code> will be returned.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>InvalidSyntaxException</code>– If the filter is not well formed.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getUser(String,String)" xml:id="org.osgi.service.useradmin.UserAdmin.getUser-String-String-">
         <title>public User getUser(String key,String value)</title>
         <formalpara role="parameter">
            <title>key</title>
            <para>The property key to look for.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>value</title>
            <para>The property value to compare with.</para>
         </formalpara>
         <para role="description">
Gets the user with the given property <code>key</code>-<code>value</code> pair from
 the User Admin service database. This is a convenience method for
 retrieving a <code>User</code> object based on a property for which every
 <code>User</code> object is supposed to have a unique value (within the scope
 of this User Admin service), such as for example a X.500 distinguished
 name.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A matching user, if <emphasis>exactly</emphasis> one is found. If zero or
         more than one matching users are found, <code>null</code> is returned.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="removeRole(String)" xml:id="org.osgi.service.useradmin.UserAdmin.removeRole-String-">
         <title>public boolean removeRole(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the <code>Role</code> object to remove.</para>
         </formalpara>
         <para role="description">
Removes the <code>Role</code> object with the given name from this User Admin
 service and all groups it is a member of.
 
 </para>
         <para>
 If the <code>Role</code> object was removed, a <code>UserAdminEvent</code> object
 of type <link linkend="org.osgi.service.useradmin.UserAdminEvent.ROLE_REMOVED">UserAdminEvent.ROLE_REMOVED</link> is broadcast to any
 <code>UserAdminListener</code> object.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> If a <code>Role</code> object with the given name is
         present in this User Admin service and could be removed,
         otherwise <code>false</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If a security manager exists and the caller
         does not have the <code>UserAdminPermission</code> with name
         <code>admin</code>.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="UserAdminEvent" xml:id="org.osgi.service.useradmin.UserAdminEvent">
      <title>public class UserAdminEvent</title>
      <para>
         <code>Role</code> change event.
 </para>
      <para>
         <code>UserAdminEvent</code> objects are delivered asynchronously to any
 <code>UserAdminListener</code> objects when a change occurs in any of the
 <code>Role</code> objects managed by a User Admin service.
 
 </para>
      <para>
 A type code is used to identify the event. The following event types are
 defined: <link linkend="org.osgi.service.useradmin.UserAdminEvent.ROLE_CREATED">ROLE_CREATED</link> type, <link linkend="org.osgi.service.useradmin.UserAdminEvent.ROLE_CHANGED">ROLE_CHANGED</link> type, and
 <link linkend="org.osgi.service.useradmin.UserAdminEvent.ROLE_REMOVED">ROLE_REMOVED</link> type. Additional event types may be defined in the
 future.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.useradmin.UserAdmin">UserAdmin</link>, <link linkend="org.osgi.service.useradmin.UserAdminListener">UserAdminListener</link>
         </para>
      </formalpara>
      <section role="field" xreflabel="ROLE_CHANGED" xml:id="org.osgi.service.useradmin.UserAdminEvent.ROLE_CHANGED">
         <title>public static final int ROLE_CHANGED = 2</title>
         <para>
A <code>Role</code> object has been modified.
 
 </para>
         <para>
 The value of <code>ROLE_CHANGED</code> is 0x00000002.</para>
      </section>
      <section role="field" xreflabel="ROLE_CREATED" xml:id="org.osgi.service.useradmin.UserAdminEvent.ROLE_CREATED">
         <title>public static final int ROLE_CREATED = 1</title>
         <para>
A <code>Role</code> object has been created.
 
 </para>
         <para>
 The value of <code>ROLE_CREATED</code> is 0x00000001.</para>
      </section>
      <section role="field" xreflabel="ROLE_REMOVED" xml:id="org.osgi.service.useradmin.UserAdminEvent.ROLE_REMOVED">
         <title>public static final int ROLE_REMOVED = 4</title>
         <para>
A <code>Role</code> object has been removed.
 
 </para>
         <para>
 The value of <code>ROLE_REMOVED</code> is 0x00000004.</para>
      </section>
      <section role="method" xreflabel="UserAdminEvent(ServiceReference,int,Role)" xml:id="org.osgi.service.useradmin.UserAdminEvent.UserAdminEvent-ServiceReference-int-Role-">
         <title>public  UserAdminEvent(ServiceReference ref,int type,Role role)</title>
         <formalpara role="parameter">
            <title>ref</title>
            <para>The <code>ServiceReference</code> object of the User Admin service
        that generated this event.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>The event type.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>role</title>
            <para>The <code>Role</code> object on which this event occurred.</para>
         </formalpara>
         <para role="description">
Constructs a <code>UserAdminEvent</code> object from the given
 <code>ServiceReference</code> object, event type, and <code>Role</code> object.
   </para>
      </section>
      <section role="method" xreflabel="getRole()" xml:id="org.osgi.service.useradmin.UserAdminEvent.getRole--">
         <title>public Role getRole()</title>
         <para role="description">
Gets the <code>Role</code> object this event was generated for.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <code>Role</code> object this event was generated for.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getServiceReference()" xml:id="org.osgi.service.useradmin.UserAdminEvent.getServiceReference--">
         <title>public ServiceReference getServiceReference()</title>
         <para role="description">
Gets the <code>ServiceReference</code> object of the User Admin service that
 generated this event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The User Admin service's <code>ServiceReference</code> object.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.useradmin.UserAdminEvent.getType--">
         <title>public int getType()</title>
         <para role="description">
Returns the type of this event.
 
 </para>
         <para>
 The type values are <link linkend="org.osgi.service.useradmin.UserAdminEvent.ROLE_CREATED">ROLE_CREATED</link> type, <link linkend="org.osgi.service.useradmin.UserAdminEvent.ROLE_CHANGED">ROLE_CHANGED</link>
 type, and <link linkend="org.osgi.service.useradmin.UserAdminEvent.ROLE_REMOVED">ROLE_REMOVED</link> type.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The event type.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="UserAdminListener" xml:id="org.osgi.service.useradmin.UserAdminListener">
      <title>public interface UserAdminListener</title>
      <para>
Listener for UserAdminEvents.
 
 </para>
      <para>
         <code>UserAdminListener</code> objects are registered with the Framework service
 registry and notified with a <code>UserAdminEvent</code> object when a
 <code>Role</code> object has been created, removed, or modified.
 </para>
      <para>
         <code>UserAdminListener</code> objects can further inspect the received
 <code>UserAdminEvent</code> object to determine its type, the <code>Role</code> object
 it occurred on, and the User Admin service that generated it.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.useradmin.UserAdmin">UserAdmin</link>, <link linkend="org.osgi.service.useradmin.UserAdminEvent">UserAdminEvent</link>
         </para>
      </formalpara>
      <section role="method" xreflabel="roleChanged(UserAdminEvent)" xml:id="org.osgi.service.useradmin.UserAdminListener.roleChanged-UserAdminEvent-">
         <title>public void roleChanged(UserAdminEvent event)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>The <code>UserAdminEvent</code> object.</para>
         </formalpara>
         <para role="description">
Receives notification that a <code>Role</code> object has been created,
 removed, or modified.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="UserAdminPermission" xml:id="org.osgi.service.useradmin.UserAdminPermission">
      <title>public final class UserAdminPermission<?line-break?> extends BasicPermission</title>
      <para>
Permission to configure and access the <link linkend="org.osgi.service.useradmin.Role">Role</link> objects managed by a User
 Admin service.
 
 </para>
      <para>
 This class represents access to the <code>Role</code> objects managed by a User
 Admin service and their properties and credentials (in the case of
 <link linkend="org.osgi.service.useradmin.User">User</link> objects).
 </para>
      <para>
 The permission name is the name (or name prefix) of a property or credential.
 The naming convention follows the hierarchical property naming convention.
 Also, an asterisk may appear at the end of the name, following a
 ".", or by itself, to signify a wildcard match. For example:
 "org.osgi.security.protocol.*" or "*" is valid, but
 "*protocol" or "a*b" are not valid.
 
 </para>
      <para>
 The <code>UserAdminPermission</code> with the reserved name "admin"
 represents the permission required for creating and removing <code>Role</code>
 objects in the User Admin service, as well as adding and removing members in
 a <code>Group</code> object. This <code>UserAdminPermission</code> does not have any
 actions associated with it.
 
 </para>
      <para>
 The actions to be granted are passed to the constructor in a string
 containing a list of one or more comma-separated keywords. The possible
 keywords are: <code>changeProperty</code>,<code>changeCredential</code>, and
 <code>getCredential</code>. Their meaning is defined as follows:
 
 </para>
      <programlisting>  action
  changeProperty    Permission to change (i.e., add and remove)
                    Role object properties whose names start with
                    the name argument specified in the constructor.
  changeCredential  Permission to change (i.e., add and remove)
                    User object credentials whose names start
                    with the name argument specified in the constructor.
  getCredential     Permission to retrieve and check for the
                    existence of User object credentials whose names
                    start with the name argument specified in the
                    constructor.</programlisting>
      <para>
 
 The action string is converted to lowercase before processing.
 
 </para>
      <para>
 Following is a PermissionInfo style policy entry which grants a user
 administration bundle a number of <code>UserAdminPermission</code> object:
 
 </para>
      <programlisting>  (org.osgi.service.useradmin.UserAdminPermission "admin")
  (org.osgi.service.useradmin.UserAdminPermission "com.foo.*"
                "changeProperty,getCredential,changeCredential")
  (org.osgi.service.useradmin.UserAdminPermission "user.*"
                              "changeProperty,changeCredential")</programlisting>
      <para>
 
 The first permission statement grants the bundle the permission to perform
 any User Admin service operations of type "admin", that is, create and remove
 roles and configure <code>Group</code> objects.
 
 </para>
      <para>
 The second permission statement grants the bundle the permission to change
 any properties as well as get and change any credentials whose names start
 with <code>com.foo.</code>.
 
 </para>
      <para>
 The third permission statement grants the bundle the permission to change any
 properties and credentials whose names start with <code>user.</code>. This means
 that the bundle is allowed to change, but not retrieve any credentials with
 the given prefix.
 
 </para>
      <para>
 The following policy entry empowers the Http Service bundle to perform user
 authentication:
 
 </para>
      <programlisting>  grant codeBase "${jars}http.jar" {
    permission org.osgi.service.useradmin.UserAdminPermission
      "user.password", "getCredential";
  };</programlisting>
      <para>
 The permission statement grants the Http Service bundle the permission to
 validate any password credentials (for authentication purposes), but the
 bundle is not allowed to change any properties or credentials.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="ADMIN" xml:id="org.osgi.service.useradmin.UserAdminPermission.ADMIN">
         <title>public static final String ADMIN = "admin"</title>
         <para>
The permission name "admin".
   </para>
      </section>
      <section role="field" xreflabel="CHANGE_CREDENTIAL" xml:id="org.osgi.service.useradmin.UserAdminPermission.CHANGE_CREDENTIAL">
         <title>public static final String CHANGE_CREDENTIAL = "changeCredential"</title>
         <para>
The action string "changeCredential".
   </para>
      </section>
      <section role="field" xreflabel="CHANGE_PROPERTY" xml:id="org.osgi.service.useradmin.UserAdminPermission.CHANGE_PROPERTY">
         <title>public static final String CHANGE_PROPERTY = "changeProperty"</title>
         <para>
The action string "changeProperty".
   </para>
      </section>
      <section role="field" xreflabel="GET_CREDENTIAL" xml:id="org.osgi.service.useradmin.UserAdminPermission.GET_CREDENTIAL">
         <title>public static final String GET_CREDENTIAL = "getCredential"</title>
         <para>
The action string "getCredential".
   </para>
      </section>
      <section role="method" xreflabel="UserAdminPermission(String,String)" xml:id="org.osgi.service.useradmin.UserAdminPermission.UserAdminPermission-String-String-">
         <title>public  UserAdminPermission(String name,String actions)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>the name of this <code>UserAdminPermission</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>the action string.</para>
         </formalpara>
         <para role="description">
Creates a new <code>UserAdminPermission</code> with the specified name and
 actions. <code>name</code> is either the reserved string "admin" or
 the name of a credential or property, and <code>actions</code> contains a
 comma-separated list of the actions granted on the specified name. Valid
 actions are <code>changeProperty</code>,<code>changeCredential</code>, and
 getCredential.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If <code>name</code> equals "admin"
         and <code>actions</code> are specified.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.useradmin.UserAdminPermission.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>the object to be compared for equality with this object.</para>
         </formalpara>
         <para role="description">
Checks two <code>UserAdminPermission</code> objects for equality. Checks that
 <code>obj</code> is a <code>UserAdminPermission</code>, and has the same name and
 actions as this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if <code>obj</code> is a <code>UserAdminPermission</code>
         object, and has the same name and actions as this
         <code>UserAdminPermission</code> object.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getActions()" xml:id="org.osgi.service.useradmin.UserAdminPermission.getActions--">
         <title>public String getActions()</title>
         <para role="description">
Returns the canonical string representation of the actions, separated by
 comma.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the canonical string representation of the actions.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.useradmin.UserAdminPermission.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code value for this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A hash code value for this object.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="implies(Permission)" xml:id="org.osgi.service.useradmin.UserAdminPermission.implies-Permission-">
         <title>public boolean implies(Permission p)</title>
         <formalpara role="parameter">
            <title>p</title>
            <para>the permission to check against.</para>
         </formalpara>
         <para role="description">
Checks if this <code>UserAdminPermission</code> object "implies" the
 specified permission.
 </para>
         <para>
 More specifically, this method returns <code>true</code> if:
 </para>
         <para/>
         <itemizedlist>
            <listitem>
               <para>
                  <emphasis>p</emphasis> is an instanceof <code>UserAdminPermission</code>,</para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>p</emphasis>'s actions are a proper subset of this object's actions, and</para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>p</emphasis>'s name is implied by this object's name. For example,
 "java.*" implies "java.home".</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the specified permission is implied by this
         object; <code>false</code> otherwise.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="newPermissionCollection()" xml:id="org.osgi.service.useradmin.UserAdminPermission.newPermissionCollection--">
         <title>public PermissionCollection newPermissionCollection()</title>
         <para role="description">
Returns a new <code>PermissionCollection</code> object for storing
 <code>UserAdminPermission</code> objects.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a new <code>PermissionCollection</code> object suitable for storing
         <code>UserAdminPermission</code> objects.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="toString()" xml:id="org.osgi.service.useradmin.UserAdminPermission.toString--">
         <title>public String toString()</title>
         <para role="description">
Returns a string describing this <code>UserAdminPermission</code> object. This
 string must be in <code>PermissionInfo</code> encoded format.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <code>PermissionInfo</code> encoded string for this
         <code>UserAdminPermission</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>org.osgi.service.permissionadmin.PermissionInfo.getEncoded()</code>
            </para>
         </formalpara>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i1307817"><title>The Java Security Architecture for
      JDK 1.2</title>Version 1.0, Sun Microsystems, October 1998</bibliomixed>

      <bibliomixed xml:id="i1307810"><title>Java Authentication and
      Authorization
      Service</title>http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="110" revision="$Id: e034afe9fa2c8adea7ac878fb31c75354e341963 $" version="5" xml:id="service.provisioning" xml:base="../110/service.provisioning.xml">
  <title>Initial Provisioning Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.provisioning-version" linkend="org.osgi.service.provisioning"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>To allow freedom regarding the choice of management protocol, the
    OSGi Specifications assumes an architecture to remotely manage a OSGi
    framework with a Management Agent. The Management Agent is implemented
    with a Management Bundle that can communicate with an unspecified
    management protocol.</para>

    <para>This specification defines how the Management Agent can make its way
    to the OSGi framework, and gives a structured view of the problems and
    their corresponding resolution methods.</para>

    <para>The purpose of this specification is to enable the management of a
    OSGi framework by an Operator, and (optionally) to hand over the
    management of the OSGi framework later to another Operator. This approach
    is in accordance with the OSGi remote management reference
    architecture.</para>

    <para>This bootstrapping process requires the installation of a Management
    Agent, with appropriate configuration data, in the OSGi framework.</para>

    <para>This specification consists of a prologue, in which the principles
    of the Initial Provisioning are outlined, and a number of mappings to
    different mechanisms.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Policy Free</emphasis> - The proposed solution must
          be business model agnostic; none of the affected parties (Operators,
          SPS Manufacturers, etc.) should be forced into any particular
          business model.</para>
        </listitem>

        <listitem>
          <para><emphasis>Inter-operability</emphasis> - The Initial
          Provisioning must permit arbitrary inter-operability between
          management systems and OSGi frameworks. Any compliant Remote Manager
          should be able to manage any compliant OSGi framework, even in the
          absence of a prior business relationship. Adhering to this
          requirement allows a particular Operator to manage a variety of
          makes and models of OSGi framework Servers using a single management
          system of the Operator's choice. This rule also gives the consumer
          the greatest choice when selecting an Operator.</para>
        </listitem>

        <listitem>
          <para><emphasis>Flexible</emphasis> - The management process should
          be as open as possible, to allow innovation and specialization while
          still achieving interoperability.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Provisioning Service</emphasis> - A service
          registered with the Framework that provides information about the
          initial provisioning to the Management Agent.</para>
        </listitem>

        <listitem>
          <para><emphasis>Provisioning Dictionary</emphasis> - A
          <code>Dictionary</code> object that is filled with information from
          the ZIP files that are loaded during initial setup.</para>
        </listitem>

        <listitem>
          <para><emphasis>RSH Protocol</emphasis> - An OSGi specific secure
          protocol based on HTTP.</para>
        </listitem>

        <listitem>
          <para><emphasis>Management Agent</emphasis> - A bundle that is
          responsible for managing a OSGi framework under control of a Remote
          Manager.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>Initial Provisioning</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.964in" contentwidth="4.937in" fileref="ip-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section xml:id="i1365233">
    <title>Procedure</title>

    <para>The following procedure should be executed by an OSGi Framework
    implementation that supports this Initial Provisioning
    specification.</para>

    <para>When the OSGi framework is first brought under management control,
    it must be provided with an initial request URL in order to be
    provisioned. Either the end user or the manufacturer may provide the
    initial request URL. How the initial request URL is transferred to the
    Framework is not specified, but a mechanism might, for example, be a
    command line parameter when the framework is started.</para>

    <para>When asked to start the Initial Provisioning, the OSGi framework
    will send a request to the management system. This request is encoded in a
    URL, for example:</para>

    <programlisting>http://osgi.acme.com/remote-manager</programlisting>

    <para>This URL may use any protocol that is available on the OSGi
    framework Server. Many standard protocols exist, but it is also possible
    to use a proprietary protocol. For example, software could be present
    which can communicate with a smart card and could handle, for example,
    this URL:</para>

    <programlisting>smart-card://com1:0/7F20/6F38</programlisting>

    <para>Before the request URL is executed, the OSGi framework information
    is appended to the URL. This information includes at least the OSGi
    framework Identifier, but may also contain proprietary information, as
    long as the keys for this information do not conflict. Different URL
    schemes may use different methods of appending parameters; these details
    are specified in the mappings of this specification to concrete
    protocols.</para>

    <para>The result of the request must be a ZIP file. (The content type
    should be <code>application/zip</code>). It is the responsibility of the
    underlying protocol to guarantee the integrity and authenticity of this
    ZIP file.</para>

    <para>This ZIP file is unpacked and its entries (except
    <code>bundle</code> and <code>bundle-url</code> entries, described in
    <xref linkend="service.provisioning-rsh.headers"/> ) are placed in a
    <code>Dictionary</code> object. This <code>Dictionary</code> object is
    called the <emphasis>Provisioning Dictionary</emphasis>. It must be made
    available from the Provisioning Service in the service registry. The names
    of the entries in the ZIP file must not start with a solidus (<code>'/'
    \u002F</code>).</para>

    <para>The ZIP file may contain only four types of dictionary entries:
    <code>text</code>, <code>binary</code>, <code>bundle</code>, or
    <code>bundle-url</code>. The type of an entry can be specified in
    different ways. An Initial Provisioning service must look in the following
    places to find the information about an entry's (MIME) type (in the given
    order):</para>

    <orderedlist>
      <listitem>
        <para>The manifest header InitialProvisioning-Entries of the given ZIP
        file. This header is defined in <xref linkend="i1442770"/>. If this
        header is present, but a given entry's path is not named then try the
        next step.</para>
      </listitem>

      <listitem>
        <para>The extension of the entry path name if one of
        <code>.txt</code>, <code>.jar</code>, <code>.url</code> extensions.
        See <xref linkend="service.provisioning-content.types" xrefstyle="template:Table %n on page %p"/> for the mapping of types,
        MIME types, and extensions.</para>
      </listitem>

      <listitem>
        <para>The entry is assumed to be a binary type</para>
      </listitem>
    </orderedlist>

    <para>The types can optionally be specified as a MIME type as defined in
    <xref linkend="i1296602"/>. The <code>text</code> and
    <code>bundle-url</code> entries are translated into a <code>String</code>
    object from an <code>UTF-8</code> encoded byte array. All other entries
    must be stored as a <code>byte[]</code>.</para>

    <table xml:id="service.provisioning-content.types">
      <title>Content types of provisioning ZIP file</title>

      <tgroup cols="4">
        <colspec colnum="1" colwidth="1.5*"/>

        <colspec colnum="2" colwidth="3*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="4.5*"/>

        <thead>
          <row>
            <entry>Type</entry>

            <entry>MIME Type</entry>

            <entry>Ext</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>text</code></entry>

            <entry><para><xref linkend="org.osgi.service.provisioning.ProvisioningService.MIME_STRING" xrefstyle="hyperlink"/></para><para><code>text/plain;charset=utf-8</code></para></entry>

            <entry><code>.txt</code></entry>

            <entry><para>Must be represented as a String object</para></entry>
          </row>

          <row>
            <entry><code>binary</code></entry>

            <entry><para><xref linkend="org.osgi.service.provisioning.ProvisioningService.MIME_BYTE_ARRAY" xrefstyle="hyperlink"/></para><para><code>application/octet-stream</code></para></entry>

            <entry><para>not <code>txt</code>, <code>.url</code>, or
            <code>.jar</code></para></entry>

            <entry><para>Must be represented as a byte array
            (<code>byte[]</code>).</para></entry>
          </row>

          <row>
            <entry><code>bundle</code></entry>

            <entry><para><xref linkend="org.osgi.service.provisioning.ProvisioningService.MIME_BUNDLE" xrefstyle="hyperlink"/></para><para><code>application/vnd.osgi.bundle</code>
            </para><para><code>MIME_BUNDLE_ALT</code></para><para><code>application/x-osgi-bundle</code></para></entry>

            <entry><code>.jar</code></entry>

            <entry><para>Entries must be installed using
            <code>BundleContext.installBundle(String, InputStream)</code>,
            with the <code>InputStream</code> object constructed from the
            contents of the ZIP entry. The location must be the name of the
            ZIP entry without leading solidus (<code>'/' \u002F</code>). This
            entry must not be stored in the Provisioning
            Dictionary.</para><para>If a bundle with this location name is
            already installed in this system, then this bundle must be updated
            instead of installed.</para><para>The <code>MIME_BUNDLE_ALT</code>
            version is intended for backward compatibility, it specifies the
            original MIME type for bundles before there was an official IANA
            MIME type.</para></entry>
          </row>

          <row>
            <entry><code>bundle-url</code></entry>

            <entry><para><xref linkend="org.osgi.service.provisioning.ProvisioningService.MIME_BUNDLE_URL" xrefstyle="hyperlink"/></para><para><code>text/x-osgi-bundle-url;
            charset=utf-8</code></para></entry>

            <entry><code>.url</code></entry>

            <entry><para>The content of this entry is a string coded in
            <code>utf-8</code>. Entries must be installed using
            <code>BundleContext.installBundle(String, InputStream)</code>,
            with the <code>InputStream</code> object created from the given
            URL. The location must be the name of the ZIP entry without
            leading solidus (<code>'/' \u002F</code>). This entry must not be
            stored in the Provisioning Dictionary.</para><para>If a bundle
            with this location URL is already installed in this system, then
            this bundle must be updated instead of installed.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The Provisioning Service must install (but not start) all entries in
    the ZIP file that are typed with <code>bundle</code> or
    <code>bundle-url</code>.</para>

    <para>If an entry named <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_START_BUNDLE" xrefstyle="hyperlink"/> is present in the Provisioning Dictionary, then
    its content type must be text as defined in <xref linkend="service.provisioning-content.types"/>. The content of this entry
    must match the bundle location of a previously loaded bundle. This
    designated bundle must be given <code>AllPermission</code> and
    started.</para>

    <para>If no <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_START_BUNDLE" xrefstyle="hyperlink"/> entry is present in the Provisioning Dictionary,
    the Provisioning Dictionary should contain a reference to another ZIP file
    under the <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE" xrefstyle="hyperlink"/> key. If both keys are absent, no further action
    must take place.</para>

    <para>If this <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE" xrefstyle="hyperlink"/> key is present and holds a <code>String</code>
    object that can be mapped to a valid URL, then a new ZIP file must be
    retrieved from this URL. The <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE" xrefstyle="hyperlink"/> link may be repeated multiple times in
    successively loaded ZIP files.</para>

    <para>Referring to a new ZIP file with such a URL allows a manufacturer to
    place a fixed reference inside the OSGi framework Server (in a file or
    smart card) that will provide some platform identifying information and
    then also immediately load the information from the management system. The
    <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE" xrefstyle="hyperlink"/> link may be repeated multiple times in
    successively loaded ZIP files. The entry <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_UPDATE_COUNT" xrefstyle="hyperlink"/> must be an <code>Integer</code> object that must
    be incremented on every iteration.</para>

    <para>Information retrieved while loading subsequent <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE" xrefstyle="hyperlink"/> URLs may replace previous key/values in the
    Provisioning Dictionary, but must not erase unrecognized key/values. For
    example, if an assignment has assigned the key <code>proprietary-x</code>,
    with a value '3', then later assignments must not override this value,
    unless the later loaded ZIP file contains an entry with that name. All
    these updates to the Provisioning Dictionary must be stored persistently.
    At the same time, each entry of type <code>bundle</code> or
    <code>bundle-url</code> (see <xref linkend="service.provisioning-content.types"/> ) must be installed and not
    started.</para>

    <para>Once the Management Agent has been started, the Initial Provisioning
    service has become operational. In this state, the Initial Provisioning
    service must react when the Provisioning Dictionary is updated with a new
    <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE" xrefstyle="hyperlink"/> property. If this key is set, it should start the
    cycle again. For example, if the control of a OSGi framework needs to be
    transferred to another Remote Manager, the Management Agent should set the
    <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE" xrefstyle="hyperlink"/> to the location of this new Remote Manager's
    Initial Provisioning ZIP file. This process is called
    <emphasis>re-provisioning</emphasis>.</para>

    <para>If errors occur during this process, the Initial Provisioning
    service should try to notify the Service User of the problem.</para>

    <para>The previous description is depicted in <xref linkend="i1302126"/>
    as a flow chart.</para>

    <figure xml:id="i1302126">
      <title>Flow chart installation Management Agent bundle</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="3.357in" contentwidth="4.917in" fileref="installation-flow.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The Management Agent may require configuration data that is specific
    to the OSGi framework instance. If this data is available outside the
    Management Agent bundle, the merging of this data with the Management
    Agent may take place in the OSGi framework. Transferring the data
    separately will make it possible to simplify the implementation on the
    server side, as it is not necessary to create
    <emphasis>personalized</emphasis> OSGi framework bundles. The <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_AGENT_CONFIG" xrefstyle="hyperlink"/> key is reserved for this purpose, but the
    Management Agent may use another key or mechanisms if so desired.</para>

    <para>The <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_SPID" xrefstyle="hyperlink"/> key must contain the OSGi framework
    Identifier.</para>

    <section xml:id="i1442770">
      <title>InitialProvisioning-Entries Manifest Header</title>

      <para>The InitialProvisioning-Entries manifest header optionally
      specifies the type of the entries in the ZIP file. The syntax for this
      header is:</para>

      <programlisting>InitialProvisioning-Entries ::= ip-entry (',' ip-entry ) *
ip-entry                    ::= path ( ';' parameter ) *</programlisting>

      <para>The entry is the path name of a resource in the ZIP file. This
      InitialProvisioning-Entries header recognizes the following
      attribute:</para>

      <itemizedlist>
        <listitem>
          <para><code>type</code> - Gives the type of the dictionary entry.
          The type can have one of the following values: <code>text</code>,
          <code>binary</code>, <code>bundle</code>, or
          <code>bundle-url</code></para>
        </listitem>
      </itemizedlist>

      <para>If the type parameter entry is not specified for an entry, then
      the type will be inferred from the extension of the entry, as defined in
      table <xref linkend="service.provisioning-content.types" xrefstyle="template:Table %n on page %p"/>.</para>
    </section>
  </section>

  <section>
    <title>Special Configurations</title>

    <para>The next section shows some examples of specially configured types
    of OSGi framework Servers and how they are treated with the respect to the
    specifications in this document.</para>

    <section>
      <title>Branded OSGi framework Server</title>

      <para>If a OSGi framework Operator is selling OSGi framework Servers
      branded exclusively for use with their service, the provisioning will
      most likely be performed prior to shipping the OSGi framework Server to
      the User. Typically the OSGi framework is configured with the
      <code>Dictionary</code> entry <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE" xrefstyle="hyperlink"/> pointing at a location controlled by the
      Operator.</para>

      <para>Up-to-date bundles and additional configuration data must be
      loaded from that location at activation time. The OSGi framework is
      probably equipped with necessary security entities, like certificates,
      to enable secure downloads from the Operator's URL over open networks,
      if necessary.</para>
    </section>

    <section>
      <title>Non-connected OSGi framework</title>

      <para>Circumstances might exist in which the OSGi framework Server has
      no WAN connectivity, or prefers not to depend on it for the purposes not
      covered by this specification.</para>

      <para>The non-connected case can be implemented by specifying a
      <code>file://</code> URL for the initial ZIP file ( <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE" xrefstyle="hyperlink"/> ). That <code>file://</code> URL would name a
      local file containing the response that would otherwise be received from
      a remote server.</para>

      <para>The value for the Management Agent <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE" xrefstyle="hyperlink"/> found in that file will be used as input to the
      load process. The <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE" xrefstyle="hyperlink"/> may point to a bundle file stored either locally
      or remotely. No code changes are necessary for the non-connected
      scenario. The <code>file://</code> URLs must be specified, and the
      appropriate files must be created on the OSGi framework.</para>
    </section>
  </section>

  <section>
    <title>The Provisioning Service</title>

    <para>Provisioning information is conveyed between bundles using the
    Provisioning Service, as defined in the <xref linkend="org.osgi.service.provisioning.ProvisioningService" xrefstyle="hyperlink"/> interface. The Provisioning Dictionary is
    retrieved from the <code>ProvisioningService</code> object using the <xref linkend="org.osgi.service.provisioning.ProvisioningService.getInformation--" xrefstyle="hyperlink"/> method. This is a read-only
    <code>Dictionary</code> object, any changes to this
    <code>Dictionary</code> object must throw an
    <code>UnsupportedOperationException</code>.</para>

    <para>The Provisioning Service provides a number of methods to update the
    Provisioning Dictionary.</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.provisioning.ProvisioningService.addInformation-Dictionary-" xrefstyle="hyperlink"/> - Add all key/value pairs in the given
        <code>Dictionary</code> object to the Provisioning Dictionary.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.provisioning.ProvisioningService.addInformation-ZipInputStream-" xrefstyle="hyperlink"/> - It is also possible to add a ZIP file to the
        Provisioning Service immediately. This will unpack the ZIP file and
        add the entries to the Provisioning Dictionary. This method must
        install the bundles contained in the ZIP file as described in <xref linkend="i1365233"/>.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.provisioning.ProvisioningService.setInformation-Dictionary-" xrefstyle="hyperlink"/> - Set a new Provisioning Dictionary. This will
        remove all existing entries.</para>
      </listitem>
    </itemizedlist>

    <para>Each of these method will increment the <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_UPDATE_COUNT" xrefstyle="hyperlink"/> entry.</para>
  </section>

  <section>
    <title>Management Agent Environment</title>

    <para>The Management Agent should be written with great care to minimize
    dependencies on other packages and services, as <emphasis>all</emphasis>
    services in OSGi are optional. Some OSGi frameworks may have other bundles
    pre-installed, so it is possible that there may be exported packages and
    services available. Mechanisms outside the current specification, however,
    must be used to discover these packages and services before the Management
    Agent is installed.</para>

    <para>The Provisioning Service must ensure that the Management Agent is
    running with <code>AllPermission</code>. The Management Agent should check
    to see if the Permission Admin service is available, and establish the
    initial permissions as soon as possible to insure the security of the
    device when later bundles are installed. As the
    <code>PermissionAdmin</code> interfaces may not be present (it is an
    optional service), the Management Agent should export the
    <code>PermissionAdmin</code> interfaces to ensure they can be
    resolved.</para>

    <para>Once started, the Management Agent may retrieve its configuration
    data from the Provisioning Service by getting the <code>byte[]</code>
    object that corresponds to the <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_AGENT_CONFIG" xrefstyle="hyperlink"/> key in the Provisioning Dictionary. The structure
    of the configuration data is implementation specific.</para>

    <para>The scope of this specification is to provide a mechanism to
    transmit the raw configuration data to the Management Agent. The
    Management Agent bundle may alternatively be packaged with its
    configuration data in the bundle, so it may not be necessary for the
    Management Agent bundle to use the Provisioning Service at all.</para>

    <para>Most likely, the Management Agent bundle will install other bundles
    to provision the OSGi framework. Installing other bundles might even
    involve downloading a more full featured Management Agent to replace the
    initial Management Agent.</para>
  </section>

  <section>
    <title>Mapping To File Scheme</title>

    <para>The <code>file:</code> scheme is the simplest and most completely
    supported scheme which can be used by the Initial Provisioning
    specification. It can be used to store the configuration data and
    Management Agent bundle on the OSGi framework Server, and avoids any
    outside communication.</para>

    <para>If the initial request URL has a <code>file</code> scheme, no
    parameters should be appended, because the <code>file:</code> scheme does
    not accept parameters.</para>

    <section>
      <title>Example With File Scheme</title>

      <para>The manufacturer should prepare a ZIP file containing only one
      entry named <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_START_BUNDLE" xrefstyle="hyperlink"/> that contains a location string of an entry of
      type <code>bundle</code> or <code>bundle-url</code>. For example, the
      following ZIP file demonstrates this:</para>

      <programlisting>provisioning.start.bundle  text        agent
agent                      bundle      C0AF0E9B2AB..</programlisting>

      <para>The bundle may also be specified with a URL:</para>

      <programlisting>provisioning.start.bundle  text        http://acme.com/a.jar
agent                      bundle-url  http://acme.com/a.jar</programlisting>

      <para>Upon startup, the framework is provided with the URL with the
      <code>file:</code> scheme that points to this ZIP file:</para>

      <programlisting>file:/opt/osgi/ma.zip</programlisting>
    </section>
  </section>

  <section>
    <title>Mapping To HTTP(S) Scheme</title>

    <para>This section defines how HTTP and HTTPS URLs must be used with the
    Initial Provisioning specification.</para>

    <itemizedlist>
      <listitem>
        <para>HTTP - May be used when the data exchange takes place over
        networks that are secured by other means, such as a Virtual Private
        Network (VPN) or a physically isolated network. Otherwise, HTTP is not
        a valid scheme because no authentication takes place.</para>
      </listitem>

      <listitem>
        <para>HTTPS - May be used if the OSGi framework is equipped with
        appropriate certificates.</para>
      </listitem>
    </itemizedlist>

    <para>HTTP and HTTPS share the following qualities:</para>

    <itemizedlist>
      <listitem>
        <para>Both are well known and widely used</para>
      </listitem>

      <listitem>
        <para>Numerous implementations of the protocols exist</para>
      </listitem>

      <listitem>
        <para>Caching of the Management Agent will be desired in many
        implementations where limited bandwidth is an issue. Both HTTP and
        HTTPS already contain an accepted protocol for caching.</para>
      </listitem>
    </itemizedlist>

    <para>Both HTTP and HTTPS must be used with the GET method. The response
    is a ZIP file, implying that the response header <code>Content-Type</code>
    header must contain <code>application/zip</code>.</para>

    <section>
      <title>HTTPS Certificates</title>

      <para>In order to use HTTPS, certificates must be in place. These
      certificates, that are used to establish trust towards the Operator, may
      be made available to the OSGi framework using the Provisioning Service.
      The root certificate should be assigned to the Provisioning Dictionary
      before the HTTPS provider is used. Additionally, the OSGi framework
      should be equipped with a OSGi framework certificate that allows the
      OSGi framework to properly authenticate itself towards the Operator.
      This specification does not state how this certificate gets installed
      into the OSGi framework.</para>

      <para>The root certificate is stored in the Provisioning Dictionary
      under the key:</para>

      <programlisting><xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_ROOTX509" xrefstyle="hyperlink"/></programlisting>

      <para>The Root X.509 Certificate holds certificates used to represent a
      handle to a common base for establishing trust. The certificates are
      typically used when authenticating a Remote Manager to the OSGi
      framework. In this case, a Root X.509 certificate must be part of a
      certificate chain for the Operator's certificate. The format of the
      certificate is defined in <xref linkend="i1287116"/>.</para>
    </section>

    <section xml:id="i1287116">
      <title>Certificate Encoding</title>

      <para>Root certificates are X.509 certificates. Each individual
      certificate is stored as a <code>byte[]</code> object. This
      <code>byte[]</code> object is encoded in the default Java manner, as
      follows:</para>

      <itemizedlist>
        <listitem>
          <para>The original, binary certificate data is DER encoded</para>
        </listitem>

        <listitem>
          <para>The DER encoded data is encoded into base64 to make it
          text.</para>
        </listitem>

        <listitem>
          <para>The base64 encoded data is prefixed with</para>

          <para><programlisting>-----BEGIN CERTIFICATE-----</programlisting></para>

          <para>and suffixed with:</para>

          <para><programlisting>-----END CERTIFICATE-----</programlisting></para>
        </listitem>

        <listitem>
          <para>If a record contains more than one certificate, they are
          simply appended one after the other, each with a delimiting prefix
          and suffix.</para>
        </listitem>
      </itemizedlist>

      <para xml:id="i1323445">The decoding of such a certificate may be done
      with the <code>java.security.cert.CertificateFactory</code>
      class:</para>

      <programlisting>InputStream bis = new ByteArrayInputStream(x509);// byte[]
CertificateFactory cf = 
    CertificateFactory.getInstance("X.509");
Collection c = cf.generateCertificates(bis); 
Iterator i = c.iterator(); 
while (i.hasNext()) { 
    Certificate cert = (Certificate)i.next();
    System.out.println(cert); 
} </programlisting>
    </section>

    <section xml:id="i1297554">
      <title>URL Encoding</title>

      <para>The URL must contain the OSGi framework Identity, and may contain
      more parameters. These parameters are encoded in the URL according to
      the HTTP(S) URL scheme. A base URL may be set by an end user but the
      Provisioning Service must add the OSGi framework Identifier.</para>

      <para>If the request URL already contains HTTP parameters (if there is a
      '?' in the request), the <code>service_platform_id</code> is appended to
      this URL as an additional parameter. If, on the other hand, the request
      URL does not contain any HTTP parameters, the
      <code>service_platform_id</code> will be appended to the URL after a
      '?', becoming the first HTTP parameter. The following two examples show
      these two variants:</para>

      <programlisting>http://server.operator.com/service-x? «
    foo=bar&amp;service_platform_id=VIN:123456789

http://server.operator.com/service-x? «
    service_platform_id=VIN:123456789</programlisting>

      <para>Proper URL encoding must be applied when the URL contains
      characters that are not allowed. See <xref linkend="i1297476"/>.</para>
    </section>
  </section>

  <section>
    <title>Mapping To RSH Scheme</title>

    <para>The RSH protocol is an OSGi-specific protocol, and is included in
    this specification because it is optimized for Initial Provisioning. It
    requires a shared secret between the management system and the OSGi
    framework that is small enough to be entered by the Service User.</para>

    <para>RSH bases authentication and encryption on Message Authentication
    Codes (MACs) that have been derived from a secret that is shared between
    the OSGi framework and the Operator prior to the start of the protocol
    execution.</para>

    <para>The protocol is based on an ordinary HTTP GET request/response, in
    which the request must be <emphasis>signed</emphasis> and the response
    must be <emphasis>encrypted</emphasis> and
    <emphasis>authenticated</emphasis>. Both the
    <emphasis>signature</emphasis> and <emphasis>encryption key</emphasis> are
    derived from the shared secret using Hashed Message Access Codes (HMAC)
    functions.</para>

    <para>As additional input to the HMAC calculations, one client-generated
    nonce and one server-generated nonce are used to prevent replay attacks.
    The nonces are fairly large random numbers that must be generated in
    relation to each invocation of the protocol, in order to guarantee
    freshness. These nonces are called <code>clientfg</code> (client-generated
    freshness guarantee) and <code>serverfg</code> (server-generated freshness
    guarantee).</para>

    <para>In order to separate the HMAC calculations for authentication and
    encryption, each is based on a different constant value. These constants
    are called the <emphasis>authentication constant</emphasis> and the
    <emphasis>encryption constant</emphasis>.</para>

    <para>From an abstract perspective, the protocol may be described as
    follows.</para>

    <itemizedlist>
      <listitem>
        <para><phrase role="symbol">δ</phrase> - Shared secret, 160 bits or
        more</para>
      </listitem>

      <listitem>
        <para><emphasis>s</emphasis> - Server nonce, called
        <code>servercfg</code>, 128 bits</para>
      </listitem>

      <listitem>
        <para><emphasis>c</emphasis> - Client nonce, called
        <code>clientfg</code>, 128 bits</para>
      </listitem>

      <listitem>
        <para><emphasis>K</emphasis><subscript>a</subscript> - Authentication
        key, 160 bits</para>
      </listitem>

      <listitem>
        <para><emphasis>K</emphasis><subscript>e</subscript> - Encryption key,
        192 bits</para>
      </listitem>

      <listitem>
        <para><emphasis>r</emphasis> - Response data</para>
      </listitem>

      <listitem>
        <para><emphasis>e</emphasis> - Encrypted data</para>
      </listitem>

      <listitem>
        <para><emphasis>E</emphasis> - Encryption constant, a
        <code>byte[]</code> of 05, 36, 54, 70, 00 (hex)</para>
      </listitem>

      <listitem>
        <para><emphasis>A</emphasis> - Authentication constant, a
        <code>byte[]</code> of 00, 4f, 53, 47, 49 (hex)</para>
      </listitem>

      <listitem>
        <para><emphasis>M</emphasis> - Message material, used for
        K<subscript>e</subscript> calculation.</para>
      </listitem>

      <listitem>
        <para><emphasis>m</emphasis> - The calculated message authentication
        code.</para>
      </listitem>

      <listitem>
        <para><emphasis>3DES</emphasis> - Triple DES, encryption function, see
        <xref linkend="i1326320"/>. The bytes of the key must be set to odd
        parity. CBC mode must be used where the padding method is defined in
        <xref linkend="i1371344"/>. In <xref linkend="i1371440"/> this is
        addressed as <code>PKCS5Padding</code>.</para>
      </listitem>

      <listitem>
        <para><emphasis>IV</emphasis> - Initialization vector for 3DES.</para>
      </listitem>

      <listitem>
        <para><emphasis>SHA1</emphasis> - Secure Hash Algorithm to generate
        the Hashed Message Authentication Code, see <xref linkend="i1371220"/>. The function takes a single parameter, the block
        to be worked upon.</para>
      </listitem>

      <listitem>
        <para><emphasis>HMAC</emphasis> - The function that calculates a
        message authentication code, which must HMAC-SHA1. HMAC-SHA1 is
        defined in <xref linkend="i1327494"/>. The HMAC function takes a key
        and a block to be worked upon as arguments. Note that the lower 16
        bytes of the result must be used.</para>
      </listitem>

      <listitem>
        <para><emphasis>{}</emphasis> - Concatenates its arguments</para>
      </listitem>

      <listitem>
        <para><emphasis>[]</emphasis> - Indicates access to a sub-part of a
        variable, in bytes. Index starts at one, not zero.</para>
      </listitem>
    </itemizedlist>

    <para>In each step, the emphasized server or client indicates the context
    of the calculation. If both are used at the same time, each variable will
    have server or client as a subscript.</para>

    <orderedlist>
      <listitem>
        <para>The <emphasis>client</emphasis> generates a random nonce, stores
        it and denotes it <code>clientfg</code></para>

        <para><emphasis>c = nonce</emphasis></para>
      </listitem>

      <listitem>
        <para>The client sends the request with the <code>clientfg</code> to
        the server.</para>

        <para><emphasis>c</emphasis><subscript>server</subscript> <phrase role="symbol">⇐</phrase>
        <emphasis>c</emphasis><subscript>client</subscript></para>
      </listitem>

      <listitem>
        <para>The <emphasis>server</emphasis> generates a nonce and denotes it
        <code>serverfg</code>.</para>

        <para><emphasis>s = nonce</emphasis></para>
      </listitem>

      <listitem>
        <para>The <emphasis>server</emphasis> calculates an authentication key
        based on the SHA1 function, the shared secret, the received
        <code>clientfg</code>, the <code>serverfg</code> and the
        authentication constant.</para>

        <para><emphasis>K</emphasis><subscript>a</subscript> <phrase role="symbol">←</phrase> <emphasis>SHA1</emphasis>({<phrase role="symbol">δ</phrase>, <emphasis>c</emphasis>,
        <emphasis>s</emphasis>, <emphasis>A</emphasis>})</para>
      </listitem>

      <listitem xml:id="i1325557">
        <para>The <emphasis>server</emphasis> calculates an encryption key
        using an SHA-1 function, the shared secret, the received
        <code>clientfg</code>, the <code>serverfg</code> and the encryption
        constant. It must first calculate the <emphasis>key
        material</emphasis> M.</para>

        <para><emphasis>M</emphasis>[1, 20] <phrase role="symbol">←</phrase>
        <emphasis>SHA1</emphasis>({ <phrase role="symbol">δ</phrase>,
        <emphasis>c</emphasis>, <emphasis>s</emphasis>,
        <emphasis>E</emphasis>})</para>

        <para><emphasis>M</emphasis>[21, 40] <phrase role="symbol">←</phrase>
        <emphasis>SHA1</emphasis>({ <phrase role="symbol">δ</phrase>,
        <emphasis>M</emphasis>[1, 20], <emphasis>c</emphasis>,
        <emphasis>s</emphasis>, <emphasis>E</emphasis>})</para>
      </listitem>

      <listitem xml:id="i1325580">
        <para>The key for DES consists K<subscript>e</subscript> and
        IV.</para>

        <para><emphasis>K</emphasis><subscript>e</subscript> <phrase role="symbol">←</phrase> <emphasis>M</emphasis>[1, 24]</para>

        <para><emphasis>IV</emphasis> <phrase role="symbol">←</phrase>
        <emphasis>M</emphasis>[25, 32]</para>

        <para>The <emphasis>server</emphasis> encrypts the response data using
        the encryption key derived in step <xref linkend="i1325557"/>. The
        encryption algorithm that must be used to encrypt/decrypt the response
        data is 3DES. 24 bytes (192 bits) from M are used to generate
        K<subscript>e</subscript>, but the low order bit of each byte must be
        used as an odd parity bit. This means that before using
        K<subscript>e</subscript>, each byte must be processed to set the low
        order bit so that the byte has odd parity.</para>

        <para>The encryption/decryption key used is specified by the
        following:</para>

        <para><emphasis>e</emphasis> <phrase role="symbol">←</phrase>
        <emphasis>3DES</emphasis>(
        <emphasis>K</emphasis><subscript>e</subscript>,
        <emphasis>IV</emphasis>, <emphasis>r</emphasis>)</para>
      </listitem>

      <listitem>
        <para>The <emphasis>server</emphasis> calculates a MAC
        <emphasis>m</emphasis> using the HMAC function, the encrypted response
        data and the authentication key derived in 4.</para>

        <para><emphasis>m</emphasis> <phrase role="symbol">←</phrase>
        <emphasis>HMAC</emphasis>(
        <emphasis>K</emphasis><subscript>a</subscript>,
        <emphasis>e</emphasis>)</para>
      </listitem>

      <listitem>
        <para>The <emphasis>server</emphasis> sends a response to the
        <emphasis>client</emphasis> containing the <code>serverfg</code>, the
        MAC <emphasis>m</emphasis> and the encrypted response data</para>

        <para><emphasis>s</emphasis><subscript>client</subscript> <phrase role="symbol">⇐</phrase>
        <emphasis>s</emphasis><subscript>server</subscript></para>

        <para><emphasis>m</emphasis><subscript>client</subscript> <phrase role="symbol">⇐</phrase>
        <emphasis>m</emphasis><subscript>server</subscript></para>

        <para><emphasis>e</emphasis><subscript>client</subscript> <phrase role="symbol">⇐</phrase>
        <emphasis>e</emphasis><subscript>server</subscript></para>

        <para>The <emphasis>client</emphasis> calculates the encryption key
        K<subscript>e</subscript> the same way the server did in steps <xref linkend="i1325557"/> and <xref linkend="i1325580"/>, and uses this to
        decrypt the encrypted response data. The <code>serverfg</code> value
        received in the response is used in the calculation.</para>

        <para><emphasis>r</emphasis> <phrase role="symbol">←</phrase>
        <emphasis>3DES</emphasis>(
        <emphasis>K</emphasis><subscript>e</subscript>,
        <emphasis>IV</emphasis>, <emphasis>e</emphasis>)</para>
      </listitem>

      <listitem>
        <para>The <emphasis>client</emphasis> performs the calculation of the
        MAC <emphasis>m'</emphasis> in the same way the server did, and checks
        that the results match the received MAC <emphasis>m</emphasis>. If
        they do not match, further processing is discarded. The
        <code>serverfg</code> value received in the response is used in the
        calculation.</para>

        <para><emphasis>K</emphasis><subscript>a</subscript> <phrase role="symbol">←</phrase> <emphasis>SHA1</emphasis>({<phrase role="symbol">δ</phrase>, <emphasis>c</emphasis>,
        <emphasis>s</emphasis>, <emphasis>A</emphasis>})</para>

        <para><emphasis>m'</emphasis> <phrase role="symbol">←</phrase>
        <emphasis>HMAC</emphasis>(
        <emphasis>K</emphasis><subscript>a</subscript>,
        <emphasis>e</emphasis>)</para>

        <para><emphasis>m' = m</emphasis></para>
      </listitem>
    </orderedlist>

    <figure>
      <title>Action Diagram for RSH</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.166in" contentwidth="4.941in" fileref="rsh-action.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <section>
      <title>Shared Secret</title>

      <para>The <emphasis>shared secret</emphasis> should be a key of length
      160 bits (20 bytes) or more. The length is selected to match the output
      of the selected hash algorithm <xref linkend="i1278847"/>.</para>

      <para>In some scenarios, the shared secret is generated by the Operator
      and communicated to the User, who inserts the secret into the OSGi
      framework through some unspecified means.</para>

      <para>The opposite is also possible: the shared secret can be stored
      within the OSGi framework, extracted from it, and then communicated to
      the Operator. In this scenario, the source of the shared secret could be
      either the OSGi framework or the Operator.</para>

      <para>In order for the server to calculate the authentication and
      encryption keys, it requires the proper shared secret. The server must
      have access to many different shared secrets, one for each OSGi
      framework it is to support. To be able to resolve this issue, the server
      must typically also have access to the OSGi framework Identifier of the
      OSGi framework. The normal way for the server to know the OSGi framework
      Identifier is through the application protocol, as this value is part of
      the URL encoded parameters of the HTTP, HTTPS, or RSH mapping of the
      Initial Provisioning.</para>

      <para>In order to be able to switch Operators, a new shared secret must
      be used. The new secret may be generated by the new Operator and then
      inserted into the OSGi framework device using a mechanism not covered by
      this specification. Or the device itself may generate the new secret and
      convey it to the owner of the device using a display device or read-out,
      which is then communicated to the new operator out-of-band.
      Additionally, the generation of the new secret may be triggered by some
      external event, like holding down a button for a specified amount of
      time.</para>
    </section>

    <section>
      <title>Request Coding</title>

      <para>RSH is mapped to HTTP or HTTPS. Thus, the request parameters are
      URL encoded as discussed in <xref linkend="i1297554"/>. RSH requires an
      additional parameter in the URL: the <code>clientfg</code> parameter.
      This parameter is a nonce that is used to counter replay attacks. See
      also <xref linkend="i1364615"/>.</para>
    </section>

    <section>
      <title>Response Coding</title>

      <para>The server's response to the client is composed of three
      parts:</para>

      <itemizedlist>
        <listitem>
          <para>A header containing the protocol version and the
          <code>serverfg</code></para>
        </listitem>

        <listitem>
          <para>The MAC</para>
        </listitem>

        <listitem>
          <para>The encrypted response</para>
        </listitem>
      </itemizedlist>

      <para>These three items are packaged into a binary container according
      to <xref linkend="service.provisioning-rsh.headers"/>.</para>

      <table xml:id="service.provisioning-rsh.headers">
        <title>RSH Header description</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="4*"/>

          <colspec colnum="3" colwidth="1*"/>

          <thead>
            <row>
              <entry>Bytes</entry>

              <entry>Description</entry>

              <entry>Value hex</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><para>4</para></entry>

              <entry><para>Number of bytes in header</para></entry>

              <entry><para>2E</para></entry>
            </row>

            <row>
              <entry><para>1</para></entry>

              <entry><para>Major version number</para></entry>

              <entry><para>01</para></entry>
            </row>

            <row>
              <entry><para>1</para></entry>

              <entry><para>Minor version number</para></entry>

              <entry><para>00</para></entry>
            </row>

            <row>
              <entry><para>16</para></entry>

              <entry><para><code>serverfg</code></para></entry>

              <entry><para>...</para></entry>
            </row>

            <row>
              <entry><para>4</para></entry>

              <entry><para>Number of bytes in MAC</para></entry>

              <entry><para>10</para></entry>
            </row>

            <row>
              <entry><para>16</para></entry>

              <entry><para>Message Authentication Code</para></entry>

              <entry><para>MAC</para></entry>
            </row>

            <row>
              <entry><para>4</para></entry>

              <entry><para>Number of bytes of encrypted ZIP
              file</para></entry>

              <entry><para>N</para></entry>
            </row>

            <row>
              <entry><para>N</para></entry>

              <entry><para>Encrypted ZIP file</para></entry>

              <entry><para>...</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The response content type is an RSH-specific encrypted ZIP file,
      implying that the response header <code>Content-Type</code> must be
      <code>application/x-rsh</code> for the HTTP request. When the content
      file is decrypted, the content must be a ZIP file.</para>
    </section>

    <section>
      <title>RSH URL</title>

      <para>The RSH URL must be used internally within the OSGi framework to
      indicate the usage of RSH for initial provisioning. The RSH URL format
      is identical to the HTTP URL format, except that the scheme is
      <code>rsh:</code> instead of <code>http:</code>. For example (
      <code>«</code> means line continues on next line):</para>

      <programlisting>rsh://server.operator.com/service-x</programlisting>
    </section>

    <section>
      <title>Extensions to the Provisioning Service Dictionary</title>

      <para>RSH specifies one additional entry for the Provisioning
      Dictionary:</para>

      <programlisting><xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_RSH_SECRET" xrefstyle="hyperlink"/></programlisting>

      <para>The value of this entry is a <code>byte[]</code> containing the
      shared secret used by the RSH protocol.</para>
    </section>

    <section xml:id="i1364615">
      <title>RSH Transport</title>

      <para>RSH is mapped to HTTP or HTTPS and follows the same URL encoding
      rules, except that the <code>clientfg</code> is additionally appended to
      the URL. The key in the URL must be <code>clientfg</code> and the value
      must be encoded in base 64 format:</para>

      <para>The <code>clientfg</code> parameter is transported as an HTTP
      parameter that is appended after the <code>service_platform_id</code>
      parameter. The second example above would then be:</para>

      <programlisting>rsh://server.operator.com/service-x</programlisting>

      <para>Which, when mapped to HTTP, must become:</para>

      <programlisting>http://server.operator.com/service-x «
    service_platform_id=VIN:123456789&amp; «
    clientfg=AHPmWcw%2FsiWYC37xZNdKvQ%3D%3D</programlisting>
    </section>
  </section>

  <section>
    <title>Exception Handling</title>

    <para>The Initial Provisioning process is a sensitive process that must
    run without user supervision. There is therefore a need to handle
    exceptional cases in a well defined way to simplify trouble
    shooting.</para>

    <para>There are only 2 types of problems that halt the provisioning
    process. They are:</para>

    <itemizedlist>
      <listitem>
        <para>IO Exception when reading or writing provisioning
        information.</para>
      </listitem>

      <listitem>
        <para>IO Exception when retrieving or processing a provisioning zip
        file.</para>
      </listitem>
    </itemizedlist>

    <para>Other exceptions can occur and the Provisioning Service must do any
    attempt to log these events.</para>

    <para>In the cases that the provisioning process stops, it is important
    that the clients of the provisioning service have a way to find out that
    the process is stopped. The mechanism that is used for this is a special
    entry in the provisioning dictionary. The name of the entry must be
    <code>provisioning.error</code>. The value is a String object with the
    following format:</para>

    <itemizedlist>
      <listitem>
        <para>Numeric error code</para>
      </listitem>

      <listitem>
        <para>Space</para>
      </listitem>

      <listitem>
        <para>A human readable string describing the error.</para>
      </listitem>
    </itemizedlist>

    <para>Permitted error codes are:</para>

    <itemizedlist>
      <listitem>
        <para>0 - Unknown error</para>
      </listitem>

      <listitem>
        <para>1 - Couldn't load or save provisioning information</para>
      </listitem>

      <listitem>
        <para>2 - Malformed URL Exception</para>
      </listitem>

      <listitem>
        <para>3 - IO Exception when retrieving document of a URL</para>
      </listitem>

      <listitem>
        <para>4 - Corrupted Zip Input Stream</para>
      </listitem>
    </itemizedlist>

    <para>The provisioning.update.count will be incremented as normal when a
    <code>provisioning.error</code> entry is added to the provisioning
    information. After, the provisioning service will take no further
    action.</para>

    <para>Some examples:</para>

    <programlisting>0 SIM card removed
2 "http://www.acme.com/secure/blib/ifa.zip"</programlisting>
  </section>

  <section>
    <title>Security</title>

    <para>The security model for the OSGi framework is based on the integrity
    of the Management Agent deployment. If any of the mechanisms used during
    the deployment of management agents are weak, or can be compromised, the
    whole security model becomes weak.</para>

    <para>From a security perspective, one attractive means of information
    exchange would be a smart card. This approach enables all relevant
    information to be stored in a single place. The Operator could then
    provide the information to the OSGi framework by inserting the smart card
    into the OSGi framework.</para>

    <section>
      <title>Concerns</title>

      <para>The major security concerns related to the deployment of the
      Management Agent are:</para>

      <itemizedlist>
        <listitem>
          <para>The OSGi framework is controlled by the intended
          Operator</para>
        </listitem>

        <listitem>
          <para>The Operator controls the intended OSGi framework(s)</para>
        </listitem>

        <listitem>
          <para>The integrity and confidentiality of the information exchange
          that takes place during these processes must be considered</para>
        </listitem>
      </itemizedlist>

      <para>In order to address these concerns, an implementation of the OSGi
      Remote Management Architecture must assure that:</para>

      <itemizedlist>
        <listitem>
          <para>The Operator authenticates itself to the OSGi framework</para>
        </listitem>

        <listitem>
          <para>The OSGi framework authenticates itself to the Operator</para>
        </listitem>

        <listitem>
          <para>The integrity and confidentiality of the Management Agent,
          certificates, and configuration data are fully protected if they are
          transported over public transports.</para>
        </listitem>
      </itemizedlist>

      <para>Each mapping of the Initial Provisioning specification to a
      concrete implementation must describe how these goals are met.</para>
    </section>

    <section>
      <title>OSGi framework Long-Term Security</title>

      <para>Secrets for long-term use may be exchanged during the Initial
      Provisioning procedures. This way, one or more secrets may be shared
      securely, assuming that the Provisioning Dictionary assignments used are
      implemented with the proper security characteristics.</para>
    </section>

    <section>
      <title>Permissions</title>

      <para>The provisioning information may contain sensitive information.
      Also, the ability to modify provisioning information can have drastic
      consequences. Thus, only trusted bundles should be allowed to register,
      or get the Provisioning Service. This restriction can be enforced using
      <code>ServicePermission[ ProvisioningService, GET]</code>.</para>

      <para>No <code>Permission</code> classes guard reading or modification
      of the Provisioning Dictionary, so care must be taken not to leak the
      <code>Dictionary</code> object received from the Provisioning Service to
      bundles that are not trusted.</para>

      <para>Whether message-based or connection-based, the communications used
      for Initial Provisioning must support mutual authentication and message
      integrity checking, at a minimum.</para>

      <para>By using both server and client authentication in HTTPS, the
      problem of establishing identity is solved. In addition, HTTPS will
      encrypt the transmitted data. HTTPS requires a Public Key Infrastructure
      implementation in order to retrieve the required certificates.</para>

      <para>When RSH is used, it is vital that the shared secret is shared
      only between the Operator and the OSGi framework, and no one
      else.</para>
    </section>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.provisioning" xml:id="org.osgi.service.provisioning" xml:base="../../generated/javadoc/docbook/org.osgi.service.provisioning.xml">
   <title>org.osgi.service.provisioning</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.provisioning-version">Version 1.2</releaseinfo>
      <edition xml:id="org.osgi.service.provisioning-version.number">1.2</edition>
   </info>
   <para>
Provisioning Package Version 1.2.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.provisioning; version="[1.2,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.provisioning; version="[1.2,1.3)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.provisioning.ProvisioningService">
                  <code>ProvisioningService</code>
               </link> - 
Service for managing the initial provisioning information.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="ProvisioningService" xml:id="org.osgi.service.provisioning.ProvisioningService">
      <title>public interface ProvisioningService</title>
      <para>
Service for managing the initial provisioning information.
 </para>
      <para>
 Initial provisioning of an OSGi device is a multi step process that
 culminates with the installation and execution of the initial management
 agent. At each step of the process, information is collected for the next
 step. Multiple bundles may be involved and this service provides a means for
 these bundles to exchange information. It also provides a means for the
 initial Management Bundle to get its initial configuration information.
 </para>
      <para>
 The provisioning information is collected in a <code>Dictionary</code> object,
 called the Provisioning Dictionary. Any bundle that can access the service
 can get a reference to this object and read and update provisioning
 information. The key of the dictionary is a <code>String</code> object and the
 value is a <code>String</code> or <code>byte[]</code> object. The single exception is
 the PROVISIONING_UPDATE_COUNT value which is an Integer. The
 <code>provisioning</code> prefix is reserved for keys defined by OSGi, other key
 names may be used for implementation dependent provisioning systems.
 </para>
      <para>
 Any changes to the provisioning information will be reflected immediately in
 all the dictionary objects obtained from the Provisioning Service.
 </para>
      <para>
 Because of the specific application of the Provisioning Service, there should
 be only one Provisioning Service registered. This restriction will not be
 enforced by the Framework. Gateway operators or manufactures should ensure
 that a Provisioning Service bundle is not installed on a device that already
 has a bundle providing the Provisioning Service.
 </para>
      <para>
 The provisioning information has the potential to contain sensitive
 information. Also, the ability to modify provisioning information can have
 drastic consequences. Thus, only trusted bundles should be allowed to
 register and get the Provisioning Service. The <code>ServicePermission</code> is
 used to limit the bundles that can gain access to the Provisioning Service.
 There is no check of <code>Permission</code> objects to read or modify the
 provisioning information, so care must be taken not to leak the Provisioning
 Dictionary received from <code>getInformation</code> method.</para>
      <formalpara role="parameter">
         <title>No Implement</title>
         <para>Consumers of this API must not implement this interface</para>
      </formalpara>
      <section role="field" xreflabel="INITIALPROVISIONING_ENTRIES" xml:id="org.osgi.service.provisioning.ProvisioningService.INITIALPROVISIONING_ENTRIES">
         <title>public static final String INITIALPROVISIONING_ENTRIES = "InitialProvisioning-Entries"</title>
         <para>
Name of the header that specifies the type information for the ZIP file
 entries.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="MIME_BUNDLE" xml:id="org.osgi.service.provisioning.ProvisioningService.MIME_BUNDLE">
         <title>public static final String MIME_BUNDLE = "application/vnd.osgi.bundle"</title>
         <para>
MIME type to be stored in the extra field of a <code>ZipEntry</code> object
 for an installable bundle file. Zip entries of this type will be
 installed in the framework, but not started. The entry will also not be
 put into the information dictionary.
   </para>
      </section>
      <section role="field" xreflabel="MIME_BUNDLE_ALT" xml:id="org.osgi.service.provisioning.ProvisioningService.MIME_BUNDLE_ALT">
         <title>public static final String MIME_BUNDLE_ALT = "application/x-osgi-bundle"</title>
         <para>
Alternative MIME type to be stored in the extra field of a
 <code>ZipEntry</code> object for an installable bundle file. Zip entries of
 this type will be installed in the framework, but not started. The entry
 will also not be put into the information dictionary. This alternative
 entry is only for backward compatibility, new applications are
 recommended to use <code>MIME_BUNDLE</code>, which is an official IANA MIME
 type.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="MIME_BUNDLE_URL" xml:id="org.osgi.service.provisioning.ProvisioningService.MIME_BUNDLE_URL">
         <title>public static final String MIME_BUNDLE_URL = "text/x-osgi-bundle-url"</title>
         <para>
MIME type to be stored in the extra field of a ZipEntry for a String that
 represents a URL for a bundle. Zip entries of this type will be used to
 install (but not start) a bundle from the URL. The entry will not be put
 into the information dictionary.
   </para>
      </section>
      <section role="field" xreflabel="MIME_BYTE_ARRAY" xml:id="org.osgi.service.provisioning.ProvisioningService.MIME_BYTE_ARRAY">
         <title>public static final String MIME_BYTE_ARRAY = "application/octet-stream"</title>
         <para>
MIME type to be stored in the extra field of a <code>ZipEntry</code> object
 for <code>byte[]</code> data.
   </para>
      </section>
      <section role="field" xreflabel="MIME_STRING" xml:id="org.osgi.service.provisioning.ProvisioningService.MIME_STRING">
         <title>public static final String MIME_STRING = "text/plain;charset=utf-8"</title>
         <para>
MIME type to be stored in the extra field of a <code>ZipEntry</code> object
 for String data.
   </para>
      </section>
      <section role="field" xreflabel="PROVISIONING_AGENT_CONFIG" xml:id="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_AGENT_CONFIG">
         <title>public static final String PROVISIONING_AGENT_CONFIG = "provisioning.agent.config"</title>
         <para>
The key to the provisioning information that contains the initial
 configuration information of the initial Management Agent. The value will
 be of type <code>byte[]</code>.
   </para>
      </section>
      <section role="field" xreflabel="PROVISIONING_REFERENCE" xml:id="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE">
         <title>public static final String PROVISIONING_REFERENCE = "provisioning.reference"</title>
         <para>
The key to the provisioning information that contains the location of the
 provision data provider. The value must be of type <code>String</code>.
   </para>
      </section>
      <section role="field" xreflabel="PROVISIONING_ROOTX509" xml:id="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_ROOTX509">
         <title>public static final String PROVISIONING_ROOTX509 = "provisioning.rootx509"</title>
         <para>
The key to the provisioning information that contains the root X509
 certificate used to establish trust with operator when using HTTPS.
   </para>
      </section>
      <section role="field" xreflabel="PROVISIONING_RSH_SECRET" xml:id="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_RSH_SECRET">
         <title>public static final String PROVISIONING_RSH_SECRET = "provisioning.rsh.secret"</title>
         <para>
The key to the provisioning information that contains the shared secret
 used in conjunction with the RSH protocol.
   </para>
      </section>
      <section role="field" xreflabel="PROVISIONING_SPID" xml:id="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_SPID">
         <title>public static final String PROVISIONING_SPID = "provisioning.spid"</title>
         <para>
The key to the provisioning information that uniquely identifies the
 Service Platform. The value must be of type <code>String</code>.
   </para>
      </section>
      <section role="field" xreflabel="PROVISIONING_START_BUNDLE" xml:id="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_START_BUNDLE">
         <title>public static final String PROVISIONING_START_BUNDLE = "provisioning.start.bundle"</title>
         <para>
The key to the provisioning information that contains the location of the
 bundle to start with <code>AllPermission</code>. The bundle must have be
 previously installed for this entry to have any effect.
   </para>
      </section>
      <section role="field" xreflabel="PROVISIONING_UPDATE_COUNT" xml:id="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_UPDATE_COUNT">
         <title>public static final String PROVISIONING_UPDATE_COUNT = "provisioning.update.count"</title>
         <para>
The key to the provisioning information that contains the update count of
 the info data. Each set of changes to the provisioning information must
 end with this value being incremented. The value must be of type
 <code>Integer</code>. This key/value pair is also reflected in the properties
 of the ProvisioningService in the service registry.
   </para>
      </section>
      <section role="method" xreflabel="addInformation(Dictionary)" xml:id="org.osgi.service.provisioning.ProvisioningService.addInformation-Dictionary-">
         <title>public void addInformation(Dictionary info)</title>
         <formalpara role="parameter">
            <title>info</title>
            <para>the set of Provisioning Information key/value pairs to add to
        the Provisioning Information dictionary. Any keys are values that
        are of an invalid type will be silently ignored.</para>
         </formalpara>
         <para role="description">
Adds the key/value pairs contained in <code>info</code> to the Provisioning
 Information dictionary. This method causes the
 <code>PROVISIONING_UPDATE_COUNT</code> to be incremented.
   </para>
      </section>
      <section role="method" xreflabel="addInformation(ZipInputStream)" xml:id="org.osgi.service.provisioning.ProvisioningService.addInformation-ZipInputStream-">
         <title>public void addInformation(ZipInputStream zis) throws IOException</title>
         <formalpara role="parameter">
            <title>zis</title>
            <para>the <code>ZipInputStream</code> that will be used to add key/value
        pairs to the Provisioning Information dictionary and install and
        start bundles. If a <code>ZipEntry</code> does not have an
        <code>Extra</code> field that corresponds to one of the four defined
        MIME types (<code>MIME_STRING</code>, <code>MIME_BYTE_ARRAY</code>,
        <code>MIME_BUNDLE</code>, and <code>MIME_BUNDLE_URL</code>) in will be
        silently ignored.</para>
         </formalpara>
         <para role="description">
Processes the <code>ZipInputStream</code> and extracts information to add to
 the Provisioning Information dictionary, as well as, install/update and
 start bundles. This method causes the <code>PROVISIONING_UPDATE_COUNT</code>
 to be incremented.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if an error occurs while processing the
         ZipInputStream. No additions will be made to the Provisioning
         Information dictionary and no bundles must be started or
         installed.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getInformation()" xml:id="org.osgi.service.provisioning.ProvisioningService.getInformation--">
         <title>public Dictionary getInformation()</title>
         <para role="description">
Returns a reference to the Provisioning Dictionary. Any change operations
 (put and remove) to the dictionary will cause an
 <code>UnsupportedOperationException</code> to be thrown. Changes must be done
 using the <code>setInformation</code> and <code>addInformation</code> methods of
 this service.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A reference to the Provisioning Dictionary.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setInformation(Dictionary)" xml:id="org.osgi.service.provisioning.ProvisioningService.setInformation-Dictionary-">
         <title>public void setInformation(Dictionary info)</title>
         <formalpara role="parameter">
            <title>info</title>
            <para>the new set of Provisioning Information key/value pairs. Any
        keys are values that are of an invalid type will be silently
        ignored.</para>
         </formalpara>
         <para role="description">
Replaces the Provisioning Information dictionary with the key/value pairs
 contained in <code>info</code>. Any key/value pairs not in <code>info</code> will
 be removed from the Provisioning Information dictionary. This method
 causes the <code>PROVISIONING_UPDATE_COUNT</code> to be incremented.
   </para>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i1327494"><title>HMAC: Keyed-Hashing for Message
      Authentication</title>http://www.ietf.org/rfc/rfc2104.txt Krawczyk ,et.
      al. 1997.</bibliomixed>

      <bibliomixed xml:id="i1278847"><title>NIST, FIPS PUB 180-1: Secure Hash
      Standard, April 1995.</title></bibliomixed>

      <bibliomixed><title>Hypertext Transfer Protocol -
      HTTP/1.1</title>http://www.ietf.org/rfc/rfc2616.txt Fielding, R., et.
      al.</bibliomixed>

      <bibliomixed><title>Rescorla, E., HTTP over TLS, IETF RFC 2818, May
      2000</title>http://www.ietf.org/rfc/rfc2818.txt.</bibliomixed>

      <bibliomixed xml:id="i1287017"><title>ZIP Archive
      format</title>http://www.pkware.com/support/zip-app-note/archives</bibliomixed>

      <bibliomixed xml:id="i1297476"><title>RFC 2396 - Uniform Resource
      Identifier
      (URI)</title>http://www.ietf.org/rfc/rfc2396.txt</bibliomixed>

      <bibliomixed xml:id="i1296602"><title>MIME
      Types</title>http://www.ietf.org/rfc/rfc2046.txt<?line-break?>http://www.iana.org/assignments/media-types</bibliomixed>

      <bibliomixed xml:id="i1326320"><title>3DES</title>W/ Tuchman, "Hellman
      Presents No Shortcut Solution to DES," IEEE Spectrum, v. 16, n. 7 July
      1979, pp40-41.</bibliomixed>

      <bibliomixed xml:id="i1371344"><title>RFC 1423 Part III: Algorithms,
      Modes, and
      Identifiers</title>http://www.ietf.org/rfc/rfc1423.txt</bibliomixed>

      <bibliomixed><title>PKCS
      5</title>ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-5v2</bibliomixed>

      <bibliomixed xml:id="i1371440"><title>Java Cryptography API (part of
      Java
      1.4)</title>http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html/</bibliomixed>

      <bibliomixed xml:id="i1371220"><title>SHA-1</title>U.S. Government,
      Proposed Federal Information Processing Standard for Secure Hash
      Standard, January 1992</bibliomixed>

      <bibliomixed><title>Transport Layer
      Security</title>http://www.ietf.org/rfc/rfc2246.txt, January 1999, The
      TLS Protocol Version 1.0, T. Dierks &amp; C. Allen.</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="111" revision="$Id: d8391008b432080dcccb86416f15190a330b9403 $" version="5" xml:id="service.upnp" xml:base="../111/service.upnp.xml">
  <title>UPnP™ Device Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.upnp-version" linkend="org.osgi.service.upnp"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The UPnP Device Architecture specification provides the protocols
    for a peer-to-peer network. It specifies how to join a network and how
    devices can be controlled using XML messages sent over HTTP. The OSGi
    specifications address how code can be download and managed in a remote
    system. Both standards are therefore fully complimentary. Using an OSGi
    Framework to work with UPnP enabled devices is therefore a very successful
    combination.</para>

    <para>This specification specifies how OSGi bundles can be developed that
    interoperate with UPnP™ (Universal Plug and Play) devices and UPnP control
    points. The specification is based on the UPnP Device Architecture and
    does not further explain the UPnP specifications. The UPnP specifications
    are maintained by <xref linkend="i1586441"/>.</para>

    <para>UPnP™ is a trademark of the UPnP Implementers Corporation.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Scope - </emphasis>This specification is limited to
          device control aspects of the UPnP specifications. Aspects
          concerning the TCP/IP layer, like DHCP and limited TTL, are not
          addressed.</para>
        </listitem>

        <listitem>
          <para><emphasis>Transparency</emphasis> - OSGi services should be
          made available to networks with UPnP enabled devices in a
          transparent way.</para>
        </listitem>

        <listitem>
          <para><emphasis>Network Selection</emphasis> - It must be possible
          to restrict the use of the UPnP protocols to a selection of the
          connected networks. For example, in certain cases OSGi services that
          are UPnP enabled should not be published to the Wide Area Network
          side of a gateway, nor should UPnP devices be detected on this
          WAN.</para>
        </listitem>

        <listitem>
          <para><emphasis>Event handling</emphasis> - Bundles must be able to
          listen to UPnP events.</para>
        </listitem>

        <listitem>
          <para><emphasis>Export OSGi services as UPnP devices</emphasis> -
          Enable bundles that make a service available to UPnP control
          points.</para>
        </listitem>

        <listitem>
          <para><emphasis>Implement UPnP Control Points</emphasis> - Enable
          bundles that control UPnP devices.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i1527768">
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>UPnP Base Driver</emphasis> - The bundle that
          implements the bridge between OSGi and UPnP networks. This entity is
          not represented as a service.</para>
        </listitem>

        <listitem>
          <para><emphasis>UPnP Root Device</emphasis> -A physical device can
          contain one or more root devices. Root devices contain one ore more
          devices. A root device is modeled with a <code>UPnPDevice</code>
          object, there is no separate interface defined for root
          devices.</para>
        </listitem>

        <listitem>
          <para><emphasis>UPnP Device</emphasis> - The representation of a
          UPnP device. A UPnP device may contain other UPnP devices and UPnP
          services. This entity is represented by a <code>UPnPDevice</code>
          object. A device can be local (implemented in the Framework) or
          external (implemented by another device on the net).</para>
        </listitem>

        <listitem>
          <para><emphasis>UPnP Service</emphasis> -A UPnP device consists of a
          number of services. A UPnP service has a number of UPnP state
          variables that can be queried and modified with actions. This
          concept is represented by a <code>UPnPService</code> object.</para>
        </listitem>

        <listitem>
          <para><emphasis>UPnP Action</emphasis> - A UPnP service is
          associated with a number of actions that can be performed on that
          service and that may modify the UPnP state variables. This entity is
          represented by a <code>UPnPAction</code> object.</para>
        </listitem>

        <listitem>
          <para><emphasis>UPnP State Variable</emphasis> - A variable
          associated with a UPnP service, represented by a
          <code>UPnPStateVariable</code> object.</para>
        </listitem>

        <listitem>
          <para><emphasis>UPnP Local State Variable</emphasis> - Extends the
          <code>UPnPStateVariable</code> interface when the state variable is
          implemented locally. This interface provides access to the actual
          value.</para>
        </listitem>

        <listitem>
          <para><emphasis>UPnP Event Listener Service</emphasis> - A listener
          to events coming from UPnP devices.</para>
        </listitem>

        <listitem>
          <para><emphasis>UPnP Host</emphasis> - The machine that hosts the
          code to run a UPnP device or control point.</para>
        </listitem>

        <listitem>
          <para><emphasis>UPnP Control Point</emphasis> - A UPnP device that
          is intended to control UPnP devices over a network. For example, a
          UPnP remote controller.</para>
        </listitem>

        <listitem>
          <para><emphasis>UPnP Icon</emphasis> - A representation class for an
          icon associated with a UPnP device.</para>
        </listitem>

        <listitem>
          <para><emphasis>UPnP Exception</emphasis> - An exception that
          delivers errors that were discovered in the UPnP layer.</para>
        </listitem>

        <listitem>
          <para><emphasis>UDN</emphasis> - Unique Device Name, a name that
          uniquely identifies the a specific device.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>UPnP Service Specification class Diagram org.osgi.service.upnp
        package</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="4.243in" contentwidth="7.000in" fileref="upnp-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Operation Summary</title>

      <para>To make a UPnP service available to UPnP control points on a
      network, an OSGi service object must be registered under the
      <code>UPnPDevice</code> interface with the Framework. The UPnP driver
      bundle must detect these UPnP Device services and must make them
      available to the network as UPnP devices using the UPnP protocol.</para>

      <para>UPnP devices detected on the local network must be detected and
      automatically registered under the <code>UPnPDevice</code> interface
      with the Framework by the UPnP driver implementation bundle.</para>

      <para>A bundle that wants to control UPnP devices, for example to
      implement a UPnP control point, should track UPnP Device services in the
      OSGi service registry and control them appropriately. Such bundles
      should not distinguish between resident or remote UPnP Device
      services.</para>
    </section>
  </section>

  <section>
    <title>UPnP Specifications</title>

    <para>The UPnP DA is intended to be used in a broad range of device from
    the computing (PCs printers), consumer electronics (DVD, TV, radio),
    communication (phones) to home automation (lighting control, security) and
    home appliances (refrigerators, coffee makers) domains.</para>

    <para>For example, a UPnP TV might announce its existence on a network by
    broadcasting a message. A UPnP control point on that network can then
    discover this TV by listening to those announce messages. The UPnP
    specifications allow the control point to retrieve information about the
    user interface of the TV. This information can then be used to allow the
    end user to control the remote TV from the control point, for example turn
    it on or change the channels.</para>

    <para>The UPnP specification supports the following features:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Detect and control a UPnP standardized
        device</emphasis>. In this case the control point and the remote
        device share a priori knowledge about how the device should be
        controlled. The UPnP Forum intends to define a large number of these
        standardized devices.</para>
      </listitem>

      <listitem>
        <para><emphasis>Use a user interface description</emphasis>. A UPnP
        control point receives enough information about a device and its
        services to automatically build a user interface for it.</para>
      </listitem>

      <listitem>
        <para><emphasis>Programmatic Control</emphasis>. A program can
        directly control a UPnP device without a user interface. This control
        can be based on detected information about the device or through a
        priori knowledge of the device type.</para>
      </listitem>

      <listitem>
        <para><emphasis>Allows the user to browse a web page supplied by the
        device</emphasis>. This web page contains a user interface for the
        device that be directly manipulated by the user. However, this option
        is not well defined in the UPnP Device Architecture specification and
        is not tested for compliance.</para>
      </listitem>
    </itemizedlist>

    <para>The UPnP Device Architecture specification and the OSGi Framework
    provide <emphasis>complementary</emphasis> functionality. The UPnP Device
    Architecture specification is a data communication protocol that does not
    specify where and how programs execute. That choice is made by the
    implementations. In contrast, the OSGi Framework specifies a (managed)
    execution point and does not define what protocols or media are supported.
    The UPnP specification and the OSGi specifications are fully complementary
    and do not overlap.</para>

    <para>From the OSGi perspective, the UPnP specification is a communication
    protocol that can be implemented by one or more bundles. This
    specification therefore defines the following:</para>

    <itemizedlist>
      <listitem>
        <para>How an OSGi bundle can implement a service that is exported to
        the network via the UPnP protocols.</para>
      </listitem>

      <listitem>
        <para>How to find and control services that are available on the local
        network.</para>
      </listitem>
    </itemizedlist>

    <para>The UPnP specifications related to the assignment of IP addresses to
    new devices on the network or auto-IP self configuration should be handled
    at the operating system level. Such functions are outside the scope of
    this specification.</para>

    <section>
      <title>UPnP Base Driver</title>

      <para>The functionality of the UPnP service is implemented in a UPnP
      <emphasis>base driver</emphasis>. This is a bundle that implements the
      UPnP protocols and handles the interaction with bundles that use the
      UPnP devices. A UPnP base driver bundle must provide the following
      functions:</para>

      <itemizedlist>
        <listitem>
          <para>Discover UPnP devices on the network and map each discovered
          device into an OSGi registered UPnP Device service.</para>
        </listitem>

        <listitem>
          <para>Present UPnP marked services that are registered with the OSGi
          Framework on one or more networks to be used by other
          computers.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>UPnP Device</title>

    <para xml:id="i1365305">The principle entity of the UPnP specification is
    the UPnP device. There is a UPnP <emphasis>root device</emphasis> that
    represents a physical appliance, such as a complete TV. The root device
    contains a number of sub-devices. These might be the tuner, the monitor,
    and the sound system. Each sub-device is further composed of a number of
    UPnP services. A UPnP service represents some functional unit in a device.
    For example, in a TV tuner it can represent the TV channel selector. <xref linkend="i1264660" xrefstyle="template:Figure %n on page %p"/> illustrates
    this hierarchy.</para>

    <figure xml:id="i1264660">
      <title>UPnP device hierarchy</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.134in" contentwidth="4.850in" fileref="device-hierarchy.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Each UPnP service can be manipulated with a number of UPnP actions.
    UPnP actions can modify the state of a UPnP state variable that is
    associated with a service. For example, in a TV there might be a state
    variable <emphasis>volume</emphasis>. There are then actions to set the
    volume, to increase the volume, and to decrease the volume.</para>

    <section>
      <title>Root Device</title>

      <para>The UPnP root device is registered as a UPnP Device service with
      the Framework, as well as all its sub-devices. Most applications will
      work with sub-devices, and, as a result, the children of the root device
      are registered under the <code>UPnPDevice</code> interface.</para>

      <para>UPnP device properties are defined per sub-device in the UPnP
      specification. These properties must be registered with the OSGi
      Framework service registry so they are searchable.</para>

      <para>Bundles that want to handle the UPnP device hierarchy can use the
      registered service properties to find the parent of a device (which is
      another registered <code>UPnPDevice</code>).</para>

      <para>The following service registration properties can be used to
      discover this hierarchy:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.upnp.UPnPDevice.PARENT_UDN" xrefstyle="hyperlink"/> - (<code>String</code>) The Universal Device
          Name (UDN) of the parent device. A root device most not have this
          property registered. Type is a <code>String</code> object.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.upnp.UPnPDevice.CHILDREN_UDN" xrefstyle="hyperlink"/> - <code>(String[])</code> An array of UDNs
          of this device's children.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Exported Versus Imported Devices</title>

      <para>Both imported (from the network to the OSGi service registry) and
      exported (from the service registry to the network)
      <code>UPnPDevice</code> services must have the same representation in
      the OSGi Framework for identical devices. For example, if an OSGi UPnP
      Device service is exported as a UPnP device from an OSGi Framework to
      the network, and it is imported into another OSGi Framework, the object
      representation should be equal. Application bundles should therefore be
      able to interact with imported and exported forms of the UPnP device in
      the same manner.</para>

      <para>Imported and exported UPnP devices differ only by two marker
      properties that can be added to the service registration. One marker,
      <code>DEVICE_CATEGORY</code>, should typically be set only on imported
      devices. By not setting <code>DEVICE_CATEGORY</code> on internal UPnP
      devices, the Device Manager does not try to refine these devices (See
      the <xref linkend="service.device"/> for more information about the
      Device Manager). If the device service does not implement the
      <code>Device</code> interface and does not have the
      <code>DEVICE_CATEGORY</code> property set, it is not considered a
      <emphasis>device</emphasis> according to the Device Access
      Specification.</para>

      <para>The other marker, <xref linkend="org.osgi.service.upnp.UPnPDevice.UPNP_EXPORT" xrefstyle="hyperlink"/>, should only be set on internally created
      devices that the bundle developer wants to export. By not setting <xref linkend="org.osgi.service.upnp.UPnPDevice.UPNP_EXPORT" xrefstyle="hyperlink"/> on registered UPnP Device services, the UPnP
      Device service can be used by internally created devices that should not
      be exported to the network. This allows UPnP devices to be simulated
      within an OSGi Framework without announcing all of these devices to any
      networks.</para>

      <para>The <xref linkend="org.osgi.service.upnp.UPnPDevice.UPNP_EXPORT" xrefstyle="hyperlink"/> service property has no defined type, any value
      is correct.</para>
    </section>

    <section>
      <title>Icons</title>

      <para>A UPnP device can optionally support an icon. The purpose of this
      icon is to identify the device on a UPnP control point. UPnP control
      points can be implemented in large computers like PC's or simple devices
      like a remote control. However, the graphic requirements for these UPnP
      devices differ tremendously. The device can, therefore, export a number
      of icons of different size and depth.</para>

      <para>In the UPnP specifications, an icon is represented by a URL that
      typically refers to the device itself. In this specification, a list of
      icons is available from the UPnP Device service.</para>

      <para>In order to obtain localized icons, the method <xref linkend="org.osgi.service.upnp.UPnPDevice.getIcons-String-" xrefstyle="hyperlink"/> can be used to obtain different versions. If the
      locale specified is a <code>null</code> argument, then the call returns
      the icons of the default locale of the called device (not the default
      locale of the UPnP control point).When a bundle wants to access the icon
      of an imported UPnP device, the UPnP driver gets the data and presents
      it to the application through an input stream.</para>

      <para>A bundle that needs to export a UPnP Device service with one or
      more icons must provide an implementation of the <code>UPnPIcon</code>
      interface. This implementation must provide an <code>InputStream</code>
      object to the actual icon data. The UPnP driver bundle must then
      register this icon with an HTTP server and include the URL to the icon
      with the UPnP device data at the appropriate place.</para>
    </section>
  </section>

  <section>
    <title>Device Category</title>

    <para>UPnP Device services are devices in the context of the Device
    Manager. This means that these services need to register with a number of
    properties to participate in driver refinement. The value for UPnP devices
    is defined in the <code>UPnPDevice</code> constant <xref linkend="org.osgi.service.upnp.UPnPDevice.DEVICE_CATEGORY" xrefstyle="hyperlink"/>. The value is <code>UPnP</code>. The
    <code>UPnPDevice</code> interface contains a number of constants for
    matching values. Refer to <xref linkend="org.osgi.service.upnp.UPnPDevice.MATCH_GENERIC" xrefstyle="hyperlink"/> for further information.</para>
  </section>

  <section xml:id="i1527770">
    <title>UPnPService</title>

    <para>A UPnP Device contains a number of <code>UPnPService</code> objects.
    <code>UPnPService</code> objects combine zero or more actions and one or
    more state variables.</para>

    <section xml:id="i1487511">
      <title>State Variables</title>

      <para>The <code>UPnPStateVariable</code> interface encapsulates the
      properties of a UPnP state variable. In addition to the properties
      defined by the UPnP specification, a state variable is also mapped to a
      Java data type. The Java data type is used when an event is generated
      for this state variable and when an action is performed containing
      arguments related to this state variable. There must be a strict
      correspondence between the UPnP data type and the Java data type so that
      bundles using a particular UPnP device profile can predict the precise
      Java data type.</para>

      <para>The function <code>QueryStateVariable</code> defined in the UPnP
      specification has been deprecated and is therefore not implemented. It
      is recommended to use the UPnP event mechanism to track UPnP state
      variables.</para>

      <para>Additionally, a <code>UPnPStateVariable</code>object can also
      implement the <code>UPnPLocalStateVariable</code> interface if the
      device is implemented locally. That is, the device is not imported from
      the network. The <code>UPnPLocalStateVariable</code> interface provides
      a <xref linkend="org.osgi.service.upnp.UPnPLocalStateVariable.getCurrentValue--" xrefstyle="hyperlink"/> method that provides direct access to the actual
      value of the state variable.</para>
    </section>
  </section>

  <section>
    <title>Working With a UPnP Device</title>

    <para>The UPnP driver must register all discovered UPnP devices in the
    local networks. These devices are registered under a
    <code>UPnPDevice</code> interface with the OSGi Framework.</para>

    <para>Using a remote UPnP device thus involves tracking UPnP Device
    services in the OSGi service registry. The following code illustrates how
    this can be done. The sample <code>Controller</code> class extends the
    <code>ServiceTracker</code> class so that it can track all UPnP Device
    services and add them to a user interface, such as a remote controller
    application.</para>

    <programlisting>class Controller extends ServiceTracker {
    UI ui;
    
    Controller( BundleContext context ) {
        super( context, UPnPDevice.class.getName(), null );
    }
    public Object addingService( ServiceReference ref ) {
        UPnPDevice dev = (UPnPDevice)super.addingService(ref);
        ui.addDevice( dev ); 
        return dev;
    }
    public void removedService( ServiceReference ref,
        Object dev ) {
        ui.removeDevice( (UPnPDevice) dev );
    }
    ...
}</programlisting>
  </section>

  <section>
    <title>Implementing a UPnP Device</title>

    <para>OSGi services can also be exported as UPnP devices to the local
    networks, in a way that is transparent to typical UPnP devices. This
    allows developers to bridge legacy devices to UPnP networks. A bundle
    should perform the following to export an OSGi service as a UPnP
    device:</para>

    <itemizedlist>
      <listitem>
        <para>Register an UPnP Device service with the registration property
        <xref linkend="org.osgi.service.upnp.UPnPDevice.UPNP_EXPORT" xrefstyle="hyperlink"/>.</para>
      </listitem>

      <listitem>
        <para>Use the registration property <xref linkend="org.osgi.service.upnp.UPnPDevice.PRESENTATION_URL" xrefstyle="hyperlink"/> to provide the presentation page. The service
        implementer must register its own servlet with the Http Service to
        serve out this interface. This URL must point to that servlet.</para>
      </listitem>
    </itemizedlist>

    <para>There can be multiple UPnP root devices hosted by one OSGi platform.
    The relationship between the UPnP devices and the OSGi platform is defined
    by the <xref linkend="org.osgi.service.upnp.UPnPDevice.PARENT_UDN" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.upnp.UPnPDevice.CHILDREN_UDN" xrefstyle="hyperlink"/> service properties. The bundle registering those
    device services must make sure these properties are set
    accordingly.</para>

    <para>Devices that are implemented on the OSGi Framework (in contrast with
    devices that are imported from the network) should use the <xref linkend="org.osgi.service.upnp.UPnPLocalStateVariable" xrefstyle="hyperlink"/> interface for their state variables instead of the
    <xref linkend="org.osgi.service.upnp.UPnPStateVariable" xrefstyle="hyperlink"/> interface. This interface provides programmatic
    access to the actual value of the state variable as maintained by the
    device specific code.</para>
  </section>

  <section xml:id="i1527771">
    <title>Event API</title>

    <para>There are two distinct event directions for the UPnP Service
    specification.</para>

    <itemizedlist>
      <listitem>
        <para>External events from the network must be dispatched to listeners
        inside the OSGi Frameworks. The UPnP Base driver is responsible for
        mapping the network events to internal listener events.</para>
      </listitem>

      <listitem>
        <para>Implementations of UPnP devices must send out events to local
        listeners as well as cause the transmission of the UPnP network
        events.</para>
      </listitem>
    </itemizedlist>

    <para>UPnP events are sent using the whiteboard model, in which a bundle
    interested in receiving the UPnP events registers an object implementing
    the <code>UPnPEventListener</code> interface. A filter can be set to limit
    the events for which a bundle is notified. The UPnP Base driver must
    register a UPnP Event Lister without filter that receives all
    events.</para>

    <figure>
      <title>Event Dispatching for Local and External Devices</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.697in" contentwidth="4.102in" fileref="event-dispatching.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>If a service is registered with a property named
    <code>upnp.filter</code> with the value of an instance of an
    <code>Filter</code> object, the listener is only notified for matching
    events (This is a <code>Filter</code> object and not a <code>String</code>
    object because it allows the <code>InvalidSyntaxException</code> to be
    thrown in the client and not the UPnP driver bundle).</para>

    <para>The filter might refer to any valid combination of the following
    pseudo properties for event filtering:</para>

    <itemizedlist>
      <listitem>
        <para><code>UPnPDevice.</code><xref linkend="org.osgi.service.upnp.UPnPDevice.UDN" xrefstyle="hyperlink"/>
        - (<code>UPnP.device.UDN/String</code>) Only events generated by
        services contained in the specific device are delivered. For example:
        <code>(UPnP.device.UDN=uuid:Upnp-TVEmulator-1_0-1234567890001)</code></para>
      </listitem>

      <listitem>
        <para><code>UPnPDevice.</code><xref linkend="org.osgi.service.upnp.UPnPDevice.TYPE" xrefstyle="hyperlink"/> - (<code>UPnP.device.type/String or
        String[]</code>) Only events generated by services contained in a
        device of the given type are delivered. For example:
        <code>(UPnP.device.type=urn:schemas-upnp-org:device:tvdevice:1)</code></para>
      </listitem>

      <listitem>
        <para><code>UPnPService.</code><xref linkend="org.osgi.service.upnp.UPnPService.ID" xrefstyle="hyperlink"/>
        - (<code>UPnP.service.id/String</code>) Service identity. Only events
        generated by services matching the given service ID are
        delivered.</para>
      </listitem>

      <listitem>
        <para><code>UPnPService.</code><xref linkend="org.osgi.service.upnp.UPnPService.TYPE" xrefstyle="hyperlink"/> - (<code>UPnP.service.type/String or
        String[]</code>) Only events generated by services of the given type
        are delivered.</para>
      </listitem>
    </itemizedlist>

    <para>If an event is generated by either a local device or via the base
    driver for an external device, the <xref linkend="org.osgi.service.upnp.UPnPEventListener.notifyUPnPEvent-String-String-Dictionary-" xrefstyle="hyperlink"/> method is called on all registered <xref linkend="org.osgi.service.upnp.UPnPEventListener" xrefstyle="hyperlink"/>
    services for which the optional filter matches for that event. If no
    filter is specified, all events must be delivered. If the filter does not
    match, the UPnP Driver must not call the UPnP Event Listener service. The
    way events must be delivered is the same as described in
    <emphasis>Delivering Events</emphasis> of <xref linkend="intro.core.release" xrefstyle="template:%t"/>.</para>

    <para>One or multiple events are passed as parameters to the <xref linkend="org.osgi.service.upnp.UPnPEventListener.notifyUPnPEvent-String-String-Dictionary-" xrefstyle="hyperlink"/> method. The <code>Dictionary</code> object holds a
    pair of <code>UpnPStateVariable</code> objects that triggered the event
    and an Object for the new value of the state variable.</para>

    <section xml:id="i1527773">
      <title>Initial Event Delivery</title>

      <para>Special care must be taken with the initial subscription to
      events. According to the UPnP specification, when a client subscribes
      for notification of events for the first time, the device sends out a
      number of events for each state variable, indicating the current value
      of each state variable. This behavior simplifies the synchronization of
      a device and an event-driven client.</para>

      <para>The UPnP Base Driver must mimic this event distribution on behalf
      of external devices. It must therefore remember the values of the state
      variables of external devices. A UPnP Device implementation must send
      out these initial events for each state variable they have a value
      for.</para>

      <para>The UPnP Base Driver must have stored the last event from the
      device and retransmit the value over the multicast network. The UPnP
      Driver must register an event listener without any filter for this
      purpose.</para>

      <para>The call to the listener's notification method must be done
      asynchronously.</para>
    </section>
  </section>

  <section xml:id="i1527772">
    <title>UPnP Events and Event Admin service</title>

    <para>UPnP events must be delivered asynchronously to the Event Admin
    service by the UPnP implementation, if present. UPnP events have the
    following topic:</para>

    <programlisting>org/osgi/service/upnp/UPnPEvent</programlisting>

    <para>The properties of a UPnP event are the following:</para>

    <itemizedlist>
      <listitem>
        <para><code>upnp.deviceId</code> - (<code>String</code>) The identity
        as defined by <code>UPnPDevice.</code><xref linkend="org.osgi.service.upnp.UPnPDevice.UDN" xrefstyle="hyperlink"/>
        of the device sending the event.</para>
      </listitem>

      <listitem>
        <para><code>upnp.serviceId</code> - (<code>String)</code> The identity
        of the service sending the events.</para>
      </listitem>

      <listitem>
        <para><code>upnp.events - (Dictionary)</code> A
        <code>Dictionary</code> object containing the new values for the state
        variables that have changed.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Localization</title>

    <para>All values of the UPnP properties are obtained from the device using
    the device's default locale. If an application wants to query a set of
    localized property values, it has to use the method <xref linkend="org.osgi.service.upnp.UPnPDevice.getDescriptions-String-" xrefstyle="hyperlink"/>. For localized versions of the icons, the method
    <xref linkend="org.osgi.service.upnp.UPnPDevice.getIcons-String-" xrefstyle="hyperlink"/> is to be used.</para>
  </section>

  <section>
    <title>Dates and Times</title>

    <para>The UPnP specification uses different types for date and time
    concepts. An overview of these types is given in the following
    table.</para>

    <table>
      <title>Mapping UPnP Date/Time types to Java</title>

      <tgroup cols="4">
        <colspec colnum="1" colwidth="1.5*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="3*"/>

        <colspec colnum="4" colwidth="3.5*"/>

        <thead>
          <row>
            <entry>UPnP Type</entry>

            <entry>Class</entry>

            <entry>Example</entry>

            <entry>Value (TZ=CEST=UTC+0200)</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>date</code></entry>

            <entry><code>Date</code></entry>

            <entry><code>1985-04-12</code></entry>

            <entry><code>Sun April 12 00:00:00 CEST 1985</code></entry>
          </row>

          <row>
            <entry><code>dateTime</code></entry>

            <entry><code>Date</code></entry>

            <entry><code>1985-04-12T10:15:30</code></entry>

            <entry><code>Sun April 12 10:15:30 CEST 1985</code></entry>
          </row>

          <row>
            <entry><code>dateTime.tz</code></entry>

            <entry><code>Date</code></entry>

            <entry><code>1985-04-12T10:15:30+0400</code></entry>

            <entry><code>Sun April 12 08:15:30 CEST 1985</code></entry>
          </row>

          <row>
            <entry><code>time</code></entry>

            <entry><code>Long</code></entry>

            <entry><code>23:20:50</code></entry>

            <entry><code>84.050.000 (ms)</code></entry>
          </row>

          <row>
            <entry><code>time.tz</code></entry>

            <entry><code>Long</code></entry>

            <entry><code>23:20:50+0100</code></entry>

            <entry><code>1.250.000 (ms)</code></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The UPnP specification points to <xref linkend="i1325817"/>. In this
    standard, <xref linkend="i1325829"/> are referenced. The mapping is not
    completely defined which means that this OSGi UPnP specification defines a
    complete mapping to Java classes. The UPnP types <code>date</code>,
    <code>dateTime</code> and <code>dateTime.tz</code> are represented as a
    <code>Date</code> object. For the <code>date</code> type, the hours,
    minutes and seconds must all be zero.</para>

    <para>The UPnP types <code>time</code> and <code>time.tz</code> are
    represented as a <code>Long</code> object that represents the number of ms
    since midnight. If the time wraps to the next day due to a time zone
    value, then the final value must be truncated modulo 86.400.000.</para>

    <para>See also <xref linkend="org.osgi.service.upnp.UPnPStateVariable.TYPE_DATE" xrefstyle="hyperlink"/>.</para>
  </section>

  <section>
    <title>UPnP Exception</title>

    <para>The UPnP Exception can be thrown when a <code>UPnPAction</code> is
    invoked. This exception contains information about the different UPnP
    layers. The following errors are defined:</para>

    <para><xref linkend="org.osgi.service.upnp.UPnPException.INVALID_ACTION" xrefstyle="hyperlink"/> - (<code>401</code>) No such action could be
    found.</para>

    <para><xref linkend="org.osgi.service.upnp.UPnPException.INVALID_ARGS" xrefstyle="hyperlink"/> - (<code>402</code>) Invalid argument.</para>

    <para><xref linkend="org.osgi.service.upnp.UPnPException.INVALID_SEQUENCE_NUMBER" xrefstyle="hyperlink"/> - (<code>403</code>) Out of
    synchronization.</para>

    <para><xref linkend="org.osgi.service.upnp.UPnPException.INVALID_VARIABLE" xrefstyle="hyperlink"/> - (<code>404</code>) State variable not
    found.</para>

    <para><xref linkend="org.osgi.service.upnp.UPnPException.DEVICE_INTERNAL_ERROR" xrefstyle="hyperlink"/> - (<code>501</code>) Internal error.</para>

    <para>Further errors are categorized as follows:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Common Action Errors</emphasis> - In the range of
        <code>600-69</code>, defined by the UPnP Forum Technical
        Committee.</para>
      </listitem>

      <listitem>
        <para><emphasis>Action Specific Errors</emphasis> - In the range of
        700-799, defined by the UPnP Forum Working Committee.</para>
      </listitem>

      <listitem>
        <para><emphasis>Non-Standard Action Specific Errors</emphasis> - In
        the range of 800-899. Defined by vendors.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Configuration</title>

    <para>In order to provide a standardized way to configure a UPnP driver
    bundle, the Configuration Admin property <code>upnp.ssdp.address</code> is
    defined.</para>

    <para>The value is a <code>String[]</code> with a list of IP addresses,
    optionally followed with a colon (<code>':' \u003A</code>) and a port
    number. For example:</para>

    <programlisting>239.255.255.250:1900</programlisting>

    <para>Those addresses define the interfaces which the UPnP driver is
    operating on. If no SSDP address is specified, the default assumed will be
    239.255.255.250:1900. If no port is specified, port 1900 is assumed as
    default.</para>
  </section>

  <section>
    <title>Networking considerations</title>

    <section>
      <title>The UPnP Multicasts</title>

      <para>The operating system must support multicasting on the selected
      network device. In certain cases, a multicasting route has to be set in
      the operating system routing table.</para>

      <para>These configurations are highly dependent on the underlying
      operating system and beyond the scope of this specification.</para>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>The UPnP specification is based on HTTP and uses plain text SOAP
    (XML) messages to control devices. For this reason, it does not provide
    any inherent security mechanisms. However, the UPnP specification is based
    on the exchange of XML files and not code. This means that at least worms
    and viruses cannot be implemented using the UPnP protocols.</para>

    <para>However, a bundle registering a UPnP Device service is represented
    on the outside network and has the ability to communicate. The same is
    true for getting a UPnP Device service. It is therefore recommended that
    <code>ServicePermission[UPnPDevice|UPnPEventListener, REGISTER|GET]</code>
    be used sparingly and only for bundles that are trusted.</para>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.upnp" xml:id="org.osgi.service.upnp" xml:base="../../generated/javadoc/docbook/org.osgi.service.upnp.xml">
   <title>org.osgi.service.upnp</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.upnp-version">Version 1.2</releaseinfo>
      <edition xml:id="org.osgi.service.upnp-version.number">1.2</edition>
   </info>
   <para>
UPnP Package Version 1.2.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.upnp; version="[1.2,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.upnp; version="[1.2,1.3)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.upnp.UPnPAction">
                  <code>UPnPAction</code>
               </link> - 
A UPnP action.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.upnp.UPnPDevice">
                  <code>UPnPDevice</code>
               </link> - 
Represents a UPnP device.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.upnp.UPnPEventListener">
                  <code>UPnPEventListener</code>
               </link> - 
UPnP Events are mapped and delivered to applications according to the OSGi
 whiteboard model.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.upnp.UPnPException">
                  <code>UPnPException</code>
               </link> - 
There are several defined error situations describing UPnP problems while a
 control point invokes actions to UPnPDevices.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.upnp.UPnPIcon">
                  <code>UPnPIcon</code>
               </link> - 
A UPnP icon representation.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.upnp.UPnPLocalStateVariable">
                  <code>UPnPLocalStateVariable</code>
               </link> - 
A local UPnP state variable which allows the value of the state variable to
 be queried.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.upnp.UPnPService">
                  <code>UPnPService</code>
               </link> - 
A representation of a UPnP Service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.upnp.UPnPStateVariable">
                  <code>UPnPStateVariable</code>
               </link> - 
The meta-information of a UPnP state variable as declared in the device's
 service state table (SST).
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="UPnPAction" xml:id="org.osgi.service.upnp.UPnPAction">
      <title>public interface UPnPAction</title>
      <para>
A UPnP action.
 
 Each UPnP service contains zero or more actions. Each action may have zero or
 more UPnP state variables as arguments.
   </para>
      <section role="method" xreflabel="getInputArgumentNames()" xml:id="org.osgi.service.upnp.UPnPAction.getInputArgumentNames--">
         <title>public String[] getInputArgumentNames()</title>
         <para role="description">
Lists all input arguments for this action.
 </para>
         <para>
 Each action may have zero or more input arguments.
 
 </para>
         <para>
 This method must continue to return the action input argument names after
 the UPnP action has been removed from the network.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Array of input argument names or <code>null</code> if no input
         arguments.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.upnp.UPnPStateVariable">UPnPStateVariable</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getName()" xml:id="org.osgi.service.upnp.UPnPAction.getName--">
         <title>public String getName()</title>
         <para role="description">
Returns the action name.
 
 The action name corresponds to the <code>name</code> field in the
 <code>actionList</code> of the service description.
 </para>
         <itemizedlist>
            <listitem>
               <para>For standard actions defined by a UPnP Forum working committee,
 action names must not begin with <code>X_</code> nor <code>A_</code>.</para>
            </listitem>
            <listitem>
               <para>For non-standard actions specified by a UPnP vendor and added to a
 standard service, action names must begin with <code>X_</code>.</para>
            </listitem>
         </itemizedlist>
         <para>
 This method must continue to return the action name after the UPnP action
 has been removed from the network.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Name of action, must not contain a hyphen character or a hash
         character</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getOutputArgumentNames()" xml:id="org.osgi.service.upnp.UPnPAction.getOutputArgumentNames--">
         <title>public String[] getOutputArgumentNames()</title>
         <para role="description">
List all output arguments for this action.
 
 </para>
         <para>
 This method must continue to return the action output argument names
 after the UPnP action has been removed from the network.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Array of output argument names or <code>null</code> if there are no
         output arguments.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.upnp.UPnPStateVariable">UPnPStateVariable</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getReturnArgumentName()" xml:id="org.osgi.service.upnp.UPnPAction.getReturnArgumentName--">
         <title>public String getReturnArgumentName()</title>
         <para role="description">
Returns the name of the designated return argument.
 </para>
         <para>
 One of the output arguments can be flagged as a designated return
 argument.
 
 </para>
         <para>
 This method must continue to return the action return argument name after
 the UPnP action has been removed from the network.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of the designated return argument or <code>null</code> if
         none is marked.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getStateVariable(String)" xml:id="org.osgi.service.upnp.UPnPAction.getStateVariable-String-">
         <title>public UPnPStateVariable getStateVariable(String argumentName)</title>
         <formalpara role="parameter">
            <title>argumentName</title>
            <para>The name of the UPnP action argument.</para>
         </formalpara>
         <para role="description">
Finds the state variable associated with an argument name.
 
 Helps to resolve the association of state variables with argument names
 in UPnP actions.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>State variable associated with the named argument or <code>null</code>
         if there is no such argument.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– if the UPnP action has been removed from
         the network.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.upnp.UPnPStateVariable">UPnPStateVariable</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="invoke(Dictionary)" xml:id="org.osgi.service.upnp.UPnPAction.invoke-Dictionary-">
         <title>public Dictionary invoke(Dictionary args) throws Exception</title>
         <formalpara role="parameter">
            <title>args</title>
            <para>A <code>Dictionary</code> of arguments. Must contain the correct
        set and type of arguments for this action. May be <code>null</code> if
        no input arguments exist.</para>
         </formalpara>
         <para role="description">
Invokes the action.
 
 The input and output arguments are both passed as <code>Dictionary</code>
 objects. Each entry in the <code>Dictionary</code> object has a <code>String</code>
 object as key representing the argument name and the value is the
 argument itself. The class of an argument value must be assignable from
 the class of the associated UPnP state variable.
 
 The input argument <code>Dictionary</code> object must contain exactly those
 arguments listed by <code>getInputArguments</code> method. The output argument
 <code>Dictionary</code> object will contain exactly those arguments listed by
 <code>getOutputArguments</code> method.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>Dictionary</code> with the output arguments. <code>null</code> if
         the action has no output arguments.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>UPnPException</code>– A UPnP error has occurred.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– if the UPnP action has been removed from
         the network.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– The execution fails for some reason.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.upnp.UPnPStateVariable">UPnPStateVariable</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="UPnPDevice" xml:id="org.osgi.service.upnp.UPnPDevice">
      <title>public interface UPnPDevice</title>
      <para>
Represents a UPnP device.
 
 For each UPnP root and embedded device, an object is registered with the
 framework under the <code>UPnPDevice</code> interface.
 </para>
      <para>
 The relationship between a root device and its embedded devices can be
 deduced using the <code>UPnPDevice.CHILDREN_UDN</code> and
 <code>UPnPDevice.PARENT_UDN</code> service registration properties.
 </para>
      <para>
 The values of the UPnP property names are defined by the UPnP Forum.
 </para>
      <para>
 All values of the UPnP properties are obtained from the device using the
 device's default locale.
 </para>
      <para>
 If an application wants to query for a set of localized property values, it
 has to use the method <code>UPnPDevice.getDescriptions(String locale)</code>.</para>
      <section role="field" xreflabel="CHILDREN_UDN" xml:id="org.osgi.service.upnp.UPnPDevice.CHILDREN_UDN">
         <title>public static final String CHILDREN_UDN = "UPnP.device.childrenUDN"</title>
         <para>
The property key that must be set for all devices containing other
 embedded devices.
 </para>
         <para>
 The value is an array of UDNs for each of the device's children (
 <code>String[]</code>). The array contains UDNs for the immediate descendants
 only.
 </para>
         <para>
 If an embedded device in turn contains embedded devices, the latter are
 not included in the array.
 </para>
         <para>
 The UPnP Specification does not encourage more than two levels of
 nesting.
 </para>
         <para>
 The property is not set if the device does not contain embedded devices.
 </para>
         <para>
 The property is of type <code>String[]</code>. Value is
 "UPnP.device.childrenUDN"</para>
      </section>
      <section role="field" xreflabel="DEVICE_CATEGORY" xml:id="org.osgi.service.upnp.UPnPDevice.DEVICE_CATEGORY">
         <title>public static final String DEVICE_CATEGORY = "UPnP"</title>
         <para>
Constant for the value of the service property <code>DEVICE_CATEGORY</code>
 used for all UPnP devices. Value is "UPnP".
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>org.osgi.service.device.Constants.DEVICE_CATEGORY</code>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="FRIENDLY_NAME" xml:id="org.osgi.service.upnp.UPnPDevice.FRIENDLY_NAME">
         <title>public static final String FRIENDLY_NAME = "UPnP.device.friendlyName"</title>
         <para>
Mandatory property key for a short user friendly version of the device
 name. The property value holds a <code>String</code> object with the user
 friendly name of the device. Value is "UPnP.device.friendlyName".
   </para>
      </section>
      <section role="field" xreflabel="ID" xml:id="org.osgi.service.upnp.UPnPDevice.ID">
         <title>public static final String ID = "UPnP.device.UDN"</title>
         <para>
Property key for the Unique Device ID property. This property is an alias
 to <code>UPnPDevice.UDN</code>. It is merely provided for reasons of symmetry
 with the <code>UPnPService.ID</code> property. The value of the property is a
 <code>String</code> object of the Device UDN. The value of the key is
 "UPnP.device.UDN".
   </para>
      </section>
      <section role="field" xreflabel="MANUFACTURER" xml:id="org.osgi.service.upnp.UPnPDevice.MANUFACTURER">
         <title>public static final String MANUFACTURER = "UPnP.device.manufacturer"</title>
         <para>
Mandatory property key for the device manufacturer's property. The
 property value holds a String representation of the device manufacturer's
 name. Value is "UPnP.device.manufacturer".
   </para>
      </section>
      <section role="field" xreflabel="MANUFACTURER_URL" xml:id="org.osgi.service.upnp.UPnPDevice.MANUFACTURER_URL">
         <title>public static final String MANUFACTURER_URL = "UPnP.device.manufacturerURL"</title>
         <para>
Optional property key for a URL to the device manufacturers Web site. The
 value of the property is a <code>String</code> object representing the URL.
 Value is "UPnP.device.manufacturerURL".
   </para>
      </section>
      <section role="field" xreflabel="MATCH_GENERIC" xml:id="org.osgi.service.upnp.UPnPDevice.MATCH_GENERIC">
         <title>public static final int MATCH_GENERIC = 1</title>
         <para>
Constant for the UPnP device match scale, indicating a generic match for
 the device. Value is 1.
   </para>
      </section>
      <section role="field" xreflabel="MATCH_MANUFACTURER_MODEL" xml:id="org.osgi.service.upnp.UPnPDevice.MATCH_MANUFACTURER_MODEL">
         <title>public static final int MATCH_MANUFACTURER_MODEL = 7</title>
         <para>
Constant for the UPnP device match scale, indicating a match with the
 device model. Value is 7.
   </para>
      </section>
      <section role="field" xreflabel="MATCH_MANUFACTURER_MODEL_REVISION" xml:id="org.osgi.service.upnp.UPnPDevice.MATCH_MANUFACTURER_MODEL_REVISION">
         <title>public static final int MATCH_MANUFACTURER_MODEL_REVISION = 15</title>
         <para>
Constant for the UPnP device match scale, indicating a match with the
 device revision. Value is 15.
   </para>
      </section>
      <section role="field" xreflabel="MATCH_MANUFACTURER_MODEL_REVISION_SERIAL" xml:id="org.osgi.service.upnp.UPnPDevice.MATCH_MANUFACTURER_MODEL_REVISION_SERIAL">
         <title>public static final int MATCH_MANUFACTURER_MODEL_REVISION_SERIAL = 31</title>
         <para>
Constant for the UPnP device match scale, indicating a match with the
 device revision and the serial number. Value is 31.
   </para>
      </section>
      <section role="field" xreflabel="MATCH_TYPE" xml:id="org.osgi.service.upnp.UPnPDevice.MATCH_TYPE">
         <title>public static final int MATCH_TYPE = 3</title>
         <para>
Constant for the UPnP device match scale, indicating a match with the
 device type. Value is 3.
   </para>
      </section>
      <section role="field" xreflabel="MODEL_DESCRIPTION" xml:id="org.osgi.service.upnp.UPnPDevice.MODEL_DESCRIPTION">
         <title>public static final String MODEL_DESCRIPTION = "UPnP.device.modelDescription"</title>
         <para>
Optional (but recommended) property key for a <code>String</code> object with
 a long description of the device for the end user. The value is
 "UPnP.device.modelDescription".
   </para>
      </section>
      <section role="field" xreflabel="MODEL_NAME" xml:id="org.osgi.service.upnp.UPnPDevice.MODEL_NAME">
         <title>public static final String MODEL_NAME = "UPnP.device.modelName"</title>
         <para>
Mandatory property key for the device model name. The property value
 holds a <code>String</code> object giving more information about the device
 model. Value is "UPnP.device.modelName".
   </para>
      </section>
      <section role="field" xreflabel="MODEL_NUMBER" xml:id="org.osgi.service.upnp.UPnPDevice.MODEL_NUMBER">
         <title>public static final String MODEL_NUMBER = "UPnP.device.modelNumber"</title>
         <para>
Optional (but recommended) property key for a <code>String</code> class typed
 property holding the model number of the device. Value is
 "UPnP.device.modelNumber".
   </para>
      </section>
      <section role="field" xreflabel="MODEL_URL" xml:id="org.osgi.service.upnp.UPnPDevice.MODEL_URL">
         <title>public static final String MODEL_URL = "UPnP.device.modelURL"</title>
         <para>
Optional property key for a <code>String</code> typed property holding a
 string representing the URL to the Web site for this model. Value is
 "UPnP.device.modelURL".
   </para>
      </section>
      <section role="field" xreflabel="PARENT_UDN" xml:id="org.osgi.service.upnp.UPnPDevice.PARENT_UDN">
         <title>public static final String PARENT_UDN = "UPnP.device.parentUDN"</title>
         <para>
The property key that must be set for all embedded devices. It contains
 the UDN of the parent device. The property is not set for root devices.
 The value is "UPnP.device.parentUDN".
   </para>
      </section>
      <section role="field" xreflabel="PRESENTATION_URL" xml:id="org.osgi.service.upnp.UPnPDevice.PRESENTATION_URL">
         <title>public static final String PRESENTATION_URL = "UPnP.presentationURL"</title>
         <para>
Optional (but recommended) property key for a <code>String</code> typed
 property holding a string representing the URL to a device representation
 Web page. Value is "UPnP.presentationURL".
   </para>
      </section>
      <section role="field" xreflabel="SERIAL_NUMBER" xml:id="org.osgi.service.upnp.UPnPDevice.SERIAL_NUMBER">
         <title>public static final String SERIAL_NUMBER = "UPnP.device.serialNumber"</title>
         <para>
Optional (but recommended) property key for a <code>String</code> typed
 property holding the serial number of the device. Value is
 "UPnP.device.serialNumber".
   </para>
      </section>
      <section role="field" xreflabel="TYPE" xml:id="org.osgi.service.upnp.UPnPDevice.TYPE">
         <title>public static final String TYPE = "UPnP.device.type"</title>
         <para>
Property key for the UPnP Device Type property. Some standard property
 values are defined by the Universal Plug and Play Forum. The type string
 also includes a version number as defined in the UPnP specification. This
 property must be set.
 </para>
         <para>
 For standard devices defined by a UPnP Forum working committee, this must
 consist of the following components in the given order separated by
 colons:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>urn</code>
               </para>
            </listitem>
            <listitem>
               <para>schemas-upnp-org</para>
            </listitem>
            <listitem>
               <para>
                  <code>device</code>
               </para>
            </listitem>
            <listitem>
               <para>a device type suffix</para>
            </listitem>
            <listitem>
               <para>an integer device version</para>
            </listitem>
         </itemizedlist>
         <para>
 For non-standard devices specified by UPnP vendors following components
 must be specified in the given order separated by colons:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>urn</code>
               </para>
            </listitem>
            <listitem>
               <para>an ICANN domain name owned by the vendor</para>
            </listitem>
            <listitem>
               <para>
                  <code>device</code>
               </para>
            </listitem>
            <listitem>
               <para>a device type suffix</para>
            </listitem>
            <listitem>
               <para>an integer device version</para>
            </listitem>
         </itemizedlist>
         <para>
 To allow for backward compatibility the UPnP driver must automatically
 generate additional Device Type property entries for smaller versions
 than the current one. If for example a device announces its type as
 version 3, then properties for versions 2 and 1 must be automatically
 generated.
 </para>
         <para>
 In the case of exporting a UPnPDevice, the highest available version must
 be announced on the network.
 </para>
         <para>
 Syntax Example: <code>urn:schemas-upnp-org:device:deviceType:v</code>
         </para>
         <para>
 The value is "UPnP.device.type".</para>
      </section>
      <section role="field" xreflabel="UDN" xml:id="org.osgi.service.upnp.UPnPDevice.UDN">
         <title>public static final String UDN = "UPnP.device.UDN"</title>
         <para>
Property key for the Unique Device Name (UDN) property. It is the unique
 identifier of an instance of a <code>UPnPDevice</code>. The value of the
 property is a <code>String</code> object of the Device UDN. Value of the key
 is "UPnP.device.UDN". This property must be set.
   </para>
      </section>
      <section role="field" xreflabel="UPC" xml:id="org.osgi.service.upnp.UPnPDevice.UPC">
         <title>public static final String UPC = "UPnP.device.UPC"</title>
         <para>
Optional property key for a <code>String</code> typed property holding the
 Universal Product Code (UPC) of the device. Value is "UPnP.device.UPC".
   </para>
      </section>
      <section role="field" xreflabel="UPNP_EXPORT" xml:id="org.osgi.service.upnp.UPnPDevice.UPNP_EXPORT">
         <title>public static final String UPNP_EXPORT = "UPnP.export"</title>
         <para>
The <code>UPnP.export</code> service property is a hint that marks a device to
 be picked up and exported by the UPnP Service. Imported devices do not
 have this property set. The registered property requires no value.
 </para>
         <para>
 The UPNP_EXPORT string is "UPnP.export".</para>
      </section>
      <section role="method" xreflabel="getDescriptions(String)" xml:id="org.osgi.service.upnp.UPnPDevice.getDescriptions-String-">
         <title>public Dictionary getDescriptions(String locale)</title>
         <formalpara role="parameter">
            <title>locale</title>
            <para>A language tag as defined by RFC 1766 and maintained by ISO
        639. Examples include "<code>de</code>", "<code>en</code>" or "
        <code>en-US</code>". The default locale of the device is specified by
        passing a <code>null</code> argument.</para>
         </formalpara>
         <para role="description">
Get a set of localized UPnP properties.
 
 The UPnP specification allows a device to present different device
 properties based on the client's locale. The properties used to register
 the UPnPDevice service in the OSGi registry are based on the device's
 default locale. To obtain a localized set of the properties, an
 application can use this method.
 </para>
         <para>
 Not all properties might be available in all locales. This method does
 <emphasis role="strong">not </emphasis> substitute missing properties with their default locale
 versions.
 </para>
         <para>
 This method must continue to return the properties after the UPnP device
 has been removed from the network.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Dictionary mapping property name Strings to property value
         Strings</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getIcons(String)" xml:id="org.osgi.service.upnp.UPnPDevice.getIcons-String-">
         <title>public UPnPIcon[] getIcons(String locale)</title>
         <formalpara role="parameter">
            <title>locale</title>
            <para>A language tag as defined by RFC 1766 and maintained by ISO
        639. Examples include "<code>de</code>", "<code>en</code>" or "
        <code>en-US</code>". The default locale of the device is specified by
        passing a <code>null</code> argument.</para>
         </formalpara>
         <para role="description">
Lists all icons for this device in a given locale.
 
 The UPnP specification allows a device to present different icons based
 on the client's locale.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Array of icons or null if no icons are available.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– if the UPnP device has been removed from
         the network.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getService(String)" xml:id="org.osgi.service.upnp.UPnPDevice.getService-String-">
         <title>public UPnPService getService(String serviceId)</title>
         <formalpara role="parameter">
            <title>serviceId</title>
            <para>The service id</para>
         </formalpara>
         <para role="description">
Locates a specific service by its service id.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The requested service or null if not found.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– if the UPnP device has been removed from
         the network.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getServices()" xml:id="org.osgi.service.upnp.UPnPDevice.getServices--">
         <title>public UPnPService[] getServices()</title>
         <para role="description">
Lists all services provided by this device.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Array of services or <code>null</code> if no services are available.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– if the UPnP device has been removed from
         the network.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="UPnPEventListener" xml:id="org.osgi.service.upnp.UPnPEventListener">
      <title>public interface UPnPEventListener</title>
      <para>
UPnP Events are mapped and delivered to applications according to the OSGi
 whiteboard model. An application that wishes to be notified of events
 generated by a particular UPnP Device registers a service extending this
 interface.
 </para>
      <para>
 The notification call from the UPnP Service to any <code>UPnPEventListener</code>
 object must be done asynchronous with respect to the originator (in a
 separate thread).
 </para>
      <para>
 Upon registration of the UPnP Event Listener service with the Framework, the
 service is notified for each variable which it listens for with an initial
 event containing the current value of the variable. Subsequent notifications
 only happen on changes of the value of the variable.
 </para>
      <para>
 A UPnP Event Listener service filter the events it receives. This event set
 is limited using a standard framework filter expression which is specified
 when the listener service is registered.
 </para>
      <para>
 The filter is specified in a property named "upnp.filter" and has as a value
 an object of type <code>org.osgi.framework.Filter</code>.
 </para>
      <para>
 When the Filter is evaluated, the following keywords are recognized as
 defined as literal constants in the <code>UPnPDevice</code> class.
 </para>
      <para>
 The valid subset of properties for the registration of UPnP Event Listener
 services are:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <code>UPnPDevice.TYPE</code>-- Which type of device to listen for events.</para>
         </listitem>
         <listitem>
            <para>
               <code>UPnPDevice.ID</code>-- The ID of a specific device to listen for events.
 </para>
         </listitem>
         <listitem>
            <para>
               <code>UPnPService.TYPE</code>-- The type of a specific service to listen for
 events.</para>
         </listitem>
         <listitem>
            <para>
               <code>UPnPService.ID</code>-- The ID of a specific service to listen for
 events.</para>
         </listitem>
      </itemizedlist>
      <section role="field" xreflabel="UPNP_FILTER" xml:id="org.osgi.service.upnp.UPnPEventListener.UPNP_FILTER">
         <title>public static final String UPNP_FILTER = "upnp.filter"</title>
         <para>
Key for a service property having a value that is an object of type
 <code>org.osgi.framework.Filter</code> and that is used to limit received
 events.
   </para>
      </section>
      <section role="method" xreflabel="notifyUPnPEvent(String,String,Dictionary)" xml:id="org.osgi.service.upnp.UPnPEventListener.notifyUPnPEvent-String-String-Dictionary-">
         <title>public void notifyUPnPEvent(String deviceId,String serviceId,Dictionary events)</title>
         <formalpara role="parameter">
            <title>deviceId</title>
            <para>ID of the device sending the events</para>
         </formalpara>
         <formalpara role="parameter">
            <title>serviceId</title>
            <para>ID of the service sending the events</para>
         </formalpara>
         <formalpara role="parameter">
            <title>events</title>
            <para>
               <code>Dictionary</code> object containing the new values for the
        state variables that have changed.</para>
         </formalpara>
         <para role="description">
Callback method that is invoked for received events.
 
 The events are collected in a <code>Dictionary</code> object. Each entry has a
 <code>String</code> key representing the event name (= state variable name)
 and the new value of the state variable. The class of the value object
 must match the class specified by the UPnP State Variable associated with
 the event. This method must be called asynchronously
   </para>
      </section>
   </section>
   <section role="class" xreflabel="UPnPException" xml:id="org.osgi.service.upnp.UPnPException">
      <title>public class UPnPException<?line-break?> extends Exception</title>
      <para>
There are several defined error situations describing UPnP problems while a
 control point invokes actions to UPnPDevices.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <section role="field" xreflabel="DEVICE_INTERNAL_ERROR" xml:id="org.osgi.service.upnp.UPnPException.DEVICE_INTERNAL_ERROR">
         <title>public static final int DEVICE_INTERNAL_ERROR = 501</title>
         <para>
The invoked action failed during execution.
   </para>
      </section>
      <section role="field" xreflabel="INVALID_ACTION" xml:id="org.osgi.service.upnp.UPnPException.INVALID_ACTION">
         <title>public static final int INVALID_ACTION = 401</title>
         <para>
No Action found by that name at this service.
   </para>
      </section>
      <section role="field" xreflabel="INVALID_ARGS" xml:id="org.osgi.service.upnp.UPnPException.INVALID_ARGS">
         <title>public static final int INVALID_ARGS = 402</title>
         <para>
Not enough arguments, too many arguments with a specific name, or one of
 more of the arguments are of the wrong type.
   </para>
      </section>
      <section role="field" xreflabel="INVALID_SEQUENCE_NUMBER" xml:id="org.osgi.service.upnp.UPnPException.INVALID_SEQUENCE_NUMBER">
         <title>public static final int INVALID_SEQUENCE_NUMBER = 403</title>
         <para>
The different end-points are no longer in synchronization.
   </para>
      </section>
      <section role="field" xreflabel="INVALID_VARIABLE" xml:id="org.osgi.service.upnp.UPnPException.INVALID_VARIABLE">
         <title>public static final int INVALID_VARIABLE = 404</title>
         <para>
Refers to a non existing variable.
   </para>
      </section>
      <section role="method" xreflabel="UPnPException(int,String)" xml:id="org.osgi.service.upnp.UPnPException.UPnPException-int-String-">
         <title>public  UPnPException(int errorCode,String errorDescription)</title>
         <formalpara role="parameter">
            <title>errorCode</title>
            <para>error code which defined by UPnP Device Architecture
        V1.0.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>errorDescription</title>
            <para>error description which explain the type of
        problem.</para>
         </formalpara>
         <para role="description">
This constructor creates a <code>UPnPException</code> on the specified error
 code and error description.
   </para>
      </section>
      <section role="method" xreflabel="UPnPException(int,String,Throwable)" xml:id="org.osgi.service.upnp.UPnPException.UPnPException-int-String-Throwable-">
         <title>public  UPnPException(int errorCode,String errorDescription,Throwable errorCause)</title>
         <formalpara role="parameter">
            <title>errorCode</title>
            <para>error code which defined by UPnP Device Architecture
        V1.0.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>errorDescription</title>
            <para>error description which explain the type of the
        problem.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>errorCause</title>
            <para>cause of that <code>UPnPException</code>.</para>
         </formalpara>
         <para role="description">
This constructor creates a <code>UPnPException</code> on the specified error
 code, error description and error cause.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getUPnPError_Code()" xml:id="org.osgi.service.upnp.UPnPException.getUPnPError_Code--">
         <title>public int getUPnPError_Code()</title>
         <para role="description">
Returns the UPnPError Code occurred by UPnPDevices during invocation.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The UPnPErrorCode defined by a UPnP Forum working committee or
         specified by a UPnP vendor.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of version 1.2, replaced by <link linkend="org.osgi.service.upnp.UPnPException.getUPnPErrorCode--">getUPnPErrorCode()</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getUPnPErrorCode()" xml:id="org.osgi.service.upnp.UPnPException.getUPnPErrorCode--">
         <title>public int getUPnPErrorCode()</title>
         <para role="description">
Returns the UPnP Error Code occurred by UPnPDevices during invocation.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The UPnPErrorCode defined by a UPnP Forum working committee or
         specified by a UPnP vendor.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="UPnPIcon" xml:id="org.osgi.service.upnp.UPnPIcon">
      <title>public interface UPnPIcon</title>
      <para>
A UPnP icon representation.
 
 Each UPnP device can contain zero or more icons.
   </para>
      <section role="method" xreflabel="getDepth()" xml:id="org.osgi.service.upnp.UPnPIcon.getDepth--">
         <title>public int getDepth()</title>
         <para role="description">
Returns the color depth of the icon in bits.
 
 </para>
         <para>
 This method must continue to return the icon depth after the UPnP device
 has been removed from the network.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The color depth in bits. If the actual color depth of the icon is
         unknown, -1 is returned.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getHeight()" xml:id="org.osgi.service.upnp.UPnPIcon.getHeight--">
         <title>public int getHeight()</title>
         <para role="description">
Returns the height of the icon in pixels.
 
 If the actual height of the icon is unknown, -1 is returned.
 
 </para>
         <para>
 This method must continue to return the icon height after the UPnP device
 has been removed from the network.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The height in pixels, or -1 if unknown.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getInputStream()" xml:id="org.osgi.service.upnp.UPnPIcon.getInputStream--">
         <title>public InputStream getInputStream() throws IOException</title>
         <para role="description">
Returns an <code>InputStream</code> object for the icon data.
 
 The <code>InputStream</code> object provides a way for a client to read the
 actual icon graphics data. The number of bytes available from this
 <code>InputStream</code> object can be determined via the <code>getSize()</code>
 method. The format of the data encoded can be determined by the MIME type
 available via the <code>getMimeType()</code> method.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An InputStream to read the icon graphics data from.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– If the <code>InputStream</code> cannot be returned.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– if the UPnP device has been removed from
         the network.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.upnp.UPnPIcon.getMimeType--">UPnPIcon.getMimeType()</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMimeType()" xml:id="org.osgi.service.upnp.UPnPIcon.getMimeType--">
         <title>public String getMimeType()</title>
         <para role="description">
Returns the MIME type of the icon.
 
 This method returns the format in which the icon graphics, read from the
 <code>InputStream</code> object obtained by the <code>getInputStream()</code>
 method, is encoded.
 </para>
         <para>
 The format of the returned string is in accordance to RFC2046. A list of
 valid MIME types is maintained by the <link xlink:href="http://www.iana.org/assignments/media-types/">IANA</link>.
 </para>
         <para>
 Typical values returned include: "image/jpeg" or "image/gif"
 
 </para>
         <para>
 This method must continue to return the icon MIME type after the UPnP
 device has been removed from the network.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The MIME type of the encoded icon.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getSize()" xml:id="org.osgi.service.upnp.UPnPIcon.getSize--">
         <title>public int getSize()</title>
         <para role="description">
Returns the size of the icon in bytes.
 
 This method returns the number of bytes of the icon available to read
 from the <code>InputStream</code> object obtained by the
 <code>getInputStream()</code> method. If the actual size can not be
 determined, -1 is returned.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The icon size in bytes, or -1 if the size is unknown.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– if the UPnP device has been removed from
         the network.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getWidth()" xml:id="org.osgi.service.upnp.UPnPIcon.getWidth--">
         <title>public int getWidth()</title>
         <para role="description">
Returns the width of the icon in pixels.
 
 If the actual width of the icon is unknown, -1 is returned.
 
 </para>
         <para>
 This method must continue to return the icon width after the UPnP device
 has been removed from the network.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The width in pixels, or -1 if unknown.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="UPnPLocalStateVariable" xml:id="org.osgi.service.upnp.UPnPLocalStateVariable">
      <title>public interface UPnPLocalStateVariable<?line-break?> extends UPnPStateVariable</title>
      <para>
A local UPnP state variable which allows the value of the state variable to
 be queried.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <section role="method" xreflabel="getCurrentValue()" xml:id="org.osgi.service.upnp.UPnPLocalStateVariable.getCurrentValue--">
         <title>public Object getCurrentValue()</title>
         <para role="description">
This method will keep the current values of UPnPStateVariables of a
 UPnPDevice whenever UPnPStateVariable's value is changed , this method
 must be called.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>Object</code> current value of UPnPStateVariable. if the current
         value is initialized with the default value defined UPnP service
         description.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– if the UPnP state variable has been
         removed.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="UPnPService" xml:id="org.osgi.service.upnp.UPnPService">
      <title>public interface UPnPService</title>
      <para>
A representation of a UPnP Service.
 
 Each UPnP device contains zero or more services. The UPnP description for a
 service defines actions, their arguments, and event characteristics.
   </para>
      <section role="field" xreflabel="ID" xml:id="org.osgi.service.upnp.UPnPService.ID">
         <title>public static final String ID = "UPnP.service.id"</title>
         <para>
Property key for the optional service id.
 
 The service id property is used when registering UPnP Device services or
 UPnP Event Listener services. The value of the property contains a
 <code>String</code> array (<code>String[]</code>) of service ids. A UPnP Device
 service can thus announce what service ids it contains. A UPnP Event
 Listener service can announce for what UPnP service ids it wants
 notifications. A service id does <emphasis role="strong">not </emphasis> have to be universally
 unique. It must be unique only within a device. A <code>null</code> value is a
 wildcard, matching <emphasis role="strong">all </emphasis> services. The value is "UPnP.service.id".
   </para>
      </section>
      <section role="field" xreflabel="TYPE" xml:id="org.osgi.service.upnp.UPnPService.TYPE">
         <title>public static final String TYPE = "UPnP.service.type"</title>
         <para>
Property key for the optional service type uri.
 
 The service type property is used when registering UPnP Device services
 and UPnP Event Listener services. The property contains a <code>String</code>
 array (<code>String[]</code>) of service types. A UPnP Device service can thus
 announce what types of services it contains. A UPnP Event Listener
 service can announce for what type of UPnP services it wants
 notifications. The service version is encoded in the type string as
 specified in the UPnP specification. A <code>null</code> value is a wildcard,
 matching <emphasis role="strong">all </emphasis> service types. Value is "UPnP.service.type".
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.upnp.UPnPService.getType--">UPnPService.getType()</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getAction(String)" xml:id="org.osgi.service.upnp.UPnPService.getAction-String-">
         <title>public UPnPAction getAction(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>Name of action. Must not contain hyphen or hash characters.
        Should be &lt; 32 characters.</para>
         </formalpara>
         <para role="description">
Locates a specific action by name.
 
 Looks up an action by its name.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The requested action or <code>null</code> if no action is found.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– if the UPnP service has been removed from
         the network.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getActions()" xml:id="org.osgi.service.upnp.UPnPService.getActions--">
         <title>public UPnPAction[] getActions()</title>
         <para role="description">
Lists all actions provided by this service.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Array of actions (<code>UPnPAction[]</code> )or <code>null</code> if no
         actions are defined for this service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– if the UPnP service has been removed from
         the network.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getId()" xml:id="org.osgi.service.upnp.UPnPService.getId--">
         <title>public String getId()</title>
         <para role="description">
Returns the <code>serviceId</code> field in the UPnP service description.
 
 
 </para>
         <para>
 For standard services defined by a UPnP Forum working committee, the
 serviceId must contain the following components in the indicated order:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>urn:upnp-org:serviceId:</code>
               </para>
            </listitem>
            <listitem>
               <para>service ID suffix</para>
            </listitem>
         </itemizedlist>
         <para>
 Example: <code>urn:upnp-org:serviceId:serviceID</code>.
 
 </para>
         <para>
 Note that <code>upnp-org</code> is used instead of <code>schemas-upnp-org</code> in
 this example because an XML schema is not defined for each serviceId.
 </para>
         <para>
 For non-standard services specified by UPnP vendors, the serviceId must
 contain the following components in the indicated order:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>urn:</code>
               </para>
            </listitem>
            <listitem>
               <para>ICANN domain name owned by the vendor</para>
            </listitem>
            <listitem>
               <para>
                  <code>:serviceId:</code>
               </para>
            </listitem>
            <listitem>
               <para>service ID suffix</para>
            </listitem>
         </itemizedlist>
         <para>
 Example: <code>urn:domain-name:serviceId:serviceID</code>.
 
 </para>
         <para>
 This method must continue to return the service id after the UPnP service
 has been removed from the network.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The service ID suffix defined by a UPnP Forum working committee
         or specified by a UPnP vendor. Must be &lt;= 64 characters.
         Single URI.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getStateVariable(String)" xml:id="org.osgi.service.upnp.UPnPService.getStateVariable-String-">
         <title>public UPnPStateVariable getStateVariable(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>Name of the State Variable</para>
         </formalpara>
         <para role="description">
Gets a <code>UPnPStateVariable</code> objects provided by this service by name
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>State variable or <code>null</code> if no such state variable exists
         for this service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– if the UPnP service has been removed from
         the network.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getStateVariables()" xml:id="org.osgi.service.upnp.UPnPService.getStateVariables--">
         <title>public UPnPStateVariable[] getStateVariables()</title>
         <para role="description">
Lists all <code>UPnPStateVariable</code> objects provided by this service.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Array of state variables or <code>null</code> if none are defined for
         this service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– if the UPnP service has been removed from
         the network.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.upnp.UPnPService.getType--">
         <title>public String getType()</title>
         <para role="description">
Returns the <code>serviceType</code> field in the UPnP service description.
 
 </para>
         <para>
 For standard services defined by a UPnP Forum working committee, the
 serviceType must contain the following components in the indicated order:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>urn:schemas-upnp-org:service:</code>
               </para>
            </listitem>
            <listitem>
               <para>service type suffix:</para>
            </listitem>
            <listitem>
               <para>integer service version</para>
            </listitem>
         </itemizedlist>
         <para>
 Example: <code>urn:schemas-upnp-org:service:serviceType:v</code>.
 
 </para>
         <para>
 For non-standard services specified by UPnP vendors, the
 <code>serviceType</code> must contain the following components in the
 indicated order:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>urn:</code>
               </para>
            </listitem>
            <listitem>
               <para>ICANN domain name owned by the vendor</para>
            </listitem>
            <listitem>
               <para>
                  <code>:service:</code>
               </para>
            </listitem>
            <listitem>
               <para>service type suffix:</para>
            </listitem>
            <listitem>
               <para>integer service version</para>
            </listitem>
         </itemizedlist>
         <para>
 Example: <code>urn:domain-name:service:serviceType:v</code>.
 
 </para>
         <para>
 This method must continue to return the service type after the UPnP
 service has been removed from the network.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The service type suffix defined by a UPnP Forum working committee
         or specified by a UPnP vendor. Must be &lt;= 64 characters, not
         including the version suffix and separating colon. Single URI.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getVersion()" xml:id="org.osgi.service.upnp.UPnPService.getVersion--">
         <title>public String getVersion()</title>
         <para role="description">
Returns the version suffix encoded in the <code>serviceType</code> field in
 the UPnP service description.
 
 </para>
         <para>
 This method must continue to return the service version after the UPnP
 service has been removed from the network.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The integer service version defined by a UPnP Forum working
         committee or specified by a UPnP vendor.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="UPnPStateVariable" xml:id="org.osgi.service.upnp.UPnPStateVariable">
      <title>public interface UPnPStateVariable</title>
      <para>
The meta-information of a UPnP state variable as declared in the device's
 service state table (SST).
 </para>
      <para>
 Method calls to interact with a device (e.g. <code>UPnPAction.invoke(...);</code>)
 use this class to encapsulate meta information about the input and output
 arguments.
 </para>
      <para>
 The actual values of the arguments are passed as Java objects. The mapping of
 types from UPnP data types to Java data types is described with the field
 definitions.</para>
      <section role="field" xreflabel="TYPE_BIN_BASE64" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_BIN_BASE64">
         <title>public static final String TYPE_BIN_BASE64 = "bin.base64"</title>
         <para>
MIME-style Base64 encoded binary BLOB.
 </para>
         <para>
 Takes 3 Bytes, splits them into 4 parts, and maps each 6 bit piece to an
 octet. (3 octets are encoded as 4.) No limit on size.
 </para>
         <para>
 Mapped to <code>byte[]</code> object. The Java byte array will hold the
 decoded content of the BLOB.</para>
      </section>
      <section role="field" xreflabel="TYPE_BIN_HEX" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_BIN_HEX">
         <title>public static final String TYPE_BIN_HEX = "bin.hex"</title>
         <para>
Hexadecimal digits representing octets.
 </para>
         <para>
 Treats each nibble as a hex digit and encodes as a separate Byte. (1
 octet is encoded as 2.) No limit on size.
 </para>
         <para>
 Mapped to <code>byte[]</code> object. The Java byte array will hold the
 decoded content of the BLOB.</para>
      </section>
      <section role="field" xreflabel="TYPE_BOOLEAN" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_BOOLEAN">
         <title>public static final String TYPE_BOOLEAN = "boolean"</title>
         <para>
True or false.
 </para>
         <para>
 Mapped to <code>Boolean</code> object.</para>
      </section>
      <section role="field" xreflabel="TYPE_CHAR" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_CHAR">
         <title>public static final String TYPE_CHAR = "char"</title>
         <para>
Unicode string.
 </para>
         <para>
 One character long.
 </para>
         <para>
 Mapped to <code>Character</code> object.</para>
      </section>
      <section role="field" xreflabel="TYPE_DATE" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_DATE">
         <title>public static final String TYPE_DATE = "date"</title>
         <para>
A calendar date.
 </para>
         <para>
 Date in a subset of ISO 8601 format without time data.
 </para>
         <para>
 See <link xlink:href="http://www.w3.org/TR/xmlschema-2/#date">http://www.w3.org/TR/
 xmlschema-2/#date </link>.
 </para>
         <para>
 Mapped to <code>java.util.Date</code> object. Always 00:00 hours.</para>
      </section>
      <section role="field" xreflabel="TYPE_DATETIME" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_DATETIME">
         <title>public static final String TYPE_DATETIME = "dateTime"</title>
         <para>
A specific instant of time.
 </para>
         <para>
 Date in ISO 8601 format with optional time but no time zone.
 </para>
         <para>
 See <link xlink:href="http://www.w3.org/TR/xmlschema-2/#dateTime">http://www.w3.org
 /TR/xmlschema-2/#dateTime </link>.
 </para>
         <para>
 Mapped to <code>java.util.Date</code> object using default time zone.</para>
      </section>
      <section role="field" xreflabel="TYPE_DATETIME_TZ" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_DATETIME_TZ">
         <title>public static final String TYPE_DATETIME_TZ = "dateTime.tz"</title>
         <para>
A specific instant of time.
 </para>
         <para>
 Date in ISO 8601 format with optional time and optional time zone.
 </para>
         <para>
 See <link xlink:href="http://www.w3.org/TR/xmlschema-2/#dateTime">http://www.w3.org
 /TR/xmlschema-2/#dateTime </link>.
 </para>
         <para>
 Mapped to <code>java.util.Date</code> object adjusted to default time zone.</para>
      </section>
      <section role="field" xreflabel="TYPE_FIXED_14_4" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_FIXED_14_4">
         <title>public static final String TYPE_FIXED_14_4 = "fixed.14.4"</title>
         <para>
Same as r8 but no more than 14 digits to the left of the decimal point
 and no more than 4 to the right.
 </para>
         <para>
 Mapped to <code>Double</code> object.</para>
      </section>
      <section role="field" xreflabel="TYPE_FLOAT" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_FLOAT">
         <title>public static final String TYPE_FLOAT = "float"</title>
         <para>
Floating-point number.
 </para>
         <para>
 Mantissa (left of the decimal) and/or exponent may have a leading sign.
 Mantissa and/or exponent may have leading zeros. Decimal character in
 mantissa is a period, i.e., whole digits in mantissa separated from
 fractional digits by period. Mantissa separated from exponent by E. (No
 currency symbol.) (No grouping of digits in the mantissa, e.g., no
 commas.)
 </para>
         <para>
 Mapped to <code>Float</code> object.</para>
      </section>
      <section role="field" xreflabel="TYPE_I1" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_I1">
         <title>public static final String TYPE_I1 = "i1"</title>
         <para>
1 Byte int.
 </para>
         <para>
 Mapped to <code>Integer</code> object.</para>
      </section>
      <section role="field" xreflabel="TYPE_I2" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_I2">
         <title>public static final String TYPE_I2 = "i2"</title>
         <para>
2 Byte int.
 </para>
         <para>
 Mapped to <code>Integer</code> object.</para>
      </section>
      <section role="field" xreflabel="TYPE_I4" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_I4">
         <title>public static final String TYPE_I4 = "i4"</title>
         <para>
4 Byte int.
 </para>
         <para>
 Must be between -2147483648 and 2147483647
 </para>
         <para>
 Mapped to <code>Integer</code> object.</para>
      </section>
      <section role="field" xreflabel="TYPE_INT" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_INT">
         <title>public static final String TYPE_INT = "int"</title>
         <para>
Integer number.
 </para>
         <para>
 Mapped to <code>Integer</code> object.</para>
      </section>
      <section role="field" xreflabel="TYPE_NUMBER" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_NUMBER">
         <title>public static final String TYPE_NUMBER = "number"</title>
         <para>
Same as r8.
 </para>
         <para>
 Mapped to <code>Double</code> object.</para>
      </section>
      <section role="field" xreflabel="TYPE_R4" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_R4">
         <title>public static final String TYPE_R4 = "r4"</title>
         <para>
4 Byte float.
 </para>
         <para>
 Same format as float. Must be between 3.40282347E+38 to 1.17549435E-38.
 </para>
         <para>
 Mapped to <code>Float</code> object.</para>
      </section>
      <section role="field" xreflabel="TYPE_R8" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_R8">
         <title>public static final String TYPE_R8 = "r8"</title>
         <para>
8 Byte float.
 </para>
         <para>
 Same format as float. Must be between -1.79769313486232E308 and
 -4.94065645841247E-324 for negative values, and between
 4.94065645841247E-324 and 1.79769313486232E308 for positive values, i.e.,
 IEEE 64-bit (8-Byte) double.
 </para>
         <para>
 Mapped to <code>Double</code> object.</para>
      </section>
      <section role="field" xreflabel="TYPE_STRING" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_STRING">
         <title>public static final String TYPE_STRING = "string"</title>
         <para>
Unicode string.
 </para>
         <para>
 No limit on length.
 </para>
         <para>
 Mapped to <code>String</code> object.</para>
      </section>
      <section role="field" xreflabel="TYPE_TIME" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_TIME">
         <title>public static final String TYPE_TIME = "time"</title>
         <para>
An instant of time that recurs every day.
 </para>
         <para>
 Time in a subset of ISO 8601 format with no date and no time zone.
 </para>
         <para>
 See <link xlink:href="http://www.w3.org/TR/xmlschema-2/#dateTime">http://www.w3.org
 /TR/xmlschema-2/#time </link>.
 </para>
         <para>
 Mapped to <code>Long</code>. Converted to milliseconds since midnight.</para>
      </section>
      <section role="field" xreflabel="TYPE_TIME_TZ" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_TIME_TZ">
         <title>public static final String TYPE_TIME_TZ = "time.tz"</title>
         <para>
An instant of time that recurs every day.
 </para>
         <para>
 Time in a subset of ISO 8601 format with optional time zone but no date.
 </para>
         <para>
 See <link xlink:href="http://www.w3.org/TR/xmlschema-2/#dateTime">http://www.w3.org
 /TR/xmlschema-2/#time </link>.
 </para>
         <para>
 Mapped to <code>Long</code> object. Converted to milliseconds since midnight
 and adjusted to default time zone, wrapping at 0 and 24*60*60*1000.</para>
      </section>
      <section role="field" xreflabel="TYPE_UI1" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_UI1">
         <title>public static final String TYPE_UI1 = "ui1"</title>
         <para>
Unsigned 1 <code>Byte</code> int.
 </para>
         <para>
 Mapped to an <code>Integer</code> object.</para>
      </section>
      <section role="field" xreflabel="TYPE_UI2" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_UI2">
         <title>public static final String TYPE_UI2 = "ui2"</title>
         <para>
Unsigned 2 Byte int.
 </para>
         <para>
 Mapped to <code>Integer</code> object.</para>
      </section>
      <section role="field" xreflabel="TYPE_UI4" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_UI4">
         <title>public static final String TYPE_UI4 = "ui4"</title>
         <para>
Unsigned 4 Byte int.
 </para>
         <para>
 Mapped to <code>Long</code> object.</para>
      </section>
      <section role="field" xreflabel="TYPE_URI" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_URI">
         <title>public static final String TYPE_URI = "uri"</title>
         <para>
Universal Resource Identifier.
 </para>
         <para>
 Mapped to <code>String</code> object.</para>
      </section>
      <section role="field" xreflabel="TYPE_UUID" xml:id="org.osgi.service.upnp.UPnPStateVariable.TYPE_UUID">
         <title>public static final String TYPE_UUID = "uuid"</title>
         <para>
Universally Unique ID.
 </para>
         <para>
 Hexadecimal digits representing octets. Optional embedded hyphens are
 ignored.
 </para>
         <para>
 Mapped to <code>String</code> object.</para>
      </section>
      <section role="method" xreflabel="getAllowedValues()" xml:id="org.osgi.service.upnp.UPnPStateVariable.getAllowedValues--">
         <title>public String[] getAllowedValues()</title>
         <para role="description">
Returns the allowed values, if defined. Allowed values can be defined
 only for String types.
 
 </para>
         <para>
 This method must continue to return the state variable allowed values
 after the UPnP state variable has been removed from the network.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The allowed values or <code>null</code> if not defined. Should be less
         than 32 characters.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getDefaultValue()" xml:id="org.osgi.service.upnp.UPnPStateVariable.getDefaultValue--">
         <title>public Object getDefaultValue()</title>
         <para role="description">
Returns the default value, if defined.
 
 </para>
         <para>
 This method must continue to return the state variable default value
 after the UPnP state variable has been removed from the network.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The default value or <code>null</code> if not defined. The type of the
         returned object can be determined by <code>getJavaDataType</code>.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getJavaDataType()" xml:id="org.osgi.service.upnp.UPnPStateVariable.getJavaDataType--">
         <title>public Class getJavaDataType()</title>
         <para role="description">
Returns the Java class associated with the UPnP data type of this state
 variable.
 </para>
         <para>
 Mapping between the UPnP data types and Java classes is performed
 according to the schema mentioned above.
 
 </para>
         <programlisting> 
  Integer              ui1, ui2, i1, i2, i4, int
  Long                 ui4, time, time.tz
  Float                r4, float
  Double               r8, number, fixed.14.4
  Character            char
  String               string, uri, uuid
  Date                 date, dateTime, dateTime.tz
  Boolean              boolean
  byte[]               bin.base64, bin.hex</programlisting>
         <para>
 This method must continue to return the state variable java type after
 the UPnP state variable has been removed from the network.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A class object corresponding to the Java type of this argument.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMaximum()" xml:id="org.osgi.service.upnp.UPnPStateVariable.getMaximum--">
         <title>public Number getMaximum()</title>
         <para role="description">
Returns the maximum value, if defined. Maximum values can only be defined
 for numeric types.
 
 </para>
         <para>
 This method must continue to return the state variable maximum value
 after the UPnP state variable has been removed from the network.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The maximum value or <code>null</code> if not defined.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMinimum()" xml:id="org.osgi.service.upnp.UPnPStateVariable.getMinimum--">
         <title>public Number getMinimum()</title>
         <para role="description">
Returns the minimum value, if defined. Minimum values can only be defined
 for numeric types.
 
 </para>
         <para>
 This method must continue to return the state variable minimum value
 after the UPnP state variable has been removed from the network.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The minimum value or <code>null</code> if not defined.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getName()" xml:id="org.osgi.service.upnp.UPnPStateVariable.getName--">
         <title>public String getName()</title>
         <para role="description">
Returns the variable name.
 
 </para>
         <itemizedlist>
            <listitem>
               <para>All standard variables defined by a UPnP Forum working committee must
 not begin with <code>X_</code> nor <code>A_</code>.</para>
            </listitem>
            <listitem>
               <para>All non-standard variables specified by a UPnP vendor and added to a
 standard service must begin with <code>X_</code>.</para>
            </listitem>
         </itemizedlist>
         <para>
 This method must continue to return the state variable name after the
 UPnP state variable has been removed from the network.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Name of state variable. Must not contain a hyphen character nor a
         hash character. Should be &lt; 32 characters.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getStep()" xml:id="org.osgi.service.upnp.UPnPStateVariable.getStep--">
         <title>public Number getStep()</title>
         <para role="description">
Returns the size of an increment operation, if defined. Step sizes can be
 defined only for numeric types.
 
 </para>
         <para>
 This method must continue to return the step size after the UPnP state
 variable has been removed from the network.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The increment size or null if not defined.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getUPnPDataType()" xml:id="org.osgi.service.upnp.UPnPStateVariable.getUPnPDataType--">
         <title>public String getUPnPDataType()</title>
         <para role="description">
Returns the UPnP type of this state variable. Valid types are defined as
 constants.
 
 </para>
         <para>
 This method must continue to return the state variable UPnP data type
 after the UPnP state variable has been removed from the network.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The UPnP data type of this state variable, as defined in above
         constants.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="sendsEvents()" xml:id="org.osgi.service.upnp.UPnPStateVariable.sendsEvents--">
         <title>public boolean sendsEvents()</title>
         <para role="description">
Tells if this StateVariable can be used as an event source.
 
 If the StateVariable is eventable, an event listener service can be
 registered to be notified when changes to the variable appear.
 
 </para>
         <para>
 This method must continue to return the correct value after the UPnP
 state variable has been removed from the network.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the <code>StateVariable</code> generates events,
         <code>false</code> otherwise.</para>
         </formalpara>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i1586441"><title>UPnP
      Forum</title>http://www.upnp.org</bibliomixed>

      <bibliomixed xml:id="i1325817"><title>XML
      Schema</title>http://www.w3.org/TR/xmlschema-2</bibliomixed>

      <bibliomixed xml:id="i1325829"><title>ISO 8601 Date And Time
      formats</title>http://www.iso.ch</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="112" revision="$Id: b18e1b93333ab90607511d726aedd0cd5a140810 $" version="5" xml:id="service.component" xml:base="../112/service.component.xml">
  <title>Declarative Services Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.component-version" linkend="org.osgi.service.component"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The OSGi Framework contains a procedural service model which
    provides a publish/find/bind model for using
    <emphasis>services</emphasis>. This model is elegant and powerful, it
    enables the building of applications out of bundles that communicate and
    collaborate using these services.</para>

    <para>This specification addresses some of the complications that arise
    when the OSGi service model is used for larger systems and wider
    deployments, such as:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Startup Time</emphasis> - The procedural service model
        requires a bundle to actively register and acquire its services. This
        is normally done at startup time, requiring all present bundles to be
        initialized with a Bundle Activator. In larger systems, this quickly
        results in unacceptably long startup times.</para>
      </listitem>

      <listitem>
        <para><emphasis>Memory Footprint</emphasis> - A service registered
        with the Framework implies that the implementation, and related
        classes and objects, are loaded in memory. If the service is never
        used, this memory is unnecessarily occupied. The creation of a class
        loader may therefore cause significant overhead.</para>
      </listitem>

      <listitem>
        <para><emphasis>Complexity</emphasis> - Service can come and go at any
        time. This dynamic behavior makes the service programming model more
        complex than more traditional models. This complexity negatively
        influences the adoption of the OSGi service model as well as the
        robustness and reliability of applications because these applications
        do not always handle the dynamicity correctly.</para>
      </listitem>
    </itemizedlist>

    <para>The <emphasis>service component</emphasis> model uses a declarative
    model for publishing, finding and binding to OSGi services. This model
    simplifies the task of authoring OSGi services by performing the work of
    registering the service and handling service dependencies. This minimizes
    the amount of code a programmer has to write; it also allows service
    components to be loaded only when they are needed. As a result, bundles
    need not provide a <code>BundleActivator</code> class to collaborate with
    others through the service registry.</para>

    <para>From a system perspective, the service component model means reduced
    startup time and potentially a reduction of the memory footprint. From a
    programmer's point of view the service component model provides a
    simplified programming model.</para>

    <para>The Service Component model makes use of concepts described in <xref linkend="i1550732"/>.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Backward Compatibility</emphasis> - The service
          component model must operate seamlessly with the existing service
          model.</para>
        </listitem>

        <listitem>
          <para><emphasis>Size Constraints</emphasis> - The service component
          model must not require memory and performance intensive subsystems.
          The model must also be applicable on resource constrained
          devices.</para>
        </listitem>

        <listitem>
          <para><emphasis>Delayed Activation</emphasis> - The service
          component model must allow delayed activation of a service
          component. Delayed activation allows for delayed class loading and
          object creation until needed, thereby reducing the overall memory
          footprint.</para>
        </listitem>

        <listitem>
          <para><emphasis>Simplicity</emphasis> - The programming model for
          using declarative services must be very simple and not require the
          programmer to learn a complicated API or XML sub-language.</para>
        </listitem>

        <listitem>
          <para><emphasis>Reactive</emphasis> - It must be possible to react
          to changes in the external dependencies with different
          policies.</para>
        </listitem>

        <listitem>
          <para><emphasis>Annotations</emphasis> - Annotations must be
          provided that can leverage the type information to create the XML
          descriptor.</para>
        </listitem>

        <listitem>
          <para><emphasis>Introspection</emphasis> - It must be possible to
          introspect the service components.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Service Component</emphasis> - A service component
          contains a description that is interpreted at run time to create and
          dispose objects depending on the availability of other services, the
          need for such an object, and available configuration data. Such
          objects can optionally provide a service. This specification also
          uses the generic term <emphasis>component</emphasis> to refer to a
          service component.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service Component Runtime (SCR)</emphasis> - The
          actor that manages the components and their life cycle and allows
          introspection of the components.</para>
        </listitem>

        <listitem>
          <para><emphasis>Component Description</emphasis> - The declaration
          of a service component. It is contained within an XML document in a
          bundle.</para>
        </listitem>

        <listitem>
          <para><emphasis>Component Properties</emphasis> - A set of
          properties which can be specified by the component description,
          Configuration Admin service and from the component factory.</para>
        </listitem>

        <listitem>
          <para><emphasis>Component Property Type</emphasis> - A user defined
          annotation type which defines component properties and is
          implemented by SCR to provide type safe access to the defined
          component properties.</para>
        </listitem>

        <listitem>
          <para><emphasis>Component Configuration</emphasis> - A component
          configuration represents a component description parameterized by
          component properties. It is the entity that tracks the component
          dependencies and manages a component instance. An activated
          component configuration has a component context.</para>
        </listitem>

        <listitem>
          <para><emphasis>Component Instance</emphasis> - An instance of the
          component implementation class. A component instance is created when
          a component configuration is activated and discarded when the
          component configuration is deactivated. A component instance is
          associated with exactly one component configuration.</para>
        </listitem>

        <listitem>
          <para><emphasis>Delayed Component</emphasis> - A component whose
          component configurations are activated when their service is
          requested.</para>
        </listitem>

        <listitem>
          <para><emphasis>Immediate Component</emphasis> - A component whose
          component configurations are activated immediately upon becoming
          satisfied.</para>
        </listitem>

        <listitem>
          <para><emphasis>Factory Component</emphasis> - A component whose
          component configurations are created and activated through the
          component's component factory.</para>
        </listitem>

        <listitem>
          <para><emphasis>Reference</emphasis> - A specified dependency of a
          component on a set of target services.</para>
        </listitem>

        <listitem>
          <para><emphasis>Target Services</emphasis> - The set of services
          that is defined by the reference interface and target property
          filter.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bound Services</emphasis> - The set of target
          services that are bound to a component configuration.</para>
        </listitem>

        <listitem>
          <para><emphasis>Event methods</emphasis> - The bind, updated, and
          unbind methods associated with a Reference.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>Service Component Runtime, org.osgi.service.component
        package</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.876in" contentwidth="7.000in" fileref="component-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Synopsis</title>

      <para>The Service Component Runtime reads component descriptions from
      started bundles. These descriptions are in the form of XML documents
      which define a set of components for a bundle. A component can refer to
      a number of services that must be available before a component
      configuration becomes satisfied. These dependencies are defined in the
      descriptions and the specific target services can be influenced by
      configuration information in the Configuration Admin service. After a
      component configuration becomes satisfied, a number of different
      scenarios can take place depending on the component type:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Immediate Component</emphasis> - The component
          configuration of an immediate component must be activated
          immediately after becoming satisfied. Immediate components may
          provide a service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Delayed Component</emphasis> - When a component
          configuration of a delayed component becomes satisfied, SCR will
          register the service specified by the <code>service</code> element
          without activating the component configuration. If this service is
          requested, SCR must activate the component configuration creating an
          instance of the component implementation class that will be returned
          as the service object. If the <code>scope</code> attribute of the
          <code>service</code> element is <code>bundle</code>, then, for each
          distinct bundle that requests the service object, a different
          component configuration is created and activated and a new instance
          of the component implementation class is returned as the service
          object. If the <code>scope</code> attribute of the
          <code>service</code> element is <code>prototype</code>, then, for
          each distinct request for the service object, such as via
          <code>ServiceObjects</code>, a different component configuration is
          created and activated and a new instance of the component
          implementation class is returned as the service object.</para>
        </listitem>

        <listitem>
          <para><emphasis>Factory Component</emphasis> - If a component's
          description specifies the <code>factory</code> attribute of the
          <code>component</code> element, SCR will register a Component
          Factory service. This service allows client bundles to create and
          activate multiple component configurations and dispose of them. If
          the component's description also specifies a <code>service</code>
          element, then as each component configuration is activated, SCR will
          register it as a service.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Readers</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Architects</emphasis> - The chapter, <xref linkend="i1479629"/>, gives a comprehensive introduction to the
          capabilities of the component model. It explains the model with a
          number of examples. The section about <xref linkend="i1545305"/>
          provides some deeper insight in the life cycle of components.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service Programmers</emphasis> - Service programmers
          should read <xref linkend="i1479629"/>. This chapter should suffice
          for the most common cases. For the more advanced possibilities, they
          should consult <xref linkend="i1524140"/> for the details of the XML
          grammar for component descriptions.</para>
        </listitem>

        <listitem>
          <para><emphasis>Deployers</emphasis> - Deployers should consult
          <xref linkend="service.component-deployment"/>.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="i1479629">
    <title>Components</title>

    <para>A component is a normal Java class contained within a bundle. The
    distinguishing aspect of a component is that it is
    <emphasis>declared</emphasis> in an XML document. Component configurations
    are activated and deactivated under the full control of SCR. SCR bases its
    decisions on the information in the component's description. This
    information consists of basic component information like the name and
    type, optional services that are implemented by the component, and
    <emphasis>references</emphasis>. References are dependencies that the
    component has on other services.</para>

    <para>SCR must <emphasis>activate</emphasis> a component configuration
    when the component is enabled and the component configuration is satisfied
    and a component configuration is needed. During the life time of a
    component configuration, SCR can notify the component of changes in its
    bound references.</para>

    <para>SCR will <emphasis>deactivate </emphasis>a previously activated
    component configuration when the component becomes disabled, the component
    configuration becomes unsatisfied, or the component configuration is no
    longer needed.</para>

    <para>If an activated component configuration's configuration properties
    change, SCR must either notify the component configuration of the change,
    if the component description specifies a method to be notified of such
    changes, or deactivate the component configuration and then attempt to
    reactivate the component configuration using the new configuration
    information.</para>

    <section>
      <title>Declaring a Component</title>

      <para>A component requires the following artifacts in the bundle:</para>

      <itemizedlist>
        <listitem>
          <para>An XML document that contains the component
          description.</para>
        </listitem>

        <listitem>
          <para>The <code>Service-Component</code> manifest header which names
          the XML documents that contain the component descriptions.</para>
        </listitem>

        <listitem>
          <para>An implementation class that is specified in the component
          description.</para>
        </listitem>
      </itemizedlist>

      <para>The elements in the component's description are defined in <xref linkend="i1524140"/>. The XML grammar for the component declaration is
      defined by the XML Schema, see <xref linkend="i1523991"/>.</para>
    </section>

    <section>
      <title>Immediate Component</title>

      <para>An <emphasis>immediate component</emphasis> is activated as soon
      as its dependencies are satisfied. If an immediate component has no
      dependencies, it is activated immediately. A component is an immediate
      component if it is not a factory component and either does not specify a
      service or specifies a service and the <code>immediate</code> attribute
      of the <code>component</code> element set to <code>true</code>. If an
      immediate component configuration is satisfied and specifies a service,
      SCR must register the component configuration as a service in the
      service registry and then activate the component configuration.</para>

      <para>For example, the bundle entry <code>/OSGI-INF/activator.xml</code>
      contains:</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;scr:component name="example.activator"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
    &lt;implementation class="com.acme.impl.Activator"/&gt;
&lt;/scr:component&gt;</programlisting>

      <para>The manifest header <code>Service-Component</code> must also be
      specified in the bundle manifest. For example:</para>

      <programlisting>Service-Component: OSGI-INF/activator.xml</programlisting>

      <para>An example class for this component could look like:</para>

      <programlisting>public class Activator {
    public Activator() {...}
    private void activate(BundleContext context) {...}
    private void deactivate() {...}  
}</programlisting>

      <para>This example component is virtually identical to a Bundle
      Activator. It has no references to other services so it will be
      satisfied immediately. It publishes no service so SCR will activate a
      component configuration immediately.</para>

      <para>The <code>activate</code> method is called when SCR activates the
      component configuration and the <code>deactivate</code> method is called
      when SCR deactivates the component configuration. If the
      <code>activate</code> method throws an Exception, then the component
      configuration is not activated and will be discarded.</para>
    </section>

    <section xml:id="i1613408">
      <title>Delayed Component</title>

      <para>A <emphasis>delayed component</emphasis> specifies a service, is
      not specified to be a factory component and does not have the
      <code>immediate</code> attribute of the <code>component</code> element
      set to <code>true</code>. If a delayed component configuration is
      satisfied, SCR must register the component configuration as a service in
      the service registry but the activation of the component configuration
      is delayed until the registered service is requested. The registered
      service of a delayed component looks like a normal registered service
      but does not incur the overhead of an ordinarily registered service that
      require a service's bundle to be initialized to register the
      service.</para>

      <para>For example, a bundle needs to see events of a specific topic. The
      Event Admin uses the white board pattern, receiving the events is
      therefore as simple as registering a Event Handler service. The example
      XML for the delayed component looks like:</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;scr:component name="example.handler"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
    &lt;implementation class="com.acme.impl.HandlerImpl"/&gt;
    &lt;property name="event.topics"&gt;some/topic&lt;/property&gt;
    &lt;service&gt; 
        &lt;provide interface="org.osgi.service.event.EventHandler"/&gt; 
    &lt;/service&gt;
&lt;/scr:component&gt;</programlisting>

      <para>The associated component class looks like:</para>

      <programlisting>public class HandlerImpl implements EventHandler{
    public void handleEvent(Event evt ) {
        ...
  }
}</programlisting>

      <para>The component configuration will only be activated once the Event
      Admin service requires the service because it has an event to deliver on
      the topic to which the component subscribed.</para>
    </section>

    <section xml:id="i1461154">
      <title>Factory Component</title>

      <para>Certain software patterns require the creation of component
      configurations on demand. For example, a component could represent an
      application that can be launched multiple times and each application
      instance can then quit independently. Such a pattern requires a factory
      that creates the instances. This pattern is supported with a
      <emphasis>factory component</emphasis>. A factory component is used if
      the <code>factory</code> attribute of the <code>component</code> element
      is set to a <emphasis>factory identifier</emphasis>. This identifier can
      be used by a bundle to associate the factory with externally defined
      information.</para>

      <para>SCR must register a Component Factory service on behalf of the
      component as soon as the component factory is satisfied. The service
      properties must be:</para>

      <itemizedlist>
        <listitem>
          <para><code>component.name</code> - The name of the
          component.</para>
        </listitem>

        <listitem>
          <para><code>component.factory</code> - The factory
          identifier.</para>
        </listitem>
      </itemizedlist>

      <para>The service properties of the Component Factory service must not
      include the component properties.</para>

      <para>New configurations of the component can be created and activated
      by calling the <code>newInstance</code> method on this Component Factory
      service. The <xref linkend="org.osgi.service.component.ComponentFactory.newInstance-Dictionary-" xrefstyle="hyperlink"/> method has a <code>Dictionary</code> object as
      argument. This Dictionary object is merged with the component properties
      as described in <xref linkend="service.component-component.properties"/>. If the component
      specifies a service, then the service is registered after the created
      component configuration is satisfied with the component properties. Then
      the component configuration is activated.</para>

      <para>For example, a component can provide a connection to a USB device.
      Such a connection should normally not be shared and should be created
      each time such a service is needed. The component description to
      implement this pattern looks like:</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;scr:component name="example.factory"
    factory="usb.connection"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
    &lt;implementation class="com.acme.impl.USBConnectionImpl"/&gt;
&lt;/scr:component&gt;</programlisting>

      <para>The component class looks like:</para>

      <programlisting>public class USBConnectionImpl implements USBConnection {
    private void activate(Map&lt;String, ?&gt; properties) {
     ...
    }
}</programlisting>

      <para>A factory component can be associated with a service. In that
      case, such a service is registered for each component configuration. For
      example, the previous example could provide a USB Connection
      service.</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;scr:component name="example.factory"    
    factory="usb.connection"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
    &lt;implementation class="com.acme.impl.USBConnectionImpl"/&gt;
    <emphasis role="underline">&lt;service&gt;</emphasis>
        &lt;provide interface="com.acme.usb.USBConnection"/&gt;
    &lt;/service&gt;
&lt;/scr:component&gt;</programlisting>

      <para>The associated component class looks like:</para>

      <programlisting>public class USBConnectionImpl implements USBConnection {
    private void activate(Map&lt;String, ?&gt; properties) {...}
    public void connect() { ... }
    ...
    public void close() { ... }
}</programlisting>

      <para>A new service will be registered each time a new component
      configuration is created and activated with the <code>newInstance</code>
      method. This allows a bundle other than the one creating the component
      configuration to utilize the service. If the component configuration is
      deactivated, the service must be unregistered.</para>
    </section>
  </section>

  <section>
    <title>References to Services</title>

    <para>Most bundles will require access to other services from the service
    registry. The dynamics of the service registry require care and attention
    of the programmer because referenced services, once acquired, could be
    unregistered at any moment. The component model simplifies the handling of
    these service dependencies significantly.</para>

    <para>The services that are selected by a reference are called the
    <emphasis>target services</emphasis>. These are the services selected by
    the <code>BundleContext.getServiceReferences</code> method where the first
    argument is the reference's interface and the second argument is the
    reference's target property, which must be a valid filter.</para>

    <para>A component configuration becomes <emphasis>satisfied</emphasis>
    when each specified reference is satisfied. A reference is
    <emphasis>satisfied</emphasis> if it specifies optional cardinality or
    when the number of target services is equal to or more than the minimum
    cardinality of the reference. An activated component configuration that
    becomes <emphasis>unsatisfied</emphasis> must be deactivated.</para>

    <para>During the activation of a component configuration, SCR must bind
    some or all of the target services of a reference to the component
    configuration. Any target service that is bound to the component
    configuration is called a <emphasis>bound</emphasis> service. See <xref linkend="i1536739"/>.</para>

    <section xml:id="i1548427">
      <title>Accessing Services</title>

      <para>A component instance must be able to use the services that are
      referenced by the component configuration, that is, the bound services
      of the references. The following strategies are available for a
      component instance to acquire these bound services:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Event strategy</emphasis> - SCR calls a method on
          the component instance when a service becomes bound, when a service
          becomes unbound, or when its properties are updated. These methods
          are the bind, updated, and unbind methods specified by the
          reference. The event strategy is useful if the component needs to be
          notified of changes to the bound services for a dynamic
          reference.</para>
        </listitem>

        <listitem>
          <para><emphasis>Field strategy</emphasis> - SCR modifies a field in
          the component instance when a service becomes bound, when a service
          becomes unbound, or when its properties are updated.</para>
        </listitem>

        <listitem>
          <para><emphasis>Lookup strategy</emphasis> - The component instance
          can use one of the <code>locateService</code> methods of <xref linkend="org.osgi.service.component.ComponentContext" xrefstyle="hyperlink"/> to locate a bound service. These methods
          take the <code>name</code> of the reference as a parameter. If the
          reference has a dynamic policy, it is important to not store
          returned service objects but look them up every time they are
          needed.</para>
        </listitem>
      </itemizedlist>

      <para>A component may use multiple strategies to access the bound
      services of a reference.</para>
    </section>

    <section xml:id="service.component-event.methods">
      <title>Event Methods</title>

      <para>When using the event strategy, SCR must callback the component
      instance at the appropriate time. SCR must callback on the following
      events:</para>

      <itemizedlist>
        <listitem>
          <para><code>bind</code> - The bind method, if specified, is called
          to bind a new service to the component that matches the selection
          criteria. If the <code>policy</code> is <code>dynamic</code> then
          the bind method of a replacement service can be called before its
          corresponding unbind method.</para>
        </listitem>

        <listitem>
          <para><code>updated</code> - The updated method, if specified, is
          called when the service properties of a bound services are modified
          and the resulting properties do not cause the service to become
          unbound because it is no longer selected by the target
          property.</para>
        </listitem>

        <listitem>
          <para><code>unbind</code> - The unbind method, if specified, is
          called when SCR needs to unbind the service.</para>
        </listitem>
      </itemizedlist>

      <para>Each event is associated with an <emphasis>event
      method</emphasis>. The prototype of the event methods is:</para>

      <programlisting>void &lt;method-name&gt;(&lt;arguments&gt;);</programlisting>

      <para>An event method can take one or more arguments. Each argument must
      be of one of the following types:</para>

      <itemizedlist>
        <listitem>
          <para><code>&lt;service-type&gt;</code> - The bound service
          object.</para>
        </listitem>

        <listitem>
          <para><code>ServiceReference</code> - A Service Reference for the
          bound service. This Service Reference may later be passed to the
          <xref linkend="org.osgi.service.component.ComponentContext.locateService-String-ServiceReference-" xrefstyle="hyperlink"/> method to obtain the actual service object.
          This approach is useful when the service properties need to be
          examined before accessing the service object. It also allows for the
          delayed activation of bound services when using the event
          strategy.</para>
        </listitem>

        <listitem>
          <para><code>ComponentServiceObjects</code> - A Component Service
          Objects for the bound service. This Component Service Objects can be
          used to obtain the actual service object or objects. This approach
          is useful when the referenced service has prototype service scope
          and the component instance needs multiple service objects for the
          service.</para>
        </listitem>

        <listitem>
          <para><code>Map</code> - An unmodifiable Map containing the service
          properties of the bound service. This Map must additionally
          implement <code>Comparable</code> with the <code>compareTo</code>
          method comparing service property maps using the same ordering as
          <code>ServiceReference.compareTo</code> based upon service ranking
          and service id.</para>
        </listitem>
      </itemizedlist>

      <para>A suitable method is selected using the following priority:</para>

      <orderedlist>
        <listitem>
          <para>The method takes a single argument and the type of the
          argument is <code>org.osgi.framework.ServiceReference</code>. This
          method will receive a Service Reference for the bound
          service.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is <xref linkend="org.osgi.service.component.ComponentServiceObjects" xrefstyle="hyperlink"/>. This method will receive a Component
          Service Objects for the bound service.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is the type specified by the reference's
          <code>interface</code> attribute. This method will receive the bound
          service object.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is assignable from the type specified by the reference's
          <code>interface</code> attribute. If multiple methods match this
          rule, this implies the method name is overloaded and SCR may choose
          any of the methods to call. This method will receive the bound
          service object.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is <code>java.util.Map</code>. This method will receive an
          unmodifiable Map containing the service properties of the bound
          service.</para>
        </listitem>

        <listitem>
          <para>The method takes two or more arguments and the types of the
          arguments must be one of: the type specified by the reference's
          <code>interface</code> attribute, a type assignable from the type
          specified by the reference's <code>interface</code> attribute,
          <code>org.osgi.framework.ServiceReference</code>, <xref linkend="org.osgi.service.component.ComponentServiceObjects" xrefstyle="hyperlink"/>, or <code>java.util.Map</code>. If multiple
          methods match this rule, this implies the method name is overloaded
          and SCR may choose any of the methods to call. In the case where the
          type specified by the reference's <code>interface</code> attribute
          is <code>org.osgi.framework.ServiceReference</code>, <xref linkend="org.osgi.service.component.ComponentServiceObjects" xrefstyle="hyperlink"/>, or <code>java.util.Map</code>, the first
          argument of that type will receive the bound service object. If
          selected event method has more than one argument of that type, the
          remaining arguments of that type will receive a Service Reference
          for the bound service, a Service Objects for the bound service, or
          an unmodifiable Map containing the service properties of the bound
          service.</para>
        </listitem>
      </orderedlist>

      <para>When searching for an event method to call, SCR must locate a
      suitable method as specified in <xref linkend="i1641644"/>. If no
      suitable method is located, SCR must log an error message with the Log
      Service, if present, and there will be no bind, updated, or unbind
      notification.</para>

      <para>The bind and unbind methods must be called once for each bound
      service. This implies that if the reference has multiple cardinality,
      then the methods may be called multiple times. The updated method can be
      called multiple times per service.</para>

      <para>In the following examples, a component requires the Log Service.
      The first example uses the lookup strategy. The reference is declared
      without any bind, updated, and unbind methods:</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;scr:component name="example.listen"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
    &lt;implementation class="com.acme.impl.LogLookupImpl"/&gt;
    &lt;reference name="LOG"
        interface="org.osgi.service.log.LogService"/&gt;
&lt;/scr:component&gt;</programlisting>

      <para>The component implementation class must now lookup the service.
      This looks like:</para>

      <programlisting>public class LogLookupImpl {
    private void activate(ComponentContext ctxt) {
        LogService log = (LogService)
            ctxt.locateService("LOG");
        log.log(LogService.LOG_INFO, "Hello Components!"));
    }
}</programlisting>

      <para>Alternatively, the component could use the event strategy and ask
      to be notified with the Log Service by declaring bind, updated, and
      unbind methods.</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;scr:component name="example.listen"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
    &lt;implementation class="com.acme.impl.LogEventImpl"/&gt;
    &lt;reference name="LOG"
        interface="org.osgi.service.log.LogService"
        bind="setLog"
        updated="updatedLog"
        unbind="unsetLog"
    /&gt;
&lt;/scr:component&gt;</programlisting>

      <para>The component implementation class looks like:</para>

      <programlisting>public class LogEventImpl {
    LogService log;
    Integer    level;
    void setLog( LogService l, Map&lt;String,?&gt; ref ) {
        log = l;
        updatedLog(ref);
    }
    void updatedLog( LogService l, Map&lt;String,?&gt; ref) {
        level = (Integer) ref.get("level");
    }
    void unsetLog( LogService l ) { log = null; }

    private void activate() {
        log.log(LogService.LOG_INFO, "Hello Components!"));
    }
}</programlisting>

      <para>Event methods can be declared private in the component class but
      are only looked up in the inheritance chain when they are protected,
      public, or have default access. See <xref linkend="i1641644"/>.</para>
    </section>

    <section xml:id="service.component-field.strategy">
      <title>Field Strategy</title>

      <para>When using the field strategy, SCR must modify fields in the
      component instance at the appropriate time. SCR must modify the fields
      on the following events:</para>

      <itemizedlist>
        <listitem>
          <para><code>bind</code> - The field is modified to bind a new
          service to the component that matches the selection criteria.</para>
        </listitem>

        <listitem>
          <para><code>updated</code> - For certain field types, the field is
          modified when the service properties of a bound services are
          modified and the resulting properties do not cause the service to
          become unbound because it is no longer selected by the target
          property.</para>
        </listitem>

        <listitem>
          <para><code>unbind</code> - The field is modified when SCR needs to
          unbind the service.</para>
        </listitem>
      </itemizedlist>

      <para>For a reference with unary cardinality, a field must be of one of
      the following types:</para>

      <itemizedlist>
        <listitem>
          <para><code>&lt;service-type&gt;</code> - The bound service object.
          The type of the field can be the actual service type or it can be a
          type that is assignable from the actual service type.</para>
        </listitem>

        <listitem>
          <para><code>ServiceReference</code> - A Service Reference for the
          bound service. This Service Reference may later be passed to the
          <xref linkend="org.osgi.service.component.ComponentContext.locateService-String-ServiceReference-" xrefstyle="hyperlink"/> method to obtain the actual service object.
          This approach is useful when the service properties need to be
          examined before accessing the service object. It also allows for the
          delayed activation of bound services when using field
          strategy.</para>
        </listitem>

        <listitem>
          <para><code>ComponentServiceObjects</code> - A Component Service
          Objects for the bound service. This Component Service Objects can be
          used to obtain the actual service object or objects. This approach
          is useful when the referenced service has prototype service scope
          and the component instance needs multiple service objects for the
          service.</para>
        </listitem>

        <listitem>
          <para><code>Map</code> - An unmodifiable Map containing the service
          properties of the bound service. This Map must additionally
          implement <code>Comparable</code> with the <code>compareTo</code>
          method comparing service property maps using the same ordering as
          <code>ServiceReference.compareTo</code> based upon service ranking
          and service id.</para>
        </listitem>

        <listitem>
          <para><code>Map.Entry</code> - An unmodifiable Map.Entry whose key
          is an unmodifiable Map containing the service properties of the
          bound service, as above, and whose value is the bound service
          object. This Map.Entry must additionally implement
          <code>Comparable</code> with the <code>compareTo</code> method
          comparing the service property map key using the same ordering as
          <code>ServiceReference.compareTo</code> based upon service ranking
          and service id.</para>
        </listitem>
      </itemizedlist>

      <para>If the actual service type is one of
      <code>ServiceReference</code>, <code>ComponentServiceObjects</code>,
      <code>Map</code>, or <code>Map.Entry</code>, the field will be set to
      the service object rather than the object about the service.</para>

      <para>For a reference with multiple cardinality, a field must be a
      collection of one of the following types:</para>

      <itemizedlist>
        <listitem>
          <para><code>Collection</code></para>
        </listitem>

        <listitem>
          <para><code>List</code></para>
        </listitem>

        <listitem>
          <para>A subtype of <code>Collection</code> - This type can only be
          used for dynamic references using the <code>update</code> reference
          field option. The component instance must initialize the field to a
          collection object in its constructor.</para>
        </listitem>
      </itemizedlist>

      <para>The type of objects set in the collection are specified by the
      <code>field-collection-type</code> attribute in the component
      description:</para>

      <itemizedlist>
        <listitem>
          <para><code>service</code> - The bound service object. This is the
          default field collection type.</para>
        </listitem>

        <listitem>
          <para><code>reference</code> - A Service Reference for the bound
          service.</para>
        </listitem>

        <listitem>
          <para><code>serviceobjects</code> - A Component Service Objects for
          the bound service.</para>
        </listitem>

        <listitem>
          <para><code>properties</code> - An unmodifiable Map containing the
          service properties of the bound service. This Map must implement
          <code>Comparable</code>, as above.</para>
        </listitem>

        <listitem>
          <para><code>tuple</code> - An unmodifiable Map.Entry whose key is an
          unmodifiable Map containing the service properties of the bound
          service, as above, and whose value is the bound service object. This
          Map.Entry must implement <code>Comparable</code>, as above.</para>
        </listitem>
      </itemizedlist>

      <para>Only instance fields of the field types above are supported. If a
      referenced field is declared with the <code>static</code> modifier or
      has a type other than one of the above, SCR must log an error message
      with the Log Service, if present, and the field must not be
      modified.</para>

      <para>Care must be taken by the component implementation regarding the
      field. SCR has no way to know if the component implementation itself may
      alter the field value. The component implementation should not alter the
      field value and allow SCR to manage it. SCR must treat the field as if
      the component implementation does not alter the field value so SCR may
      retain its own copy of the value set in the field.</para>

      <para>In the following examples, a component requires the Log
      Service.</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;scr:component name="example.listen"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
    &lt;implementation class="com.acme.impl.LogEventImpl"/&gt;
    &lt;reference name="LOG"
        interface="org.osgi.service.log.LogService"
        field="log"
    /&gt;
&lt;/scr:component&gt;</programlisting>

      <para>The component implementation class looks like:</para>

      <programlisting>public class LogEventImpl {
    LogService log;
    private void activate() {
        log.log(LogService.LOG_INFO, "Hello Components!"));
    }
}</programlisting>

      <para>Fields can be declared private in the component class but are only
      looked up in the inheritance chain when they are protected, public, or
      have default access. See <xref linkend="i1641644"/>.</para>
    </section>

    <section xml:id="service.component-reference.cardinality">
      <title>Reference Cardinality</title>

      <para>A component implementation is always written with a certain
      <emphasis>cardinality</emphasis> for each reference in mind. The
      cardinality represents two important concepts:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Multiplicity</emphasis> - Does the component
          implementation assume a single service or does it explicitly handle
          multiple services? For example, when a component uses the Log
          Service, it only needs to bind to one Log Service to function
          correctly. Alternatively, when the Configuration Admin uses the
          Configuration Listener services it needs to bind to all target
          services present in the service registry to dispatch its events
          correctly.</para>
        </listitem>

        <listitem>
          <para><emphasis>Optionality</emphasis> - Can the component function
          without any bound service present? Some components can still perform
          useful tasks even when no service is available; other components
          must bind to at least one service before they can be useful. For
          example, the Configuration Admin in the previous example must still
          provide its functionality even if there are no Configuration
          Listener services present. Alternatively, an application that
          registers a Servlet with the Http Service has little to do when the
          Http Service is not present, it should therefore use a reference
          with a mandatory cardinality.</para>
        </listitem>
      </itemizedlist>

      <para>The cardinality is expressed with the following syntax:</para>

      <programlisting>cardinality  ::= optionality '..' multiplicity
optionality  ::= '0' | '1'
multiplicity ::= '1' | 'n'</programlisting>

      <para>The cardinality for a reference can be specified as one of four
      choices:</para>

      <itemizedlist>
        <listitem>
          <para><code>0..1</code> - Optional and unary.</para>
        </listitem>

        <listitem>
          <para><code>1..1</code> - Mandatory and unary (Default) .</para>
        </listitem>

        <listitem>
          <para><code>0..n</code> - Optional and multiple.</para>
        </listitem>

        <listitem>
          <para><code>1..n</code> - Mandatory and multiple.</para>
        </listitem>
      </itemizedlist>

      <para>The <emphasis>minimum cardinality</emphasis> is specified by the
      optionality part of the cardinality. This is either <code>0</code> or
      <code>1</code>. A minimum cardinality property can be used to raise the
      minimum cardinality of a reference from this initial value. For example,
      a <code>0..n</code> cardinality in the component description can be
      raised into a <code>3..n</code> cardinality at runtime by setting the
      minimum cardinality property for the reference to <code>3</code>. This
      would typically be done by a deployer setting the minimum cardinality
      property in a configuration for the component. The minimum cardinality
      for a unary cardinality cannot exceed <code>1</code>. See <xref linkend="service.component-minimum.cardinality.property"/> for more
      information.</para>

      <para>A reference is <emphasis>satisfied</emphasis> if the number of
      target services is equal to or more than the minimum cardinality. The
      <code>multiplicity</code> is irrelevant for the satisfaction of the
      reference. The <code>multiplicity</code> only specifies if the component
      implementation is written to handle being bound to multiple services
      (<code>n</code>) or requires SCR to select and bind to a single service
      (<code>1</code>).</para>

      <para>When a satisfied component configuration is activated, there must
      be at most one bound service for each reference with a unary cardinality
      and at least as many bound services as the minimum cardinality for each
      reference. If the cardinality constraints cannot be maintained after a
      component configuration is activated, that is the reference becomes
      unsatisfied, the component configuration must be deactivated. If the
      reference has a unary cardinality and there is more than one target
      service for the reference, then the bound service must be the target
      service with the highest service ranking as specified by the
      <code>service.ranking</code> property. If there are multiple target
      services with the same service ranking, then the bound service must be
      the target service with the highest service ranking and the lowest
      service id as specified by the <code>service.id</code> property.</para>

      <para>In the following example, a component wants to register a resource
      with all Http Services that are available. Such a scenario has the
      cardinality of <code>0..n</code>. The code must be prepared to handle
      multiple calls to the bind method for each Http Service in such a case.
      In this example, the code uses the <code>registerResources</code> method
      to register a directory for external access.</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;scr:component name="example.listen"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
    &lt;implementation class="com.acme.impl.HttpResourceImpl"/&gt;
    &lt;reference name="HTTP"
        interface="org.osgi.service.http.HttpService"
        cardinality="0..n"
        bind="setPage"
        unbind="unsetPage"
    /&gt;
&lt;/scr:component&gt;

public class HttpResourceImpl {
    private void setPage(HttpService http) {
        http.registerResources("/scr", "scr", null );
    }
    private void unsetPage(HttpService http) {
        http.unregister("/scr");
    }
}</programlisting>
    </section>

    <section xml:id="service.component-reference.scope">
      <title>Reference Scope</title>

      <para>A component implementation must be written to understand the
      service scope of referenced services. The <emphasis>reference
      scope</emphasis> defines whether the component expects the bundle to be
      exposed to a single service object for a bound service or to potentially
      multiple services objects. The following reference scopes are
      available:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>bundle</emphasis> - For all references to a given
          bound service, all activated component instances within a bundle
          must use the same service object. That is, for a given bound
          service, all component instances within a bundle will be using the
          same service object. This is the default reference scope.</para>
        </listitem>

        <listitem>
          <para><emphasis>prototype</emphasis> - For all references to a given
          bound service, each activated component instance may use a single,
          distinct service object. That is, for a given bound service, each
          component instance may use a distinct service object but within a
          component instance all references to the bound service will use the
          same service object.</para>
        </listitem>

        <listitem>
          <para><emphasis>prototype_required</emphasis> - For all references
          to a given bound service, each activated component instance must use
          a single, distinct service object. That is, for a given bound
          service, each component instance will use a distinct service object
          but within a component instance all references to the bound service
          will use the same service object.</para>
        </listitem>
      </itemizedlist>

      <para>For a bound service of a reference with bundle reference scope,
      SCR must get the service object from the OSGi Framework's service
      registry using the <code>getService</code> method on the component's
      Bundle Context. If the service object for a bound service has been
      obtained and the service becomes unbound, SCR must unget the service
      object using the <code>ungetService</code> method on the component's
      Bundle Context and discard all references to the service object. This
      ensures that the bundle will only be exposed to a single instance of the
      service object at any given time.</para>

      <para>For a bound service of a reference with prototype or prototype
      required reference scope, SCR must use a Service Objects object obtained
      from the OSGi Framework's service registry using the component's Bundle
      Context to get any service objects. If service objects for a bound
      service have been obtained and the service becomes unbound, SCR must
      unget any unreleased service objects using the Service Objects object
      obtained from the OSGi Framework's service registry using the
      component's Bundle Context. This means that if a component instance used
      a Component Service Objects object to obtain service objects, SCR must
      track those service objects so that when the service becomes unbound,
      SCR can unget any unreleased service objects.</para>

      <para>Additionally, for a bound service of a reference with prototype
      required reference scope, only services registered with prototype
      service scope can be considered as target services. This ensures that
      each component instance can be exposed to a single, distinct instance of
      the service object. Using prototype required reference scope effectively
      adds <code>service.scope=prototype</code> to the target property for the
      reference. A service that does not use prototype service scope cannot be
      used as a bound service for a reference with prototype required
      reference scope since the service cannot provide a distinct service
      object for each component instance.</para>
    </section>

    <section xml:id="i1440474">
      <title>Reference Policy</title>

      <para>Once all the references of a component are satisfied, a component
      configuration can be activated and therefore bound to target services.
      However, the dynamic nature of the OSGi service registry makes it likely
      that services are registered, modified and unregistered after target
      services are bound. These changes in the service registry could make one
      or more bound services no longer a target service thereby making
      obsolete any object references that the component has to these service
      objects. Components therefore must specify a <emphasis>policy
      </emphasis>how to handle these changes in the set of bound services. A
      <emphasis>policy-option</emphasis> can further refine how changes affect
      bound services.</para>

      <section>
        <title>Static Reference Policy</title>

        <para>The <emphasis>static policy</emphasis> is the most simple policy
        and is the default policy. A reference with a static policy is called
        a <emphasis>static reference</emphasis>. A component instance never
        sees any of the dynamics of the static reference. The bind method is
        called and/or the field is set before the component instance is
        activated. Component configurations are deactivated before any bound
        service for the static reference becomes unavailable. If a target
        service is available to replace the bound service which became
        unavailable, the component configuration must be reactivated and the
        replacement service is bound to the new component instance.</para>

        <para>If the <code>policy-option</code> is <code>reluctant</code> then
        the registration of an additional target service for a reference must
        not result in deactivating and reactivating a component configuration.
        If the <code>policy-option</code> is <code>greedy</code> then the
        component configuration must be reactivated when new applicable
        services become available. See <xref linkend="service.component-policy.option.action" xrefstyle="template:Table %n on page %p"/>.</para>

        <para>If a static reference specifies an updated method and the bound
        service's properties change, SCR must call the updated method.</para>

        <para>The static policy can be very expensive if it depends on
        services that frequently unregister and re-register or if the cost of
        activating and deactivating a component configuration is high. Static
        policy is usually also not applicable if the cardinality specifies
        multiple bound services.</para>
      </section>

      <section>
        <title>Dynamic Reference Policy</title>

        <para>The <emphasis>dynamic policy</emphasis> is slightly more complex
        since the component implementation must properly handle changes in the
        set of bound services that can occur on any thread at any time after
        the component instance is created. A reference with a dynamic policy
        is called a <emphasis>dynamic reference</emphasis>. With the dynamic
        policy, SCR can change the set of bound services without deactivating
        a component configuration. If the component uses the event strategy to
        access services, then the component instance will be notified of
        changes in the set of bound services by calls to the bind, updated,
        and unbind methods.</para>

        <para>If the <code>policy-option</code> is <code>reluctant</code> then
        a bound reference is not rebound even if a more suitable service
        becomes available for a 1..1 or 0..1 reference. If the
        <code>policy-option</code> is <code>greedy</code> then the component
        must be unbound and rebound for that reference. See <xref linkend="service.component-policy.option.action" xrefstyle="template:Table %n on page %p"/>.</para>

        <para>The previous example with the registering of a resource
        directory used a static policy. This implied that the component
        configurations are deactivated when there is a change in the bound set
        of Http Services. The code in the example can be seen to easily handle
        the dynamics of Http Services that come and go. The component
        description can therefore be updated to:</para>

        <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;scr:component name="example.listen"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
    &lt;implementation class="com.acme.impl.HttpResourceImpl"/&gt;
    &lt;reference name="HTTP"
        interface="org.osgi.service.http.HttpService"
        cardinality="0..n"
        <emphasis role="underline">policy="dynamic"</emphasis>
        bind="setPage"
        unbind="unsetPage"
    /&gt;
&lt;/scr:component&gt;</programlisting>

        <para>The code is identical to the previous example.</para>
      </section>
    </section>

    <section>
      <title>Reference Policy Option</title>

      <para>The reference policy option defines how eager the reference is to
      rebind when a new, potentially a higher ranking, target service becomes
      available. The reference policy option can have the following
      values:</para>

      <itemizedlist>
        <listitem>
          <para><code>reluctant</code> - Minimize rebinding and reactivating.
          This is the default reference policy option.</para>
        </listitem>

        <listitem>
          <para><code>greedy</code> - Maximize the use of the best service by
          deactivating static references or rebinding dynamic
          references.</para>
        </listitem>
      </itemizedlist>

      <para><xref linkend="service.component-policy.option.action"/> defines
      the actions that are taken when a <emphasis>better</emphasis> target
      service becomes available. In this context, better is when the reference
      is not bound or when the new target service has a higher ranking than
      the bound service.</para>

      <table pgwide="1" xml:id="service.component-policy.option.action">
        <title>Action taken for policy-option when a new or higher ranking
        service becomes available</title>

        <tgroup cols="5">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3" colwidth="2*"/>

          <colspec colnum="4" colwidth="2*"/>

          <colspec colnum="5" colwidth="2*"/>

          <thead>
            <row>
              <entry>Cardinality</entry>

              <entry>static reluctant</entry>

              <entry>static greedy</entry>

              <entry>dynamic reluctant</entry>

              <entry>dynamic greedy</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>0..1</code></entry>

              <entry><para>Ignore</para></entry>

              <entry><para>Reactivate to bind the better target
              service.</para></entry>

              <entry><para>If no service is bound, bind to new target service.
              Otherwise, ignore new target service.</para></entry>

              <entry><para>If no service is bound, bind to better target
              service. Otherwise, unbind the bound service and bind the better
              target service.</para></entry>
            </row>

            <row>
              <entry><code>1..1</code></entry>

              <entry><para>Ignore</para></entry>

              <entry><para>Reactivate to bind the better target
              service.</para></entry>

              <entry><para>Ignore</para></entry>

              <entry><para>Unbind the bound service, then bind the new
              service.</para></entry>
            </row>

            <row>
              <entry><code>0..n</code></entry>

              <entry><para>Ignore</para></entry>

              <entry><para>Reactivate</para></entry>

              <entry><para>Bind new target service</para></entry>

              <entry><para>Bind new target service</para></entry>
            </row>

            <row>
              <entry><code>1..n</code></entry>

              <entry><para>Ignore</para></entry>

              <entry><para>Reactivate</para></entry>

              <entry><para>Bind new target service</para></entry>

              <entry><para>Bind new target service</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="service.component-reference.field.option">
      <title>Reference Field Option</title>

      <para>For a reference using field strategy, the reference field option
      defines how SCR must manage the field value. The reference field option
      can have the following values:</para>

      <itemizedlist>
        <listitem>
          <para><code>replace</code> - SCR must set the field value. Any field
          value set by the constructor of the component instance is
          overwritten. This is the default reference field option.</para>
        </listitem>

        <listitem>
          <para><code>update</code> - SCR must update the collection set in
          the field. This collection can be set by the constructor of the
          component instance. This reference field option can only be used for
          a dynamic reference with multiple cardinality.</para>
        </listitem>
      </itemizedlist>

      <para>For a static reference, the replace option must be used.</para>

      <para>For a dynamic reference, the choice of reference field option is
      influenced by the cardinality of the reference. For unary cardinality,
      the replace option must be used. For multiple cardinality, either the
      replace or update option can be used.</para>

      <para>If the update option is used when not permitted, SCR must log an
      error message with the Log Service, if present, and the field must not
      be modified.</para>

      <section>
        <title>Replace Field Option</title>

        <para>If the field is declared with the <code>final</code> modifier,
        SCR must log an error message with the Log Service, if present, and
        the field must not be modified.</para>

        <para>For a static reference, SCR must set the value of the field
        before the component instance is activated and must not change the
        field while the component is active. This means there is a
        <emphasis>happens-before</emphasis> relationship between setting the
        field and activating the component instance, so the active component
        can safely read the field.</para>

        <para>For a dynamic reference, the field must be declared with the
        <code>volatile</code> modifier so that field value changes made by SCR
        are visible to other threads. If the field is not declared with the
        <code>volatile</code> modifier, SCR must log an error message with the
        Log Service, if present, and the field must not be modified.</para>

        <para>For a dynamic reference with unary cardinality, SCR must set the
        field with initial bound service, if any, before the component
        instance is activated. When there is a new bound service or the
        service properties of the bound service are modified and the field
        holds service properties, SCR must replace the field value. If the
        reference has optional cardinality and there is no bound service, SCR
        must set the field value to <code>null</code>.</para>

        <para>For a dynamic reference with multiple cardinality, the type of
        the field must be <code>Collection</code> or <code>List</code>. If the
        field has a different type, SCR must log an error message with the Log
        Service, if present, and the field must not be modified. Before the
        component instance is activated, SCR must set the field with a new
        mutable collection that must contain the initial set of bound services
        sorted using the same ordering as
        <code>ServiceReference.compareTo</code> based upon service ranking and
        service id. The new collection may be empty if the reference has
        optional cardinality and there are no bound services. When there is a
        change in the set of bound services or the service properties of a
        bound service are modified and the collection holds service
        properties, SCR must replace the field value with a new mutable
        collection that must contain the updated set of bound services sorted
        using the same ordering as <code>ServiceReference.compareTo</code>
        based upon service ranking and service id. The new collection may be
        empty if the reference has optional cardinality and there are no bound
        services.</para>
      </section>

      <section>
        <title>Update Field Option</title>

        <para>The update option can only be used for a dynamic reference with
        multiple cardinality. The component's constructor can set the field
        with its choice of collection implementation. In this case, the field
        can be declared with the <code>final</code> modifier. The collection
        implementation used by the component should use identity rather than
        <code>equals</code> or <code>hashCode</code> to manage the elements of
        the collection. The collection implementation should also be
        thread-safe since SCR may update the collection from threads different
        than those used by the component instance.</para>

        <para>After constructing the component instance, if the field value is
        <code>null</code>:</para>

        <itemizedlist>
          <listitem>
            <para>If the type of the field is <code>Collection</code> or
            <code>List</code>, SCR will set the field to a new mutable empty
            collection or list object, respectively. If the field is declared
            with the <code>final</code> modifier, SCR must log an error
            message with the Log Service, if present, and the field must not
            be modified.</para>
          </listitem>

          <listitem>
            <para>Otherwise, SCR must log an error message with the Log
            Service, if present, and the field must not be modified.</para>
          </listitem>
        </itemizedlist>

        <para>SCR must not change the field value while the component is
        active and only update the contents of the collection. SCR must update
        the collection before the component instance is activated by calling
        <code>Collection.add</code> for each bound service. When there is a
        change to the set of bound services:</para>

        <itemizedlist>
          <listitem>
            <para>SCR must call <code>Collection.add</code> for a newly bound
            service.</para>
          </listitem>

          <listitem>
            <para>SCR must call <code>Collection.remove</code> for an unbound
            service.</para>
          </listitem>

          <listitem>
            <para>If the service properties of a bound service are modified
            and the collection holds service properties, SCR must call
            <code>Collection.add</code> for the replacement element followed
            by <code>Collection.remove</code> for the old element.</para>
          </listitem>
        </itemizedlist>

        <para>The collection may be empty if the reference has optional
        cardinality and there are no bound services.</para>
      </section>
    </section>

    <section xml:id="service.component-selecting.target.services">
      <title>Selecting Target Services</title>

      <para>The target services for a reference are constrained by the
      reference's interface name and target property. By specifying a filter
      in the target property, the programmer and deployer can constrain the
      set of services that should be part of the target services.</para>

      <para>For example, a component wants to track all Component Factory
      services that have a factory identification of
      <code>acme.application</code>. The following component description shows
      how this can be done.</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;scr:component name="example.listen"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
    &lt;implementation class="com.acme.impl.FactoryTracker"/&gt;
    &lt;reference name="FACTORY"
        interface=
            "org.osgi.service.component.ComponentFactory"
        target="(component.factory=acme.application)"
    /&gt;
&lt;/scr:component&gt;</programlisting>

      <para>The filter is manifested as a component property called the
      <emphasis>target property</emphasis>. The target property can also be
      set by <code>property</code> and <code>properties</code> elements, see
      <xref linkend="service.component-property.properties.elements"/>. The
      deployer can also set the target property by establishing a
      configuration for the component which sets the value of the target
      property. This allows the deployer to override the target property in
      the component description. See <xref linkend="service.component-target.property"/> for more
      information.</para>
    </section>

    <section xml:id="i1540789">
      <title>Circular References</title>

      <para>It is possible for a set of component descriptions to create a
      circular dependency. For example, if component <code>A</code> references
      a service provided by component <code>B</code> and component
      <code>B</code> references a service provided by component <code>A</code>
      then a component configuration of one component cannot be satisfied
      without accessing a partially activated component instance of the other
      component. SCR must ensure that a component instance is never accessible
      to another component instance or as a service until it has been fully
      activated, that is it has returned from its <code>activate</code> method
      if it has one.</para>

      <para>Circular references must be detected by SCR when it attempts to
      satisfy component configurations and SCR must fail to satisfy the
      references involved in the cycle and log an error message with the Log
      Service, if present. However, if one of the references in the cycle has
      optional cardinality SCR must break the cycle. The reference with the
      optional cardinality can be satisfied and bound to zero target services.
      Therefore the cycle is broken and the other references may be
      satisfied.</para>
    </section>
  </section>

  <section xml:id="i1524140">
    <title>Component Description</title>

    <para>Component descriptions are defined in XML documents contained in a
    bundle and any attached fragments.</para>

    <para>If SCR detects an error when processing a component description, it
    must log an error message with the Log Service, if present, and ignore the
    component description. Errors can include XML parsing errors and
    ill-formed component descriptions.</para>

    <section>
      <title>Annotations</title>

      <para>A number of <code>CLASS</code> retention annotations have been
      provided to allow tools to construct the component description XML from
      the Java class files. These annotations will be discussed with the
      appropriate elements and attributes. Since the naming rules between XML
      and Java differ, some name changes are necessary.</para>

      <para>Multi-word element and attribute names that use a minus sign
      (<code>'-' \u002D</code>) are changed to camel case. For example, the
      <code>configuration-pid</code> attribute in the <code>component</code>
      element is the <code>configurationPid</code> member in the
      <code>@Component</code> annotation. The annotation class that
      corresponds to an element starts with an upper case letter. For example
      the <code>component</code> element is represented by the
      <code>@Component</code> annotation.</para>

      <para>Some elements do not have a corresponding annotation since the
      annotations can be parameterized by the type information in the Java
      class. For example, the <code>@Component</code> annotation synthesizes
      the <code>implement</code> element's <code>class</code> attribute from
      the type it is applied to.</para>

      <para>See <xref linkend="service.component-component.annotations"/> for
      more information.</para>
    </section>

    <section>
      <title>Service Component Header</title>

      <para>XML documents containing component descriptions must be specified
      by the Service-Component header in the manifest. The value of the header
      is a comma separated list of paths to XML entries within the
      bundle.</para>

      <programlisting>Service-Component ::= header // See Common Header Syntax in Core</programlisting>

      <para>The Service-Component header has no architected directives or
      properties. The header can be left empty.</para>

      <para>The last component of each path in the Service-Component header
      may use wildcards so that <code>Bundle.findEntries</code> can be used to
      locate the XML document within the bundle and its fragments. For
      example:</para>

      <programlisting>Service-Component: OSGI-INF/*.xml</programlisting>

      <para>A Service-Component manifest header specified in a fragment is
      ignored by SCR. However, XML documents referenced by a bundle's
      Service-Component manifest header may be contained in attached
      fragments.</para>

      <para>SCR must process each XML document specified in this header. If an
      XML document specified by the header cannot be located in the bundle and
      its attached fragments, SCR must log an error message with the Log
      Service, if present, and continue.</para>
    </section>

    <section>
      <title>XML Document</title>

      <para>A component description must be in a well-formed XML document,
      <xref linkend="i1636361"/>, stored in a <code>UTF-8</code> encoded
      bundle entry. The namespace for component descriptions is:</para>

      <programlisting>http://www.osgi.org/xmlns/scr/v1.3.0</programlisting>

      <para>The recommended prefix for this namespace is <code>scr</code>.
      This prefix is used by examples in this specification. XML documents
      containing component descriptions may contain a single, root
      <code>component</code> element or one or more <code>component</code>
      elements embedded in a larger document. Use of the namespace for
      component descriptions is mandatory. The attributes and sub-elements of
      a <code>component</code> element are always unqualified.</para>

      <para>If an XML document contains a single, root <code>component</code>
      element which does not specify a namespace, then the
      <code>http://www.osgi.org/xmlns/scr/v1.0.0</code> namespace is assumed.
      Component descriptions using the
      <code>http://www.osgi.org/xmlns/scr/v1.0.0</code> namespace must be
      treated according to version 1.0 of this specification.</para>

      <para>SCR must parse all <code>component</code> elements in the
      namespace. Elements not in this namespace must be ignored. Ignoring
      elements that are not recognized allows component descriptions to be
      embedded in any XML document. For example, an entry can provide
      additional information about components. These additional elements are
      parsed by another sub-system.</para>

      <para>See <xref linkend="i1523991"/> for component description
      schema.</para>
    </section>

    <section xml:id="service.component-component.element">
      <title>Component Element</title>

      <para>The component element specifies the component description. The
      following text defines the structure of the XML grammar using a form
      that is similar to the normal grammar used in OSGi specifications. In
      this case the grammar should be mapped to XML elements:</para>

      <programlisting>&lt;component&gt; ::= (&lt;property&gt; | &lt;properties&gt;)*
                &lt;service&gt;?
                &lt;reference&gt;*
                &lt;implementation&gt;</programlisting>

      <para>SCR must not require component descriptions to specify the
      elements in the order listed above and as required by the XML schema.
      SCR must allow other orderings since arbitrary orderings of these
      elements do not affect the meaning of the component description. Only
      the relative ordering of <code>property</code> and
      <code>properties</code> elements and of <code>reference</code> elements
      have meaning.</para>

      <para>The <code>component</code> element has the attributes and
      <code>@Component</code> annotations defined in the following
      table.</para>

      <table pgwide="1">
        <title>Component Element and Annotations</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Annotation</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>name</code></entry>

              <entry><xref linkend="org.osgi.service.component.annotations.Component.name--" xrefstyle="hyperlink"/></entry>

              <entry><para>The <emphasis>name</emphasis> of a component must
              be unique within a bundle. The component name is used as a PID
              to retrieve component properties from the OSGi Configuration
              Admin service if present, unless a
              <code>configuration-pid</code> attribute has been defined. See
              <xref linkend="service.component-deployment"/> for more
              information. If the component name is used as a PID then it
              should be unique within the framework. The XML schema allows the
              use of component names which are not valid PIDs. Care must be
              taken to use a valid PID for a component name if the component
              should be configured by the Configuration Admin service. This
              attribute is optional. The default value of this attribute is
              the value of the <code>class</code> attribute of the nested
              <code>implementation</code> element. If multiple
              <code>component</code> elements in a bundle use the same value
              for the <code>class</code> attribute of their nested
              <code>implementation</code> element, then using the default
              value for this attribute will result in duplicate component
              names. In this case, this attribute must be specified with a
              unique value.</para></entry>
            </row>

            <row>
              <entry><code>enabled</code></entry>

              <entry><xref linkend="org.osgi.service.component.annotations.Component.enabled--" xrefstyle="hyperlink"/></entry>

              <entry><para>Controls whether the component is
              <emphasis>enabled</emphasis> when the bundle is started. The
              default value is <code>true</code>. If <code>enabled</code> is
              set to <code>false</code>, the component is disabled until the
              method <code>enableComponent</code> is called on the
              <code>ComponentContext</code> object. This allows some
              initialization to be performed by some other component in the
              bundle before this component can become satisfied. See <xref linkend="i1545307"/>.</para></entry>
            </row>

            <row>
              <entry><code>factory</code></entry>

              <entry><xref linkend="org.osgi.service.component.annotations.Component.factory--" xrefstyle="hyperlink"/></entry>

              <entry><para>If set to a non-empty string, it indicates that
              this component is a <emphasis>factory component</emphasis>. SCR
              must register a Component Factory service for each factory
              component. See <xref linkend="i1461154"/>.</para></entry>
            </row>

            <row>
              <entry><code>immediate</code></entry>

              <entry><xref linkend="org.osgi.service.component.annotations.Component.immediate--" xrefstyle="hyperlink"/></entry>

              <entry><para>Controls whether component configurations must be
              immediately activated after becoming satisfied or whether
              activation should be delayed. The default value is
              <code>false</code> if the <code>factory</code> attribute or if
              the <code>service</code> element is specified and
              <code>true</code> otherwise. If this attribute is specified, its
              value must be <code>false</code> if the <code>factory</code>
              attribute is also specified or must be <code>true</code> unless
              the <code>service</code> element is also
              specified.</para></entry>
            </row>

            <row>
              <entry><code>configuration-policy</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Component.configurationPolicy--" xrefstyle="hyperlink"/></para><para><xref linkend="org.osgi.service.component.annotations.ConfigurationPolicy.OPTIONAL" xrefstyle="hyperlink"/></para><para><xref linkend="org.osgi.service.component.annotations.ConfigurationPolicy.REQUIRE" xrefstyle="hyperlink"/></para><para><xref linkend="org.osgi.service.component.annotations.ConfigurationPolicy.IGNORE" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Controls whether component configurations must be
              satisfied depending on the presence of a corresponding
              <code>Configuration</code> object in the OSGi Configuration
              Admin service. A corresponding configuration is a
              <code>Configuration</code> object where the PID is the name of
              the component.</para><itemizedlist>
                  <listitem>
                    <para><code>optional</code> - (default) Use the
                    corresponding <code>Configuration</code> object if present
                    but allow the component to be satisfied even if the
                    corresponding <code>Configuration</code> object is not
                    present.</para>
                  </listitem>

                  <listitem>
                    <para><code>require</code> - There must be a corresponding
                    <code>Configuration</code> object for the component
                    configuration to become satisfied.</para>
                  </listitem>

                  <listitem>
                    <para><code>ignore</code> - Always allow the component
                    configuration to be satisfied and do not use the
                    corresponding <code>Configuration</code> object even if it
                    is present.</para>
                  </listitem>
                </itemizedlist></entry>
            </row>

            <row>
              <entry><code>configuration-pid</code></entry>

              <entry><xref linkend="org.osgi.service.component.annotations.Component.configurationPid--" xrefstyle="hyperlink"/></entry>

              <entry><para>The configuration PIDs to be used for the component
              in conjunction with Configuration Admin. Multiple configuration
              PIDs can be specified by using a whitespace separated list in
              the attribute. The default value for this attribute is the name
              of the component.</para><para>The annotation uses a
              <code>String[]</code> to specify multiple configuration PIDs.
              The order in which configuration PIDs are specified must be
              preserved in the generated component description. The annotation
              can also use the special configuration PID name <link linkend="org.osgi.service.component.annotations.Component.NAME" xrefstyle="hyperlink">"$"</link> to specify the name of the
              component. This special name must be replaced with the actual
              name of the component in the generated component
              description.</para></entry>
            </row>

            <row>
              <entry><code>activate</code></entry>

              <entry><xref linkend="org.osgi.service.component.annotations.Activate" xrefstyle="hyperlink"/></entry>

              <entry><para>Specifies the name of the method to call when a
              component configuration is activated. The default value of this
              attribute is <code>activate</code>. See <xref linkend="i1539155"/> for more information.</para><para>The
              annotation must be applied to the activate method and can only
              be used once.</para></entry>
            </row>

            <row>
              <entry><code>deactivate</code></entry>

              <entry><xref linkend="org.osgi.service.component.annotations.Deactivate" xrefstyle="hyperlink"/></entry>

              <entry><para>Specifies the name of the method to call when a
              component configuration is deactivated. The default value of
              this attribute is <code>deactivate</code>. See <xref linkend="i1576028"/> for more information.</para><para>The
              annotation must be applied to the deactivate method and can only
              be used once.</para></entry>
            </row>

            <row>
              <entry><code>modified</code></entry>

              <entry><xref linkend="org.osgi.service.component.annotations.Modified" xrefstyle="hyperlink"/></entry>

              <entry><para>Specifies the name of the method to call when the
              configuration properties for a component configuration is using
              a <code>Configuration</code> object from the Configuration Admin
              service and that <code>Configuration</code> object is modified
              without causing the component configuration to become
              unsatisfied. If this attribute is not specified, then the
              component configuration will become unsatisfied if its
              configuration properties use a <code>Configuration</code> object
              that is modified in any way. See <xref linkend="i1649781"/> for
              more information.</para><para>The annotation must be applied to
              the modified method and can only be used once.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Implementation Element</title>

      <para>The <code>implementation</code> element is required and defines
      the name of the component implementation class. The single attribute is
      defined in the following table.</para>

      <table pgwide="1">
        <title>Implementation Element and Annotations</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Annotation</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>class</code></entry>

              <entry><xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/></entry>

              <entry><para>The Java fully qualified name of the implementation
              class.</para><para>The component <xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> annotation will define the
              <code>implementation</code> element automatically from the type
              it is applied to.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The class is retrieved with the <code>loadClass</code> method of
      the component's bundle. The class must be public and have a public
      constructor without arguments (this is normally the default constructor)
      so component instances may be created by SCR with the
      <code>newInstance</code> method on <code>Class</code>.</para>

      <para>If the component description specifies a service, the class must
      implement all interfaces that are provided by the service.</para>
    </section>

    <section xml:id="service.component-property.properties.elements">
      <title>Property and Properties Elements</title>

      <para>A component description can define a number of properties. These
      can defined inline or from a resource in the bundle. The
      <code>property</code> and <code>properties</code> elements can occur
      multiple times and they can be interleaved. This interleaving is
      relevant because the properties are processed from top to bottom. Later
      properties override earlier properties that have the same name.</para>

      <para>Properties can also be overridden by a Configuration Admin
      service's <code>Configuration</code> object before they are exposed to
      the component or used as service properties. This is described in <xref linkend="service.component-component.properties"/> and <xref linkend="service.component-deployment"/>.</para>

      <para>The <code>property</code> element has the attributes and
      annotations defined in the following table.</para>

      <table pgwide="1">
        <title>Property Element and Annotations</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Annotation</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>name</code></entry>

              <entry><para><code><xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> <xref linkend="org.osgi.service.component.annotations.Component.property--" xrefstyle="hyperlink"/></code></para></entry>

              <entry><para>The name of the property.</para></entry>
            </row>

            <row>
              <entry><code>value</code></entry>

              <entry><para/></entry>

              <entry><para>The value of the property. This value is parsed
              according to the property type. If the value attribute is
              specified, the body of the element is ignored. If the type of
              the property is not <code>String</code>, parsing of the value is
              done by the static <code>valueOf(String)</code> method in the
              given type. For <code>Character</code> types, the conversion
              must be handled by <code>Integer.valueOf</code> method, a
              Character is always represented by its Unicode
              value.</para></entry>
            </row>

            <row>
              <entry><code>type</code></entry>

              <entry><para/></entry>

              <entry><para>The type of the property. Defines how to interpret
              the value. The type must be one of the following Java
              types:</para><itemizedlist>
                  <listitem>
                    <para><code>String</code> (default)</para>
                  </listitem>

                  <listitem>
                    <para><code>Long</code></para>
                  </listitem>

                  <listitem>
                    <para><code>Double</code></para>
                  </listitem>

                  <listitem>
                    <para><code>Float</code></para>
                  </listitem>

                  <listitem>
                    <para><code>Integer</code></para>
                  </listitem>

                  <listitem>
                    <para><code>Byte</code></para>
                  </listitem>

                  <listitem>
                    <para><code>Character</code></para>
                  </listitem>

                  <listitem>
                    <para><code>Boolean</code></para>
                  </listitem>

                  <listitem>
                    <para><code>Short</code></para>
                  </listitem>
                </itemizedlist></entry>
            </row>

            <row>
              <entry><code>&lt;body&gt;</code></entry>

              <entry><para/></entry>

              <entry><para> If the <code>value</code> attribute is not
              specified, the body of the property element must contain one or
              more values. The value of the property is then an array of the
              specified type. Except for <code>String</code> objects, the
              result will be translated to an array of primitive types. For
              example, if the type attribute specifies <code>Integer</code>,
              then the resulting array must be
              <code>int[]</code>.</para><para>Values must be placed one per
              line and blank lines are ignored. Parsing of the value is done
              by the <code>parse</code> methods in the class identified by the
              type, after trimming the line of any beginning and ending white
              space. <code>String</code> values are also trimmed of beginning
              and ending white space before being placed in the
              array.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>For example, a component that needs an array of hosts can use the
      following property definition:</para>

      <programlisting>&lt;property name="hosts"&gt;
        www.acme.com
        backup.acme.com
&lt;/property&gt;</programlisting>

      <para>This property declaration results in the property hosts, with a
      value of <code>String[] { "www.acme.com", "backup.acme.com"
      }</code>.</para>

      <para>A property can also be set with the <xref linkend="org.osgi.service.component.annotations.Component.property--" xrefstyle="hyperlink"/> annotation element of <code>Component</code>.
      This element is an array of strings that must follow the following
      syntax:</para>

      <programlisting>property ::= name ( ':' type )? '=' value</programlisting>

      <para>In this case <code>name</code>, <code>type</code>, and
      <code>value</code> parts map to the attributes of the
      <code>property</code> element. If multiple values must be specified then
      the same name can be repeated multiple times. For example:</para>

      <programlisting>@Component(property={"foo:Integer=1","foo:Integer=2","foo:Integer=3"})
public class FooImpl {
  ...
}</programlisting>

      <para>The <code>properties</code> element references an entry in the
      bundle whose contents conform to a standard <xref linkend="i1567926"/>.</para>

      <para>At runtime, SCR reads the entry to obtain the properties and their
      values. The properties element attributes are defined in the following
      table.</para>

      <table pgwide="1">
        <title>Properties Element and Annotations</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Annotation</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>entry</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> <xref linkend="org.osgi.service.component.annotations.Component.properties--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The entry path relative to the root of the
              bundle</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>For example, to include vendor identification properties that are
      stored in the OSGI-INF directory, the following definition could be
      used:</para>

      <programlisting>&lt;properties entry="OSGI-INF/vendor.properties"/&gt;</programlisting>

      <para>The <code><xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> <xref linkend="org.osgi.service.component.annotations.Component.properties--" xrefstyle="hyperlink"/></code> element can be used to provide the same
      information, this element consists of an array of strings where each
      string defines an entry. The order within the array is the order that
      must be used for the XML. However, the annotations do not support
      interleaving of the generated <code>property</code> and
      <code>properties</code> elements.</para>

      <para>For example:</para>

      <programlisting>@Component(properties="OSGI-INF/vendor.properties")</programlisting>

      <para>See <xref linkend="service.component-ordering.generated.properties"/> for more
      information on the ordering of generated properties when using
      annotations.</para>
    </section>

    <section xml:id="service.component-service.element">
      <title>Service Element</title>

      <para>The <code>service</code> element is optional. It describes the
      service information to be used when a component configuration is to be
      registered as a service.</para>

      <para>A service element has the following attribute defined in the
      following table.</para>

      <table pgwide="1">
        <title>Service Element and Annotations</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Annotation</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>scope</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> <xref linkend="org.osgi.service.component.annotations.Component.scope--" xrefstyle="hyperlink"/></para><para><xref linkend="org.osgi.service.component.annotations.ServiceScope.SINGLETON" xrefstyle="hyperlink"/></para><para><xref linkend="org.osgi.service.component.annotations.ServiceScope.BUNDLE" xrefstyle="hyperlink"/></para><para><xref linkend="org.osgi.service.component.annotations.ServiceScope.PROTOTYPE" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Controls the scope of the provided service. If set
              to <code>singleton</code>, when the component is registered as a
              service, it must be registered as a bundle scope service but
              only a single component configuration must be created and
              activated and a new instance of the component implementation
              class of the component must be used for all bundles using the
              service. If set to <code>bundle</code>, when the component is
              registered as a service, it must be registered as a bundle scope
              service and a different component configuration is created and
              activated and a new instance of the component implementation
              class must be created for each bundle using the service. If set
              to <code>prototype</code>, when the component is registered as a
              service, it must be registered as a prototype scope service and
              a different component configuration is created and activated and
              a new instance of the component implementation class must be
              created for each distinct request for the service, such as via
              <code>ServiceObjects</code>.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The <code>scope</code> attribute must be <code>singleton</code> if
      the component is a factory component or an immediate component. This is
      because SCR is not free to create component configurations as necessary
      to support non-singleton scoped services. A component description is
      ill-formed if it specifies that the component is a factory component or
      an immediate component and <code>scope</code> is not
      <code>singleton</code>.</para>

      <para>The <code>service</code> element must have one or more
      <code>provide</code> elements that define the service interfaces. The
      <code>provide</code> element has the attribute defined in the following
      table.</para>

      <table pgwide="1">
        <title>Provide Element and Annotations</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Annotation</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>interface</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> <xref linkend="org.osgi.service.component.annotations.Component.service--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The name of the interface that this service is
              registered under. This name must be the fully qualified name of
              a Java class. For example,
              <code>org.osgi.service.log.LogService</code>. The specified Java
              class should be an interface rather than a class, however
              specifying a class is supported. The component implementation
              class must implement all the specified service
              interfaces.</para><para>The Component annotation can specify the
              provided services, if this element is not specified all directly
              implemented interfaces on the component's type are defined as
              service interfaces. Specifying an empty array indicates that no
              service should be registered.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>For example, a component implements an Event Handler
      service.</para>

      <programlisting>&lt;service&gt;
    &lt;provide interface=
        "org.osgi.service.eventadmin.EventHandler"/&gt;
&lt;/service&gt;</programlisting>

      <para>This previous example can be generated with the following
      annotation:</para>

      <programlisting>@Component
public class Foo implements EventHandler { ... }</programlisting>
    </section>

    <section xml:id="service.component-reference.element">
      <title>Reference Element</title>

      <para>A <emphasis>reference</emphasis> declares a dependency that a
      component has on a<emphasis> </emphasis>set of target services. A
      component configuration is not satisfied, unless all its references are
      satisfied. A reference specifies target services by specifying their
      interface and an optional target property.</para>

      <para>A <code>reference</code> element has the attributes defined in the
      following table.</para>

      <table pgwide="1">
        <title>Reference Element and Annotations</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Annotation</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>name</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Reference.name--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The name of the reference. This name is local to
              the component and can be used to locate a bound service of this
              reference with one of the <code>locateService</code> methods of
              <xref linkend="org.osgi.service.component.ComponentContext" xrefstyle="hyperlink"/>. Each <code>reference</code> element
              within the component must have a unique name. This
              <code>name</code> attribute is optional. The default value of
              this attribute is the value of the <code>interface</code>
              attribute of this element. If multiple <code>reference</code>
              elements in the component use the same interface name, then
              using the default value for this attribute will result in
              duplicate reference names. In this case, this attribute must be
              specified with a unique name for the reference to avoid an
              error.</para><para>The <code>Reference</code> annotation will
              use the name of the annotated method or field as the default
              reference name. If the method name begins with
              <code>bind</code>, <code>set</code> or <code>add</code>, that
              prefix is removed.</para></entry>
            </row>

            <row>
              <entry><code>interface</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Reference.service--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Fully qualified name of the class that is used by
              the component to access the service. The service provided to the
              component must be type compatible with this class. That is, the
              component must be able to cast the service object to this class.
              A service must be registered under this name to be considered
              for the set of target services.</para><para>The
              <code>Reference</code> annotation will use the type of the first
              argument of the annotated method or the type of the annotated
              field to determine the <code>service</code>
              value.</para></entry>
            </row>

            <row>
              <entry><code>cardinality</code></entry>

              <entry><para> <xref linkend="org.osgi.service.component.annotations.Reference.cardinality--" xrefstyle="hyperlink"/></para><para> <xref linkend="org.osgi.service.component.annotations.ReferenceCardinality.MANDATORY" xrefstyle="hyperlink"/></para><para> <xref linkend="org.osgi.service.component.annotations.ReferenceCardinality.OPTIONAL" xrefstyle="hyperlink"/></para><para> <xref linkend="org.osgi.service.component.annotations.ReferenceCardinality.MULTIPLE" xrefstyle="hyperlink"/></para><para> <xref linkend="org.osgi.service.component.annotations.ReferenceCardinality.AT_LEAST_ONE" xrefstyle="hyperlink"/></para></entry>

              <entry><para> Specifies if the reference is optional and if the
              component implementation support a single bound service or
              multiple bound services. See <xref linkend="service.component-reference.cardinality"/>.</para></entry>
            </row>

            <row>
              <entry><code>policy</code></entry>

              <entry><para> <xref linkend="org.osgi.service.component.annotations.Reference.policy--" xrefstyle="hyperlink"/></para><para> <xref linkend="org.osgi.service.component.annotations.ReferencePolicy.STATIC" xrefstyle="hyperlink"/></para><para> <xref linkend="org.osgi.service.component.annotations.ReferencePolicy.DYNAMIC" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The policy declares the assumption of the component
              about dynamicity. See <xref linkend="i1440474"/>.</para></entry>
            </row>

            <row>
              <entry><code>policy-option</code></entry>

              <entry><para> <xref linkend="org.osgi.service.component.annotations.Reference.policyOption--" xrefstyle="hyperlink"/></para><para> <xref linkend="org.osgi.service.component.annotations.ReferencePolicyOption.RELUCTANT" xrefstyle="hyperlink"/></para><para> <xref linkend="org.osgi.service.component.annotations.ReferencePolicyOption.GREEDY" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Defines the policy when a better service becomes
              available. See <xref linkend="i1440474"/>.</para></entry>
            </row>

            <row>
              <entry><code>target</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Reference.target--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>An optional OSGi Framework filter expression that
              further constrains the set of target services. The default is no
              filter, limiting the set of matched services to all service
              registered under the given reference interface. The value of
              this attribute is used for the value of the target property of
              the reference. See <xref linkend="service.component-target.property"/>.</para></entry>
            </row>

            <row>
              <entry><code>scope</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Reference.scope--" xrefstyle="hyperlink"/></para><para><xref linkend="org.osgi.service.component.annotations.ReferenceScope.BUNDLE" xrefstyle="hyperlink"/></para><para><xref linkend="org.osgi.service.component.annotations.ReferenceScope.PROTOTYPE" xrefstyle="hyperlink"/></para><para><link linkend="org.osgi.service.component.annotations.ReferenceScope.PROTOTYPE_REQUIRED" xrefstyle="hyperlink">PROTOTYPE_</link></para><para> <link linkend="org.osgi.service.component.annotations.ReferenceScope.PROTOTYPE_REQUIRED" xrefstyle="hyperlink">REQUIRED</link></para></entry>

              <entry><para>The reference scope for this reference. See <xref linkend="service.component-reference.scope"/>.</para></entry>
            </row>

            <row>
              <entry><code>bind</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Reference" xrefstyle="hyperlink"/></para><para><xref linkend="org.osgi.service.component.annotations.Reference.bind--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The name of a method in the component
              implementation class that is used to notify that a service is
              bound to the component configuration. For static references,
              this method is only called before the <code>activate</code>
              method. For dynamic references, this method can also be called
              while the component configuration is active. See <xref linkend="i1548427"/>.</para><para>The <code>Reference</code>
              annotation will use the name of the method it is applied to as
              the bind method name.</para></entry>
            </row>

            <row>
              <entry><code>updated</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Reference.updated--" xrefstyle="hyperlink"/></para></entry>

              <entry><para> The name of a method in the component
              implementation class that is used to notify that a bound service
              has modified its properties.</para></entry>
            </row>

            <row>
              <entry><code>unbind</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Reference.unbind--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Same as bind, but is used to notify the component
              configuration that the service is unbound. For static
              references, the method is only called after the
              <code>deactivate</code> method. For dynamic references, this
              method can also be called while the component configuration is
              active. See <xref linkend="i1548427"/>.</para></entry>
            </row>

            <row>
              <entry><code>field</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Reference" xrefstyle="hyperlink"/></para><para><xref linkend="org.osgi.service.component.annotations.Reference.field--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The name of a field in the component implementation
              class that is used to hold service(s) that are bound to the
              component configuration. For static references, this field is
              only set before the <code>activate</code> method. For dynamic
              references, this field can modified while the component
              configuration is active. See <xref linkend="i1548427"/>.</para><para>The <code>Reference</code>
              annotation will use the name of the field it is applied to as
              the field name.</para></entry>
            </row>

            <row>
              <entry><code>field-option</code></entry>

              <entry><para> <xref linkend="org.osgi.service.component.annotations.Reference.fieldOption--" xrefstyle="hyperlink"/></para><para> <xref linkend="org.osgi.service.component.annotations.FieldOption.REPLACE" xrefstyle="hyperlink"/></para><para> <xref linkend="org.osgi.service.component.annotations.FieldOption.UPDATE" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Defines how the field value must be managed. This
              is ignored if the <code>field</code> attribute is not set. See
              <xref linkend="service.component-reference.field.option"/>.</para></entry>
            </row>

            <row>
              <entry><code>field-collection-type</code></entry>

              <entry/>

              <entry><para>Defines the types of elements in the collection
              referenced by the field value. This is ignored if the
              <code>field</code> attribute is not set or the cardinality is
              unary. See <xref linkend="service.component-field.strategy"/>
              for more information.</para><para>The <code>Reference</code>
              annotation can infer the value of the collection elements from
              the generic type information of the annotated
              field.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>In the generated component description, the reference elements
      must be ordered in ascending lexicographical order, using
      <code>String.compareTo</code>, of the <xref linkend="org.osgi.service.component.annotations.Reference.name--" xrefstyle="hyperlink"/>s of the references.</para>

      <para>The following code demonstrates the use of the <xref linkend="org.osgi.service.component.annotations.Reference" xrefstyle="hyperlink"/> annotation for the event strategy.</para>

      <programlisting>@Component
public class FooImpl implements Foo {
  @Reference( 
    policy = DYNAMIC, 
    policyOption = GREEDY,
    cardinality = MANDATORY )
  void setLog( LogService log ) { ... }
  void unsetLog( LogService log ) { ... }
  void updatedLog( Map&lt;String,?&gt; ref ) { ... }

  @Activate
  void open() { ... }
  @Deactivate
  void close() { ... }
}</programlisting>

      <para>The following code demonstrates the use of the <xref linkend="org.osgi.service.component.annotations.Reference" xrefstyle="hyperlink"/> annotation for the field strategy.</para>

      <programlisting>@Component
public class FooImpl implements Foo {
  @Reference( 
    policy = DYNAMIC, 
    policyOption = GREEDY,
    cardinality = MANDATORY )
  volatile LogService log;

  @Activate
  void open() { log.log(LOG_INFO, "activated"); }
  @Deactivate
  void close() { log.log(LOG_INFO, "deactivated"); }
}</programlisting>

      <para>For a reference to be used with the lookup strategy, there are no
      bind methods or fields to annotate with the <xref linkend="org.osgi.service.component.annotations.Reference" xrefstyle="hyperlink"/> annotation. Instead <xref linkend="org.osgi.service.component.annotations.Reference" xrefstyle="hyperlink"/> annotations can be specified in the <xref linkend="org.osgi.service.component.annotations.Component.reference--" xrefstyle="hyperlink"/> element of the <xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> annotation. When used in this way, the <xref linkend="org.osgi.service.component.annotations.Reference.name--" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.component.annotations.Reference.service--" xrefstyle="hyperlink"/> elements must be specified since there is no
      annotated member from which the name or service can be determined. The
      following code demonstrates the use of the <xref linkend="org.osgi.service.component.annotations.Reference" xrefstyle="hyperlink"/> annotation for the lookup strategy.</para>

      <programlisting>@Component( reference = 
  @Reference( name = "log", service = LogService.class )
)
public class FooImpl implements Foo {
  @Activate
  void open( ComponentContext context ) {
    LogService log = (LogService) context.locateService( "log" );
    ...
  }
  @Deactivate
  void close() { ... }
}</programlisting>
    </section>
  </section>

  <section xml:id="i1545305">
    <title>Component Life Cycle</title>

    <section xml:id="i1545307">
      <title>Enabled</title>

      <para>A component must first be <emphasis>enabled</emphasis> before it
      can be used. A component cannot be enabled unless the component's bundle
      is started. See <emphasis>Starting Bundles</emphasis> in <xref linkend="intro.core.release" xrefstyle="template:%t"/>. All components
      in a bundle become disabled when the bundle is stopped. So the life
      cycle of a component is contained within the life cycle of its
      bundle.</para>

      <para>Every component can be enabled or disabled. The initial enabled
      state of a component is specified in the component description via the
      <code>enabled</code> attribute of the <code>component</code> element.
      See <xref linkend="service.component-component.element"/>. Component
      configurations can be created, satisfied and activated only when the
      component is enabled.</para>

      <para>The enabled state of a component can be controlled with the
      Component Context <xref linkend="org.osgi.service.component.ComponentContext.enableComponent-String-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.component.ComponentContext.disableComponent-String-" xrefstyle="hyperlink"/> methods. The purpose of later enabling a
      component is to be able to decide programmatically when a component can
      become enabled. For example, an immediate component can perform some
      initialization work before other components in the bundle are enabled.
      The component descriptions of all other components in the bundle can be
      disabled by having <code>enabled</code> set to <code>false</code> in
      their component descriptions. After any necessary initialization work is
      complete, the immediate component can call <code>enableComponent</code>
      to enable the remaining components.</para>

      <para>The <code>enableComponent</code> and <code>disableComponent</code>
      methods must return after changing the enabled state of the named
      component. Any actions that result from this, such as activating or
      deactivating a component configuration, must occur asynchronously to the
      method call. Therefore a component can disable itself.</para>

      <para>All components in a bundle can be enabled by passing a
      <code>null</code> as the argument to
      <code>enableComponent</code>.</para>
    </section>

    <section>
      <title>Satisfied</title>

      <para>Component configurations can only be activated when the component
      configuration is <emphasis>satisfied</emphasis>. A component
      configuration becomes satisfied when the following conditions are all
      satisfied:</para>

      <itemizedlist>
        <listitem>
          <para>The component is <emphasis>enabled</emphasis>.</para>
        </listitem>

        <listitem>
          <para>If the component description specifies
          <code>configuration-policy=required</code>, then a
          <code>Configuration</code> object for the component is present in
          the Configuration Admin service.</para>
        </listitem>

        <listitem>
          <para>Using the component properties of the component configuration,
          all the component's references are satisfied. A reference is
          satisfied when the reference specifies optional cardinality or the
          number of target services is equal to or more than the minimum
          cardinality of the reference.</para>
        </listitem>
      </itemizedlist>

      <para>Once any of the listed conditions are no longer true, the
      component configuration becomes <emphasis>unsatisfied</emphasis>. An
      activated component configuration that becomes unsatisfied must be
      deactivated.</para>
    </section>

    <section>
      <title>Immediate Component</title>

      <para>A component is an immediate component when it must be activated as
      soon as its dependencies are satisfied. Once the component configuration
      becomes unsatisfied, the component configuration must be deactivated. If
      an immediate component configuration is satisfied and specifies a
      service, SCR must register the component configuration as a service in
      the service registry and then activate the component configuration. The
      service properties for this registration consist of the component
      properties as defined in <xref linkend="i1629621"/>.</para>

      <para>The state diagram is shown in <xref linkend="i1445265"/>.</para>

      <figure xml:id="i1445265">
        <title>Immediate Component Configuration</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.443in" contentwidth="7.000in" fileref="immediate-configuration.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Delayed Component</title>

      <para>A key attribute of a delayed component is the delaying of class
      loading and object creation. Therefore, the activation of a delayed
      component configuration does not occur until there is an actual request
      for a service object. A component is a delayed component when it
      specifies a service but it is not a factory component and does not have
      the <code>immediate</code> attribute of the <code>component</code>
      element set to <code>true</code>.</para>

      <para>SCR must register a service after the component configuration
      becomes satisfied. The registration of this service must look to
      observers of the service registry as if the component's bundle actually
      registered this service. This strategy makes it possible to register
      services without creating a class loader for the bundle and loading
      classes, thereby allowing reduction in initialization time and a delay
      in memory footprint.</para>

      <para>When SCR registers the service on behalf of a component
      configuration, it must avoid causing a class load to occur from the
      component's bundle. SCR can ensure this by registering a
      <code>ServiceFactory</code> object with the Framework for that service.
      By registering a <code>ServiceFactory</code> object, the actual service
      object is not needed until the <code>ServiceFactory</code> is called to
      provide the service object. The service properties for this registration
      consist of the component properties as defined in <xref linkend="i1629621"/>.</para>

      <para>The activation of a component configuration must be delayed until
      its service is requested. When the service is requested, if the service
      has the <code>scope</code> attribute set to <code>bundle</code>, SCR
      must create and activate a unique component configuration for each
      bundle requesting the service. If the service has the <code>scope</code>
      attribute set to <code>prototype</code>, SCR must create and activate a
      unique component configuration for each distinct request for the
      service. Otherwise, if the service has the <code>scope</code> attribute
      set to <code>singleton</code>, SCR must activate a single component
      configuration which is used by all requests for the service. A component
      instance can determine the bundle it was activated for by calling the
      <xref linkend="org.osgi.service.component.ComponentContext.getUsingBundle--" xrefstyle="hyperlink"/> method on the Component Context.</para>

      <para>The activation of delayed components is depicted in a state
      diagram in <xref linkend="i1462979"/>. Notice that multiple component
      configurations can be created from the <code>REGISTERED</code> state if
      a delayed component specifies a service <code>scope</code> set to a
      value other than <code>singleton</code>.</para>

      <para>If the service registered by a component configuration becomes
      unused because there are no more bundles using it, then SCR should
      deactivate that component configuration. This allows SCR implementations
      to eagerly reclaim activated component configurations.</para>

      <figure xml:id="i1462979">
        <title>Delayed Component Configuration</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.979in" contentwidth="7.000in" fileref="delayed-configuration.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Factory Component</title>

      <para>SCR must register a Component Factory service as soon as the
      <emphasis>component factory</emphasis> becomes satisfied. The component
      factory is satisfied when the following conditions are all
      satisfied:</para>

      <itemizedlist>
        <listitem>
          <para>The component is enabled.</para>
        </listitem>

        <listitem>
          <para>Using the component properties specified by the component
          description, all the component's references are satisfied. A
          reference is satisfied when the reference specifies optional
          cardinality or there is at least one target service for the
          reference</para>
        </listitem>
      </itemizedlist>

      <para>The component factory, however, does not use any of the target
      services and does not bind to them.</para>

      <para>Once any of the listed conditions are no longer true, the
      component factory becomes unsatisfied and the Component Factory service
      must be unregistered. Any component configurations activated via the
      component factory are unaffected by the unregistration of the Component
      Factory service, but may themselves become unsatisfied for the same
      reason.</para>

      <para>The Component Factory service must be registered under the name
      <code>org.osgi.service.component.ComponentFactory</code> with the
      following service properties:</para>

      <itemizedlist>
        <listitem>
          <para><code>component.name</code> - The name of the
          component.</para>
        </listitem>

        <listitem>
          <para><code>component.factory</code> - The value of the
          <code>factory</code> attribute.</para>
        </listitem>
      </itemizedlist>

      <para>The service properties of the Component Factory service must not
      include the component properties.</para>

      <para>New component configurations are created and activated when the
      <code>newInstance</code> method of the Component Factory service is
      called. If the component description specifies a service, the component
      configuration is registered as a service under the provided interfaces.
      The service properties for this registration consist of the component
      properties as defined in <xref linkend="i1629621"/>. The service
      registration must take place before the component configuration is
      activated. Service unregistration must take place before the component
      configuration is deactivated.</para>

      <figure>
        <title>Factory Component</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.929in" contentwidth="7.000in" fileref="factory-component.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>A Component Factory service has a single method: <xref linkend="org.osgi.service.component.ComponentFactory.newInstance-Dictionary-" xrefstyle="hyperlink"/>. This method must create, satisfy and activate a
      new component configuration and register its component instance as a
      service if the component description specifies a service. It must then
      return a <xref linkend="org.osgi.service.component.ComponentInstance" xrefstyle="hyperlink"/> object. This <xref linkend="org.osgi.service.component.ComponentInstance" xrefstyle="hyperlink"/> object can be used to get the component instance
      with the <xref linkend="org.osgi.service.component.ComponentInstance.getInstance--" xrefstyle="hyperlink"/> method.</para>

      <para>SCR must attempt to satisfy the component configuration created by
      <code>newInstance</code> before activating it. If SCR is unable to
      satisfy the component configuration given the component properties and
      the Dictionary argument to <code>newInstance</code>, the
      <code>newInstance</code> method must throw a
      <code>ComponentException</code>.</para>

      <para>The client of the Component Factory service can also deactivate a
      component configuration with the <xref linkend="org.osgi.service.component.ComponentInstance.dispose--" xrefstyle="hyperlink"/> method on the <xref linkend="org.osgi.service.component.ComponentInstance" xrefstyle="hyperlink"/> object. If the component configuration is
      already deactivated, or is being deactivated, then this method is
      ignored. Also, if the component configuration becomes unsatisfied for
      any reason, it must be deactivated by SCR.</para>

      <para>Once a component configuration created by the Component Factory
      has been deactivated, that component configuration will not be
      reactivated or used again.</para>
    </section>

    <section>
      <title>Activation</title>

      <para>Activating a component configuration consists of the following
      steps:</para>

      <orderedlist>
        <listitem>
          <para>Load the component implementation class.</para>
        </listitem>

        <listitem>
          <para>Create the component instance and component context.</para>
        </listitem>

        <listitem>
          <para>Bind the target services. See <xref linkend="i1536739"/>.</para>
        </listitem>

        <listitem>
          <para>Call the activate method, if present. See <xref linkend="i1539155"/>.</para>
        </listitem>
      </orderedlist>

      <para>Component instances must never be reused. Each time a component
      configuration is activated, SCR must create a new component instance to
      use with the activated component configuration. A component instance
      must complete activation before it can be deactivated. Once the
      component configuration is deactivated or fails to activate due to an
      exception, SCR must unbind all the component's bound services and
      discard all references to the component instance associated with the
      activation.</para>
    </section>

    <section xml:id="i1536739">
      <title>Binding Services</title>

      <para>When a component configuration's reference is satisfied, there is
      a set of zero or more target services for that reference. When the
      component configuration is activated, a subset of the target services
      for each reference are bound to the component configuration. The subset
      is chosen by the cardinality of the reference. See <xref linkend="service.component-reference.cardinality"/>.</para>

      <para>When binding services, the references are processed in the order
      in which they are specified in the component description. That is,
      target services from the first specified reference are bound before
      services from the next specified reference.</para>

      <para>Obtaining the service object for a bound service may result in
      activating a component configuration of the bound service which could
      result in an exception. If the loss of the bound service due to the
      exception causes the reference's cardinality constraint to be violated,
      then activation of this component configuration will fail. Otherwise the
      bound service which failed to activate will be considered
      unbound.</para>

      <para>If the reference uses the field strategy, the field must be set.
      Then, if the reference uses the event strategy, the bind method must be
      called for each bound service of that reference. If a bind method throws
      an exception, SCR must log an error message containing the exception
      with the Log Service, if present, but the activation of the component
      configuration does not fail.</para>
    </section>

    <section xml:id="i1539155">
      <title>Activate Method</title>

      <para>A component instance can have an activate method. The name of the
      activate method can be specified by the <code>activate</code> attribute.
      See <xref linkend="service.component-component.element"/>. If the
      <code>activate</code> attribute is not specified, the default method
      name of <code>activate</code> is used. The prototype of the activate
      method is:</para>

      <programlisting>void &lt;method-name&gt;(&lt;arguments&gt;);</programlisting>

      <para>The activate method can take zero or more arguments. Each argument
      must be of one of the following types:</para>

      <itemizedlist>
        <listitem>
          <para><code>ComponentContext</code> - The component instance will be
          passed the Component Context for the component configuration.</para>
        </listitem>

        <listitem>
          <para><code>BundleContext</code> - The component instance will be
          passed the Bundle Context of the component's bundle.</para>
        </listitem>

        <listitem>
          <para><code>Map</code> - The component instance will be passed an
          unmodifiable Map containing the component properties.</para>
        </listitem>

        <listitem>
          <para>A component property type - The component instance will be
          passed an instance of the component property type which allows type
          safe access to component properties defined by the component
          property type. See <xref linkend="service.component-component.property.types"/>.</para>
        </listitem>
      </itemizedlist>

      <para>A suitable method is selected using the following priority:</para>

      <orderedlist>
        <listitem>
          <para>The method takes a single argument and the type of the
          argument is
          <code>org.osgi.service.component.ComponentContext</code>.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is <code>org.osgi.framework.BundleContext</code>.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is a component property type.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is <code>java.util.Map</code>.</para>
        </listitem>

        <listitem>
          <para>The method takes two or more arguments and the type of each
          argument must be
          <code>org.osgi.service.component.ComponentContext</code>,
          <code>org.osgi.framework.BundleContext</code>, a component property
          type or <code>java.util.Map</code>. If multiple methods match this
          rule, this implies the method name is overloaded and SCR may choose
          any of the methods to call.</para>
        </listitem>

        <listitem>
          <para>The method takes zero arguments.</para>
        </listitem>
      </orderedlist>

      <para>When searching for the activate method to call, SCR must locate a
      suitable method as specified in <xref linkend="i1641644"/>. If the
      <code>activate</code> attribute is specified and no suitable method is
      located, SCR must log an error message with the Log Service, if present,
      and the component configuration is not activated.</para>

      <para>If an activate method is located, SCR must call this method to
      complete the activation of the component configuration. If the activate
      method throws an exception, SCR must log an error message containing the
      exception with the Log Service, if present, and the component
      configuration is not activated.</para>
    </section>

    <section>
      <title>Component Context</title>

      <para>The Component Context is made available to a component instance
      via the <code>activate</code> and <code>deactivate</code> methods. It
      provides the interface to the execution context of the component, much
      like the Bundle Context provides a bundle the interface to the
      Framework. A Component Context should therefore be regarded as a
      capability and not shared with other components or bundles.</para>

      <para>Each distinct component instance receives a unique Component
      Context. Component Contexts are not reused and must be discarded when
      the component configuration is deactivated.</para>
    </section>

    <section xml:id="i1651072">
      <title>Bound Service Replacement</title>

      <para>If an active component configuration has a dynamic reference with
      unary cardinality and the bound service is modified or unregistered and
      ceases to be a target service, or the <code>policy-option</code> is
      <code>greedy</code> and a better target service becomes available then
      SCR must attempt to replace the bound service with a new bound
      service.</para>

      <para>If the reference uses the field strategy, the field must be set
      for the replacement bound service. Then, if the reference uses the event
      strategy, SCR must first bind the new bound service and then unbind the
      outgoing service. This reversed order allows the component to not have
      to handle the inevitable gap between the unbind and bind methods.
      However, this means that in the unbind method care must be taken to not
      overwrite the newly bound service. For example, the following code
      handles the associated concurrency issues and simplify handling the
      reverse order.</para>

      <programlisting>final AtomicReference&lt;LogService&gt; log = new AtomicReference&lt;LogService&gt;();

void setLogService( LogService log ) {
    this.log.set(log);
}
void unsetLogService( LogService log ) {
    this.log.compareAndSet(log, null);
}</programlisting>

      <para>If the dynamic reference falls below the minimum cardinality, the
      component configuration must be deactivated because the cardinality
      constraints will be violated.</para>

      <para>If a component configuration has a static reference and a bound
      service is modified or unregistered and ceases to be a target service,
      or the <code>policy-option</code> is <code>greedy</code> and a better
      target service becomes available then SCR must deactivate the component
      configuration. Afterwards, SCR must attempt to activate the component
      configuration again if another target service can be used as a
      replacement for the outgoing service.</para>
    </section>

    <section>
      <title>Updated</title>

      <para>If an active component is bound to a service that modifies its
      service properties then the component can be updated. If the reference
      uses the field strategy and the field holds the service properties, the
      field must be set for the updated bound service. Then, if the reference
      uses the event strategy and specifies an updated method, the updated
      method must be called.</para>
    </section>

    <section xml:id="i1652198">
      <title>Modification</title>

      <para>Modifying a component configuration can occur if the component
      description specifies the <code>modified</code> attribute and the
      component properties of the component configuration use a
      <code>Configuration</code> object from the Configuration Admin service
      and that <code>Configuration</code> object is modified without causing
      the component configuration to become unsatisfied. If this occurs, the
      component instance will be notified of the change in the component
      properties.</para>

      <para>If the <code>modified</code> attribute is not specified, then the
      component configuration will become unsatisfied if its component
      properties use a <code>Configuration</code> object and that
      Configuration object is modified in any way.</para>

      <para>Modifying a component configuration consists of the following
      steps:</para>

      <orderedlist>
        <listitem>
          <para>Update the component context for the component configuration
          with the modified configuration properties.</para>
        </listitem>

        <listitem>
          <para>Call the modified method. See <xref linkend="i1649781"/>.</para>
        </listitem>

        <listitem>
          <para>Modify the bound services for the dynamic references if the
          set of target services changed due to changes in the target
          properties. See <xref linkend="i1651072"/>.</para>
        </listitem>

        <listitem>
          <para>If the component configuration is registered as a service,
          modify the service properties.</para>
        </listitem>
      </orderedlist>

      <para>A component instance must complete activation, or a previous
      modification, before it can be modified.</para>

      <para>See <xref linkend="i1649746"/> for more information.</para>
    </section>

    <section xml:id="i1649781">
      <title>Modified Method</title>

      <para>The name of the modified method is specified by the
      <code>modified</code> attribute. See <xref linkend="service.component-component.element"/>. The prototype and
      selection priority of the modified method is identical to that of the
      activate method. See <xref linkend="i1539155"/>.</para>

      <para>SCR must locate a suitable method as specified in <xref linkend="i1641644"/>. If the <code>modified</code> attribute is
      specified and no suitable method is located, SCR must log an error
      message with the Log Service, if present, and the component
      configuration becomes unsatisfied and is deactivated as if the
      <code>modified</code> attribute was not specified.</para>

      <para>If a modified method is located, SCR must call this method to
      notify the component configuration of changes to the component
      properties. If the modified method throws an exception, SCR must log an
      error message containing the exception with the Log Service, if present
      and continue processing the modification.</para>
    </section>

    <section xml:id="i1649517">
      <title>Deactivation</title>

      <para>Deactivating a component configuration consists of the following
      steps:</para>

      <orderedlist>
        <listitem>
          <para>Call the deactivate method, if present. See <xref linkend="i1576028"/>.</para>
        </listitem>

        <listitem>
          <para>Unbind any bound services. See <xref linkend="i1543088"/>.</para>
        </listitem>

        <listitem>
          <para>Release all references to the component instance and component
          context.</para>
        </listitem>
      </orderedlist>

      <para>A component instance must complete activation or modification
      before it can be deactivated. A component configuration can be
      deactivated for a variety of reasons. The deactivation reason can be
      received by the deactivate method. The following reason values are
      defined:</para>

      <itemizedlist>
        <listitem>
          <para>0 - Unspecified.</para>
        </listitem>

        <listitem>
          <para>1 - The component was disabled.</para>
        </listitem>

        <listitem>
          <para>2 - A reference became unsatisfied.</para>
        </listitem>

        <listitem>
          <para>3 - A configuration was changed.</para>
        </listitem>

        <listitem>
          <para>4 - A configuration was deleted.</para>
        </listitem>

        <listitem>
          <para>5 - The component was disposed.</para>
        </listitem>

        <listitem>
          <para>6 - The bundle was stopped.</para>
        </listitem>
      </itemizedlist>

      <para>Once the component configuration is deactivated, SCR must discard
      all references to the component instance and component context
      associated with the activation.</para>
    </section>

    <section xml:id="i1576028">
      <title>Deactivate Method</title>

      <para>A component instance can have a deactivate method. The name of the
      deactivate method can be specified by the <code>deactivate</code>
      attribute. See <xref linkend="service.component-component.element"/>. If
      the <code>deactivate</code> attribute is not specified, the default
      method name of <code>deactivate</code> is used. The prototype of the
      deactivate method is:</para>

      <programlisting>void &lt;method-name&gt;(&lt;arguments&gt;);</programlisting>

      <para>The deactivate method can take zero or more arguments. Each
      argument must be assignable from one of the following types:</para>

      <itemizedlist>
        <listitem>
          <para><code>ComponentContext</code> - The component instance will be
          passed the Component Context for the component.</para>
        </listitem>

        <listitem>
          <para><code>BundleContext</code> - The component instance will be
          passed the Bundle Context of the component's bundle.</para>
        </listitem>

        <listitem>
          <para><code>Map</code> - The component instance will be passed an
          unmodifiable Map containing the component properties.</para>
        </listitem>

        <listitem>
          <para>A component property type - The component instance will be
          passed an instance of the component property type which allows type
          safe access to component properties defined by the component
          property type. See <xref linkend="service.component-component.property.types"/>.</para>
        </listitem>

        <listitem>
          <para><code>int</code> or <code>Integer</code> - The component
          instance will be passed the reason the component configuration is
          being deactivated. See <xref linkend="i1649517"/>.</para>
        </listitem>
      </itemizedlist>

      <para>A suitable method is selected using the following priority:</para>

      <orderedlist>
        <listitem>
          <para>The method takes a single argument and the type of the
          argument is
          <code>org.osgi.service.component.ComponentContext</code>.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is <code>org.osgi.framework.BundleContext</code>.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is a component property type.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is <code>java.util.Map</code>.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is <code>int</code>.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is <code>java.lang.Integer</code>.</para>
        </listitem>

        <listitem>
          <para>The method takes two or more arguments and the type of each
          argument must be
          <code>org.osgi.service.component.ComponentContext</code>,
          <code>org.osgi.framework.BundleContext</code>, a component property
          type, <code>java.util.Map</code>, <code>int</code> or
          <code>java.lang.Integer</code>. If multiple methods match this rule,
          this implies the method name is overloaded and SCR may choose any of
          the methods to call.</para>
        </listitem>

        <listitem>
          <para>The method takes zero arguments.</para>
        </listitem>
      </orderedlist>

      <para>When searching for the deactivate method to call, SCR must locate
      a suitable method as specified in <xref linkend="i1641644"/>. If the
      <code>deactivate</code> attribute is specified and no suitable method is
      located, SCR must log an error message with the Log Service, if present,
      and the deactivation of the component configuration will
      continue.</para>

      <para>If a deactivate method is located, SCR must call this method to
      commence the deactivation of the component configuration. If the
      deactivate method throws an exception, SCR must log an error message
      containing the exception with the Log Service, if present, and the
      deactivation of the component configuration will continue.</para>
    </section>

    <section xml:id="i1543088">
      <title>Unbinding</title>

      <para>When a component configuration is deactivated, the bound services
      are unbound from the component configuration.</para>

      <para>When unbinding services, the references are processed in the
      reverse order in which they are specified in the component description.
      That is, target services from the last specified reference are unbound
      before services from the previous specified reference.</para>

      <para>If the reference uses the event strategy, the unbind method must
      be called for each bound service of that reference. If an unbind method
      throws an exception, SCR must log an error message containing the
      exception with the Log Service, if present, and the deactivation of the
      component configuration will continue. Then, if the reference uses the
      field strategy, the field must be set to <code>null</code>.</para>
    </section>

    <section>
      <title>Life Cycle Example</title>

      <para>A component could declare a dependency on the Http Service to
      register some resources.</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;scr:component name="example.binding"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
    &lt;implementation class="com.acme.impl.Binding"/&gt;
    &lt;reference name="LOG"
        interface="org.osgi.service.log.LogService"
        cardinality="1..1"
        policy="static"
    /&gt;   
    &lt;reference name="HTTP"
        interface="org.osgi.service.http.HttpService"
        cardinality="0..1"
        policy="dynamic"
        bind="setHttp"
        unbind="unsetHttp"
    /&gt;
&lt;/scr:component&gt;</programlisting>

      <para>The component implementation code looks like:</para>

      <programlisting>public class Binding {
    LogService  log;
    HttpService http;

    private void setHttp(HttpService h) {
        http = h;
        // register servlet
    }
    private void unsetHttp(HttpService h){
        if (http == h)
            http = null;
        // unregister servlet
    }
    private void activate(ComponentContext context ) {
        log = (LogService) context.locateService("LOG");
    }
    private void deactivate(ComponentContext context ) {...}
}</programlisting>

      <para>This example is depicted in a sequence diagram in <xref linkend="i1567615"/> with the following scenario:</para>

      <orderedlist>
        <listitem>
          <para>A bundle with the <code>example.Binding</code> component is
          started. At that time there is a Log Service <code>l1</code> and a
          Http Service <code>h1</code> registered.</para>
        </listitem>

        <listitem>
          <para>The Http Service <code>h1</code> is unregistered</para>
        </listitem>

        <listitem>
          <para>A new Http Service <code>h2</code> is registered</para>
        </listitem>

        <listitem>
          <para>The Log Service <code>h1</code> is unregistered.</para>
        </listitem>
      </orderedlist>

      <figure xml:id="i1567615">
        <title>Sequence Diagram for binding</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.062in" contentwidth="7.000in" fileref="binding-sequence.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section xml:id="service.component-component.properties">
    <title>Component Properties</title>

    <para>Each component configuration is associated with a set of component
    properties. The component properties are specified in the following
    <emphasis>configuration sources</emphasis> (in order of
    precedence):</para>

    <orderedlist>
      <listitem>
        <para>Properties specified in the argument of the
        <code>ComponentFactory.newInstance</code> method. This is only
        applicable for factory components.</para>
      </listitem>

      <listitem>
        <para>Properties retrieved from the OSGi Configuration Admin service
        in Configuration objects whose PID matches a <emphasis>configuration
        PID</emphasis>. The configuration PIDs are specified by the
        <code>configuration-pid</code> attribute of the <code>component</code>
        element. See <xref linkend="service.component-component.element"/>. If
        no <code>configuration-pid</code> attribute is specified, the
        component name is used as the default configuration PID. If multiple
        configuration PIDs are specified, the order of precedence follows the
        order the configuration PIDs are specified in the component
        description. That is, the precedence for the configuration for an
        earlier specified configuration PID is lower than the precedence for
        the configurations for a later specified configuration PID.</para>
      </listitem>

      <listitem>
        <para>Properties specified in the component description. Properties
        specified later in the component description override properties that
        have the same name specified earlier. Properties can be specified in
        the component description in the following ways:</para>

        <itemizedlist>
          <listitem>
            <para><code>target</code> attribute of <code>reference</code>
            elements - Sets the target property of the reference. See <xref linkend="service.component-target.property"/>. The value of the
            <code>target</code> attribute is used for the value of a target
            property.</para>
          </listitem>

          <listitem>
            <para><code>property</code> and <code>properties</code> elements -
            See <xref linkend="service.component-property.properties.elements"/>.</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </orderedlist>

    <para>The precedence behavior allows certain default values to be
    specified in the component description while allowing properties to be
    replaced and extended by:</para>

    <itemizedlist>
      <listitem>
        <para>A configuration in Configuration Admin</para>
      </listitem>

      <listitem>
        <para>The argument to the <code>ComponentFactory.newInstance</code>
        method</para>
      </listitem>
    </itemizedlist>

    <para>Normally, a property value from a higher precedence configuration
    source replace a property value from a lower precedence configuration
    source. However, the <code>service.pid</code> property values receive
    different treatment. For the <code>service.pid</code> property, if the
    property appears multiple times in the configuration sources, SCR must
    aggregate all the values found into a
    <code>Collection&lt;String&gt;</code> having an iteration order such that
    the first item in the iteration is the property value from the lowest
    precedence configuration source and the last item in the iteration is the
    property value from the highest precedence configuration source. If the
    component description specifies multiple configuration PIDs, then the
    order of the <code>service.pid</code> property values from the
    corresponding configurations matches the order the configuration PIDs are
    specified in the component description. The values of the
    <code>service.pid</code> component property are the values as they come
    from the configuration sources which, for Configuration objects, may be
    more detailed than the configuration PIDs specified in the component
    description.</para>

    <para>SCR always adds the following component properties, which cannot be
    overridden:</para>

    <itemizedlist>
      <listitem>
        <para><code>component.name</code> - The component name.</para>
      </listitem>

      <listitem>
        <para><code>component.id</code> - A unique value ( <code>Long</code>)
        that is larger than all previously assigned values. These values are
        not persistent across restarts of SCR.</para>
      </listitem>
    </itemizedlist>

    <section xml:id="i1629621">
      <title>Service Properties</title>

      <para>When SCR registers a service on behalf of a component
      configuration, SCR must follow the recommendations in <xref linkend="service.cm.propertypropagation"/> and must not propagate
      private configuration properties. That is, the service properties of the
      registered service must be all the component properties of the component
      configuration whose property names do not start with full stop
      (<code>'.' \u002E</code>).</para>

      <para>Component properties whose names start with full stop are
      available to the component instance but are not available as service
      properties of the registered service.</para>
    </section>

    <section>
      <title>Reference Properties</title>

      <para>This specification defines some component properties which are
      associated with specific component references. These are called
      <emphasis>reference properties</emphasis>. The name of a reference
      property for a reference is the name of the reference appended with a
      full stop (<code>'.' \u002E</code>) and a suffix unique to the reference
      property. Reference properties can be set wherever component properties
      can be set.</para>

      <para>All component property names starting with a reference name
      followed by a full stop (<code>'.' \u002E</code>) are reserved for use
      by this specification.</para>

      <para>Following are the reference properties defined by this
      specification.</para>

      <section xml:id="service.component-target.property">
        <title>Target Property</title>

        <para>The <emphasis>target property</emphasis> is a reference property
        which aids in the selection of target services for the reference. See
        <xref linkend="service.component-selecting.target.services"/>. The
        name of a target property is the name of a reference appended with
        <code>.target</code>. For example, the target property for a reference
        with the name <code>http</code> would have the name
        <code>http.target</code>. The value of a target property is a filter
        string used to select targets services for the reference.</para>

        <para>The target property for a reference can also be set by the
        <code>target</code> attribute of the <code>reference</code> element.
        See <xref linkend="service.component-reference.element"/>.</para>
      </section>

      <section xml:id="service.component-minimum.cardinality.property">
        <title>Minimum Cardinality Property</title>

        <para>The initial minimum cardinality of a reference is specified by
        the optionality: the first part of the cardinality. It is either
        <code>0</code> or <code>1</code>. The minimum cardinality of a
        reference cannot exceed the multiplicity: the second part of the
        cardinality. See <xref linkend="service.component-reference.cardinality"/> for more
        information on the cardinality of a reference.</para>

        <para>The <emphasis>minimum cardinality property</emphasis> is a
        reference property which can be used to raise the minimum cardinality
        of a reference from its initial value. That is, a <code>0..1</code>
        cardinality can be raised to a <code>1..1</code> cardinality by
        setting the reference's minimum cardinality property to
        <code>1</code>, and a <code>0..n</code> or <code>1..n</code>
        cardinality can be raised to a <code>m..n</code> cardinality by
        setting the reference's minimum cardinality property to <code>m</code>
        such that <code>m</code> is a positive integer. The minimum
        cardinality of a reference cannot be lowered. That is, a
        <code>1..1</code> or <code>1..n</code> cardinality can be lowered to a
        <code>0..1</code> or <code>0..n</code> cardinality because the
        component was coded to expect at least one bound service.</para>

        <para>The name of a minimum cardinality property is the name of a
        reference appended with <code>.cardinality.minimum</code>. For
        example, the minimum cardinality property for a reference with the
        name <code>http</code> would have the name
        <code>http.cardinality.minimum</code>. The value of a minimum
        cardinality property must be a positive integer or a value that can be
        coerced into a positive integer. See <xref linkend="service.component-component.property.value.coercion"/> for
        information on coercing property values. If the numerical value of the
        minimum cardinality property is not valid for the reference's
        cardinality or the minimum cardinality property value cannot be
        coerced into a numerical value, then the minimum cardinality property
        must be ignored.</para>

        <para>SCR must support the minimum cardinality property for all
        components even those with component descriptions in older
        namespaces.</para>
      </section>
    </section>
  </section>

  <section xml:id="service.component-deployment">
    <title>Deployment</title>

    <para>A component description contains default information to select
    target services for each reference. However, when a component is deployed,
    it is often necessary to influence the target service selection in a way
    that suits the needs of the deployer. Therefore, SCR uses
    <code>Configuration</code> objects from Configuration Admin to replace and
    extend the component properties for a component configuration. That is,
    through Configuration Admin, a deployer can configure component
    properties.</para>

    <para>A component's configuration PIDs are used as keys for obtaining
    additional component properties from Configuration Admin. When
    <emphasis>matching</emphasis> a configuration PID to a
    <code>Configuration</code> object, SCR must use the
    <code>Configuration</code> object with the best matching PID for the
    component's bundle. See <xref linkend="service.cm-targeted.pids"/> for
    more information on targeted PIDs and <xref linkend="service.cm-extenders.targeted.pids"/> for more information on
    selecting the <code>Configuration</code> object with the best matching
    PID.</para>

    <para>The following situations can arise when looking for
    <code>Configuration</code> objects:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>No Configuration</emphasis> - If the component's
        <code>configuration-policy</code> is set to <code>ignore</code> or
        there are no Configurations with a PID or factory PID matching any of
        the configuration PIDs, then component configurations will not obtain
        component properties from Configuration Admin. Only component
        properties specified in the component description or via the
        <code>ComponentFactory.newInstance</code> method will be used.</para>
      </listitem>

      <listitem>
        <para><emphasis>Not Satisfied</emphasis> - If the component's
        <code>configuration-policy</code> is set to <code>require</code> and,
        for each configuration PID, there is no Configuration with a matching
        PID or factory PID, then the component configuration is not satisfied
        and will not be activated.</para>
      </listitem>

      <listitem>
        <para><emphasis>Single Configuration</emphasis>s - If none of the
        configuration PIDs matches a factory PID, then component
        configurations will obtain additional component properties from
        Configuration Admin.</para>
      </listitem>

      <listitem>
        <para><emphasis>Factory Configuration</emphasis> - If one of the
        configuration PIDs matches a factory PID, with zero or more
        Configurations, then for each Configuration of the factory PID, a
        component configuration must be created that will obtain additional
        component properties from Configuration Admin.</para>

        <para>It is a configuration error if more than one of the
        configuration PIDs match a factory PID and SCR must log an error
        message with the Log Service, if present. If the
        <code>configuration-policy</code> is set to <code>optional</code>, the
        component configuration must be satisfied without the configurations
        PIDs which match a factory PID. If the
        <code>configuration-policy</code> is set to <code>require</code>, the
        component configuration is not satisfied and will not be
        activated.</para>

        <para>A factory configuration must not be used if the component is a
        factory component. This is because SCR is not free to create component
        configurations as necessary to support multiple Configurations. When
        SCR detects this condition, it must log an error message with the Log
        Service, if present, and ignore the component description.</para>
      </listitem>
    </itemizedlist>

    <para>SCR must obtain the <code>Configuration</code> objects from the
    Configuration Admin service using the Bundle Context of the bundle
    containing the component.</para>

    <para>For example, there is a component named <code>com.acme.client</code>
    with a reference named <code>HTTP</code> that requires an Http Service
    which must be bound to a component <code>com.acme.httpserver</code> which
    provides an Http Service. A deployer can establish the following
    configuration:</para>

    <programlisting>[PID=com.acme.client, factoryPID=null]
HTTP.target = (component.name=com.acme.httpserver)</programlisting>

    <section xml:id="i1649746">
      <title>Configuration Changes</title>

      <para>SCR must track changes in the <code>Configuration</code> objects
      matching the configuration PIDs of a component description. Changes
      include the creating, updating and deleting of
      <code>Configuration</code> objects matching the configuration PIDs. The
      actions SCR must take when a configuration change for a component
      configuration occurs are based upon how the
      <code>configuration-policy</code> and <code>modified</code> attributes
      are specified in the component description, whether a component
      configuration becomes satisfied, remains satisfied or becomes
      unsatisfied and the type and number of matching
      <code>Configuration</code> objects.</para>

      <para>With targeted PIDs, multiple <code>Configuration</code> objects
      can exist which can match a configuration PID. Creation of a
      <code>Configuration</code> object with a better matching PID than a
      <code>Configuration</code> object currently being used by a component
      configuration results in a configuration change for the component
      configuration with the new <code>Configuration</code> object replacing
      the currently used <code>Configuration</code> object. Deletion of a
      <code>Configuration</code> object currently being used by a component
      configuration when there is another <code>Configuration</code> object
      matching the configuration PID also results in a configuration change
      for the component configuration with the <code>Configuration</code>
      object having the best matching PID replacing the currently used, and
      now deleted, <code>Configuration</code> object.</para>

      <section>
        <title>Ignore Configuration Policy</title>

        <para>For <code>configuration-policy</code> of <code>ignore</code>,
        component configurations are unaffected by configuration changes since
        the component properties do not include properties from
        <code>Configuration</code> objects.</para>
      </section>

      <section>
        <title>Require Configuration Policy</title>

        <para>For <code>configuration-policy</code> of <code>require</code>,
        component configurations require a <code>Configuration</code> object
        for each specified configuration PID. With a factory configuration,
        there can be zero or more matching <code>Configuration</code> objects
        which will result in a component configuration for each
        <code>Configuration</code> object of the factory configuration. With a
        factory component, multiple component configurations can be created
        all using the matching <code>Configuration</code> objects.</para>

        <para>A configuration change can cause a component configuration to
        become unsatisfied if any of the following occur:</para>

        <itemizedlist>
          <listitem>
            <para>Each configuration PID of the component description does not
            have a matching <code>Configuration</code> object.</para>
          </listitem>

          <listitem>
            <para>A target property change results in a bound service of a
            static reference ceasing to be a target service.</para>
          </listitem>

          <listitem>
            <para>A target property change results in unbound target services
            for a static reference with the <code>greedy</code> policy
            option.</para>
          </listitem>

          <listitem>
            <para>A target property change or minimum cardinality property
            change results in a reference falling below the minimum
            cardinality.</para>
          </listitem>

          <listitem>
            <para>The component description does not specify the
            <code>modified</code> attribute.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Optional Configuration Policy</title>

        <para>For <code>configuration-policy</code> of <code>optional</code>,
        component configurations do not require <code>Configuration</code>
        objects. Since matching <code>Configuration</code> objects are
        optional, component configurations can be satisfied with zero or more
        matched configuration PIDs. If a <code>Configuration</code> object is
        then created which matches a configuration PID, this is a
        configuration change for the component configurations that are not
        using the created <code>Configuration</code> object. If a
        <code>Configuration</code> object is deleted which matches a
        configuration PID, this is a configuration change for the component
        configurations using the deleted <code>Configuration</code>
        object.</para>

        <para>Furthermore, with a factory configuration matching a
        configuration PID, the factory configuration can provide zero or more
        <code>Configuration</code> objects which will result in a component
        configuration for each <code>Configuration</code> object or a single
        component configuration when zero matching <code>Configuration</code>
        objects are provided. With a factory component, multiple component
        configurations can be created all using the <code>Configuration</code>
        objects matching the configuration PIDs.</para>

        <para>A configuration change can cause a component configuration to
        become unsatisfied if any of the following occur:</para>

        <itemizedlist>
          <listitem>
            <para>A target property change results in a bound service of a
            static reference ceasing to be a target service.</para>
          </listitem>

          <listitem>
            <para>A target property change results in unbound target services
            for a static reference with the <code>greedy</code> policy
            option.</para>
          </listitem>

          <listitem>
            <para>A target property change or minimum cardinality property
            change results in a reference falling below the minimum
            cardinality.</para>
          </listitem>

          <listitem>
            <para>The component description does not specify the
            <code>modified</code> attribute.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section xml:id="service.component-configuration.change.actions">
        <title>Configuration Change Actions</title>

        <para>If a component configuration becomes unsatisfied:</para>

        <itemizedlist>
          <listitem>
            <para>SCR must deactivate the component configuration.</para>
          </listitem>

          <listitem>
            <para>If the component configuration was not created from a
            factory component, SCR must attempt to satisfy the component
            configuration with the current configuration state.</para>
          </listitem>
        </itemizedlist>

        <para>If a component configuration remains satisfied:</para>

        <itemizedlist>
          <listitem>
            <para>If the component configuration has been activated, the
            modified method is called to provide the updated component
            properties. See <xref linkend="i1652198"/> for more
            information.</para>
          </listitem>

          <listitem>
            <para>If the component configuration is registered as a service,
            SCR must modify the service properties.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
  </section>

  <section xml:id="service.component-annotations">
    <title>Annotations</title>

    <para>A number of <code>CLASS</code> retention annotations have been
    provided to allow tools to construct the component description XML from
    the Java class files. The Component Annotations are intended to be used
    during build time to generate the component description XML.</para>

    <para>Component Property Types, which are user defined annotations, can be
    used to describe component properties in the component description XML and
    to access those component properties at runtime in a type safe
    manner.</para>

    <section xml:id="service.component-component.annotations">
      <title>Component Annotations</title>

      <para>The Component Annotations provide a convenient way to create the
      component description XML during build time. Since annotations are
      placed in the source file and can use types, fields, and methods, they
      can significantly simplify the use of Declarative Services.</para>

      <para>The Component Annotations are build time annotations because one
      of the key aspects of Declarative Services is its laziness. SCR can
      easily read the component description XML from the bundle, preprocess
      it, and cache the results between framework invocations. This way it is
      unnecessary to load a class from the bundle when the bundle is started
      and/or scan the classes for annotations. Component Annotations are not
      recognized by SCR at runtime.</para>

      <para>The Component Annotations are not inherited, they can only be used
      on a given class, annotations on its super class hierarchy or interfaces
      are not taken into account.</para>

      <para>The primary annotation is the <xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> annotation. It indicates that a class is a
      component. Its defaults create the easiest to use component:</para>

      <itemizedlist>
        <listitem>
          <para>Its name is the class name</para>
        </listitem>

        <listitem>
          <para>It registers all of the class's directly implemented
          interfaces as services</para>
        </listitem>

        <listitem>
          <para>The instance will be shared by all bundles</para>
        </listitem>

        <listitem>
          <para>It is enabled</para>
        </listitem>

        <listitem>
          <para>It is immediate if it has no services, otherwise it is
          delayed</para>
        </listitem>

        <listitem>
          <para>It has an optional configuration policy</para>
        </listitem>

        <listitem>
          <para>The configuration PID is the class name</para>
        </listitem>
      </itemizedlist>

      <para>For example, the following class registers a Speech service that
      can run on a Macintosh:</para>

      <programlisting>pubic interface Speech {
  void say(String what) throws Exception;
}

@Component
public class MacSpeech implements Speech {
    ScriptEngine engine = 
        new ScriptEngineManager().getEngineByName("AppleScript");
    
    public void say(String message) throws Exception {
        engine.eval("say \"" + message.replace('"','\'' + "\"");
    }
}</programlisting>

      <para>The previous example would be processed at build time into a
      component description similar to the following XML:</para>

      <programlisting>&lt;scr:component name="com.example.MacSpeech"
  xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
  &lt;implementation class="com.acme.impl.MacSpeech"/&gt;
  &lt;service&gt;
    &lt;provide interface="com.acme.service.speech.Speech"/&gt;
  &lt;/service&gt;
&lt;/scr:component&gt;</programlisting>

      <para>It is possible to add activate and deactivate methods on the
      component with the <xref linkend="org.osgi.service.component.annotations.Activate" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.component.annotations.Deactivate" xrefstyle="hyperlink"/> annotations. If the component wants to be
      updated for changes in the configuration properties than it can also
      indicated the modified method with the <xref linkend="org.osgi.service.component.annotations.Modified" xrefstyle="hyperlink"/> annotation. For example:</para>

      <programlisting>@Activate
void open(Map&lt;String,?&gt; properties) { ... }

@Deactivate
void close() { ... }

@Modified
void modified(Map&lt;String,?&gt; properties) { ... }</programlisting>

      <para>If a component has dependencies on other services then they can be
      referenced with the <xref linkend="org.osgi.service.component.annotations.Reference" xrefstyle="hyperlink"/> annotation that can be applied to a bind method
      or a field. For a bind method, the defaults for the <xref linkend="org.osgi.service.component.annotations.Reference" xrefstyle="hyperlink"/> annotation are:</para>

      <itemizedlist>
        <listitem>
          <para>The name of the bind method or field is used for the name of
          the reference.</para>
        </listitem>

        <listitem>
          <para>1:1 cardinality.</para>
        </listitem>

        <listitem>
          <para>Static reluctant policy.</para>
        </listitem>

        <listitem>
          <para>The requested service is the type of the first argument of the
          bind method.</para>
        </listitem>

        <listitem>
          <para>It will infer a default unset method and updated method based
          on the name of the bind method.</para>
        </listitem>
      </itemizedlist>

      <para>For example:</para>

      <programlisting>@Reference(cardinality=MULTIPLE, policy=DYNAMIC)
void setLogService( LogService log, Map&lt;String,?&gt; props) { ... }
void unsetLogService( LogService log ) {  ... }
void updatedLogService( Map&lt;String,?&gt; map ) { ...}</programlisting>

      <para>For a field, the defaults for the <xref linkend="org.osgi.service.component.annotations.Reference" xrefstyle="hyperlink"/> annotation are:</para>

      <itemizedlist>
        <listitem>
          <para>The name of the bind method or field is used for the name of
          the reference.</para>
        </listitem>

        <listitem>
          <para>1:1 cardinality if the field is not a collection. 0..n
          cardinality if the field is a collection.</para>
        </listitem>

        <listitem>
          <para>Static reluctant policy if the field is not declared volatile.
          Dynamic reluctant policy if the field is declared volatile.</para>
        </listitem>

        <listitem>
          <para>The requested service is the type of the field.</para>
        </listitem>
      </itemizedlist>

      <para>For example:</para>

      <programlisting>@Reference
volatile Collection&lt;LogService&gt; log;</programlisting>
    </section>

    <section xml:id="service.component-component.property.types">
      <title>Component Property Types</title>

      <para>Component properties can be defined and accessed through a user
      defined annotation type, called a <emphasis>component property
      type</emphasis>, containing the property names, property types and
      default values. A component property type allows properties to be
      defined and accessed in a type safe manner. The following example shows
      the definition of a component property type called <code>Config</code>
      which defines three properties where the name of the property is the
      name of the method, the type of the property is the return type of the
      method and the default value for the property is the default value of
      the method.</para>

      <programlisting>@interface Config {
  boolean enabled() default true;
  String[] names() default {"a", "b"};
  String topic() default "default/topic";
}</programlisting>

      <para>Component property types can be referenced as argument types in
      the component's life cycle methods, activate, deactivate, and modified,
      and used in the method implementation to access component property
      values in a type safe manner. The following example shows the activate
      method taking the example <code>Config</code> component property type as
      an argument type and the method implementation accesses component
      property values by invoking methods on the component property type
      argument.</para>

      <programlisting>@Component
public class MyComponent {
  void activate(Config config) {
    if (config.enabled()) {
      // do something
    }
    for (String name:config.names()) {
      // do something with each name
    }
  }
}</programlisting>

      <para>If a component implementation needs to access component properties
      which are not represented by a component property type, it can use a
      life cycle method signature which also receives the properties map in
      addition to component property types. For example:</para>

      <programlisting>@Component
public class MyComponent {
  void activate(Config config, Map&lt;String, ?&gt; allProperties) {
    if (config.enabled()) {
      // do something
    }
    if (allProperties.get("other.prop") != null) {
      // do something
    }
  }
}</programlisting>

      <para>Component property types must be defined as annotation types even
      though they are not applied as annotations but are rather used as life
      cycle method argument types. This is done for two reasons. First, the
      limitations on annotation type definitions make them well suited for
      component property types. The methods must have no arguments and the
      return types supported are limited to a set which is well suited for
      component properties. Second, annotation types support default values
      which is useful for defining the default value of a component
      property.</para>

      <para>At build time, the component property types must be processed to
      potentially generate <code>property</code> elements in the component
      description. See <xref linkend="service.component-ordering.generated.properties"/>.</para>

      <para>At runtime, when SCR needs to call a lifecycle method on a
      component instance which takes an argument whose type is a component
      property type, SCR must construct an instance of the component property
      type whose methods are backed by the values of the component properties
      for the component instance. This object is then passed to the life cycle
      method which can use the object to obtain the property values in a type
      safe manner.</para>

      <section xml:id="service.component-component.property.mapping">
        <title>Component Property Mapping</title>

        <para>Each method of a configuration property type is mapped to a
        component property. The property name is derived from the method name.
        Certain common property name characters, such as full stop (<code>'.'
        \u002E</code>) are not valid in Java identifiers. So the name of a
        method must be converted to its corresponding property name as
        follows:<itemizedlist>
            <listitem>
              <para>A single dollar sign (<code>'$' \u0024</code>) is removed
              unless it is followed by another dollar sign in which case the
              two consecutive dollar signs (<code>"$$"</code>) are converted
              to a single dollar sign.</para>
            </listitem>

            <listitem>
              <para>A single low line (<code>'_' \u005F</code>) is converted
              into a full stop (<code>'.' \u002E</code>) unless is it followed
              by another low line in which case the two consecutive low lines
              (<code>"__"</code>) are converted to a single low line.</para>
            </listitem>

            <listitem>
              <para>All other characters are unchanged.</para>
            </listitem>
          </itemizedlist></para>

        <para><xref linkend="service.component-component.property.name.mapping"/> contains
        some name mapping examples.</para>

        <table xml:id="service.component-component.property.name.mapping">
          <title>Component Property Name Mapping Examples</title>

          <tgroup cols="2">
            <colspec colnum="1" colwidth="1*"/>

            <colspec colnum="2" colwidth="1*"/>

            <thead>
              <row>
                <entry>Component Property Type Method Name</entry>

                <entry>Component Property Name</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><code>myProperty143</code></entry>

                <entry><code>myProperty143</code></entry>
              </row>

              <row>
                <entry><code>$new</code></entry>

                <entry><code>new</code></entry>
              </row>

              <row>
                <entry><code>my$$prop</code></entry>

                <entry><code>my$prop</code></entry>
              </row>

              <row>
                <entry><code>dot_prop</code></entry>

                <entry><code>dot.prop</code></entry>
              </row>

              <row>
                <entry><code>_secret</code></entry>

                <entry><code>.secret</code></entry>
              </row>

              <row>
                <entry><code>another__prop</code></entry>

                <entry><code>another_prop</code></entry>
              </row>

              <row>
                <entry><code>three___prop</code></entry>

                <entry><code>three_.prop</code></entry>
              </row>

              <row>
                <entry><code>four_$__prop</code></entry>

                <entry><code>four._prop</code></entry>
              </row>

              <row>
                <entry><code>five_$_prop</code></entry>

                <entry><code>five..prop</code></entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>The property type can be directly derived from the type of the
        method. All types supported for annotation elements can be used except
        for annotation types. Method types of an annotation type or array
        thereof are not supported. A tool processing the component property
        types must declare an error during processing in this case.</para>

        <para>If the method type is <code>Class</code> or
        <code>Class[]</code>, then the property type must be
        <code>String</code> or <code>String[]</code>, respectively, whose
        values are fully qualified class names in the form returned by the
        <code>Class.getName()</code> method.</para>

        <para>If the method type is an enumeration type or an array thereof,
        then the property type must be <code>String</code> or
        <code>String[]</code>, respectively, whose values are the names of the
        enum constants in the form returned by the <code>Enum.name()</code>
        method.</para>
      </section>

      <section xml:id="service.component-component.property.value.coercion">
        <title>Coercing Component Property Values</title>

        <para>When a component property type is used as an argument for a life
        cycle method, SCR must create an object that implements the component
        property type and maps the methods of the component property type to
        component properties. The name of the method is converted to the
        property name as described in <xref linkend="service.component-component.property.mapping"/>. The property
        value may need to be coerced to the type of the method. In <xref linkend="service.component-coercion.table"/>, the columns are source
        types, that is, the type of the component property value, and the rows
        are target types, that is, the method types. The property value is
        <emphasis>v</emphasis>; <emphasis>number</emphasis> is a primitive
        numerical type and <emphasis>Number</emphasis> is a wrapper numerical
        type. An invalid coercion is represented by <code>throw</code>. Such a
        coercion attempt must result in throwing a Component Exception when
        the component property type method is called. Any other coercion
        error, such as parsing a non-numerical string to a number or the
        inability to coerce a string into a Class or enum object, must be
        wrapped in a Component Exception and thrown when the component
        property type method is called.</para>

        <table pgwide="1" rowheader="firstcol" xml:id="service.component-coercion.table">
          <title>Coercion From Property Value to Method Type</title>

          <tgroup cols="6">
            <colspec colname="col1" colnum="1" colwidth="1*"/>

            <colspec colname="col2" colnum="2" colwidth="1*"/>

            <colspec colname="col3" colnum="3" colwidth="1*"/>

            <colspec colname="col4" colnum="4" colwidth="1*"/>

            <colspec colname="col5" colnum="5" colwidth="1*"/>

            <colspec colname="col6" colnum="6" colwidth="2*"/>

            <thead>
              <row>
                <entry><subscript>target</subscript> \
                <superscript>source</superscript></entry>

                <entry>String</entry>

                <entry>Boolean</entry>

                <entry>Character</entry>

                <entry><emphasis>Number</emphasis></entry>

                <entry>Collection/array</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>String</entry>

                <entry><emphasis>v</emphasis></entry>

                <entry><emphasis>v</emphasis>. toString()</entry>

                <entry><emphasis>v</emphasis>. toString()</entry>

                <entry><emphasis>v</emphasis>. toString()</entry>

                <entry>If <emphasis>v</emphasis> has no elements,
                <code>null</code>; otherwise the first element of
                <emphasis>v</emphasis> is coerced.</entry>
              </row>

              <row>
                <entry>boolean</entry>

                <entry>Boolean. parseBoolean( <emphasis>v</emphasis> )</entry>

                <entry><emphasis>v</emphasis>. booleanValue()</entry>

                <entry><emphasis>v</emphasis>. charValue() != 0</entry>

                <entry><emphasis>v</emphasis>.
                <emphasis>number</emphasis>Value() != 0</entry>

                <entry>If <emphasis>v</emphasis> has no elements,
                <code>false</code>; otherwise the first element of
                <emphasis>v</emphasis> is coerced.</entry>
              </row>

              <row>
                <entry>char</entry>

                <entry><emphasis>v</emphasis>. length() &gt; 0 ?
                <emphasis>v</emphasis>. charAt(0) : 0</entry>

                <entry><emphasis>v</emphasis>. booleanValue() ? 1 : 0</entry>

                <entry><emphasis>v</emphasis>. charValue()</entry>

                <entry>(char) <emphasis>v</emphasis>.
                <emphasis>number</emphasis>Value()</entry>

                <entry>If <emphasis>v</emphasis> has no elements, 0; otherwise
                the first element of <emphasis>v</emphasis> is
                coerced.</entry>
              </row>

              <row>
                <entry><emphasis>number</emphasis></entry>

                <entry><emphasis>Number</emphasis>.
                parse<emphasis>Number</emphasis>( <emphasis>v</emphasis>
                )</entry>

                <entry><emphasis>v</emphasis>. booleanValue() ? 1 : 0</entry>

                <entry>(<emphasis>number</emphasis>) <emphasis>v</emphasis>.
                charValue()</entry>

                <entry><emphasis>v</emphasis>.
                <emphasis>number</emphasis>Value()</entry>

                <entry>If <emphasis>v</emphasis> has no elements, 0; otherwise
                the first element of <emphasis>v</emphasis> is
                coerced.</entry>
              </row>

              <row>
                <entry>Class</entry>

                <entry>Bundle. loadClass( <emphasis>v</emphasis> )</entry>

                <entry><code>throw</code></entry>

                <entry><code>throw</code></entry>

                <entry><code>throw</code></entry>

                <entry>If <emphasis>v</emphasis> has no elements,
                <code>null</code>; otherwise the first element of
                <emphasis>v</emphasis> is coerced.</entry>
              </row>

              <row>
                <entry><emphasis>EnumType</emphasis></entry>

                <entry><emphasis>EnumType</emphasis>. valueOf(
                <emphasis>v</emphasis> )</entry>

                <entry><code>throw</code></entry>

                <entry><code>throw</code></entry>

                <entry><code>throw</code></entry>

                <entry>If <emphasis>v</emphasis> has no elements,
                <code>null</code>; otherwise the first element of
                <emphasis>v</emphasis> is coerced.</entry>
              </row>

              <row>
                <entry>annotation type</entry>

                <entry><code>throw</code></entry>

                <entry><code>throw</code></entry>

                <entry><code>throw</code></entry>

                <entry><code>throw</code></entry>

                <entry><code>throw</code></entry>
              </row>

              <row>
                <entry>array</entry>

                <entry nameend="col5" namest="col2">A single element array is
                created and <emphasis>v</emphasis> is coerced into the single
                element of the new array.</entry>

                <entry colname="col6">An array the size of
                <emphasis>v</emphasis> is created and each element of
                <emphasis>v</emphasis> is coerced into the corresponding
                element of the new array.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>Component properties whose names do not map to component
        property type methods are ignored. If there is no corresponding
        component property for a component property type method, the component
        property type method must:</para>

        <itemizedlist>
          <listitem>
            <para>Return 0 for numerical and char method types.</para>
          </listitem>

          <listitem>
            <para>Return <code>false</code> for boolean method type.</para>
          </listitem>

          <listitem>
            <para>Return <code>null</code> for String, Class, enum and array
            method types.</para>
          </listitem>

          <listitem>
            <para>Throw a ComponentException for annotation method
            types.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section xml:id="service.component-ordering.generated.properties">
      <title>Ordering of Generated Properties</title>

      <para>The <xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> annotation contains two ways to define component
      properties via the <xref linkend="org.osgi.service.component.annotations.Component.property--" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.component.annotations.Component.properties--" xrefstyle="hyperlink"/> elements. See <xref linkend="service.component-property.properties.elements"/>. If Component
      Annotations are used to describe the component, then any component
      property types referenced in the signatures of the component's life
      cycle methods must also be processed since component property types can
      be used to define component property values as well. See <xref linkend="service.component-component.property.types"/>. A tool
      processing the Component Annotations and the component property types
      must write the defined component properties into the generated component
      description in the following order.</para>

      <orderedlist>
        <listitem>
          <para>Properties defined through component property types used in
          the signatures of the life cycle methods.</para>

          <para>If any of the referenced component property types have methods
          with defaults, then the generated component description must include
          a <code>property</code> element for each such method with the
          property name mapped from the method name, the property type mapped
          from the method type, and the property value set to the method's
          default value. See <xref linkend="service.component-component.property.mapping"/>. The
          generated <code>property</code> elements must be added to the
          component description by processing the component property types in
          the following order. First, the component property types used as
          arguments to the activate method, followed by the component property
          types used as arguments to the modified method and finally the
          component property types used as arguments to the deactivate method.
          If a method has more than one component property type argument, the
          component property types are processed in the order of the method
          arguments.</para>

          <para>For component property type methods without a default value, a
          <code>property</code> element must not be generated.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.component.annotations.Component.property--" xrefstyle="hyperlink"/> element of the <xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> annotation.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.component.annotations.Component.properties--" xrefstyle="hyperlink"/> element of the <xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> annotation.</para>
        </listitem>
      </orderedlist>

      <para>This means that the properties defined through component property
      types are declared first in the generated component description,
      followed by all properties defined through the <xref linkend="org.osgi.service.component.annotations.Component.property--" xrefstyle="hyperlink"/> element of the <xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> annotation and finally the properties entries
      defined through the <xref linkend="org.osgi.service.component.annotations.Component.properties--" xrefstyle="hyperlink"/> element of the <xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> annotation.</para>

      <para>Since property values defined later in the component description
      override property values defined earlier in the component description,
      this means that property values defined in <xref linkend="org.osgi.service.component.annotations.Component.properties--" xrefstyle="hyperlink"/> element of the <xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> annotation can override property values defined
      in <xref linkend="org.osgi.service.component.annotations.Component.property--" xrefstyle="hyperlink"/> element of the <xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> annotation which can override values defined by
      default values in the component property types used in life cycle method
      signatures.</para>
    </section>
  </section>

  <section xml:id="i1578406">
    <title>Service Component Runtime</title>

    <para>Service Component Runtime (SCR) is the actor that manages the
    components and their life cycle and allows introspection of the
    components.</para>

    <section xml:id="i1616910">
      <title>Relationship to OSGi Framework</title>

      <para>SCR must have access to the Bundle Context of any bundle that
      contains a component. SCR needs access to the Bundle Context for the
      following reasons:</para>

      <itemizedlist>
        <listitem>
          <para>To be able to register and get services on behalf of a bundle
          with components.</para>
        </listitem>

        <listitem>
          <para>To interact with the Configuration Admin on behalf of a bundle
          with components.</para>
        </listitem>

        <listitem>
          <para>To provide a component its Bundle Context when the Component
          Context <code>getBundleContext</code> method is called.</para>
        </listitem>
      </itemizedlist>

      <para>SCR should use the <code>Bundle.getBundleContext()</code> method
      to obtain the Bundle Context reference.</para>
    </section>

    <section>
      <title>Starting and Stopping SCR</title>

      <para>When SCR is implemented as a bundle, any component configurations
      activated by SCR must be deactivated when the SCR bundle is stopped.
      When the SCR bundle is started, it must process any components that are
      declared in bundles that are started. This includes bundles which are
      started and are awaiting lazy activation.</para>
    </section>

    <section>
      <title>Logging Error Messages</title>

      <para>When SCR must log an error message to the Log Service, it must use
      a Log Service obtained using the component's Bundle Context so that the
      resulting Log Entry is associated with the component's bundle.</para>

      <para>If SCR is unable to obtain, or use, a Log Service using the
      component's Bundle Context, then SCR must log the error message to a Log
      Service obtained using SCR's bundle context to ensure the error message
      is logged.</para>
    </section>

    <section xml:id="i1641644">
      <title>Locating Component Methods and Fields</title>

      <para>SCR will need to locate activate, deactivate, modified, bind,
      updated, and unbind methods as well as fields in a component instance.
      These members will be located, and called or modified, using reflection.
      The declared members of each class in the component implementation
      class's hierarchy are examined for a suitable member. If a suitable
      member is found in a class, and it is accessible to the component
      implementation class, then that member must be used. If suitable members
      are found in a class but none of the suitable members are accessible by
      the component implementation class, then the search for suitable members
      terminates with no suitable member having been located. If no suitable
      members are found in a class, the search continues in the
      superclass.</para>

      <para>Only members that are accessible to the component implementation
      class will be used. If the member has the <code>public</code> or
      <code>protected</code> access modifier, then access is permitted.
      Otherwise, if the member has the <code>private</code> access modifier,
      then access is permitted only if the member is declared in the component
      implementation class. Otherwise, if the member has default access, also
      known as package private access, then access is permitted only if the
      member is declared in the component implementation class or if the
      member is declared in a superclass and all classes in the hierarchy from
      the component implementation class to the superclass, inclusive, are in
      the same package and loaded by the same class loader.</para>

      <para>It is recommended that these members should not be declared with
      the <code>public</code> access modifier so that they do not appear as
      public members on the component instance when it is used as a service
      object. Having these members declared <code>public</code> allows any
      code to call or access the members with reflection, even if a Security
      Manager is installed. These members are generally intended to only be
      called or modified by SCR.</para>
    </section>

    <section>
      <title>Bundle Activator Interaction</title>

      <para>A bundle containing components may also declare a Bundle
      Activator. Such a bundle may also be marked for lazy activation. Since
      components are activated by SCR and Bundle Activators are called by the
      OSGi Framework, a bundle using both components and a Bundle Activator
      must take care. The Bundle Activator's start method must not rely upon
      SCR having activated any of the bundle's components. However, the
      components can rely upon the Bundle Activator's start method having been
      called. That is, there is a <emphasis>happens-before</emphasis>
      relationship between the Bundle Activator's start method being run and
      the components being activated.</para>
    </section>

    <section xml:id="service.component-introspection">
      <title>Introspection</title>

      <para>SCR provides an introspection API for examining the runtime state
      of the components in bundles processed by SCR. SCR must register a <xref linkend="org.osgi.service.component.runtime.ServiceComponentRuntime" xrefstyle="hyperlink"/> service upon startup. The Service Component
      Runtime service provides methods to inspect the component descriptions
      and component configurations as well as inspect and modify the enabled
      state of components. The service uses <emphasis>Data Transfer Objects
      (DTO)</emphasis> as arguments and return values. The rules for Data
      Transfer Objects are specified in <xref linkend="intro.core.release" xrefstyle="template:%t"/>.</para>

      <para>The Service Component Runtime service provides the following
      methods.</para>

      <para><itemizedlist>
          <listitem>
            <para><xref linkend="org.osgi.service.component.runtime.ServiceComponentRuntime.getComponentDescriptionDTOs-Bundle...-" xrefstyle="hyperlink"/> - For each specified bundle, if the bundle
            is active and processed by SCR, the returned collection will
            contain a <xref linkend="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO" xrefstyle="hyperlink"/> for each valid component description in
            the bundle.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.component.runtime.ServiceComponentRuntime.getComponentDescriptionDTO-Bundle-String-" xrefstyle="hyperlink"/> - If the specified bundle is active and
            processed by SCR, and the specified bundle contains a valid
            component description with the specified name, the method will
            return a <xref linkend="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO" xrefstyle="hyperlink"/> for the component description.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.component.runtime.ServiceComponentRuntime.getComponentConfigurationDTOs-ComponentDescriptionDTO-" xrefstyle="hyperlink"/> - If the specified <xref linkend="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO" xrefstyle="hyperlink"/> represents a valid component description
            from an active bundle processed by SCR, the returned collection
            will contain a <xref linkend="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO" xrefstyle="hyperlink"/> for each component configuration of the
            component.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.component.runtime.ServiceComponentRuntime.isComponentEnabled-ComponentDescriptionDTO-" xrefstyle="hyperlink"/> - Returns <code>true</code> if the
            specified Component Description DTO represents a valid component
            description from an active bundle processed by SCR, and the
            component is enabled. Otherwise, the method returns
            <code>false</code>.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.component.runtime.ServiceComponentRuntime.enableComponent-ComponentDescriptionDTO-" xrefstyle="hyperlink"/> - If the specified Component Description
            DTO represents a valid component description from an active bundle
            processed by SCR, the component is enabled. This method must
            return after changing the enabled state of the specified
            component. Any actions that result from this, such as activating
            or deactivating a component configuration, must occur
            asynchronously to this method call. The method returns a <xref linkend="org.osgi.util.promise.Promise" xrefstyle="hyperlink"/>
            that will be resolved when the actions that result from changing
            the enabled state of the specified component have
            completed.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.component.runtime.ServiceComponentRuntime.disableComponent-ComponentDescriptionDTO-" xrefstyle="hyperlink"/> - If the specified Component Description
            DTO represents a valid component description from an active bundle
            processed by SCR, the component is disabled. This method must
            return after changing the enabled state of the specified
            component. Any actions that result from this, such as activating
            or deactivating a component configuration, must occur
            asynchronously to this method call. The method returns a <xref linkend="org.osgi.util.promise.Promise" xrefstyle="hyperlink"/>
            that will be resolved when the actions that result from changing
            the enabled state of the specified component have
            completed.</para>
          </listitem>
        </itemizedlist></para>

      <para>The runtime state of the components can change at any time. So any
      information returned by these methods only provides a snapshot of the
      state at the time of the method call.</para>

      <para>There are a number of DTOs available via the Service Component
      Runtime service.</para>

      <figure>
        <title>Service Component Runtime DTOs</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.500in" contentwidth="7.000in" fileref="dto-structure.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The two main DTOs are <xref linkend="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO" xrefstyle="hyperlink"/>, which represents a component description, and
      <xref linkend="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO" xrefstyle="hyperlink"/>, which represents a component configuration. The
      Component Description DTO contains an array of <xref linkend="org.osgi.service.component.runtime.dto.ReferenceDTO" xrefstyle="hyperlink"/> objects which represent each declared reference
      in the component description. The Component Configuration DTO contains
      an array of <xref linkend="org.osgi.service.component.runtime.dto.SatisfiedReferenceDTO" xrefstyle="hyperlink"/> objects and an array of <xref linkend="org.osgi.service.component.runtime.dto.UnsatisfiedReferenceDTO" xrefstyle="hyperlink"/> objects. A Satisfied Reference DTO represents a
      satisfied reference of the component configuration and an Unsatisfied
      Reference DTO represents an unsatisfied reference of the component
      configuration. The Component Configuration DTO for a satisfied component
      configuration must contain no Unsatisfied Reference DTOs. The Component
      Configuration DTO for an unsatisfied component configuration may contain
      some Satisfied Reference DTOs and some Unsatisfied Reference DTOs. This
      information can be used to diagnose why the component configuration is
      not satisfied.</para>
    </section>

    <section xml:id="service.component-capabilities">
      <title>Capabilities</title>

      <para>SCR must provide the following capabilities.</para>

      <itemizedlist>
        <listitem>
          <para>A capability in the <link linkend="service.namespaces-osgi.extender.namespace"><code>osgi.extender</code></link>
          namespace declaring an extender with the name <xref linkend="org.osgi.service.component.ComponentConstants.COMPONENT_CAPABILITY_NAME" xrefstyle="hyperlink"/>. This capability must also declare a uses
          constraint for the <code>org.osgi.service.component</code> package.
          For example:</para>

          <programlisting>Provide-Capability: osgi.extender;
    osgi.extender="osgi.component";
    version:Version="1.3";
    uses:="org.osgi.service.component"</programlisting>

          <para>This capability must follow the rules defined for the <xref linkend="service.namespaces-osgi.extender.namespace"/>.</para>

          <para>A bundle that contains service components should require the
          <code>osgi.extender</code> capability from SCR. This requirement
          will wire the bundle to the SCR implementation and ensure that SCR
          is using the same <code>org.osgi.service.component</code> package as
          the bundle if the bundle uses that package.</para>

          <programlisting>Require-Capability: osgi.extender;
  filter:="(&amp;(osgi.extender=osgi.component)(version&gt;=1.3)(!(version&gt;=2.0)))"</programlisting>

          <para>SCR must only process a bundle's service components if one of
          the following is true:</para>

          <itemizedlist>
            <listitem>
              <para>The bundle's wiring has a required wire for at least one
              <code>osgi.extender</code> capability with the name
              <code>osgi.component</code> and the first of these required
              wires is wired to SCR.</para>
            </listitem>

            <listitem>
              <para>The bundle's wiring has no required wire for an
              <code>osgi.extender</code> capability with the name
              <code>osgi.component</code>.</para>
            </listitem>
          </itemizedlist>

          <para>Otherwise, SCR must not process the bundle's service
          components.</para>
        </listitem>

        <listitem>
          <para>A capability in the <link linkend="service.namespaces-osgi.service.namespace"><code>osgi.service</code></link>
          namespace representing the <xref linkend="org.osgi.service.component.runtime.ServiceComponentRuntime" xrefstyle="hyperlink"/> service. This capability must also declare a
          uses constraint for the
          <code>org.osgi.service.component.runtime</code> package. For
          example:</para>

          <programlisting>Provide-Capability: osgi.service;
    objectClass:List&lt;String&gt;=
      "org.osgi.service.component.runtime.ServiceComponentRuntime";
    uses:="org.osgi.service.component.runtime"</programlisting>

          <para>This capability must follow the rules defined for the <xref linkend="service.namespaces-osgi.service.namespace"/>.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>When Java permissions are enabled, SCR must perform the following
    security procedures.</para>

    <section>
      <title>Service Permissions</title>

      <para>Declarative services are built upon the existing OSGi service
      infrastructure. This means that Service Permission applies regarding the
      ability to publish, find or bind services.</para>

      <para>If a component specifies a service, then component configurations
      for the component cannot be satisfied unless the component's bundle has
      <code>ServicePermission[&lt;provides&gt;, REGISTER]</code> for each
      provided interface specified for the service.</para>

      <para>If a component's reference does not specify optional cardinality,
      the reference cannot be satisfied unless the component's bundle has
      <code>ServicePermission[&lt;interface&gt;, GET]</code> for the specified
      interface in the reference. If the reference specifies optional
      cardinality but the component's bundle does not have
      <code>ServicePermission[&lt;interface&gt;, GET]</code> for the specified
      interface in the reference, no service must be bound for this
      reference.</para>

      <para>If a component is a factory component, then the above Service
      Permission checks still apply. But the component's bundle is not
      required to have <code>ServicePermission[ComponentFactory,
      REGISTER]</code> as the Component Factory service is registered by
      SCR.</para>

      <para>SCR must have <code>ServicePermission[ServiceComponentRuntime,
      REGISTER]</code> permission to register the <xref linkend="org.osgi.service.component.runtime.ServiceComponentRuntime" xrefstyle="hyperlink"/> service. Administrative bundles wishing to use
      the <xref linkend="org.osgi.service.component.runtime.ServiceComponentRuntime" xrefstyle="hyperlink"/> service must have
      <code>ServicePermission[ServiceComponentRuntime, GET]</code> permission.
      In general, this permission should only be granted to administrative
      bundles to limit access to the potentially intrusive methods provided by
      this service.</para>
    </section>

    <section xml:id="i1617328">
      <title>Required Admin Permission</title>

      <para>SCR requires <code>AdminPermission[*,CONTEXT]</code> because it
      needs access to the bundle's Bundle Context object with the
      <code>Bundle.getBundleContext()</code> method.</para>
    </section>

    <section>
      <title>Using hasPermission</title>

      <para>SCR does all publishing, finding and binding of services on behalf
      of the component using the Bundle Context of the component's bundle.
      This means that normal stack-based permission checks will check SCR and
      not the component's bundle. Since SCR is registering and getting
      services on behalf of a component's bundle, SCR must call the
      <code>Bundle.hasPermission</code> method to validate that a component's
      bundle has the necessary permission to register or get a service.</para>
    </section>

    <section xml:id="service.component-multi.location.regions">
      <title>Configuration Multi-Locations and Regions</title>

      <para>SCR must ensure a bundle has the proper
      <code>ConfigurationPermission</code> for a Configuration used by its
      components when the Configuration has a multi-location. See <xref linkend="service.cm-multi.locations"/> for more information on
      multi-locations and <xref linkend="service.cm-regions"/> for more
      information on regions. If a bundle does not have the necessary
      permission for a multi-location Configuration, then SCR must act as if
      the Configuration does not exist for the bundle.</para>
    </section>
  </section>

  <section xml:id="i1523991">
    <title>Component Description Schema</title>

    <para>This XML Schema defines the component description grammar.</para>

    <programlisting role="pgwide">&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"
    targetNamespace="http://www.osgi.org/xmlns/scr/v1.3.0"
    elementFormDefault="unqualified"
    attributeFormDefault="unqualified"
    version="1.3.0"&gt;

    &lt;annotation&gt;
        &lt;documentation xml:lang="en"&gt;
            This is the XML Schema for component descriptions used by
            the Service Component Runtime (SCR). Component description
            documents may be embedded in other XML documents. SCR will
            process all XML documents listed in the Service-Component
            manifest header of a bundle. XML documents containing
            component descriptions may contain a single, root component
            element or one or more component elements embedded in a
            larger document. Use of the namespace for component 
            descriptions is mandatory. The attributes and subelements 
            of a component element are always unqualified.
        &lt;/documentation&gt;
    &lt;/annotation&gt;
    &lt;element name="component" type="scr:Tcomponent" /&gt;
    &lt;complexType name="Tcomponent"&gt;
        &lt;sequence&gt;
            &lt;annotation&gt;
                &lt;documentation xml:lang="en"&gt;
                    Implementations of SCR must not require component
                    descriptions to specify the subelements of the component
                    element in the order as required by the schema. SCR
                    implementations must allow other orderings since
                    arbitrary orderings do not affect the meaning of the
                    component description. Only the relative ordering of
                    property and properties element have meaning.
                &lt;/documentation&gt;
            &lt;/annotation&gt;
            &lt;choice minOccurs="0" maxOccurs="unbounded"&gt;
                &lt;element name="property" type="scr:Tproperty" /&gt;
                &lt;element name="properties" type="scr:Tproperties" /&gt;
            &lt;/choice&gt;
            &lt;element name="service" type="scr:Tservice" minOccurs="0"
                maxOccurs="1" /&gt;
            &lt;element name="reference" type="scr:Treference"
                minOccurs="0" maxOccurs="unbounded" /&gt;
            &lt;element name="implementation" type="scr:Timplementation" /&gt;
            &lt;any namespace="##any" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;attribute name="enabled" type="boolean" default="true"
            use="optional" /&gt;
        &lt;attribute name="name" type="token" use="optional"&gt;
            &lt;annotation&gt;
                &lt;documentation xml:lang="en"&gt;
                    The default value of this attribute is the value of
                    the class attribute of the nested implementation
                    element. If multiple component elements use the same 
                    value for the class attribute of their nested 
                    implementation element, then using the default value 
                    for this attribute will result in duplicate names. 
                    In this case, this attribute must be specified with 
                    a unique value.
                &lt;/documentation&gt;
            &lt;/annotation&gt;
        &lt;/attribute&gt;
        &lt;attribute name="factory" type="string" use="optional" /&gt;
        &lt;attribute name="immediate" type="boolean" use="optional" /&gt;
        &lt;attribute name="configuration-policy"
            type="scr:Tconfiguration-policy" default="optional" use="optional" /&gt;
        &lt;attribute name="activate" type="token" use="optional"
            default="activate" /&gt;
        &lt;attribute name="deactivate" type="token" use="optional"
            default="deactivate" /&gt;
        &lt;attribute name="modified" type="token" use="optional" /&gt;
        &lt;attribute name="configuration-pid" use="optional"&gt;
            &lt;annotation&gt;
                &lt;documentation xml:lang="en"&gt;
                    The default value of this attribute is the value of
                    the name attribute of this element.
                &lt;/documentation&gt;
            &lt;/annotation&gt;
            &lt;simpleType&gt;
                &lt;restriction&gt;
                    &lt;simpleType&gt;
                        &lt;list itemType="token" /&gt;
                    &lt;/simpleType&gt;
                    &lt;minLength value="1" /&gt;
                &lt;/restriction&gt;
            &lt;/simpleType&gt;
        &lt;/attribute&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;
    &lt;complexType name="Timplementation"&gt;
        &lt;sequence&gt;
            &lt;any namespace="##any" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;attribute name="class" type="token" use="required" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;
    &lt;complexType name="Tproperty"&gt;
        &lt;simpleContent&gt;
            &lt;extension base="string"&gt;
                &lt;attribute name="name" type="string" use="required" /&gt;
                &lt;attribute name="value" type="string" use="optional" /&gt;
                &lt;attribute name="type" type="scr:Tproperty_type"
                    default="String" use="optional" /&gt;
                &lt;anyAttribute processContents="lax" /&gt;
            &lt;/extension&gt;
        &lt;/simpleContent&gt;
    &lt;/complexType&gt;
    &lt;complexType name="Tproperties"&gt;
        &lt;sequence&gt;
            &lt;any namespace="##any" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;attribute name="entry" type="string" use="required" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;
    &lt;complexType name="Tservice"&gt;
        &lt;sequence&gt;
            &lt;element name="provide" type="scr:Tprovide" minOccurs="1"
                maxOccurs="unbounded" /&gt;
            &lt;!-- It is non-deterministic, per W3C XML Schema 1.0: 
            http://www.w3.org/TR/xmlschema-1/#cos-nonambig
            to use name space="##any" below. --&gt;
            &lt;any namespace="##other" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;attribute name="scope" type="scr:Tservice_scope" default="singleton"
            use="optional" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;
    &lt;complexType name="Tprovide"&gt;
        &lt;sequence&gt;
            &lt;any namespace="##any" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;attribute name="interface" type="token" use="required" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;
    &lt;complexType name="Treference"&gt;
        &lt;sequence&gt;
            &lt;any namespace="##any" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;attribute name="name" type="token" use="optional"&gt;
            &lt;annotation&gt;
                &lt;documentation xml:lang="en"&gt;
                    The default value of this attribute is the value of
                    the interface attribute of this element. If multiple 
                    instances of this element within a component element 
                    use the same value for the interface attribute, then 
                    using the default value for this attribute will result 
                    in duplicate names. In this case, this attribute 
                    must be specified with a unique value.
                &lt;/documentation&gt;
            &lt;/annotation&gt;
        &lt;/attribute&gt;
        &lt;attribute name="interface" type="token" use="required" /&gt;
        &lt;attribute name="cardinality" type="scr:Tcardinality"
            default="1..1" use="optional" /&gt;
        &lt;attribute name="policy" type="scr:Tpolicy" default="static"
            use="optional" /&gt;
        &lt;attribute name="policy-option" type="scr:Tpolicy-option" 
            default="reluctant" use="optional" /&gt;
        &lt;attribute name="target" type="string" use="optional" /&gt;
        &lt;attribute name="bind" type="token" use="optional" /&gt;
        &lt;attribute name="unbind" type="token" use="optional" /&gt;
        &lt;attribute name="updated" type="token" use="optional" /&gt;
        &lt;attribute name="scope" type="scr:Treference_scope" default="bundle"
            use="optional" /&gt;
        &lt;attribute name="field" type="token" use="optional" /&gt;
        &lt;attribute name="field-option" type="scr:Tfield-option" default="replace"
            use="optional" /&gt;
        &lt;attribute name="field-collection-type" type="scr:Tfield-collection-type"
            default="service" use="optional" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;
    &lt;simpleType name="Tproperty_type"&gt;
        &lt;restriction base="string"&gt;
            &lt;enumeration value="String" /&gt;
            &lt;enumeration value="Long" /&gt;
            &lt;enumeration value="Double" /&gt;
            &lt;enumeration value="Float" /&gt;
            &lt;enumeration value="Integer" /&gt;
            &lt;enumeration value="Byte" /&gt;
            &lt;enumeration value="Character" /&gt;
            &lt;enumeration value="Boolean" /&gt;
            &lt;enumeration value="Short" /&gt;
        &lt;/restriction&gt;
    &lt;/simpleType&gt;
    &lt;simpleType name="Tcardinality"&gt;
        &lt;restriction base="string"&gt;
            &lt;enumeration value="0..1" /&gt;
            &lt;enumeration value="0..n" /&gt;
            &lt;enumeration value="1..1" /&gt;
            &lt;enumeration value="1..n" /&gt;
        &lt;/restriction&gt;
    &lt;/simpleType&gt;
    &lt;simpleType name="Tpolicy"&gt;
        &lt;restriction base="string"&gt;
            &lt;enumeration value="static" /&gt;
            &lt;enumeration value="dynamic" /&gt;
        &lt;/restriction&gt;
    &lt;/simpleType&gt;
    &lt;simpleType name="Tpolicy-option"&gt;
        &lt;restriction base="string"&gt;
            &lt;enumeration value="reluctant" /&gt;
            &lt;enumeration value="greedy" /&gt;
        &lt;/restriction&gt;
    &lt;/simpleType&gt;
    &lt;simpleType name="Tconfiguration-policy"&gt;
        &lt;restriction base="string"&gt;
            &lt;enumeration value="optional" /&gt;
            &lt;enumeration value="require" /&gt;
            &lt;enumeration value="ignore" /&gt;
        &lt;/restriction&gt;
    &lt;/simpleType&gt;
    &lt;simpleType name="Tservice_scope"&gt;
        &lt;restriction base="string"&gt;
            &lt;enumeration value="singleton" /&gt;
            &lt;enumeration value="bundle" /&gt;
            &lt;enumeration value="prototype" /&gt;
        &lt;/restriction&gt;
    &lt;/simpleType&gt;
    &lt;simpleType name="Treference_scope"&gt;
        &lt;restriction base="string"&gt;
            &lt;enumeration value="bundle" /&gt;
            &lt;enumeration value="prototype" /&gt;
            &lt;enumeration value="prototype_required" /&gt;
        &lt;/restriction&gt;
    &lt;/simpleType&gt;
    &lt;simpleType name="Tfield-option"&gt;
        &lt;restriction base="string"&gt;
            &lt;enumeration value="replace" /&gt;
            &lt;enumeration value="update" /&gt;
        &lt;/restriction&gt;
    &lt;/simpleType&gt;
    &lt;simpleType name="Tfield-collection-type"&gt;
        &lt;restriction base="string"&gt;
            &lt;enumeration value="service" /&gt;
            &lt;enumeration value="properties" /&gt;
            &lt;enumeration value="reference" /&gt;
            &lt;enumeration value="serviceobjects" /&gt;
            &lt;enumeration value="tuple" /&gt;
        &lt;/restriction&gt;
    &lt;/simpleType&gt;
    &lt;attribute name="must-understand" type="boolean"&gt;
        &lt;annotation&gt;
            &lt;documentation xml:lang="en"&gt;
                This attribute should be used by extensions to documents
                to require that the document consumer understand the
                extension. This attribute must be qualified when used.
            &lt;/documentation&gt;
        &lt;/annotation&gt;
    &lt;/attribute&gt;
&lt;/schema&gt;
</programlisting>

    <para>SCR must not require component descriptions to specify the elements
    in the order required by the schema. SCR must allow other orderings since
    arbitrary orderings of these elements do not affect the meaning of the
    component description. Only the relative ordering of
    <code>property</code>, <code>properties</code> and <code>reference</code>
    elements have meaning for overriding previously set property
    values.</para>

    <para>The schema is also available in digital form from <xref linkend="i1655737"/>.</para>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.component" xml:id="org.osgi.service.component" xml:base="../../generated/javadoc/docbook/org.osgi.service.component.xml">
   <title>org.osgi.service.component</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.component-version">Version 1.3</releaseinfo>
      <edition xml:id="org.osgi.service.component-version.number">1.3</edition>
   </info>
   <para>
Service Component Package Version 1.3.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.component; version="[1.3,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.component; version="[1.3,1.4)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.ComponentConstants">
                  <code>ComponentConstants</code>
               </link> - 
Defines standard names for Service Component constants.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.ComponentContext">
                  <code>ComponentContext</code>
               </link> - 
A Component Context object is used by a component instance to interact with
 its execution context including locating services by reference name.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.ComponentException">
                  <code>ComponentException</code>
               </link> - 
Unchecked exception which may be thrown by Service Component Runtime.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.ComponentFactory">
                  <code>ComponentFactory</code>
               </link> - 
When a component is declared with the <code>factory</code> attribute on its
 <code>component</code> element, Service Component Runtime will register a
 Component Factory service to allow new component configurations to be created
 and activated rather than automatically creating and activating component
 configuration as necessary.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.ComponentInstance">
                  <code>ComponentInstance</code>
               </link> - 
A ComponentInstance encapsulates a component instance of an activated
 component configuration.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.ComponentServiceObjects">
                  <code>ComponentServiceObjects</code>
               </link> - 
Allows multiple service objects for a service to be obtained.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="ComponentConstants" xml:id="org.osgi.service.component.ComponentConstants">
      <title>public interface ComponentConstants</title>
      <para>
Defines standard names for Service Component constants.
   </para>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="field" xreflabel="COMPONENT_CAPABILITY_NAME" xml:id="org.osgi.service.component.ComponentConstants.COMPONENT_CAPABILITY_NAME">
         <title>public static final String COMPONENT_CAPABILITY_NAME = "osgi.component"</title>
         <para>
Capability name for Service Component Runtime.
 
 </para>
         <para>
 Used in <code>Provide-Capability</code> and <code>Require-Capability</code>
 manifest headers with the <code>osgi.extender</code> namespace. For example:
 
 </para>
         <programlisting> Require-Capability: osgi.extender;
  filter:="(&amp;(osgi.extender=osgi.component)(version&gt;=1.3)(!(version&gt;=2.0)))"</programlisting>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="COMPONENT_FACTORY" xml:id="org.osgi.service.component.ComponentConstants.COMPONENT_FACTORY">
         <title>public static final String COMPONENT_FACTORY = "component.factory"</title>
         <para>
A service registration property for a Component Factory that contains the
 value of the <code>factory</code> attribute. The value of this property must
 be of type <code>String</code>.
   </para>
      </section>
      <section role="field" xreflabel="COMPONENT_ID" xml:id="org.osgi.service.component.ComponentConstants.COMPONENT_ID">
         <title>public static final String COMPONENT_ID = "component.id"</title>
         <para>
A component property that contains the generated id for a component
 configuration. The value of this property must be of type <code>Long</code>.
 
 </para>
         <para>
 The value of this property is assigned by Service Component Runtime when
 a component configuration is created. Service Component Runtime assigns a
 unique value that is larger than all previously assigned values since
 Service Component Runtime was started. These values are NOT persistent
 across restarts of Service Component Runtime.</para>
      </section>
      <section role="field" xreflabel="COMPONENT_NAME" xml:id="org.osgi.service.component.ComponentConstants.COMPONENT_NAME">
         <title>public static final String COMPONENT_NAME = "component.name"</title>
         <para>
A component property for a component configuration that contains the name
 of the component as specified in the <code>name</code> attribute of the
 <code>component</code> element. The value of this property must be of type
 <code>String</code>.
   </para>
      </section>
      <section role="field" xreflabel="DEACTIVATION_REASON_BUNDLE_STOPPED" xml:id="org.osgi.service.component.ComponentConstants.DEACTIVATION_REASON_BUNDLE_STOPPED">
         <title>public static final int DEACTIVATION_REASON_BUNDLE_STOPPED = 6</title>
         <para>
The component configuration was deactivated because the bundle was
 stopped.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="DEACTIVATION_REASON_CONFIGURATION_DELETED" xml:id="org.osgi.service.component.ComponentConstants.DEACTIVATION_REASON_CONFIGURATION_DELETED">
         <title>public static final int DEACTIVATION_REASON_CONFIGURATION_DELETED = 4</title>
         <para>
The component configuration was deactivated because its configuration was
 deleted.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="DEACTIVATION_REASON_CONFIGURATION_MODIFIED" xml:id="org.osgi.service.component.ComponentConstants.DEACTIVATION_REASON_CONFIGURATION_MODIFIED">
         <title>public static final int DEACTIVATION_REASON_CONFIGURATION_MODIFIED = 3</title>
         <para>
The component configuration was deactivated because its configuration was
 changed.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="DEACTIVATION_REASON_DISABLED" xml:id="org.osgi.service.component.ComponentConstants.DEACTIVATION_REASON_DISABLED">
         <title>public static final int DEACTIVATION_REASON_DISABLED = 1</title>
         <para>
The component configuration was deactivated because the component was
 disabled.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="DEACTIVATION_REASON_DISPOSED" xml:id="org.osgi.service.component.ComponentConstants.DEACTIVATION_REASON_DISPOSED">
         <title>public static final int DEACTIVATION_REASON_DISPOSED = 5</title>
         <para>
The component configuration was deactivated because the component was
 disposed.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="DEACTIVATION_REASON_REFERENCE" xml:id="org.osgi.service.component.ComponentConstants.DEACTIVATION_REASON_REFERENCE">
         <title>public static final int DEACTIVATION_REASON_REFERENCE = 2</title>
         <para>
The component configuration was deactivated because a reference became
 unsatisfied.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="DEACTIVATION_REASON_UNSPECIFIED" xml:id="org.osgi.service.component.ComponentConstants.DEACTIVATION_REASON_UNSPECIFIED">
         <title>public static final int DEACTIVATION_REASON_UNSPECIFIED = 0</title>
         <para>
The reason the component configuration was deactivated is unspecified.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="REFERENCE_TARGET_SUFFIX" xml:id="org.osgi.service.component.ComponentConstants.REFERENCE_TARGET_SUFFIX">
         <title>public static final String REFERENCE_TARGET_SUFFIX = ".target"</title>
         <para>
The suffix for reference target properties. These properties contain the
 filter to select the target services for a reference. The value of this
 property must be of type <code>String</code>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_COMPONENT" xml:id="org.osgi.service.component.ComponentConstants.SERVICE_COMPONENT">
         <title>public static final String SERVICE_COMPONENT = "Service-Component"</title>
         <para>
Manifest header specifying the XML documents within a bundle that contain
 the bundle's Service Component descriptions.
 </para>
         <para>
 The attribute value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
      </section>
   </section>
   <section role="class" xreflabel="ComponentContext" xml:id="org.osgi.service.component.ComponentContext">
      <title>public interface ComponentContext</title>
      <para>
A Component Context object is used by a component instance to interact with
 its execution context including locating services by reference name. Each
 component instance has a unique Component Context.
 
 </para>
      <para>
 A component instance may obtain its Component Context object through its
 activate, modified, and deactivate methods.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="disableComponent(String)" xml:id="org.osgi.service.component.ComponentContext.disableComponent-String-">
         <title>public void disableComponent(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of a component.</para>
         </formalpara>
         <para role="description">
Disables the specified component name. The specified component name must
 be in the same bundle as this component.
 
 </para>
         <para>
 This method must return after changing the enabled state of the specified
 component name. Any actions that result from this, such as activating or
 deactivating a component configuration, must occur asynchronously to this
 method call.</para>
      </section>
      <section role="method" xreflabel="enableComponent(String)" xml:id="org.osgi.service.component.ComponentContext.enableComponent-String-">
         <title>public void enableComponent(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of a component or <code>null</code> to indicate all
        components in the bundle.</para>
         </formalpara>
         <para role="description">
Enables the specified component name. The specified component name must
 be in the same bundle as this component.
 
 </para>
         <para>
 This method must return after changing the enabled state of the specified
 component name. Any actions that result from this, such as activating or
 deactivating a component configuration, must occur asynchronously to this
 method call.</para>
      </section>
      <section role="method" xreflabel="getBundleContext()" xml:id="org.osgi.service.component.ComponentContext.getBundleContext--">
         <title>public BundleContext getBundleContext()</title>
         <para role="description">
Returns the <code>BundleContext</code> of the bundle which contains this
 component.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <code>BundleContext</code> of the bundle containing this
         component.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getComponentInstance()" xml:id="org.osgi.service.component.ComponentContext.getComponentInstance--">
         <title>public ComponentInstance getComponentInstance()</title>
         <para role="description">
Returns the Component Instance object for the component instance
 associated with this Component Context.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Component Instance object for the component instance.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getProperties()" xml:id="org.osgi.service.component.ComponentContext.getProperties--">
         <title>public Dictionary&lt;String,Object&gt; getProperties()</title>
         <para role="description">
Returns the component properties for this Component Context.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The properties for this Component Context. The Dictionary is read
         only and cannot be modified.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getServiceReference()" xml:id="org.osgi.service.component.ComponentContext.getServiceReference--">
         <title>public ServiceReference&lt;?&gt; getServiceReference()</title>
         <para role="description">
If the component instance is registered as a service using the
 <code>service</code> element, then this method returns the service reference
 of the service provided by this component instance.
 </para>
         <para>
 This method will return <code>null</code> if the component instance is not
 registered as a service.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <code>ServiceReference</code> object for the component instance or
         <code>null</code> if the component instance is not registered as a
         service.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getUsingBundle()" xml:id="org.osgi.service.component.ComponentContext.getUsingBundle--">
         <title>public Bundle getUsingBundle()</title>
         <para role="description">
If the component instance is registered as a service using the
 <code>servicescope="bundle"</code> or <code>servicescope="prototype"</code>
 attribute, then this method returns the bundle using the service provided
 by the component instance.
 </para>
         <para>
 This method will return <code>null</code> if:
 </para>
         <itemizedlist>
            <listitem>
               <para>The component instance is not a service, then no bundle can be using
 it as a service.</para>
            </listitem>
            <listitem>
               <para>The component instance is a service but did not specify the
 <code>servicescope="bundle"</code> or <code>servicescope="prototype"</code>
 attribute, then all bundles using the service provided by the component
 instance will share the same component instance.</para>
            </listitem>
            <listitem>
               <para>The service provided by the component instance is not currently being
 used by any bundle.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The bundle using the component instance as a service or
         <code>null</code>.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="locateService(String)" xml:id="org.osgi.service.component.ComponentContext.locateService-String-">
         <title>public Object locateService(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of a reference as specified in a <code>reference</code>
        element in this component's description.</para>
         </formalpara>
         <para role="description">
Returns the service object for the specified reference name.
 
 </para>
         <para>
 If the cardinality of the reference is <code>0..n</code> or <code>1..n</code> and
 multiple services are bound to the reference, the service with the
 highest ranking (as specified in its <code>Constants.SERVICE_RANKING</code>
 property) is returned. If there is a tie in ranking, the service with the
 lowest service id (as specified in its <code>Constants.SERVICE_ID</code>
 property); that is, the service that was registered first is returned.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A service object for the referenced service or <code>null</code> if
         the reference cardinality is <code>0..1</code> or <code>0..n</code> and no
         bound service is available.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ComponentException</code>– If Service Component Runtime catches an
         exception while activating the bound service.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="locateService(String,ServiceReference)" xml:id="org.osgi.service.component.ComponentContext.locateService-String-ServiceReference-">
         <title>public S locateService(String name,ServiceReference&lt;S&gt; reference)</title>
         <formalpara role="parameter">
            <title>Type Arguments</title>
            <para>
               <code>&lt;S&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;S&gt;</title>
            <para>Type of Service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of a reference as specified in a <code>reference</code>
        element in this component's description.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>reference</title>
            <para>The <code>ServiceReference</code> to a bound service. This
        must be a <code>ServiceReference</code> provided to the component via
        the bind or unbind method for the specified reference name.</para>
         </formalpara>
         <para role="description">
Returns the service object for the specified reference name and
 <code>ServiceReference</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A service object for the referenced service or <code>null</code> if
         the specified <code>ServiceReference</code> is not a bound service for
         the specified reference name.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ComponentException</code>– If Service Component Runtime catches an
         exception while activating the bound service.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="locateServices(String)" xml:id="org.osgi.service.component.ComponentContext.locateServices-String-">
         <title>public Object[] locateServices(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of a reference as specified in a <code>reference</code>
        element in this component's description.</para>
         </formalpara>
         <para role="description">
Returns the service objects for the specified reference name.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An array of service objects for the referenced service or
         <code>null</code> if the reference cardinality is <code>0..1</code> or
         <code>0..n</code> and no bound service is available. If the reference
         cardinality is <code>0..1</code> or <code>1..1</code> and a bound service
         is available, the array will have exactly one element.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ComponentException</code>– If Service Component Runtime catches an
         exception while activating a bound service.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ComponentException" xml:id="org.osgi.service.component.ComponentException">
      <title>public class ComponentException<?line-break?> extends RuntimeException</title>
      <para>
Unchecked exception which may be thrown by Service Component Runtime.
   </para>
      <section role="method" xreflabel="ComponentException(String,Throwable)" xml:id="org.osgi.service.component.ComponentException.ComponentException-String-Throwable-">
         <title>public  ComponentException(String message,Throwable cause)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The message for the exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of the exception. May be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Construct a new ComponentException with the specified message and cause.
   </para>
      </section>
      <section role="method" xreflabel="ComponentException(String)" xml:id="org.osgi.service.component.ComponentException.ComponentException-String-">
         <title>public  ComponentException(String message)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The message for the exception.</para>
         </formalpara>
         <para role="description">
Construct a new ComponentException with the specified message.
   </para>
      </section>
      <section role="method" xreflabel="ComponentException(Throwable)" xml:id="org.osgi.service.component.ComponentException.ComponentException-Throwable-">
         <title>public  ComponentException(Throwable cause)</title>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of the exception. May be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Construct a new ComponentException with the specified cause.
   </para>
      </section>
      <section role="method" xreflabel="getCause()" xml:id="org.osgi.service.component.ComponentException.getCause--">
         <title>public Throwable getCause()</title>
         <para role="description">
Returns the cause of this exception or <code>null</code> if no cause was set.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The cause of this exception or <code>null</code> if no cause was set.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="initCause(Throwable)" xml:id="org.osgi.service.component.ComponentException.initCause-Throwable-">
         <title>public Throwable initCause(Throwable cause)</title>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception.</para>
         </formalpara>
         <para role="description">
Initializes the cause of this exception to the specified value.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>This exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified cause is this
         exception.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the cause of this exception has already
         been set.   </para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="ComponentFactory" xml:id="org.osgi.service.component.ComponentFactory">
      <title>public interface ComponentFactory</title>
      <para>
When a component is declared with the <code>factory</code> attribute on its
 <code>component</code> element, Service Component Runtime will register a
 Component Factory service to allow new component configurations to be created
 and activated rather than automatically creating and activating component
 configuration as necessary.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="newInstance(Dictionary)" xml:id="org.osgi.service.component.ComponentFactory.newInstance-Dictionary-">
         <title>public ComponentInstance newInstance(Dictionary&lt;String,?&gt; properties)</title>
         <formalpara role="parameter">
            <title>properties</title>
            <para>Additional properties for the component configuration
        or <code>null</code> if there are no additional properties.</para>
         </formalpara>
         <para role="description">
Create and activate a new component configuration. Additional properties
 may be provided for the component configuration.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>ComponentInstance</code> object encapsulating the component
         instance of the component configuration. The component
         configuration has been activated and, if the component specifies
         a <code>service</code> element, the component instance has been
         registered as a service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ComponentException</code>– If Service Component Runtime is unable to
         activate the component configuration.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ComponentInstance" xml:id="org.osgi.service.component.ComponentInstance">
      <title>public interface ComponentInstance</title>
      <para>
A ComponentInstance encapsulates a component instance of an activated
 component configuration. ComponentInstances are created whenever a component
 configuration is activated.
 
 </para>
      <para>
 ComponentInstances are never reused. A new ComponentInstance object will be
 created when the component configuration is activated again.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="dispose()" xml:id="org.osgi.service.component.ComponentInstance.dispose--">
         <title>public void dispose()</title>
         <para role="description">
Dispose of the component configuration for this component instance. The
 component configuration will be deactivated. If the component
 configuration has already been deactivated, this method does nothing.
   </para>
      </section>
      <section role="method" xreflabel="getInstance()" xml:id="org.osgi.service.component.ComponentInstance.getInstance--">
         <title>public Object getInstance()</title>
         <para role="description">
Returns the component instance of the activated component configuration.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The component instance or <code>null</code> if the component
         configuration has been deactivated.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ComponentServiceObjects" xml:id="org.osgi.service.component.ComponentServiceObjects">
      <title>public interface ComponentServiceObjects&lt;S&gt;</title>
      <formalpara role="parameter">
         <title>&lt;S&gt;</title>
         <para>Type of Service</para>
      </formalpara>
      <para>
Allows multiple service objects for a service to be obtained.
 
 </para>
      <para>
 A component instance can receive a <code>ComponentServiceObjects</code> object via
 a reference that is typed <code>ComponentServiceObjects</code>.
 
 </para>
      <para>
 For services with <link linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE">prototype</link> scope, multiple
 service objects for the service can be obtained. For services with
 <link linkend="org.osgi.framework.Constants.SCOPE_SINGLETON">singleton</link> or <link linkend="org.osgi.framework.Constants.SCOPE_BUNDLE">bundle</link> scope, only one, use-counted service object is available.
 
 </para>
      <para>
 Any unreleased service objects obtained from this
 <code>ComponentServiceObjects</code> object are automatically released by Service
 Component Runtime when the service becomes unbound.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.framework.ServiceObjects">ServiceObjects</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="getService()" xml:id="org.osgi.service.component.ComponentServiceObjects.getService--">
         <title>public S getService()</title>
         <para role="description">
Returns a service object for the <link linkend="org.osgi.service.component.ComponentServiceObjects.getServiceReference--">associated</link> service.
 
 </para>
         <para>
 This method will always return <code>null</code> when the associated service
 has been become unbound.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A service object for the associated service or <code>null</code> if
         the service is unbound, the customized service object returned by
         a <code>ServiceFactory</code> does not implement the classes under
         which it was registered or the <code>ServiceFactory</code> threw an
         exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the associated service has been become
         unbound.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.component.ComponentServiceObjects.ungetService-S-">ungetService(Object)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getServiceReference()" xml:id="org.osgi.service.component.ComponentServiceObjects.getServiceReference--">
         <title>public ServiceReference&lt;S&gt; getServiceReference()</title>
         <para role="description">
Returns the <link linkend="org.osgi.framework.ServiceReference">ServiceReference</link> for the service associated with this
 <code>ComponentServiceObjects</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <link linkend="org.osgi.framework.ServiceReference">ServiceReference</link> for the service associated with this
         <code>ComponentServiceObjects</code> object.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="ungetService(S)" xml:id="org.osgi.service.component.ComponentServiceObjects.ungetService-S-">
         <title>public void ungetService(S service)</title>
         <formalpara role="parameter">
            <title>service</title>
            <para>A service object previously provided by this
        <code>ComponentServiceObjects</code> object.</para>
         </formalpara>
         <para role="description">
Releases a service object for the <link linkend="org.osgi.service.component.ComponentServiceObjects.getServiceReference--">associated</link> service.
 
 </para>
         <para>
 The specified service object must no longer be used and all references to
 it should be destroyed after calling this method.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the associated service has been become
         unbound.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified service object was not
         provided by this <code>ComponentServiceObjects</code> object.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.component.ComponentServiceObjects.getService--">getService()</link>
            </para>
         </formalpara>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.service.component.annotations" xml:id="org.osgi.service.component.annotations" xml:base="../../generated/javadoc/docbook/org.osgi.service.component.annotations.xml">
   <title>org.osgi.service.component.annotations</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.component.annotations-version">Version 1.3</releaseinfo>
      <edition xml:id="org.osgi.service.component.annotations-version.number">1.3</edition>
   </info>
   <para>
Service Component Annotations Package Version 1.3.

 </para>
   <para>
 This package is not used at runtime. Annotated classes are processed by
 tools to generate Component Descriptions which are used at runtime.</para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.Activate">
                  <code>Activate</code>
               </link> - 
Identify the annotated method as the <code>activate</code> method of a Service
 Component.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.Component">
                  <code>Component</code>
               </link> - 
Identify the annotated class as a Service Component.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.ConfigurationPolicy">
                  <code>ConfigurationPolicy</code>
               </link> - 
Configuration Policy for the <link linkend="org.osgi.service.component.annotations.Component">Component</link> annotation.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.Deactivate">
                  <code>Deactivate</code>
               </link> - 
Identify the annotated method as the <code>deactivate</code> method of a Service
 Component.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.FieldOption">
                  <code>FieldOption</code>
               </link> - 
Field options for the <link linkend="org.osgi.service.component.annotations.Reference">Reference</link> annotation.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.Modified">
                  <code>Modified</code>
               </link> - 
Identify the annotated method as the <code>modified</code> method of a Service
 Component.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.Reference">
                  <code>Reference</code>
               </link> - 
Identify the annotated member as a reference of a Service Component.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.ReferenceCardinality">
                  <code>ReferenceCardinality</code>
               </link> - 
Cardinality for the <link linkend="org.osgi.service.component.annotations.Reference">Reference</link> annotation.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.ReferencePolicy">
                  <code>ReferencePolicy</code>
               </link> - 
Policy for the <link linkend="org.osgi.service.component.annotations.Reference">Reference</link> annotation.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.ReferencePolicyOption">
                  <code>ReferencePolicyOption</code>
               </link> - 
Policy option for the <link linkend="org.osgi.service.component.annotations.Reference">Reference</link> annotation.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.ReferenceScope">
                  <code>ReferenceScope</code>
               </link> - 
Reference scope for the <link linkend="org.osgi.service.component.annotations.Reference">Reference</link> annotation.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.ServiceScope">
                  <code>ServiceScope</code>
               </link> - 
Service scope for the <link linkend="org.osgi.service.component.annotations.Component">Component</link> annotation.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="Activate" xml:id="org.osgi.service.component.annotations.Activate">
      <title>@Activate</title>
      <para>
Identify the annotated method as the <code>activate</code> method of a Service
 Component.
 
 </para>
      <para>
 The annotated method is the activate method of the Component.
 
 </para>
      <para>
 This annotation is not processed at runtime by Service Component Runtime. It
 must be processed by tools and used to add a Component Description to the
 bundle.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <code>The activate attribute of the component element of a Component Description.</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>METHOD</code>
         </para>
      </formalpara>
   </section>
   <section role="class" xreflabel="Component" xml:id="org.osgi.service.component.annotations.Component">
      <title>@Component</title>
      <para>
Identify the annotated class as a Service Component.
 
 </para>
      <para>
 The annotated class is the implementation class of the Component.
 
 </para>
      <para>
 This annotation is not processed at runtime by Service Component Runtime. It
 must be processed by tools and used to add a Component Description to the
 bundle.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <code>The component element of a Component Description.</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>TYPE</code>
         </para>
      </formalpara>
      <section role="method" xreflabel="name" xml:id="org.osgi.service.component.annotations.Component.name--">
         <title>String name default ""</title>
         <para role="description">
The name of this Component.
 
 </para>
         <para>
 If not specified, the name of this Component is the fully qualified type
 name of the class being annotated.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The name attribute of the component element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="service" xml:id="org.osgi.service.component.annotations.Component.service--">
         <title>Class&lt;?&gt;[] service default {}</title>
         <para role="description">
The types under which to register this Component as a service.
 
 </para>
         <para>
 If no service should be registered, the empty value
 <code>{}</code> must be specified.
 
 </para>
         <para>
 If not specified, the service types for this Component are all the
 <emphasis>directly</emphasis> implemented interfaces of the class being annotated.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The service element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="factory" xml:id="org.osgi.service.component.annotations.Component.factory--">
         <title>String factory default ""</title>
         <para role="description">
The factory identifier of this Component. Specifying a factory identifier
 makes this Component a Factory Component.
 
 </para>
         <para>
 If not specified, the default is that this Component is not a Factory
 Component.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The factory attribute of the component element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="servicefactory" xml:id="org.osgi.service.component.annotations.Component.servicefactory--">
         <title>boolean servicefactory default false</title>
         <para role="description">
Declares whether this Component uses the OSGi ServiceFactory concept and
 each bundle using this Component's service will receive a different
 component instance.
 
 </para>
         <para>
 This element is ignored when the <link linkend="org.osgi.service.component.annotations.Component.scope--">scope()</link> element does not have
 the default value. If <code>true</code>, this Component uses
 <link linkend="org.osgi.service.component.annotations.ServiceScope.BUNDLE">bundle</link> service scope. If <code>false</code> or not
 specified, this Component uses <link linkend="org.osgi.service.component.annotations.ServiceScope.SINGLETON">singleton</link>
 service scope. If the <link linkend="org.osgi.service.component.annotations.Component.factory--">factory()</link> element is specified or the
 <link linkend="org.osgi.service.component.annotations.Component.immediate--">immediate()</link> element is specified with <code>true</code>, this element
 can only be specified with <code>false</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The scope attribute of the service element of a Component Description.</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>Since 1.3. Replaced by <link linkend="org.osgi.service.component.annotations.Component.scope--">scope()</link>.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="enabled" xml:id="org.osgi.service.component.annotations.Component.enabled--">
         <title>boolean enabled default true</title>
         <para role="description">
Declares whether this Component is enabled when the bundle containing it
 is started.
 
 </para>
         <para>
 If <code>true</code> or not specified, this Component is enabled. If
 <code>false</code>, this Component is disabled.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The enabled attribute of the component element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="immediate" xml:id="org.osgi.service.component.annotations.Component.immediate--">
         <title>boolean immediate default false</title>
         <para role="description">
Declares whether this Component must be immediately activated upon
 becoming satisfied or whether activation should be delayed.
 
 </para>
         <para>
 If <code>true</code>, this Component must be immediately activated upon
 becoming satisfied. If <code>false</code>, activation of this Component is
 delayed. If this property is specified, its value must be <code>false</code>
 if the <link linkend="org.osgi.service.component.annotations.Component.factory--">factory()</link> property is also specified or must be
 <code>true</code> if the <link linkend="org.osgi.service.component.annotations.Component.service--">service()</link> property is specified with an
 empty value.
 
 </para>
         <para>
 If not specified, the default is <code>false</code> if the <link linkend="org.osgi.service.component.annotations.Component.factory--">factory()</link>
 property is specified or the <link linkend="org.osgi.service.component.annotations.Component.service--">service()</link> property is not specified
 or specified with a non-empty value and <code>true</code> otherwise.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The immediate attribute of the component element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="property" xml:id="org.osgi.service.component.annotations.Component.property--">
         <title>String[] property default {}</title>
         <para role="description">
Properties for this Component.
 
 </para>
         <para>
 Each property string is specified as <code>"name=value"</code>. The type of
 the property value can be specified in the name as
 <code>name:type=value</code>. The type must be one of the property types
 supported by the type attribute of the property element of a Component
 Description.
 
 </para>
         <para>
 To specify a property with multiple values, use multiple name, value
 pairs. For example, <code>"foo=bar", "foo=baz"</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The property element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="properties" xml:id="org.osgi.service.component.annotations.Component.properties--">
         <title>String[] properties default {}</title>
         <para role="description">
Property entries for this Component.
 
 </para>
         <para>
 Specifies the name of an entry in the bundle whose contents conform to a
 standard Java Properties File. The entry is read and processed to obtain
 the properties and their values.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The properties element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="xmlns" xml:id="org.osgi.service.component.annotations.Component.xmlns--">
         <title>String xmlns default ""</title>
         <para role="description">
The XML name space of the Component Description for this Component.
 
 </para>
         <para>
 If not specified, the XML name space of the Component Description for
 this Component should be the lowest Declarative Services XML name space
 which supports all the specification features used by this Component.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The XML name space specified for a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="configurationPolicy" xml:id="org.osgi.service.component.annotations.Component.configurationPolicy--">
         <title>ConfigurationPolicy configurationPolicy default OPTIONAL</title>
         <para role="description">
The configuration policy of this Component.
 
 </para>
         <para>
 Controls whether component configurations must be satisfied depending on
 the presence of a corresponding Configuration object in the OSGi
 Configuration Admin service. A corresponding configuration is a
 Configuration object where the PID equals the name of the component.
 
 </para>
         <para>
 If not specified, the configuration policy is based upon whether the
 component is also annotated with the Meta Type
 <link linkend="org.osgi.service.metatype.annotations.Designate">Designate</link>
 annotation.
 </para>
         <itemizedlist>
            <listitem>
               <para>Not annotated with <code>Designate</code> - The configuration policy is
 <link linkend="org.osgi.service.component.annotations.ConfigurationPolicy.OPTIONAL">OPTIONAL</link>.</para>
            </listitem>
            <listitem>
               <para>Annotated with <code>Designate(factory=false)</code> - The configuration
 policy is <link linkend="org.osgi.service.component.annotations.ConfigurationPolicy.OPTIONAL">OPTIONAL</link>.</para>
            </listitem>
            <listitem>
               <para>Annotated with <code>Designate(factory=true)</code> - The configuration
 policy is <link linkend="org.osgi.service.component.annotations.ConfigurationPolicy.REQUIRE">REQUIRE</link>.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The configuration-policy attribute of the component element of a Component Description.</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="configurationPid" xml:id="org.osgi.service.component.annotations.Component.configurationPid--">
         <title>String[] configurationPid default "$"</title>
         <para role="description">
The configuration PIDs for the configuration of this Component.
 
 </para>
         <para>
 Each value specifies a configuration PID for this Component.
 
 </para>
         <para>
 If no value is specified, the name of this Component is used as the
 configuration PID of this Component.
 
 </para>
         <para>
 A special string (<code>"$"</code>) can be used to specify the
 name of the component as a configuration PID. The <code>NAME</code> constant
 holds this special string. For example:
 
 </para>
         <programlisting> @Component(configurationPid={"com.acme.system", Component.NAME})</programlisting>
         <para>
 
 Tools creating a Component Description from this annotation must replace
 the special string with the actual name of this Component.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The configuration-pid attribute of the component element of a Component Description.</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="scope" xml:id="org.osgi.service.component.annotations.Component.scope--">
         <title>ServiceScope scope default DEFAULT</title>
         <para role="description">
The service scope for the service of this Component.
 
 </para>
         <para>
 If not specified (and the deprecated <link linkend="org.osgi.service.component.annotations.Component.servicefactory--">servicefactory()</link> element is
 not specified), the <link linkend="org.osgi.service.component.annotations.ServiceScope.SINGLETON">singleton</link> service
 scope is used. If the <link linkend="org.osgi.service.component.annotations.Component.factory--">factory()</link> element is specified or the
 <link linkend="org.osgi.service.component.annotations.Component.immediate--">immediate()</link> element is specified with <code>true</code>, this element
 can only be specified with the <link linkend="org.osgi.service.component.annotations.ServiceScope.SINGLETON">singleton</link>
 service scope.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The scope attribute of the service element of a Component Description.</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="reference" xml:id="org.osgi.service.component.annotations.Component.reference--">
         <title>Reference[] reference default {}</title>
         <para role="description">
The lookup strategy references of this Component.
 
 </para>
         <para>
 To access references using the lookup strategy, <link linkend="org.osgi.service.component.annotations.Reference">Reference</link>
 annotations are specified naming the reference and declaring the type of
 the referenced service. The referenced service can be accessed using one
 of the <code>locateService</code> methods of <code>ComponentContext</code>.
 
 </para>
         <para>
 To access references using the event strategy, bind methods are annotated
 with <link linkend="org.osgi.service.component.annotations.Reference">Reference</link>. To access references using the field strategy,
 fields are annotated with <link linkend="org.osgi.service.component.annotations.Reference">Reference</link>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The reference element of a Component Description.</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="NAME" xml:id="org.osgi.service.component.annotations.Component.NAME">
         <title>String NAME = "$"</title>
         <para>
Special string representing the name of this Component.
 
 </para>
         <para>
 This string can be used in <link linkend="org.osgi.service.component.annotations.Component.configurationPid--">configurationPid()</link> to specify the
 name of the component as a configuration PID. For example:
 
 </para>
         <programlisting> @Component(configurationPid={"com.acme.system", Component.NAME})</programlisting>
         <para>
 
 Tools creating a Component Description from this annotation must replace
 the special string with the actual name of this Component.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ConfigurationPolicy" xml:id="org.osgi.service.component.annotations.ConfigurationPolicy">
      <title>enum ConfigurationPolicy</title>
      <para>
Configuration Policy for the <link linkend="org.osgi.service.component.annotations.Component">Component</link> annotation.
 
 </para>
      <para>
 Controls whether component configurations must be satisfied depending on the
 presence of a corresponding Configuration object in the OSGi Configuration
 Admin service. A corresponding configuration is a Configuration object where
 the PID is the name of the component.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <section role="field" xreflabel="OPTIONAL" xml:id="org.osgi.service.component.annotations.ConfigurationPolicy.OPTIONAL">
         <title>OPTIONAL</title>
         <para>
Use the corresponding Configuration object if present but allow the
 component to be satisfied even if the corresponding Configuration object
 is not present.
   </para>
      </section>
      <section role="field" xreflabel="REQUIRE" xml:id="org.osgi.service.component.annotations.ConfigurationPolicy.REQUIRE">
         <title>REQUIRE</title>
         <para>
There must be a corresponding Configuration object for the component
 configuration to become satisfied.
   </para>
      </section>
      <section role="field" xreflabel="IGNORE" xml:id="org.osgi.service.component.annotations.ConfigurationPolicy.IGNORE">
         <title>IGNORE</title>
         <para>
Always allow the component configuration to be satisfied and do not use
 the corresponding Configuration object even if it is present.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="Deactivate" xml:id="org.osgi.service.component.annotations.Deactivate">
      <title>@Deactivate</title>
      <para>
Identify the annotated method as the <code>deactivate</code> method of a Service
 Component.
 
 </para>
      <para>
 The annotated method is the deactivate method of the Component.
 
 </para>
      <para>
 This annotation is not processed at runtime by Service Component Runtime. It
 must be processed by tools and used to add a Component Description to the
 bundle.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <code>The deactivate attribute of the component element of a Component Description.</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>METHOD</code>
         </para>
      </formalpara>
   </section>
   <section role="class" xreflabel="FieldOption" xml:id="org.osgi.service.component.annotations.FieldOption">
      <title>enum FieldOption</title>
      <para>
Field options for the <link linkend="org.osgi.service.component.annotations.Reference">Reference</link> annotation.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <section role="field" xreflabel="UPDATE" xml:id="org.osgi.service.component.annotations.FieldOption.UPDATE">
         <title>UPDATE</title>
         <para>
The update field option is used to update the collection referenced by
 the field when there are changes to the bound services.
 
 </para>
         <para>
 This field option can only be used when the field reference has dynamic
 policy and multiple cardinality.</para>
      </section>
      <section role="field" xreflabel="REPLACE" xml:id="org.osgi.service.component.annotations.FieldOption.REPLACE">
         <title>REPLACE</title>
         <para>
The replace field option is used to replace the field value with a new
 value when there are changes to the bound services.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="Modified" xml:id="org.osgi.service.component.annotations.Modified">
      <title>@Modified</title>
      <para>
Identify the annotated method as the <code>modified</code> method of a Service
 Component.
 
 </para>
      <para>
 The annotated method is the modified method of the Component.
 
 </para>
      <para>
 This annotation is not processed at runtime by Service Component Runtime. It
 must be processed by tools and used to add a Component Description to the
 bundle.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <code>The modified attribute of the component element of a Component Description.</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>METHOD</code>
         </para>
      </formalpara>
   </section>
   <section role="class" xreflabel="Reference" xml:id="org.osgi.service.component.annotations.Reference">
      <title>@Reference</title>
      <para>
Identify the annotated member as a reference of a Service Component.
 
 </para>
      <para>
 When the annotation is applied to a method, the method is the bind method of
 the reference. When the annotation is applied to a field, the field will
 contain the bound service(s) of the reference.
 
 </para>
      <para>
 This annotation is not processed at runtime by Service Component Runtime. It
 must be processed by tools and used to add a Component Description to the
 bundle.
 
 </para>
      <para>
 In the generated Component Description for a component, the references must
 be ordered in ascending lexicographical order (using <code>String.compareTo</code>
 ) of the reference <link linkend="org.osgi.service.component.annotations.Reference.name--">name</link>s.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <code>The reference element of a Component Description.</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>METHOD</code>, <code>FIELD</code>
         </para>
      </formalpara>
      <section role="method" xreflabel="name" xml:id="org.osgi.service.component.annotations.Reference.name--">
         <title>String name default ""</title>
         <para role="description">
The name of this reference.
 
 </para>
         <para>
 The name of this reference must be specified when using this annotation
 in the <link linkend="org.osgi.service.component.annotations.Component.reference--">Component.reference()</link> element since there is no annotated
 member from which the name can be determined.
 
 If not specified, the name of this reference is based upon how this
 annotation is used:
 </para>
         <itemizedlist>
            <listitem>
               <para>Annotated method - If the method name begins with <code>bind</code>,
 <code>set</code> or <code>add</code>, that prefix is removed to create the name of
 the reference. Otherwise, the name of the reference is the method name.</para>
            </listitem>
            <listitem>
               <para>Annotated field - The name of the reference is the field name.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The name attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="service" xml:id="org.osgi.service.component.annotations.Reference.service--">
         <title>Class&lt;?&gt; service default Object.class</title>
         <para role="description">
The type of the service for this reference.
 
 </para>
         <para>
 The type of the service for this reference must be specified when using
 this annotation in the <link linkend="org.osgi.service.component.annotations.Component.reference--">Component.reference()</link> element since there
 is no annotated member from which the type of the service can be
 determined.
 
 </para>
         <para>
 If not specified, the type of the service for this reference is based
 upon how this annotation is used:
 </para>
         <itemizedlist>
            <listitem>
               <para>Annotated method - The type of the service is the type of the first
 argument of the method.</para>
            </listitem>
            <listitem>
               <para>Annotated field - The type of the service is based upon the type of
 the field being annotated and the cardinality of the reference. If the
 cardinality is either <link linkend="org.osgi.service.component.annotations.ReferenceCardinality.MULTIPLE">0..n</link>, or
 <link linkend="org.osgi.service.component.annotations.ReferenceCardinality.AT_LEAST_ONE">1..n</link>, the type of the field
 must be one of <code>java.util.Collection</code>, <code>java.util.List</code>, or a
 subtype of <code>java.util.Collection</code> so the type of the service is the
 generic type of the collection. Otherwise, the type of the service is the
 type of the field.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The interface attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="cardinality" xml:id="org.osgi.service.component.annotations.Reference.cardinality--">
         <title>ReferenceCardinality cardinality default MANDATORY</title>
         <para role="description">
The cardinality of this reference.
 
 </para>
         <para>
 If not specified, the cardinality of this reference is based upon how
 this annotation is used:
 </para>
         <itemizedlist>
            <listitem>
               <para>Annotated method - The cardinality is
 <link linkend="org.osgi.service.component.annotations.ReferenceCardinality.MANDATORY">1..1</link>.</para>
            </listitem>
            <listitem>
               <para>Annotated field - The cardinality is based on the type of the field.
 If the type is either <code>java.util.Collection</code>,
 <code>java.util.List</code>, or a subtype of <code>java.util.Collection</code>, the
 cardinality is <link linkend="org.osgi.service.component.annotations.ReferenceCardinality.MULTIPLE">0..n</link>. Otherwise the
 cardinality is <link linkend="org.osgi.service.component.annotations.ReferenceCardinality.MANDATORY">1..1</link>.</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.component.annotations.Component.reference--">Component.reference()</link> element - The cardinality is
 <link linkend="org.osgi.service.component.annotations.ReferenceCardinality.MANDATORY">1..1</link>.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The cardinality attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="policy" xml:id="org.osgi.service.component.annotations.Reference.policy--">
         <title>ReferencePolicy policy default STATIC</title>
         <para role="description">
The policy for this reference.
 
 </para>
         <para>
 If not specified, the policy of this reference is based upon how this
 annotation is used:
 </para>
         <itemizedlist>
            <listitem>
               <para>Annotated method - The policy is <link linkend="org.osgi.service.component.annotations.ReferencePolicy.STATIC">STATIC</link>.</para>
            </listitem>
            <listitem>
               <para>Annotated field - The policy is based on the modifiers of the field.
 If the field is declared <code>volatile</code>, the policy is
 <link linkend="org.osgi.service.component.annotations.ReferencePolicy.DYNAMIC">ReferencePolicy.DYNAMIC</link>. Otherwise the policy is
 <link linkend="org.osgi.service.component.annotations.ReferencePolicy.STATIC">STATIC</link>.</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.component.annotations.Component.reference--">Component.reference()</link> element - The policy is
 <link linkend="org.osgi.service.component.annotations.ReferencePolicy.STATIC">STATIC</link>.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The policy attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="target" xml:id="org.osgi.service.component.annotations.Reference.target--">
         <title>String target default ""</title>
         <para role="description">
The target property for this reference.
 
 </para>
         <para>
 If not specified, no target property is set.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The target attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="policyOption" xml:id="org.osgi.service.component.annotations.Reference.policyOption--">
         <title>ReferencePolicyOption policyOption default RELUCTANT</title>
         <para role="description">
The policy option for this reference.
 
 </para>
         <para>
 If not specified, the <link linkend="org.osgi.service.component.annotations.ReferencePolicyOption.RELUCTANT">RELUCTANT</link>
 reference policy option is used.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The policy-option attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="scope" xml:id="org.osgi.service.component.annotations.Reference.scope--">
         <title>ReferenceScope scope default BUNDLE</title>
         <para role="description">
The reference scope for this reference.
 
 </para>
         <para>
 If not specified, the <link linkend="org.osgi.service.component.annotations.ReferenceScope.BUNDLE">bundle</link> reference
 scope is used.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The scope attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="bind" xml:id="org.osgi.service.component.annotations.Reference.bind--">
         <title>String bind default ""</title>
         <para role="description">
The name of the bind method for this reference.
 
 </para>
         <para>
 If specified and this reference annotates a method, the specified name
 must match the name of the annotated method.
 
 </para>
         <para>
 If not specified, the name of the bind method is based upon how this
 annotation is used:
 </para>
         <itemizedlist>
            <listitem>
               <para>Annotated method - The name of the annotated method is the name of
 the bind method.</para>
            </listitem>
            <listitem>
               <para>Annotated field - There is no bind method name.</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.component.annotations.Component.reference--">Component.reference()</link> element - There is no bind method name.
 </para>
            </listitem>
         </itemizedlist>
         <para>
 If there is a bind method name, the component must contain a method with
 that name.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The bind attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="updated" xml:id="org.osgi.service.component.annotations.Reference.updated--">
         <title>String updated default ""</title>
         <para role="description">
The name of the updated method for this reference.
 
 </para>
         <para>
 If not specified, the name of the updated method is based upon how this
 annotation is used:
 </para>
         <itemizedlist>
            <listitem>
               <para>Annotated method - The name of the updated method is created from the
 name of the annotated method. If the name of the annotated method begins
 with <code>bind</code>, <code>set</code> or <code>add</code>, that prefix is replaced
 with <code>updated</code> to create the name candidate for the updated method.
 Otherwise, <code>updated</code> is prefixed to the name of the annotated
 method to create the name candidate for the updated method. If the
 component type contains a method with the candidate name, the candidate
 name is used as the name of the updated method. To declare no updated
 method when the component type contains a method with the candidate name,
 the value <code>"-"</code> must be used.</para>
            </listitem>
            <listitem>
               <para>Annotated field - There is no updated method name.</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.component.annotations.Component.reference--">Component.reference()</link> element - There is no updated method
 name.</para>
            </listitem>
         </itemizedlist>
         <para>
 If there is an updated method name, the component must contain a method
 with that name.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The updated attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="unbind" xml:id="org.osgi.service.component.annotations.Reference.unbind--">
         <title>String unbind default ""</title>
         <para role="description">
The name of the unbind method for this reference.
 
 </para>
         <para>
 If not specified, the name of the unbind method is based upon how this
 annotation is used:
 </para>
         <itemizedlist>
            <listitem>
               <para>Annotated method - The name of the unbind method is created from the
 name of the annotated method. If the name of the annotated method begins
 with <code>bind</code>, <code>set</code> or <code>add</code>, that prefix is replaced
 with <code>unbind</code>, <code>unset</code> or <code>remove</code>, respectively, to
 create the name candidate for the unbind method. Otherwise, <code>un</code> is
 prefixed to the name of the annotated method to create the name candidate
 for the unbind method. If the component type contains a method with the
 candidate name, the candidate name is used as the name of the unbind
 method. To declare no unbind method when the component type contains a
 method with the candidate name, the value <code>"-"</code> must be used.</para>
            </listitem>
            <listitem>
               <para>Annotated field - There is no unbind method name.</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.component.annotations.Component.reference--">Component.reference()</link> element - There is no unbind method
 name.</para>
            </listitem>
         </itemizedlist>
         <para>
 If there is an unbind method name, the component must contain a method
 with that name.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The unbind attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="field" xml:id="org.osgi.service.component.annotations.Reference.field--">
         <title>String field default ""</title>
         <para role="description">
The name of the field for this reference.
 
 </para>
         <para>
 If specified and this reference annotates a field, the specified name
 must match the name of the annotated field.
 
 </para>
         <para>
 If not specified, the name of the field is based upon how this annotation
 is used:
 </para>
         <itemizedlist>
            <listitem>
               <para>Annotated method - There is no field name.</para>
            </listitem>
            <listitem>
               <para>Annotated field - The name of the annotated field is the name of the
 field.</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.component.annotations.Component.reference--">Component.reference()</link> element - There is no field name.</para>
            </listitem>
         </itemizedlist>
         <para>
 If there is a field name, the component must contain a field with that
 name.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The field attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="fieldOption" xml:id="org.osgi.service.component.annotations.Reference.fieldOption--">
         <title>FieldOption fieldOption default REPLACE</title>
         <para role="description">
The field option for this reference.
 
 </para>
         <para>
 If not specified, the field option is based upon how this annotation is
 used:
 </para>
         <itemizedlist>
            <listitem>
               <para>Annotated method - There is no field option.</para>
            </listitem>
            <listitem>
               <para>Annotated field - The field option is based upon the policy and
 cardinality of the reference and the modifiers of the field. If the
 policy is <link linkend="org.osgi.service.component.annotations.ReferencePolicy.DYNAMIC">ReferencePolicy.DYNAMIC</link>, the cardinality is
 <link linkend="org.osgi.service.component.annotations.ReferenceCardinality.MULTIPLE">0..n</link> or
 <link linkend="org.osgi.service.component.annotations.ReferenceCardinality.AT_LEAST_ONE">1..n</link>, and the field is declared
 <code>final</code>, the field option is <link linkend="org.osgi.service.component.annotations.FieldOption.UPDATE">FieldOption.UPDATE</link>. Otherwise,
 the field option is <link linkend="org.osgi.service.component.annotations.FieldOption.REPLACE">FieldOption.REPLACE</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.component.annotations.Component.reference--">Component.reference()</link> element - There is no field option.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The field-option attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ReferenceCardinality" xml:id="org.osgi.service.component.annotations.ReferenceCardinality">
      <title>enum ReferenceCardinality</title>
      <para>
Cardinality for the <link linkend="org.osgi.service.component.annotations.Reference">Reference</link> annotation.
 
 </para>
      <para>
 Specifies if the reference is optional and if the component implementation
 support a single bound service or multiple bound services.</para>
      <section role="field" xreflabel="OPTIONAL" xml:id="org.osgi.service.component.annotations.ReferenceCardinality.OPTIONAL">
         <title>OPTIONAL</title>
         <para>
The reference is optional and unary. That is, the reference has a
 cardinality of <code>0..1</code>.
   </para>
      </section>
      <section role="field" xreflabel="MANDATORY" xml:id="org.osgi.service.component.annotations.ReferenceCardinality.MANDATORY">
         <title>MANDATORY</title>
         <para>
The reference is mandatory and unary. That is, the reference has a
 cardinality of <code>1..1</code>.
   </para>
      </section>
      <section role="field" xreflabel="MULTIPLE" xml:id="org.osgi.service.component.annotations.ReferenceCardinality.MULTIPLE">
         <title>MULTIPLE</title>
         <para>
The reference is optional and multiple. That is, the reference has a
 cardinality of <code>0..n</code>.
   </para>
      </section>
      <section role="field" xreflabel="AT_LEAST_ONE" xml:id="org.osgi.service.component.annotations.ReferenceCardinality.AT_LEAST_ONE">
         <title>AT_LEAST_ONE</title>
         <para>
The reference is mandatory and multiple. That is, the reference has a
 cardinality of <code>1..n</code>.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="ReferencePolicy" xml:id="org.osgi.service.component.annotations.ReferencePolicy">
      <title>enum ReferencePolicy</title>
      <para>
Policy for the <link linkend="org.osgi.service.component.annotations.Reference">Reference</link> annotation.
   </para>
      <section role="field" xreflabel="STATIC" xml:id="org.osgi.service.component.annotations.ReferencePolicy.STATIC">
         <title>STATIC</title>
         <para>
The static policy is the most simple policy and is the default policy. A
 component instance never sees any of the dynamics. Component
 configurations are deactivated before any bound service for a reference
 having a static policy becomes unavailable. If a target service is
 available to replace the bound service which became unavailable, the
 component configuration must be reactivated and bound to the replacement
 service.
   </para>
      </section>
      <section role="field" xreflabel="DYNAMIC" xml:id="org.osgi.service.component.annotations.ReferencePolicy.DYNAMIC">
         <title>DYNAMIC</title>
         <para>
The dynamic policy is slightly more complex since the component
 implementation must properly handle changes in the set of bound services.
 With the dynamic policy, SCR can change the set of bound services without
 deactivating a component configuration. If the component uses the event
 strategy to access services, then the component instance will be notified
 of changes in the set of bound services by calls to the bind and unbind
 methods.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="ReferencePolicyOption" xml:id="org.osgi.service.component.annotations.ReferencePolicyOption">
      <title>enum ReferencePolicyOption</title>
      <para>
Policy option for the <link linkend="org.osgi.service.component.annotations.Reference">Reference</link> annotation.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.2</para>
      </formalpara>
      <section role="field" xreflabel="RELUCTANT" xml:id="org.osgi.service.component.annotations.ReferencePolicyOption.RELUCTANT">
         <title>RELUCTANT</title>
         <para>
The reluctant policy option is the default policy option for both
 <link linkend="org.osgi.service.component.annotations.ReferencePolicy.STATIC">static</link> and <link linkend="org.osgi.service.component.annotations.ReferencePolicy.DYNAMIC">dynamic</link> reference policies. When a new target service for a reference
 becomes available, references having the reluctant policy option for the
 static policy or the dynamic policy with a unary cardinality will ignore
 the new target service. References having the dynamic policy with a
 multiple cardinality will bind the new target service.
   </para>
      </section>
      <section role="field" xreflabel="GREEDY" xml:id="org.osgi.service.component.annotations.ReferencePolicyOption.GREEDY">
         <title>GREEDY</title>
         <para>
The greedy policy option is a valid policy option for both
 <link linkend="org.osgi.service.component.annotations.ReferencePolicy.STATIC">static</link> and <link linkend="org.osgi.service.component.annotations.ReferencePolicy.DYNAMIC">dynamic</link> reference policies. When a new target service for a reference
 becomes available, references having the greedy policy option will bind
 the new target service.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="ReferenceScope" xml:id="org.osgi.service.component.annotations.ReferenceScope">
      <title>enum ReferenceScope</title>
      <para>
Reference scope for the <link linkend="org.osgi.service.component.annotations.Reference">Reference</link> annotation.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <section role="field" xreflabel="BUNDLE" xml:id="org.osgi.service.component.annotations.ReferenceScope.BUNDLE">
         <title>BUNDLE</title>
         <para>
A single service object is used for all references to the service in this
 bundle.
   </para>
      </section>
      <section role="field" xreflabel="PROTOTYPE" xml:id="org.osgi.service.component.annotations.ReferenceScope.PROTOTYPE">
         <title>PROTOTYPE</title>
         <para>
If the bound service has prototype service scope, then each instance of
 the component with this reference can receive a unique instance of the
 service. If the bound service does not have prototype service scope, then
 this reference scope behaves the same as <link linkend="org.osgi.service.component.annotations.ReferenceScope.BUNDLE">BUNDLE</link>.
   </para>
      </section>
      <section role="field" xreflabel="PROTOTYPE_REQUIRED" xml:id="org.osgi.service.component.annotations.ReferenceScope.PROTOTYPE_REQUIRED">
         <title>PROTOTYPE_REQUIRED</title>
         <para>
Bound services must have prototype service scope. Each instance of the
 component with this reference can receive a unique instance of the
 service.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="ServiceScope" xml:id="org.osgi.service.component.annotations.ServiceScope">
      <title>enum ServiceScope</title>
      <para>
Service scope for the <link linkend="org.osgi.service.component.annotations.Component">Component</link> annotation.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <section role="field" xreflabel="SINGLETON" xml:id="org.osgi.service.component.annotations.ServiceScope.SINGLETON">
         <title>SINGLETON</title>
         <para>
When the component is registered as a service, it must be registered as a
 bundle scope service but only a single instance of the component must be
 used for all bundles using the service.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE" xml:id="org.osgi.service.component.annotations.ServiceScope.BUNDLE">
         <title>BUNDLE</title>
         <para>
When the component is registered as a service, it must be registered as a
 bundle scope service and an instance of the component must be created for
 each bundle using the service.
   </para>
      </section>
      <section role="field" xreflabel="PROTOTYPE" xml:id="org.osgi.service.component.annotations.ServiceScope.PROTOTYPE">
         <title>PROTOTYPE</title>
         <para>
When the component is registered as a service, it must be registered as a
 prototype scope service and an instance of the component must be created
 for each distinct request for the service.
   </para>
      </section>
      <section role="field" xreflabel="DEFAULT" xml:id="org.osgi.service.component.annotations.ServiceScope.DEFAULT">
         <title>DEFAULT</title>
         <para>
Default element value for annotation. This is used to distinguish the
 default value for an element and should not otherwise be used.
   </para>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.service.component.runtime" xml:id="org.osgi.service.component.runtime" xml:base="../../generated/javadoc/docbook/org.osgi.service.component.runtime.xml">
   <title>org.osgi.service.component.runtime</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.component.runtime-version">Version 1.3</releaseinfo>
      <edition xml:id="org.osgi.service.component.runtime-version.number">1.3</edition>
   </info>
   <para>
Service Component Runtime Package Version 1.3.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.component.runtime; version="[1.3,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.component.runtime; version="[1.3,1.4)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.runtime.ServiceComponentRuntime">
                  <code>ServiceComponentRuntime</code>
               </link> - 
The <code>ServiceComponentRuntime</code> service represents the Declarative
 Services actor, known as Service Component Runtime (SCR), that manages the
 service components and their life cycle.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="ServiceComponentRuntime" xml:id="org.osgi.service.component.runtime.ServiceComponentRuntime">
      <title>public interface ServiceComponentRuntime</title>
      <para>
The <code>ServiceComponentRuntime</code> service represents the Declarative
 Services actor, known as Service Component Runtime (SCR), that manages the
 service components and their life cycle. The <code>ServiceComponentRuntime</code>
 service allows introspection of the components managed by Service Component
 Runtime.
 
 </para>
      <para>
 This service differentiates between a <link linkend="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO">ComponentDescriptionDTO</link> and a
 <link linkend="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO">ComponentConfigurationDTO</link>. A <link linkend="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO">ComponentDescriptionDTO</link> is a
 representation of a declared component description. A
 <link linkend="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO">ComponentConfigurationDTO</link> is a representation of an actual instance
 of a declared component description parameterized by component properties.
 </para>
      <para>
 
 Access to this service requires the
 <code>ServicePermission[ServiceComponentRuntime, GET]</code> permission. It is
 intended that only administrative bundles should be granted this permission
 to limit access to the potentially intrusive methods provided by this
 service.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="disableComponent(ComponentDescriptionDTO)" xml:id="org.osgi.service.component.runtime.ServiceComponentRuntime.disableComponent-ComponentDescriptionDTO-">
         <title>public Promise&lt;Void&gt; disableComponent(ComponentDescriptionDTO description)</title>
         <formalpara role="parameter">
            <title>description</title>
            <para>The component description to disable. Must not be
        <code>null</code>.</para>
         </formalpara>
         <para role="description">
Disables the specified component description.
 
 </para>
         <para>
 If the specified component description is currently disabled, this method
 has no effect.
 
 </para>
         <para>
 This method must return after changing the enabled state of the specified
 component description. Any actions that result from this, such as
 activating or deactivating a component configuration, must occur
 asynchronously to this method call.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A promise that will be resolved when the actions that result from
         changing the enabled state of the specified component have
         completed.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.component.runtime.ServiceComponentRuntime.isComponentEnabled-ComponentDescriptionDTO-">isComponentEnabled(ComponentDescriptionDTO)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="enableComponent(ComponentDescriptionDTO)" xml:id="org.osgi.service.component.runtime.ServiceComponentRuntime.enableComponent-ComponentDescriptionDTO-">
         <title>public Promise&lt;Void&gt; enableComponent(ComponentDescriptionDTO description)</title>
         <formalpara role="parameter">
            <title>description</title>
            <para>The component description to enable. Must not be
        <code>null</code>.</para>
         </formalpara>
         <para role="description">
Enables the specified component description.
 
 </para>
         <para>
 If the specified component description is currently enabled, this method
 has no effect.
 
 </para>
         <para>
 This method must return after changing the enabled state of the specified
 component description. Any actions that result from this, such as
 activating or deactivating a component configuration, must occur
 asynchronously to this method call.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A promise that will be resolved when the actions that result from
         changing the enabled state of the specified component have
         completed.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.component.runtime.ServiceComponentRuntime.isComponentEnabled-ComponentDescriptionDTO-">isComponentEnabled(ComponentDescriptionDTO)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getComponentConfigurationDTOs(ComponentDescriptionDTO)" xml:id="org.osgi.service.component.runtime.ServiceComponentRuntime.getComponentConfigurationDTOs-ComponentDescriptionDTO-">
         <title>public Collection&lt;ComponentConfigurationDTO&gt; getComponentConfigurationDTOs(ComponentDescriptionDTO description)</title>
         <formalpara role="parameter">
            <title>description</title>
            <para>The component description. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Returns the component configurations for the specified component
 description.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A collection containing a snapshot of the current component
         configurations for the specified component description. An empty
         collection is returned if there are none.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getComponentDescriptionDTO(Bundle,String)" xml:id="org.osgi.service.component.runtime.ServiceComponentRuntime.getComponentDescriptionDTO-Bundle-String-">
         <title>public ComponentDescriptionDTO getComponentDescriptionDTO(Bundle bundle,String name)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The bundle declaring the component description. Must not be
        <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the component description. Must not be
        <code>null</code>.</para>
         </formalpara>
         <para role="description">
Returns the <link linkend="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO">ComponentDescriptionDTO</link> declared with the specified name
 by the specified bundle.
 
 </para>
         <para>
 Only component descriptions from active bundles are returned.
 <code>null</code> if no such component is declared by the given <code>bundle</code>
 or the bundle is not active.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The declared component description or <code>null</code> if the
         specified bundle is not active or does not declare a component
         description with the specified name.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getComponentDescriptionDTOs(Bundle...)" xml:id="org.osgi.service.component.runtime.ServiceComponentRuntime.getComponentDescriptionDTOs-Bundle...-">
         <title>public Collection&lt;ComponentDescriptionDTO&gt; getComponentDescriptionDTOs(Bundle ... bundles)</title>
         <formalpara role="parameter">
            <title>bundles</title>
            <para>The bundles whose declared component descriptions are to
        be returned. Specifying no bundles, or the equivalent of an empty
        <code>Bundle</code> array, will return the declared component
        descriptions from all active bundles.</para>
         </formalpara>
         <para role="description">
Returns the component descriptions declared by the specified active
 bundles.
 
 </para>
         <para>
 Only component descriptions from active bundles are returned. If the
 specified bundles have no declared components or are not active, an empty
 collection is returned.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The declared component descriptions of the specified active
         <code>bundles</code>. An empty collection is returned if there are no
         component descriptions for the specified active bundles.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isComponentEnabled(ComponentDescriptionDTO)" xml:id="org.osgi.service.component.runtime.ServiceComponentRuntime.isComponentEnabled-ComponentDescriptionDTO-">
         <title>public boolean isComponentEnabled(ComponentDescriptionDTO description)</title>
         <formalpara role="parameter">
            <title>description</title>
            <para>The component description. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Returns whether the specified component description is currently enabled.
 
 </para>
         <para>
 The enabled state of a component description is initially set by the
 <link linkend="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.defaultEnabled">enabled</link> attribute of the
 component description.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the specified component description is currently
         enabled. Otherwise, <code>false</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.component.runtime.ServiceComponentRuntime.enableComponent-ComponentDescriptionDTO-">enableComponent(ComponentDescriptionDTO)</link>, <link linkend="org.osgi.service.component.runtime.ServiceComponentRuntime.disableComponent-ComponentDescriptionDTO-">disableComponent(ComponentDescriptionDTO)</link>, <link linkend="org.osgi.service.component.ComponentContext.disableComponent-String-">ComponentContext.disableComponent(String)</link>, <link linkend="org.osgi.service.component.ComponentContext.enableComponent-String-">ComponentContext.enableComponent(String)</link>
            </para>
         </formalpara>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.service.component.runtime.dto" xml:id="org.osgi.service.component.runtime.dto" xml:base="../../generated/javadoc/docbook/org.osgi.service.component.runtime.dto.xml">
   <title>org.osgi.service.component.runtime.dto</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.component.runtime.dto-version">Version 1.3</releaseinfo>
      <edition xml:id="org.osgi.service.component.runtime.dto-version.number">1.3</edition>
   </info>
   <para>
Service Component Runtime Data Transfer Objects Package Version 1.3.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.component.runtime.dto; version="[1.3,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.component.runtime.dto; version="[1.3,1.4)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO">
                  <code>ComponentConfigurationDTO</code>
               </link> - 
A representation of an actual instance of a declared component description
 parameterized by component properties.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO">
                  <code>ComponentDescriptionDTO</code>
               </link> - 
A representation of a declared component description.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.runtime.dto.ReferenceDTO">
                  <code>ReferenceDTO</code>
               </link> - 
A representation of a declared reference to a service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.runtime.dto.SatisfiedReferenceDTO">
                  <code>SatisfiedReferenceDTO</code>
               </link> - 
A representation of a satisfied reference.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.runtime.dto.UnsatisfiedReferenceDTO">
                  <code>UnsatisfiedReferenceDTO</code>
               </link> - 
A representation of an unsatisfied reference.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="ComponentConfigurationDTO" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO">
      <title>public class ComponentConfigurationDTO<?line-break?> extends DTO</title>
      <para>
A representation of an actual instance of a declared component description
 parameterized by component properties.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="ACTIVE" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.ACTIVE">
         <title>public static final int ACTIVE = 8</title>
         <para>
The component configuration is active.
 
 </para>
         <para>
 This is the normal operational state of a component configuration.</para>
      </section>
      <section role="field" xreflabel="description" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.description">
         <title>public ComponentDescriptionDTO description</title>
         <para>
The representation of the component configuration's component
 description.
   </para>
      </section>
      <section role="field" xreflabel="id" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.id">
         <title>public long id</title>
         <para>
The id of the component configuration.
 
 </para>
         <para>
 The id is a non-persistent, unique value assigned at runtime. The id is
 also available as the <code>component.id</code> component property. The value
 of this field is unspecified if the state of this component configuration
 is unsatisfied.</para>
      </section>
      <section role="field" xreflabel="properties" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.properties">
         <title>public Map&lt;String,Object&gt; properties</title>
         <para>
The component properties for the component configuration.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.component.ComponentContext.getProperties--">ComponentContext.getProperties()</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SATISFIED" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.SATISFIED">
         <title>public static final int SATISFIED = 4</title>
         <para>
The component configuration is satisfied.
 
 </para>
         <para>
 Any <link linkend="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.serviceInterfaces">services</link> declared
 by the component description are registered.</para>
      </section>
      <section role="field" xreflabel="satisfiedReferences" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.satisfiedReferences">
         <title>public SatisfiedReferenceDTO[] satisfiedReferences</title>
         <para>
The satisfied references.
 
 </para>
         <para>
 Each <link linkend="org.osgi.service.component.runtime.dto.SatisfiedReferenceDTO">SatisfiedReferenceDTO</link> in the array represents a satisfied
 reference of the component configuration. The array must be empty if the
 component configuration has no satisfied references.</para>
      </section>
      <section role="field" xreflabel="state" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.state">
         <title>public int state</title>
         <para>
The current state of the component configuration.
 
 </para>
         <para>
 This is one of <link linkend="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.UNSATISFIED_CONFIGURATION">UNSATISFIED_CONFIGURATION</link>,
 <link linkend="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.UNSATISFIED_REFERENCE">UNSATISFIED_REFERENCE</link>, <link linkend="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.SATISFIED">SATISFIED</link> or <link linkend="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.ACTIVE">ACTIVE</link>.</para>
      </section>
      <section role="field" xreflabel="UNSATISFIED_CONFIGURATION" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.UNSATISFIED_CONFIGURATION">
         <title>public static final int UNSATISFIED_CONFIGURATION = 1</title>
         <para>
The component configuration is unsatisfied due to a missing required
 configuration.
   </para>
      </section>
      <section role="field" xreflabel="UNSATISFIED_REFERENCE" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.UNSATISFIED_REFERENCE">
         <title>public static final int UNSATISFIED_REFERENCE = 2</title>
         <para>
The component configuration is unsatisfied due to an unsatisfied
 reference.
   </para>
      </section>
      <section role="field" xreflabel="unsatisfiedReferences" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.unsatisfiedReferences">
         <title>public UnsatisfiedReferenceDTO[] unsatisfiedReferences</title>
         <para>
The unsatisfied references.
 
 </para>
         <para>
 Each <link linkend="org.osgi.service.component.runtime.dto.UnsatisfiedReferenceDTO">UnsatisfiedReferenceDTO</link> in the array represents an
 unsatisfied reference of the component configuration. The array must be
 empty if the component configuration has no unsatisfied references.</para>
      </section>
      <section role="method" xreflabel="ComponentConfigurationDTO()" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.ComponentConfigurationDTO--">
         <title>public  ComponentConfigurationDTO()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="ComponentDescriptionDTO" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO">
      <title>public class ComponentDescriptionDTO<?line-break?> extends DTO</title>
      <para>
A representation of a declared component description.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="activate" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.activate">
         <title>public String activate</title>
         <para>
The name of the activate method.
 
 </para>
         <para>
 This is declared in the <code>activate</code> attribute of the
 <code>component</code> element. This must be <code>null</code> if the component
 description does not declare an activate method name.</para>
      </section>
      <section role="field" xreflabel="bundle" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.bundle">
         <title>public BundleDTO bundle</title>
         <para>
The bundle declaring the component description.
   </para>
      </section>
      <section role="field" xreflabel="configurationPid" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.configurationPid">
         <title>public String[] configurationPid</title>
         <para>
The configuration pids.
 
 </para>
         <para>
 These are declared in the <code>configuration-pid</code> attribute of the
 <code>component</code> element. This must contain the default configuration
 pid if the component description does not declare a configuration pid.</para>
      </section>
      <section role="field" xreflabel="configurationPolicy" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.configurationPolicy">
         <title>public String configurationPolicy</title>
         <para>
The configuration policy.
 
 </para>
         <para>
 This is declared in the <code>configuration-policy</code> attribute of the
 <code>component</code> element. This must be the default configuration policy
 if the component description does not declare a configuration policy.</para>
      </section>
      <section role="field" xreflabel="deactivate" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.deactivate">
         <title>public String deactivate</title>
         <para>
The name of the deactivate method.
 
 </para>
         <para>
 This is declared in the <code>deactivate</code> attribute of the
 <code>component</code> element. This must be <code>null</code> if the component
 description does not declare a deactivate method name.</para>
      </section>
      <section role="field" xreflabel="defaultEnabled" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.defaultEnabled">
         <title>public boolean defaultEnabled</title>
         <para>
The initial enabled state.
 
 </para>
         <para>
 This is declared in the <code>enabled</code> attribute of the
 <code>component</code> element.</para>
      </section>
      <section role="field" xreflabel="factory" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.factory">
         <title>public String factory</title>
         <para>
The component factory name.
 
 </para>
         <para>
 This is declared in the <code>factory</code> attribute of the
 <code>component</code> element. This must be <code>null</code> if the component
 description is not declared as a component factory.</para>
      </section>
      <section role="field" xreflabel="immediate" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.immediate">
         <title>public boolean immediate</title>
         <para>
The immediate state.
 
 </para>
         <para>
 This is declared in the <code>immediate</code> attribute of the
 <code>component</code> element.</para>
      </section>
      <section role="field" xreflabel="implementationClass" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.implementationClass">
         <title>public String implementationClass</title>
         <para>
The fully qualified name of the implementation class.
 
 </para>
         <para>
 This is declared in the <code>class</code> attribute of the
 <code>implementation</code> element.</para>
      </section>
      <section role="field" xreflabel="modified" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.modified">
         <title>public String modified</title>
         <para>
The name of the modified method.
 
 </para>
         <para>
 This is declared in the <code>modified</code> attribute of the
 <code>component</code> element. This must be <code>null</code> if the component
 description does not declare a modified method name.</para>
      </section>
      <section role="field" xreflabel="name" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.name">
         <title>public String name</title>
         <para>
The name of the component.
 
 </para>
         <para>
 This is declared in the <code>name</code> attribute of the <code>component</code>
 element. This must be the default name if the component description does
 not declare a name.</para>
      </section>
      <section role="field" xreflabel="properties" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.properties">
         <title>public Map&lt;String,Object&gt; properties</title>
         <para>
The declared component properties.
 
 </para>
         <para>
 These are declared in the <code>property</code> and <code>properties</code>
 elements.</para>
      </section>
      <section role="field" xreflabel="references" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.references">
         <title>public ReferenceDTO[] references</title>
         <para>
The referenced services.
 
 </para>
         <para>
 These are declared in the <code>reference</code> elements. The array must be
 empty if the component description does not declare references to any
 services.</para>
      </section>
      <section role="field" xreflabel="scope" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.scope">
         <title>public String scope</title>
         <para>
The service scope.
 
 </para>
         <para>
 This is declared in the <code>scope</code> attribute of the <code>service</code>
 element. This must be <code>null</code> if the component description does not
 declare any service interfaces.</para>
      </section>
      <section role="field" xreflabel="serviceInterfaces" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.serviceInterfaces">
         <title>public String[] serviceInterfaces</title>
         <para>
The fully qualified names of the service interfaces.
 
 </para>
         <para>
 These are declared in the <code>interface</code> attribute of the
 <code>provide</code> elements. The array must be empty if the component
 description does not declare any service interfaces.</para>
      </section>
      <section role="method" xreflabel="ComponentDescriptionDTO()" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.ComponentDescriptionDTO--">
         <title>public  ComponentDescriptionDTO()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="ReferenceDTO" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO">
      <title>public class ReferenceDTO<?line-break?> extends DTO</title>
      <para>
A representation of a declared reference to a service.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="bind" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.bind">
         <title>public String bind</title>
         <para>
The name of the bind method of the reference.
 
 </para>
         <para>
 This is declared in the <code>bind</code> attribute of the <code>reference</code>
 element. This must be <code>null</code> if the component description does not
 declare a bind method for the reference.</para>
      </section>
      <section role="field" xreflabel="cardinality" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.cardinality">
         <title>public String cardinality</title>
         <para>
The cardinality of the reference.
 
 </para>
         <para>
 This is declared in the <code>cardinality</code> attribute of the
 <code>reference</code> element. This must be the default cardinality if the
 component description does not declare a cardinality for the reference.</para>
      </section>
      <section role="field" xreflabel="field" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.field">
         <title>public String field</title>
         <para>
The name of the field of the reference.
 
 </para>
         <para>
 This is declared in the <code>field</code> attribute of the <code>reference</code>
 element. This must be <code>null</code> if the component description does not
 declare a field for the reference.</para>
      </section>
      <section role="field" xreflabel="fieldOption" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.fieldOption">
         <title>public String fieldOption</title>
         <para>
The field option of the reference.
 
 </para>
         <para>
 This is declared in the <code>field-option</code> attribute of the
 <code>reference</code> element. This must be <code>null</code> if the component
 description does not declare a field for the reference.</para>
      </section>
      <section role="field" xreflabel="interfaceName" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.interfaceName">
         <title>public String interfaceName</title>
         <para>
The service interface of the reference.
 
 </para>
         <para>
 This is declared in the <code>interface</code> attribute of the
 <code>reference</code> element.</para>
      </section>
      <section role="field" xreflabel="name" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.name">
         <title>public String name</title>
         <para>
The name of the reference.
 
 </para>
         <para>
 This is declared in the <code>name</code> attribute of the <code>reference</code>
 element. This must be the default name if the component description does
 not declare a name for the reference.</para>
      </section>
      <section role="field" xreflabel="policy" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.policy">
         <title>public String policy</title>
         <para>
The policy of the reference.
 
 </para>
         <para>
 This is declared in the <code>policy</code> attribute of the <code>reference</code>
 element. This must be the default policy if the component description
 does not declare a policy for the reference.</para>
      </section>
      <section role="field" xreflabel="policyOption" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.policyOption">
         <title>public String policyOption</title>
         <para>
The policy option of the reference.
 
 </para>
         <para>
 This is declared in the <code>policy-option</code> attribute of the
 <code>reference</code> element. This must be the default policy option if the
 component description does not declare a policy option for the reference.</para>
      </section>
      <section role="field" xreflabel="scope" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.scope">
         <title>public String scope</title>
         <para>
The scope of the reference.
 
 </para>
         <para>
 This is declared in the <code>scope</code> attribute of the <code>reference</code>
 element. This must be the default scope if the component description does
 not declare a scope for the reference.</para>
      </section>
      <section role="field" xreflabel="target" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.target">
         <title>public String target</title>
         <para>
The target of the reference.
 
 </para>
         <para>
 This is declared in the <code>target</code> attribute of the <code>reference</code>
 element. This must be <code>null</code> if the component description does not
 declare a target for the reference.</para>
      </section>
      <section role="field" xreflabel="unbind" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.unbind">
         <title>public String unbind</title>
         <para>
The name of the unbind method of the reference.
 
 </para>
         <para>
 This is declared in the <code>unbind</code> attribute of the <code>reference</code>
 element. This must be <code>null</code> if the component description does not
 declare an unbind method for the reference.</para>
      </section>
      <section role="field" xreflabel="updated" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.updated">
         <title>public String updated</title>
         <para>
The name of the updated method of the reference.
 
 </para>
         <para>
 This is declared in the <code>updated</code> attribute of the
 <code>reference</code> element. This must be <code>null</code> if the component
 description does not declare an updated method for the reference.</para>
      </section>
      <section role="method" xreflabel="ReferenceDTO()" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.ReferenceDTO--">
         <title>public  ReferenceDTO()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="SatisfiedReferenceDTO" xml:id="org.osgi.service.component.runtime.dto.SatisfiedReferenceDTO">
      <title>public class SatisfiedReferenceDTO<?line-break?> extends DTO</title>
      <para>
A representation of a satisfied reference.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="boundServices" xml:id="org.osgi.service.component.runtime.dto.SatisfiedReferenceDTO.boundServices">
         <title>public ServiceReferenceDTO[] boundServices</title>
         <para>
The bound services.
 
 </para>
         <para>
 Each <link linkend="org.osgi.framework.dto.ServiceReferenceDTO">ServiceReferenceDTO</link> in the array represents a service bound
 to the satisfied reference. The array must be empty if there are no bound
 services.</para>
      </section>
      <section role="field" xreflabel="name" xml:id="org.osgi.service.component.runtime.dto.SatisfiedReferenceDTO.name">
         <title>public String name</title>
         <para>
The name of the declared reference.
 
 </para>
         <para>
 This is declared in the <code>name</code> attribute of the <code>reference</code>
 element of the component description.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.component.runtime.dto.ReferenceDTO.name">ReferenceDTO.name</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="target" xml:id="org.osgi.service.component.runtime.dto.SatisfiedReferenceDTO.target">
         <title>public String target</title>
         <para>
The target property of the satisfied reference.
 
 </para>
         <para>
 This is the value of the <link linkend="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.properties">component property</link> whose name is the concatenation of the
 <link linkend="org.osgi.service.component.runtime.dto.ReferenceDTO.name">declared reference name</link> and
 ".target". This must be <code>null</code> if no target property is
 set for the reference.</para>
      </section>
      <section role="method" xreflabel="SatisfiedReferenceDTO()" xml:id="org.osgi.service.component.runtime.dto.SatisfiedReferenceDTO.SatisfiedReferenceDTO--">
         <title>public  SatisfiedReferenceDTO()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="UnsatisfiedReferenceDTO" xml:id="org.osgi.service.component.runtime.dto.UnsatisfiedReferenceDTO">
      <title>public class UnsatisfiedReferenceDTO<?line-break?> extends DTO</title>
      <para>
A representation of an unsatisfied reference.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="name" xml:id="org.osgi.service.component.runtime.dto.UnsatisfiedReferenceDTO.name">
         <title>public String name</title>
         <para>
The name of the declared reference.
 
 </para>
         <para>
 This is declared in the <code>name</code> attribute of the <code>reference</code>
 element of the component description.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.component.runtime.dto.ReferenceDTO.name">ReferenceDTO.name</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="target" xml:id="org.osgi.service.component.runtime.dto.UnsatisfiedReferenceDTO.target">
         <title>public String target</title>
         <para>
The target property of the unsatisfied reference.
 
 </para>
         <para>
 This is the value of the <link linkend="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.properties">component property</link> whose name is the concatenation of the
 <link linkend="org.osgi.service.component.runtime.dto.ReferenceDTO.name">declared reference name</link> and
 ".target". This must be <code>null</code> if no target property is
 set for the reference.</para>
      </section>
      <section role="field" xreflabel="targetServices" xml:id="org.osgi.service.component.runtime.dto.UnsatisfiedReferenceDTO.targetServices">
         <title>public ServiceReferenceDTO[] targetServices</title>
         <para>
The target services.
 
 </para>
         <para>
 Each <link linkend="org.osgi.framework.dto.ServiceReferenceDTO">ServiceReferenceDTO</link> in the array represents a target service
 for the reference. The array must be empty if there are no target
 services. The upper bound on the number of target services in the array
 is the upper bound on the <link linkend="org.osgi.service.component.runtime.dto.ReferenceDTO.cardinality">cardinality</link> of
 the reference.</para>
      </section>
      <section role="method" xreflabel="UnsatisfiedReferenceDTO()" xml:id="org.osgi.service.component.runtime.dto.UnsatisfiedReferenceDTO.UnsatisfiedReferenceDTO--">
         <title>public  UnsatisfiedReferenceDTO()</title>
         <para/>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i1550732"><title>Automating Service Dependency
      Management in a Service-Oriented Component Model</title>Humberto
      Cervantes, Richard S. Hall, Proceedings of the Sixth Component-Based
      Software Engineering Workshop, May 2003, pp. 91-96<?line-break?>http://www-adele.imag.fr/Les.Publications/intConferences/CBSE2003Cer.pdf</bibliomixed>

      <bibliomixed><title>Service Binder</title>Humberto Cervantes, Richard S.
      Hall<?line-break?>http://gravity.sourceforge.net/servicebinder</bibliomixed>

      <bibliomixed xml:id="i1567926"><title>Java Properties
      File</title>http://docs.oracle.com/javase/7/docs/api/java/util/Properties.html</bibliomixed>

      <bibliomixed xml:id="i1636361"><title>Extensible Markup Language (XML)
      1.0</title>http://www.w3.org/TR/REC-xml/</bibliomixed>

      <bibliomixed xml:id="i1655737"><title>OSGi XML
      Schemas</title>http://www.osgi.org/Specifications</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="113" revision="$Id: 03ab3d3ce8cba58f46eb5bdc678d6e4683480804 $" version="5" xml:id="service.event" xml:base="../113/service.event.xml">
  <title>Event Admin Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.event-version" linkend="org.osgi.service.event"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>Nearly all the bundles in an OSGi framework must deal with events,
    either as an event publisher or as an event handler. So far, the preferred
    mechanism to disperse those events have been the service interface
    mechanism.</para>

    <para>Dispatching events for a design related to X, usually involves a
    service of type <code>XListener</code>. However, this model does not scale
    well for fine grained events that must be dispatched to many different
    handlers. Additionally, the dynamic nature of the OSGi environment
    introduces several complexities because both event publishers and event
    handlers can appear and disappear at any time.</para>

    <para>The Event Admin service provides an inter-bundle communication
    mechanism. It is based on a event <emphasis>publish</emphasis> and
    <emphasis>subscribe</emphasis> model, popular in many message based
    systems.</para>

    <para>This specification defines the details for the participants in this
    event model.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Simplifications</emphasis> - The model must
          significantly simplify the process of programming an event source
          and an event handler.</para>
        </listitem>

        <listitem>
          <para><emphasis>Dependencies</emphasis> - Handle the myriad of
          dependencies between event sources and event handlers for proper
          cleanup.</para>
        </listitem>

        <listitem>
          <para><emphasis>Synchronicity</emphasis> - It must be possible to
          deliver events asynchronously or synchronously with the
          caller.</para>
        </listitem>

        <listitem>
          <para><emphasis>Event Window</emphasis> - Only event handlers that
          are active when an event is published must receive this event,
          handlers that register later must not see the event.</para>
        </listitem>

        <listitem>
          <para><emphasis>Performance</emphasis> - The event mechanism must
          impose minimal overhead in delivering events.</para>
        </listitem>

        <listitem>
          <para><emphasis>Selectivity</emphasis> - Event listeners must only
          receive notifications for the event types for which they are
          interested</para>
        </listitem>

        <listitem>
          <para><emphasis>Reliability</emphasis> - The Event Admin must ensure
          that events continue to be delivered regardless the quality of the
          event handlers.</para>
        </listitem>

        <listitem>
          <para><emphasis>Security</emphasis> - Publishing and receiving
          events are sensitive operations that must be protected per event
          type.</para>
        </listitem>

        <listitem>
          <para><emphasis>Extensibility</emphasis> - It must be possible to
          define new event types with their own data types.</para>
        </listitem>

        <listitem>
          <para><emphasis>Native Code</emphasis> - Events must be able to be
          passed to native code or come from native code.</para>
        </listitem>

        <listitem>
          <para><emphasis>OSGi Events</emphasis> - The OSGi Framework, as well
          as a number of OSGi services, already have number of its own events
          defined. For uniformity of processing, these have to be mapped into
          generic event types.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Event</emphasis> - An <code>Event</code> object has
          a topic and a <code>Dictionary</code> object that contains the event
          properties. It is an immutable object.</para>
        </listitem>

        <listitem>
          <para><emphasis>Event Admin</emphasis> - The service that provides
          the publish and subscribe model to Event Handlers and Event
          Publishers.</para>
        </listitem>

        <listitem>
          <para><emphasis>Event Handler</emphasis> - A service that receives
          and handles <code>Event</code> objects.</para>
        </listitem>

        <listitem>
          <para><emphasis>Event Publisher</emphasis> - A bundle that sends
          event through the Event Admin service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Event Subscriber</emphasis> - Another name for an
          Event Handler.</para>
        </listitem>

        <listitem>
          <para><emphasis>Topic</emphasis> - The name of an Event type.</para>
        </listitem>

        <listitem>
          <para><emphasis>Event Properties</emphasis> - The set of properties
          that is associated with an Event.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>The Event Admin service org.osgi.service.event package</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.865in" contentwidth="7.000in" fileref="eventadmin-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Synopsis</title>

      <para>The Event Admin service provides a place for bundles to publish
      events, regardless of their destination. It is also used by Event
      Handlers to subscribe to specific types of events.</para>

      <para>Events are published under a topic, together with a number of
      event properties. Event Handlers can specify a filter to control the
      Events they receive on a very fine grained basis.</para>
    </section>

    <section>
      <title>What To Read</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Architects</emphasis> - The <xref linkend="i1487590"/> provides an overview of the Event Admin
          service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Event Publishers</emphasis> - The <xref linkend="i1399436"/> provides an introduction of how to write an
          Event Publisher. The <xref linkend="i1487590"/> provides a good
          overview of the design.</para>
        </listitem>

        <listitem>
          <para><emphasis>Event Subscribers/Handlers</emphasis> - The <xref linkend="i1557230"/> provides the rules on how to subscribe and
          handle events.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="i1487590">
    <title>Event Admin Architecture</title>

    <para>The Event Admin is based on the
    <emphasis>Publish-Subscribe</emphasis> pattern. This pattern decouples
    sources from their handlers by interposing an <emphasis>event
    channel</emphasis> between them. The publisher posts events to the
    channel, which identifies which handlers need to be notified and then
    takes care of the notification process. This model is depicted in <xref linkend="i1450302"/>.</para>

    <figure xml:id="i1450302">
      <title>Channel Pattern</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="0.995in" contentwidth="4.940in" fileref="channel-pattern.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>In this model, the event source and event handler are completely
    decoupled because neither has any direct knowledge of the other. The
    complicated logic of monitoring changes in the event publishers and event
    handlers is completely contained within the event channel. This is highly
    advantageous in an OSGi environment because it simplifies the process of
    both sending and receiving events.</para>
  </section>

  <section>
    <title>The Event</title>

    <para>Events have the following attributes:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Topic</emphasis> - A topic that defines what happened.
        For example, when a bundle is started an event is published that has a
        topic of <code>org/osgi/framework/BundleEvent/STARTED</code>.</para>
      </listitem>

      <listitem>
        <para><emphasis>Properties</emphasis> - Zero or more properties that
        contain additional information about the event. For example, the
        previous example event has a property of <code>bundle.id</code> which
        is set to a <code>Long</code> object, among other properties.</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Topics</title>

      <para>The topic of an event defines the <emphasis>type</emphasis> of the
      event. It is fairly granular in order to give handlers the opportunity
      to register for just the events they are interested in. When a topic is
      designed, its name should not include any other information, such as the
      publisher of the event or the data associated with the event, those
      parts are intended to be stored in the event properties.</para>

      <para>The topic is intended to serve as a first-level filter for
      determining which handlers should receive the event. Event Admin service
      implementations use the structure of the topic to optimize the
      dispatching of the events to the handlers.</para>

      <para>Topics are arranged in a hierarchical namespace. Each level is
      defined by a token and levels are separated by solidi (<code>'/'
      \u002F</code>). More precisely, the topic must conform to the following
      grammar:</para>

      <programlisting>  topic ::= token ( '/' token ) *    // See General Syntax Definitions in Core</programlisting>

      <para>Topics should be designed to become more specific when going from
      left to right. Handlers can provide a prefix that matches a topic, using
      the preferred order allows a handler to minimize the number of prefixes
      it needs to register.</para>

      <para>Topics are case-sensitive. As a convention, topics should follow
      the reverse domain name scheme used by Java packages to guarantee
      uniqueness. The separator must be a solidus (<code>'/' \u002F</code>)
      instead of the full stop (<code>'.' \u002E</code>).</para>

      <para>This specification uses the convention
      <code>fully/qualified/package/ClassName/ACTION</code>. If necessary, a
      pseudo-class-name is used.</para>
    </section>

    <section>
      <title>Properties</title>

      <para>Information about the actual event is provided as properties. The
      property name is a case-sensitive string and the value can be any
      object. Although any Java object can be used as a property value, only
      <code>String</code> objects and the eight primitive types (plus their
      wrappers) should be used. Other types cannot be passed to handlers that
      reside external from the Java VM.</para>

      <para>Another reason that arbitrary classes should not be used is the
      mutability of objects. If the values are not immutable, then any handler
      that receives the event could change the value. Any handlers that
      received the event subsequently would see the altered value and not the
      value as it was when the event was sent.</para>

      <para>The topic of the event is available as a property with the key
      <xref linkend="org.osgi.service.event.EventConstants.EVENT_TOPIC" xrefstyle="hyperlink"/>. This allows filters to include the topic as a
      condition if necessary.</para>
    </section>

    <section>
      <title>High Performance</title>

      <para>An event processing system can become a bottleneck in large
      systems. One expensive aspect of the Event object is its properties and
      its immutability. This combination requires the Event object to create a
      copy of the properties for each object. There are many situations where
      the same properties are dispatched through Event Admin, the topic is
      then used to signal the information. Creating the copy of the properties
      can therefore take unnecessary CPU time and memory. However, the
      immutability of the Event object requires the properties to be
      immutable.</para>

      <para>For this reason, this specification also provides an immutable Map
      with the Event Properties class. This class implements an immutable map
      that is recognized and trusted by the Event object to not mutate. Using
      an Event Properties object allows a client to create many different
      Event objects with different topics but sharing the same properties
      object.</para>

      <para>The following example shows how an event poster can limit the
      copying of the properties.</para>

      <programlisting>void foo(EventAdmin eventAdmin) {
   Map&lt;String,Object&gt; props = new HashMap&lt;String,Object&gt;();
   props.put("foo", 1);
   EventProperties eventProps = new EventProperties( props);

   for ( int i=0; i&lt;1000; i++)
      eventAdmin.postEvent( new Event( "my/topic/" + i, eventProps));
}</programlisting>
    </section>
  </section>

  <section xml:id="i1557230">
    <title>Event Handler</title>

    <para>Event handlers must be registered as services with the OSGi
    framework under the object class
    <code>org.osgi.service.event.EventHandler</code>.</para>

    <para>Event handlers should be registered with a property (constant from
    the <code>EventConstants</code> class) <xref linkend="org.osgi.service.event.EventConstants.EVENT_TOPIC" xrefstyle="hyperlink"/>. The value being a <code>String</code>,
    <code>String[]</code> or <code>Collection&lt;String&gt;</code> object that
    describes which <emphasis>topics</emphasis> the handler is interested in.
    A wildcard asterisk (<code>'*' \u002A</code>) may be used as the last
    token of a topic name, for example <code>com/action/*</code>. This matches
    any topic that shares the same first tokens. For example,
    <code>com/action/*</code> matches <code>com/action/listen</code>.</para>

    <para>Event Handlers which have not specified the <xref linkend="org.osgi.service.event.EventConstants.EVENT_TOPIC" xrefstyle="hyperlink"/> service property must not receive events.</para>

    <para>The value of each entry in the <xref linkend="org.osgi.service.event.EventConstants.EVENT_TOPIC" xrefstyle="hyperlink"/> service registration property must conform to the
    following grammar:</para>

    <programlisting>topic-scope ::= '*' | ( topic '/*'?  )</programlisting>

    <para>Event handlers can also be registered with a service property named
    <xref linkend="org.osgi.service.event.EventConstants.EVENT_FILTER" xrefstyle="hyperlink"/>. The value of this property must be a string
    containing a Framework filter specification. Any of the event's properties
    can be used in the filter expression.</para>

    <programlisting>event-filter ::= filter              //  See Filter Syntax in Core</programlisting>

    <para>Each Event Handler is notified for any event which belongs to the
    topics the handler has expressed an interest in. If the handler has
    defined a <xref linkend="org.osgi.service.event.EventConstants.EVENT_FILTER" xrefstyle="hyperlink"/> service property then the event properties must
    also match the filter expression. If the filter is an error, then the
    Event Admin service should log a warning and further ignore the Event
    Handler.</para>

    <para>For example, a bundle wants to see all Log Service events with a
    level of <code>WARNING</code> or <code>ERROR</code>, but it must ignore
    the <code>INFO</code> and <code>DEBUG</code> events. Additionally, the
    only events of interest are when the bundle symbolic name starts with
    <code>com.acme</code>.</para>

    <programlisting>public AcmeWatchDog implements BundleActivator, 
        EventHandler {
    final static String [] topics = new String[] {
        "org/osgi/service/log/LogEntry/LOG_WARNING",
        "org/osgi/service/log/LogEntry/LOG_ERROR" };

    public void start(BundleContext context) {
        Dictionary d = new Hashtable();
        d.put(EventConstants.EVENT_TOPIC, topics );
        d.put(EventConstants.EVENT_FILTER, 
            "(bundle.symbolicName=com.acme.*)" );
        context.registerService( EventHandler.class.getName(),
            this, d );
    }
    public void stop( BundleContext context) {}

    public void handleEvent(Event event ) {
        //...
    }
}</programlisting>

    <para>If there are multiple Event Admin services registered with the
    Framework then all Event Admin services must send their published events
    to all registered Event Handlers.</para>

    <section xml:id="i1556001">
      <title>Ordering</title>

      <para>In the default case, an Event Handler will receive posted
      (asynchronous) events from a single thread in the same order as they
      were posted. Maintaining this ordering guarantee requires the Event
      Admin to serialize the delivery of events instead of, for example,
      delivering the events on different worker threads. There are many
      scenarios where this ordering is not really required. For this reason,
      an Event Handler can signal to the Event Admin that events can be
      delivered out of order. This is notified with the <xref linkend="org.osgi.service.event.EventConstants.EVENT_DELIVERY" xrefstyle="hyperlink"/> service property. This service property can be
      used in the following way:</para>

      <itemizedlist>
        <listitem>
          <para>Not set or set to both - The Event Admin must deliver the
          events in the proper order.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.event.EventConstants.DELIVERY_ASYNC_ORDERED" xrefstyle="hyperlink"/> - Events must be delivered in order.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.event.EventConstants.DELIVERY_ASYNC_UNORDERED" xrefstyle="hyperlink"/> - Allow the events to be delivered in any
          order.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="i1399436">
    <title>Event Publisher</title>

    <para>To fire an event, the event source must retrieve the Event Admin
    service from the OSGi service registry. Then it creates the event object
    and calls one of the Event Admin service's methods to fire the event
    either synchronously or asynchronously.</para>

    <para>The following example is a class that publishes a time event every
    60 seconds.</para>

    <programlisting>public class TimerEvent extends Thread 
    implements BundleActivator {
    Hashtable      time = new Hashtable();
    ServiceTracker tracker;

    public TimerEvent() { super("TimerEvent"); }

    public void start(BundleContext context ) {
        tracker = new ServiceTracker(context,
            EventAdmin.class.getName(), null );
        tracker.open();
        start();
    }

    public void stop( BundleContext context ) {
        interrupt();
        tracker.close();
    }

    public void run() {
        while ( ! Thread.interrupted() ) try {
            Calendar c = Calendar.getInstance();
            set(c,Calendar.MINUTE,"minutes");
            set(c,Calendar.HOUR,"hours");
            set(c,Calendar.DAY_OF_MONTH,"day");
            set(c,Calendar.MONTH,"month");
            set(c,Calendar.YEAR,"year");

            EventAdmin ea =
                (EventAdmin) tracker.getService();
            if ( ea != null )
                ea.sendEvent(new Event("com/acme/timer",
                    time ));
            Thread.sleep(60000-c.get(Calendar.SECOND)*1000);
        } catch( InterruptedException e ) {
            return;
        }
    }

    void set( Calendar c, int field, String key ) {
        time.put( key, new Integer(c.get(field)) );
    }
}       </programlisting>
  </section>

  <section>
    <title>Specific Events</title>

    <section>
      <title>General Conventions</title>

      <para>Some handlers are more interested in the contents of an event
      rather than what actually happened. For example, a handler wants to be
      notified whenever an Exception is thrown anywhere in the system. Both
      Framework Events and Log Entry events may contain an exception that
      would be of interest to this hypothetical handler. If both Framework
      Events and Log Entries use the same property names then the handler can
      access the Exception in exactly the same way. If some future event type
      follows the same conventions then the handler can receive and process
      the new event type even though it had no knowledge of it when it was
      compiled.</para>

      <para>The following properties are suggested as conventions. When new
      event types are defined they should use these names with the
      corresponding types and values where appropriate. These values should be
      set only if they are not <code>null</code></para>

      <para>A list of these property names can be found in the following
      table.</para>

      <table>
        <title>General property names for events</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="2*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="4*"/>

          <thead>
            <row>
              <entry>Name</entry>

              <entry>Type</entry>

              <entry>Notes</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.BUNDLE_SIGNER" xrefstyle="hyperlink"/></para></entry>

              <entry><code>String | Collection &lt;String&gt;</code></entry>

              <entry><para>A bundle's signers DN</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.BUNDLE_VERSION" xrefstyle="hyperlink"/></para></entry>

              <entry><code>Version</code></entry>

              <entry><para>A bundle's version</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.BUNDLE_SYMBOLICNAME" xrefstyle="hyperlink"/></para></entry>

              <entry><code>String</code></entry>

              <entry><para>A bundle's symbolic name</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.EVENT" xrefstyle="hyperlink"/></para></entry>

              <entry><code>Object</code></entry>

              <entry><para>The actual event object. Used when rebroadcasting
              an event that was sent via some other event
              mechanism</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.EXCEPTION" xrefstyle="hyperlink"/></para></entry>

              <entry><code>Throwable</code></entry>

              <entry><para>An exception or error</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.EXCEPTION_MESSAGE" xrefstyle="hyperlink"/></para></entry>

              <entry><code>String</code></entry>

              <entry><para>Must be equal to
              <code>exception.getMessage()</code>.</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.EXCEPTION_CLASS" xrefstyle="hyperlink"/></para></entry>

              <entry><code>String</code></entry>

              <entry><para>Must be equal to the name of the
              <code>Exception</code> class.</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.MESSAGE" xrefstyle="hyperlink"/></para></entry>

              <entry><code>String</code></entry>

              <entry><para>A human-readable message that is usually not
              localized.</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.SERVICE" xrefstyle="hyperlink"/></para></entry>

              <entry><code>Service Reference</code></entry>

              <entry><para>A Service Reference</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.SERVICE_ID" xrefstyle="hyperlink"/></para></entry>

              <entry><code>Long</code></entry>

              <entry><para>A service's id</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.SERVICE_OBJECTCLASS" xrefstyle="hyperlink"/></para></entry>

              <entry><code>String[]</code></entry>

              <entry><para>A service's <code>objectClass</code></para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.SERVICE_PID" xrefstyle="hyperlink"/></para></entry>

              <entry><code>String | Collection &lt;String&gt;</code></entry>

              <entry><para>A service's persistent identity. A PID that is
              specified with a <code>String[]</code> must be coerced into a
              <code>Collection&lt;String&gt;</code>.</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.TIMESTAMP" xrefstyle="hyperlink"/></para></entry>

              <entry><code>Long</code></entry>

              <entry><para>The time when the event occurred, as reported by
              <code>System.currentTimeMillis()</code></para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The topic of an OSGi event is constructed by taking the fully
      qualified name of the event class, substituting a solidus (<code>'/'
      \u002F</code>)for every full stop, and appending a solidus followed by
      the name of the constant that defines the event type. For example, the
      topic of</para>

      <programlisting>BundleEvent.STARTED</programlisting>

      <para>Event becomes</para>

      <programlisting>org/osgi/framework/BundleEvent/STARTED</programlisting>

      <para>If a type code for the event is unknown then the event must be
      ignored.</para>
    </section>

    <section>
      <title>OSGi Events</title>

      <para>In order to present a consistent view of all the events occurring
      in the system, the existing Framework-level events are mapped to the
      Event Admin's publish-subscribe model. This allows event subscribers to
      treat framework events exactly the same as other events.</para>

      <para>It is the responsibility of the Event Admin service implementation
      to map these Framework events to its queue.</para>

      <para>The properties associated with the event depends on its class as
      outlined in the following sections.</para>
    </section>

    <section>
      <title>Framework Event</title>

      <para>Framework Events must be delivered asynchronously with a topic
      of:</para>

      <programlisting>org/osgi/framework/FrameworkEvent/&lt;eventtype&gt;</programlisting>

      <para>The following event types are supported:</para>

      <programlisting>STARTED 
ERROR   
PACKAGES_REFRESHED
STARTLEVEL_CHANGED
WARNING
INFO</programlisting>

      <para>Other events are ignored, no event will be send by the Event
      Admin. The following event properties must be set for a Framework
      Event.</para>

      <itemizedlist>
        <listitem>
          <para><code>event</code> - (<code>FrameworkEvent</code>) The
          original event object.</para>
        </listitem>
      </itemizedlist>

      <para>If the <code>FrameworkEvent getBundle</code> method returns a
      non-<code>null</code> value, the following fields must be set:</para>

      <itemizedlist>
        <listitem>
          <para><code>bundle.id - (Long</code>) The source's bundle id.</para>
        </listitem>

        <listitem>
          <para><code>bundle.symbolicName</code> - (<code>String)</code> The
          source bundle's symbolic name. Only set if the bundle's symbolic
          name is not <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><code>bundle.version</code> - <code>(Version)</code> The
          version of the bundle, if set.</para>
        </listitem>

        <listitem>
          <para><code>bundle.signer</code> -
          <code>(String|Collection&lt;String&gt;)</code> The DNs of the
          signers.</para>
        </listitem>

        <listitem>
          <para><code>bundle</code> - (<code>Bundle</code>) The source
          bundle.</para>
        </listitem>
      </itemizedlist>

      <para>If the <code>FrameworkEvent</code> <code>getThrowable</code>
      method returns a non-<code>null</code> value:</para>

      <itemizedlist>
        <listitem>
          <para><code>exception.class</code> - (<code>String</code>) The
          fully-qualified class name of the attached Exception.</para>
        </listitem>

        <listitem>
          <para><code>exception.message</code> -( <code>String)</code> The
          message of the attached exception. Only set if the Exception message
          is not <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><code>exception</code> - (Throwable) The Exception returned by
          the <code>getThrowable</code> method.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Bundle Event</title>

      <para>Framework Events must be delivered asynchronously with a topic
      of:</para>

      <programlisting>org/osgi/framework/BundleEvent/&lt;event type&gt;</programlisting>

      <para>The following event types are supported:</para>

      <programlisting>INSTALLED
STARTED
STOPPED
UPDATED
UNINSTALLED
RESOLVED
UNRESOLVED</programlisting>

      <para>Unknown events must be ignored.</para>

      <para>The following event properties must be set for a Bundle Event. If
      listeners require synchronous delivery then they should register a
      Synchronous Bundle Listener with the Framework.</para>

      <itemizedlist>
        <listitem>
          <para><code>event</code> - (<code>BundleEvent</code>) The original
          event object.</para>
        </listitem>

        <listitem>
          <para><code>bundle.id - (Long</code>) The source's bundle id.</para>
        </listitem>

        <listitem>
          <para><code>bundle.symbolicName</code> - (<code>String)</code> The
          source bundle's symbolic name. Only set if the bundle's symbolic
          name is not <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><code>bundle.version</code> - <code>(Version)</code> The
          version of the bundle, if set.</para>
        </listitem>

        <listitem>
          <para><code>bundle.signer</code> -
          <code>(String|Collection&lt;String&gt;)</code> The DNs of the
          signers.</para>
        </listitem>

        <listitem>
          <para><code>bundle</code> - (<code>Bundle</code>) The source
          bundle.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="service.event.serviceevent">
      <title>Service Event</title>

      <para>Service Events must be delivered asynchronously with the
      topic:</para>

      <programlisting>org/osgi/framework/ServiceEvent/&lt;eventtype&gt;</programlisting>

      <para>The following event types are supported:</para>

      <programlisting>REGISTERED
MODIFIED
UNREGISTERING</programlisting>

      <para>Unknown events must be ignored.</para>

      <itemizedlist>
        <listitem>
          <para><code>event</code> - (<code>ServiceEvent</code>) The original
          Service Event object.</para>
        </listitem>

        <listitem>
          <para><code>service</code> - (<code>ServiceReference</code>) The
          result of the <code>getServiceReference</code> method</para>
        </listitem>

        <listitem>
          <para><code>service.id</code> - (<code>Long</code>) The service's
          ID.</para>
        </listitem>

        <listitem>
          <para><code>service.pid</code> - (<code>String or
          Collection&lt;String&gt;</code>) The service's persistent identity.
          Only set if not <code>null</code>. If the PID is specified as a
          <code>String[]</code> then it must be coerced into a
          <code>Collection&lt;String&gt;</code>.</para>
        </listitem>

        <listitem>
          <para><code>service.objectClass</code> - (<code>String[]</code>) The
          service's object class.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Other Event Sources</title>

      <para>Several OSGi service specifications define their own event model.
      It is the responsibility of these services to map their events to Event
      Admin events. Event Admin is seen as a core service that will be present
      in most devices. However, if there is no Event Admin service present,
      applications are not mandated to buffer events.</para>
    </section>
  </section>

  <section>
    <title>Event Admin Service</title>

    <para>The Event Admin service must be registered as a service with the
    object class <code>org.osgi.service.event.EventAdmin</code>. Multiple
    Event Admin services can be registered. Publishers should publish their
    event on the Event Admin service with the highest value for the
    <code>SERVICE_RANKING</code> service property. This is the service
    selected by the <code>getServiceReference</code> method.</para>

    <para>The Event Admin service is responsible for tracking the registered
    handlers, handling event notifications and providing at least one thread
    for asynchronous event delivery.</para>

    <section>
      <title>Synchronous Event Delivery</title>

      <para>Synchronous event delivery is initiated by the
      <code>sendEvent</code> method. When this method is invoked, the Event
      Admin service determines which handlers must be notified of the event
      and then notifies each one in turn. The handlers can be notified in the
      caller's thread or in an event-delivery thread, depending on the
      implementation. In either case, all notifications must be completely
      handled before the <code>sendEvent</code> method returns to the
      caller.</para>

      <para>Synchronous event delivery is significantly more expensive than
      asynchronous delivery. All things considered equal, the asynchronous
      delivery should be preferred over the synchronous delivery.</para>

      <para>Callers of this method will need to be coded defensively and
      assume that synchronous event notifications could be handled in a
      separate thread. That entails that they must not be holding any monitors
      when they invoke the <code>sendEvent</code> method. Otherwise they
      significantly increase the likelihood of deadlocks because Java monitors
      are not reentrant from another thread by definition. Not holding
      monitors is good practice even when the event is dispatched in the same
      thread.</para>
    </section>

    <section>
      <title>Asynchronous Event Delivery</title>

      <para>Asynchronous event delivery is initiated by the
      <code>postEvent</code> method. When this method is invoked, the Event
      Admin service must determine which handlers are interested in the event.
      By collecting this list of handlers during the method invocation, the
      Event Admin service ensures that only handlers that were registered at
      the time the event was posted will receive the event notification. This
      is the same as described in <emphasis>Delivering Events</emphasis> of
      <xref linkend="intro.core.release" xrefstyle="template:%t"/>.</para>

      <para>The Event Admin service can use more than one thread to deliver
      events. If it does then it must guarantee that each handler receives the
      events in the same order as the events were posted, unless this handler
      allows unordered deliver, see <xref linkend="i1556001"/>. This ensures
      that handlers see events in their expected order. For example, for some
      handlers it would be an error to see a <code>destroyed</code> event
      before the corresponding <code>created</code> event.</para>

      <para>Before notifying each handler, the event delivery thread must
      ensure that the handler is still registered in the service registry. If
      it has been unregistered then the handler must not be notified.</para>
    </section>

    <section>
      <title>Order of Event Delivery</title>

      <para>Asynchronous events are delivered in the order in which they
      arrive in the event queue. Thus if two events are posted by the same
      thread then they will be delivered in the same order (though other
      events may come between them). However, if two or more events are posted
      by different threads then the order in which they arrive in the queue
      (and therefore the order in which they are delivered) will depend very
      much on subtle timing issues. The event delivery system cannot make any
      guarantees in this case. An Event Handler can indicate that the ordering
      is not relevant, allowing the Event Admin to more aggressively
      parallelize the event deliver, see <xref linkend="i1556001"/>.</para>

      <para>Synchronous events are delivered as soon as they are sent. If two
      events are sent by the same thread, one after the other, then they must
      be guaranteed to be processed serially and in the same order. However,
      if two events are sent by different threads then no guarantees can be
      made. The events can be processed in parallel or serially, depending on
      whether or not the Event Admin service dispatches synchronous events in
      the caller's thread or in a separate thread.</para>

      <para>Note that if the actions of a handler trigger a synchronous event,
      then the delivery of the first event will be paused and delivery of the
      second event will begin. Once delivery of the second event has
      completed, delivery of the first event will resume. Thus some handlers
      may observe the second event before they observe the first one.</para>
    </section>
  </section>

  <section>
    <title>Reliability</title>

    <section>
      <title>Exceptions in callbacks</title>

      <para>If a handler throws an Exception during delivery of an event, it
      must be caught by the Event Admin service and handled in some
      implementation specific way. If a Log Service is available the exception
      should be logged. Once the exception has been caught and dealt with, the
      event delivery must continue with the next handlers to be notified, if
      any.</para>

      <para>As the Log Service can also forward events through the Event Admin
      service there is a potential for a loop when an event is reported to the
      Log Service.</para>
    </section>

    <section>
      <title>Dealing with Stalled Handlers</title>

      <para>Event handlers should not spend too long in the
      <code>handleEvent</code> method. Doing so will prevent other handlers in
      the system from being notified. If a handler needs to do something that
      can take a while, it should do it in a different thread.</para>

      <para>An event admin implementation can attempt to detect stalled or
      deadlocked handlers and deal with them appropriately. Exactly how it
      deals with this situation is left as implementation specific. One
      allowed implementation is to mark the current event delivery thread as
      invalid and spawn a new event delivery thread. Event delivery must
      resume with the next handler to be notified.</para>

      <para>Implementations can choose to blacklist any handlers that they
      determine are misbehaving. Blacklisted handlers must not be notified of
      any events. If a handler is blacklisted, the event admin should log a
      message that explains the reason for it.</para>
    </section>
  </section>

  <section>
    <title>Inter-operability with Native Applications</title>

    <para>Implementations of the Event Admin service can support passing
    events to, and/or receiving events from native applications.</para>

    <para>If the implementation supports native inter-operability, it must be
    able to pass the topic of the event and its properties to/from native
    code. Implementations must be able to support property values of the
    following types:</para>

    <itemizedlist>
      <listitem>
        <para><code>String</code> objects, including full Unicode
        support</para>
      </listitem>

      <listitem>
        <para><code>Integer, Long, Byte, Short, Float, Double, Boolean,
        Character</code> objects</para>
      </listitem>

      <listitem>
        <para>Single-dimension arrays of the above types (including
        <code>String</code>)</para>
      </listitem>

      <listitem>
        <para>Single-dimension arrays of Java's eight primitive types
        (<code>int, long, byte, short, float, double, boolean,
        char</code>)</para>
      </listitem>
    </itemizedlist>

    <para>Implementations can support additional types. Property values of
    unsupported types must be silently discarded.</para>
  </section>

  <section>
    <title>Security</title>

    <section>
      <title>Topic Permission</title>

      <para>The <code>TopicPermission</code> class allows fine-grained control
      over which bundles may post events to a given topic and which bundles
      may receive those events.</para>

      <para>The target parameter for the permission is the topic name.
      <code>TopicPermission</code> classes uses a wildcard matching algorithm
      similar to the <code>BasicPermission</code> class, except that solidi
      (<code>'/' \u002F</code>) are used as separators instead of full stop
      characters. For example, a name of <code>a/b/*</code> implies
      <code>a/b/c</code> but not <code>x/y/z</code> or
      <code>a/b</code>.</para>

      <para>There are two available actions: <code>PUBLISH</code> and
      <code>SUBSCRIBE</code>. These control a bundle's ability to either
      publish or receive events, respectively. Neither one implies the
      other.</para>
    </section>

    <section>
      <title>Required Permissions</title>

      <para>Bundles that need to register an event handler must be granted
      <code>ServicePermission</code>[<code>org.osgi.service.event.EventHandler</code>,
      <code>REGISTER</code>]. In addition, handlers require
      <code>TopicPermission[ &lt;topic&gt;, SUBSCRIBE ]</code> for each topic
      they want to be notified about.</para>

      <para>Bundles that need to publish an event must be granted
      <code>ServicePermission[ org.osgi.service.event.EventAdmin, GET]</code>
      so that they may retrieve the Event Admin service and use it. In
      addition, event sources require <code>TopicPermission[ &lt;topic&gt;,
      PUBLISH]</code> for each topic they want to send events to.</para>

      <para>Bundles that need to iterate the handlers registered with the
      system must be granted
      <code>ServicePermission[org.osgi.service.event.EventHandler, GET]</code>
      to retrieve the event handlers from the service registry.</para>

      <para>Only a bundle that contains an Event Admin service implementation
      should be granted <code>ServicePermission[
      org.osgi.service.event.EventAdmin, REGISTER]</code> to register the
      event channel admin service.</para>
    </section>

    <section>
      <title>Security Context During Event Callbacks</title>

      <para>During an event notification, the Event Admin service's Protection
      Domain will be on the stack above the handler's Protection Domain. In
      the case of a synchronous event, the event publisher's protection domain
      can also be on the stack.</para>

      <para>Therefore, if a handler needs to perform a secure operation using
      its own privileges, it must invoke the <code>doPrivileged</code> method
      to isolate its security context from that of its caller.</para>

      <para>The event delivery mechanism must not wrap event notifications in
      a <code>doPrivileged</code> call.</para>
    </section>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.event" xml:id="org.osgi.service.event" xml:base="../../generated/javadoc/docbook/org.osgi.service.event.xml">
   <title>org.osgi.service.event</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.event-version">Version 1.3</releaseinfo>
      <edition xml:id="org.osgi.service.event-version.number">1.3</edition>
   </info>
   <para>
Event Admin Package Version 1.3.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.event; version="[1.3,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.event; version="[1.3,1.4)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.event.Event">
                  <code>Event</code>
               </link> - 
An event.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.event.EventAdmin">
                  <code>EventAdmin</code>
               </link> - 
The Event Admin service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.event.EventConstants">
                  <code>EventConstants</code>
               </link> - 
Defines standard names for <code>EventHandler</code> properties.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.event.EventHandler">
                  <code>EventHandler</code>
               </link> - 
Listener for Events.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.event.EventProperties">
                  <code>EventProperties</code>
               </link> - 
The properties for an <link linkend="org.osgi.service.event.Event">Event</link>.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.event.TopicPermission">
                  <code>TopicPermission</code>
               </link> - 
A bundle's authority to publish or subscribe to event on a topic.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="Event" xml:id="org.osgi.service.event.Event">
      <title>public class Event</title>
      <para>
An event.
 
 <code>Event</code> objects are delivered to <code>EventHandler</code> services which
 subscribe to the topic of the event.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="method" xreflabel="Event(String,Map)" xml:id="org.osgi.service.event.Event.Event-String-Map-">
         <title>public  Event(String topic,Map&lt;String,?&gt; properties)</title>
         <formalpara role="parameter">
            <title>topic</title>
            <para>The topic of the event.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>properties</title>
            <para>The event's properties (may be <code>null</code>). A
        property whose key is not of type <code>String</code> will be ignored.
        If the specified properties is an <link linkend="org.osgi.service.event.EventProperties">EventProperties</link> object,
        then it will be directly used. Otherwise, a copy of the specified
        properties is made.</para>
         </formalpara>
         <para role="description">
Constructs an event.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If topic is not a valid topic name.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="Event(String,Dictionary)" xml:id="org.osgi.service.event.Event.Event-String-Dictionary-">
         <title>public  Event(String topic,Dictionary&lt;String,?&gt; properties)</title>
         <formalpara role="parameter">
            <title>topic</title>
            <para>The topic of the event.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>properties</title>
            <para>The event's properties (may be <code>null</code>). A
        property whose key is not of type <code>String</code> will be ignored.
        A copy of the specified properties is made.</para>
         </formalpara>
         <para role="description">
Constructs an event.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If topic is not a valid topic name.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="containsProperty(String)" xml:id="org.osgi.service.event.Event.containsProperty-String-">
         <title>public final boolean containsProperty(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the property.</para>
         </formalpara>
         <para role="description">
Indicate the presence of an event property. The event topic is present
 using the property name "event.topics".
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if a property with the specified name is in the
         event. This property may have a <code>null</code> value. <code>false</code>
         otherwise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.event.Event.equals-Object-">
         <title>public boolean equals(Object object)</title>
         <formalpara role="parameter">
            <title>object</title>
            <para>The <code>Event</code> object to be compared.</para>
         </formalpara>
         <para role="description">
Compares this <code>Event</code> object to another object.
 
 </para>
         <para>
 An event is considered to be <emphasis role="strong">equal to</emphasis> another event if the topic
 is equal and the properties are equal. The properties are compared using
 the <code>java.util.Map.equals()</code> rules which includes identity
 comparison for array values.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if <code>object</code> is a <code>Event</code> and is equal to
         this object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getProperty(String)" xml:id="org.osgi.service.event.Event.getProperty-String-">
         <title>public final Object getProperty(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the property to retrieve.</para>
         </formalpara>
         <para role="description">
Retrieve the value of an event property. The event topic may be retrieved
 with the property name "event.topics".
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The value of the property, or <code>null</code> if not found.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getPropertyNames()" xml:id="org.osgi.service.event.Event.getPropertyNames--">
         <title>public final String[] getPropertyNames()</title>
         <para role="description">
Returns a list of this event's property names. The list will include the
 event topic property name "event.topics".
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A non-empty array with one element per property.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getTopic()" xml:id="org.osgi.service.event.Event.getTopic--">
         <title>public final String getTopic()</title>
         <para role="description">
Returns the topic of this event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The topic of this event.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.event.Event.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns a hash code value for this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An integer which is a hash code value for this object.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="matches(Filter)" xml:id="org.osgi.service.event.Event.matches-Filter-">
         <title>public final boolean matches(Filter filter)</title>
         <formalpara role="parameter">
            <title>filter</title>
            <para>The filter to test.</para>
         </formalpara>
         <para role="description">
Tests this event's properties against the given filter using a case
 sensitive match.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true If this event's properties match the filter, false
         otherwise.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="toString()" xml:id="org.osgi.service.event.Event.toString--">
         <title>public String toString()</title>
         <para role="description">
Returns the string representation of this event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The string representation of this event.</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="EventAdmin" xml:id="org.osgi.service.event.EventAdmin">
      <title>public interface EventAdmin</title>
      <para>
The Event Admin service. Bundles wishing to publish events must obtain the
 Event Admin service and call one of the event delivery methods.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="postEvent(Event)" xml:id="org.osgi.service.event.EventAdmin.postEvent-Event-">
         <title>public void postEvent(Event event)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>The event to send to all listeners which subscribe to the
        topic of the event.</para>
         </formalpara>
         <para role="description">
Initiate asynchronous, ordered delivery of an event. This method returns
 to the caller before delivery of the event is completed. Events are
 delivered in the order that they are received by this method.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>TopicPermission[topic,PUBLISH]</code> for the topic specified in
         the event.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="sendEvent(Event)" xml:id="org.osgi.service.event.EventAdmin.sendEvent-Event-">
         <title>public void sendEvent(Event event)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>The event to send to all listeners which subscribe to the
        topic of the event.</para>
         </formalpara>
         <para role="description">
Initiate synchronous delivery of an event. This method does not return to
 the caller until delivery of the event is completed.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>TopicPermission[topic,PUBLISH]</code> for the topic specified in
         the event.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="EventConstants" xml:id="org.osgi.service.event.EventConstants">
      <title>public interface EventConstants</title>
      <para>
Defines standard names for <code>EventHandler</code> properties.
   </para>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="field" xreflabel="BUNDLE" xml:id="org.osgi.service.event.EventConstants.BUNDLE">
         <title>public static final String BUNDLE = "bundle"</title>
         <para>
The Bundle object of the bundle relevant to the event. The type of the
 value for this event property is <link linkend="org.osgi.framework.Bundle">Bundle</link>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="BUNDLE_ID" xml:id="org.osgi.service.event.EventConstants.BUNDLE_ID">
         <title>public static final String BUNDLE_ID = "bundle.id"</title>
         <para>
The Bundle id of the bundle relevant to the event. The type of the value
 for this event property is <code>Long</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="BUNDLE_SIGNER" xml:id="org.osgi.service.event.EventConstants.BUNDLE_SIGNER">
         <title>public static final String BUNDLE_SIGNER = "bundle.signer"</title>
         <para>
The Distinguished Names of the signers of the bundle relevant to the
 event. The type of the value for this event property is <code>String</code> or
 <code>Collection</code> of <code>String</code>.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE_SYMBOLICNAME" xml:id="org.osgi.service.event.EventConstants.BUNDLE_SYMBOLICNAME">
         <title>public static final String BUNDLE_SYMBOLICNAME = "bundle.symbolicName"</title>
         <para>
The Bundle Symbolic Name of the bundle relevant to the event. The type of
 the value for this event property is <code>String</code>.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE_VERSION" xml:id="org.osgi.service.event.EventConstants.BUNDLE_VERSION">
         <title>public static final String BUNDLE_VERSION = "bundle.version"</title>
         <para>
The version of the bundle relevant to the event. The type of the value
 for this event property is <link linkend="org.osgi.framework.Version">Version</link>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="DELIVERY_ASYNC_ORDERED" xml:id="org.osgi.service.event.EventConstants.DELIVERY_ASYNC_ORDERED">
         <title>public static final String DELIVERY_ASYNC_ORDERED = "async.ordered"</title>
         <para>
Event Handler delivery quality value specifying the Event Handler
 requires asynchronously delivered events be delivered in order. Ordered
 delivery is the default for asynchronously delivered events.
 
 </para>
         <para>
 This delivery quality value is mutually exclusive with
 <link linkend="org.osgi.service.event.EventConstants.DELIVERY_ASYNC_UNORDERED">DELIVERY_ASYNC_UNORDERED</link>. However, if both this value and
 <link linkend="org.osgi.service.event.EventConstants.DELIVERY_ASYNC_UNORDERED">DELIVERY_ASYNC_UNORDERED</link> are specified for an event handler,
 this value takes precedence.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.event.EventConstants.EVENT_DELIVERY">EVENT_DELIVERY</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="DELIVERY_ASYNC_UNORDERED" xml:id="org.osgi.service.event.EventConstants.DELIVERY_ASYNC_UNORDERED">
         <title>public static final String DELIVERY_ASYNC_UNORDERED = "async.unordered"</title>
         <para>
Event Handler delivery quality value specifying the Event Handler does
 not require asynchronously delivered events be delivered in order. This
 may allow an Event Admin implementation to optimize asynchronous event
 delivery by relaxing ordering requirements.
 
 </para>
         <para>
 This delivery quality value is mutually exclusive with
 <link linkend="org.osgi.service.event.EventConstants.DELIVERY_ASYNC_ORDERED">DELIVERY_ASYNC_ORDERED</link>. However, if both this value and
 <link linkend="org.osgi.service.event.EventConstants.DELIVERY_ASYNC_ORDERED">DELIVERY_ASYNC_ORDERED</link> are specified for an event handler,
 <link linkend="org.osgi.service.event.EventConstants.DELIVERY_ASYNC_ORDERED">DELIVERY_ASYNC_ORDERED</link> takes precedence.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.event.EventConstants.EVENT_DELIVERY">EVENT_DELIVERY</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="EVENT" xml:id="org.osgi.service.event.EventConstants.EVENT">
         <title>public static final String EVENT = "event"</title>
         <para>
The forwarded event object. Used when rebroadcasting an event that was
 sent via some other event mechanism. The type of the value for this event
 property is <code>Object</code>.
   </para>
      </section>
      <section role="field" xreflabel="EVENT_DELIVERY" xml:id="org.osgi.service.event.EventConstants.EVENT_DELIVERY">
         <title>public static final String EVENT_DELIVERY = "event.delivery"</title>
         <para>
Service Registration property specifying the delivery qualities requested
 by an Event Handler service.
 </para>
         <para>
 Event handlers MAY be registered with this property. Each value of this
 property is a string specifying a delivery quality for the Event handler.
 
 </para>
         <para>
 The value of this property must be of type <code>String</code>,
 <code>String[]</code>, or <code>Collection&lt;String&gt;</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.event.EventConstants.DELIVERY_ASYNC_ORDERED">DELIVERY_ASYNC_ORDERED</link>, <link linkend="org.osgi.service.event.EventConstants.DELIVERY_ASYNC_UNORDERED">DELIVERY_ASYNC_UNORDERED</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="EVENT_FILTER" xml:id="org.osgi.service.event.EventConstants.EVENT_FILTER">
         <title>public static final String EVENT_FILTER = "event.filter"</title>
         <para>
Service Registration property specifying a filter to further select
 <code>Event</code> s of interest to an Event Handler service.
 </para>
         <para>
 Event handlers MAY be registered with this property. The value of this
 property is a string containing an LDAP-style filter specification. Any
 of the event's properties may be used in the filter expression. Each
 event handler is notified for any event which belongs to the topics in
 which the handler has expressed an interest. If the event handler is also
 registered with this service property, then the properties of the event
 must also match the filter for the event to be delivered to the event
 handler.
 </para>
         <para>
 If the filter syntax is invalid, then the Event Handler must be ignored
 and a warning should be logged.
 
 </para>
         <para>
 The value of this property must be of type <code>String</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.event.Event">Event</link>, <link linkend="org.osgi.framework.Filter">Filter</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="EVENT_TOPIC" xml:id="org.osgi.service.event.EventConstants.EVENT_TOPIC">
         <title>public static final String EVENT_TOPIC = "event.topics"</title>
         <para>
Service registration property specifying the <code>Event</code> topics of
 interest to an Event Handler service.
 </para>
         <para>
 Event handlers SHOULD be registered with this property. Each value of
 this property is a string that describe the topics in which the handler
 is interested. An asterisk ('*') may be used as a trailing wildcard.
 Event Handlers which do not have a value for this property must not
 receive events. More precisely, the value of each string must conform to
 the following grammar:
 
 </para>
         <programlisting>  topic-description := '*' | topic ( '/*' )?
  topic := token ( '/' token )*</programlisting>
         <para>
 The value of this property must be of type <code>String</code>,
 <code>String[]</code>, or <code>Collection&lt;String&gt;</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.event.Event">Event</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="EXCEPTION" xml:id="org.osgi.service.event.EventConstants.EXCEPTION">
         <title>public static final String EXCEPTION = "exception"</title>
         <para>
An exception or error. The type of the value for this event property is
 <code>Throwable</code>.
   </para>
      </section>
      <section role="field" xreflabel="EXCEPTION_CLASS" xml:id="org.osgi.service.event.EventConstants.EXCEPTION_CLASS">
         <title>public static final String EXCEPTION_CLASS = "exception.class"</title>
         <para>
The name of the exception type. Must be equal to the name of the class of
 the exception in the event property <link linkend="org.osgi.service.event.EventConstants.EXCEPTION">EXCEPTION</link>. The type of the
 value for this event property is <code>String</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="EXCEPTION_MESSAGE" xml:id="org.osgi.service.event.EventConstants.EXCEPTION_MESSAGE">
         <title>public static final String EXCEPTION_MESSAGE = "exception.message"</title>
         <para>
The exception message. Must be equal to the result of calling
 <code>getMessage()</code> on the exception in the event property
 <link linkend="org.osgi.service.event.EventConstants.EXCEPTION">EXCEPTION</link>. The type of the value for this event property is
 <code>String</code>.
   </para>
      </section>
      <section role="field" xreflabel="EXECPTION_CLASS" xml:id="org.osgi.service.event.EventConstants.EXECPTION_CLASS">
         <title>public static final String EXECPTION_CLASS = "exception.class"</title>
         <para>
This constant was released with an incorrectly spelled name. It has been
 replaced by <link linkend="org.osgi.service.event.EventConstants.EXCEPTION_CLASS">EXCEPTION_CLASS</link>
         </para>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of 1.1, replaced by EXCEPTION_CLASS</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="MESSAGE" xml:id="org.osgi.service.event.EventConstants.MESSAGE">
         <title>public static final String MESSAGE = "message"</title>
         <para>
A human-readable message that is usually not localized. The type of the
 value for this event property is <code>String</code>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE" xml:id="org.osgi.service.event.EventConstants.SERVICE">
         <title>public static final String SERVICE = "service"</title>
         <para>
A service reference. The type of the value for this event property is
 <link linkend="org.osgi.framework.ServiceReference">ServiceReference</link>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_ID" xml:id="org.osgi.service.event.EventConstants.SERVICE_ID">
         <title>public static final String SERVICE_ID = "service.id"</title>
         <para>
A service's id. The type of the value for this event property is
 <code>Long</code>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_OBJECTCLASS" xml:id="org.osgi.service.event.EventConstants.SERVICE_OBJECTCLASS">
         <title>public static final String SERVICE_OBJECTCLASS = "service.objectClass"</title>
         <para>
A service's objectClass. The type of the value for this event property is
 <code>String[]</code>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_PID" xml:id="org.osgi.service.event.EventConstants.SERVICE_PID">
         <title>public static final String SERVICE_PID = "service.pid"</title>
         <para>
A service's persistent identity. The type of the value for this event
 property is <code>String</code> or <code>Collection</code> of <code>String</code>.
   </para>
      </section>
      <section role="field" xreflabel="TIMESTAMP" xml:id="org.osgi.service.event.EventConstants.TIMESTAMP">
         <title>public static final String TIMESTAMP = "timestamp"</title>
         <para>
The time when the event occurred, as reported by
 <code>System.currentTimeMillis()</code>. The type of the value for this event
 property is <code>Long</code>.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="EventHandler" xml:id="org.osgi.service.event.EventHandler">
      <title>public interface EventHandler</title>
      <para>
Listener for Events.
 
 </para>
      <para>
         <code>EventHandler</code> objects are registered with the Framework service
 registry and are notified with an <code>Event</code> object when an event is sent
 or posted.
 </para>
      <para>
         <code>EventHandler</code> objects can inspect the received <code>Event</code> object to
 determine its topic and properties.
 
 </para>
      <para>
         <code>EventHandler</code> objects must be registered with a service property
 <link linkend="org.osgi.service.event.EventConstants.EVENT_TOPIC">EventConstants.EVENT_TOPIC</link> whose value is the list of topics in which
 the event handler is interested.
 </para>
      <para>
 For example:
 
 </para>
      <programlisting> String[] topics = new String[] {"com/isv/*"};
 Hashtable ht = new Hashtable();
 ht.put(EventConstants.EVENT_TOPIC, topics);
 context.registerService(EventHandler.class.getName(), this, ht);</programlisting>
      <para>
 
 Event Handler services can also be registered with an
 <link linkend="org.osgi.service.event.EventConstants.EVENT_FILTER">EventConstants.EVENT_FILTER</link> service property to further filter the
 events. If the syntax of this filter is invalid, then the Event Handler must
 be ignored by the Event Admin service. The Event Admin service should log a
 warning.
 </para>
      <para>
 Security Considerations. Bundles wishing to monitor <code>Event</code> objects
 will require <code>ServicePermission[EventHandler,REGISTER]</code> to register an
 <code>EventHandler</code> service. The bundle must also have
 <code>TopicPermission[topic,SUBSCRIBE]</code> for the topic specified in the event
 in order to receive the event.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.event.Event">Event</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="handleEvent(Event)" xml:id="org.osgi.service.event.EventHandler.handleEvent-Event-">
         <title>public void handleEvent(Event event)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>The event that occurred.</para>
         </formalpara>
         <para role="description">
Called by the <link linkend="org.osgi.service.event.EventAdmin">EventAdmin</link> service to notify the listener of an
 event.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="EventProperties" xml:id="org.osgi.service.event.EventProperties">
      <title>public class EventProperties<?line-break?> implements Map&lt;String,Object&gt;</title>
      <para>
The properties for an <link linkend="org.osgi.service.event.Event">Event</link>. An event source can create an
 EventProperties object if it needs to reuse the same event properties for
 multiple events.
 
 </para>
      <para>
 The keys are all of type <code>String</code>. The values are of type
 <code>Object</code>. The key "event.topics" is ignored as event topics
 can only be set when an <link linkend="org.osgi.service.event.Event">Event</link> is constructed.
 
 </para>
      <para>
 Once constructed, an EventProperties object is unmodifiable. However, the
 values of the map used to construct an EventProperties object are still
 subject to modification as they are not deeply copied.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="method" xreflabel="EventProperties(Map)" xml:id="org.osgi.service.event.EventProperties.EventProperties-Map-">
         <title>public  EventProperties(Map&lt;String,?&gt; properties)</title>
         <formalpara role="parameter">
            <title>properties</title>
            <para>The properties to use for this EventProperties object
        (may be <code>null</code>).</para>
         </formalpara>
         <para role="description">
Create an EventProperties from the specified properties.
 
 </para>
         <para>
 The specified properties will be copied into this EventProperties.
 Properties whose key is not of type <code>String</code> will be ignored. A
 property with the key "event.topics" will be ignored.</para>
      </section>
      <section role="method" xreflabel="clear()" xml:id="org.osgi.service.event.EventProperties.clear--">
         <title>public void clear()</title>
         <para role="description">
This method throws UnsupportedOperationException.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>UnsupportedOperationException</code>– if called.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="containsKey(Object)" xml:id="org.osgi.service.event.EventProperties.containsKey-Object-">
         <title>public boolean containsKey(Object name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The property name.</para>
         </formalpara>
         <para role="description">
Indicates if the specified property is present.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> If the property is present, <code>false</code> otherwise.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="containsValue(Object)" xml:id="org.osgi.service.event.EventProperties.containsValue-Object-">
         <title>public boolean containsValue(Object value)</title>
         <formalpara role="parameter">
            <title>value</title>
            <para>The property value.</para>
         </formalpara>
         <para role="description">
Indicates if the specified value is present.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> If the value is present, <code>false</code> otherwise.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="entrySet()" xml:id="org.osgi.service.event.EventProperties.entrySet--">
         <title>public Set&lt;Map.Entry&lt;String,Object&gt;&gt; entrySet()</title>
         <para role="description">
Return the property entries.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A set containing the property name/value pairs.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.event.EventProperties.equals-Object-">
         <title>public boolean equals(Object object)</title>
         <formalpara role="parameter">
            <title>object</title>
            <para>The <code>EventProperties</code> object to be compared.</para>
         </formalpara>
         <para role="description">
Compares this <code>EventProperties</code> object to another object.
 
 </para>
         <para>
 The properties are compared using the <code>java.util.Map.equals()</code>
 rules which includes identity comparison for array values.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if <code>object</code> is a <code>EventProperties</code> and
         is equal to this object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="get(Object)" xml:id="org.osgi.service.event.EventProperties.get-Object-">
         <title>public Object get(Object name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the specified property.</para>
         </formalpara>
         <para role="description">
Return the value of the specified property.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The value of the specified property.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.event.EventProperties.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns a hash code value for this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An integer which is a hash code value for this object.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="isEmpty()" xml:id="org.osgi.service.event.EventProperties.isEmpty--">
         <title>public boolean isEmpty()</title>
         <para role="description">
Indicate if this properties is empty.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> If this properties is empty, <code>false</code>
         otherwise.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="keySet()" xml:id="org.osgi.service.event.EventProperties.keySet--">
         <title>public Set&lt;String&gt; keySet()</title>
         <para role="description">
Return the names of the properties.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The names of the properties.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="put(String,Object)" xml:id="org.osgi.service.event.EventProperties.put-String-Object-">
         <title>public Object put(String key,Object value)</title>
         <para role="description">
This method throws UnsupportedOperationException.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>UnsupportedOperationException</code>– if called.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="putAll(Map)" xml:id="org.osgi.service.event.EventProperties.putAll-Map-">
         <title>public void putAll(Map&lt;? extends String,? extends Object&gt; map)</title>
         <para role="description">
This method throws UnsupportedOperationException.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>UnsupportedOperationException</code>– if called.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="remove(Object)" xml:id="org.osgi.service.event.EventProperties.remove-Object-">
         <title>public Object remove(Object key)</title>
         <para role="description">
This method throws UnsupportedOperationException.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>UnsupportedOperationException</code>– if called.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="size()" xml:id="org.osgi.service.event.EventProperties.size--">
         <title>public int size()</title>
         <para role="description">
Return the number of properties.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The number of properties.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="toString()" xml:id="org.osgi.service.event.EventProperties.toString--">
         <title>public String toString()</title>
         <para role="description">
Returns the string representation of this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The string representation of this object.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="values()" xml:id="org.osgi.service.event.EventProperties.values--">
         <title>public Collection&lt;Object&gt; values()</title>
         <para role="description">
Return the properties values.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The values of the properties.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="TopicPermission" xml:id="org.osgi.service.event.TopicPermission">
      <title>public final class TopicPermission<?line-break?> extends Permission</title>
      <para>
A bundle's authority to publish or subscribe to event on a topic.
 
 </para>
      <para>
 A topic is a slash-separated string that defines a topic.
 </para>
      <para>
 For example:
 
 </para>
      <programlisting> org/osgi/service/foo/FooEvent/ACTION</programlisting>
      <para>
         <code>TopicPermission</code> has two actions: <code>publish</code> and
 <code>subscribe</code>.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="PUBLISH" xml:id="org.osgi.service.event.TopicPermission.PUBLISH">
         <title>public static final String PUBLISH = "publish"</title>
         <para>
The action string <code>publish</code>.
   </para>
      </section>
      <section role="field" xreflabel="SUBSCRIBE" xml:id="org.osgi.service.event.TopicPermission.SUBSCRIBE">
         <title>public static final String SUBSCRIBE = "subscribe"</title>
         <para>
The action string <code>subscribe</code>.
   </para>
      </section>
      <section role="method" xreflabel="TopicPermission(String,String)" xml:id="org.osgi.service.event.TopicPermission.TopicPermission-String-String-">
         <title>public  TopicPermission(String name,String actions)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>Topic name.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>
               <code>publish</code>,<code>subscribe</code> (canonical order).</para>
         </formalpara>
         <para role="description">
Defines the authority to publish and/or subscribe to a topic within the
 EventAdmin service.
 </para>
         <para>
 The name is specified as a slash-separated string. Wildcards may be used.
 For example:
 
 </para>
         <programlisting>    org/osgi/service/fooFooEvent/ACTION
    com/isv/*
    *</programlisting>
         <para>
 A bundle that needs to publish events on a topic must have the
 appropriate <code>TopicPermission</code> for that topic; similarly, a bundle
 that needs to subscribe to events on a topic must have the appropriate
 <code>TopicPermssion</code> for that topic.
 </para>
         <para/>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.event.TopicPermission.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>The object to test for equality with this
        <code>TopicPermission</code> object.</para>
         </formalpara>
         <para role="description">
Determines the equality of two <code>TopicPermission</code> objects.
 
 This method checks that specified <code>TopicPermission</code> has the same
 topic name and actions as this <code>TopicPermission</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if <code>obj</code> is a <code>TopicPermission</code>, and has
         the same topic name and actions as this <code>TopicPermission</code>
         object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getActions()" xml:id="org.osgi.service.event.TopicPermission.getActions--">
         <title>public String getActions()</title>
         <para role="description">
Returns the canonical string representation of the
 <code>TopicPermission</code> actions.
 
 </para>
         <para>
 Always returns present <code>TopicPermission</code> actions in the following
 order: <code>publish</code>,<code>subscribe</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Canonical string representation of the <code>TopicPermission</code>
         actions.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.event.TopicPermission.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code value for this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A hash code value for this object.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="implies(Permission)" xml:id="org.osgi.service.event.TopicPermission.implies-Permission-">
         <title>public boolean implies(Permission p)</title>
         <formalpara role="parameter">
            <title>p</title>
            <para>The target permission to interrogate.</para>
         </formalpara>
         <para role="description">
Determines if the specified permission is implied by this object.
 
 </para>
         <para>
 This method checks that the topic name of the target is implied by the
 topic name of this object. The list of <code>TopicPermission</code> actions
 must either match or allow for the list of the target object to imply the
 target <code>TopicPermission</code> action.
 
 </para>
         <programlisting>    x/y/*,"publish" -&gt; x/y/z,"publish" is true
    *,"subscribe" -&gt; x/y,"subscribe"   is true
    *,"publish" -&gt; x/y,"subscribe"     is false
    x/y,"publish" -&gt; x/y/z,"publish"   is false</programlisting>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the specified <code>TopicPermission</code> action is
         implied by this object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="newPermissionCollection()" xml:id="org.osgi.service.event.TopicPermission.newPermissionCollection--">
         <title>public PermissionCollection newPermissionCollection()</title>
         <para role="description">
Returns a new <code>PermissionCollection</code> object suitable for storing
 <code>TopicPermission</code> objects.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new <code>PermissionCollection</code> object.</para>
         </formalpara>
         <para/>
      </section>
   </section>
</section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="117" revision="$Id: 73d483c72f595b86aefbdb6f889a1944fd53eec6 $" version="5" xml:id="service.dmt" xml:base="../117/service.dmt.xml">
  <title>Dmt Admin Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.dmt-version" linkend="org.osgi.service.dmt"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>There are a large number of Device Management standards available
    today. Starting with the ITU X.700 series in the seventies, SNMP in the
    eighties and then an explosion of different protocols when the use of the
    Internet expanded in the nineties. Many device management standards have
    flourished, and some subsequently withered, over the last decades. Some
    examples:</para>

    <itemizedlist>
      <listitem>
        <para>X.700 CMIP</para>
      </listitem>

      <listitem>
        <para>IETF SNMP</para>
      </listitem>

      <listitem>
        <para>IETF LDAP</para>
      </listitem>

      <listitem>
        <para>OMA DM</para>
      </listitem>

      <listitem>
        <para>Broadband Forum TR-069</para>
      </listitem>

      <listitem>
        <para>UPnP Forum's Device Management</para>
      </listitem>

      <listitem>
        <para>IETF NETCONF</para>
      </listitem>

      <listitem>
        <para>OASIS WS Distributed Management</para>
      </listitem>
    </itemizedlist>

    <para>This heterogeneity of the remote management for OSGi Framework based
    devices is a problem for device manufacturers. Since there is often no
    dominant protocol these manufacturers have to develop multiple solutions
    for different remote management protocols. It is also problematic for
    device operators since they have to choose a specific protocol but by that
    choice could exclude a class of devices that do not support that protocol.
    There is therefore a need to allow the use of multiple protocols at
    minimal costs.</para>

    <para>Almost all management standards are based on hierarchical object
    models and provide <emphasis>primitives</emphasis> like:</para>

    <itemizedlist>
      <listitem>
        <para>Get and replace values</para>
      </listitem>

      <listitem>
        <para>Add/Remove instances</para>
      </listitem>

      <listitem>
        <para>Discovery of value names and instance ids</para>
      </listitem>

      <listitem>
        <para>Provide notifications</para>
      </listitem>
    </itemizedlist>

    <para>A Device Management standard consists of a <emphasis>protocol
    stack</emphasis> and a number of <emphasis>object models</emphasis>. The
    protocol stack is generic and shared for all object types; the object
    model describes a specific device's properties and methods. For example,
    the protocol stack can consist of a set of SOAP message formats and an
    object model is a <code>Deployment Unit</code>. An object model consists
    of a data model and sometimes a set of functions.</para>

    <para>The core problem is that the generic Device Management Tree must be
    mapped to device specific functions. This specification therefore defines
    an API for managing a device using general device management concepts but
    providing an effective plugin model to link the generic tree to the
    specific device functions.</para>

    <para>The API is decomposed in the following
    packages/functionality:</para>

    <itemizedlist>
      <listitem>
        <para><code>org.osgi.service.dmt</code> - Main package that provides
        access to the local Device Management Tree. Access is session
        based.</para>
      </listitem>

      <listitem>
        <para><code>org.osgi.service.dmt.notification</code> - The
        notification package provides the capability to send alerts to a
        management server.</para>
      </listitem>

      <listitem>
        <para><code>org.osgi.service.dmt.spi</code> - Provides the capability
        to register subtree handlers in the Device Management Tree.</para>
      </listitem>

      <listitem>
        <para><code>org.osgi.service.dmt.notification.spi</code> - The API to
        provide the possibility to extend the notification system.</para>
      </listitem>

      <listitem>
        <para><code>org.osgi.service.dmt.security</code> - Permission
        classes.</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Device Management Tree</emphasis> - The Device
          Management Tree (DMT) is the logical view of manageable aspects of
          an OSGi Environment, implemented by plugins and structured in a tree
          with named nodes.</para>
        </listitem>

        <listitem>
          <para><emphasis>Dmt Admin</emphasis> - A service through which the
          DMT can be manipulated. It is used by <emphasis>Local
          Managers</emphasis> or by <emphasis>Protocol Adapters</emphasis>
          that initiate DMT operations. The Dmt Admin service forwards
          selected DMT operations to Data Plugins and execute operations to
          Exec Plugins; in certain cases the Dmt Admin service handles the
          operations itself. The Dmt Admin service is a singleton.</para>
        </listitem>

        <listitem>
          <para><emphasis>Dmt Session</emphasis> - A session groups a set of
          operations on a sub-tree with optional transactionality and locking.
          Dmt Session objects are created by the Dmt Admin service and are
          given to a plugin when they first join the session.</para>
        </listitem>

        <listitem>
          <para><emphasis>Local Manager</emphasis> - A bundle which uses the
          Dmt Admin service directly to read or manipulate the DMT. Local
          Managers usually do not have a principal associated with the
          session.</para>
        </listitem>

        <listitem>
          <para><emphasis>Protocol Adapter</emphasis> - A bundle that
          communicates with a management server external to the device and
          uses the Dmt Admin service to operate on the DMT. Protocol Adapters
          usually have a principal associated with their sessions.</para>
        </listitem>

        <listitem>
          <para><emphasis>Meta Node</emphasis> - Information provided by the
          node implementer about a node for the purpose of performing
          validation and providing assistance to users when these values are
          edited.</para>
        </listitem>

        <listitem>
          <para><emphasis>Multi nodes</emphasis> - Interior nodes that have a
          homogeneous set of children. All these children share the same meta
          node.</para>
        </listitem>

        <listitem>
          <para><emphasis>Plugin</emphasis> - Services which take the
          responsibility over a given sub-tree of the DMT: Data Plugin
          services and Exec Plugin services.</para>
        </listitem>

        <listitem>
          <para><emphasis>Data Plugin</emphasis> - A Plugin that can create a
          Readable Data Session, Read Write Data Session, or Transactional
          Data Session for data operations on a sub-tree for a Dmt
          Session.</para>
        </listitem>

        <listitem>
          <para><emphasis>Exec Plugin</emphasis> - A Plugin that can handle
          execute operations.</para>
        </listitem>

        <listitem>
          <para><emphasis>Readable Data Session</emphasis> - A plugin session
          that can only read.</para>
        </listitem>

        <listitem>
          <para><emphasis>Read Write Data Session</emphasis> - A plugin
          session that can read and write.</para>
        </listitem>

        <listitem>
          <para><emphasis>Transactional Data Session</emphasis> - A plugin
          session that is transactional.</para>
        </listitem>

        <listitem>
          <para><emphasis>Principal</emphasis> - Represents the optional
          identity of an initiator of a Dmt Session. When a session has a
          principal, the Dmt Admin must enforce ACLs and must ignore Dmt
          Permissions.</para>
        </listitem>

        <listitem>
          <para><emphasis>ACL</emphasis> - An Access Control List is a set of
          principals that is associated with permitted operations.</para>
        </listitem>

        <listitem>
          <para><emphasis>Dmt Event</emphasis> - Information about a
          modification of the DMT.</para>
        </listitem>

        <listitem>
          <para><emphasis>Dmt Event Listener</emphasis> - Listeners to Dmt
          Events. These listeners are services according to the white board
          pattern.</para>
        </listitem>

        <listitem>
          <para><emphasis>Mount Point</emphasis> - A point in the DMT where a
          Plugin or the Dmt Admin service allows other Plugins to have their
          root.</para>
        </listitem>
      </itemizedlist>

      <para>The overall service interaction diagram is depicted in <xref linkend="i2818213"/>.</para>

      <figure xml:id="i2818213">
        <title>Overall Service Diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.072in" contentwidth="6.230in" fileref="overall.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The entities used in the Dmt Admin operations and notifications
      are depicted in <xref linkend="i2421961"/>.</para>

      <figure pgwide="1" xml:id="i2421961">
        <title>Using Dmt Admin service, org.osgi.service.dmt and
        org.osgi.service.dmt.notification.* packages</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="4.538in" contentwidth="7.000in" fileref="dmtadmin-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Extending the Dmt Admin service with Plugins is depicted in <xref linkend="i2422005"/>.</para>

      <figure pgwide="1" xml:id="i2422005">
        <title>Extending the Dmt Admin service, org.osgi.service.dmt.spi
        package</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="4.107in" contentwidth="7.000in" fileref="spi-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>The Device Management Model</title>

    <para>The standard-based features of the DMT model are:</para>

    <itemizedlist>
      <listitem>
        <para>The Device Management Tree consists of
        <emphasis>interior</emphasis> nodes and <emphasis>leaf</emphasis>
        nodes. Interior nodes can have children and leaf nodes have primitive
        values.</para>
      </listitem>

      <listitem>
        <para>All nodes have a set of properties: Name, Title, Format, ACL,
        Version, Size, Type, Value, and TimeStamp.</para>
      </listitem>

      <listitem>
        <para>The storage of the nodes is undefined. Nodes typically map to
        peripheral registers, settings, configuration, databases, etc.</para>
      </listitem>

      <listitem>
        <para>A node's name must be unique among its siblings.</para>
      </listitem>

      <listitem>
        <para>Nodes can have Access Control Lists (ACLs), associating
        operations allowed on those nodes with a particular principal.</para>
      </listitem>

      <listitem>
        <para>Nodes can have Meta Nodes that describe actual nodes and their
        siblings.</para>
      </listitem>

      <listitem>
        <para>Base value types (called <emphasis>formats</emphasis> in the
        standard) are</para>

        <itemizedlist>
          <listitem>
            <para>integer</para>
          </listitem>

          <listitem>
            <para>long</para>
          </listitem>

          <listitem>
            <para>string</para>
          </listitem>

          <listitem>
            <para>boolean</para>
          </listitem>

          <listitem>
            <para>binary data (multiple types)</para>
          </listitem>

          <listitem>
            <para>datetime</para>
          </listitem>

          <listitem>
            <para>time</para>
          </listitem>

          <listitem>
            <para>float</para>
          </listitem>

          <listitem>
            <para>XML fragments</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Leaf nodes in the tree can have default values specified in the
        meta node.</para>
      </listitem>

      <listitem>
        <para>Meta Nodes define allowed access operations (<code>Get</code>,
        <code>Add</code>, <code>Replace</code>, <code>Delete</code> and
        <code>Exec</code>)</para>
      </listitem>
    </itemizedlist>

    <figure pgwide="1" xml:id="i1416892">
      <title>Device Management Tree example</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.586in" contentwidth="5.011in" fileref="dmt-example.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <section>
      <title>Tree Terminology</title>

      <para>In the following sections, the DMT is discussed frequently. Thus,
      well-defined terms for all the concepts that the DMT introduces are
      needed. The different terms are shown in <xref linkend="i1659141"/>.</para>

      <figure xml:id="i1659141">
        <title>DMT naming, relative to node F</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.913in" contentwidth="5.011in" fileref="naming-f.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>All terms are defined relative to node <code>F</code>. For this
      node, the terminology is as follows:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>URI</emphasis> - The path consisting of node names
          that uniquely defines a node, see <xref linkend="i2275977"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>ancestors</emphasis> - All nodes that are above the
          given node ordered in proximity. The closest node must be first in
          the list. In the example, this list is [./<code>E</code>,
          <code>.]</code></para>
        </listitem>

        <listitem>
          <para><emphasis>parent</emphasis> - The first ancestor, in this
          example this is <code>./E</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>children</emphasis> - A list of nodes that are
          directly beneath the given node without any preferred ordering. For
          node <code>F</code> this list is <code>{ ./E/F/f1, ./E/F/f2, ./E/F/G
          }</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>siblings</emphasis> - An unordered list of nodes
          that have the same parent. All siblings must have different names.
          For <code>F</code>, this is <code>{ ./E/K}</code></para>
        </listitem>

        <listitem>
          <para><emphasis>descendants</emphasis> - A list of all nodes below
          the given node. For F this is <code>{ ./E/F/f1, ./E/F/G, ./E/F/f2,
          ./E/F/G/H, ./E/F/G/I, ./E/F/G/J }</code></para>
        </listitem>

        <listitem>
          <para><emphasis>sub-tree</emphasis> - The given node plus the list
          of all descendants. For node <code>F</code> this is <code>{ ./E/F,
          ./E/F/f1, ./E/F/G, ./E/F/f2, ./E/F/G/H, ./E/F/G/I, ./E/F/G/J
          }</code></para>
        </listitem>

        <listitem>
          <para><emphasis>overlap</emphasis> - Two given URIs overlap if they
          share any node in their sub-trees. In the example, the sub-tree
          <code>./E/F</code> and <code>./E/F/G</code> overlap.</para>
        </listitem>

        <listitem>
          <para><emphasis>data root URI</emphasis> - A URI which represents
          the root of a Data Plugin.</para>
        </listitem>

        <listitem>
          <para><emphasis>exec root URI</emphasis> - A URI which represents
          the root of an Exec Plugin.</para>
        </listitem>

        <listitem>
          <para><emphasis>Parent Plugin</emphasis> - A Plugin <code>A</code>
          is a Parent Plugin of Plugin <code>B</code> if <code>B</code>'s root
          is a in <code>A</code>'s sub-tree, this requires a Parent Plugin to
          at least have one mount point.</para>
        </listitem>

        <listitem>
          <para><emphasis>Child Plugin</emphasis> - A Plugin <code>A</code> is
          a Child Plugin of Plugin <code>B</code> if <code>A</code>'s root is
          in <code>B</code>'s sub-tree.</para>
        </listitem>

        <listitem>
          <para><emphasis>Scaffold Node</emphasis> - An ancestor node of a
          Plugin that is managed by the Dmt Admin service to ensure that all
          nodes are discoverable by traversing from the root.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Actors</title>

      <para>There are two typical users of the Dmt Admin service:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Remote manager</emphasis> - The typical client of
          the Dmt Admin service is a<emphasis> Protocol Adapter</emphasis>. A
          management server external to the device can issue DMT operations
          over some management protocol. The protocol to be used is not
          specified by this specification. For example, OMA DM, TR-069, or
          others could be used. The protocol operations reach the Framework
          through the Protocol Adapter, which forwards the calls to the Dmt
          Admin service in a session. Protocol Adapters should authenticate
          the remote manager and set the principal in the session. This
          association will make the Dmt Admin service enforce the ACLs. This
          requires that the principal is equal to the server name.</para>

          <para>The Dmt Admin service provides a facility to send
          notifications to the remote manager with the Notification
          Service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Local Manager</emphasis> - A bundle which uses the
          Dmt Admin service to operate on the DMT: for example, a GUI
          application that allows the end user to change settings through the
          DMT.</para>

          <para>Although it is possible to manage some aspects of the system
          through the DMT, it can be easier for such applications to directly
          use the services that underlie the DMT; many of the management
          features available through the DMT are also available as services.
          These services shield the callers from the underlying details of the
          abstract, and sometimes hard to use DMT structure. As an example, it
          is more straightforward to use the Monitor Admin service than to
          operate upon the monitoring sub-tree. The local management
          application might listen to Dmt Events if it is interested in
          updates in the tree made by other entities, however, these events do
          not necessarily reflect the accurate state of the underlying
          services.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Actors</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.176in" contentwidth="4.922in" fileref="actors.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>The DMT Admin Service</title>

    <para>The Dmt Admin service operates on the Device Management Tree of an
    OSGi-based device. The Dmt Admin API is loosely modeled after the OMA DM
    protocol: the operations for <code>Get</code>, <code>Replace</code>,
    <code>Add</code>, <code>Delete</code> and <code>Exec</code> are directly
    available. The Dmt Admin is a singleton service.</para>

    <para>Access to the DMT is session-based to allow for locking and
    transactionality. The sessions are, in principle, concurrent, but
    implementations that queue sessions can be compliant. The client indicates
    to the Dmt Admin service what kind of session is needed:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Exclusive Update Session</emphasis> - Two or more
        updating sessions cannot access the same part of the tree
        simultaneously. An updating session must acquire an exclusive lock on
        the sub-tree which blocks the creation of other sessions that want to
        operate on an overlapping sub-tree.</para>
      </listitem>

      <listitem>
        <para><emphasis>Multiple Readers Session</emphasis> - Any number of
        read-only sessions can run concurrently, but ongoing read-only
        sessions must block the creation of an updating session on an
        overlapping sub-tree.</para>
      </listitem>

      <listitem>
        <para><emphasis>Atomic Session</emphasis> - An atomic session is the
        same as an exclusive update session, except that the session can be
        rolled back at any moment, undoing all changes made so far in the
        session. The participants must accept the outcome: rollback or commit.
        There is no prepare phase. The lack of full two phase commit can lead
        to error situations which are described later in this document; see
        <xref linkend="i1724768"/>.</para>
      </listitem>
    </itemizedlist>

    <para>Although the DMT represents a persistent data store with
    transactional access and without size limitations, the notion of the DMT
    should not be confused with a general purpose database. The intended
    purpose of the DMT is to provide a <emphasis>dynamic view</emphasis> of
    the management state of the device; the DMT model and the Dmt Admin
    service are designed for this purpose.</para>
  </section>

  <section>
    <title>Manipulating the DMT</title>

    <section xml:id="i2275977">
      <title>The DMT Addressing URI</title>

      <para>The OMA DM limits URIs to the definition of a URI in <xref linkend="i1418110"/>. The <xref linkend="org.osgi.service.dmt.Uri" xrefstyle="hyperlink"/> utility classes handles nearly all escaping
      issues with a number of static methods. All URIs in any of the API
      methods can use the full Unicode character set. For example, the
      following URIs as used in Java code are valid URIs for the Dmt Admin
      service.</para>

      <programlisting>"./ACME © 2000/A/x"
"./ACME/Address/Street/9C, Avenue St. Drézéry"</programlisting>

      <para>This strategy has a number of consequences.</para>

      <itemizedlist>
        <listitem>
          <para>A solidus (<code>'/' \u002F</code>) collides with the use of
          the solidus as separator of the node names. Solidi must therefore be
          escaped using a reverse solidus (<code>'\' \u005C</code>). The
          reverse solidus must be escaped with a double reverse solidus
          sequence. The Dmt Admin service must ignore a reverse solidus when
          it is not followed by a solidus or reverse solidus. The solidus and
          reverse solidus must not be escaped using the <code>%00</code> like
          escaping defined for URIs. For example, a node that has the name of
          a MIME type could look like:</para>

          <programlisting>./OSGi/mime/application\/png</programlisting>

          <para>In Java, a reverse solidus must be escaped as well, therefore
          requiring double reverse solidi:</para>

          <programlisting>String a = "./OSGi/mime/application\\/png";</programlisting>

          <para>A literal reverse solidus would therefore require 4 reverse
          solidi in a Java string.</para>
        </listitem>

        <listitem>
          <para>The length of a node name is defined to be the length of the
          byte array that results from UTF-8 encoding a string.</para>
        </listitem>
      </itemizedlist>

      <para>The <xref linkend="org.osgi.service.dmt.Uri" xrefstyle="hyperlink"/> class provides an <xref linkend="org.osgi.service.dmt.Uri.encode-String-" xrefstyle="hyperlink"/> method to escape a string and a <xref linkend="org.osgi.service.dmt.Uri.decode-String-" xrefstyle="hyperlink"/> method to unescape a string. Though in general
      the Dmt Admin service implementations should not impose unnecessary
      constraints on the node name length, it is possible that an
      implementation runs out of space. In that case it must throw a <xref linkend="org.osgi.service.dmt.DmtException" xrefstyle="hyperlink"/>
      <xref linkend="org.osgi.service.dmt.DmtException.URI_TOO_LONG" xrefstyle="hyperlink"/>.</para>

      <para>Nodes are addressed by presenting a <emphasis>relative</emphasis>
      or <emphasis>absolute URI</emphasis> for the requested node. The URI is
      defined with the following grammar:</para>

      <programlisting>uri             ::= relative-uri | absolute-uri
absolute-uri    ::= './' relative-uri
relative-uri    ::= segment ( '/' segment )*
segment         ::= (~['/'])*</programlisting>

      <para>The <xref linkend="org.osgi.service.dmt.Uri" xrefstyle="hyperlink"/> <xref linkend="org.osgi.service.dmt.Uri.isAbsoluteUri-String-" xrefstyle="hyperlink"/> method makes it simple to find out if a URI is
      relative or absolute. Relative URIs require a base URI that is for
      example provided by the session, see <xref linkend="i2275981"/>.</para>

      <para>Each node name is appended to the previous ones using a solidus
      (<code>'/' \u002F</code>) as the separating character. The first node of
      an absolute URI must be the full stop (<code>'.' \u002E</code>). For
      example, to access the <code>Bach</code> leaf node in the
      <code>RingTones</code> interior node from <xref linkend="i1416892" xrefstyle="template:Figure %n on page %p"/>, the URI must be:</para>

      <programlisting>./Vendor/RingSignals/Bach</programlisting>

      <para>The URI must be given with the root of the management tree as the
      starting point. URIs used in the DMT must be treated and interpreted as
      <emphasis>case-sensitive</emphasis>. I.e.<code>./Vendor</code> and
      <code>./vendor</code> designate two different nodes. The following
      mandatory restrictions on URI syntax are intended to simplify the
      parsing of URIs.</para>

      <para>The full stop has no special meaning in a node name. That is,
      sequences like<code>..</code> do not imply parent node. The <xref linkend="org.osgi.service.dmt.Uri.isValidUri-String-" xrefstyle="hyperlink"/> method verifies that a URI fulfills all its
      obligations and is valid.</para>
    </section>

    <section xml:id="i2275981">
      <title>Locking and Sessions</title>

      <para>The Dmt Admin service is the main entry point into the DMT, its
      usage is to create sessions. A simple example is getting a session on a
      specific sub-tree. Such a session can be created with the <xref linkend="org.osgi.service.dmt.DmtAdmin.getSession-String-" xrefstyle="hyperlink"/> method. This method creates an updating session
      with an exclusive lock on the given sub-tree. The given sub-tree can be
      a single leaf node, if so desired.</para>

      <para>Each session has an ID associated with it which is unique to the
      machine and is never reused. This id is always greater than 0. The value
      -1 is reserved as place holder to indicate a situation has no session
      associated with it, for example an event generated from an underlying
      service. The URI argument addresses the sub-tree root. If
      <code>null</code>, it addresses the root of the DMT. All nodes can be
      reached from the root, so specifying a session root node is not strictly
      necessary but it permits certain optimizations in the
      implementations.</para>

      <para>If the default exclusive locking mode of a session is not
      adequate, it is possible to specify the locking mode with the <xref linkend="org.osgi.service.dmt.DmtAdmin.getSession-String-int-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.dmt.DmtAdmin.getSession-String-String-int-" xrefstyle="hyperlink"/> method. These methods supports the following
      locking modes:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.dmt.DmtSession.LOCK_TYPE_SHARED" xrefstyle="hyperlink"/> - Creates a <emphasis>shared
          session</emphasis>. It is limited to read-only access to the given
          sub-tree, which means that multiple sessions are allowed to read the
          given sub-tree at the same time.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.DmtSession.LOCK_TYPE_EXCLUSIVE" xrefstyle="hyperlink"/> - Creates an <emphasis>exclusive
          session</emphasis>. The lock guarantees full read-write access to
          the tree. Such sessions, however, cannot share their sub-tree with
          any other session. This type of lock requires that the underlying
          implementation supports Read Write Data Sessions.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.DmtSession.LOCK_TYPE_ATOMIC" xrefstyle="hyperlink"/> - Creates an <emphasis>atomic
          session</emphasis> with an exclusive lock on the sub-tree, but with
          added transactionality. Operations on such a session must either
          succeed together or fail together. This type of lock requires that
          the underlying implementation supports Transactional Data Sessions.
          If the Dmt Admin service does not support transactions, then it must
          throw a Dmt Exception with the <xref linkend="org.osgi.service.dmt.DmtException.FEATURE_NOT_SUPPORTED" xrefstyle="hyperlink"/> code. If the session accesses data plugins
          that are not transactional in write mode, then the Dmt Admin service
          must throw a Dmt Exception with the <xref linkend="org.osgi.service.dmt.DmtException.TRANSACTION_ERROR" xrefstyle="hyperlink"/> code. That is, data plugins can participate
          in a atomic sessions as long as they only perform read
          operations.</para>
        </listitem>
      </itemizedlist>

      <para>The Dmt Admin service must lock the sub-tree in the requested mode
      before any operations are performed. If the requested sub-tree is not
      accessible, the <xref linkend="org.osgi.service.dmt.DmtAdmin.getSession-String-int-" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtAdmin.getSession-String-String-int-" xrefstyle="hyperlink"/>, or <xref linkend="org.osgi.service.dmt.DmtAdmin.getSession-String-" xrefstyle="hyperlink"/> method must block until the sub-tree becomes
      available. The implementation can decide after an
      implementation-dependent period to throw a Dmt Exception with the <xref linkend="org.osgi.service.dmt.DmtException.SESSION_CREATION_TIMEOUT" xrefstyle="hyperlink"/> code.</para>

      <para>As a simplification, the Dmt Admin service is allowed to lock the
      entire tree irrespective of the given sub-tree. For performance reasons,
      implementations should provide more fine-grained locking when
      possible.</para>

      <para>Persisting the changes of a session works differently for
      exclusive and atomic sessions. Changes to the sub-tree in an atomic
      session are not persisted until the <xref linkend="org.osgi.service.dmt.DmtSession.commit--" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.dmt.DmtSession.close--" xrefstyle="hyperlink"/> method of the session is called. Changes since
      the last transaction point can be rolled back with the <xref linkend="org.osgi.service.dmt.DmtSession.rollback--" xrefstyle="hyperlink"/> method.</para>

      <para>The <xref linkend="org.osgi.service.dmt.DmtSession.commit--" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.dmt.DmtSession.rollback--" xrefstyle="hyperlink"/> methods can be called multiple times in a
      session; they do not close the session. The <code>open</code>, <xref linkend="org.osgi.service.dmt.DmtSession.commit--" xrefstyle="hyperlink"/>, and <xref linkend="org.osgi.service.dmt.DmtSession.rollback--" xrefstyle="hyperlink"/> methods all establish a <emphasis>transaction
      point</emphasis>. The rollback operation cannot roll back further than
      the last transaction point.</para>

      <para>Once a fatal error is encountered (as defined by the
      <code>DmtException</code> <xref linkend="org.osgi.service.dmt.DmtException.isFatal--" xrefstyle="hyperlink"/> method), all successful changes must be rolled
      back automatically to the last transaction point. Non-fatal errors do
      not rollback the session. Any error/exception in the <code>commit</code>
      or <code>rollback</code> methods invalidates and closes the session.
      This can happen if, for example, the mapping state of a plugin changes
      that has its plugin root inside the session's sub-tree.</para>

      <para>Changes in an exclusive session are persisted immediately after
      each separate operation. Errors do not roll back any changes made in
      such a session.</para>

      <para>Due to locking and transactional behavior, a session of any type
      must be closed once it is no longer used. Locks must always be released,
      even if the <xref linkend="org.osgi.service.dmt.DmtSession.close--" xrefstyle="hyperlink"/> method throws an exception.</para>

      <para>Once a session is closed no further operations are allowed and
      manipulation methods must throw a Dmt Illegal State Exception when
      called. Certain information methods like for example <xref linkend="org.osgi.service.dmt.DmtSession.getState--" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.dmt.DmtSession.getRootUri--" xrefstyle="hyperlink"/> can still be called for logging or diagnostic
      purposes. This is documented with the Dmt Session methods.</para>

      <para>The <xref linkend="org.osgi.service.dmt.DmtSession.close--" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.dmt.DmtSession.commit--" xrefstyle="hyperlink"/> method can be expected to fail even if all or
      some of the individual operations were successful. This failure can
      occur due to multi-node constraints defined by a specific
      implementation. The details of how an implementation specifies such
      constraints is outside the scope of this specification.</para>

      <para>Events in an atomic session must only be sent at commit
      time.</para>
    </section>

    <section>
      <title>Associating a Principal</title>

      <para>Protocol Adapters must use the <xref linkend="org.osgi.service.dmt.DmtAdmin.getSession-String-String-int-" xrefstyle="hyperlink"/> method which features the principal as the first
      parameter. The principal identifies the external entity on whose behalf
      the session is created. This server identification string is determined
      during the authentication process in a way specific to the management
      protocol.</para>

      <para>For example, the identity of the OMA DM server can be established
      during the handshake between the OMA DM agent and the server. In the
      simpler case of OMA CP protocol, which is a one-way protocol based on
      WAP Push, the identity of the principal can be a fixed value.</para>
    </section>

    <section>
      <title>Relative Addressing</title>

      <para>All DMT operation methods are found on the session object. Most of
      these methods accept a <emphasis>relative</emphasis> or
      <emphasis>absolute</emphasis> URI as their first parameter: for example,
      the method <xref linkend="org.osgi.service.dmt.DmtSession.isLeafNode-String-" xrefstyle="hyperlink"/>. This URI is absolute or relative to the
      sub-tree with which the session is associated. For example, if the
      session is opened on:</para>

      <programlisting>./Vendor</programlisting>

      <para>then the following URIs address the <code>Bach</code> ring
      tone:</para>

      <programlisting>RingTones/Bach
./Vendor/RingTones/Bach</programlisting>

      <para>Opening the session with a <code>null</code> URI is identical to
      opening the session at the root. But the absolute URI can be used to
      address the <code>Bach</code> ring tone as well as a relative
      URI.</para>

      <programlisting>./Vendor/RingTones/Bach
Vendor/RingTones/Bach</programlisting>

      <para>If the URI specified does not correspond to a legitimate node in
      the tree, a Dmt Exception must be thrown. The only exception to this
      rule is the <xref linkend="org.osgi.service.dmt.DmtSession.isNodeUri-String-" xrefstyle="hyperlink"/> method that can verify if a node is actually
      valid. The <xref linkend="org.osgi.service.dmt.DmtSession.getMetaNode-String-" xrefstyle="hyperlink"/> method must accept URIs to non-existing nodes if
      an applicable meta node is available; otherwise it must also throw a Dmt
      Exception.</para>
    </section>

    <section xml:id="i2070130">
      <title>Creating Nodes</title>

      <para>The methods that create interior nodes are:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.dmt.DmtSession.createInteriorNode-String-" xrefstyle="hyperlink"/> - Create a new interior node using the
          default meta data. If the principal does not have
          <code>Replace</code> access rights on the parent of the new node
          then the session must automatically set the ACL of the new node so
          that the creating server has <code>Add</code>, <code>Delete</code>
          and <code>Replace</code> rights on the new node.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.DmtSession.createInteriorNode-String-String-" xrefstyle="hyperlink"/> - Create a new interior node. The meta data
          for this new node is identified by the second argument, which is a
          URI <emphasis>identifying</emphasis> an OMA DM Device Description
          Framework (DDF) file, this does not have to be a valid location. It
          uses a format like <code>org.osgi/1.0/LogManagementObject</code>.
          This meta node must be consistent with any meta information from the
          parent node.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.DmtSession.createLeafNode-String-" xrefstyle="hyperlink"/> - Create a new leaf node with a default
          value.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.DmtSession.createLeafNode-String-DmtData-" xrefstyle="hyperlink"/> - Create a leaf node and assign a value to
          the leaf-node.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.DmtSession.createLeafNode-String-DmtData-String-" xrefstyle="hyperlink"/> - Create a leaf node and assign a value for
          the node. The last argument is the MIME type, which can be
          <code>null</code>.</para>
        </listitem>
      </itemizedlist>

      <para>For a node to be created, the following conditions must be
      fulfilled:</para>

      <itemizedlist>
        <listitem>
          <para>The URI of the new node has to be a valid URI.</para>
        </listitem>

        <listitem>
          <para>The principal of the Dmt Session, if present, must have ACL
          <code>Add</code> permission to add the node to the parent.
          Otherwise, the caller must have the necessary permission.</para>
        </listitem>

        <listitem>
          <para>All constraints of the meta node must be verified, including
          value constraints, name constraints, type constraints, and MIME type
          constraints. If any of the constraints fail, a Dmt Exception must be
          thrown with an appropriate code.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Node Properties</title>

      <para>A DMT node has a number of runtime properties that can be set
      through the session object. These properties are:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Title</emphasis> - (<code>String</code>) A human
          readable title for the object. The title is distinct from the node
          name. The title can be set with <xref linkend="org.osgi.service.dmt.DmtSession.setNodeTitle-String-String-" xrefstyle="hyperlink"/> and read with <xref linkend="org.osgi.service.dmt.DmtSession.getNodeTitle-String-" xrefstyle="hyperlink"/>. This specification does not define how this
          information is localized. This property is optional depending on the
          implementation that handles the node.</para>
        </listitem>

        <listitem>
          <para><emphasis>Type</emphasis> -(<code>String</code>) The MIME
          type, as defined in <xref linkend="i1662528"/>, of the node's value
          when it is a leaf node. The type of an interior node is a string
          identifying a DDF type. These types can be set with <xref linkend="org.osgi.service.dmt.DmtSession.setNodeType-String-String-" xrefstyle="hyperlink"/> and read with <xref linkend="org.osgi.service.dmt.DmtSession.getNodeType-String-" xrefstyle="hyperlink"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Version</emphasis> - (<code>int</code>) Version
          number, which must start at 0, incremented after every modification
          (for both a leaf and an interior node) modulo 0x10000. Changes to
          the value or any of the properties (including ACLs), or
          adding/deleting nodes, are considered changes. The <xref linkend="org.osgi.service.dmt.DmtSession.getNodeVersion-String-" xrefstyle="hyperlink"/> method returns this version; the value is
          read-only. In certain cases, the underlying data structure does not
          support change notifications or makes it difficult to support
          versions. This property is optional depending on the node's
          implementation.</para>
        </listitem>

        <listitem>
          <para><emphasis>Size</emphasis> - (<code>int</code>) The size
          measured in bytes is read-only and can be read with <xref linkend="org.osgi.service.dmt.DmtSession.getNodeSize-String-" xrefstyle="hyperlink"/>. Not all nodes can accurately provide this
          information.</para>
        </listitem>

        <listitem>
          <para><emphasis>Time Stamp</emphasis> -(<code>Date</code>) Time of
          the last change in version. The <xref linkend="org.osgi.service.dmt.DmtSession.getNodeTimestamp-String-" xrefstyle="hyperlink"/> returns the time stamp. The value is read
          only. This property is optional depending on the node's
          implementation.</para>
        </listitem>

        <listitem>
          <para><emphasis>ACL</emphasis> - The Access Control List for this
          and descendant nodes. The property can be set with <xref linkend="org.osgi.service.dmt.DmtSession.setNodeAcl-String-Acl-" xrefstyle="hyperlink"/> and obtained with <xref linkend="org.osgi.service.dmt.DmtSession.getNodeAcl-String-" xrefstyle="hyperlink"/>.</para>
        </listitem>
      </itemizedlist>

      <para>If a plugin that does not implement an optional property is
      accessed, a Dmt Exception with the code <xref linkend="org.osgi.service.dmt.DmtException.FEATURE_NOT_SUPPORTED" xrefstyle="hyperlink"/> must be thrown.</para>
    </section>

    <section xml:id="i2538437">
      <title>Setting and Getting Data</title>

      <para>Values are represented as <code>DmtData</code> objects, which are
      immutable. The are acquired with the <xref linkend="org.osgi.service.dmt.DmtSession.getNodeValue-String-" xrefstyle="hyperlink"/> method and set with the <xref linkend="org.osgi.service.dmt.DmtSession.setNodeValue-String-DmtData-" xrefstyle="hyperlink"/> method.</para>

      <para><code>DmtData</code> objects are dynamically typed by an integer
      enumeration. In OMA DM, this integer is called the
      <emphasis>format</emphasis> of the data value. The format of the
      <code>DmtData</code> class is similar to the type of a variable in a
      programming language, but the word <emphasis>format</emphasis> is used
      here. The available data formats are listed in the following
      table.</para>

      <table pgwide="1">
        <title>Data Formats</title>

        <tgroup cols="6">
          <colspec colnum="1" colwidth="2.8*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="1*"/>

          <colspec colnum="4" colwidth="3*"/>

          <colspec colnum="5" colwidth="2*"/>

          <colspec colnum="6" colwidth="3*"/>

          <thead>
            <row>
              <entry>Format Type</entry>

              <entry>Java Type</entry>

              <entry>Format Name</entry>

              <entry>Constructor</entry>

              <entry>Get</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BASE64" xrefstyle="hyperlink"/></entry>

              <entry><code>byte[]</code></entry>

              <entry><code>base64</code></entry>

              <entry><xref linkend="org.osgi.service.dmt.DmtData.DmtData-byte---boolean-" xrefstyle="hyperlink"/></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtData.getBase64--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Binary type that must be encoded with base 64, see
              <xref linkend="i1869240"/>.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BINARY" xrefstyle="hyperlink"/></entry>

              <entry><code>byte[]</code></entry>

              <entry><code>binary</code></entry>

              <entry><code><xref linkend="org.osgi.service.dmt.DmtData.DmtData-byte---" xrefstyle="hyperlink"/> <xref linkend="org.osgi.service.dmt.DmtData.DmtData-byte---boolean-" xrefstyle="hyperlink"/></code></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtData.getBinary--" xrefstyle="hyperlink"/></para></entry>

              <entry><para> A byte array. The <code>DmtData</code> object is
              created with the constructor. The byte array can only be
              acquired with the method.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BOOLEAN" xrefstyle="hyperlink"/></entry>

              <entry><code>boolean</code></entry>

              <entry><code>boolean</code></entry>

              <entry><xref linkend="org.osgi.service.dmt.DmtData.DmtData-boolean-" xrefstyle="hyperlink"/></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtData.getBoolean--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Boolean. There are two constants for this
              type:</para><itemizedlist>
                  <listitem>
                    <para><xref linkend="org.osgi.service.dmt.DmtData.FALSE_VALUE" xrefstyle="hyperlink"/></para>
                  </listitem>

                  <listitem>
                    <para><xref linkend="org.osgi.service.dmt.DmtData.TRUE_VALUE" xrefstyle="hyperlink"/></para>
                  </listitem>
                </itemizedlist></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_DATE" xrefstyle="hyperlink"/></entry>

              <entry><code>String</code></entry>

              <entry><code>date</code></entry>

              <entry><xref linkend="org.osgi.service.dmt.DmtData.DmtData-String-int-" xrefstyle="hyperlink"/></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtData.getString--" xrefstyle="hyperlink"/> </para><para><xref linkend="org.osgi.service.dmt.DmtData.getDate--" xrefstyle="hyperlink"/> </para></entry>

              <entry><para>A Date (no time). Syntax defined in <xref linkend="i2437549"/> as the <code>date</code>
              type.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_DATE_TIME" xrefstyle="hyperlink"/></entry>

              <entry><code>String</code></entry>

              <entry><code>dateTime</code></entry>

              <entry><xref linkend="org.osgi.service.dmt.DmtData.DmtData-Date-" xrefstyle="hyperlink"/></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtData.getDateTime--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>A <code>Date</code> object representing a point in
              time.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_FLOAT" xrefstyle="hyperlink"/></entry>

              <entry><code>float</code></entry>

              <entry><code>float</code></entry>

              <entry><xref linkend="org.osgi.service.dmt.DmtData.DmtData-float-" xrefstyle="hyperlink"/></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtData.getFloat--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Float</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_INTEGER" xrefstyle="hyperlink"/></entry>

              <entry><code>int</code></entry>

              <entry><code>integer</code></entry>

              <entry><xref linkend="org.osgi.service.dmt.DmtData.DmtData-int-" xrefstyle="hyperlink"/></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtData.getInt--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Integer</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_LONG" xrefstyle="hyperlink"/></entry>

              <entry><code>long</code></entry>

              <entry><code>long</code></entry>

              <entry><xref linkend="org.osgi.service.dmt.DmtData.DmtData-long-" xrefstyle="hyperlink"/></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtData.getLong--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Long</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_NODE" xrefstyle="hyperlink"/></entry>

              <entry><code>Object</code></entry>

              <entry><code>NODE</code></entry>

              <entry><xref linkend="org.osgi.service.dmt.DmtData.DmtData-Object-" xrefstyle="hyperlink"/></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtData.getNode--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>A <code>DmtData</code> object can have a format of
              <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_NODE" xrefstyle="hyperlink"/>. This value is returned from a
              <code>MetaNode</code> <xref linkend="org.osgi.service.dmt.MetaNode.getFormat--" xrefstyle="hyperlink"/> method if the node is an interior node
              or for a data value when the Plugin supports complex
              values.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_NULL" xrefstyle="hyperlink"/></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry><para/></entry>

              <entry><para>No valid data is available. <code>DmtData</code>
              objects with this format cannot be constructed; the only
              instance is the <code>DmtData</code> <xref linkend="org.osgi.service.dmt.DmtData.NULL_VALUE" xrefstyle="hyperlink"/> constant.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_BINARY" xrefstyle="hyperlink"/></entry>

              <entry><code>byte[]</code></entry>

              <entry><code>&lt;custom&gt;</code></entry>

              <entry><xref linkend="org.osgi.service.dmt.DmtData.DmtData-String-byte---" xrefstyle="hyperlink"/></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtData.getRawBinary--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>A raw binary format is always created with a format
              name. This format name allows the creator to define a
              proprietary format. The format name is available from the <xref linkend="org.osgi.service.dmt.DmtData.getFormatName--" xrefstyle="hyperlink"/> method, which has predefined values for
              the standard formats.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_STRING" xrefstyle="hyperlink"/></entry>

              <entry><code>String</code></entry>

              <entry><code>&lt;custom&gt;</code></entry>

              <entry><xref linkend="org.osgi.service.dmt.DmtData.DmtData-String-String-" xrefstyle="hyperlink"/></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtData.getRawString--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>A raw string format is always created with a format
              name. This format name allows the creator to define a
              proprietary format. The format name is available from the <xref linkend="org.osgi.service.dmt.DmtData.getFormatName--" xrefstyle="hyperlink"/> method, which has predefined values for
              the standard formats.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_STRING" xrefstyle="hyperlink"/></entry>

              <entry><code>String</code></entry>

              <entry><code>string</code></entry>

              <entry><xref linkend="org.osgi.service.dmt.DmtData.DmtData-String-" xrefstyle="hyperlink"/></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtData.getString--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>String</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_TIME" xrefstyle="hyperlink"/></entry>

              <entry><code>String</code></entry>

              <entry><code>time</code></entry>

              <entry><xref linkend="org.osgi.service.dmt.DmtData.DmtData-String-int-" xrefstyle="hyperlink"/></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtData.getString--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Time of Day. Syntax defined in <xref linkend="i2437549"/> as the <code>time</code>
              type.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_XML" xrefstyle="hyperlink"/></entry>

              <entry><code>String</code></entry>

              <entry><code>xml</code></entry>

              <entry><xref linkend="org.osgi.service.dmt.DmtData.DmtData-String-int-" xrefstyle="hyperlink"/></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtData.getXml--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>A string containing an XML fragment. It can be
              obtained with. The validity of the XML must not be verified by
              the Dmt Admin service.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Complex Values</title>

      <para>The OMA DM model prescribes that only leaf nodes have primitive
      values. This model maps very well to remote managers. However, when a
      manager is written in Java and uses the Dmt Admin API to access the
      tree, there are often unnecessary conversions from a complex object, to
      leaf nodes, and back to a complex object. For example, an interior node
      could hold the current GPS position as an OSGi <code>Position</code>
      object, which consists of a longitude, latitude, altitude, speed, and
      direction. All these objects are <code>Measurement</code> objects which
      consist of value, error, and unit. Reading such a <code>Position</code>
      object through its leaf nodes only to make a new <code>Position</code>
      object is wasting resources. It is therefore that the Dmt Admin service
      also supports <emphasis>complex values</emphasis> as a supplementary
      facility.</para>

      <para>If a complex value is used then the leaves must also be accessible
      and represent the same semantics as the complex value. A manager unaware
      of complex values must work correctly by only using the leaf nodes.
      Setting or getting the complex value of an interior node must be
      identical to setting or getting the leaf nodes.</para>

      <para>Accessing a complex value requires <code>Get</code> access to the
      node and all its descendants. Setting a complex value requires
      <code>Replace</code> access to the interior node. Replacing a complex
      value must only generate a single Replace event.</para>

      <para>Trying to set or get a complex value on an interior node that does
      not support complex values must throw a Dmt Exception with the code
      <xref linkend="org.osgi.service.dmt.DmtException.FEATURE_NOT_SUPPORTED" xrefstyle="hyperlink"/>.</para>
    </section>

    <section>
      <title>Nodes and Types</title>

      <para>The node's type can be set with the <xref linkend="org.osgi.service.dmt.DmtSession.setNodeType-String-String-" xrefstyle="hyperlink"/> method and acquired with <xref linkend="org.osgi.service.dmt.DmtSession.getNodeType-String-" xrefstyle="hyperlink"/>. The namespaces for the types differ for
      interior and leaf nodes. A leaf node is typed with a MIME type and an
      interior node is typed with a DDF Document URI. However, in both cases
      the Dmt Admin service must not verify the syntax of the type
      name.</para>

      <para>The <xref linkend="org.osgi.service.dmt.DmtSession.createLeafNode-String-DmtData-String-" xrefstyle="hyperlink"/> method takes a MIME type as last argument that
      will type the leaf node. The MIME type reflects how the data of the node
      should be <emphasis>interpreted</emphasis>. For example, it is possible
      to store a GIF and a JPEG image in a <code>DmtData</code> object with a
      <code>FORMAT_BINARY</code> format. Both the GIF and the JPEG object
      share the same <emphasis>format</emphasis>, but will have MIME types of
      <code>image/jpg</code> and <code>image/gif</code> respectively. The Meta
      Node provides a list of possible MIME types.</para>

      <para>The <xref linkend="org.osgi.service.dmt.DmtSession.createInteriorNode-String-String-" xrefstyle="hyperlink"/> method takes a DDF Document URI as the last
      argument that will type the interior node. This specification defines
      the DDF Document URIs listed in the following table for interior nodes
      that have a particular meaning in this specification.</para>

      <table>
        <title>Standard Interior Node Types</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="2*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>Interior Node Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtConstants.DDF_SCAFFOLD" xrefstyle="hyperlink"/></entry>

              <entry><para>Scaffold nodes are automatically generated nodes by
              the Dmt Admin service to provide the children node names so that
              Plugins are reachable from the root. See <xref linkend="i2931854"/>.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtConstants.DDF_MAP" xrefstyle="hyperlink"/></entry>

              <entry><para><code>MAP</code> nodes define a <code>key</code>
              -&gt; <code>value</code> mapping construct using the node name
              (key) and the node value (value). See <xref linkend="i2837021"/>.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtConstants.DDF_LIST" xrefstyle="hyperlink"/></entry>

              <entry><para><code>LIST</code> nodes use the node name to
              maintain an index in a list. See <xref linkend="i2836847"/>.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Deleting Nodes</title>

      <para>The <xref linkend="org.osgi.service.dmt.DmtSession.deleteNode-String-" xrefstyle="hyperlink"/> method on the session represents the Delete
      operation. It deletes the sub-tree of that node. This method is
      applicable to both leaf and interior nodes. Nodes can be deleted by the
      Dmt Admin service in any order. The root node of the session cannot be
      deleted.</para>

      <para>For example, given <xref linkend="i1647301"/>, deleting node
      <code>P</code> must delete the nodes <code>./P</code>, <code>./P/
      M</code>, <code>./P/M/X</code>, <code>./P/M/n2</code> and
      <code>./P/M/n3</code> in any order.</para>

      <figure xml:id="i1647301">
        <title>DMT node and deletion</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.586in" contentwidth="5.011in" fileref="deleting-nodes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Copying Nodes</title>

      <para>The <xref linkend="org.osgi.service.dmt.DmtSession.copy-String-String-boolean-" xrefstyle="hyperlink"/> method on the <code>DmtSession</code> object
      represents the <code>Copy</code> operation. A node is completely copied
      to a new URI. It can be specified with a <code>boolean</code> if the
      whole sub-tree (<code>true</code>) or just the indicated node is
      copied.</para>

      <para>The ACLs must not be copied; the new access rights must be the
      same as if the caller had created the new nodes individually. This
      restriction means that the copied nodes inherit the access rights from
      the parent of the destination node, unless the calling principal does
      not have <code>Replace</code> rights for the parent. See <xref linkend="i2070130"/> for details.</para>
    </section>

    <section>
      <title>Renaming Nodes</title>

      <para>The <xref linkend="org.osgi.service.dmt.DmtSession.renameNode-String-String-" xrefstyle="hyperlink"/> method on the <code>DmtSession</code> object
      represents the <code>Rename</code> operation, which replaces the node
      name. It requires permission for the <code>Replace</code> operation. The
      root node for the current session can not be renamed.</para>
    </section>

    <section>
      <title>Execute</title>

      <para>The <xref linkend="org.osgi.service.dmt.DmtSession.execute-String-String-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.dmt.DmtSession.execute-String-String-String-" xrefstyle="hyperlink"/> methods can <emphasis>execute</emphasis> a node.
      Executing a node is intended to be used when a problem is hard to model
      as a set of leaf nodes. This can be related to synchronization issues or
      data manipulation. The execute methods can provide a correlator for a
      notification and an opaque string that is forwarded to the implementer
      of the node.</para>

      <para>Execute operations can not take place in a read only session
      because simultaneous execution could make conflicting changes to the
      tree.</para>
    </section>

    <section>
      <title>Closing</title>

      <para>When all the changes have been made, the session must be closed by
      calling the <xref linkend="org.osgi.service.dmt.DmtSession.close--" xrefstyle="hyperlink"/> method on the session. The Dmt Admin service
      must then finalize, clean up, and release any locks. For atomic
      sessions, the Dmt Admin service must automatically commit any changes
      that were made since the last transaction point.</para>

      <para>A session times out and is invalidated after an extended period of
      inactivity. The exact length of this period is not specified, but is
      recommended to be at least 1 minute and at most 24 hours. All methods of
      an invalidated session must throw an Dmt Illegal State Exception after
      the session is invalidated.</para>

      <para>A session's state is one of the following: <xref linkend="org.osgi.service.dmt.DmtSession.STATE_CLOSED" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtSession.STATE_INVALID" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.dmt.DmtSession.STATE_OPEN" xrefstyle="hyperlink"/>, as can be queried by the <xref linkend="org.osgi.service.dmt.DmtSession.getState--" xrefstyle="hyperlink"/> call. The invalid state is reached either after
      a fatal error case is encountered or after the session is timed out.
      When an atomic session is invalidated, it is automatically rolled back
      to the last transaction point of the session.</para>
    </section>
  </section>

  <section xml:id="i2538447">
    <title>Meta Data</title>

    <para>The <xref linkend="org.osgi.service.dmt.DmtSession.getMetaNode-String-" xrefstyle="hyperlink"/> method returns a <code>MetaNode</code> object for
    a given URI. This node is called the <emphasis>meta node</emphasis>. A
    meta node provides information about nodes.</para>

    <para>Any node can optionally have a meta node associated with it. The one
    or more nodes that are described by the meta nodes are called the meta
    node's <emphasis>related instances</emphasis>. A meta node can describe a
    singleton-related instance, or it can describe all the children of a given
    parent if it is a <emphasis>multi-node</emphasis>. That is to say, meta
    nodes can exist without an actual instance being present. In order to
    retrieve the meta node of a multi-node any name can be used.</para>

    <para>For example, if a new ring tone, <code>Grieg</code>, was created in
    <xref linkend="i1465151"/> it would be possible to get the Meta Node
    for<code>./Vendor/RingSignals/Grieg</code> before the node was created.
    This is usually the case for multi nodes. The model is depicted in <xref linkend="i1465151"/>.</para>

    <figure xml:id="i1465151">
      <title>Nodes and meta nodes</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.719in" contentwidth="6.248in" fileref="meta-nodes.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>A URI is generally associated with the same Meta Node. The <xref linkend="org.osgi.service.dmt.DmtSession.getMetaNode-String-" xrefstyle="hyperlink"/> should return the same meta node for the same URI
    except in the case of <xref linkend="i2931854"/>. As the ownership of
    scaffold nodes can change from the Dmt Admin service to the Parent Plugin
    service, or from a Parent Plugin to a Child Plugin, the Meta Node can
    change as well.</para>

    <para>The last segment of the URI to get a Meta Node can be any valid node
    name, for example, instead of <code>Grieg</code> it would have been
    possible to retrieve the same Meta Node with the name
    <code>./Vendor/RingSignals/0</code>,
    <code>./Vendor/RingSignals/anyName</code>,
    <code>./Vendor/RingSignals/&lt;&gt;</code>, etc.</para>

    <para>The actual meta data can come from two sources:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Dmt Admin</emphasis> - Each Dmt Admin service likely
        has a private meta data repository. This meta data is placed in the
        device in a proprietary way.</para>
      </listitem>

      <listitem>
        <para><emphasis>Plugins</emphasis> - Plugins can carry meta nodes and
        provide these to the Dmt Admin service by implementing the <xref linkend="org.osgi.service.dmt.spi.ReadableDataSession.getMetaNode-String---" xrefstyle="hyperlink"/> method. If a plugin returns a non-null value,
        the Dmt Admin service must use that value, possibly complemented by
        its own metadata for elements not provided by the plugin.</para>
      </listitem>
    </itemizedlist>

    <para>The <code>MetaNode</code> interface supports methods to retrieve
    read-only meta data. The following sections describes this meta-data in
    more detail.</para>

    <section xml:id="i2760251">
      <title>Operations</title>

      <para>The <xref linkend="org.osgi.service.dmt.MetaNode.can-int-" xrefstyle="hyperlink"/> method provide information as to whether the
      associated node can perform the given operation. This information is
      only about the capability; it can still be restricted in runtime by ACLs
      and permissions.</para>

      <para>For example, if the <code>can(MetaNode.CMD_EXECUTE)</code> method
      returns <code>true</code>, the target object supports the
      <code>Execute</code> operation. That is, calling the <xref linkend="org.osgi.service.dmt.DmtSession.execute-String-String-" xrefstyle="hyperlink"/> method with the target URI is possible.</para>

      <para>The <xref linkend="org.osgi.service.dmt.MetaNode.can-int-" xrefstyle="hyperlink"/> method can take the following constants as
      parameters:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.dmt.MetaNode.CMD_ADD" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.MetaNode.CMD_DELETE" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.MetaNode.CMD_EXECUTE" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.MetaNode.CMD_GET" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.MetaNode.CMD_REPLACE" xrefstyle="hyperlink"/></para>
        </listitem>
      </itemizedlist>

      <para>For example:</para>

      <programlisting>void foo( DmtSession session, String nodeUri) {
    MetaNode    meta = session.getMetaNode(nodeUri);
  if ( meta !=null &amp;&amp; meta.<code>can(MetaNode.CMD_EXECUTE)</code> )
        session.execute(nodeUri,"foo" );
}</programlisting>
    </section>

    <section xml:id="i2965501">
      <title>Scope</title>

      <para>The scope is part of the meta information of a node. It provides
      information about what the life cycle role is of the node. The <xref linkend="org.osgi.service.dmt.MetaNode.getScope--" xrefstyle="hyperlink"/> method on the Meta Node provides this
      information. The value of the scope can be one of the following:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.dmt.MetaNode.DYNAMIC" xrefstyle="hyperlink"/> - Dynamic nodes are intended to be created
          and deleted by a management system or an other controlling source.
          This does not imply that it actually is possible to add new nodes
          and delete nodes, the actions can still allow or deny this. However,
          in principle nodes that can be added or deleted have the <xref linkend="org.osgi.service.dmt.MetaNode.DYNAMIC" xrefstyle="hyperlink"/> scope. The <code>LIST</code> and
          <code>MAP</code> nodes, see <xref linkend="service.dmt.osgiobjectmodeling"/>, always have <xref linkend="org.osgi.service.dmt.MetaNode.DYNAMIC" xrefstyle="hyperlink"/> scope.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.MetaNode.PERMANENT" xrefstyle="hyperlink"/> - Permanent nodes represent an entity in the
          system. This can be a network interface, a device description, etc.
          Permanent nodes in general map to an object in an object oriented
          language. Despite their name, <xref linkend="org.osgi.service.dmt.MetaNode.PERMANENT" xrefstyle="hyperlink"/> nodes can appear and disappear, for example
          the plugging in of a USB device might create a new <xref linkend="org.osgi.service.dmt.MetaNode.PERMANENT" xrefstyle="hyperlink"/> node. Generally, the Plugin roots map to
          <xref linkend="org.osgi.service.dmt.MetaNode.PERMANENT" xrefstyle="hyperlink"/> nodes.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.MetaNode.AUTOMATIC" xrefstyle="hyperlink"/> - Automatic nodes map in general to nodes
          that are closely tied to the parent. They are similar to fields of
          an object in an object oriented language. They cannot be deleted or
          added.</para>
        </listitem>
      </itemizedlist>

      <para>For example, a node representing the Battery can never be deleted
      because it is an intrinsic part of the device; it will therefore be
      <xref linkend="org.osgi.service.dmt.MetaNode.PERMANENT" xrefstyle="hyperlink"/>. The <code>Level</code> and number of
      <code>ChargeCycle</code> nodes will be <xref linkend="org.osgi.service.dmt.MetaNode.AUTOMATIC" xrefstyle="hyperlink"/>. A new ring tone is dynamically created by a
      manager and is therefore <xref linkend="org.osgi.service.dmt.MetaNode.DYNAMIC" xrefstyle="hyperlink"/>.</para>
    </section>

    <section>
      <title>Description and Default</title>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.dmt.MetaNode.getDescription--" xrefstyle="hyperlink"/> - (<code>String</code>) A description of the
          node. Descriptions can be used in dialogs with end users: for
          example, a GUI application that allows the user to set the value of
          a node. Localization of these values is not defined.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.MetaNode.getDefault--" xrefstyle="hyperlink"/> - (<code>DmtData</code>) A default data
          value.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Validation</title>

      <para>The validation information allows the runtime system to verify
      constraints on the values; it also allows user interfaces to provide
      guidance.</para>

      <para>A node does not have to exist in the DMT in order to have meta
      data associated with it. Nodes may exist that have only partial meta
      data, or no metadata, associated with them. For each type of metadata,
      the default value to assume when it is omitted is described in <xref linkend="org.osgi.service.dmt.MetaNode" xrefstyle="hyperlink"/>.</para>
    </section>

    <section xml:id="i2955405">
      <title>Data Types</title>

      <para>A leaf node can be constrained to a certain format and one of a
      set of MIME types.</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.dmt.MetaNode.getFormat--" xrefstyle="hyperlink"/> - (<code>int</code>) The required type. This
          type is a logical OR of the supported formats.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.MetaNode.getRawFormatNames--" xrefstyle="hyperlink"/> - Return an array of possible raw format
          names. This is only applicable when the <xref linkend="org.osgi.service.dmt.MetaNode.getFormat--" xrefstyle="hyperlink"/> returns the <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_BINARY" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_STRING" xrefstyle="hyperlink"/> formats. The method must return
          <code>null</code> otherwise.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.MetaNode.getMimeTypes--" xrefstyle="hyperlink"/> - (<code>String[]</code>) A list of MIME
          types for leaf nodes or DDF types for interior nodes. The Dmt Admin
          service must verify that the actual type of the node is part of this
          set.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i2760429">
      <title>Cardinality</title>

      <para>A meta node can constrain the number of
      <emphasis>siblings</emphasis> (i.e., not the number of children) of an
      interior or leaf node. This constraint can be used to verify that a node
      must not be deleted, because there should be at least one node left on
      that level ( <xref linkend="org.osgi.service.dmt.MetaNode.isZeroOccurrenceAllowed--" xrefstyle="hyperlink"/> ), or to verify that a node cannot be created,
      because there are already too many siblings ( <xref linkend="org.osgi.service.dmt.MetaNode.getMaxOccurrence--" xrefstyle="hyperlink"/> ).</para>

      <para>If the cardinality of a meta node is more than one, all siblings
      must share the same meta node to prevent an invalid situation. For
      example, if a node has two children that are described by different meta
      nodes, and any of the meta nodes has a cardinality &gt;1, that situation
      is invalid.</para>

      <para>For example, the <code>./Vendor/RingSignals/&lt;&gt;</code> meta
      node (where &lt;&gt; stands for any name) could specify that there
      should be between 0 and 12 ring signals.</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.dmt.MetaNode.getMaxOccurrence--" xrefstyle="hyperlink"/> - (<code>int</code>) A value greater than 0
          that specifies the maximum number of instances for this node.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.MetaNode.isZeroOccurrenceAllowed--" xrefstyle="hyperlink"/> - (<code>boolean</code>) Returns
          <code>true</code> if zero instances are allowed. If not, the last
          instance must not be deleted.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Matching</title>

      <para>The following methods provide validation capabilities for leaf
      nodes.</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.dmt.MetaNode.isValidValue-DmtData-" xrefstyle="hyperlink"/> - (<code>DmtData</code>) Verify that the
          given value is valid for this meta node.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.MetaNode.getValidValues--" xrefstyle="hyperlink"/> - (<code>DmtData[]</code>) A set of possible
          values for a node, or <code>null</code> otherwise. This can for
          example be used to give a user a set of options to choose
          from.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Numeric Ranges</title>

      <para>Numeric leaf nodes (format must be <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_INTEGER" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_LONG" xrefstyle="hyperlink"/>, or <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_FLOAT" xrefstyle="hyperlink"/> ) can be checked for a minimum and maximum
      value.</para>

      <para>Minimum and maximum values are inclusive. That is, the range is
      <code>[getMin(),getMax()]</code>. For example, if the maximum value is 5
      and the minimum value is -5, then the range is [-5,5]. This means that
      valid values are -5,-4,-3,-2... 4, 5.</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.dmt.MetaNode.getMax--" xrefstyle="hyperlink"/> - (<code>double</code>) The value of the
          node must be less than or equal to this maximum value.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.MetaNode.getMin--" xrefstyle="hyperlink"/> - (<code>double</code>) The value of the
          node must be greater than or equal to this minimum value.</para>
        </listitem>
      </itemizedlist>

      <para>If no meta data is provided for the minimum and maximum values,
      the meta node must return the <code>Double.MIN_VALUE</code>, and
      <code>Double.MAX_VALUE</code> respectively.</para>
    </section>

    <section>
      <title>Name Validation</title>

      <para>The meta node provides the following name validation facilities
      for both leaf and interior nodes:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.dmt.MetaNode.isValidName-String-" xrefstyle="hyperlink"/> - (<code>String</code>) Verifies that the
          given name matches the rules for this meta node.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.MetaNode.getValidNames--" xrefstyle="hyperlink"/> - (<code>String[]</code>) An array of
          possible names. A valid name for this node must appear in this
          list.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>User Extensions</title>

      <para>The Meta Node provides an extension mechanism; each meta node can
      be associated with a number of properties. These properties are then
      interpreted in a proprietary way. The following methods are used for
      user extensions:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.dmt.MetaNode.getExtensionPropertyKeys--" xrefstyle="hyperlink"/> - Returns an array of key names that can be
          provided by this meta node.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.MetaNode.getExtensionProperty-String-" xrefstyle="hyperlink"/> - Returns the value of an extension
          property.</para>
        </listitem>
      </itemizedlist>

      <para>For example, a manufacturer could use a regular expression to
      validate the node names with the <xref linkend="org.osgi.service.dmt.MetaNode.isValidName-String-" xrefstyle="hyperlink"/> method. In a web based user interface it is
      interesting to provide validity checking in the browser, however, in
      such a case the regular expression string is required. This string could
      then be provided as a user extension under the key
      <code>x-acme-regex-javascript</code>.</para>
    </section>
  </section>

  <section>
    <title>Plugins</title>

    <para>The Plugins take the responsibility of handling DMT operations
    within certain sub-trees of the DMT. It is the responsibility of the Dmt
    Admin service to forward the operation requests to the appropriate plugin.
    The only exceptions are the ACL manipulation commands. ACLs must be
    enforced by the Dmt Admin service and never by the plugin. The model is
    depicted in <xref linkend="i2926111"/>.</para>

    <figure pgwide="1" xml:id="i2926111">
      <title>Device Management Tree example</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.024in" contentwidth="5.011in" fileref="plugin-example.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Plugins are OSGi services. The Dmt Admin service must dynamically
    map and unmap the plugins, acting as node handler, as they are registered
    and unregistered. Service properties are used to specify the sub-tree that
    the plugin can manage as well as mount points that it provides to
    <emphasis>Child Plugins</emphasis>; plugins that manage part of the
    Plugin's sub-tree.</para>

    <para>For example, a plugin related to Configuration Admin handles the
    sub-tree which stores configuration data. This sub-tree could start at
    <code>./OSGi/Configuration</code>. When the client wants to add a new
    configuration object to the DMT, it must issue an <code>Add</code>
    operation to the <code>./OSGi/Configuration</code> node. The Dmt Admin
    service then forwards this operation to the configuration plugin. The
    plugin maps the request to one or more method calls on the Configuration
    Admin service. Such a plugin can be a simple proxy to the Configuration
    Admin service, so it can provide a DMT view of the configuration data
    store.</para>

    <para>There are two types of Dmt plugins: <emphasis>data
    plugins</emphasis> and <emphasis>exec plugins</emphasis>. A data plugin is
    responsible for handling the sub-tree retrieval, addition and deletion
    operations, and handling of meta data, while an exec plugin handles a node
    execution operation.</para>

    <section>
      <title>Data Sessions</title>

      <para>Data Plugins must participate in the Dmt Admin service sessions. A
      Data Plugin provider must therefore register a Data Plugin service. Such
      a service can create a session for the Dmt Admin service when the given
      sub-tree is accessed by a Dmt Session. If the associated Dmt Session is
      later closed, the Data Session will also be closed. Three types of
      sessions provide different capabilities. Data Plugins do not have to
      implement all session types; if they choose not to implement a session
      type they can return <code>null</code>.</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Readable Data Session</emphasis> - Must always be
          supported. It provides the basic read-only access to the nodes and
          the <code>close()</code> method. The Dmt Admin service uses this
          session type when the lock mode is <xref linkend="org.osgi.service.dmt.DmtSession.LOCK_TYPE_SHARED" xrefstyle="hyperlink"/> for the Dmt Session. Such a session is
          created with the plugin's <xref linkend="org.osgi.service.dmt.spi.DataPlugin.openReadOnlySession-String---DmtSession-" xrefstyle="hyperlink"/>, method which returns a <xref linkend="org.osgi.service.dmt.spi.ReadableDataSession" xrefstyle="hyperlink"/> object.</para>
        </listitem>

        <listitem>
          <para><emphasis>Read Write Data Session</emphasis> - Extends the
          Readable Data Session with capabilities to modify the DMT. This is
          used for Dmt Sessions that are opened with <xref linkend="org.osgi.service.dmt.DmtSession.LOCK_TYPE_EXCLUSIVE" xrefstyle="hyperlink"/>. Such a session is created with the plugin's
          <xref linkend="org.osgi.service.dmt.spi.DataPlugin.openReadWriteSession-String---DmtSession-" xrefstyle="hyperlink"/> method, which returns a <xref linkend="org.osgi.service.dmt.spi.ReadWriteDataSession" xrefstyle="hyperlink"/> object.</para>
        </listitem>

        <listitem>
          <para><emphasis>Transactional Data Session</emphasis> - Extends the
          Read Write Data Session with commit and rollback methods so that
          this session can be used with transactions. It is used when the Dmt
          Session is opened with lock mode <xref linkend="org.osgi.service.dmt.DmtSession.LOCK_TYPE_ATOMIC" xrefstyle="hyperlink"/>. Such a session is created with the plugin's
          <xref linkend="org.osgi.service.dmt.spi.DataPlugin.openAtomicSession-String---DmtSession-" xrefstyle="hyperlink"/> method, which returns a <xref linkend="org.osgi.service.dmt.spi.TransactionalDataSession" xrefstyle="hyperlink"/> object.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>URIs and Plugins</title>

      <para>The plugin Data Sessions do not use a simple string to identify a
      node as the Dmt Session does. Instead the URI parameter is a
      <code>String[]</code>. The members of this <code>String[]</code> are the
      different segments. The first node after the root is the second segment
      and the node name is the last segment. The different segments require
      escaping of the solidus (<code>'/' \u002F</code>) and reverse solidus
      (<code>'\' \u005C</code>).</para>

      <para>The reason to use <code>String[]</code> objects instead of the
      original string is to reduce the number times that the URI is parsed.
      The entry String objects, however, are still escaped. For example, the
      URI <code>./A/B/image\/jpg</code> gives the following
      <code>String[]</code>:</para>

      <programlisting>{ ".", "A", "B", "image\/jpg" }</programlisting>

      <para>A plugin can assume that the path is validated and can be used
      directly.</para>
    </section>

    <section>
      <title>Associating a sub-tree</title>

      <para>Each plugin is associated with one or more DMT sub-trees. The top
      node of a sub-tree is called the <emphasis>plugin root</emphasis>. The
      plugin root is defined by a service registration property. This property
      is different for exec plugins and data plugins:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.dmt.spi.DataPlugin.DATA_ROOT_URIS" xrefstyle="hyperlink"/> - (<code>String+</code>) A sequence of
          <emphasis>data URI</emphasis>, defining a plugin root for data
          plugins.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.spi.ExecPlugin.EXEC_ROOT_URIS" xrefstyle="hyperlink"/> - (<code>String+</code>) A sequence of
          <emphasis>exec URI</emphasis>, defining a plugin root for exec
          plugins.</para>
        </listitem>
      </itemizedlist>

      <para>If the Plugin modifies these service properties then the Dmt Admin
      service must reflect these changes as soon as possible. The reason for
      the different properties is to allow a single service to register both
      as a Data Plugin service as well as an Exec Plugin service.</para>

      <para>Data and Exec Plugins live in independent trees and can fully
      overlap. However, an Exec Plugin can only execute a node when the there
      exists a valid node at the corresponding node in the Data tree. That is,
      to be able to execute a node it is necessary that <xref linkend="org.osgi.service.dmt.DmtSession.isNodeUri-String-" xrefstyle="hyperlink"/> would return <code>true</code>.</para>

      <para>For example, a data plugin can register itself in its activator to
      handle the sub-tree <code>./Dev/Battery</code>:</para>

      <programlisting>public void start(BundleContext context) {
  Hashtable ht = new Hashtable();
  ht.put(Constants.SERVICE_PID, "com.acme.data.plugin");
  ht.put( DataPlugin.<code>DATA_ROOT_URIS</code>, "./Dev/Battery");
  context.registerService( 
        DataPlugin.class.getName(),
        new BatteryHandler(context);
        ht );
}</programlisting>

      <para>If this activator was executed, an access to
      <code>./Dev/Battery</code> must be forwarded by the Dmt Admin service to
      this plugin via one of the data session.</para>
    </section>

    <section>
      <title>Synchronization with Dmt Admin Service</title>

      <para>The Dmt Admin service can, in certain cases, detect that a node
      was changed without the plugin knowing about this change. For example,
      if the ACL is changed, the version and timestamp must be updated; these
      properties are maintained by the plugin. In these cases, the Dmt Admin
      service must open a <code>ReadableDataSession</code> and call <xref linkend="org.osgi.service.dmt.spi.ReadableDataSession.nodeChanged-String---" xrefstyle="hyperlink"/> method with the changed URI.</para>
    </section>

    <section>
      <title>Plugin Meta Data</title>

      <para>Plugins can provide meta data; meta data from the Plugin must take
      precedence over the meta data of the Dmt Admin service. If a plugin
      provides meta information, the Dmt Admin service must verify that an
      operation is compatible with the meta data of the given node.</para>

      <para>For example if the plugin reports in its meta data that the
      <code>./A</code> leaf node can only have the <code>text/plain</code>
      MIME type, the <xref linkend="org.osgi.service.dmt.DmtSession.createLeafNode-String-" xrefstyle="hyperlink"/> calls must not be forwarded to the Plugin if the
      third argument specifies any other MIME type. If this contract between
      the Dmt Admin service and the plugin is violated, the plugin should
      throw a Dmt Exception <xref linkend="org.osgi.service.dmt.DmtException.METADATA_MISMATCH" xrefstyle="hyperlink"/>.</para>
    </section>

    <section xml:id="i1724768">
      <title>Plugins and Transactions</title>

      <para>For the Dmt Admin service to be transactional, transactions must
      be supported by the data plugins. This support is not mandatory in this
      specification, and therefore the Dmt Admin service has no transactional
      guarantees for atomicity, consistency, isolation or durability. The
      <code>DmtAdmin</code> interface and the <code>DataPlugin</code> (or more
      specifically the data session) interfaces, however, are designed to
      support Data Plugin services that are transactional. Exec plugins need
      not be transaction-aware because the <code>execute</code> method does
      not provide transactional semantics, although it can be executed in an
      atomic transaction.</para>

      <para>Data Plugins do not have to support atomic sessions. When the Dmt
      Admin service creates a Transactional Data Session by calling <xref linkend="org.osgi.service.dmt.spi.DataPlugin.openAtomicSession-String---DmtSession-" xrefstyle="hyperlink"/> the Data Plugin is allowed to return
      <code>null</code>. In that case, the plugin does not support atomic
      sessions. The caller receives a Dmt Exception.</para>

      <para>Plugins must persist any changes immediately for Read Write Data
      Sessions. Transactional Data Sessions must delay changes until the <xref linkend="org.osgi.service.dmt.spi.TransactionalDataSession.commit--" xrefstyle="hyperlink"/> method is called, which can happen multiple
      times during a session. The opening of an atomic session and the <xref linkend="org.osgi.service.dmt.spi.TransactionalDataSession.commit--" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.dmt.spi.TransactionalDataSession.rollback--" xrefstyle="hyperlink"/> methods all establish a <emphasis>transaction
      point</emphasis>. Rollback can never go further back than the last
      transaction point.</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.dmt.spi.TransactionalDataSession.commit--" xrefstyle="hyperlink"/> - Commit any changes that were made to the
          DMT but not yet persisted. This method should not throw an Exception
          because other Plugins already could have persisted their data and
          can no longer roll it back. The <code>commit</code> method can be
          called multiple times in an open session, and if so, the commit must
          make persistent the changes since the last transaction point.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.spi.TransactionalDataSession.rollback--" xrefstyle="hyperlink"/> - Undo any changes made to the sub-tree
          since the last transaction point.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.spi.ReadableDataSession.close--" xrefstyle="hyperlink"/> - Clean up and release any locks. The Dmt
          Admin service must call the <code>commit</code> methods before the
          close method is called. A Plugin must not perform any persistency
          operations in the <code>close</code> method.</para>
        </listitem>
      </itemizedlist>

      <para>The <xref linkend="org.osgi.service.dmt.spi.TransactionalDataSession.commit--" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.spi.TransactionalDataSession.rollback--" xrefstyle="hyperlink"/>, and <xref linkend="org.osgi.service.dmt.spi.ReadableDataSession.close--" xrefstyle="hyperlink"/> plugin data session methods must all be called
      in reverse order of that in which Plugins joined the session.</para>

      <para>If a Plugin throws a fatal exception during an operation, the Dmt
      Session must be rolled back immediately, automatically rolling back all
      data plugins, as well as the plugins that threw the fatal Dmt Exception.
      The fatality of an Exception can be checked with the Dmt Exception <xref linkend="org.osgi.service.dmt.DmtException.isFatal--" xrefstyle="hyperlink"/> method.</para>

      <para>If a plugin throws a non-fatal exception in any method accessing
      the DMT, the current operation fails, but the session remains open for
      further commands. All errors due to invalid parameters (e.g.
      non-existing nodes, unrecognized values), all temporary errors, etc.
      should fall into this category.</para>

      <para>A rollback of the transaction can take place due to any
      irregularity during the session. For example:</para>

      <itemizedlist>
        <listitem>
          <para>A necessary Plugin is unregistered or unmapped</para>
        </listitem>

        <listitem>
          <para>A fatal exception is thrown while calling a plugin</para>
        </listitem>

        <listitem>
          <para>Critical data is not available</para>
        </listitem>

        <listitem>
          <para>An attempt is made to breach the security</para>
        </listitem>
      </itemizedlist>

      <para>Any Exception thrown during the course of a <xref linkend="org.osgi.service.dmt.spi.TransactionalDataSession.commit--" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.dmt.spi.TransactionalDataSession.rollback--" xrefstyle="hyperlink"/> method call is considered fatal, because the
      session can be in a half-committed state and is not safe for further
      use. The operation in progress should be continued with the remaining
      Plugins to achieve a <emphasis>best-effort</emphasis> solution in this
      limited transactional model. Once all plugins have been committed or
      rolled back, the Dmt Admin service must throw an exception, specifying
      the cause exception(s) thrown by the plugin(s), and should log an
      error.</para>
    </section>

    <section>
      <title>Side Effects</title>

      <para>Changing a node's value will have a side effect of changing the
      system. A plugin can also, however, cause state changes with a get
      operation. Sometimes the pattern to use a get operation to perform a
      state changing action can be quite convenient. The get operation,
      however, is defined to have no side effects. This definition is
      reflected in the session model, which allows the DMT to be shared among
      readers. Therefore, plugins should refrain from causing side effects for
      read-only operations.</para>
    </section>

    <section>
      <title>Copying</title>

      <para>Plugins do not have to support the copy operation. They can throw
      a Dmt Exception with a code <code>FEATURE_NOT_SUPPORTED</code>. In this
      case, the Dmt Admin service must do the copying node by node. For the
      clients of the Dmt Admin service, it therefore appears that the
      <code>copy</code> method is always supported.</para>
    </section>

    <section xml:id="i2931854">
      <title>Scaffold Nodes</title>

      <para>As Plugins can be mapped anywhere into the DMT it is possible that
      a part of the URI has no corresponding Plugin, such a plugin would not
      be <emphasis>reachable</emphasis> unless the intermediate nodes were
      provided. A program that would try to discover the DMT would not be able
      to find the registered Plugins as the intermediate nodes would not be
      discoverable.</para>

      <para>These intermediate nodes that will make all plugins reachable must
      therefore be provided by the Dmt Admin service, they are called the
      <emphasis>scaffold nodes</emphasis>. The only purpose of the scaffold
      nodes is to allow every node to be discovered when the DMT is traversed
      from the root down. Scaffold nodes are provided both for Data Plugins as
      well as Exec Plugins as well as for Child Plugins that are mounted
      inside a Parent Plugin, see <xref linkend="i2538366"/>. In <xref linkend="i2931861"/> the <code>Device</code> node is a scaffold node
      because there is no plugin associated with it. The Dmt Admin service
      must, however, provide the <code>Battery</code> node as child node of
      the <code>Device</code> node.</para>

      <figure xml:id="i2931861">
        <title>Scaffold Nodes</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.681in" contentwidth="6.274in" fileref="scaffold-nodes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>A scaffold node is always an interior node and has limited
      functionality, it must have a type of <xref linkend="org.osgi.service.dmt.DmtConstants.DDF_SCAFFOLD" xrefstyle="hyperlink"/>. It has no value, it is impossible to add or
      delete nodes to it, and the methods that are allowed for a scaffold node
      are specified in the following table.</para>

      <table>
        <title>Supported Scaffold Node Methods</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="2*"/>

          <thead>
            <row>
              <entry>Method</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.DmtSession.getNodeAcl-String-" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Must inherit from the root node.</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.DmtSession.getChildNodeNames-String-" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Answer the child node names such that plugin's in
              the sub-tree are reachable.</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.DmtSession.getMetaNode-String-" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Provides the Meta Node defined in <xref linkend="service.dmt-scaffold.metanode.methods"/></para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.DmtSession.getNodeSize-String-" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Must throw a <xref linkend="org.osgi.service.dmt.DmtException" xrefstyle="hyperlink"/> <xref linkend="org.osgi.service.dmt.DmtException.COMMAND_NOT_ALLOWED" xrefstyle="hyperlink"/></para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.DmtSession.getNodeTitle-String-" xrefstyle="hyperlink"/></para></entry>

              <entry><para><code>null</code></para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.DmtSession.getNodeTimestamp-String-" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Time first created</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.DmtSession.getNodeType-String-" xrefstyle="hyperlink"/></para></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtConstants.DDF_SCAFFOLD" xrefstyle="hyperlink"/></para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.DmtSession.isNodeUri-String-" xrefstyle="hyperlink"/></para></entry>

              <entry><code>true</code></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.DmtSession.isLeafNode-String-" xrefstyle="hyperlink"/></para></entry>

              <entry><code>false</code></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.DmtSession.getNodeVersion-String-" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Away returns <code>0</code></para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.DmtSession.copy-String-String-boolean-" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Not allowed for a single scaffold node as
              <code>nodeUri</code>, if the <code>recurse</code> parameter is
              <code>false</code> the <xref linkend="org.osgi.service.dmt.DmtException" xrefstyle="hyperlink"/> <xref linkend="org.osgi.service.dmt.DmtException.COMMAND_NOT_ALLOWED" xrefstyle="hyperlink"/></para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Any other operations must throw a <xref linkend="org.osgi.service.dmt.DmtException" xrefstyle="hyperlink"/> with
      error code <xref linkend="org.osgi.service.dmt.DmtException.COMMAND_NOT_ALLOWED" xrefstyle="hyperlink"/>. The scope of a scaffold node is always
      <code>PERMANENT</code>. Scaffold nodes must have a Meta Node provided by
      the Dmt Admin service. This Meta Node must act as defined in the
      following table.</para>

      <table xml:id="service.dmt-scaffold.metanode.methods">
        <title>Scaffold Meta Node Supported Methods</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="2*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>Method</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.can-int-" xrefstyle="hyperlink"/></para></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.CMD_GET" xrefstyle="hyperlink"/></para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.getDefault--" xrefstyle="hyperlink"/></para></entry>

              <entry><code>null</code></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.getDescription--" xrefstyle="hyperlink"/></para></entry>

              <entry><code>null</code></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.getFormat--" xrefstyle="hyperlink"/></para></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_NODE" xrefstyle="hyperlink"/></para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.getMax--" xrefstyle="hyperlink"/></para></entry>

              <entry><para><code>Double.MAX_VALUE</code></para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.getMaxOccurrence--" xrefstyle="hyperlink"/></para></entry>

              <entry><para><code>1</code></para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.getMimeTypes--" xrefstyle="hyperlink"/></para></entry>

              <entry><xref linkend="org.osgi.service.dmt.DmtConstants.DDF_SCAFFOLD" xrefstyle="hyperlink"/></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.getMin--" xrefstyle="hyperlink"/></para></entry>

              <entry><para><code>Double.MIN_VALUE</code></para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.getRawFormatNames--" xrefstyle="hyperlink"/></para></entry>

              <entry><para><code>null</code></para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.getScope--" xrefstyle="hyperlink"/></para></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.PERMANENT" xrefstyle="hyperlink"/></para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.getValidNames--" xrefstyle="hyperlink"/></para></entry>

              <entry><code>null</code></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.getValidValues--" xrefstyle="hyperlink"/></para></entry>

              <entry><code>null</code></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.isLeaf--" xrefstyle="hyperlink"/></para></entry>

              <entry><code>false</code></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.isValidName-String-" xrefstyle="hyperlink"/></para></entry>

              <entry><code>true</code></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.isValidValue-DmtData-" xrefstyle="hyperlink"/></para></entry>

              <entry><code>false</code></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.isZeroOccurrenceAllowed--" xrefstyle="hyperlink"/></para></entry>

              <entry><code>true</code></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>If a Plugin is registered then it is possible that a scaffold node
      becomes a Data Plugin root node. In that case the node and the Meta Node
      must subsequently be provided by the Data Plugin and can thus become
      different. Scaffold nodes are virtual, there are therefore no events
      associated with the life cycle of a scaffold node.</para>

      <para>For example, there are three plugins registered:</para>

      <programlisting>URI         Plugin  Children
./A/B       P1      ba
./A/C       P2      ca
./A/X/Y     P3      ya,yb</programlisting>

      <para>In this example, node <code>B</code>, <code>C</code>, and
      <code>Y</code> are the plugin roots of the different plugins. As there
      is no plugin the manage node <code>A</code> and <code>X</code> these
      must be provided by the Dmt Admin service. In this example, the child
      names returned from each node are summarized as follows:</para>

      <programlisting>Node        Children        Provided by
.           { A }           Dmt Admin (scaffold node)
A           { X, C, B }     Dmt Admin (scaffold node)
B           { ba }          P1
C           { ca }          P2
X           { Y  }          Dmt Admin (scaffold node)
Y           { ya, yb }      P3</programlisting>

      <figure>
        <title>Example Scaffold Nodes</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.884in" contentwidth="6.248in" fileref="scaffold-nodes-example.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section xml:id="i2538366">
    <title>Sharing the DMT</title>

    <para>The Dmt Admin service provides a model to integrate the management
    of the myriad of components that make up an OSGi device. This integration
    is achieved by sharing a single namespace: the DMT. Sharing a single
    namespace requires rules to prevent conflicts and to resolve any conflicts
    when Plugins register with plugin roots that overlap. It also requires
    rules for the Dmt Admin service when nodes are accessed for which there is
    no Plugin available.</para>

    <para>This section defines the management of overlapping plugins through
    the <emphasis>mount points</emphasis>, places where a Parent Plugin can
    allow a Child Plugin to take over.</para>

    <section xml:id="i2955614">
      <title>Mount Points</title>

      <para>With multiple plugins the DMT is a <emphasis>shared
      namespace</emphasis>. Sharing requires rules to ensure that conflicts
      are avoided and when they occur, can be resolved in a consistent way.
      The most powerful and flexible model is to allow general overlapping.
      However, in practice this flexibility comes at the cost of ordering
      issues and therefore timing dependent results. A best practice is
      therefore to strictly control the points where the DMT can be extended
      for both Data and Exec Plugins.</para>

      <para>A <emphasis>mount point</emphasis> is such a place. A Dmt Admin
      service at start up provides virtual mount points anywhere in the DMT
      and provides scaffold nodes for any intermediate nodes between the root
      of the DMT and the Plugin's root URI. Once a Plugin is mounted it is
      free to use its sub-tree (the plugin root and any ancestors) as it sees
      fit. However, this implies that the Plugin must implement the full
      sub-tree. In reality, many object models use a pattern where the
      different levels in the object model map to different domains.</para>

      <para>For example, an Internet Gateway could have an object model where
      the general information, like the name, vendor, etc. is stored in the
      first level but any attached interfaces are stored in the sub-tree.
      However, It is highly unlikely that the code that handles the first
      level with the general information is actually capable of handling the
      details of, for example, the different network interfaces. It is
      actually likely that these network interfaces are dynamic. A Virtual
      Private Network (VPN) can add virtual network interfaces on demand. Such
      a could have the object model depicted in <xref linkend="i2473404"/>.</para>

      <figure xml:id="i2473404">
        <title>Data Modeling</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.745in" contentwidth="6.199in" fileref="data-modeling.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Forcing these different levels to be implemented by the same
      plugin violates one of the primary rules of modularity:
      <emphasis>cohesion</emphasis>. Plugins forced to handle all aspects
      become complex and hard to maintain. A Plugin like the one managing the
      <code>Gateway</code> node could provide its own Plugin mechanism but
      that would force a lot of replication and is error prone. For this
      reason, the Dmt Admin service allows a Plugin to provide <emphasis>mount
      points</emphasis> inside its sub-tree. A Plugin can specify that it has
      mount points by registering a <xref linkend="org.osgi.service.dmt.spi.DataPlugin.MOUNT_POINTS" xrefstyle="hyperlink"/> service property (the constant is defined both
      in <xref linkend="org.osgi.service.dmt.spi.DataPlugin" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.dmt.spi.ExecPlugin" xrefstyle="hyperlink"/>
      but have the same constant value). The type of this property must be
      <code>String+</code>, each string specifies a mount point. Each mount
      point is specified as a URI that is relative from the plugin root. That
      is, when the plugin root is <code>./A/B</code> and the mount point is
      specified as <code>C</code> then the absolute URI of the mount point is
      <code>./A/B/C</code>.</para>

      <para>A Plugin that has mount points acts as a <emphasis>Parent
      Plugin</emphasis> to a number of <emphasis>Child Plugins</emphasis>. In
      the previous example, the LAN, VPN, and WAN nodes, can then be provided
      by separate Child Plugins even though the <code>Gateway/Name</code> node
      is provided by the Parent Plugin. In this case, the mount points are
      children of the <code>Interface</code> node.</para>

      <para>A mount point can be used by a number of child plugins. In the
      previous example, there was a Child Plugin for the LAN node, the VPN
      node, and the WAN node. This model has the implicit problem that it
      requires coordination to ensure that their names are unique. Such a
      coordination between independent parties is complicated and error prone.
      Its is therefore possible to force the Dmt Admin service to provide
      unique names for these nodes, see <xref linkend="i2489028"/>.</para>

      <para>A Parent Plugin is not responsible for any scaffolding nodes to
      make its Child Plugins reachable. However, Dmt Admin may assume that a
      Plugin Root node always exists and may not provide a scaffold node on
      the Plugin Root. A Plugin is recommended to always provide the Plugin
      Root node to make its Child Plugins reachable. When a Parent Plugin
      provides the nodes to its mount points, the nodes should be the correct
      interior nodes to make its Child Plugins reachable.</para>

      <para>For example, the following setup of plugins:</para>

      <programlisting>Plugin      Plugin Root     Mount Points
P1          ./A             X/B
P2          ./A/X/B     </programlisting>

      <para>This setup is depicted in <xref linkend="i2842643"/>.</para>

      <figure xml:id="i2842643">
        <title>Example Scaffold Nodes For Child Plugin</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.923in" contentwidth="6.248in" fileref="scaffold-nodes-child-plugin.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>If the child node names are requested for the <code>./A</code>
      node then the plugin P1 is asked for the child node names and must
      return the names [<code>f,g]</code>. However, if plugin P2 is mapped
      then the Dmt Admin service must add the scaffold node name that makes
      this plugin reachable from that level, the returned set must therefore
      be <code>[f, g, X]</code>.</para>
    </section>

    <section>
      <title>Parent Plugin</title>

      <para>If a Plugin is registered with mount points then it is a
      <emphasis>Parent Plugin</emphasis>. A Parent Plugin must register with a
      single plugin root URI, that is the <xref linkend="org.osgi.service.dmt.spi.DataPlugin.DATA_ROOT_URIS" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.dmt.spi.ExecPlugin.EXEC_ROOT_URIS" xrefstyle="hyperlink"/> service properties must contain only one
      element. A Parent Plugin is allowed to be a Data and Exec Plugin at the
      same time. If a Parent Plugin is registered with multiple plugin root
      URIs then the Dmt Admin service must log an error and ignore the
      registration of such a Parent Plugin. A Parent Plugin can in itself also
      be a Child Plugin.</para>

      <para>For example, a Plugin <code>P1</code> that has a plugin root of
      <code>./A/B</code> and provides a mount point at <code>./A/B/C</code>
      and <code>./A/B/E/F</code>. as depicted in <xref linkend="i2475982"/>.</para>

      <figure xml:id="i2475982">
        <title>Example Mount Points</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.942in" contentwidth="6.297in" fileref="mount-point-examples.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Registering such a Plugin would have to register the following
      service properties to allow the example configuration of the DMT:</para>

      <programlisting>dataRootUris    ./A/B
mountPoints     [ C, E/F ]</programlisting>
    </section>

    <section xml:id="i2489028">
      <title>Shared Mount Points</title>

      <para>Mount points can be shared between different Plugins. In the
      earlier example about the Gateway the <code>Interface</code> node
      contained a sub-tree of network interfaces. It is very likely in such an
      example that the Plugins for the VPN interface will be provided by a
      different organization than the WAN and LAN network interfaces. However,
      all these network interface plugins must share a single parent node, the
      <code>Interface</code> node, under which they would have to mount.
      Sharing therefore requires a prior agreement and a naming scheme.</para>

      <para>The naming scheme is defined by using the number sign (<code>'#'
      \u0023</code>) to specify a <emphasis>shared mount point</emphasis>. A
      plugin root that ends with the number sign, for example
      <code>./A/B/#</code>, indicates that it is willing to get any node under
      node <code>B</code>, leaving the naming of that node up to the Dmt Admin
      service. Shared mount points cannot overlap with normal mount points,
      the first one will become mapped and subsequent ones are in error, they
      are incompatible with each other. A Parent Plugin must specify a mount
      point explicitly as a shared mount point by using the number sign at the
      end of the mount point's relative URI.</para>

      <para>A plugin is compatible with other plugins if all other plugins
      specify a shared mount point to the same URI. It is compatible with its
      Parent Plugin if the child's plugin root and the mount point are either
      shared or not.</para>

      <para>The Dmt Admin service must provide a name for a plugin root that
      identifies a shared mount point such that every Plugin on that mount
      point has a unique integer name for that node level. The integer name
      must be &gt;= 1. The name must be convertible to an <code>int</code>
      with the static <code>Integer</code> <code>parseInt(String)</code>
      method.</para>

      <para>A management system in general requires permanent links to nodes.
      It is therefore necessary to choose the same integer every time a plugin
      is mapped to a shared mount point. A Child Plugin on a shared mount
      point must therefore get a permanent integer node name when it registers
      with a Persistent ID (PID). That is, it registers with the service
      property <code>service.pid</code>. The permanent link is then coupled to
      the PID and the bundle id since different bundles must be able to use
      the same PID. If a Plugin is registered with multiple PIDs then the
      first one must be used. Since permanent links can stay around for a long
      time implementations must strive to not reuse these integer
      names.</para>

      <para>If no <code>PID</code> is provided then the Dmt Admin service must
      choose a new number that has not been used yet nor matches any
      persistently stored names that are currently not registered.</para>

      <para>The Gateway example would require the following Plugin
      registrations:</para>

      <programlisting>Root URI                Mount Points    Plugin      Role
./Gateway               [Interface/#]   Gateway     Parent
./Gateway/Interface/#   []              WAN If.     Child
./Gateway/Interface/#   []              LAN If.     Child
./Gateway/Interface/#   []              VPN.1       Child</programlisting>

      <para>This setup is depicted in <xref linkend="i2673396"/>.</para>

      <figure xml:id="i2673396">
        <title>Mount Point Sharing</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.921in" contentwidth="5.011in" fileref="mount-point-sharing.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The Meta Node for a Node on the level of the Mount Point can
      specify either an existing Plugin or it can refer to a non-existing
      node. If the node exists, the corresponding Plugin must provide the Meta
      Node. If the node does not exist, the Dmt Admin service must provide the
      Meta Node. Such a Meta Node must provide the responses as specified in
      <xref linkend="service.dmt-scaffold.metanode.methods"/>.</para>

      <table>
        <title>Shared Mount Point Meta Node Supported Methods</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="2*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>Method</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.can-int-" xrefstyle="hyperlink"/></para></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.CMD_GET" xrefstyle="hyperlink"/></para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.getDefault--" xrefstyle="hyperlink"/></para></entry>

              <entry><code>null</code></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.getDescription--" xrefstyle="hyperlink"/></para></entry>

              <entry><code>null</code></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.getFormat--" xrefstyle="hyperlink"/></para></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_NODE" xrefstyle="hyperlink"/></para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.getMax--" xrefstyle="hyperlink"/></para></entry>

              <entry><para><code>Double.MAX_VALUE</code></para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.getMaxOccurrence--" xrefstyle="hyperlink"/></para></entry>

              <entry><code>Integer.MAX_VALUE</code></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.getMimeTypes--" xrefstyle="hyperlink"/></para></entry>

              <entry><code>null</code></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.getMin--" xrefstyle="hyperlink"/></para></entry>

              <entry><para><code>Double.MIN_VALUE</code></para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.getRawFormatNames--" xrefstyle="hyperlink"/></para></entry>

              <entry><para><code>null</code></para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.getScope--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The scope will depend on the Parent</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.getValidNames--" xrefstyle="hyperlink"/></para></entry>

              <entry><code>null</code></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.getValidValues--" xrefstyle="hyperlink"/></para></entry>

              <entry><code>null</code></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.isLeaf--" xrefstyle="hyperlink"/></para></entry>

              <entry><code>false</code></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.isValidName-String-" xrefstyle="hyperlink"/></para></entry>

              <entry>name &gt;=1 &amp;&amp; name &lt;
              <code>Integer.MAX_VALUE</code></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.isValidValue-DmtData-" xrefstyle="hyperlink"/></para></entry>

              <entry><code>false</code></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.dmt.MetaNode.isZeroOccurrenceAllowed--" xrefstyle="hyperlink"/></para></entry>

              <entry><code>true</code></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>A URI can cross multiple mount points, shared and unshared. For
      example, if a network interface could be associated with a number of
      firewall rules then it is possible to register a URI on the designated
      network interface that refers to the Firewall rules. For the previous
      example, a Plugin could register a Firewall if the following
      registrations were done:</para>

      <programlisting>Root URI                    Mount Points    Plugin  Parent  Name    
./Gateway                   [Interface/#]   Gw              
./Gateway/Interface/#       [Fw/#]          WAN If. Gw      11
./Gateway/Interface/#       []              LAN If. Gw      33
./Gateway/Interface/#       []              VPN.1   Gw      42
./Gateway/Interface/11/Fw/# []              Fw.1    WAN If. 97</programlisting>

      <para>This example DMT is depicted in <xref linkend="i2673550"/>.</para>

      <figure xml:id="i2673550">
        <title>Mount Point Multiple Sharing</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.458in" contentwidth="5.011in" fileref="mount-point-multiple-sharing.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Mount Points are Excluded</title>

      <para>Mount nodes are logically not included in the sub-tree of a
      Plugin. The Dmt Admin service must never ask any information from/about
      a Mount Point node to its Parent Plugin. A Parent Plugin must also not
      return the name of a mount point in the list of child node names, the
      Mount Point and its subtree is logically excluded from the sub-tree. For
      the Dmt Admin service an unoccupied mount point is a node that does not
      exist. Its name, must only be discoverable if a Plugin has actually
      mounted the node. The Dmt Admin service must ensure that the names of
      the mounted Plugins are included for that level.</para>

      <para>In the case of shared mount points the Dmt Admin service must
      provide the children names of all registered Child Plugins that share
      that node level.</para>

      <para>For example, a Plugin <code>P1</code> registered with the plugin
      root of <code>./A/B</code>, having two leaf nodes <code>E</code>, and a
      mount point <code>C</code> must not return the name <code>C</code> when
      the child node names for node <code>B</code> are requested. This is
      depicted in <xref linkend="i2488828"/>. The Dmt Admin service must
      ensure that <code>C</code> is returned in the list of names when a
      Plugin is mounted on that node.</para>

      <figure xml:id="i2488828">
        <title>Example Exclusion</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.693in" contentwidth="6.297in" fileref="exclusion-example.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section xml:id="i2498904">
      <title>Mapping a Plugin</title>

      <para>A Plugin is not stand alone, its validity can depend on other
      Plugins. Invalid states make it possible that a Plugin is either
      <emphasis>mapped</emphasis> or <emphasis>unmapped</emphasis>. When a
      Plugin is mapped it is available in the DMT and when it is unmapped it
      is not available. Any registration, unregistration, or modification of
      its services properties of a Plugin can potentially alter the mapped
      state of any related Plugin. A plugin becomes
      <emphasis>eligible</emphasis> for mapping when it is registered.</para>

      <para>A plugin can have multiple roots. However, the mapping is
      described as if there is a single plugin root. Plugins with multiple
      roots must be treated as multiple plugins that can each independently be
      mapped or unmapped depending on the context.</para>

      <para>If no Parent Plugin is available, the Dmt Admin service must act
      as a virtual Parent Plugin that allows mount points anywhere in the tree
      where there is no mapped plugin yet.</para>

      <para>When a Plugin becomes eligible then the following assertions must
      be valid for that Plugin to become mapped:</para>

      <itemizedlist>
        <listitem>
          <para>If it has one or more mount points then</para>

          <itemizedlist>
            <listitem>
              <para>It must have at most one Data and/or Exec Root URI.</para>
            </listitem>

            <listitem>
              <para>None of its mount points must overlap.</para>
            </listitem>

            <listitem>
              <para>Any already mapped Child Plugins must be compatible with
              its mount points.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>If no mount points are specified then there must be no Child
          Plugins already registered.</para>
        </listitem>

        <listitem>
          <para>The plugin root must be compatible with the corresponding
          parent's mount point. When a Parent Plugin is available, the plugin
          root must match exactly to the absolute URI of the parent's mount
          point.</para>
        </listitem>

        <listitem>
          <para>The plugin root must be compatible with any other plugins on
          that mount point.</para>
        </listitem>
      </itemizedlist>

      <para>If either of these assertions fail then the Dmt Admin service must
      log an error and ignore the registered Plugin, it must not become
      mapped. If, through the unregistration or modification of the service
      properties, the assertions can become valid then the Dmt Admin service
      must retry mapping the Plugin so that it can become available in the
      DMT. Any mappings and unmappings that affect nodes that are in the
      sub-tree of an active session must abort that session with a <xref linkend="org.osgi.service.dmt.DmtException.CONCURRENT_ACCESS" xrefstyle="hyperlink"/> exception.</para>

      <para>When there are errors in the configuration then the ordering will
      define which plugins are mapped or not. Since this is an error situation
      no ordering is defined between conflicting plugins.</para>

      <para>For example, a number of Plugins are registered in the given
      order:</para>

      <programlisting>Plugin Root     Children    Mount Points    Plugin
./A/B           E           C               P1
./A/B/C                                     P2
./A/B/D                                     P3</programlisting>

      <para>The first Plugin <code>P1</code> will be registered immediately
      without problems. It has only a single plugin root as required by the
      fact that it is a Parent Plugin (it has a mount point). There are no
      Child Plugins yet so it is impossible to have a violation of the mount
      points. As there is no Parent Plugin registered, the Dmt Admin service
      will map plugin <code>P1</code> and automatically provide the scaffold
      node <code>A</code>.</para>

      <para>When Plugin <code>P2</code> is registered its plugin root maps to
      a mount point in Plugin <code>P1</code>. As <code>P2</code> is not a
      Parent Plugin it is only necessary that it has no Child Plugins. As it
      has no Child Plugins, the mapping will succeed.</para>

      <para>Plugin <code>P3</code> cannot be mapped because the Parent Plugin
      is <code>P1</code> but <code>P1</code> does not provide a mount point
      for <code>P3</code>'s plugin root <code>./A/B/D</code>.</para>

      <para>If, at a later time P1 is unregistered then the Dmt Admin service
      must map plugin <code>P3</code> and leave plugin <code>P2</code> mapped.
      This sequence of action is depicted in <xref linkend="i2743587"/>.</para>

      <para>If plugin <code>P1</code> becomes registered again at a later time
      it can then in its turn not be mapped as there would be a child plugin
      (<code>P3</code>) that would not map to its mount point.</para>

      <figure xml:id="i2743587">
        <title>Plugin Activation</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.246in" contentwidth="6.297in" fileref="plugin-activation.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section xml:id="i2743673">
      <title>Mount Plugins</title>

      <para>In <xref linkend="i2498904"/> it is specified that a Plugin can be
      <emphasis>mapped</emphasis> or not. The mapped state of a Plugin can
      change depending on other plugins that are registered and unregistered.
      Plugins require in certain cases to know:</para>

      <itemizedlist>
        <listitem>
          <para>What is the name of their root node if they mount on a shared
          mount point.</para>
        </listitem>

        <listitem>
          <para>What is the mapping state of the Plugin.</para>
        </listitem>
      </itemizedlist>

      <para>To find out these details a Plugin can implement the <xref linkend="org.osgi.service.dmt.spi.MountPlugin" xrefstyle="hyperlink"/>
      interface; this is a mixin interface, it is not necessary to register it
      as <xref linkend="org.osgi.service.dmt.spi.MountPlugin" xrefstyle="hyperlink"/> service. The Dmt Admin service must do an
      <code>instanceof</code> operation on Data Plugin services and Exec
      Plugin services to detect if they are interested in the mount point
      information.</para>

      <para>The Mount Point interface is used by the Dmt Admin service to
      notify the Plugin when it becomes mapped and when it becomes unmapped.
      The Plugin will be informed about each plugin root separately.</para>

      <para>The Mount Plugin specifies the following methods that are called
      synchronously:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.dmt.spi.MountPlugin.mountPointAdded-MountPoint-" xrefstyle="hyperlink"/> - The Dmt Admin service must call this
          method after it has mapped a plugin root. From this point on the
          given mount point provides the actual path until the <xref linkend="org.osgi.service.dmt.spi.MountPlugin.mountPointRemoved-MountPoint-" xrefstyle="hyperlink"/> is called with an equal object. The given
          Mount Point can be used to post events.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.spi.MountPlugin.mountPointRemoved-MountPoint-" xrefstyle="hyperlink"/> - The Dmt Admin service must call this
          method after it has unmapped the given mount point. This method must
          always be called when a plugin root is unmapped, even if this is
          caused by the unregistration of the plugin.</para>
        </listitem>
      </itemizedlist>

      <para>As the mapping and unmapping of a plugin root can happen any
      moment in time a Plugin that implements the Mount Plugin interface must
      be prepared to handle these events at any time on any thread.</para>

      <para>The <xref linkend="org.osgi.service.dmt.spi.MountPoint" xrefstyle="hyperlink"/> interface has two separate
      responsibilities:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Path</emphasis> - The path that this Mount Point is
          associated with. This path is a plugin root of the plugin. This path
          is identical to the Plugin's root except when it is mounted on a
          shared mount point; in that case the URI ends in the name chosen by
          the Dmt Admin service. The <xref linkend="org.osgi.service.dmt.spi.MountPoint.getMountPath--" xrefstyle="hyperlink"/> method provides the path.</para>
        </listitem>

        <listitem>
          <para><emphasis>Events</emphasis> - Post events about the given
          sub-tree that signal internal changes that occur outside a Dmt
          Session. The Dmt Admin service must treat these events as they were
          originated from modifications to the DMT. That is, they need to be
          forwarded to the Event Admin as well as the Dmt Listeners. For this
          purpose there are the <xref linkend="org.osgi.service.dmt.spi.MountPoint.postEvent-String-String---Dictionary-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.dmt.spi.MountPoint.postEvent-String-String---String---Dictionary-" xrefstyle="hyperlink"/> methods.</para>
        </listitem>
      </itemizedlist>

      <para>For example, a Data Plugin monitoring one of the batteries
      registers with the following service properties:</para>

      <programlisting>dataRootURIs                "./Device/Battery/#"</programlisting>

      <para>The <code>Device</code> node is from a Parent Plugin that provided
      the shared mount point. The Battery Plugin implements the <xref linkend="org.osgi.service.dmt.spi.MountPlugin" xrefstyle="hyperlink"/>
      interface so it gets called back when it is mapped. This will cause the
      Dmt Admin service to call the <xref linkend="org.osgi.service.dmt.spi.MountPlugin.mountPointAdded-MountPoint-" xrefstyle="hyperlink"/> method on the plugin. In this case, it will get
      just one mount point, the mount point for its plugin root. If the Dmt
      Admin service would have assigned the Battery Plugin number 101 then the
      <xref linkend="org.osgi.service.dmt.spi.MountPoint.getMountPath--" xrefstyle="hyperlink"/> would return:</para>

      <programlisting>[ ".", "Device", "Battery", "101" ]</programlisting>

      <para>As the Plugin monitors the charge state of the battery it can
      detect a significant change. In that case it must send an event to
      notify any observers. The following code shows how this could be
      done:</para>

      <programlisting>@Component( properties="dataRootURIs=./Device/Battery/#",
                provide=DataPlugin.class)
public class Battery implements DataPlugin, MountPlugin {
    Timer          timer;
    volatile float charge;
    TimerTask      task;

    public void mountPointsAdded(final MountPoint[] mountPoints){
        task = new TimerTask() {
            public void run() {
                float next = measure();
                if (Math.abs(charge - next) &gt; 0.2) {
                    charge = next;
                    mountPoints[0].postEvent(DmtConstants.EVENT_TOPIC_REPLACED,
                        new String[] { "Charge" }, null);
                }
            }
        };
        timer.schedule(task, 1000);
    }

    public void mountPointsRemoved(MountPoint[] mountPoints){
            task.cancel();
            task = null;
    }
    ... // Other methods
}</programlisting>
    </section>
  </section>

  <section>
    <title>Access Control Lists</title>

    <para>Each node in the DMT can be protected with an <emphasis>access
    control list</emphasis>, or <emphasis>ACL</emphasis>. An ACL is a list of
    associations between <emphasis>Principal</emphasis> and
    <emphasis>Operation</emphasis>:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Principal</emphasis> - The identity that is authorized
        to use the associated operations. Special principal is the wildcard
        (<code>'*' \u002A</code>); the operations granted to this principal
        are called the <emphasis>global permissions</emphasis>. The global
        permissions are available to all principals.</para>
      </listitem>

      <listitem>
        <para><emphasis>Operation</emphasis> - A list of operations:
        <code>ADD, DELETE, GET, REPLACE, EXECUTE</code>.</para>
      </listitem>
    </itemizedlist>

    <para>DMT ACLs are defined as strings with an internal syntax in <xref linkend="i2165260"/>. Instances of the ACL class can be created by
    supplying a valid OMA DM ACL string as its parameter. The syntax of the
    ACL is presented here in shortened form for convenience:</para>

    <programlisting>acl         ::= ( acl-entry ( '&amp;' acl-entry)* )
acl-entry   ::= command '=' ( principals | '*' )
principals  ::= principal ( '+' principal )*
principal   ::= ~['=' '&amp;' '*' '+' '\t' '\n' '\r']+</programlisting>

    <para>The principal name should only use printable characters according to
    the OMA DM specification.</para>

    <programlisting>command     ::= 'Add' | 'Delete' | 'Exec'| 'Get' | 'Replace'</programlisting>

    <para>White space between tokens is not allowed.</para>

    <para>Examples:</para>

    <programlisting>Add=*&amp;Replace=*&amp;Get=*

Add=www.sonera.fi-8765&amp;Delete=www.sonera.fi-8765&amp; «
Replace=www.sonera.fi-8765+321_ibm.com&amp;Get=*</programlisting>

    <para>The <xref linkend="org.osgi.service.dmt.Acl.Acl-String-" xrefstyle="hyperlink"/> constructor can be used to construct an ACL from
    an ACL string. The <xref linkend="org.osgi.service.dmt.Acl.toString--" xrefstyle="hyperlink"/> method returns a <code>String</code> object that
    is formatted in the specified form, also called the canonical form. In
    this form, the principals must be sorted alphabetically and the order of
    the commands is:</para>

    <programlisting> ADD,   DELETE,   EXEC,   GET,   REPLACE</programlisting>

    <para>The <code>Acl</code> class is immutable, meaning that a
    <code>Acl</code> object can be treated like a string, and that the object
    cannot be changed after it has been created.</para>

    <para>ACLs must only be verified by the Dmt Admin service when the session
    has an associated principal.</para>

    <para>ACLs are properties of nodes. If an ACL is <emphasis>not set
    </emphasis>(i.e. contains no commands nor principals), the
    <emphasis>effective</emphasis> ACL of that node must be the ACL of its
    first ancestor that has a non-empty ACL. This effective ACL can be
    acquired with the <xref linkend="org.osgi.service.dmt.DmtSession.getEffectiveNodeAcl-String-" xrefstyle="hyperlink"/> method. The root node of DMT must always have an
    ACL associated with it. If this ACL is not explicitly set, it should be
    set to <code>Add=*&amp;Get=*&amp;Replace=*</code>.</para>

    <para>This effect is shown in <xref linkend="i1547055"/>. This diagram
    shows the ACLs set on a node and their effect (which is shown by the
    shaded rectangles). Any principal can get the value of <code>p</code>,
    <code>q</code> and <code>r</code>, but they cannot replace, add or delete
    the node. Node <code>t</code> can only be read and replaced by principal
    <code>S1</code>.</para>

    <para>Node <code>X</code> is fully accessible to any authenticated
    principal because the root node specifies that all principals have
    <code>Get</code>, <code>Add</code> and <code>Replace</code> access
    (*-&gt;G,A,R).</para>

    <figure xml:id="i1547055">
      <title>ACL inheritance</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.471in" contentwidth="5.011in" fileref="acl-inheritance.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The definition and example demonstrate the access rights to the
    properties of a node, which includes the value.</para>

    <para>Changing the ACL property itself has different rules. If a principal
    has <code>Replace</code> access to an interior node, the principal is
    permitted to change its own ACL property <emphasis>and</emphasis> the ACL
    properties of all its child nodes. <code>Replace</code> access on a leaf
    node does not allow changing the ACL property itself.</para>

    <para>In the previous example, only principal S1 is authorized to change
    the ACL of node B because it has <code>Replace</code> permission on node
    <code>B</code>'s parent node <code>A</code>.</para>

    <figure xml:id="i1551391">
      <title>ACLs for the ACL property</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.529in" contentwidth="5.011in" fileref="acls-for-acl-property.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para><xref linkend="i1551391"/> demonstrates the effect of this rule with
    an example. Server S1 can change the ACL properties of all interior nodes.
    A more detailed analysis:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Root</emphasis> - The root allows all authenticated
        principals to access it. The root is an interior node so the
        <code>Replace</code> permission permits the change of the ACL
        property.</para>
      </listitem>

      <listitem>
        <para><emphasis>Node A</emphasis> - Server S1 has <code>Replace</code>
        permission and node A is an interior node so principal S1 can modify
        the ACL.</para>
      </listitem>

      <listitem>
        <para><emphasis>Node B</emphasis> - Server S1 has no
        <code>Replace</code> permission for node B, but the parent node A of
        node B grants principal S1 <code>Replace</code> permission, and S1 is
        therefore permitted to change the ACL.</para>
      </listitem>

      <listitem>
        <para><emphasis>Node t</emphasis> - Server <code>S1</code> must not be
        allowed to change the ACL of node <code>t</code>, despite the fact
        that it has <code>Replace</code> permission on node <code>t</code>.
        For leaf nodes, permission to change an ACL is defined by the
        <code>Replace</code> permission in the parent node's ACL. This parent,
        node B, has no such permission set and thus, access is denied.</para>
      </listitem>
    </itemizedlist>

    <para>The following methods provide access to the ACL property of the
    node.</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.dmt.DmtSession.getNodeAcl-String-" xrefstyle="hyperlink"/> - Return the ACL for the given node, this
        method must not take any ACL inheritance into account. The ACL may be
        <code>null</code> if no ACL is set.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.dmt.DmtSession.getEffectiveNodeAcl-String-" xrefstyle="hyperlink"/> - Return the effective ACL for the given node,
        taking any inheritance into account.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.dmt.DmtSession.setNodeAcl-String-Acl-" xrefstyle="hyperlink"/> - Set the node's ACL. The ACL can be
        <code>null</code>, in which case the effective permission must be
        derived from an ancestor. The Dmt Admin service must call <xref linkend="org.osgi.service.dmt.spi.ReadableDataSession.nodeChanged-String---" xrefstyle="hyperlink"/> on the data session with the given plugin to
        let the plugin update any timestamps and versions.</para>
      </listitem>
    </itemizedlist>

    <para>The <code>Acl</code> class maintains the permissions for a given
    principal in a bit mask. The following permission masks are defined as
    constants in the <code>Acl</code> class:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.dmt.Acl.ADD" xrefstyle="hyperlink"/></para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.dmt.Acl.DELETE" xrefstyle="hyperlink"/></para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.dmt.Acl.EXEC" xrefstyle="hyperlink"/></para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.dmt.Acl.GET" xrefstyle="hyperlink"/></para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.dmt.Acl.REPLACE" xrefstyle="hyperlink"/></para>
      </listitem>
    </itemizedlist>

    <para>The class features methods for getting permissions for given
    principals. A number of methods allow an existing ACL to be modified while
    creating a new ACL.</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.dmt.Acl.addPermission-String-int-" xrefstyle="hyperlink"/> - Return a new <code>Acl</code> object where
        the given permissions have been added to permissions of the given
        principal.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.dmt.Acl.deletePermission-String-int-" xrefstyle="hyperlink"/> - Return a new <code>Acl</code> object where
        the given permissions have been removed from the permissions of the
        given principal.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.dmt.Acl.setPermission-String-int-" xrefstyle="hyperlink"/> - Return a new <code>Acl</code> object where
        the permissions of the given principal are overwritten with the given
        permissions.</para>
      </listitem>
    </itemizedlist>

    <para>Information from a given ACL can be retrieved with:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.dmt.Acl.getPermissions-String-" xrefstyle="hyperlink"/> - (<code>int</code>) Return the combined
        permission mask for this principal.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.dmt.Acl.getPrincipals--" xrefstyle="hyperlink"/> - (<code>String[]</code>) Return a list of
        principals (<code>String</code> objects) that have been granted
        permissions for this node.</para>
      </listitem>
    </itemizedlist>

    <para>Additionally, the <xref linkend="org.osgi.service.dmt.Acl.isPermitted-String-int-" xrefstyle="hyperlink"/> method verifies if the given ACL authorizes the
    given permission mask. The method returns <code>true</code> if all
    commands in the mask are allowed by the ACL.</para>

    <para>For example:</para>

    <programlisting>    Acl acl = new Acl("Get=S1&amp;Replace=S1");

    if ( acl.isPermitted("S1", Acl.GET+Acl.REPLACE ))
        ... // will execute

    if ( acl.isPermitted(
        "S1", Acl.GET+Acl.REPLACE+Acl.ADD ))
        ... // will NOT execute</programlisting>

    <section>
      <title>Global Permissions</title>

      <para>Global permissions are indicated with the <code>'*'</code> and the
      given permissions apply to all principals. Processing the global
      permissions, however, has a number of non-obvious side effects:</para>

      <itemizedlist>
        <listitem>
          <para>Global permissions can be retrieved and manipulated using the
          special '*' principal: all methods of the <code>Acl</code> class
          that have a principal parameter also accept this principal.</para>
        </listitem>

        <listitem>
          <para>Global permissions are automatically granted to all specific
          principals. That is, the result of the <code>getPermissions</code>
          or <code>isPermitted</code> methods will be based on the OR of the
          global permissions and the principal-specific permissions.</para>
        </listitem>

        <listitem>
          <para>If a global permission is revoked, it is revoked from all
          specific principals, even if the specific principals already had
          that permission before it was made global.</para>
        </listitem>

        <listitem>
          <para>None of the global permissions can be revoked from a specific
          principal. The OMA DM ACL format does not handle exceptions, which
          must be enforced by the <code>deletePermission</code> and
          <code>setPermission</code> methods.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Ghost ACLs</title>

      <para>The ACLs are fully maintained by the Dmt Admin service and
      enforced when the session has an associated principal. A plugin must be
      completely unaware of any ACLs. The Dmt Admin service must synchronize
      the ACLs with any change in the DMT that is made through its service
      interface. For example, if a node is deleted through the Dmt Admin
      service, it must also delete an associated ACL.</para>

      <para>The DMT nodes, however, are mapped to plugins, and plugins can
      delete nodes outside the scope of the Dmt Admin service.</para>

      <para>As an example, consider a configuration record which is mapped to
      a DMT node that has an ACL. If the configuration record is deleted using
      the Configuration Admin service, the data disappears, but the ACL entry
      in the Dmt Admin service remains. If the configuration dictionary is
      recreated with the same PID, it will get the old ACL, which is likely
      not the intended behavior.</para>

      <para>This specification does not specify a solution to solve this
      problem. Suggestions to solve this problem are:</para>

      <itemizedlist>
        <listitem>
          <para>Use a proprietary callback mechanism from the underlying
          representation to notify the Dmt Admin service to clean up the
          related ACLs.</para>
        </listitem>

        <listitem>
          <para>Implement the services on top of the DMT. For example, the
          Configuration Admin service could use a plugin that provides general
          data storage service.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="i2753759">
    <title>Notifications</title>

    <para>In certain cases it is necessary for some code on the device to
    alert a remote management server or to initiate a session; this process is
    called sending a notification or an <emphasis>alert</emphasis>. Some
    examples:</para>

    <itemizedlist>
      <listitem>
        <para>A Plugin that must send the result of an asynchronous
        <code>EXEC</code> operation.</para>
      </listitem>

      <listitem>
        <para>Sending a request to the server to start a management
        session.</para>
      </listitem>

      <listitem>
        <para>Notifying the server of completion of a software update
        operation.</para>
      </listitem>
    </itemizedlist>

    <para>Notifications can be sent to a management server using the <xref linkend="org.osgi.service.dmt.notification.NotificationService.sendNotification-String-int-String-AlertItem---" xrefstyle="hyperlink"/> method on the Notification Service. This method is
    on the Notification Service and not on the session, because the session
    can already be closed when the need for an alert arises. If an alert is
    related to a session, the session can provide the required principal, even
    after it is closed.</para>

    <para>The remote server is alerted with one or more <xref linkend="org.osgi.service.dmt.notification.AlertItem" xrefstyle="hyperlink"/> objects. The <code>AlertItem</code> class
    describes details of the alert. An alert code is an alert type identifier,
    usually requiring specifically formatted <code>AlertItem</code>
    objects.</para>

    <para>The data syntax and semantics vary widely between various alerts,
    and so does the optionality of particular parameters of an alert item. If
    an item, such as source or type, is not defined, the corresponding getter
    method must return <code>null</code>.</para>

    <para>The <xref linkend="org.osgi.service.dmt.notification.AlertItem" xrefstyle="hyperlink"/> class contains the following items. The value of
    these items must be defined in an alert definition:</para>

    <itemizedlist>
      <listitem>
        <para><code>source</code> - (<code>String</code>) The URI of a node
        that is related to this request. This parameter can be
        <code>null</code>.</para>
      </listitem>

      <listitem>
        <para><code>type</code> - (<code>String</code>) The type of the item.
        For example, <code>x-oma-application:syncml.samplealert</code> in the
        Generic Alert example.</para>
      </listitem>

      <listitem>
        <para><code>mark</code> - (<code>String</code>) Mark field of an
        alert. Contents depend on the alert type.</para>
      </listitem>

      <listitem>
        <para><code>data</code> - (<code>DmtData</code>) The payload of the
        alert with its type.</para>
      </listitem>
    </itemizedlist>

    <para>An <xref linkend="org.osgi.service.dmt.notification.AlertItem" xrefstyle="hyperlink"/> object can be constructed with two different
    constructors:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.dmt.notification.AlertItem.AlertItem-String-String-String-DmtData-" xrefstyle="hyperlink"/> - This method takes all the previously defined
        fields.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.dmt.notification.AlertItem.AlertItem-String---String-String-DmtData-" xrefstyle="hyperlink"/> - Same as previous but with a convenience
        parameter for a segmented URI.</para>
      </listitem>
    </itemizedlist>

    <para>The Notification Service provides the following method to send <xref linkend="org.osgi.service.dmt.notification.AlertItem" xrefstyle="hyperlink"/> objects to the management server:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.dmt.notification.NotificationService.sendNotification-String-int-String-AlertItem---" xrefstyle="hyperlink"/> - Send the alert to the server that is
        associated with the session. The first argument is the name of the
        principal (identifying the remote management system) or
        <code>null</code> for implementation defined routing. The
        <code>int</code> argument is the <emphasis>alert type</emphasis>. The
        alert types are defined by <emphasis>managed object types</emphasis>.
        The third argument (<code>String</code>) can be used for the
        correlation id of a previous execute operation that triggered the
        alert. The <code>AlertItem</code> objects contain the data of the
        alert. The method will run asynchronously from the caller. The
        Notification Service must provide a reliable delivery method for these
        alerts. Alerts must therefore not be re-transmitted.</para>

        <para>When this method is called with <code>null</code> correlator,
        <code>null</code> or empty <code>AlertItem</code> array, and a 0 code
        as values, it should send a protocol specific notification that must
        initiate a new management session.</para>
      </listitem>
    </itemizedlist>

    <para>Implementers should base the routing on the session or server
    information provided as a parameter in the <xref linkend="org.osgi.service.dmt.notification.NotificationService.sendNotification-String-int-String-AlertItem---" xrefstyle="hyperlink"/> method. Routing might even be possible without any
    routing information if there is a well known remote server for the
    device.</para>

    <para>If the request cannot be routed, the Alert Sender service must
    immediately throw a Dmt Exception with a code of <xref linkend="org.osgi.service.dmt.DmtException.ALERT_NOT_ROUTED" xrefstyle="hyperlink"/>. The caller should not attempt to retry the
    sending of the notification. It is the responsibility of the Notification
    Service to deliver the notification to the remote management
    system.</para>

    <section>
      <title>Routing Alerts</title>

      <para>The Notification Service allows external parties to route alerts
      to their destination. This mechanism enables Protocol Adapters to
      receive any alerts for systems with which they can communicate.</para>

      <para>Such a Protocol Adapter should register a Remote Alert Sender
      service. It should provide the following service property:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>principals</emphasis> - (<code>String+</code>) The
          array of principals to which this Remote Alert Sender service can
          route alerts. If this property is not registered, the Remote Alert
          Sender service will be treated as the default sender. The default
          alert sender is only used when a more specific alert sender cannot
          be found.</para>
        </listitem>
      </itemizedlist>

      <para>If multiple Remote Alert Sender services register for the same
      principals highest ranking service is taken as defined in the OSGi
      Core.</para>
    </section>
  </section>

  <section>
    <title>Exceptions</title>

    <para>Most of the methods of this Dmt Admin service API throw Dmt
    Exceptions whenever an operation fails. The <code>DmtException</code>
    class contains numeric error codes which describe the cause of the error.
    Some of the error codes correspond to the codes described by the OMA DM
    spec, while some are introduced by the OSGi Alliance. The documentation of
    each method describes what codes could potentially be used for that
    method.</para>

    <para>The fatality of the exception decides if a thrown Exception rolls
    back an atomic session or not. If the <xref linkend="org.osgi.service.dmt.DmtException.isFatal--" xrefstyle="hyperlink"/> method returns <code>true</code>, the Exception is
    fatal and the session must be rolled back.</para>

    <para>All possible error codes are constants in the
    <code>DmtException</code> class.</para>
  </section>

  <section>
    <title>Events</title>

    <para>There are the following mechanisms to work with events when using
    the Dmt Admin service.</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Event Admin service</emphasis> - Standard asynchronous
        notifications</para>
      </listitem>

      <listitem>
        <para><emphasis>Dmt Event Listener service</emphasis> - A white board
        model for listener. A registered <xref linkend="org.osgi.service.dmt.DmtEventListener" xrefstyle="hyperlink"/> service can use service properties to filter
        the received events</para>
      </listitem>
    </itemizedlist>

    <para>In both cases events are delivered asynchronously and ordered per
    listener unless otherwise specified. Events to the DMT can occur because
    of modifications made in a session or they can occur because a Plugin
    changes its internal state and notifies the Dmt Admin service through the
    <xref linkend="org.osgi.service.dmt.spi.MountPoint" xrefstyle="hyperlink"/> interface.</para>

    <para>Changes made through a session always start with a
    <code>SESSION_OPENED</code> event directly after the session is opened.
    This event must contain the properties defined in <xref linkend="i2939626"/>.</para>

    <para>If events originate from an atomic session then these events must be
    queued until the sessions is successfully committed, which can happen
    multiple times over the life time of a session. If the session is rolled
    back or runs into an error then none of the queued events must be
    sent.</para>

    <para>When a session is closed, which can happen automatically when the
    session fails, then the <code>SESSION_CLOSED</code> event must be sent.
    This event must happen after any queued events. This closed event must
    contain the properties defined in <xref linkend="i2939626"/>.</para>

    <para>An event must only be sent when that type of event actually
    occurred.</para>

    <section>
      <title>Event Admin</title>

      <para>Event Admin, when present, must be used to deliver the Dmt Admin
      events asynchronously. The event types are specified in <xref linkend="service.dmt-event.types" xrefstyle="template:Table %n on page %p"/>, the Topic column defines the
      Event Admin topic. The <xref linkend="service.dmt-event.properties.lifecycle" xrefstyle="template:Table %n on page %p"/> and <xref linkend="service.dmt-event.properties.session" xrefstyle="template:Table %n on page %p"/> define the Life Cycle and
      Session properties that must be passed as the event properties of Event
      Admin.</para>
    </section>

    <section>
      <title>Dmt Event Listeners</title>

      <para>To receive the Dmt Admin events it is necessary to register a Dmt
      Event Listener service. It is possible to filter the events by
      registering a combination of the service properties defined in the
      following table.</para>

      <table pgwide="1">
        <title>Service Properties for the Dmt Event Listener</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="1*"/>

          <colspec colnum="4" colwidth="3*"/>

          <thead>
            <row>
              <entry>Service Property</entry>

              <entry>Data Type</entry>

              <entry>Default</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtEventListener.FILTER_EVENT" xrefstyle="hyperlink"/></entry>

              <entry><code>Integer</code></entry>

              <entry><para>All Events</para></entry>

              <entry><para>A bitmap of <xref linkend="org.osgi.service.dmt.DmtEvent" xrefstyle="hyperlink"/>
              types: <xref linkend="org.osgi.service.dmt.DmtEvent.SESSION_OPENED" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtEvent.ADDED" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtEvent.COPIED" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtEvent.DELETED" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtEvent.RENAMED" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtEvent.REPLACED" xrefstyle="hyperlink"/>, and <xref linkend="org.osgi.service.dmt.DmtEvent.SESSION_CLOSED" xrefstyle="hyperlink"/>. A Dmt Event's type must occur in the
              bitmap to be delivered.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtEventListener.FILTER_PRINCIPAL" xrefstyle="hyperlink"/></entry>

              <entry><code>String+</code></entry>

              <entry><para>Any node</para></entry>

              <entry><para>Only deliver Dmt Events for which at least one of
              the given principals has the right to <code>Get</code> that
              node.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtEventListener.FILTER_SUBTREE" xrefstyle="hyperlink"/></entry>

              <entry><code>String+</code></entry>

              <entry><para>Any node</para></entry>

              <entry><para>This property defines a number of sub-trees by
              specifying the URI of the top nodes of these sub-trees. Only
              events that occur in one of the sub-trees must be
              delivered.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>A Dmt Event must only be delivered to a Dmt Event Listener if the
      Bundle that registers the Dmt Event Listener service has the <xref linkend="org.osgi.service.dmt.security.DmtPermission.GET" xrefstyle="hyperlink"/> Dmt Permission for each of the nodes used in the
      <code>nodes</code> and <code>newNodes</code> properties as tested with
      the Bundle <code>hasPermission</code> method.</para>

      <para>The Dmt Admin service must track Dmt Event Listener services and
      deliver matching events as long as a Dmt Event Listener service is
      registered. Any changes in the service properties must be expediently
      handled.</para>

      <para>A Dmt Event Listener must implement the <xref linkend="org.osgi.service.dmt.DmtEventListener.changeOccurred-DmtEvent-" xrefstyle="hyperlink"/> method. This method is called asynchronously
      from the actual event occurrence but each listener must receive the
      events in order.</para>

      <para>Events are delivered with a <xref linkend="org.osgi.service.dmt.DmtEvent" xrefstyle="hyperlink"/> object.
      This object provides access to the properties of the event. Some
      properties are available as methods others must be retrieved through the
      <xref linkend="org.osgi.service.dmt.DmtEvent.getProperty-String-" xrefstyle="hyperlink"/> method. The methods that provide property
      information are listed in the property tables, see <xref linkend="service.dmt-event.properties.lifecycle" xrefstyle="template:Table %n on page %p"/>.</para>
    </section>

    <section>
      <title>Atomic Sessions and Events</title>

      <para>The intent of the events is that a listener can follow the
      modifications to the DMT from the events alone. However, from an
      efficiency point of view certain events should be coalesced to minimize
      the number of events that a listener need to handle. For this reason,
      the Dmt Admin service must coalesce events if possible.</para>

      <para>Two consecutive events can be coalesced when they are of the same
      type. In that case the <code>nodes</code> and, if present, the
      <code>newNodes</code> of the second event can be concatenated with the
      first event and the <code>timestamp</code> must be derived from the
      first event. It is not necessary to remove duplicates from the
      <code>nodes</code> and <code>newNodes</code>. This guarantees that the
      order of the nodes is in the order of the events.</para>
    </section>

    <section>
      <title>Event Types</title>

      <para>This section describes the events that can be generated by the Dmt
      Admin service. <xref linkend="service.dmt-event.types"/> enumerates all
      the events and provides the name of the topic of Event Admin and the Dmt
      Event type for the listener model.</para>

      <para>There are two kinds of events:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Life Cycle Events</emphasis> - The events for
          session open and closed are the session events.</para>
        </listitem>

        <listitem>
          <para><emphasis>Session Events</emphasis> - <code>ADDED</code>,
          <code>DELETED</code>, <code>REPLACED</code>, <code>RENAMED</code>,
          and <code>COPIED</code>.</para>
        </listitem>
      </itemizedlist>

      <para>Session and life cycle events have different properties.</para>

      <table pgwide="1" xml:id="service.dmt-event.types">
        <title>Event Types</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3" colwidth="1.1*"/>

          <colspec colnum="4" colwidth="2*"/>

          <thead>
            <row>
              <entry>Event</entry>

              <entry>Topic</entry>

              <entry>Dmt Event Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>SESSION OPENED</code></entry>

              <entry><code>org/osgi/service/dmt/DmtEvent/SESSION_OPENED</code></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtEvent.SESSION_OPENED" xrefstyle="hyperlink"/></para></entry>

              <entry><para>A new session was opened. The event must the
              properties defined in <xref linkend="service.dmt-event.properties.session" xrefstyle="template:Table %n on page %p"/>.</para></entry>
            </row>

            <row>
              <entry><code>ADDED</code></entry>

              <entry><code>org/osgi/service/dmt/DmtEvent/ADDED</code></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtEvent.ADDED" xrefstyle="hyperlink"/></para></entry>

              <entry><para>One or more nodes were added.</para></entry>
            </row>

            <row>
              <entry><code>DELETED</code></entry>

              <entry><code>org/osgi/service/dmt/DmtEvent/DELETED</code></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtEvent.DELETED" xrefstyle="hyperlink"/></para></entry>

              <entry><para>One or more existing nodes were
              deleted.</para></entry>
            </row>

            <row>
              <entry><code>REPLACED</code></entry>

              <entry><code>org/osgi/service/dmt/DmtEvent/REPLACED</code></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtEvent.REPLACED" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Values of nodes were replaced.</para></entry>
            </row>

            <row>
              <entry><code>RENAMED</code></entry>

              <entry><code>org/osgi/service/dmt/DmtEvent/RENAMED</code></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtEvent.RENAMED" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Existing nodes were renamed.</para></entry>
            </row>

            <row>
              <entry><code>COPIED</code></entry>

              <entry><code>org/osgi/service/dmt/DmtEvent/COPIED</code></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtEvent.COPIED" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Existing nodes were copied. A copy operation does
              not trigger an <xref linkend="org.osgi.service.dmt.DmtEvent.ADDED" xrefstyle="hyperlink"/> event (in addition to the <xref linkend="org.osgi.service.dmt.DmtEvent.COPIED" xrefstyle="hyperlink"/> event), even though new node(s) are
              created. For efficiency reasons, recursive copy and delete
              operations must only generate a single <xref linkend="org.osgi.service.dmt.DmtEvent.COPIED" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.dmt.DmtEvent.DELETED" xrefstyle="hyperlink"/> event for the root of the affected
              sub-tree.</para></entry>
            </row>

            <row>
              <entry><code>SESSION CLOSED</code></entry>

              <entry><code>org/osgi/service/dmt/DmtEvent/SESSION_CLOSED</code></entry>

              <entry><para><xref linkend="org.osgi.service.dmt.DmtEvent.SESSION_CLOSED" xrefstyle="hyperlink"/></para></entry>

              <entry><para>A session was closed either because it was closed
              explicitly or because there was an error detected. The event
              must the properties defined in <xref linkend="service.dmt-event.properties.session" xrefstyle="template:Table %n on page %p"/>.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>General Event Properties</title>

      <para>The following properties must be available as the event properties
      in Event Admin service and the properties in the Dmt Event for Dmt Event
      Listener services.</para>

      <table pgwide="1">
        <title>General Event</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="1.5*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="1.5*"/>

          <colspec colnum="4" colwidth="3*"/>

          <thead>
            <row>
              <entry>Property Name</entry>

              <entry>Type</entry>

              <entry>Dmt Event</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>event.topics</code></entry>

              <entry><code>String</code></entry>

              <entry/>

              <entry><para>Event topic, required by Event Admin but must also
              be present in the Dmt Events.</para></entry>
            </row>

            <row>
              <entry><code>session.id</code></entry>

              <entry><code>Integer</code></entry>

              <entry><xref linkend="org.osgi.service.dmt.DmtEvent.getSessionId--" xrefstyle="hyperlink"/></entry>

              <entry><para>A unique identifier for the session that triggered
              the event. This property has the same value as <xref linkend="org.osgi.service.dmt.DmtEvent.getSessionId--" xrefstyle="hyperlink"/> of the associated DMT session. If this
              event is generated outside a session then the session id must be
              -1, otherwise it must be &gt;=1.</para></entry>
            </row>

            <row>
              <entry><para>timestamp</para></entry>

              <entry><para>Long</para></entry>

              <entry><para/></entry>

              <entry><para>The time the event was started as defined by
              <code>System.currentTimeMillis()</code></para></entry>
            </row>

            <row>
              <entry><para>bundle</para></entry>

              <entry><para>Bundle</para></entry>

              <entry><para/></entry>

              <entry><para>The initiating Bundle, this is the bundle that
              caused the event. This is either the Bundle that opened the
              associated session or the Plugin's bundle when there is no
              session (i.e. the session id is -1).</para></entry>
            </row>

            <row>
              <entry><para>bundle.signer</para></entry>

              <entry><para>String+</para></entry>

              <entry><para/></entry>

              <entry><para>The signer of the initiating Bundle</para></entry>
            </row>

            <row>
              <entry><para>bundle.symbolicName</para></entry>

              <entry><para>String</para></entry>

              <entry><para/></entry>

              <entry><para>The Bundle Symbolic name of the initiating
              Bundle</para></entry>
            </row>

            <row>
              <entry><para>bundle.version</para></entry>

              <entry><para>Version</para></entry>

              <entry><para/></entry>

              <entry><para>The Bundle version of the initiating
              Bundle.</para></entry>
            </row>

            <row>
              <entry><para>bundle.id</para></entry>

              <entry><para>Long</para></entry>

              <entry><para/></entry>

              <entry><para>The Bundle Id of the initiating
              Bundle.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Session Event Properties</title>

      <para>All session events must have the properties defined in the
      following table.</para>

      <table pgwide="1" xml:id="service.dmt-event.properties.session">
        <title>Event Properties For Session Events</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="1.5*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="1.5*"/>

          <colspec colnum="4" colwidth="3*"/>

          <thead>
            <row>
              <entry>Property Name</entry>

              <entry>Type</entry>

              <entry>Dmt Session</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>session.rooturi</code></entry>

              <entry><code>String</code></entry>

              <entry><xref linkend="org.osgi.service.dmt.DmtSession.getRootUri--" xrefstyle="hyperlink"/></entry>

              <entry><para>The root URI of the session that triggered the
              event.</para></entry>
            </row>

            <row>
              <entry><code>session.principal</code></entry>

              <entry><code>String</code></entry>

              <entry><xref linkend="org.osgi.service.dmt.DmtSession.getPrincipal--" xrefstyle="hyperlink"/></entry>

              <entry><para>The principal of the session, or absent if no
              principal is associated with this session. In the latter case
              the method returns <code>null</code>.</para></entry>
            </row>

            <row>
              <entry><code>session.locktype</code></entry>

              <entry><code>Integer</code></entry>

              <entry><xref linkend="org.osgi.service.dmt.DmtSession.getLockType--" xrefstyle="hyperlink"/></entry>

              <entry><para>The lock type of the session. The number is mapped
              as follows:</para><itemizedlist>
                  <listitem>
                    <para><xref linkend="org.osgi.service.dmt.DmtSession.LOCK_TYPE_SHARED" xrefstyle="hyperlink"/> - 0</para>
                  </listitem>

                  <listitem>
                    <para><xref linkend="org.osgi.service.dmt.DmtSession.LOCK_TYPE_EXCLUSIVE" xrefstyle="hyperlink"/> - 1</para>
                  </listitem>

                  <listitem>
                    <para><xref linkend="org.osgi.service.dmt.DmtSession.LOCK_TYPE_ATOMIC" xrefstyle="hyperlink"/> - 2</para>
                  </listitem>
                </itemizedlist></entry>
            </row>

            <row>
              <entry><code>session.timeout</code></entry>

              <entry><code>Boolean</code></entry>

              <entry/>

              <entry><para>If the session timed out then this property must be
              set to <code>true</code>. If it did not time out this property
              must be <code>false</code>.</para></entry>
            </row>

            <row>
              <entry><para><code>exception</code></para></entry>

              <entry><para><code>Throwable</code></para></entry>

              <entry><para/></entry>

              <entry><para>The name of the actual exception class if the
              session had a fatal exception.</para></entry>
            </row>

            <row>
              <entry><para>exception.message</para></entry>

              <entry><para>String</para></entry>

              <entry><para/></entry>

              <entry><para>Must describe the exception if the session had a
              fatal exception.</para></entry>
            </row>

            <row>
              <entry><para>exception.class</para></entry>

              <entry><para>String</para></entry>

              <entry><para/></entry>

              <entry><para>The name of the actual exception class if the
              session had a fatal exception.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="i2939626">
      <title>Life Cycle Event Properties</title>

      <para>All Life Cycle events must have the properties defined in the
      following table.</para>

      <table pgwide="1" xml:id="service.dmt-event.properties.lifecycle">
        <title>Event Properties for Life Cycle Events</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="1.5*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="1.5*"/>

          <colspec colnum="4" colwidth="3*"/>

          <thead>
            <row>
              <entry>Property Name</entry>

              <entry>Type</entry>

              <entry>Dmt Event</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>nodes</code></entry>

              <entry><code>String[]</code></entry>

              <entry><xref linkend="org.osgi.service.dmt.DmtEvent.getNodes--" xrefstyle="hyperlink"/></entry>

              <entry><para>The absolute URIs of each affected node. This is
              the <code>nodeUri</code> parameter of the Dmt API methods. The
              order of the URIs in the array corresponds to the chronological
              order of the operations. In case of a recursive delete or copy,
              only the session root URI is present in the array.
              </para></entry>
            </row>

            <row>
              <entry><code>newnodes</code></entry>

              <entry><code>String[]</code></entry>

              <entry><xref linkend="org.osgi.service.dmt.DmtEvent.getNewNodes--" xrefstyle="hyperlink"/></entry>

              <entry><para>The absolute URIs of new renamed or copied nodes.
              Only the <code>RENAMED</code> and <code>COPIED</code> events
              have this property.</para><para>The <code>newnodes</code> array
              runs parallel to the <code>nodes</code> array. In case of a
              rename, <code>newnodes[i]</code> must contains the new name of
              <code>nodes[i]</code>, and in case of a copy,
              <code>newnodes[i]</code> is the URI to which
              <code>nodes[i]</code> was copied.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Example Event Delivery</title>

      <para>The example in this section shows the change of a non-trivial tree
      and the events that these changes will cause.</para>

      <figure xml:id="i1768822">
        <title>Example DMT before</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.933in" contentwidth="5.011in" fileref="dmt-example-before.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>For example, in a given session, when the DMT in <xref linkend="i1768822"/> is modified with the following operations:</para>

      <itemizedlist>
        <listitem>
          <para>Open atomic session 42 on the root URI</para>
        </listitem>

        <listitem>
          <para>Add node <code>./A/B/C</code></para>
        </listitem>

        <listitem>
          <para>Add node <code>./A/B/C/D</code></para>
        </listitem>

        <listitem>
          <para>Rename <code>./M/n1</code> to./M/n2</para>
        </listitem>

        <listitem>
          <para>Copy <code>./M/n2</code> to <code>./M/n3</code></para>
        </listitem>

        <listitem>
          <para>Delete node <code>./P/Q</code></para>
        </listitem>

        <listitem>
          <para>Add node <code>./P/Q</code></para>
        </listitem>

        <listitem>
          <para>Delete node <code>./P/Q</code></para>
        </listitem>

        <listitem>
          <para>Replace <code>./X/Y/z</code> with 3</para>
        </listitem>

        <listitem>
          <para>Commit</para>
        </listitem>

        <listitem>
          <para>Close</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Example DMT after</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.933in" contentwidth="5.011in" fileref="dmt-example-after.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>When the Dmt Session is opened, the following event is
      published:</para>

      <programlisting>SESSION_OPENED {
        session.id = 42
        session.rooturi=.
        session.principal=null
        session.locktype=2
        timestamp=1313411544752
        bundle  =&lt;Bundle&gt;
        bundle.signer=[]
        bundle.symbolicname"com.acme.bundle"
        bundle.version=1.2.4711
        bundle.id=442
        ...
}</programlisting>

      <para>When the Dmt Session is closed (assuming it is atomic), the
      following events are published:</para>

      <programlisting>ADDED {
        nodes = [./A/B/C, ./A/B/C/D ]       # note the coalescing
        session.id = 42
        ...
}
RENAMED {
        nodes = [ ./M/n1 ]
        newnodes = [ ./M/n2 ]
        session.id = 42
        ...
}
COPIED {
        nodes = [ ./M/n2 ]
        newnodes = [ ./M/n3 ]
        session.id = 42
        ...
}
DELETED {
        nodes = [ ./P/Q ]
        session.id = 42
        ...
}
ADDED {
        nodes = [ ./P/Q ]
        session.id = 42
        ...
}
DELETED {
        nodes = [ ./P/Q ]
        session.id = 42
        ...
}
REPLACED {
        nodes = [ ./X/Y/z ]
        session.id = 42
        ...
}
SESSION_CLOSED {
        session.id = 42
        session.rooturi=.
        session.principal=null
        session.locktype=2
        ...
}</programlisting>
    </section>
  </section>

  <section xml:id="service.dmt.osgiobjectmodeling">
    <title>OSGi Object Modeling</title>

    <section>
      <title>Object Models</title>

      <para>Management protocols define only half the picture; the object
      models associated with a particular protocol are the other half. Object
      models are always closely associated with a remote management protocol
      since they are based on the data types and actions that are defined in
      the protocol. Even small differences between the data types of a
      protocol and its differences make accurate mapping between protocols
      virtually impossible. It is therefore necessary to make the distinction
      between <emphasis>native</emphasis> and <emphasis>foreign</emphasis>
      protocols for an object model.</para>

      <para>A native protocol for an object model originates from the same
      specification organization. For example, OMA DM consists of a protocol
      based on SyncML and a number of object models that define the structure
      and behavior of the nodes of the DMT. The FOMA specification defines an
      OMA DM native object model, it defines how firmware management is done.
      This is depicted in <xref linkend="i2869529"/>.</para>

      <figure xml:id="i2869529">
        <title>Device Management Architecture</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.887in" contentwidth="5.236in" fileref="device-management-architecture.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>If an object implements a standardized data model it must be
      visible through its <emphasis>native</emphasis> Protocol Adapter, that
      is the Protocol Adapter that belongs to the object model's standard. For
      example, an <code>ExecutionUnit</code> node defined in UPnP Device
      Management could be implemented as a bundle, exposed through a Data
      Plugin for the Dmt Admin service, and then translated by its native UPnP
      Protocol Adapter.</para>

      <para>If an object is present in the Dmt Admin service it is also
      available to <emphasis>foreign</emphasis> Protocol Adapters. A foreign
      Protocol Adapter is any Protocol Adapter except its native Protocol
      Adapter. For example, the Broadband Forum's <code>ExecutionUnit</code>
      could be browsed on the foreign OMA DM protocol.</para>

      <para>In a foreign Protocol Adapter the object model should be
      <emphasis>browsable</emphasis> but it would not map to one of its native
      object models. Browsable means that the information is available to the
      Protocol Adapter's remote manager but not recognized as a standard model
      for the manager. Browse can include, potentially limited,
      manipulation.</para>

      <para>In a native Protocol Adapter it is paramount that the mapping from
      the DMT to the native object is fully correct. It is the purpose of this
      part of the Dmt Admin service specification to allow the native Protocol
      Adapter to map the intentions of the Plugin without requiring knowledge
      of the specific native object model. That is, a TR-069 Plugin
      implementing a WAN interface must be available over the TR-069 protocol
      without the Protocol Adapter having explicit knowledge about the WAN
      interfaces object models from Broadband Forum.</para>

      <para>Therefore, the following use cases are recognized:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Foreign Mapping</emphasis> - Foreign mapping can is
          best-effort as there is no object model to follow. Each Protocol
          Adapter must define how the Dmt Admin model is mapped for this
          browse mode.</para>
        </listitem>

        <listitem>
          <para><emphasis>Native Mapping</emphasis> - Native mapping must be
          100% correct. As it is impossible automatically map DMTs to
          arbitrary protocols this specification provides the concept of a
          mapping model that allows a Plugin to instruct its native Protocol
          Adapter using Meta Nodes.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="service.dmt.protocolmapping">
      <title>Protocol Mapping</title>

      <para>The OSGi Alliance specifies an Execution Environment that can be
      used as a basis for residential gateways, mobiles, or other devices.
      This raises the issue how to expose the manageability of an OSGi device
      and the <emphasis>objects</emphasis>, the units of manageability, that
      are implemented through Plugins. Ideally, an object should be able to
      expose its management interface once and then Protocol Adapters convert
      the management interface to specific device management stacks. For
      example, an object can be exposed through the Dmt Admin service where
      then a TR-069 Protocol Adapter maps the DMT to the TR-069 Remote
      Procedure Calls (RPC).</para>

      <para><xref linkend="i2869627"/> shows an example of a TR-069 Protocol
      Adapter and an OMA DM Protocol Adapter. The TR-069 Protocol Adapter
      should be able to map native TR-069 objects in the DMT (the
      <code>Software Modules Impl</code> in the figure) to Broadband Forum's
      object models. It should also be able to browse the foreign DMT and
      other objects that are not defined in Broadband forum but can be
      accessed with the TR-069 RPCs.</para>

      <figure pgwide="1" xml:id="i2869627">
        <title>Implementing &amp; Browsing</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.326in" contentwidth="6.260in" fileref="implementing-browsing.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>A <emphasis>Protocol Mapping</emphasis> is a document that
      describes the default mapping and the native mechanism for exact
      mapping.</para>

      <para>The following sections specify how Plugins must implement an
      object model that is exposed through the Dmt Admin service. This model
      is limited from the full Dmt Admin service capabilities so that for each
      protocol it is possible to specify a default mapping for browsing as
      well as a mechanism to ensure that special conversion requirements can
      be communicated from a Plugin to its native Protocol Adapter.</para>
    </section>

    <section xml:id="i2836536">
      <title>Hierarchy</title>

      <para>The Dmt Admin model provides an hierarchy of
      <emphasis>nodes</emphasis>. Each node has a <emphasis>type</emphasis>
      that is reflected by its Meta Node. A node is addressed with a URI. The
      flexibility of the Dmt Admin service allows a large number of
      constructs, for example, the name of the node can be used as a
      <emphasis>value</emphasis>, a feature that some management standards
      support. To simplify mapping to foreign Protocol Adapters, some of the
      fundamental constructs have been defined in the following
      sections.</para>
    </section>

    <section>
      <title>General Restriction Guidelines</title>

      <para>The Dmt Admin service provides a very rich tool to model complex
      object structures. Many choices can be made that would make it very hard
      to browse DMTs on non-OMA DM protocols or make the DMT hard to use
      through the Dmt Admin service. As Plugins can always signal special case
      handling to their native Protocol Adapter, any object model design
      should strive to be easy to use for the developers and managers.
      Therefore, this section provides a number of guidelines for the design
      of such object models that will improve the browsing experience for many
      Protocol Adapters.</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Reading of a node must not change the state of a
          device</emphasis> - Management systems must be able to browse a tree
          without causing any side effects. If reading modified the DMT, a
          management system would have no way to warn the user that the system
          is modified. There are a number of technical reasons as well (race
          conditions, security holes, and eventing) but the most important
          reason is the browseability of the device.</para>
        </listitem>

        <listitem>
          <para><emphasis>No use of recursive structures</emphasis> - The Dmt
          Admin service provides a very rich tree model that has no problem
          with recursion. However, this does not have to be true for other
          models. To increase the changes that a model is browsable on another
          device it is strongly recommended to prevent recursive models. For
          example, TR-069 cannot handle recursive models.</para>
        </listitem>

        <listitem>
          <para><emphasis>Only a single format per meta node</emphasis> -
          Handling different types in different nodes simplifies the data
          conversion for both foreign and native protocols. Having a single
          choice from the Meta Node makes the conversion straightforward and
          does not require guessing.</para>
        </listitem>

        <listitem>
          <para><emphasis>All nodes must provide a Meta Node</emphasis> -
          Conversion without a Meta Node makes the conversion very hard since
          object model schemas are often not available in the Protocol
          Adapter.</para>
        </listitem>

        <listitem>
          <para><emphasis>Naming</emphasis> - Structured node members must
          have names only consisting of <code>[a-zA-Z0-9]</code> and must
          always start with a character <code>[a-zA-z]</code>. Member names
          must be different regardless of the case, that is <code>Abc</code>
          and <code>ABC</code> must not both be members of the same structured
          node. The reason for this restriction is that it makes it more
          likely that the chosen names are compatible with the supported
          protocols and do not require escaping.</para>
        </listitem>

        <listitem>
          <para><emphasis>Typing</emphasis> - Restrict the used formats to
          formats that maximize both the interoperability as the ease of use
          for Java developers. The following type are widely supported and are
          easy to use from Java:</para>

          <itemizedlist>
            <listitem>
              <para><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_STRING" xrefstyle="hyperlink"/></para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BOOLEAN" xrefstyle="hyperlink"/></para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_INTEGER" xrefstyle="hyperlink"/></para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_LONG" xrefstyle="hyperlink"/></para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_FLOAT" xrefstyle="hyperlink"/></para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_DATE_TIME" xrefstyle="hyperlink"/></para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BINARY" xrefstyle="hyperlink"/></para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>DDF</title>

      <para>The Data Description Format is part of OMA DM; it provides a
      description language for the object model. The following table provides
      an example of the Data Description Format as used in the OSGi
      specifications.</para>

      <informaltable>
        <tgroup cols="6">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3" colwidth="4*"/>

          <colspec colnum="4" colwidth="2*"/>

          <colspec colnum="5" colwidth="1*"/>

          <colspec colnum="6" colwidth="5*"/>

          <thead>
            <row>
              <entry>Name</entry>

              <entry>Actions</entry>

              <entry>Type</entry>

              <entry>Card.</entry>

              <entry>S</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>FaultType</code></entry>

              <entry><code>Get</code></entry>

              <entry><code>integer</code></entry>

              <entry><code>1</code></entry>

              <entry><code>P</code></entry>

              <entry><para>...</para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>The columns have the following meanings:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Name</emphasis> - The name of the node</para>
        </listitem>

        <listitem>
          <para><emphasis>Actions</emphasis> - The set of actions that can be
          executed on the node, see <xref linkend="i2760251"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Type</emphasis> - The type of the node. All lower
          case are primitives, a name starting with an upper case is an
          interior node type. MAP, LIST, and SCAFFOLD are the special types.
          The NODE type is like an ANY type. Other type names are then further
          specified in the document. See <xref linkend="i2836625"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Cardinality</emphasis> - The number of occurrences
          of the node, see <xref linkend="i2760429"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Scope</emphasis> - The scope of the node, see <xref linkend="i2965501"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Description</emphasis> - A description of the
          node.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i2836625">
      <title>Types</title>

      <para>Each node is considered to have a <emphasis>type</emphasis>. The
      Dmt Admin service has a number of constructs that have typing like
      behavior. There are therefore the following <emphasis>kind</emphasis> of
      types:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Primitives</emphasis> - Primitives are data types
          like integers and strings; they include all the Dmt Admin data
          formats. See <xref linkend="i2836736"/>. Primitive type names are
          always lower case to distinguish them from the interior node type
          names.</para>
        </listitem>

        <listitem>
          <para><emphasis>Structured Types</emphasis> - A structured type
          types a structured node. See <xref linkend="i2836768"/>. A
          structured type has a type name that starts with an uppercase.
          Object models generally consist of defining these types.</para>
        </listitem>

        <listitem>
          <para><code>NODE</code> - A general unqualified Dmt Admin
          node.</para>
        </listitem>

        <listitem>
          <para><code>LIST</code> - A node that represents a homogeneous
          collection of child nodes; the name of the child nodes is the index
          in the collection. See <xref linkend="i2836847"/>.</para>
        </listitem>

        <listitem>
          <para><code>MAP</code> - A node that represents a mapping from a
          key, the name of the child node, and a value, the value of the child
          node. All values have the same type. See <xref linkend="i2837021"/>.</para>
        </listitem>

        <listitem>
          <para><code>SCAFFOLD</code> - A node provided by the Dmt Admin
          service or a Parent Plugin to make it possible to discover a DMT,
          see <xref linkend="i2931854"/>.</para>
        </listitem>
      </itemizedlist>

      <para>Nodes are treated as if there is a single type system. However,
      the Dmt Admin type system has the following mechanisms to type a
      node:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Format</emphasis> - The Dmt Admin primitive types
          used for leaf nodes, as defined on Dmt Data.</para>
        </listitem>

        <listitem>
          <para><emphasis>MIME</emphasis> - A MIME type on a leaf node which
          is available through <xref linkend="org.osgi.service.dmt.DmtSession.getNodeType-String-" xrefstyle="hyperlink"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>DDF Document URI</emphasis> - A Data Description
          Format URI that provides a type name for an interior node. The URI
          provides a similar role as the MIME type for the leaf node and is
          also available through <xref linkend="org.osgi.service.dmt.DmtSession.getNodeType-String-" xrefstyle="hyperlink"/>.</para>
        </listitem>
      </itemizedlist>

      <para>The Dmt Admin service provides the MIME type for leaf nodes and
      the DDF Document URI for interior nodes through the <xref linkend="org.osgi.service.dmt.DmtSession.getNodeType-String-" xrefstyle="hyperlink"/> method. As both are strings they can both be
      used as type identifiers. The different types are depicted in <xref linkend="i2836666"/>.</para>

      <figure pgwide="1" xml:id="i2836666">
        <title>Type inheritance and structure</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.900in" contentwidth="6.260in" fileref="type-inheritance-structure.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section xml:id="i2836736">
      <title>Primitives</title>

      <para>A primitive is a value stored in a leaf node. In the Dmt Admin
      service, the type of the primitive is called the
      <emphasis>format</emphasis>. The Dmt Admin service supports a large
      number of types that have semantic overlap. A Protocol Mapping must
      provide a unique mapping from each Dmt Admin format to the corresponding
      protocol type and provide conversion from a protocol type to the
      corresponding Dmt Admin types defined in a Meta Node.</para>

      <para>Primitives are documented in OSGi object models with a lower case
      name that is the last part of their format definition. For example, for
      <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_STRING" xrefstyle="hyperlink"/> the DDF type name is <code>string</code>. A
      primitive DDF for an integer leaf node therefore looks like:</para>

      <informaltable>
        <tgroup cols="6">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3" colwidth="4*"/>

          <colspec colnum="4" colwidth="2*"/>

          <colspec colnum="5" colwidth="1*"/>

          <colspec colnum="6" colwidth="5*"/>

          <thead>
            <row>
              <entry>Name</entry>

              <entry>Act</entry>

              <entry>Type</entry>

              <entry>Card.</entry>

              <entry>S</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>FaultType</code></entry>

              <entry><code>Get</code></entry>

              <entry><code>integer</code></entry>

              <entry><code>1</code></entry>

              <entry><code>P</code></entry>

              <entry><para>...</para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>

    <section xml:id="i2836768">
      <title>Structured Nodes</title>

      <para>A <emphasis>structured node</emphasis> is like a
      <code>struct</code> in C or a class in an object oriented languages. A
      structured node is an interior node with a set of members (child nodes)
      with fixed names, it is never possible to add or remove such members
      dynamically. The meaning of each named node and its type is usually
      defined in a management specification. For example, a node representing
      the OSGi Bundle could have a <code>BundleId</code> child-node that maps
      to the <code>getBundleId()</code> method on the <code>Bundle</code>
      interface.</para>

      <para>It is an error to add or delete members to a Structured node, this
      must be reflected in the corresponding Meta Node, that is, Structured
      nodes must never have the <code>Add</code> or <code>Delete</code>
      action.</para>

      <para>A structured node is defined in a <emphasis>structured
      type</emphasis> to allow the reuse of the same information in different
      places in an object model. A structured type defines the members and
      their behaviors. A structured type can be referred by its name. The name
      of the type is often, but not required, the name of the member.</para>

      <para>For example, a <code>Unit</code> structured type could look
      like:</para>

      <informaltable>
        <tgroup cols="6">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3" colwidth="4*"/>

          <colspec colnum="4" colwidth="2*"/>

          <colspec colnum="5" colwidth="1*"/>

          <colspec colnum="6" colwidth="5*"/>

          <thead>
            <row>
              <entry>Name</entry>

              <entry>Act</entry>

              <entry>Type</entry>

              <entry>Card.</entry>

              <entry>S</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>Id</code></entry>

              <entry><code>Get</code></entry>

              <entry><code>long</code></entry>

              <entry><code>1</code></entry>

              <entry><code>P</code></entry>

              <entry><para>...</para></entry>
            </row>

            <row>
              <entry><code>URL</code></entry>

              <entry><code>Get Set</code></entry>

              <entry><code>string</code></entry>

              <entry><code>1</code></entry>

              <entry><code>P</code></entry>

              <entry><para>...</para></entry>
            </row>

            <row>
              <entry><code>Name</code></entry>

              <entry><code>Get</code></entry>

              <entry><code>string</code></entry>

              <entry><code>1</code></entry>

              <entry><code>P</code></entry>

              <entry><para>...</para></entry>
            </row>

            <row>
              <entry><code>Certificate</code></entry>

              <entry><code>Get</code></entry>

              <entry><code>LIST</code></entry>

              <entry><code>1</code></entry>

              <entry><code>P</code></entry>

              <entry><para/></entry>
            </row>

            <row>
              <entry><code> [index]</code></entry>

              <entry><code>Get</code></entry>

              <entry><code>Certificate</code></entry>

              <entry><code>1</code></entry>

              <entry><code>D</code></entry>

              <entry><para>Note the use of a structured type.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>

    <section xml:id="i2836847">
      <title>LIST Nodes</title>

      <para>A <code>LIST</code> node is an interior node representing a
      <emphasis>collection</emphasis> of elements. The elements are stored in
      the child nodes of the <code>LIST</code> node, they are called the
      <emphasis>index nodes</emphasis>. All index nodes must have the same
      type. The names of the index nodes are synthesized and represent the
      index of the index node. The first node is always named 0 and the
      sibling is 1, 2, etc. The sequence must be continuous and must have no
      missing indexes. A node name is always a string, it is therefore the
      responsibility of the plugin to provide the proper names. The index is
      assumed to be a signed positive integer limiting the <code>LIST</code>
      nodes size to <code>Integer.MAX_VALUE</code> elements.</para>

      <figure>
        <title>LIST Nodes</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.141in" contentwidth="5.927in" fileref="list-nodes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Index nodes should only be used for types where the value of the
      index node is the identity. For example, a network interface has an
      identity; a manager will expect that a node representing such as a
      network interface node will always have the same URI even if other
      interfaces are added and deleted. Since <code>LIST</code> nodes renumber
      the index node names when an element is deleted or added, the URI would
      fail if a network interface was added or removed. If such a case, a
      <code>MAP</code> node should be used, see <xref linkend="i2837021"/>, as
      they allow the key to be managed by the remote manager.</para>

      <para><code>LIST</code> nodes can be mutable if the Meta Node of its
      index nodes support the <code>Add</code> or <code>Delete</code> action.
      A LIST node is modeled after a <code>java.util.List</code> that can
      automatically accommodate new elements. <code>Get</code> and
      <code>Replace</code> operations use the node name to index in this
      list.</para>

      <para>To rearrange the list the local manager can <code>Add</code> and
      <code>Delete</code> nodes or rename them as it sees fit. At any moment
      in time the underlying implementation must maintain a list that runs
      from 0 to <code>max(index)</code> (inclusive), where index is the name
      of the <code>LIST</code> child nodes. Inserting a node requires renaming
      all subsequent nodes. Any missing indexes must automatically be provided
      by the plugin when the child node names are retrieved.</para>

      <para>For example, a <code>LIST</code> node named <code>L</code>
      contains the following nodes:</para>

      <programlisting>L/0     A
L/1     B
L/2     C</programlisting>

      <para>To insert a node after <code>B</code>, <code>L/2</code> must be
      renamed to <code>L/3</code>. This will automatically extend the
      <code>LIST</code> node to 4 elements. That is, even though
      <code>L/2</code> is renamed, the implementation must automatically
      provide a new <code>L/2</code> node. The value of this node depends on
      the underlying implementation. The value of the list will therefore then
      be: <code>[A,B,?,C]</code>. If node 1 is deleted, then the list will be
      <code>[A,?,C]</code>. If a node L/5 is added then the list will be
      <code>[A,?,C,?,?,?]</code>. It is usually easiest to use the LIST node
      as a complex value, this is discussed in the next section.</para>

      <section>
        <title>Complex Collections</title>

        <para>An implementation of a <code>LIST</code> node must support a
        complex node value if its members are primitive; the interior node
        must then have a value of a Java object implementing the
        <code>Collection</code> interface from <code>java.util</code>. The
        elements in this map must be converted according to the following
        table.</para>

        <table xml:id="service.dmt-collections.conversion">
          <title>Conversion for Collections</title>

          <tgroup cols="2">
            <colspec colnum="1" colwidth="2*"/>

            <colspec colnum="2" colwidth="5*"/>

            <thead>
              <row>
                <entry><para>Format</para></entry>

                <entry><para>Associated Java Type</para></entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><para><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_STRING" xrefstyle="hyperlink"/></para></entry>

                <entry><para><code>String</code></para></entry>
              </row>

              <row>
                <entry><para><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BOOLEAN" xrefstyle="hyperlink"/></para></entry>

                <entry><para><code>Boolean</code></para></entry>
              </row>

              <row>
                <entry><para><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_INTEGER" xrefstyle="hyperlink"/></para></entry>

                <entry><para><code>Integer</code></para></entry>
              </row>

              <row>
                <entry><para><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_LONG" xrefstyle="hyperlink"/></para></entry>

                <entry><para><code>Long</code></para></entry>
              </row>

              <row>
                <entry><para><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_FLOAT" xrefstyle="hyperlink"/></para></entry>

                <entry><para><code>Float</code></para></entry>
              </row>

              <row>
                <entry><para><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_DATE_TIME" xrefstyle="hyperlink"/></para></entry>

                <entry><para><code>Date</code></para></entry>
              </row>

              <row>
                <entry><para><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BINARY" xrefstyle="hyperlink"/></para></entry>

                <entry><para><code>byte[]</code></para></entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>Alternatively, the Collection may contain Dmt Data objects but
        the collection must be homogeneous. The collection must always be a
        copy and changes made to the collection must not affect the
        DMT.</para>

        <para>For example, a <code>LIST</code> type for a list of URIs could
        look like:</para>

        <informaltable>
          <tgroup cols="6">
            <colspec colnum="1" colwidth="3*"/>

            <colspec colnum="2" colwidth="2*"/>

            <colspec colnum="3" colwidth="4*"/>

            <colspec colnum="4" colwidth="2*"/>

            <colspec colnum="5" colwidth="1*"/>

            <colspec colnum="6" colwidth="5*"/>

            <thead>
              <row>
                <entry>Name</entry>

                <entry>Act</entry>

                <entry>Type</entry>

                <entry>Card.</entry>

                <entry>S</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><code>URIs</code></entry>

                <entry><code>Get</code></entry>

                <entry><code>LIST</code></entry>

                <entry><code>1</code></entry>

                <entry><code>P</code></entry>

                <entry><para>A List of URIs</para></entry>
              </row>

              <row>
                <entry><code> [index]</code></entry>

                <entry><code>Get Set Add Del</code></entry>

                <entry><code>string</code></entry>

                <entry><code>0..n</code></entry>

                <entry><code>D</code></entry>

                <entry><para>A primitive index node</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>Replacing a complex value will generate a single <xref linkend="org.osgi.service.dmt.DmtConstants.EVENT_TOPIC_REPLACED" xrefstyle="hyperlink"/> event for the <code>LIST</code> node.</para>
      </section>
    </section>

    <section xml:id="i2837021">
      <title>MAP Nodes</title>

      <para>A <code>MAP</code> node represents a mapping from a
      <emphasis>key</emphasis> to a <emphasis>value</emphasis>. The key is the
      name of the node and the value is the node's value. A <code>MAP</code>
      node performs the same functions as a Java Map. See <xref linkend="i2837027"/>.</para>

      <figure xml:id="i2837027">
        <title>MAP Nodes</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.377in" contentwidth="5.927in" fileref="map-nodes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>A <code>MAP</code> node has <emphasis>key nodes</emphasis> as
      children. A key node is an association between the name of the key node
      (which is the key) and the value of the key node. Key nodes are depicted
      with <code>[&lt;type&gt;]</code>, where the <code>&lt;type&gt;</code>
      indicates the type used for the string name. For example, a long type
      will have node names that can be converted to a <code>long</code>. A key
      type must always be one of the primitive types. For example, a list of
      Bundle locations can be handled with a <code>MAP</code> with
      <code>[string]</code> key nodes that have a value type of string. Since
      the key is used in URIs it must always be escaped, see <xref linkend="i2275977"/>.</para>

      <para>For example:</para>

      <informaltable>
        <tgroup cols="6">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3" colwidth="4*"/>

          <colspec colnum="4" colwidth="2*"/>

          <colspec colnum="5" colwidth="1*"/>

          <colspec colnum="6" colwidth="5*"/>

          <thead>
            <row>
              <entry>Name</entry>

              <entry>Act</entry>

              <entry>Type</entry>

              <entry>Card.</entry>

              <entry>S</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>Location</code></entry>

              <entry><code>Get</code></entry>

              <entry><code>MAP</code></entry>

              <entry><code>1</code></entry>

              <entry><code>P</code></entry>

              <entry><para>A MAP of location where the index node is the
              Bundle Id.</para></entry>
            </row>

            <row>
              <entry><code> [long]</code></entry>

              <entry><code>Get Set Add Del</code></entry>

              <entry><code>string</code></entry>

              <entry><code>0..n</code></entry>

              <entry><code>D</code></entry>

              <entry><para>Name is the Bundle Id and the value is the
              location.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <section>
        <title>Complex Value</title>

        <para>An implementation of a <code>MAP</code> node must support an
        interior node value if its child nodes are primitive; the interior
        node must then be associated with a Java object implementing the
        <code>Map</code> interface from <code>java.util</code>. The values in
        this Map must homogeneous and be converted according to <xref linkend="service.dmt-collections.conversion"/> or the given values
        must of type <code>DmtData</code>. The <code>Map</code> object must a
        copy and does not track changes in the DMT or vice-versa.</para>

        <para>Replacing a complex value will generate a single <xref linkend="org.osgi.service.dmt.DmtConstants.EVENT_TOPIC_REPLACED" xrefstyle="hyperlink"/> event for that node.</para>
      </section>
    </section>

    <section xml:id="service.dmt.instanceid">
      <title>Instance Id</title>

      <para>Some protocols cannot handle arbitrary names in the access URI,
      they need a well defined <emphasis>instance id</emphasis> to index in a
      table or put severe restrictions on the node name's character set,
      length, or other aspects. For example, TR-069 can access an object with
      the following URI:</para>

      <programlisting>Device.VOIP.12.Name</programlisting>

      <para>The more natural model for the DMT is to use:</para>

      <programlisting>Device.VOIP.&lt;Name&gt;...</programlisting>

      <para>To provide assistance to these protocols this section defines a
      mechanism that can be used by Protocol Adapters to simplify
      access.</para>

      <para>An Object Model can define a child node <code>InstanceId</code>.
      The <code>InstanceId</code> node, if present, holds a long value that
      has the following qualities:</para>

      <itemizedlist>
        <listitem>
          <para>Its value must be between 1 and
          <code>Long.MAX_VALUE</code>.</para>
        </listitem>

        <listitem>
          <para>No other index/key node on the same level must have the same
          value for the <code>InstanceId</code> node</para>
        </listitem>

        <listitem>
          <para>The value must be persistent between sessions and restarts of
          the plugin</para>
        </listitem>

        <listitem>
          <para>A value must not be reused when a node is deleted until the
          number space is exhausted</para>
        </listitem>
      </itemizedlist>

      <para>Protocol Adapters can use this information to provide alternative
      access paths for the DMT.</para>
    </section>

    <section>
      <title>Conversions</title>

      <para>Each Protocol Mapping document should define a default conversion
      from the Dmt Admin data formats to the protocol types and vice versa,
      including the <code>LIST</code> and <code>MAP</code> nodes. However,
      this default mapping is likely to be too constraining in real world
      models since different protocols support different data types and a 1:1
      mapping is likely to be impossible.</para>

      <para>For this reason, the Protocol Mapping document should define a
      number of protocol specific MIME types for each unique data type that
      they support. A Data Plugin can associate such a MIME type with a node.
      The Protocol Adapter can then look for this MIME type. If none of the
      Protocol Adapter specific MIME types are available in a node the default
      conversion is used.</para>

      <para>For example, in the TR-069 Protocol Adapter specification there is
      a MIME type for each TR-069 data type. If for a given leaf node the Meta
      Node's type specifies <code>TR069_MIME_UNSIGNED_INT</code>and the node
      specifies the format <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_INTEGER" xrefstyle="hyperlink"/> then the Protocol Adapter must convert the
      integer to an unsigned integer and encode the value as such in the
      response message. The Protocol Adapter there does not have to have
      specific knowledge of the object model, the Plugin drives the Protocol
      Adapter by providing the protocol specific MIME types on the leaf node
      Meta Nodes. This model is depicted in <xref linkend="i2837120"/>.</para>

      <figure xml:id="i2837120">
        <title>Conversions</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.450in" contentwidth="6.312in" fileref="conversions.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Since a Meta Node can contain multiple MIME types, there is no
      restrictions on the number of Protocol Adapters; a Plugin can specify
      the MIME types of multiple Protocol Adapters.</para>
    </section>

    <section>
      <title>Extensions</title>

      <para>All interior nodes in this specification can have a node named
      <code>Ext</code>. These nodes are the <emphasis>extension</emphasis>
      nodes. If an implementation needs to expose additional details about an
      interior node then they should expose these extensions under the
      corresponding <code>Ext</code> node. To reduce name conflicts, it is
      recommended to group together implementation specific extensions under a
      unique name, recommended is to use the reverse domain name. For example,
      the following DDF defines an <code>Ext</code> node with extensions for
      the ACME provider.</para>

      <informaltable>
        <tgroup cols="6">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3" colwidth="4*"/>

          <colspec colnum="4" colwidth="2*"/>

          <colspec colnum="5" colwidth="1*"/>

          <colspec colnum="6" colwidth="5*"/>

          <thead>
            <row>
              <entry>Name</entry>

              <entry>Act</entry>

              <entry>Type</entry>

              <entry>Card.</entry>

              <entry>S</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>Framework</code></entry>

              <entry><code>Get</code></entry>

              <entry><code>Framework</code></entry>

              <entry><code>1</code></entry>

              <entry><code>P</code></entry>

              <entry><para>...</para></entry>
            </row>

            <row>
              <entry><code> Ext</code></entry>

              <entry><code>Get</code></entry>

              <entry/>

              <entry><code>1</code></entry>

              <entry><code>P</code></entry>

              <entry><para>Extension node</para></entry>
            </row>

            <row>
              <entry><code>  com.acme</code></entry>

              <entry><code>Get</code></entry>

              <entry><code>AcmeFrameworkExt</code></entry>

              <entry><code>1</code></entry>

              <entry><code>P</code></entry>

              <entry><para>The node for the ACME extensions</para></entry>
            </row>

            <row>
              <entry><code>   Transactional</code></entry>

              <entry><code>Get</code></entry>

              <entry><code>boolean</code></entry>

              <entry><code>1</code></entry>

              <entry><code>P</code></entry>

              <entry><para>...</para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>A key aspect of the Dmt Admin service model is the separation from
    DMT clients and plugins. The Dmt Admin service receives all the operation
    requests and, after verification of authority, forwards the requests to
    the plugins.</para>

    <figure pgwide="1">
      <title>Separation of clients and plugins</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.261in" contentwidth="5.011in" fileref="client-plugin-separation.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>This architecture makes it straightforward to use the OSGi security
    architecture to protect the different actors.</para>

    <section>
      <title>Principals</title>

      <para>The caller of the <xref linkend="org.osgi.service.dmt.DmtAdmin.getSession-String-String-int-" xrefstyle="hyperlink"/> method must have the Dmt Principal Permission
      with a target that matches the given principal. This Dmt Principal
      Permission is used to enforce that only trusted entities can act on
      behalf of remote managers.</para>

      <para>The Dmt Admin service must verify that all operations from a
      session with a principal can be executed on the given nodes using the
      available ACLs.</para>

      <para>The other two forms of the <code>getSession</code> method are
      meant for local management applications where no principal is available.
      No special permission is defined to restrict the usage of these methods.
      The callers that want to execute device management commands, however,
      need to have the appropriate Dmt Permissions.</para>
    </section>

    <section xml:id="i1662434">
      <title>Operational Permissions</title>

      <para>The operational security of a Local Manager and a remote manager
      is distinctly different. The distinction is made on the principal.
      Protocol Adapters should use the <code>getSession</code> method that
      takes an authenticated principal. Local Managers should not specify a
      principal.</para>

      <figure xml:id="i1613648">
        <title>Access control context, for Local Manager and Protocol Adapter
        operation</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.345in" contentwidth="4.922in" fileref="access-control-context.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Protocol Adapters</title>

      <para>A Protocol Adapter must provide a principal to the Dmt Admin
      service when it gets a session. It must use the <xref linkend="org.osgi.service.dmt.DmtAdmin.getSession-String-String-int-" xrefstyle="hyperlink"/> method. The Protocol Adapter must have Dmt
      Principal Permission for the given principal. The Dmt Admin service must
      then use this principal to determine the <emphasis>security
      scope</emphasis> of the given principal. This security scope is a set of
      permissions. How these permissions are found is not defined in this
      specification; they are usually in the management tree of a device. For
      example, the Mobile Specification stores these under the
      <code>$/Policy/Java/DmtPrincipalPermission</code> sub-tree.</para>

      <para>Additionally, a Dmt Session with a principal implies that the Dmt
      Admin service must verify the ACLs on the node for all
      operations.</para>

      <para>Any operation that is requested by a Protocol Adapter must be
      executed in a <code>doPrivileged</code> block that takes the principal's
      security scope. The <code>doPrivileged</code> block effectively hides
      the permissions of the Protocol Adapter; all operations must be
      performed under the security scope of the principal.</para>

      <para>The security check for a Protocol Adapter is therefore as
      follows:</para>

      <itemizedlist>
        <listitem>
          <para>The operation method calls <code>doPrivileged</code> with the
          security scope of the principal.</para>
        </listitem>

        <listitem>
          <para>The operation is forwarded to the appropriate plugin. The
          underlying service must perform its normal security checks. For
          example, the Configuration Admin service must check for the
          appropriate Configuration Permission.</para>
        </listitem>
      </itemizedlist>

      <para>The Access Control context is shown in <xref linkend="i1613648"/>
      within the Protocol Adapter column.</para>

      <para>This principal-based security model allows for minimal permissions
      on the Protocol Adapter, because the Dmt Admin service performs a
      <code>doPrivileged</code> on behalf of the principal, inserting the
      permissions for the principal on the call stack. This model does not
      guard against malicious Protocol Adapters, though the Protocol Adapter
      must have the appropriate Dmt Principal Permission.</para>

      <para>The Protocol Adapter is responsible for the authentication of the
      principal. The Dmt Admin service must trust that the Protocol Adapter
      has correctly verified the identity of the other party. This
      specification does not address the type of authentication mechanisms
      that can be used. Once it has permission to use that principal, it can
      use any DMT command that is permitted for that principal at any
      time.</para>
    </section>

    <section>
      <title>Local Manager</title>

      <para>A Local Manager does not specify a principal. Security checks are
      therefore performed against the security scope of the Local Manager
      bundle, as shown in <xref linkend="i1613648"/> with the Local Manager
      stack. An operation is checked only with a Dmt Permission for the given
      node URI and operation. A thrown Security Exception must be passed
      unmodified to the caller of the operation method. The Dmt Admin service
      must not check the ACLs when no principal is set.</para>

      <para>A Local Manager, and all its callers, must therefore have
      sufficient permission to handle the DMT operations as well as the
      permissions required by the plugins when they proxy other services
      (which is likely an extensive set of Permissions).</para>
    </section>

    <section>
      <title>Plugin Security</title>

      <para>Plugins are required to hold the maximum security scope for any
      services they proxy. For example, the plugin that manages the
      Configuration Admin service must have
      <code>ConfigurationPermission("*","*")</code> to be effective.</para>

      <para>Plugins should not make <code>doPrivileged</code> calls, but
      should use the caller's context on the stack for permission
      checks.</para>
    </section>

    <section>
      <title>Events and Permissions</title>

      <para>Dmt Event Listener services must have the appropriate Dmt
      Permission to receive the event since this must be verified with the
      <code>hasPermission()</code> method on Bundle.</para>

      <para>The Dmt Event Listener services registered with a <xref linkend="org.osgi.service.dmt.DmtEventListener.FILTER_PRINCIPAL" xrefstyle="hyperlink"/> service property requires Dmt Principal
      Permission for the given principal. In this case, the principal must
      have <code>Get</code> access to see the nodes for the event. Any nodes
      that the listener does not have access to must be removed from the
      event.</para>

      <para>Plugins are not required to have access to the Event Admin
      service. If they send an event through the <xref linkend="org.osgi.service.dmt.spi.MountPoint" xrefstyle="hyperlink"/>
      interface then the Dmt Admin service must use a
      <code>doPrivileged</code> block to send the event to the Event Admin
      service.</para>
    </section>

    <section xml:id="i1919998">
      <title>Dmt Principal Permission</title>

      <para>Execution of the <code>getSession</code> methods of the Dmt Admin
      service featuring an explicit principal name is guarded by the Dmt
      Principal Permission. This permission must be granted only to Protocol
      Adapters that open Dmt Sessions on behalf of remote management
      servers.</para>

      <para>The <code>DmtPrincipalPermission</code> class does not have
      defined actions; it must always be created with a <code>*</code> to
      allow future extensions. The target is the principal name. A wildcard
      character is allowed at the end of the string to match a prefix.</para>

      <para>Example:</para>

      <programlisting>new DmtPrincipalPermission("com.acme.dep*","*" )</programlisting>
    </section>

    <section>
      <title>Dmt Permission</title>

      <para>The Dmt Permission controls access to management objects in the
      DMT. It is intended to control only the <emphasis>local</emphasis>
      access to the DMT. The Dmt Permission target string identifies the
      target node's URI (absolute path is required, starting with the
      <code>'./'</code> prefix) and the action field lists the management
      commands that are permitted on the node.</para>

      <para>The URI can end in a wildcard character <code>*</code> to indicate
      it is a prefix that must be matched. This comparison is string based so
      that node boundaries can be ignored.</para>

      <para>The following actions are defined:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.dmt.security.DmtPermission.ADD" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.security.DmtPermission.DELETE" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.security.DmtPermission.EXEC" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.security.DmtPermission.GET" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.dmt.security.DmtPermission.REPLACE" xrefstyle="hyperlink"/></para>
        </listitem>
      </itemizedlist>

      <para>For example, the following code creates a Dmt Permission for a
      bundle to add and replace nodes in any URI that starts with
      <code>./D</code>.</para>

      <programlisting>new DmtPermission("./D*", "Add,Replace")</programlisting>

      <para>This permission must imply the following permission:</para>

      <programlisting>new DmtPermission("./Dev/Operator/Name", "Replace")</programlisting>
    </section>

    <section>
      <title>Alert Permission</title>

      <para>The Alert Permission permits the holder of this permission to send
      a notification to a specific <emphasis>target principal</emphasis>. The
      target is identical to <xref linkend="i1919998"/>. No actions are
      defined for Alert Permission.</para>
    </section>

    <section>
      <title>Security Summary</title>

      <section>
        <title>Dmt Admin Service and Notification Service</title>

        <para>The Dmt Admin service is likely to require All Permission. This
        requirement is caused by the plugin model. Any permission required by
        any of the plugins must be granted to the Dmt Admin service. This set
        of permissions is large and hard to define. The following list shows
        the minimum permissions required if the plugin permissions are left
        out.</para>

        <programlisting>ServicePermission   ..DmtAdmin                            REGISTER
ServicePermission   ..NotificationService                 REGISTER
ServicePermission   ..DataPlugin                          GET
ServicePermission   ..ExecPlugin                          GET
ServicePermission   ..EventAdmin                          GET
ServicePermission   ..RemoteAlertSender                   GET
ServicePermission   ..DmtEventListener                    GET
DmtPermission       *                                     *
DmtPrincipalPermission *                                  *
PackagePermission   org.osgi.service.dmt                  EXPORTONLY
PackagePermission   org.osgi.service.dmt.spi              EXPORTONLY
PackagePermission   org.osgi.service.dmt.notification     EXPORTONLY
PackagePermission   org.osgi.service.dmt.notification.spi EXPORTONLY
PackagePermission   org.osgi.service.dmt.registry         EXPORTONLY
PackagePermission   org.osgi.service.dmt.security         EXPORTONLY</programlisting>
      </section>

      <section>
        <title>Dmt Event Listener Service</title>

        <programlisting>ServicePermission   ..DmtEventListener                    REGISTER
PackagePermission   org.osgi.service.dmt                  IMPORT</programlisting>

        <para>Dmt Event Listeners must have the appropriate
        <code>DmtPermission</code> to see the nodes in the events. If they are
        registered with a principal then they also need
        <code>DmtPrincipalPermission</code> for the given principals.</para>
      </section>

      <section>
        <title>Data and Exec Plugin</title>

        <programlisting>ServicePermission   ..NotificationService                 GET
ServicePermission   ..DataPlugin                          REGISTER
ServicePermission   ..ExecPlugin                          REGISTER
PackagePermission   org.osgi.service.dmt                  IMPORT
PackagePermission   org.osgi.service.dmt.notification     IMPORT
PackagePermission   org.osgi.service.dmt.spi              IMPORT
PackagePermission   org.osgi.service.dmt.security         IMPORT</programlisting>

        <para>The plugin is also required to have any permissions to call its
        underlying services.</para>
      </section>

      <section>
        <title>Local Manager</title>

        <programlisting>ServicePermission   ..DmtAdmin                            GET
PackagePermission   org.osgi.service.dmt                  IMPORT
PackagePermission   org.osgi.service.dmt.security         IMPORT
DmtPermission       &lt;scope&gt;                               ...</programlisting>

        <para>Additionally, the Local Manager requires all permissions that
        are needed by the plugins it addresses.</para>
      </section>

      <section>
        <title>Protocol Adapter</title>

        <para>The Protocol Adapter only requires Dmt Principal Permission for
        the instances that it is permitted to manage. The other permissions
        are taken from the security scope of the principal.</para>

        <programlisting>ServicePermission   ..DmtAdmin                            GET
ServicePermission   ..RemoteAlertSender                   REGISTER
PackagePermission   org.osgi.service.dmt                  IMPORT
PackagePermission   org.osgi.service.dmt.notification.spi IMPORT
PackagePermission   org.osgi.service.dmt.notification     IMPORT
DmtPrincipalPermission &lt;scope&gt;</programlisting>
      </section>
    </section>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.dmt" xml:id="org.osgi.service.dmt" xml:base="../../generated/javadoc/docbook/org.osgi.service.dmt.xml">
   <title>org.osgi.service.dmt</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.dmt-version">Version 2.0</releaseinfo>
      <edition xml:id="org.osgi.service.dmt-version.number">2.0</edition>
   </info>
   <para>
Device Management Tree Package Version 2.0.
 
 </para>
   <para>This package contains the public API for the Device Management Tree 
 manipulations. Permission classes are provided by the 
 <code>org.osgi.service.dmt.security</code> package, and DMT plugin interfaces can be found in
 the <code>org.osgi.service.dmt.spi</code> package.  Asynchronous notifications to remote 
 management servers can be sent using the interfaces in the 
 <code>org.osgi.service.dmt.notification</code> package.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.dmt; version="[2.0,3.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.dmt; version="[2.0,2.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.Acl">
                  <code>Acl</code>
               </link> - <code>Acl</code> is an immutable class representing structured access to DMT ACLs.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.DmtAdmin">
                  <code>DmtAdmin</code>
               </link> - 
An interface providing methods to open sessions and register listeners.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.DmtConstants">
                  <code>DmtConstants</code>
               </link> - 
Defines standard names for <code>DmtAdmin</code>.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.DmtData">
                  <code>DmtData</code>
               </link> - 
An immutable data structure representing the contents of a leaf or interior
 node.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.DmtEvent">
                  <code>DmtEvent</code>
               </link> - 
Event class storing the details of a change in the tree.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.DmtEventListener">
                  <code>DmtEventListener</code>
               </link> - 
Registered implementations of this class are notified via <link linkend="org.osgi.service.dmt.DmtEvent">DmtEvent</link>
 objects about important changes in the tree.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.DmtException">
                  <code>DmtException</code>
               </link> - 
Checked exception received when a DMT operation fails.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.DmtIllegalStateException">
                  <code>DmtIllegalStateException</code>
               </link> - 
Unchecked illegal state exception.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.DmtSession">
                  <code>DmtSession</code>
               </link> - 
DmtSession provides concurrent access to the DMT.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.MetaNode">
                  <code>MetaNode</code>
               </link> - 
The MetaNode contains meta data as standardized by OMA DM but extends it
 (without breaking the compatibility) to provide for better DMT data quality
 in an environment where many software components manipulate this data.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.Uri">
                  <code>Uri</code>
               </link> - 
This class contains static utility methods to manipulate DMT URIs.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="Acl" xml:id="org.osgi.service.dmt.Acl">
      <title>public final class Acl</title>
      <para>
         <code>Acl</code> is an immutable class representing structured access to DMT ACLs.
 Under OMA DM the ACLs are defined as strings with an internal syntax.
 </para>
      <para>
 The methods of this class taking a principal as parameter accept remote
 server IDs (as passed to <link linkend="org.osgi.service.dmt.DmtAdmin.getSession-String-String-int-">DmtAdmin.getSession</link>), as well as " <code>*</code> " indicating any
 principal.
 </para>
      <para>
 The syntax for valid remote server IDs:
 </para>
      <para>
 &lt;<emphasis>server-identifier</emphasis>&gt; ::= All printable characters except
 <code>'='</code>, <code>'&amp;'</code>, <code>'*'</code>, <code>'+'</code> or white-space characters.</para>
      <section role="field" xreflabel="ADD" xml:id="org.osgi.service.dmt.Acl.ADD">
         <title>public static final int ADD = 2</title>
         <para>
Principals holding this permission can issue ADD commands on the node
 having this ACL.
   </para>
      </section>
      <section role="field" xreflabel="ALL_PERMISSION" xml:id="org.osgi.service.dmt.Acl.ALL_PERMISSION">
         <title>public static final int ALL_PERMISSION = 31</title>
         <para>
Principals holding this permission can issue any command on the node
 having this ACL. This permission is the logical OR of <link linkend="org.osgi.service.dmt.Acl.ADD">ADD</link>,
 <link linkend="org.osgi.service.dmt.Acl.DELETE">DELETE</link>, <link linkend="org.osgi.service.dmt.Acl.EXEC">EXEC</link>, <link linkend="org.osgi.service.dmt.Acl.GET">GET</link> and <link linkend="org.osgi.service.dmt.Acl.REPLACE">REPLACE</link>
 permissions.
   </para>
      </section>
      <section role="field" xreflabel="DELETE" xml:id="org.osgi.service.dmt.Acl.DELETE">
         <title>public static final int DELETE = 8</title>
         <para>
Principals holding this permission can issue DELETE commands on the node
 having this ACL.
   </para>
      </section>
      <section role="field" xreflabel="EXEC" xml:id="org.osgi.service.dmt.Acl.EXEC">
         <title>public static final int EXEC = 16</title>
         <para>
Principals holding this permission can issue EXEC commands on the node
 having this ACL.
   </para>
      </section>
      <section role="field" xreflabel="GET" xml:id="org.osgi.service.dmt.Acl.GET">
         <title>public static final int GET = 1</title>
         <para>
Principals holding this permission can issue GET command on the node
 having this ACL.
   </para>
      </section>
      <section role="field" xreflabel="REPLACE" xml:id="org.osgi.service.dmt.Acl.REPLACE">
         <title>public static final int REPLACE = 4</title>
         <para>
Principals holding this permission can issue REPLACE commands on the node
 having this ACL.
   </para>
      </section>
      <section role="method" xreflabel="Acl(String)" xml:id="org.osgi.service.dmt.Acl.Acl-String-">
         <title>public  Acl(String acl)</title>
         <formalpara role="parameter">
            <title>acl</title>
            <para>The string representation of the ACL as defined in OMA DM. If
        <code>null</code> or empty then it represents an empty list of
        principals with no permissions.</para>
         </formalpara>
         <para role="description">
Create an instance of the ACL from its canonical string representation.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if acl is not a valid OMA DM ACL string   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="Acl(String[],int[])" xml:id="org.osgi.service.dmt.Acl.Acl-String---int---">
         <title>public  Acl(String[] principals,int[] permissions)</title>
         <formalpara role="parameter">
            <title>principals</title>
            <para>The array of principals</para>
         </formalpara>
         <formalpara role="parameter">
            <title>permissions</title>
            <para>The array of permissions</para>
         </formalpara>
         <para role="description">
Creates an instance with a specified list of principals and the
 permissions they hold. The two arrays run in parallel, that is
 <code>principals[i]</code> will hold <code>permissions[i]</code> in the ACL.
 </para>
         <para>
 A principal name may not appear multiple times in the 'principals'
 argument. If the "*" principal appears in the array, the
 corresponding permissions will be granted to all principals (regardless
 of whether they appear in the array or not).</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the length of the two arrays are not
         the same, if any array element is invalid, or if a principal
         appears multiple times in the <code>principals</code> array   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="addPermission(String,int)" xml:id="org.osgi.service.dmt.Acl.addPermission-String-int-">
         <title>public synchronized Acl addPermission(String principal,int permissions)</title>
         <formalpara role="parameter">
            <title>principal</title>
            <para>The entity to which permissions should be granted, or
        "*" to grant permissions to all principals.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>permissions</title>
            <para>The permissions to be given. The parameter can be a
        logical <code>or</code> of more permission constants defined in this
        class.</para>
         </formalpara>
         <para role="description">
Create a new <code>Acl</code> instance from this <code>Acl</code> with the given
 permission added for the given principal. The already existing
 permissions of the principal are not affected.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a new <code>Acl</code> instance</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if <code>principal</code> is not a valid
         principal name or if <code>permissions</code> is not a valid
         combination of the permission constants defined in this class   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="deletePermission(String,int)" xml:id="org.osgi.service.dmt.Acl.deletePermission-String-int-">
         <title>public synchronized Acl deletePermission(String principal,int permissions)</title>
         <formalpara role="parameter">
            <title>principal</title>
            <para>The entity from which permissions should be revoked, or
        "*" to revoke permissions from all principals.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>permissions</title>
            <para>The permissions to be revoked. The parameter can be a
        logical <code>or</code> of more permission constants defined in this
        class.</para>
         </formalpara>
         <para role="description">
Create a new <code>Acl</code> instance from this <code>Acl</code> with the given
 permission revoked from the given principal. Other permissions of the
 principal are not affected.
 </para>
         <para>
 Note, that it is not valid to revoke a permission from a specific
 principal if that permission is granted globally to all principals.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a new <code>Acl</code> instance</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if <code>principal</code> is not a valid
         principal name, if <code>permissions</code> is not a valid combination
         of the permission constants defined in this class, or if a
         globally granted permission would have been revoked from a
         specific principal   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.dmt.Acl.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>the object to compare with this <code>Acl</code> instance</para>
         </formalpara>
         <para role="description">
Checks whether the given object is equal to this <code>Acl</code> instance.
 Two <code>Acl</code> instances are equal if they allow the same set of
 permissions for the same set of principals.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the parameter represents the same ACL as this
         instance</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getPermissions(String)" xml:id="org.osgi.service.dmt.Acl.getPermissions-String-">
         <title>public synchronized int getPermissions(String principal)</title>
         <formalpara role="parameter">
            <title>principal</title>
            <para>The entity whose permissions to query, or "*"
        to query the permissions that are granted globally, to all
        principals</para>
         </formalpara>
         <para role="description">
Get the permissions associated to a given principal.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The permissions of the given principal. The returned <code>int</code>
         is a bitmask of the permission constants defined in this class</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if <code>principal</code> is not a valid
         principal name   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getPrincipals()" xml:id="org.osgi.service.dmt.Acl.getPrincipals--">
         <title>public String[] getPrincipals()</title>
         <para role="description">
Get the list of principals who have any kind of permissions on this node.
 The list only includes those principals that have been explicitly
 assigned permissions (so "*" is never returned), globally set
 permissions naturally apply to all other principals as well.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The array of principals having permissions on this node.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.dmt.Acl.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code for this ACL instance. If two <code>Acl</code> instances
 are equal according to the <link linkend="org.osgi.service.dmt.Acl.equals-Object-">equals(Object)</link> method, then calling
 this method on each of them must produce the same integer result.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>hash code for this ACL</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isPermitted(String,int)" xml:id="org.osgi.service.dmt.Acl.isPermitted-String-int-">
         <title>public synchronized boolean isPermitted(String principal,int permissions)</title>
         <formalpara role="parameter">
            <title>principal</title>
            <para>The entity to check, or "*" to check whether
        the given permissions are granted to all principals globally</para>
         </formalpara>
         <formalpara role="parameter">
            <title>permissions</title>
            <para>The permissions to check</para>
         </formalpara>
         <para role="description">
Check whether the given permissions are granted to a certain principal.
 The requested permissions are specified as a bitfield, for example
 <code>(Acl.ADD | Acl.DELETE | Acl.GET)</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the principal holds all the given permissions</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if <code>principal</code> is not a valid
         principal name or if <code>permissions</code> is not a valid
         combination of the permission constants defined in this class   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setPermission(String,int)" xml:id="org.osgi.service.dmt.Acl.setPermission-String-int-">
         <title>public synchronized Acl setPermission(String principal,int permissions)</title>
         <formalpara role="parameter">
            <title>principal</title>
            <para>The entity to which permissions should be granted, or
        "*" to globally grant permissions to all principals.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>permissions</title>
            <para>The set of permissions to be given. The parameter is a
        bitmask of the permission constants defined in this class.</para>
         </formalpara>
         <para role="description">
Create a new <code>Acl</code> instance from this <code>Acl</code> where all
 permissions for the given principal are overwritten with the given
 permissions.
 </para>
         <para>
 Note, that when changing the permissions of a specific principal, it is
 not allowed to specify a set of permissions stricter than the global set
 of permissions (that apply to all principals).</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a new <code>Acl</code> instance</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if <code>principal</code> is not a valid
         principal name, if <code>permissions</code> is not a valid combination
         of the permission constants defined in this class, or if a
         globally granted permission would have been revoked from a
         specific principal   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="toString()" xml:id="org.osgi.service.dmt.Acl.toString--">
         <title>public synchronized String toString()</title>
         <para role="description">
Give the canonical string representation of this ACL. The operations are
 in the following order: {Add, Delete, Exec, Get, Replace}, principal
 names are sorted alphabetically.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The string representation as defined in OMA DM.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="DmtAdmin" xml:id="org.osgi.service.dmt.DmtAdmin">
      <title>public interface DmtAdmin</title>
      <para>
An interface providing methods to open sessions and register listeners. The
 implementation of <code>DmtAdmin</code> should register itself in the OSGi service
 registry as a service. <code>DmtAdmin</code> is the entry point for applications
 to use the DMT API.
 </para>
      <para>
 The <code>getSession</code> methods are used to open a session on a specified
 subtree of the DMT. A typical way of usage:
 
 </para>
      <programlisting> serviceRef = context.getServiceReference(DmtAdmin.class.getName());
 DmtAdmin admin = (DmtAdmin) context.getService(serviceRef);
 DmtSession session = admin.getSession("./OSGi/Configuration");
 session.createInteriorNode("./OSGi/Configuration/my.table");</programlisting>
      <para>
 The methods for opening a session take a node URI (the session root) as a
 parameter. All segments of the given URI must be within the segment length
 limit of the implementation, and the special characters '/' and '\' must be
 escaped (preceded by a '\').
 </para>
      <para>
 See the <link linkend="org.osgi.service.dmt.Uri.encode-String-">Uri.encode(String)</link> method for support on escaping invalid
 characters in a URI.
 </para>
      <para>
 It is possible to specify a lock mode when opening the session (see lock type
 constants in <link linkend="org.osgi.service.dmt.DmtSession">DmtSession</link>). This determines whether the session can run
 in parallel with other sessions, and the kinds of operations that can be
 performed in the session. All Management Objects constituting the device
 management tree must support read operations on their nodes, while support
 for write operations depends on the Management Object. Management Objects
 supporting write access may support transactional write, non-transactional
 write or both. Users of <code>DmtAdmin</code> should consult the Management Object
 specification and implementation for the supported update modes. If
 Management Object definition permits, implementations are encouraged to
 support both update modes.</para>
      <section role="method" xreflabel="getSession(String)" xml:id="org.osgi.service.dmt.DmtAdmin.getSession-String-">
         <title>public DmtSession getSession(String subtreeUri) throws DmtException</title>
         <formalpara role="parameter">
            <title>subtreeUri</title>
            <para>the subtree on which DMT manipulations can be performed
        within the returned session</para>
         </formalpara>
         <para role="description">
Opens a <code>DmtSession</code> for local usage on a given subtree of the DMT
 with non transactional write lock. This call is equivalent to the
 following:
 <code>getSession(null, subtreeUri, DmtSession.LOCK_TYPE_EXCLUSIVE)</code>
         </para>
         <para>
 The <code>subtreeUri</code> parameter must contain an absolute URI. It can
 also be <code>null</code>, in this case the session is opened with the default
 session root, ".", that gives access to the whole tree.
 </para>
         <para>
 To perform this operation the caller must have <code>DmtPermission</code> for
 the <code>subtreeUri</code> node with the Get action present.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a <code>DmtSession</code> object for the requested subtree</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>subtreeUri</code> is syntactically
         invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if <code>subtreeUri</code> is
         longer than accepted by the <code>DmtAdmin</code> implementation
         (especially on systems with limited resources)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>subtreeUri</code> specifies a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>SESSION_CREATION_TIMEOUT</code> if
         the operation timed out because of another ongoing session</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if <code>subtreeUri</code> specifies a
         relative URI, or some unspecified error is encountered while
         attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have
         <code>DmtPermission</code> for the given root node with the Get action
         present   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getSession(String,int)" xml:id="org.osgi.service.dmt.DmtAdmin.getSession-String-int-">
         <title>public DmtSession getSession(String subtreeUri,int lockMode) throws DmtException</title>
         <formalpara role="parameter">
            <title>subtreeUri</title>
            <para>the subtree on which DMT manipulations can be performed
        within the returned session</para>
         </formalpara>
         <formalpara role="parameter">
            <title>lockMode</title>
            <para>one of the lock modes specified in <code>DmtSession</code>
            </para>
         </formalpara>
         <para role="description">
Opens a <code>DmtSession</code> for local usage on a specific DMT subtree with
 a given lock mode. This call is equivalent to the following:
 <code>getSession(null, subtreeUri, lockMode)</code>
         </para>
         <para>
 The <code>subtreeUri</code> parameter must contain an absolute URI. It can
 also be <code>null</code>, in this case the session is opened with the default
 session root, ".", that gives access to the whole tree.
 </para>
         <para>
 To perform this operation the caller must have <code>DmtPermission</code> for
 the <code>subtreeUri</code> node with the Get action present.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a <code>DmtSession</code> object for the requested subtree</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>subtreeUri</code> is syntactically
         invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if <code>subtreeUri</code> is
         longer than accepted by the <code>DmtAdmin</code> implementation
         (especially on systems with limited resources)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>subtreeUri</code> specifies a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>FEATURE_NOT_SUPPORTED</code> if
         atomic sessions are not supported by the implementation and
         <code>lockMode</code> requests an atomic session</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>SESSION_CREATION_TIMEOUT</code> if the operation timed out
         because of another ongoing session</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if <code>subtreeUri</code> specifies a relative
         URI, if <code>lockMode</code> is unknown, or some unspecified error is
         encountered while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have
         <code>DmtPermission</code> for the given root node with the Get action
         present   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getSession(String,String,int)" xml:id="org.osgi.service.dmt.DmtAdmin.getSession-String-String-int-">
         <title>public DmtSession getSession(String principal,String subtreeUri,int lockMode) throws DmtException</title>
         <formalpara role="parameter">
            <title>principal</title>
            <para>the identifier of the remote server on whose behalf the
        data manipulation is performed, or <code>null</code> for local sessions</para>
         </formalpara>
         <formalpara role="parameter">
            <title>subtreeUri</title>
            <para>the subtree on which DMT manipulations can be performed
        within the returned session</para>
         </formalpara>
         <formalpara role="parameter">
            <title>lockMode</title>
            <para>one of the lock modes specified in <code>DmtSession</code>
            </para>
         </formalpara>
         <para role="description">
Opens a <code>DmtSession</code> on a specific DMT subtree using a specific
 lock mode on behalf of a remote principal. If local management
 applications are using this method then they should provide <code>null</code>
 as the first parameter. Alternatively they can use other forms of this
 method without providing a principal string.
 </para>
         <para>
 The <code>subtreeUri</code> parameter must contain an absolute URI. It can
 also be <code>null</code>, in this case the session is opened with the default
 session root, ".", that gives access to the whole tree.
 </para>
         <para>
 This method is guarded by <code>DmtPrincipalPermission</code> in case of
 remote sessions. In addition, the caller must have Get access rights (ACL
 in case of remote sessions, <code>DmtPermission</code> in case of local
 sessions) on the <code>subtreeUri</code> node to perform this operation.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a <code>DmtSession</code> object for the requested subtree</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>subtreeUri</code> is syntactically
         invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if <code>subtreeUri</code> is
         longer than accepted by the <code>DmtAdmin</code> implementation
         (especially on systems with limited resources)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>subtreeUri</code> specifies a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if
         <code>principal</code> is not <code>null</code> and the ACL of the node
         does not allow the <code>Get</code> operation for the principal on the
         given root node </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>FEATURE_NOT_SUPPORTED</code> if atomic
         sessions are not supported by the implementation and
         <code>lockMode</code> requests an atomic session</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>SESSION_CREATION_TIMEOUT</code> if the operation timed out
         because of another ongoing session</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if <code>subtreeUri</code> specifies a relative
         URI, if <code>lockMode</code> is unknown, or some unspecified error is
         encountered while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– in case of remote sessions, if the caller does
         not have the required <code>DmtPrincipalPermission</code> with a
         target matching the <code>principal</code> parameter, or in case of
         local sessions, if the caller does not have <code>DmtPermission</code>
         for the given root node with the Get action present   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="DmtConstants" xml:id="org.osgi.service.dmt.DmtConstants">
      <title>public class DmtConstants</title>
      <para>
Defines standard names for <code>DmtAdmin</code>.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>2.0</para>
      </formalpara>
      <section role="field" xreflabel="DDF_LIST" xml:id="org.osgi.service.dmt.DmtConstants.DDF_LIST">
         <title>public static final String DDF_LIST = "org.osgi/1.0/LIST"</title>
         <para>
A string defining a DDF URI, indicating that the node is a LIST node.
   </para>
      </section>
      <section role="field" xreflabel="DDF_MAP" xml:id="org.osgi.service.dmt.DmtConstants.DDF_MAP">
         <title>public static final String DDF_MAP = "org.osgi/1.0/MAP"</title>
         <para>
A string defining a DDF URI, indicating that the node is a MAP node.
   </para>
      </section>
      <section role="field" xreflabel="DDF_SCAFFOLD" xml:id="org.osgi.service.dmt.DmtConstants.DDF_SCAFFOLD">
         <title>public static final String DDF_SCAFFOLD = "org.osgi/1.0/SCAFFOLD"</title>
         <para>
A string defining a DDF URI, indicating that the node is a SCAFFOLD node.
   </para>
      </section>
      <section role="field" xreflabel="EVENT_PROPERTY_NEW_NODES" xml:id="org.osgi.service.dmt.DmtConstants.EVENT_PROPERTY_NEW_NODES">
         <title>public static final String EVENT_PROPERTY_NEW_NODES = "newnodes"</title>
         <para>
A string defining the property key for the <code>newnodes</code> property in
 node related events.
   </para>
      </section>
      <section role="field" xreflabel="EVENT_PROPERTY_NODES" xml:id="org.osgi.service.dmt.DmtConstants.EVENT_PROPERTY_NODES">
         <title>public static final String EVENT_PROPERTY_NODES = "nodes"</title>
         <para>
A string defining the property key for the @{code nodes} property in node
 related events.
   </para>
      </section>
      <section role="field" xreflabel="EVENT_PROPERTY_SESSION_ID" xml:id="org.osgi.service.dmt.DmtConstants.EVENT_PROPERTY_SESSION_ID">
         <title>public static final String EVENT_PROPERTY_SESSION_ID = "session.id"</title>
         <para>
A string defining the property key for the <code>session.id</code> property in
 node related events.
   </para>
      </section>
      <section role="field" xreflabel="EVENT_TOPIC_ADDED" xml:id="org.osgi.service.dmt.DmtConstants.EVENT_TOPIC_ADDED">
         <title>public static final String EVENT_TOPIC_ADDED = "org/osgi/service/dmt/DmtEvent/ADDED"</title>
         <para>
A string defining the topic for the event that is sent for added nodes.
   </para>
      </section>
      <section role="field" xreflabel="EVENT_TOPIC_COPIED" xml:id="org.osgi.service.dmt.DmtConstants.EVENT_TOPIC_COPIED">
         <title>public static final String EVENT_TOPIC_COPIED = "org/osgi/service/dmt/DmtEvent/COPIED"</title>
         <para>
A string defining the topic for the event that is sent for copied nodes.
   </para>
      </section>
      <section role="field" xreflabel="EVENT_TOPIC_DELETED" xml:id="org.osgi.service.dmt.DmtConstants.EVENT_TOPIC_DELETED">
         <title>public static final String EVENT_TOPIC_DELETED = "org/osgi/service/dmt/DmtEvent/DELETED"</title>
         <para>
A string defining the topic for the event that is sent for deleted nodes.
   </para>
      </section>
      <section role="field" xreflabel="EVENT_TOPIC_RENAMED" xml:id="org.osgi.service.dmt.DmtConstants.EVENT_TOPIC_RENAMED">
         <title>public static final String EVENT_TOPIC_RENAMED = "org/osgi/service/dmt/DmtEvent/RENAMED"</title>
         <para>
A string defining the topic for the event that is sent for renamed nodes.
   </para>
      </section>
      <section role="field" xreflabel="EVENT_TOPIC_REPLACED" xml:id="org.osgi.service.dmt.DmtConstants.EVENT_TOPIC_REPLACED">
         <title>public static final String EVENT_TOPIC_REPLACED = "org/osgi/service/dmt/DmtEvent/REPLACED"</title>
         <para>
A string defining the topic for the event that is sent for replaced
 nodes.
   </para>
      </section>
      <section role="field" xreflabel="EVENT_TOPIC_SESSION_CLOSED" xml:id="org.osgi.service.dmt.DmtConstants.EVENT_TOPIC_SESSION_CLOSED">
         <title>public static final String EVENT_TOPIC_SESSION_CLOSED = "org/osgi/service/dmt/DmtEvent/SESSION_CLOSED"</title>
         <para>
A string defining the topic for the event that is sent for a closed
 session.
   </para>
      </section>
      <section role="field" xreflabel="EVENT_TOPIC_SESSION_OPENED" xml:id="org.osgi.service.dmt.DmtConstants.EVENT_TOPIC_SESSION_OPENED">
         <title>public static final String EVENT_TOPIC_SESSION_OPENED = "org/osgi/service/dmt/DmtEvent/SESSION_OPENED"</title>
         <para>
A string defining the topic for the event that is sent for a newly opened
 session.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="DmtData" xml:id="org.osgi.service.dmt.DmtData">
      <title>public final class DmtData</title>
      <para>
An immutable data structure representing the contents of a leaf or interior
 node. This structure represents only the value and the format property of the
 node, all other properties (like MIME type) can be set and read using the
 <code>DmtSession</code> interface.
 </para>
      <para>
 Different constructors are available to create nodes with different formats.
 Nodes of <code>null</code> format can be created using the static
 <link linkend="org.osgi.service.dmt.DmtData.NULL_VALUE">NULL_VALUE</link> constant instance of this class.
 </para>
      <para>
         <link linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_BINARY">FORMAT_RAW_BINARY</link> and <link linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_STRING">FORMAT_RAW_STRING</link> enable the support
 of future data formats. When using these formats, the actual format name is
 specified as a <code>String</code>. The application is responsible for the proper
 encoding of the data according to the specified format.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="FALSE_VALUE" xml:id="org.osgi.service.dmt.DmtData.FALSE_VALUE">
         <title>public static final DmtData FALSE_VALUE</title>
         <para>
Constant instance representing a boolean <code>false</code> value.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>2.0</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="FORMAT_BASE64" xml:id="org.osgi.service.dmt.DmtData.FORMAT_BASE64">
         <title>public static final int FORMAT_BASE64 = 128</title>
         <para>
The node holds an OMA DM <code>b64</code> value. Like <link linkend="org.osgi.service.dmt.DmtData.FORMAT_BINARY">FORMAT_BINARY</link>,
 this format is also represented by the Java <code>byte[]</code> type, the
 difference is only in the corresponding OMA DM format.
 
 This format does not affect the internal storage format of the data as
 <code>byte[]</code>. It is intended as a hint for the external representation
 of this data. Protocol Adapters can use this hint for their further
 processing.
   </para>
      </section>
      <section role="field" xreflabel="FORMAT_BINARY" xml:id="org.osgi.service.dmt.DmtData.FORMAT_BINARY">
         <title>public static final int FORMAT_BINARY = 64</title>
         <para>
The node holds an OMA DM <code>bin</code> value. The value of the node
 corresponds to the Java <code>byte[]</code> type.
   </para>
      </section>
      <section role="field" xreflabel="FORMAT_BOOLEAN" xml:id="org.osgi.service.dmt.DmtData.FORMAT_BOOLEAN">
         <title>public static final int FORMAT_BOOLEAN = 8</title>
         <para>
The node holds an OMA DM <code>bool</code> value.
   </para>
      </section>
      <section role="field" xreflabel="FORMAT_DATE" xml:id="org.osgi.service.dmt.DmtData.FORMAT_DATE">
         <title>public static final int FORMAT_DATE = 16</title>
         <para>
The node holds an OMA DM <code>date</code> value.
   </para>
      </section>
      <section role="field" xreflabel="FORMAT_DATE_TIME" xml:id="org.osgi.service.dmt.DmtData.FORMAT_DATE_TIME">
         <title>public static final int FORMAT_DATE_TIME = 16384</title>
         <para>
The node holds a Date object. If the getTime() equals zero then the date
 time is not known. If the getTime() is negative it must be interpreted as
 a relative number of milliseconds.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>2.0</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="FORMAT_FLOAT" xml:id="org.osgi.service.dmt.DmtData.FORMAT_FLOAT">
         <title>public static final int FORMAT_FLOAT = 2</title>
         <para>
The node holds an OMA DM <code>float</code> value.
   </para>
      </section>
      <section role="field" xreflabel="FORMAT_INTEGER" xml:id="org.osgi.service.dmt.DmtData.FORMAT_INTEGER">
         <title>public static final int FORMAT_INTEGER = 1</title>
         <para>
The node holds an OMA DM <code>int</code> value.
   </para>
      </section>
      <section role="field" xreflabel="FORMAT_LONG" xml:id="org.osgi.service.dmt.DmtData.FORMAT_LONG">
         <title>public static final int FORMAT_LONG = 8192</title>
         <para>
The node holds a long value. The <link linkend="org.osgi.service.dmt.DmtData.getFormatName--">getFormatName()</link> method can be
 used to get the actual format name.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>2.0</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="FORMAT_NODE" xml:id="org.osgi.service.dmt.DmtData.FORMAT_NODE">
         <title>public static final int FORMAT_NODE = 1024</title>
         <para>
Format specifier of an internal node. An interior node can hold a Java
 object as value (see <link linkend="org.osgi.service.dmt.DmtData.DmtData-Object-">DmtData.DmtData(Object)</link> and
 <link linkend="org.osgi.service.dmt.DmtData.getNode--">DmtData.getNode()</link>). This value can be used by Java programs that
 know a specific URI understands the associated Java type. This type is
 further used as a return value of the <link linkend="org.osgi.service.dmt.MetaNode.getFormat--">MetaNode.getFormat()</link> method
 for interior nodes.
   </para>
      </section>
      <section role="field" xreflabel="FORMAT_NULL" xml:id="org.osgi.service.dmt.DmtData.FORMAT_NULL">
         <title>public static final int FORMAT_NULL = 512</title>
         <para>
The node holds an OMA DM <code>null</code> value. This corresponds to the Java
 <code>null</code> type.
   </para>
      </section>
      <section role="field" xreflabel="FORMAT_RAW_BINARY" xml:id="org.osgi.service.dmt.DmtData.FORMAT_RAW_BINARY">
         <title>public static final int FORMAT_RAW_BINARY = 4096</title>
         <para>
The node holds raw protocol data encoded in binary format. The
 <link linkend="org.osgi.service.dmt.DmtData.getFormatName--">getFormatName()</link> method can be used to get the actual format
 name.
   </para>
      </section>
      <section role="field" xreflabel="FORMAT_RAW_STRING" xml:id="org.osgi.service.dmt.DmtData.FORMAT_RAW_STRING">
         <title>public static final int FORMAT_RAW_STRING = 2048</title>
         <para>
The node holds raw protocol data encoded as <code>String</code>. The
 <link linkend="org.osgi.service.dmt.DmtData.getFormatName--">getFormatName()</link> method can be used to get the actual format
 name.
   </para>
      </section>
      <section role="field" xreflabel="FORMAT_STRING" xml:id="org.osgi.service.dmt.DmtData.FORMAT_STRING">
         <title>public static final int FORMAT_STRING = 4</title>
         <para>
The node holds an OMA DM <code>chr</code> value.
   </para>
      </section>
      <section role="field" xreflabel="FORMAT_TIME" xml:id="org.osgi.service.dmt.DmtData.FORMAT_TIME">
         <title>public static final int FORMAT_TIME = 32</title>
         <para>
The node holds an OMA DM <code>time</code> value.
   </para>
      </section>
      <section role="field" xreflabel="FORMAT_XML" xml:id="org.osgi.service.dmt.DmtData.FORMAT_XML">
         <title>public static final int FORMAT_XML = 256</title>
         <para>
The node holds an OMA DM <code>xml</code> value.
   </para>
      </section>
      <section role="field" xreflabel="NULL_VALUE" xml:id="org.osgi.service.dmt.DmtData.NULL_VALUE">
         <title>public static final DmtData NULL_VALUE</title>
         <para>
Constant instance representing a leaf node of <code>null</code> format.
   </para>
      </section>
      <section role="field" xreflabel="TRUE_VALUE" xml:id="org.osgi.service.dmt.DmtData.TRUE_VALUE">
         <title>public static final DmtData TRUE_VALUE</title>
         <para>
Constant instance representing a boolean <code>true</code> value.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>2.0</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="DmtData(String)" xml:id="org.osgi.service.dmt.DmtData.DmtData-String-">
         <title>public  DmtData(String string)</title>
         <formalpara role="parameter">
            <title>string</title>
            <para>the string value to set</para>
         </formalpara>
         <para role="description">
Create a <code>DmtData</code> instance of <code>chr</code> format with the given
 string value. The <code>null</code> string argument is valid.
   </para>
      </section>
      <section role="method" xreflabel="DmtData(Date)" xml:id="org.osgi.service.dmt.DmtData.DmtData-Date-">
         <title>public  DmtData(Date date)</title>
         <formalpara role="parameter">
            <title>date</title>
            <para>the Date object to set</para>
         </formalpara>
         <para role="description">
Create a <code>DmtData</code> instance of <code>dateTime</code> format with the
 given Date value. The given Date value must be a non-null <code>Date</code>
 object.
   </para>
      </section>
      <section role="method" xreflabel="DmtData(Object)" xml:id="org.osgi.service.dmt.DmtData.DmtData-Object-">
         <title>public  DmtData(Object complex)</title>
         <formalpara role="parameter">
            <title>complex</title>
            <para>the complex data object to set</para>
         </formalpara>
         <para role="description">
Create a <code>DmtData</code> instance of <code>node</code> format with the given
 object value. The value represents complex data associated with an
 interior node.
 </para>
         <para>
 Certain interior nodes can support access to their subtrees through such
 complex values, making it simpler to retrieve or update all leaf nodes in
 a subtree.
 </para>
         <para>
 The given value must be a non-<code>null</code> immutable object.</para>
      </section>
      <section role="method" xreflabel="DmtData(String,int)" xml:id="org.osgi.service.dmt.DmtData.DmtData-String-int-">
         <title>public  DmtData(String value,int format)</title>
         <formalpara role="parameter">
            <title>value</title>
            <para>the string, XML, date, or time value to set</para>
         </formalpara>
         <formalpara role="parameter">
            <title>format</title>
            <para>the format of the <code>DmtData</code> instance to be created,
        must be one of the formats specified above</para>
         </formalpara>
         <para role="description">
Create a <code>DmtData</code> instance of the specified format and set its
 value based on the given string. Only the following string-based formats
 can be created using this constructor:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dmt.DmtData.FORMAT_STRING">FORMAT_STRING</link> - value can be any string</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dmt.DmtData.FORMAT_XML">FORMAT_XML</link> - value must contain an XML fragment (the
 validity is not checked by this constructor)</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dmt.DmtData.FORMAT_DATE">FORMAT_DATE</link> - value must be parsable to an ISO 8601 calendar
 date in complete representation, basic format (pattern <code>CCYYMMDD</code>)</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dmt.DmtData.FORMAT_TIME">FORMAT_TIME</link> - value must be parsable to an ISO 8601 time of
 day in either local time, complete representation, basic format (pattern
 <code>hhmmss</code>) or Coordinated Universal Time, basic format (pattern
 <code>hhmmssZ</code>)</para>
            </listitem>
         </itemizedlist>
         <para>
 * The <code>null</code> string argument is only valid if the format is string
 or XML.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if <code>format</code> is not one of the
         allowed formats, or <code>value</code> is not a valid string for the
         given format   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– if a string, XML, date, or time is
         constructed and <code>value</code> is <code>null</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="DmtData(int)" xml:id="org.osgi.service.dmt.DmtData.DmtData-int-">
         <title>public  DmtData(int integer)</title>
         <formalpara role="parameter">
            <title>integer</title>
            <para>the integer value to set</para>
         </formalpara>
         <para role="description">
Create a <code>DmtData</code> instance of <code>int</code> format and set its
 value.
   </para>
      </section>
      <section role="method" xreflabel="DmtData(float)" xml:id="org.osgi.service.dmt.DmtData.DmtData-float-">
         <title>public  DmtData(float flt)</title>
         <formalpara role="parameter">
            <title>flt</title>
            <para>the float value to set</para>
         </formalpara>
         <para role="description">
Create a <code>DmtData</code> instance of <code>float</code> format and set its
 value.
   </para>
      </section>
      <section role="method" xreflabel="DmtData(long)" xml:id="org.osgi.service.dmt.DmtData.DmtData-long-">
         <title>public  DmtData(long lng)</title>
         <formalpara role="parameter">
            <title>lng</title>
            <para>the long value to set</para>
         </formalpara>
         <para role="description">
Create a <code>DmtData</code> instance of <code>long</code> format and set its
 value.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>2.0</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="DmtData(boolean)" xml:id="org.osgi.service.dmt.DmtData.DmtData-boolean-">
         <title>public  DmtData(boolean bool)</title>
         <formalpara role="parameter">
            <title>bool</title>
            <para>the boolean value to set</para>
         </formalpara>
         <para role="description">
Create a <code>DmtData</code> instance of <code>bool</code> format and set its
 value.
   </para>
      </section>
      <section role="method" xreflabel="DmtData(byte[])" xml:id="org.osgi.service.dmt.DmtData.DmtData-byte---">
         <title>public  DmtData(byte[] bytes)</title>
         <formalpara role="parameter">
            <title>bytes</title>
            <para>the byte array to set, must not be <code>null</code>
            </para>
         </formalpara>
         <para role="description">
Create a <code>DmtData</code> instance of <code>bin</code> format and set its
 value.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– if <code>bytes</code> is <code>null</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="DmtData(byte[],boolean)" xml:id="org.osgi.service.dmt.DmtData.DmtData-byte---boolean-">
         <title>public  DmtData(byte[] bytes,boolean base64)</title>
         <formalpara role="parameter">
            <title>bytes</title>
            <para>the byte array to set, must not be <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>base64</title>
            <para>if <code>true</code>, the new instance will have <code>b64</code>
        format, if <code>false</code>, it will have <code>bin</code> format</para>
         </formalpara>
         <para role="description">
Create a <code>DmtData</code> instance of <code>bin</code> or <code>b64</code> format
 and set its value. The chosen format is specified by the <code>base64</code>
 parameter.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– if <code>bytes</code> is <code>null</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="DmtData(byte[],int)" xml:id="org.osgi.service.dmt.DmtData.DmtData-byte---int-">
         <title>public  DmtData(byte[] bytes,int format)</title>
         <formalpara role="parameter">
            <title>bytes</title>
            <para>the byte array to set, must not be <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>format</title>
            <para>the format of the DmtData instance to be created, must be
        one of the formats specified above</para>
         </formalpara>
         <para role="description">
Create a <code>DmtData</code> instance of the specified format and set its
 value based on the given <code>byte[]</code>. Only the following
 <code>byte[]</code> based formats can be created using this constructor:
 
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dmt.DmtData.FORMAT_BINARY">FORMAT_BINARY</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dmt.DmtData.FORMAT_BASE64">FORMAT_BASE64</link>
               </para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if format is not one of the allowed
         formats   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– if <code>bytes</code> is <code>null</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="DmtData(String,String)" xml:id="org.osgi.service.dmt.DmtData.DmtData-String-String-">
         <title>public  DmtData(String formatName,String data)</title>
         <formalpara role="parameter">
            <title>formatName</title>
            <para>the name of the format, must not be <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>data</title>
            <para>the data encoded according to the specified format, must not
        be <code>null</code>
            </para>
         </formalpara>
         <para role="description">
Create a <code>DmtData</code> instance in <link linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_STRING">FORMAT_RAW_STRING</link> format.
 The data is provided encoded as a <code>String</code>. The actual data format
 is specified in <code>formatName</code>. The encoding used in <code>data</code>
 must conform to this format.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– if <code>formatName</code> or <code>data</code> is
         <code>null</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="DmtData(String,byte[])" xml:id="org.osgi.service.dmt.DmtData.DmtData-String-byte---">
         <title>public  DmtData(String formatName,byte[] data)</title>
         <formalpara role="parameter">
            <title>formatName</title>
            <para>the name of the format, must not be <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>data</title>
            <para>the data encoded according to the specified format, must not
        be <code>null</code>
            </para>
         </formalpara>
         <para role="description">
Create a <code>DmtData</code> instance in <link linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_BINARY">FORMAT_RAW_BINARY</link> format.
 The data is provided encoded as binary. The actual data format is
 specified in <code>formatName</code>. The encoding used in <code>data</code> must
 conform to this format.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– if <code>formatName</code> or <code>data</code> is
         <code>null</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.dmt.DmtData.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>the object to compare with this <code>DmtData</code>
            </para>
         </formalpara>
         <para role="description">
Compares the specified object with this <code>DmtData</code> instance. Two
 <code>DmtData</code> objects are considered equal if their format is the same,
 and their data (selected by the format) is equal.
 </para>
         <para>
 In case of <link linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_BINARY">FORMAT_RAW_BINARY</link> and <link linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_STRING">FORMAT_RAW_STRING</link> the
 textual name of the data format - as returned by <link linkend="org.osgi.service.dmt.DmtData.getFormatName--">getFormatName()</link>
 - must be equal as well.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if the argument represents the same <code>DmtData</code> as this
         object</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getBase64()" xml:id="org.osgi.service.dmt.DmtData.getBase64--">
         <title>public byte[] getBase64()</title>
         <para role="description">
Gets the value of a node with base 64 (<code>b64</code>) format.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the binary value</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the format of the node is not base
         64.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getBinary()" xml:id="org.osgi.service.dmt.DmtData.getBinary--">
         <title>public byte[] getBinary()</title>
         <para role="description">
Gets the value of a node with binary (<code>bin</code>) format.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the binary value</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the format of the node is not binary   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getBoolean()" xml:id="org.osgi.service.dmt.DmtData.getBoolean--">
         <title>public boolean getBoolean()</title>
         <para role="description">
Gets the value of a node with boolean (<code>bool</code>) format.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the boolean value</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the format of the node is not boolean   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getDate()" xml:id="org.osgi.service.dmt.DmtData.getDate--">
         <title>public String getDate()</title>
         <para role="description">
Gets the value of a node with date format. The returned date string is
 formatted according to the ISO 8601 definition of a calendar date in
 complete representation, basic format (pattern <code>CCYYMMDD</code>).
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the date value</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the format of the node is not date   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getDateTime()" xml:id="org.osgi.service.dmt.DmtData.getDateTime--">
         <title>public Date getDateTime()</title>
         <para role="description">
Gets the value of a node with <code>dateTime</code> format.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the Date value</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the format of the node is not time   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>2.0</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFloat()" xml:id="org.osgi.service.dmt.DmtData.getFloat--">
         <title>public float getFloat()</title>
         <para role="description">
Gets the value of a node with <code>float</code> format.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the float value</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the format of the node is not
         <code>float</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFormat()" xml:id="org.osgi.service.dmt.DmtData.getFormat--">
         <title>public int getFormat()</title>
         <para role="description">
Get the node's format, expressed in terms of type constants defined in
 this class. Note that the 'format' term is a legacy from OMA DM, it is
 more customary to think of this as 'type'.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the format of the node</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFormatName()" xml:id="org.osgi.service.dmt.DmtData.getFormatName--">
         <title>public String getFormatName()</title>
         <para role="description">
Returns the format of this <code>DmtData</code> as <code>String</code>. For the
 predefined data formats this is the OMA DM defined name of the format.
 For <link linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_STRING">FORMAT_RAW_STRING</link> and <link linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_BINARY">FORMAT_RAW_BINARY</link> this is the
 format specified when the object was created.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the format name as <code>String</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getInt()" xml:id="org.osgi.service.dmt.DmtData.getInt--">
         <title>public int getInt()</title>
         <para role="description">
Gets the value of a node with integer (<code>int</code>) format.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the integer value</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the format of the node is not integer   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getLong()" xml:id="org.osgi.service.dmt.DmtData.getLong--">
         <title>public long getLong()</title>
         <para role="description">
Gets the value of a node with long format.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the long value</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the format of the node is not long   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>2.0</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getNode()" xml:id="org.osgi.service.dmt.DmtData.getNode--">
         <title>public Object getNode()</title>
         <para role="description">
Gets the complex data associated with an interior node (<code>node</code>
 format).
 </para>
         <para>
 Certain interior nodes can support access to their subtrees through
 complex values, making it simpler to retrieve or update all leaf nodes in
 the subtree.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the data object associated with an interior node</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the format of the data is not
         <code>node</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRawBinary()" xml:id="org.osgi.service.dmt.DmtData.getRawBinary--">
         <title>public byte[] getRawBinary()</title>
         <para role="description">
Gets the value of a node in raw binary (<link linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_BINARY">FORMAT_RAW_BINARY</link>)
 format.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the data value in raw binary format</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the format of the node is not raw
         binary   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRawString()" xml:id="org.osgi.service.dmt.DmtData.getRawString--">
         <title>public String getRawString()</title>
         <para role="description">
Gets the value of a node in raw <code>String</code> (
 <link linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_STRING">FORMAT_RAW_STRING</link>) format.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the data value in raw <code>String</code> format</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the format of the node is not raw
         <code>String</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getSize()" xml:id="org.osgi.service.dmt.DmtData.getSize--">
         <title>public int getSize()</title>
         <para role="description">
Get the size of the data. The returned value depends on the format of
 data in the node:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dmt.DmtData.FORMAT_STRING">FORMAT_STRING</link>, <link linkend="org.osgi.service.dmt.DmtData.FORMAT_XML">FORMAT_XML</link>, <link linkend="org.osgi.service.dmt.DmtData.FORMAT_BINARY">FORMAT_BINARY</link>,
 <link linkend="org.osgi.service.dmt.DmtData.FORMAT_BASE64">FORMAT_BASE64</link>, <link linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_STRING">FORMAT_RAW_STRING</link>, and
 <link linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_BINARY">FORMAT_RAW_BINARY</link>: the length of the stored data, or 0 if the
 data is <code>null</code>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dmt.DmtData.FORMAT_INTEGER">FORMAT_INTEGER</link> and <link linkend="org.osgi.service.dmt.DmtData.FORMAT_FLOAT">FORMAT_FLOAT</link>: 4</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dmt.DmtData.FORMAT_LONG">FORMAT_LONG</link> and <link linkend="org.osgi.service.dmt.DmtData.FORMAT_DATE_TIME">FORMAT_DATE_TIME</link>: 8</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dmt.DmtData.FORMAT_DATE">FORMAT_DATE</link> and <link linkend="org.osgi.service.dmt.DmtData.FORMAT_TIME">FORMAT_TIME</link>: the length of the date
 or time in its string representation</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dmt.DmtData.FORMAT_BOOLEAN">FORMAT_BOOLEAN</link>: 1</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dmt.DmtData.FORMAT_NODE">FORMAT_NODE</link>: -1 (unknown)</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dmt.DmtData.FORMAT_NULL">FORMAT_NULL</link>: 0</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the size of the data stored by this object</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getString()" xml:id="org.osgi.service.dmt.DmtData.getString--">
         <title>public String getString()</title>
         <para role="description">
Gets the value of a node with string (<code>chr</code>) format.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the string value</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the format of the node is not string   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getTime()" xml:id="org.osgi.service.dmt.DmtData.getTime--">
         <title>public String getTime()</title>
         <para role="description">
Gets the value of a node with time format. The returned time string is
 formatted according to the ISO 8601 definition of the time of day. The
 exact format depends on the value the object was initialized with: either
 local time, complete representation, basic format (pattern <code>hhmmss</code>
 ) or Coordinated Universal Time, basic format (pattern <code>hhmmssZ</code>).
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the time value</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the format of the node is not time   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getXml()" xml:id="org.osgi.service.dmt.DmtData.getXml--">
         <title>public String getXml()</title>
         <para role="description">
Gets the value of a node with <code>xml</code> format.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the XML value</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the format of the node is not
         <code>xml</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.dmt.DmtData.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code value for this <code>DmtData</code> instance. The hash
 code is calculated based on the data (selected by the format) of this
 object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the hash code value for this object</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="toString()" xml:id="org.osgi.service.dmt.DmtData.toString--">
         <title>public String toString()</title>
         <para role="description">
Gets the string representation of the <code>DmtData</code>. This method works
 for all formats.
 </para>
         <para>
 For string format data - including <link linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_STRING">FORMAT_RAW_STRING</link> - the
 string value itself is returned, while for XML, date, time, integer,
 float, boolean, long and node formats the string form of the value is
 returned. Binary - including <link linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_BINARY">FORMAT_RAW_BINARY</link> - base64 data is
 represented by two-digit hexadecimal numbers for each byte separated by
 spaces. The <link linkend="org.osgi.service.dmt.DmtData.NULL_VALUE">NULL_VALUE</link> data has the string form of "
 <code>null</code>". Data of string or XML format containing the Java
 <code>null</code> value is represented by an empty string. DateTime data is
 formatted as <code>yyyy-MM-dd'T'HH:mm:SS'Z'</code>).</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the string representation of this <code>DmtData</code> instance</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="DmtEvent" xml:id="org.osgi.service.dmt.DmtEvent">
      <title>public interface DmtEvent</title>
      <para>
Event class storing the details of a change in the tree. <code>DmtEvent</code> is
 used by <code>DmtAdmin</code> to notify registered <link linkend="org.osgi.service.dmt.DmtEventListener">EventListeners</link> services about important changes. Events are generated after
 every successful DMT change, and also when sessions are opened or closed. If
 a <link linkend="org.osgi.service.dmt.DmtSession">DmtSession</link> is opened in atomic mode, DMT events are only sent when
 the session is committed, when the changes are actually performed.
 </para>
      <para>
 The <code>type</code> of the event describes the change that triggered the event
 delivery. Each event carries the unique identifier of the session in which
 the described change happened or -1 when the change originated outside a
 session. The events describing changes in the DMT carry the list of affected
 nodes. In case of <link linkend="org.osgi.service.dmt.DmtEvent.COPIED">COPIED</link> or <link linkend="org.osgi.service.dmt.DmtEvent.RENAMED">RENAMED</link> events, the event
 carries the list of new nodes as well.</para>
      <section role="field" xreflabel="ADDED" xml:id="org.osgi.service.dmt.DmtEvent.ADDED">
         <title>public static final int ADDED = 1</title>
         <para>
Event type indicating nodes that were added.
   </para>
      </section>
      <section role="field" xreflabel="COPIED" xml:id="org.osgi.service.dmt.DmtEvent.COPIED">
         <title>public static final int COPIED = 2</title>
         <para>
Event type indicating nodes that were copied.
   </para>
      </section>
      <section role="field" xreflabel="DELETED" xml:id="org.osgi.service.dmt.DmtEvent.DELETED">
         <title>public static final int DELETED = 4</title>
         <para>
Event type indicating nodes that were deleted.
   </para>
      </section>
      <section role="field" xreflabel="RENAMED" xml:id="org.osgi.service.dmt.DmtEvent.RENAMED">
         <title>public static final int RENAMED = 8</title>
         <para>
Event type indicating nodes that were renamed.
   </para>
      </section>
      <section role="field" xreflabel="REPLACED" xml:id="org.osgi.service.dmt.DmtEvent.REPLACED">
         <title>public static final int REPLACED = 16</title>
         <para>
Event type indicating nodes that were replaced.
   </para>
      </section>
      <section role="field" xreflabel="SESSION_CLOSED" xml:id="org.osgi.service.dmt.DmtEvent.SESSION_CLOSED">
         <title>public static final int SESSION_CLOSED = 64</title>
         <para>
Event type indicating that a session was closed. This type of event is
 sent when the session is closed by the client or becomes inactive for any
 other reason (session timeout, fatal errors in business methods, etc.).
   </para>
      </section>
      <section role="field" xreflabel="SESSION_OPENED" xml:id="org.osgi.service.dmt.DmtEvent.SESSION_OPENED">
         <title>public static final int SESSION_OPENED = 32</title>
         <para>
Event type indicating that a new session was opened.
   </para>
      </section>
      <section role="method" xreflabel="getNewNodes()" xml:id="org.osgi.service.dmt.DmtEvent.getNewNodes--">
         <title>public String[] getNewNodes()</title>
         <para role="description">
This method can be used to query the new nodes, when the type of the
 event is <link linkend="org.osgi.service.dmt.DmtEvent.COPIED">COPIED</link> or <link linkend="org.osgi.service.dmt.DmtEvent.RENAMED">RENAMED</link>. For all other event types
 this method returns <code>null</code>.
 </para>
         <para>
 The array returned by this method runs parallel to the array returned by
 <link linkend="org.osgi.service.dmt.DmtEvent.getNodes--">getNodes()</link>, the elements in the two arrays contain the source
 and destination URIs for the renamed or copied nodes in the same order.
 All returned URIs are absolute.
 </para>
         <para>
 This method returns only those nodes where the caller has the GET
 permission for the source or destination node of the operation.
 Therefore, it is possible that the method returns an empty array.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the array of newly created nodes</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getNodes()" xml:id="org.osgi.service.dmt.DmtEvent.getNodes--">
         <title>public String[] getNodes()</title>
         <para role="description">
This method can be used to query the subject nodes of this event. The
 method returns <code>null</code> for <link linkend="org.osgi.service.dmt.DmtEvent.SESSION_OPENED">SESSION_OPENED</link> and
 <link linkend="org.osgi.service.dmt.DmtEvent.SESSION_CLOSED">SESSION_CLOSED</link>.
 </para>
         <para>
 The method returns only those affected nodes that the caller has the GET
 permission for (or in case of <link linkend="org.osgi.service.dmt.DmtEvent.COPIED">COPIED</link> or <link linkend="org.osgi.service.dmt.DmtEvent.RENAMED">RENAMED</link> events,
 where the caller has GET permissions for either the source or the
 destination nodes). Therefore, it is possible that the method returns an
 empty array. All returned URIs are absolute.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the array of affected nodes</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtEvent.getNewNodes--">getNewNodes()</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getProperty(String)" xml:id="org.osgi.service.dmt.DmtEvent.getProperty-String-">
         <title>public Object getProperty(String key)</title>
         <formalpara role="parameter">
            <title>key</title>
            <para>the name of the requested property</para>
         </formalpara>
         <para role="description">
This method can be used to get the value of a single event property.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the requested property value or null, if the key is not contained
         in the properties</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtEvent.getPropertyNames--">getPropertyNames()</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>2.0</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getPropertyNames()" xml:id="org.osgi.service.dmt.DmtEvent.getPropertyNames--">
         <title>public String[] getPropertyNames()</title>
         <para role="description">
This method can be used to query the names of all properties of this
 event.
 </para>
         <para>
 The returned names can be used as key value in subsequent calls to
 <link linkend="org.osgi.service.dmt.DmtEvent.getProperty-String-">getProperty(String)</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the array of property names</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtEvent.getProperty-String-">getProperty(String)</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>2.0</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getSessionId()" xml:id="org.osgi.service.dmt.DmtEvent.getSessionId--">
         <title>public int getSessionId()</title>
         <para role="description">
This method returns the identifier of the session in which this event
 took place. The ID is guaranteed to be unique on a machine.
 </para>
         <para>
 For events that do not result from a session, the session id is -1.
 </para>
         <para>
 The availability of a session.id can also be check by using
 <code>getProperty()</code> with "session.id" as key.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the unique identifier of the session that triggered the event or
         -1 if there is no session associated</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.dmt.DmtEvent.getType--">
         <title>public int getType()</title>
         <para role="description">
This method returns the type of this event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the type of this event.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="DmtEventListener" xml:id="org.osgi.service.dmt.DmtEventListener">
      <title>public interface DmtEventListener</title>
      <para>
Registered implementations of this class are notified via <link linkend="org.osgi.service.dmt.DmtEvent">DmtEvent</link>
 objects about important changes in the tree. Events are generated after every
 successful DMT change, and also when sessions are opened or closed. If a
 <link linkend="org.osgi.service.dmt.DmtSession">DmtSession</link> is opened in atomic mode, DMT events are only sent when
 the session is committed, when the changes are actually performed.
 </para>
      <para>
 Dmt Event Listener services must have permission <link linkend="org.osgi.service.dmt.security.DmtPermission.GET">DmtPermission.GET</link>
 for the nodes in the <code>nodes</code> and <code>newNodes</code> property in the Dmt
 Event.</para>
      <section role="field" xreflabel="FILTER_EVENT" xml:id="org.osgi.service.dmt.DmtEventListener.FILTER_EVENT">
         <title>public static final String FILTER_EVENT = "osgi.filter.event"</title>
         <para>
A number of event types packed in a bitmap. If this service property is
 provided with a Dmt Event Listener service registration than that
 listener must only receive events where one of the Dmt Event types occur
 in the bitmap. The type of this service property must be <code>Integer</code>.
   </para>
      </section>
      <section role="field" xreflabel="FILTER_PRINCIPAL" xml:id="org.osgi.service.dmt.DmtEventListener.FILTER_PRINCIPAL">
         <title>public static final String FILTER_PRINCIPAL = "osgi.filter.principal"</title>
         <para>
A number of names of principals. If this service property is provided
 with a Dmt Event Listener service registration than that listener must
 only receive events for which at least one of the given principals has
 <code>Get</code> rights. The type of this service property is <code>String+</code>.
   </para>
      </section>
      <section role="field" xreflabel="FILTER_SUBTREE" xml:id="org.osgi.service.dmt.DmtEventListener.FILTER_SUBTREE">
         <title>public static final String FILTER_SUBTREE = "osgi.filter.subtree"</title>
         <para>
A number of sub-tree top nodes that define the scope of the Dmt Event
 Listener. If this service property is registered then the service must
 only receive events for nodes that are part of one of the sub-trees. The
 type of this service property is <code>String+</code>.
   </para>
      </section>
      <section role="method" xreflabel="changeOccurred(DmtEvent)" xml:id="org.osgi.service.dmt.DmtEventListener.changeOccurred-DmtEvent-">
         <title>public void changeOccurred(DmtEvent event)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>the <code>DmtEvent</code> describing the change in detail</para>
         </formalpara>
         <para role="description">
            <code>DmtAdmin</code> uses this method to notify the registered listeners
 about the change. This method is called asynchronously from the actual
 event occurrence.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="DmtException" xml:id="org.osgi.service.dmt.DmtException">
      <title>public class DmtException<?line-break?> extends Exception</title>
      <para>
Checked exception received when a DMT operation fails. Beside the exception
 message, a <code>DmtException</code> always contains an error code (one of the
 constants specified in this class), and may optionally contain the URI of the
 related node, and information about the cause of the exception.
 </para>
      <para>
 Some of the error codes defined in this class have a corresponding error code
 defined in OMA DM, in these cases the name and numerical value from OMA DM is
 used. Error codes without counterparts in OMA DM were given numbers from a
 different range, starting from 1.
 </para>
      <para>
 The cause of the exception (if specified) can either be a single
 <code>Throwable</code> instance, or a list of such instances if several problems
 occurred during the execution of a method. An example for the latter is the
 <code>close</code> method of <code>DmtSession</code> that tries to close multiple
 plugins, and has to report the exceptions of all failures.
 </para>
      <para>
 Each constructor has two variants, one accepts a <code>String</code> node URI, the
 other accepts a <code>String[]</code> node path. The former is used by the
 DmtAdmin implementation, the latter by the plugins, who receive the node URI
 as an array of segment names. The constructors are otherwise identical.
 </para>
      <para>
 Getter methods are provided to retrieve the values of the additional
 parameters, and the <code>printStackTrace(PrintWriter)</code> method is extended
 to print the stack trace of all causing throwables as well.</para>
      <section role="field" xreflabel="ALERT_NOT_ROUTED" xml:id="org.osgi.service.dmt.DmtException.ALERT_NOT_ROUTED">
         <title>public static final int ALERT_NOT_ROUTED = 5</title>
         <para>
An alert can not be sent from the device to the given principal. This can
 happen if there is no Remote Alert Sender willing to forward the alert to
 the given principal, or if no principal was given and the DmtAdmin did
 not find an appropriate default destination.
 </para>
         <para>
 This error code does not correspond to any OMA DM response status code.
 It should be translated to the code 500 "Command Failed" when
 transferring over OMA DM.</para>
      </section>
      <section role="field" xreflabel="COMMAND_FAILED" xml:id="org.osgi.service.dmt.DmtException.COMMAND_FAILED">
         <title>public static final int COMMAND_FAILED = 500</title>
         <para>
The recipient encountered an error which prevented it from fulfilling the
 request.
 </para>
         <para>
 This error code is only used in situations not covered by any of the
 other error codes that a method may use. Some methods specify more
 specific error situations for this code, but it can generally be used for
 any unexpected condition that causes the command to fail.
 </para>
         <para>
 This error code corresponds to the OMA DM response status code 500
 "Command Failed".</para>
      </section>
      <section role="field" xreflabel="COMMAND_NOT_ALLOWED" xml:id="org.osgi.service.dmt.DmtException.COMMAND_NOT_ALLOWED">
         <title>public static final int COMMAND_NOT_ALLOWED = 405</title>
         <para>
The requested command is not allowed on the target node. This includes
 the following situations:
 </para>
         <itemizedlist>
            <listitem>
               <para>an interior node operation is requested for a leaf node, or vice
 versa (e.g. trying to retrieve the children of a leaf node)</para>
            </listitem>
            <listitem>
               <para>an attempt is made to create a node where the parent is a leaf node</para>
            </listitem>
            <listitem>
               <para>an attempt is made to rename or delete the root node of the tree</para>
            </listitem>
            <listitem>
               <para>an attempt is made to rename or delete the root node of the session</para>
            </listitem>
            <listitem>
               <para>a write operation (other than setting the ACL) is performed in a
 non-atomic write session on a node provided by a plugin that is read-only
 or does not support non-atomic writing</para>
            </listitem>
            <listitem>
               <para>a node is copied to its descendant</para>
            </listitem>
            <listitem>
               <para>the ACL of the root node is changed not to include Add rights for all
 principals</para>
            </listitem>
         </itemizedlist>
         <para>
 This error code corresponds to the OMA DM response status code 405
 "Command not allowed".</para>
      </section>
      <section role="field" xreflabel="CONCURRENT_ACCESS" xml:id="org.osgi.service.dmt.DmtException.CONCURRENT_ACCESS">
         <title>public static final int CONCURRENT_ACCESS = 4</title>
         <para>
An error occurred related to concurrent access of nodes. This can happen
 for example if a configuration node was deleted directly through the
 Configuration Admin service, while the node was manipulated via the tree.
 </para>
         <para>
 This error code does not correspond to any OMA DM response status code.
 It should be translated to the code 500 "Command Failed" when
 transferring over OMA DM.</para>
      </section>
      <section role="field" xreflabel="DATA_STORE_FAILURE" xml:id="org.osgi.service.dmt.DmtException.DATA_STORE_FAILURE">
         <title>public static final int DATA_STORE_FAILURE = 510</title>
         <para>
An error related to the recipient data store occurred while processing
 the request. This error code may be thrown by any of the methods
 accessing the tree, but whether it is really used depends on the
 implementation, and the data store it uses.
 </para>
         <para>
 This error code corresponds to the OMA DM response status code 510
 "Data store failure".</para>
      </section>
      <section role="field" xreflabel="FEATURE_NOT_SUPPORTED" xml:id="org.osgi.service.dmt.DmtException.FEATURE_NOT_SUPPORTED">
         <title>public static final int FEATURE_NOT_SUPPORTED = 406</title>
         <para>
The requested command failed because an optional feature required by the
 command is not supported. For example, opening an atomic session might
 return this error code if the DmtAdmin implementation does not support
 transactions. Similarly, accessing the optional node properties (Title,
 Timestamp, Version, Size) might not succeed if either the DmtAdmin
 implementation or the underlying plugin does not support the property.
 </para>
         <para>
 When getting or setting values for interior nodes (an optional
 optimization feature), a plugin can use this error code to indicate that
 the given interior node does not support values.
 </para>
         <para>
 This error code corresponds to the OMA DM response status code 406
 "Optional feature not supported".</para>
      </section>
      <section role="field" xreflabel="INVALID_URI" xml:id="org.osgi.service.dmt.DmtException.INVALID_URI">
         <title>public static final int INVALID_URI = 3</title>
         <para>
The requested command failed because the target URI or node name is
 <code>null</code> or syntactically invalid. This covers the following cases:
 </para>
         <itemizedlist>
            <listitem>
               <para>the URI or node name ends with the '\' or '/' character</para>
            </listitem>
            <listitem>
               <para>the URI is an empty string (only invalid if the method does not
 accept relative URIs)</para>
            </listitem>
            <listitem>
               <para>the URI contains the segment "<code>.</code>" at a position
 other than the beginning of the URI</para>
            </listitem>
            <listitem>
               <para>the node name is "<code>..</code>" or the URI contains such a
 segment</para>
            </listitem>
            <listitem>
               <para>the node name contains an unescaped '/' character</para>
            </listitem>
         </itemizedlist>
         <para>
 See the <link linkend="org.osgi.service.dmt.Uri.encode-String-">Uri.encode(String)</link> method for support on escaping invalid
 characters in a URI.
 </para>
         <para>
 This code is only used if the URI or node name does not match any of the
 criteria for <link linkend="org.osgi.service.dmt.DmtException.URI_TOO_LONG">URI_TOO_LONG</link>. This error code does not correspond
 to any OMA DM response status code. It should be translated to the code
 404 "Not Found" when transferring over OMA DM.</para>
      </section>
      <section role="field" xreflabel="LIMIT_EXCEEDED" xml:id="org.osgi.service.dmt.DmtException.LIMIT_EXCEEDED">
         <title>public static final int LIMIT_EXCEEDED = 413</title>
         <para>
The requested operation failed because a specific limit was exceeded,
 e.g. if a requested resource exceeds a size limit.
 </para>
         <para>
 This error code corresponds to the OMA DM response status code 413
 "Request entity too large".</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>2.0</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="METADATA_MISMATCH" xml:id="org.osgi.service.dmt.DmtException.METADATA_MISMATCH">
         <title>public static final int METADATA_MISMATCH = 2</title>
         <para>
Operation failed because of meta data restrictions. This covers any
 attempted deviation from the parameters defined by the <code>MetaNode</code>
 objects of the affected nodes, for example in the following situations:
 </para>
         <itemizedlist>
            <listitem>
               <para>creating, deleting or renaming a permanent node, or modifying its
 type</para>
            </listitem>
            <listitem>
               <para>creating an interior node where the meta-node defines it as a leaf,
 or vice versa</para>
            </listitem>
            <listitem>
               <para>any operation on a node which does not have the required access type
 (e.g. executing a node that lacks the <code>MetaNode.CMD_EXECUTE</code> access
 type)</para>
            </listitem>
            <listitem>
               <para>any node creation or deletion that would violate the cardinality
 constraints</para>
            </listitem>
            <listitem>
               <para>any leaf node value setting that would violate the allowed formats,
 values, mime types, etc.</para>
            </listitem>
            <listitem>
               <para>any node creation that would violate the allowed node names</para>
            </listitem>
         </itemizedlist>
         <para>
 This error code can also be used to indicate any other meta data
 violation, even if it cannot be described by the <code>MetaNode</code> class.
 For example, detecting a multi-node constraint violation while committing
 an atomic session should result in this error.
 </para>
         <para>
 This error code does not correspond to any OMA DM response status code.
 It should be translated to the code 405 "Command not allowed"
 when transferring over OMA DM.</para>
      </section>
      <section role="field" xreflabel="NODE_ALREADY_EXISTS" xml:id="org.osgi.service.dmt.DmtException.NODE_ALREADY_EXISTS">
         <title>public static final int NODE_ALREADY_EXISTS = 418</title>
         <para>
The requested node creation operation failed because the target already
 exists. This can occur if the node is created directly (with one of the
 <code>create...</code> methods), or indirectly (during a <code>copy</code>
 operation).
 </para>
         <para>
 This error code corresponds to the OMA DM response status code 418
 "Already exists".</para>
      </section>
      <section role="field" xreflabel="NODE_NOT_FOUND" xml:id="org.osgi.service.dmt.DmtException.NODE_NOT_FOUND">
         <title>public static final int NODE_NOT_FOUND = 404</title>
         <para>
The requested target node was not found. No indication is given as to
 whether this is a temporary or permanent condition, unless otherwise
 noted.
 </para>
         <para>
 This is only used when the requested node name is valid, otherwise the
 more specific error codes <link linkend="org.osgi.service.dmt.DmtException.URI_TOO_LONG">URI_TOO_LONG</link> or <link linkend="org.osgi.service.dmt.DmtException.INVALID_URI">INVALID_URI</link>
 are used. This error code corresponds to the OMA DM response status code
 404 "Not Found".</para>
      </section>
      <section role="field" xreflabel="PERMISSION_DENIED" xml:id="org.osgi.service.dmt.DmtException.PERMISSION_DENIED">
         <title>public static final int PERMISSION_DENIED = 425</title>
         <para>
The requested command failed because the principal associated with the
 session does not have adequate access control permissions (ACL) on the
 target. This can only appear in case of remote sessions, i.e. if the
 session is associated with an authenticated principal.
 </para>
         <para>
 This error code corresponds to the OMA DM response status code 425
 "Permission denied".</para>
      </section>
      <section role="field" xreflabel="REMOTE_ERROR" xml:id="org.osgi.service.dmt.DmtException.REMOTE_ERROR">
         <title>public static final int REMOTE_ERROR = 1</title>
         <para>
A device initiated remote operation failed. This is used when the
 protocol adapter fails to send an alert for any reason.
 </para>
         <para>
 Alert routing errors (that occur while looking for the proper protocol
 adapter to use) are indicated by <link linkend="org.osgi.service.dmt.DmtException.ALERT_NOT_ROUTED">ALERT_NOT_ROUTED</link>, this code is
 only for errors encountered while sending the routed alert. This error
 code does not correspond to any OMA DM response status code. It should be
 translated to the code 500 "Command Failed" when transferring
 over OMA DM.</para>
      </section>
      <section role="field" xreflabel="ROLLBACK_FAILED" xml:id="org.osgi.service.dmt.DmtException.ROLLBACK_FAILED">
         <title>public static final int ROLLBACK_FAILED = 516</title>
         <para>
The rollback command was not completed successfully. The tree might be in
 an inconsistent state after this error.
 </para>
         <para>
 This error code corresponds to the OMA DM response status code 516
 "Atomic roll back failed".</para>
      </section>
      <section role="field" xreflabel="SESSION_CREATION_TIMEOUT" xml:id="org.osgi.service.dmt.DmtException.SESSION_CREATION_TIMEOUT">
         <title>public static final int SESSION_CREATION_TIMEOUT = 7</title>
         <para>
Creation of a session timed out because of another ongoing session. The
 length of time while the DmtAdmin waits for the blocking session(s) to
 finish is implementation dependent.
 </para>
         <para>
 This error code does not correspond to any OMA DM response status code.
 OMA has several status codes related to timeout, but these are meant to
 be used when a request times out, not if a session can not be
 established. This error code should be translated to the code 500
 "Command Failed" when transferring over OMA DM.</para>
      </section>
      <section role="field" xreflabel="TRANSACTION_ERROR" xml:id="org.osgi.service.dmt.DmtException.TRANSACTION_ERROR">
         <title>public static final int TRANSACTION_ERROR = 6</title>
         <para>
A transaction-related error occurred in an atomic session. This error is
 caused by one of the following situations:
 </para>
         <itemizedlist>
            <listitem>
               <para>an updating method within an atomic session can not be executed
 because the underlying plugin is read-only or does not support atomic
 writing</para>
            </listitem>
            <listitem>
               <para>a commit operation at the end of an atomic session failed because one
 of the underlying plugins failed to close</para>
            </listitem>
         </itemizedlist>
         <para>
 The latter case may leave the tree in an inconsistent state due to the
 lack of a two-phase commit system, see <link linkend="org.osgi.service.dmt.DmtSession.commit--">DmtSession.commit()</link> for
 details.
 </para>
         <para>
 This error code does not correspond to any OMA DM response status code.
 It should be translated to the code 500 "Command Failed" when
 transferring over OMA DM.</para>
      </section>
      <section role="field" xreflabel="UNAUTHORIZED" xml:id="org.osgi.service.dmt.DmtException.UNAUTHORIZED">
         <title>public static final int UNAUTHORIZED = 401</title>
         <para>
The originator's authentication credentials specify a principal with
 insufficient rights to complete the command.
 </para>
         <para>
 This status code is used as response to device originated sessions if the
 remote management server cannot authorize the device to perform the
 requested operation.
 </para>
         <para>
 This error code corresponds to the OMA DM response status code 401
 "Unauthorized".</para>
      </section>
      <section role="field" xreflabel="URI_TOO_LONG" xml:id="org.osgi.service.dmt.DmtException.URI_TOO_LONG">
         <title>public static final int URI_TOO_LONG = 414</title>
         <para>
The requested command failed because the target URI is too long for what
 the recipient is able or willing to process.
 </para>
         <para>
 This error code corresponds to the OMA DM response status code 414
 "URI too long".</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>OSGi Service Platform, Mobile Specification Release 4</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="DmtException(String,int,String)" xml:id="org.osgi.service.dmt.DmtException.DmtException-String-int-String-">
         <title>public  DmtException(String uri,int code,String message)</title>
         <formalpara role="parameter">
            <title>uri</title>
            <para>the node on which the failed DMT operation was issued, or
        <code>null</code> if the operation is not associated with a node</para>
         </formalpara>
         <formalpara role="parameter">
            <title>code</title>
            <para>the error code of the failure</para>
         </formalpara>
         <formalpara role="parameter">
            <title>message</title>
            <para>the message associated with the exception, or <code>null</code>
        if there is no error message</para>
         </formalpara>
         <para role="description">
Create an instance of the exception. The <code>uri</code> and <code>message</code>
 parameters are optional. No originating exception is specified.
   </para>
      </section>
      <section role="method" xreflabel="DmtException(String,int,String,Throwable)" xml:id="org.osgi.service.dmt.DmtException.DmtException-String-int-String-Throwable-">
         <title>public  DmtException(String uri,int code,String message,Throwable cause)</title>
         <formalpara role="parameter">
            <title>uri</title>
            <para>the node on which the failed DMT operation was issued, or
        <code>null</code> if the operation is not associated with a node</para>
         </formalpara>
         <formalpara role="parameter">
            <title>code</title>
            <para>the error code of the failure</para>
         </formalpara>
         <formalpara role="parameter">
            <title>message</title>
            <para>the message associated with the exception, or <code>null</code>
        if there is no error message</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>the originating exception, or <code>null</code> if there is no
        originating exception</para>
         </formalpara>
         <para role="description">
Create an instance of the exception, specifying the cause exception. The
 <code>uri</code>, <code>message</code> and <code>cause</code> parameters are optional.
   </para>
      </section>
      <section role="method" xreflabel="DmtException(String,int,String,Vector,boolean)" xml:id="org.osgi.service.dmt.DmtException.DmtException-String-int-String-Vector-boolean-">
         <title>public  DmtException(String uri,int code,String message,Vector causes,boolean fatal)</title>
         <formalpara role="parameter">
            <title>uri</title>
            <para>the node on which the failed DMT operation was issued, or
        <code>null</code> if the operation is not associated with a node</para>
         </formalpara>
         <formalpara role="parameter">
            <title>code</title>
            <para>the error code of the failure</para>
         </formalpara>
         <formalpara role="parameter">
            <title>message</title>
            <para>the message associated with the exception, or <code>null</code>
        if there is no error message</para>
         </formalpara>
         <formalpara role="parameter">
            <title>causes</title>
            <para>the list of originating exceptions, or empty list or
        <code>null</code> if there are no originating exceptions</para>
         </formalpara>
         <formalpara role="parameter">
            <title>fatal</title>
            <para>whether the exception is fatal</para>
         </formalpara>
         <para role="description">
Create an instance of the exception, specifying the list of cause
 exceptions and whether the exception is a fatal one. This constructor is
 meant to be used by plugins wishing to indicate that a serious error
 occurred which should invalidate the ongoing atomic session. The
 <code>uri</code>, <code>message</code> and <code>causes</code> parameters are optional.
 </para>
         <para>
 If a fatal exception is thrown, no further business methods will be
 called on the originator plugin. In case of atomic sessions, all other
 open plugins will be rolled back automatically, except if the fatal
 exception was thrown during commit.</para>
      </section>
      <section role="method" xreflabel="DmtException(String[],int,String)" xml:id="org.osgi.service.dmt.DmtException.DmtException-String---int-String-">
         <title>public  DmtException(String[] path,int code,String message)</title>
         <formalpara role="parameter">
            <title>path</title>
            <para>the path of the node on which the failed DMT operation was
        issued, or <code>null</code> if the operation is not associated with a
        node</para>
         </formalpara>
         <formalpara role="parameter">
            <title>code</title>
            <para>the error code of the failure</para>
         </formalpara>
         <formalpara role="parameter">
            <title>message</title>
            <para>the message associated with the exception, or <code>null</code>
        if there is no error message</para>
         </formalpara>
         <para role="description">
Create an instance of the exception, specifying the target node as an
 array of path segments. This method behaves in exactly the same way as if
 the path was given as a URI string.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtException.DmtException-String-int-String-">DmtException(String, int, String)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="DmtException(String[],int,String,Throwable)" xml:id="org.osgi.service.dmt.DmtException.DmtException-String---int-String-Throwable-">
         <title>public  DmtException(String[] path,int code,String message,Throwable cause)</title>
         <formalpara role="parameter">
            <title>path</title>
            <para>the path of the node on which the failed DMT operation was
        issued, or <code>null</code> if the operation is not associated with a
        node</para>
         </formalpara>
         <formalpara role="parameter">
            <title>code</title>
            <para>the error code of the failure</para>
         </formalpara>
         <formalpara role="parameter">
            <title>message</title>
            <para>the message associated with the exception, or <code>null</code>
        if there is no error message</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>the originating exception, or <code>null</code> if there is no
        originating exception</para>
         </formalpara>
         <para role="description">
Create an instance of the exception, specifying the target node as an
 array of path segments, and specifying the cause exception. This method
 behaves in exactly the same way as if the path was given as a URI string.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtException.DmtException-String-int-String-Throwable-">DmtException(String, int, String, Throwable)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="DmtException(String[],int,String,Vector,boolean)" xml:id="org.osgi.service.dmt.DmtException.DmtException-String---int-String-Vector-boolean-">
         <title>public  DmtException(String[] path,int code,String message,Vector causes,boolean fatal)</title>
         <formalpara role="parameter">
            <title>path</title>
            <para>the path of the node on which the failed DMT operation was
        issued, or <code>null</code> if the operation is not associated with a
        node</para>
         </formalpara>
         <formalpara role="parameter">
            <title>code</title>
            <para>the error code of the failure</para>
         </formalpara>
         <formalpara role="parameter">
            <title>message</title>
            <para>the message associated with the exception, or <code>null</code>
        if there is no error message</para>
         </formalpara>
         <formalpara role="parameter">
            <title>causes</title>
            <para>the list of originating exceptions, or empty list or
        <code>null</code> if there are no originating exceptions</para>
         </formalpara>
         <formalpara role="parameter">
            <title>fatal</title>
            <para>whether the exception is fatal</para>
         </formalpara>
         <para role="description">
Create an instance of the exception, specifying the target node as an
 array of path segments, the list of cause exceptions, and whether the
 exception is a fatal one. This method behaves in exactly the same way as
 if the path was given as a URI string.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtException.DmtException-String-int-String-Vector-boolean-">DmtException(String, int, String, Vector, boolean)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getCause()" xml:id="org.osgi.service.dmt.DmtException.getCause--">
         <title>public Throwable getCause()</title>
         <para role="description">
Get the cause of this exception. Returns non-<code>null</code>, if this
 exception is caused by one or more other exceptions (like a
 <code>NullPointerException</code> in a DmtPlugin). If there are more than one
 cause exceptions, the first one is returned.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the cause of this exception, or <code>null</code> if no cause was
         given</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getCauses()" xml:id="org.osgi.service.dmt.DmtException.getCauses--">
         <title>public Throwable[] getCauses()</title>
         <para role="description">
Get all causes of this exception. Returns the causing exceptions in an
 array. If no cause was specified, an empty array is returned.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the list of causes of this exception</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getCode()" xml:id="org.osgi.service.dmt.DmtException.getCode--">
         <title>public int getCode()</title>
         <para role="description">
Get the error code associated with this exception. Most of the error
 codes within this exception correspond to OMA DM error codes.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the error code</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMessage()" xml:id="org.osgi.service.dmt.DmtException.getMessage--">
         <title>public String getMessage()</title>
         <para role="description">
Get the message associated with this exception. The returned string also
 contains the associated URI (if any) and the exception code. The
 resulting message has the following format (parts in square brackets are
 only included if the field inside them is not <code>null</code>):
 
 </para>
         <programlisting>  &lt;exception_code&gt;[: '&lt;uri&gt;'][: &lt;error_message&gt;]</programlisting>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the error message in the format described above</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getURI()" xml:id="org.osgi.service.dmt.DmtException.getURI--">
         <title>public String getURI()</title>
         <para role="description">
Get the node on which the failed DMT operation was issued. Some
 operations like <code>DmtSession.close()</code> don't require an URI, in this
 case this method returns <code>null</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the URI of the node, or <code>null</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isFatal()" xml:id="org.osgi.service.dmt.DmtException.isFatal--">
         <title>public boolean isFatal()</title>
         <para role="description">
Check whether this exception is marked as fatal in the session. Fatal
 exceptions trigger an automatic rollback of atomic sessions.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>whether the exception is marked as fatal</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="printStackTrace(PrintStream)" xml:id="org.osgi.service.dmt.DmtException.printStackTrace-PrintStream-">
         <title>public void printStackTrace(PrintStream s)</title>
         <formalpara role="parameter">
            <title>s</title>
            <para>
               <code>PrintStream</code> to use for output</para>
         </formalpara>
         <para role="description">
Prints the exception and its stacktrace to the specified print stream.
 Any causes that were specified for this exception are also printed,
 together with their stacktraces.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="DmtIllegalStateException" xml:id="org.osgi.service.dmt.DmtIllegalStateException">
      <title>public class DmtIllegalStateException<?line-break?> extends RuntimeException</title>
      <para>
Unchecked illegal state exception. This class is used in DMT because
 java.lang.IllegalStateException does not exist in CLDC.
   </para>
      <section role="method" xreflabel="DmtIllegalStateException()" xml:id="org.osgi.service.dmt.DmtIllegalStateException.DmtIllegalStateException--">
         <title>public  DmtIllegalStateException()</title>
         <para role="description">
Create an instance of the exception with no message.
   </para>
      </section>
      <section role="method" xreflabel="DmtIllegalStateException(String)" xml:id="org.osgi.service.dmt.DmtIllegalStateException.DmtIllegalStateException-String-">
         <title>public  DmtIllegalStateException(String message)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>the reason for the exception</para>
         </formalpara>
         <para role="description">
Create an instance of the exception with the specified message.
   </para>
      </section>
      <section role="method" xreflabel="DmtIllegalStateException(Throwable)" xml:id="org.osgi.service.dmt.DmtIllegalStateException.DmtIllegalStateException-Throwable-">
         <title>public  DmtIllegalStateException(Throwable cause)</title>
         <formalpara role="parameter">
            <title>cause</title>
            <para>the cause of the exception</para>
         </formalpara>
         <para role="description">
Create an instance of the exception with the specified cause exception
 and no message.
   </para>
      </section>
      <section role="method" xreflabel="DmtIllegalStateException(String,Throwable)" xml:id="org.osgi.service.dmt.DmtIllegalStateException.DmtIllegalStateException-String-Throwable-">
         <title>public  DmtIllegalStateException(String message,Throwable cause)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>the reason for the exception</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>the cause of the exception</para>
         </formalpara>
         <para role="description">
Create an instance of the exception with the specified message and cause
 exception.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="DmtSession" xml:id="org.osgi.service.dmt.DmtSession">
      <title>public interface DmtSession</title>
      <para>
DmtSession provides concurrent access to the DMT. All DMT manipulation
 commands for management applications are available on the <code>DmtSession</code>
 interface. The session is associated with a root node which limits the
 subtree in which the operations can be executed within this session.
 </para>
      <para>
 Most of the operations take a node URI as parameter, which can be either an
 absolute URI (starting with "./") or a URI relative to the root
 node of the session. The empty string as relative URI means the root URI the
 session was opened with. All segments of a URI must be within the segment
 length limit of the implementation, and the special characters '/' and '\'
 must be escaped (preceded by a '\').
 </para>
      <para>
 See the <link linkend="org.osgi.service.dmt.Uri.encode-String-">Uri.encode(String)</link> method for support on escaping invalid
 characters in a URI.
 </para>
      <para>
 If the URI specified does not correspond to a legitimate node in the tree an
 exception is thrown. The only exception is the <link linkend="org.osgi.service.dmt.DmtSession.isNodeUri-String-">isNodeUri(String)</link>
 method which returns <code>false</code> in case of an invalid URI.
 </para>
      <para>
 Each method of <code>DmtSession</code> that accesses the tree in any way can throw
 <code>DmtIllegalStateException</code> if the session has been closed or
 invalidated (due to timeout, fatal exceptions, or unexpectedly unregistered
 plugins).</para>
      <section role="field" xreflabel="LOCK_TYPE_ATOMIC" xml:id="org.osgi.service.dmt.DmtSession.LOCK_TYPE_ATOMIC">
         <title>public static final int LOCK_TYPE_ATOMIC = 2</title>
         <para>
            <code>LOCK_TYPE_ATOMIC</code> is an exclusive lock with transactional
 functionality. Commands of an atomic session will either fail or succeed
 together, if a single command fails then the whole session will be rolled
 back.
   </para>
      </section>
      <section role="field" xreflabel="LOCK_TYPE_EXCLUSIVE" xml:id="org.osgi.service.dmt.DmtSession.LOCK_TYPE_EXCLUSIVE">
         <title>public static final int LOCK_TYPE_EXCLUSIVE = 1</title>
         <para>
            <code>LOCK_TYPE_EXCLUSIVE</code> lock guarantees full access to the tree, but
 can not be shared with any other locks.
   </para>
      </section>
      <section role="field" xreflabel="LOCK_TYPE_SHARED" xml:id="org.osgi.service.dmt.DmtSession.LOCK_TYPE_SHARED">
         <title>public static final int LOCK_TYPE_SHARED = 0</title>
         <para>
Sessions created with <code>LOCK_TYPE_SHARED</code> lock allows read-only
 access to the tree, but can be shared between multiple readers.
   </para>
      </section>
      <section role="field" xreflabel="STATE_CLOSED" xml:id="org.osgi.service.dmt.DmtSession.STATE_CLOSED">
         <title>public static final int STATE_CLOSED = 1</title>
         <para>
The session is closed, DMT manipulation operations are not available,
 they throw <code>DmtIllegalStateException</code> if tried.
   </para>
      </section>
      <section role="field" xreflabel="STATE_INVALID" xml:id="org.osgi.service.dmt.DmtSession.STATE_INVALID">
         <title>public static final int STATE_INVALID = 2</title>
         <para>
The session is invalid because a fatal error happened. Fatal errors
 include the timeout of the session, any DmtException with the 'fatal'
 flag set, or the case when a plugin service is unregistered while in use
 by the session. DMT manipulation operations are not available, they throw
 <code>DmtIllegalStateException</code> if tried.
   </para>
      </section>
      <section role="field" xreflabel="STATE_OPEN" xml:id="org.osgi.service.dmt.DmtSession.STATE_OPEN">
         <title>public static final int STATE_OPEN = 0</title>
         <para>
The session is open, all session operations are available.
   </para>
      </section>
      <section role="method" xreflabel="close()" xml:id="org.osgi.service.dmt.DmtSession.close--">
         <title>public void close() throws DmtException</title>
         <para role="description">
Closes a session. If the session was opened with atomic lock mode, the
 <code>DmtSession</code> must first persist the changes made to the DMT by
 calling <code>commit()</code> on all (transactional) plugins participating in
 the session. See the documentation of the <link linkend="org.osgi.service.dmt.DmtSession.commit--">commit()</link> method for
 details and possible errors during this operation.
 </para>
         <para>
 The state of the session changes to <code>DmtSession.STATE_CLOSED</code> if
 the close operation completed successfully, otherwise it becomes
 <code>DmtSession.STATE_INVALID</code>.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> in case of atomic sessions, if the
         commit operation failed because of meta-data restrictions</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>CONCURRENT_ACCESS</code> in case of atomic sessions, if the
         commit operation failed because of some modification outside the
         scope of the DMT to the nodes affected in the session</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>TRANSACTION_ERROR</code> in case of atomic sessions, if an
         underlying plugin failed to commit</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while accessing
         the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if an underlying
         plugin failed to close, or if some unspecified error is
         encountered while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session is already closed or
         invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="commit()" xml:id="org.osgi.service.dmt.DmtSession.commit--">
         <title>public void commit() throws DmtException</title>
         <para role="description">
Commits a series of DMT operations issued in the current atomic session
 since the last transaction boundary. Transaction boundaries are the
 creation of this object that starts the session, and all subsequent
 <link linkend="org.osgi.service.dmt.DmtSession.commit--">commit()</link> and <link linkend="org.osgi.service.dmt.DmtSession.rollback--">rollback()</link> calls.
 </para>
         <para>
 This method can fail even if all operations were successful. This can
 happen due to some multi-node semantic constraints defined by a specific
 implementation. For example, node A can be required to always have
 children A/B, A/C and A/D. If this condition is broken when
 <code>commit()</code> is executed, the method will fail, and throw a
 <code>METADATA_MISMATCH</code> exception.
 </para>
         <para>
 An error situation can arise due to the lack of a two phase commit
 mechanism in the underlying plugins. As an example, if plugin A has
 committed successfully but plugin B failed, the whole session must fail,
 but there is no way to undo the commit performed by A. To provide
 predictable behavior, the commit operation should continue with the
 remaining plugins even after detecting a failure. All exceptions received
 from failed commits are aggregated into one <code>TRANSACTION_ERROR</code>
 exception thrown by this method.
 </para>
         <para>
 In many cases the tree is not the only way to manage a given part of the
 system. It may happen that while modifying some nodes in an atomic
 session, the underlying settings are modified in parallel outside the
 scope of the DMT. If this is detected during commit, an exception with
 the code <code>CONCURRENT_ACCESS</code> is thrown.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the operation failed because of
         meta-data restrictions</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>CONCURRENT_ACCESS</code> if it is
         detected that some modification has been made outside the scope
         of the DMT to the nodes affected in the session's operations</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>TRANSACTION_ERROR</code> if an error occurred during the
         commit of any of the underlying plugins</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while accessing
         the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some
         unspecified error is encountered while attempting to complete the
         command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session was not opened using the
         <code>LOCK_TYPE_ATOMIC</code> lock type, or if the session is already
         closed or invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="copy(String,String,boolean)" xml:id="org.osgi.service.dmt.DmtSession.copy-String-String-boolean-">
         <title>public void copy(String nodeUri,String newNodeUri,boolean recursive) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the node or root of a subtree to be copied</para>
         </formalpara>
         <formalpara role="parameter">
            <title>newNodeUri</title>
            <para>the URI of the new node or root of a subtree</para>
         </formalpara>
         <formalpara role="parameter">
            <title>recursive</title>
            <para>
               <code>false</code> if only a single node is copied,
        <code>true</code> if the whole subtree is copied</para>
         </formalpara>
         <para role="description">
Create a copy of a node or a whole subtree. Beside the structure and
 values of the nodes, most properties are also copied, with the exception
 of the ACL (Access Control List), Timestamp and Version properties.
 </para>
         <para>
 The copy method is essentially a convenience method that could be
 substituted with a sequence of retrieval and update operations. This
 determines the permissions required for copying. However, some
 optimization can be possible if the source and target nodes are all
 handled by DmtAdmin or by the same plugin. In this case, the handler
 might be able to perform the underlying management operation more
 efficiently: for example, a configuration table can be copied at once
 instead of reading each node for each entry and creating it in the new
 tree.
 </para>
         <para>
 This method may result in any of the errors possible for the contributing
 operations. Most of these are collected in the exception descriptions
 below, but for the full list also consult the documentation of
 <link linkend="org.osgi.service.dmt.DmtSession.getChildNodeNames-String-">getChildNodeNames(String)</link>, <link linkend="org.osgi.service.dmt.DmtSession.isLeafNode-String-">isLeafNode(String)</link>,
 <link linkend="org.osgi.service.dmt.DmtSession.getNodeValue-String-">getNodeValue(String)</link>, <link linkend="org.osgi.service.dmt.DmtSession.getNodeType-String-">getNodeType(String)</link>,
 <link linkend="org.osgi.service.dmt.DmtSession.getNodeTitle-String-">getNodeTitle(String)</link>, <link linkend="org.osgi.service.dmt.DmtSession.setNodeTitle-String-String-">setNodeTitle(String, String)</link>,
 <link linkend="org.osgi.service.dmt.DmtSession.createLeafNode-String-DmtData-String-">createLeafNode(String, DmtData, String)</link> and
 <link linkend="org.osgi.service.dmt.DmtSession.createInteriorNode-String-String-">createInteriorNode(String, String)</link>.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> or <code>newNodeUri</code>
         is <code>null</code> or syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if <code>nodeUri</code> is longer than accepted
         by the <code>DmtAdmin</code> implementation (especially on systems
         with limited resources)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if
         <code>nodeUri</code> points to a non-existing node, or if
         <code>newNodeUri</code> points to a node that cannot exist in the tree
         according to the meta-data (see <link linkend="org.osgi.service.dmt.DmtSession.getMetaNode-String-">getMetaNode(String)</link>)
         </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_ALREADY_EXISTS</code> if <code>newNodeUri</code> points
         to a node that already exists</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code>
         if the session is associated with a principal and the ACL of the
         copied node(s) does not allow the <code>Get</code> operation, or the
         ACL of the parent of the target node does not allow the
         <code>Add</code> operation for the associated principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_NOT_ALLOWED</code> if <code>nodeUri</code> is an ancestor of
         <code>newNodeUri</code>, or if any of the implied retrieval or update
         operations are not allowed</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if
         any of the meta-data constraints of the implied retrieval or
         update operations are violated</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>TRANSACTION_ERROR</code>
         in an atomic session if the underlying plugin is read-only or
         does not support atomic writing</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while accessing
         the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if either URI is
         not within the current session's subtree, or if some unspecified
         error is encountered while attempting to complete the command
         </para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session was opened using the
         <code>LOCK_TYPE_SHARED</code> lock type, or if the session is already
         closed or invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the copied node(s) with the Get action
         present, or for the parent of the target node with the Add action   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="createInteriorNode(String)" xml:id="org.osgi.service.dmt.DmtSession.createInteriorNode-String-">
         <title>public void createInteriorNode(String nodeUri) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI of the node to create</para>
         </formalpara>
         <para role="description">
Create an interior node. If the parent node does not exist, it is created
 automatically, as if this method were called for the parent URI. This way
 all missing ancestor nodes leading to the specified node are created. Any
 exceptions encountered while creating the ancestors are propagated to the
 caller of this method, these are not explicitly listed in the error
 descriptions below.
 </para>
         <para>
 If meta-data is available for the node, several checks are made before
 creating it. The node must have <code>MetaNode.CMD_ADD</code> access type, it
 must be defined as a non-permanent interior node, the node name must
 conform to the valid names, and the creation of the new node must not
 cause the maximum occurrence number to be exceeded.
 </para>
         <para>
 If the meta-data cannot be retrieved because the given node cannot
 possibly exist in the tree (it is not defined in the specification), the
 <code>NODE_NOT_FOUND</code> error code is returned (see
 <link linkend="org.osgi.service.dmt.DmtSession.getMetaNode-String-">getMetaNode(String)</link>).</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if
         <code>nodeUri</code> is longer than accepted by the <code>DmtAdmin</code>
         implementation (especially on systems with limited resources)
         </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodeUri</code> points to a
         node that cannot exist in the tree (see above)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_ALREADY_EXISTS</code> if <code>nodeUri</code> points to a node
         that already exists</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the
         session is associated with a principal and the ACL of the parent
         node does not allow the <code>Add</code> operation for the associated
         principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_NOT_ALLOWED</code> if the parent node
         is not an interior node, or in non-atomic sessions if the
         underlying plugin is read-only or does not support non-atomic
         writing</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the node could not
         be created because of meta-data restrictions (see above)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>TRANSACTION_ERROR</code> in an atomic session if the underlying
         plugin is read-only or does not support atomic writing</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while accessing
         the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the URI is not
         within the current session's subtree, or if some unspecified
         error is encountered while attempting to complete the command
         </para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session was opened using the
         <code>LOCK_TYPE_SHARED</code> lock type, or if the session is already
         closed or invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the parent node with the Add action
         present   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="createInteriorNode(String,String)" xml:id="org.osgi.service.dmt.DmtSession.createInteriorNode-String-String-">
         <title>public void createInteriorNode(String nodeUri,String type) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI of the node to create</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>the type URI of the interior node, can be <code>null</code> if no
        node type is defined</para>
         </formalpara>
         <para role="description">
Create an interior node with a given type. The type of interior node, if
 specified, is a URI identifying a DDF document. If the parent node does
 not exist, it is created automatically, as if
 <link linkend="org.osgi.service.dmt.DmtSession.createInteriorNode-String-">createInteriorNode(String)</link> were called for the parent URI. This
 way all missing ancestor nodes leading to the specified node are created.
 Any exceptions encountered while creating the ancestors are propagated to
 the caller of this method, these are not explicitly listed in the error
 descriptions below.
 </para>
         <para>
 If meta-data is available for the node, several checks are made before
 creating it. The node must have <code>MetaNode.CMD_ADD</code> access type, it
 must be defined as a non-permanent interior node, the node name must
 conform to the valid names, and the creation of the new node must not
 cause the maximum occurrence number to be exceeded.
 </para>
         <para>
 If the meta-data cannot be retrieved because the given node cannot
 possibly exist in the tree (it is not defined in the specification), the
 <code>NODE_NOT_FOUND</code> error code is returned (see
 <link linkend="org.osgi.service.dmt.DmtSession.getMetaNode-String-">getMetaNode(String)</link>).
 </para>
         <para>
 Interior node type identifiers must follow the format defined in section
 7.7.7.2 of the OMA Device Management Tree and Description document.
 Checking the validity of the type string does not have to be done by the
 DmtAdmin, this can be left to the plugin handling the node (if any), to
 avoid unnecessary double-checks.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if
         <code>nodeUri</code> is longer than accepted by the <code>DmtAdmin</code>
         implementation (especially on systems with limited resources)
         </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodeUri</code> points to a
         node that cannot exist in the tree (see above)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_ALREADY_EXISTS</code> if <code>nodeUri</code> points to a node
         that already exists</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the
         session is associated with a principal and the ACL of the parent
         node does not allow the <code>Add</code> operation for the associated
         principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_NOT_ALLOWED</code> if the parent node
         is not an interior node, or in non-atomic sessions if the
         underlying plugin is read-only or does not support non-atomic
         writing</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the node could not
         be created because of meta-data restrictions (see above)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>TRANSACTION_ERROR</code> in an atomic session if the underlying
         plugin is read-only or does not support atomic writing</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while accessing
         the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the URI is not
         within the current session's subtree, if the type string is
         invalid (see above), or if some unspecified error is encountered
         while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session was opened using the
         <code>LOCK_TYPE_SHARED</code> lock type, or if the session is already
         closed or invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the parent node with the Add action
         present   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtSession.createInteriorNode-String-">createInteriorNode(String)</link>, <link xlink:href="http://member.openmobilealliance.org/ftp/public_documents/dm/Permanent_documents/OMA-TS-DM-TND-V1_2-20050615-C.zip">
      OMA Device Management Tree and Description v1.2 draft</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="createLeafNode(String)" xml:id="org.osgi.service.dmt.DmtSession.createLeafNode-String-">
         <title>public void createLeafNode(String nodeUri) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI of the node to create</para>
         </formalpara>
         <para role="description">
Create a leaf node with default value and MIME type. If a node does not
 have a default value or MIME type, this method will throw a
 <code>DmtException</code> with error code <code>METADATA_MISMATCH</code>. Note that
 a node might have a default value or MIME type even if there is no
 meta-data for the node or its meta-data does not specify the default.
 </para>
         <para>
 If the parent node does not exist, it is created automatically, as if
 <link linkend="org.osgi.service.dmt.DmtSession.createInteriorNode-String-">createInteriorNode(String)</link> were called for the parent URI. This
 way all missing ancestor nodes leading to the specified node are created.
 Any exceptions encountered while creating the ancestors are propagated to
 the caller of this method, these are not explicitly listed in the error
 descriptions below.
 </para>
         <para>
 If meta-data is available for a node, several checks are made before
 creating it. The node must have <code>MetaNode.CMD_ADD</code> access type, it
 must be defined as a non-permanent leaf node, the node name must conform
 to the valid names, and the creation of the new node must not cause the
 maximum occurrence number to be exceeded.
 </para>
         <para>
 If the meta-data cannot be retrieved because the given node cannot
 possibly exist in the tree (it is not defined in the specification), the
 <code>NODE_NOT_FOUND</code> error code is returned (see
 <link linkend="org.osgi.service.dmt.DmtSession.getMetaNode-String-">getMetaNode(String)</link>).</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if
         <code>nodeUri</code> is longer than accepted by the <code>DmtAdmin</code>
         implementation (especially on systems with limited resources)
         </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodeUri</code> points to a
         node that cannot exist in the tree (see above)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_ALREADY_EXISTS</code> if <code>nodeUri</code> points to a node
         that already exists</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the
         session is associated with a principal and the ACL of the parent
         node does not allow the <code>Add</code> operation for the associated
         principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_NOT_ALLOWED</code> if the parent node
         is not an interior node, or in non-atomic sessions if the
         underlying plugin is read-only or does not support non-atomic
         writing</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the node could not
         be created because of meta-data restrictions (see above)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>TRANSACTION_ERROR</code> in an atomic session if the underlying
         plugin is read-only or does not support atomic writing</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while accessing
         the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the URI is not
         within the current session's subtree, or if some unspecified
         error is encountered while attempting to complete the command
         </para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session was opened using the
         <code>LOCK_TYPE_SHARED</code> lock type, or if the session is already
         closed or invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the parent node with the Add action
         present   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtSession.createLeafNode-String-DmtData-">createLeafNode(String, DmtData)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="createLeafNode(String,DmtData)" xml:id="org.osgi.service.dmt.DmtSession.createLeafNode-String-DmtData-">
         <title>public void createLeafNode(String nodeUri,DmtData value) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI of the node to create</para>
         </formalpara>
         <formalpara role="parameter">
            <title>value</title>
            <para>the value to be given to the new node, can be <code>null</code>
            </para>
         </formalpara>
         <para role="description">
Create a leaf node with a given value and the default MIME type. If the
 specified value is <code>null</code>, the default value is taken. If the node
 does not have a default MIME type or value (if needed), this method will
 throw a <code>DmtException</code> with error code <code>METADATA_MISMATCH</code>.
 Note that a node might have a default value or MIME type even if there is
 no meta-data for the node or its meta-data does not specify the default.
 </para>
         <para>
 If the parent node does not exist, it is created automatically, as if
 <link linkend="org.osgi.service.dmt.DmtSession.createInteriorNode-String-">createInteriorNode(String)</link> were called for the parent URI. This
 way all missing ancestor nodes leading to the specified node are created.
 Any exceptions encountered while creating the ancestors are propagated to
 the caller of this method, these are not explicitly listed in the error
 descriptions below.
 </para>
         <para>
 If meta-data is available for a node, several checks are made before
 creating it. The node must have <code>MetaNode.CMD_ADD</code> access type, it
 must be defined as a non-permanent leaf node, the node name must conform
 to the valid names, the node value must conform to the value constraints,
 and the creation of the new node must not cause the maximum occurrence
 number to be exceeded.
 </para>
         <para>
 If the meta-data cannot be retrieved because the given node cannot
 possibly exist in the tree (it is not defined in the specification), the
 <code>NODE_NOT_FOUND</code> error code is returned (see
 <link linkend="org.osgi.service.dmt.DmtSession.getMetaNode-String-">getMetaNode(String)</link>).
 </para>
         <para>
 Nodes of <code>null</code> format can be created by using
 <link linkend="org.osgi.service.dmt.DmtData.NULL_VALUE">DmtData.NULL_VALUE</link> as second argument.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if
         <code>nodeUri</code> is longer than accepted by the <code>DmtAdmin</code>
         implementation (especially on systems with limited resources)
         </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodeUri</code> points to a
         node that cannot exist in the tree (see above)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_ALREADY_EXISTS</code> if <code>nodeUri</code> points to a node
         that already exists</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the
         session is associated with a principal and the ACL of the parent
         node does not allow the <code>Add</code> operation for the associated
         principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_NOT_ALLOWED</code> if the parent node
         is not an interior node, or in non-atomic sessions if the
         underlying plugin is read-only or does not support non-atomic
         writing</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the node could not
         be created because of meta-data restrictions (see above)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>TRANSACTION_ERROR</code> in an atomic session if the underlying
         plugin is read-only or does not support atomic writing</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while accessing
         the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the URI is not
         within the current session's subtree, or if some unspecified
         error is encountered while attempting to complete the command
         </para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session was opened using the
         <code>LOCK_TYPE_SHARED</code> lock type, or if the session is already
         closed or invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the parent node with the Add action
         present   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="createLeafNode(String,DmtData,String)" xml:id="org.osgi.service.dmt.DmtSession.createLeafNode-String-DmtData-String-">
         <title>public void createLeafNode(String nodeUri,DmtData value,String mimeType) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI of the node to create</para>
         </formalpara>
         <formalpara role="parameter">
            <title>value</title>
            <para>the value to be given to the new node, can be <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>mimeType</title>
            <para>the MIME type to be given to the new node, can be
        <code>null</code>
            </para>
         </formalpara>
         <para role="description">
Create a leaf node with a given value and MIME type. If the specified
 value or MIME type is <code>null</code>, their default values are taken. If
 the node does not have the necessary defaults, this method will throw a
 <code>DmtException</code> with error code <code>METADATA_MISMATCH</code>. Note that
 a node might have a default value or MIME type even if there is no
 meta-data for the node or its meta-data does not specify the default.
 </para>
         <para>
 If the parent node does not exist, it is created automatically, as if
 <link linkend="org.osgi.service.dmt.DmtSession.createInteriorNode-String-">createInteriorNode(String)</link> were called for the parent URI. This
 way all missing ancestor nodes leading to the specified node are created.
 Any exceptions encountered while creating the ancestors are propagated to
 the caller of this method, these are not explicitly listed in the error
 descriptions below.
 </para>
         <para>
 If meta-data is available for a node, several checks are made before
 creating it. The node must have <code>MetaNode.CMD_ADD</code> access type, it
 must be defined as a non-permanent leaf node, the node name must conform
 to the valid names, the node value must conform to the value constraints,
 the MIME type must be among the listed types, and the creation of the new
 node must not cause the maximum occurrence number to be exceeded.
 </para>
         <para>
 If the meta-data cannot be retrieved because the given node cannot
 possibly exist in the tree (it is not defined in the specification), the
 <code>NODE_NOT_FOUND</code> error code is returned (see
 <link linkend="org.osgi.service.dmt.DmtSession.getMetaNode-String-">getMetaNode(String)</link>).
 </para>
         <para>
 Nodes of <code>null</code> format can be created by using
 <link linkend="org.osgi.service.dmt.DmtData.NULL_VALUE">DmtData.NULL_VALUE</link> as second argument.
 </para>
         <para>
 The MIME type string must conform to the definition in RFC 2045. Checking
 its validity does not have to be done by the DmtAdmin, this can be left
 to the plugin handling the node (if any), to avoid unnecessary
 double-checks.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if
         <code>nodeUri</code> is longer than accepted by the <code>DmtAdmin</code>
         implementation (especially on systems with limited resources)
         </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodeUri</code> points to a
         node that cannot exist in the tree (see above)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_ALREADY_EXISTS</code> if <code>nodeUri</code> points to a node
         that already exists</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the
         session is associated with a principal and the ACL of the parent
         node does not allow the <code>Add</code> operation for the associated
         principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_NOT_ALLOWED</code> if the parent node
         is not an interior node, or in non-atomic sessions if the
         underlying plugin is read-only or does not support non-atomic
         writing</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the node could not
         be created because of meta-data restrictions (see above)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>TRANSACTION_ERROR</code> in an atomic session if the underlying
         plugin is read-only or does not support atomic writing</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while accessing
         the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the URI is not
         within the current session's subtree, if <code>mimeType</code> is not
         a proper MIME type string (see above), or if some unspecified
         error is encountered while attempting to complete the command
         </para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session was opened using the
         <code>LOCK_TYPE_SHARED</code> lock type, or if the session is already
         closed or invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the parent node with the Add action
         present   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtSession.createLeafNode-String-DmtData-">createLeafNode(String, DmtData)</link>, <link xlink:href="http://www.ietf.org/rfc/rfc2045.txt">RFC 2045</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="deleteNode(String)" xml:id="org.osgi.service.dmt.DmtSession.deleteNode-String-">
         <title>public void deleteNode(String nodeUri) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI of the node</para>
         </formalpara>
         <para role="description">
Delete the given node. Deleting interior nodes is recursive, the whole
 subtree under the given node is deleted. It is not allowed to delete the
 root node of the session.
 </para>
         <para>
 If meta-data is available for a node, several checks are made before
 deleting it. The node must be non-permanent, it must have the
 <code>MetaNode.CMD_DELETE</code> access type, and if zero occurrences of the
 node are not allowed, it must not be the last one.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if
         <code>nodeUri</code> is longer than accepted by the <code>DmtAdmin</code>
         implementation (especially on systems with limited resources)
         </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodeUri</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the
         session is associated with a principal and the ACL of the node
         does not allow the <code>Delete</code> operation for the associated
         principal </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_NOT_ALLOWED</code> if the target node
         is the root of the session, or in non-atomic sessions if the
         underlying plugin is read-only or does not support non-atomic
         writing</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the node could not
         be deleted because of meta-data restrictions (see above)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>TRANSACTION_ERROR</code> in an atomic session if the underlying
         plugin is read-only or does not support atomic writing</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while accessing
         the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the URI is not
         within the current session's subtree, or if some unspecified
         error is encountered while attempting to complete the command
         </para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session was opened using the
         <code>LOCK_TYPE_SHARED</code> lock type, or if the session is already
         closed or invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the node with the Delete action present   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="execute(String,String)" xml:id="org.osgi.service.dmt.DmtSession.execute-String-String-">
         <title>public void execute(String nodeUri,String data) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the node on which the execute operation is issued</para>
         </formalpara>
         <formalpara role="parameter">
            <title>data</title>
            <para>the parameter of the execute operation, can be <code>null</code>
            </para>
         </formalpara>
         <para role="description">
Executes a node. This corresponds to the EXEC operation in OMA DM. This
 method cannot be called in a read-only session.
 </para>
         <para>
 The semantics of an execute operation and the data parameter it takes
 depends on the definition of the managed object on which the command is
 issued.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if
         <code>nodeUri</code> is longer than accepted by the <code>DmtAdmin</code>
         implementation (especially on systems with limited resources)
         </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if the node does not exist</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the session is associated with
         a principal and the ACL of the node does not allow the
         <code>Execute</code> operation for the associated principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_NOT_ALLOWED</code> if the specified node is a scaffold node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the node cannot be executed
         according to the meta-data (does not have
         <code>MetaNode.CMD_EXECUTE</code> access type)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while accessing
         the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the URI is not
         within the current session's subtree, if no DmtExecPlugin is
         associated with the node and the DmtAdmin can not execute the
         node, or if some unspecified error is encountered while
         attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session was opened using the
         <code>LOCK_TYPE_SHARED</code> lock type, or if the session is already
         closed or invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the node with the Exec action present   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtSession.execute-String-String-String-">execute(String, String, String)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="execute(String,String,String)" xml:id="org.osgi.service.dmt.DmtSession.execute-String-String-String-">
         <title>public void execute(String nodeUri,String correlator,String data) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the node on which the execute operation is issued</para>
         </formalpara>
         <formalpara role="parameter">
            <title>correlator</title>
            <para>an identifier to associate this operation with any
        notifications sent in response to it, can be <code>null</code> if not
        needed</para>
         </formalpara>
         <formalpara role="parameter">
            <title>data</title>
            <para>the parameter of the execute operation, can be <code>null</code>
            </para>
         </formalpara>
         <para role="description">
Executes a node, also specifying a correlation ID for use in response
 notifications. This operation corresponds to the EXEC command in OMA DM.
 This method cannot be called in a read-only session.
 </para>
         <para>
 The semantics of an execute operation and the data parameter it takes
 depends on the definition of the managed object on which the command is
 issued. If a correlation ID is specified, it should be used as the
 <code>correlator</code> parameter for notifications sent in response to this
 execute operation.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if
         <code>nodeUri</code> is longer than accepted by the <code>DmtAdmin</code>
         implementation (especially on systems with limited resources)
         </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if the node does not exist</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the session is associated with a
         principal and the ACL of the node does not allow the
         <code>Execute</code> operation for the associated principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_NOT_ALLOWED</code> if the specified node is a scaffold node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the node cannot be executed
         according to the meta-data (does not have
         <code>MetaNode.CMD_EXECUTE</code> access type)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while accessing
         the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the URI is not
         within the current session's subtree, if no DmtExecPlugin is
         associated with the node, or if some unspecified error is
         encountered while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session was opened using the
         <code>LOCK_TYPE_SHARED</code> lock type, or if the session is already
         closed or invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the node with the Exec action present   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtSession.execute-String-String-">execute(String, String)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getChildNodeNames(String)" xml:id="org.osgi.service.dmt.DmtSession.getChildNodeNames-String-">
         <title>public String[] getChildNodeNames(String nodeUri) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI of the node</para>
         </formalpara>
         <para role="description">
Get the list of children names of a node. The returned array contains the
 names - not the URIs - of the immediate children nodes of the given node.
 The elements are in no particular order. The returned array must not
 contain <code>null</code> entries.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the list of child node names as a string array or an empty string
         array if the node has no children</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if <code>nodeUri</code> is longer than
         accepted by the <code>DmtAdmin</code> implementation (especially on
         systems with limited resources)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodeUri</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the session is associated with a
         principal and the ACL of the node does not allow the <code>Get</code>
         operation for the associated principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_NOT_ALLOWED</code> if the specified node is not an
         interior node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if node information cannot be
         retrieved according to the meta-data (it does not have
         <code>MetaNode.CMD_GET</code> access type)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the URI is not within the current
         session's subtree, or if some unspecified error is encountered
         while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session is already closed or
         invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the node with the Get action present   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getEffectiveNodeAcl(String)" xml:id="org.osgi.service.dmt.DmtSession.getEffectiveNodeAcl-String-">
         <title>public Acl getEffectiveNodeAcl(String nodeUri) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI of the node</para>
         </formalpara>
         <para role="description">
Gives the Access Control List in effect for a given node. The returned
 <code>Acl</code> takes inheritance into account, that is if there is no ACL
 defined for the node, it will be derived from the closest ancestor having
 an ACL defined.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the Access Control List belonging to the node</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if <code>nodeUri</code> is longer than
         accepted by the <code>DmtAdmin</code> implementation (especially on
         systems with limited resources)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodeUri</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the session is associated with a
         principal and the ACL of the node does not allow the <code>Get</code>
         operation for the associated principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if node information cannot be
         retrieved according to the meta-data (the node does not have
         <code>MetaNode.CMD_GET</code> access type)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the URI is not within the current
         session's subtree, or if some unspecified error is encountered
         while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session is already closed or
         invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– in case of local sessions, if the caller does
         not have <code>DmtPermission</code> for the node with the Get action
         present   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtSession.getNodeAcl-String-">getNodeAcl(String)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getLockType()" xml:id="org.osgi.service.dmt.DmtSession.getLockType--">
         <title>public int getLockType()</title>
         <para role="description">
Gives the type of lock the session has.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the lock type of the session, one of <link linkend="org.osgi.service.dmt.DmtSession.LOCK_TYPE_SHARED">LOCK_TYPE_SHARED</link>,
         <link linkend="org.osgi.service.dmt.DmtSession.LOCK_TYPE_EXCLUSIVE">LOCK_TYPE_EXCLUSIVE</link> and <link linkend="org.osgi.service.dmt.DmtSession.LOCK_TYPE_ATOMIC">LOCK_TYPE_ATOMIC</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMetaNode(String)" xml:id="org.osgi.service.dmt.DmtSession.getMetaNode-String-">
         <title>public MetaNode getMetaNode(String nodeUri) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI of the node</para>
         </formalpara>
         <para role="description">
Get the meta data which describes a given node. Meta data can only be
 inspected, it can not be changed.
 </para>
         <para>
 The <code>MetaNode</code> object returned to the client is the combination of
 the meta data returned by the data plugin (if any) plus the meta data
 returned by the DmtAdmin. If there are differences in the meta data
 elements known by the plugin and the DmtAdmin then the plugin specific
 elements take precedence.
 </para>
         <para>
 Note, that a node does not have to exist for having meta-data associated
 with it. This method may provide meta-data for any node that can possibly
 exist in the tree (any node defined in the specification). For nodes that
 are not defined, it may throw <code>DmtException</code> with the error code
 <code>NODE_NOT_FOUND</code>. To allow easier implementation of plugins that do
 not provide meta-data, it is allowed to return <code>null</code> for any node,
 regardless of whether it is defined or not.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a MetaNode which describes meta data information, can be
         <code>null</code> if there is no meta data available for the given
         node</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if
         <code>nodeUri</code> is longer than accepted by the <code>DmtAdmin</code>
         implementation (especially on systems with limited resources)
         </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodeUri</code> points to a
         node that is not defined in the tree (see above)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the session is associated with a
         principal and the ACL of the node does not allow the <code>Get</code>
         operation for the associated principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while accessing
         the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the URI is not
         within the current session's subtree, or if some unspecified
         error is encountered while attempting to complete the command
         </para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session is already closed or
         invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the node with the Get action present   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getNodeAcl(String)" xml:id="org.osgi.service.dmt.DmtSession.getNodeAcl-String-">
         <title>public Acl getNodeAcl(String nodeUri) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI of the node</para>
         </formalpara>
         <para role="description">
Get the Access Control List associated with a given node. The returned
 <code>Acl</code> object does not take inheritance into account, it gives the
 ACL specifically given to the node.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the Access Control List belonging to the node or <code>null</code> if
         none defined</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if <code>nodeUri</code> is longer than
         accepted by the <code>DmtAdmin</code> implementation (especially on
         systems with limited resources)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodeUri</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the session is associated with a
         principal and the ACL of the node does not allow the <code>Get</code>
         operation for the associated principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if node information cannot be
         retrieved according to the meta-data (the node does not have
         <code>MetaNode.CMD_GET</code> access type)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the URI is not within the current
         session's subtree, or if some unspecified error is encountered
         while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session is already closed or
         invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– in case of local sessions, if the caller does
         not have <code>DmtPermission</code> for the node with the Get action
         present   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtSession.getEffectiveNodeAcl-String-">getEffectiveNodeAcl(String)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getNodeSize(String)" xml:id="org.osgi.service.dmt.DmtSession.getNodeSize-String-">
         <title>public int getNodeSize(String nodeUri) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI of the leaf node</para>
         </formalpara>
         <para role="description">
Get the size of the data in a leaf node. The returned value depends on
 the format of the data in the node, see the description of the
 <link linkend="org.osgi.service.dmt.DmtData.getSize--">DmtData.getSize()</link> method for the definition of node size for each
 format.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the size of the data in the node</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if <code>nodeUri</code> is longer than
         accepted by the <code>DmtAdmin</code> implementation (especially on
         systems with limited resources)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodeUri</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the session is associated with a
         principal and the ACL of the node does not allow the <code>Get</code>
         operation for the associated principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_NOT_ALLOWED</code> if the specified node is not a
         leaf node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if node information cannot be
         retrieved according to the meta-data (it does not have
         <code>MetaNode.CMD_GET</code> access type)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>FEATURE_NOT_SUPPORTED</code> if the Size property is not
         supported by the DmtAdmin implementation or the underlying plugin
         </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the URI is not within the current
         session's subtree, or if some unspecified error is encountered
         while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session is already closed or
         invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the node with the Get action present   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtData.getSize--">DmtData.getSize()</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getNodeTimestamp(String)" xml:id="org.osgi.service.dmt.DmtSession.getNodeTimestamp-String-">
         <title>public Date getNodeTimestamp(String nodeUri) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI of the node</para>
         </formalpara>
         <para role="description">
Get the timestamp when the node was created or last modified.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the timestamp of the last modification</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if <code>nodeUri</code> is longer than
         accepted by the <code>DmtAdmin</code> implementation (especially on
         systems with limited resources)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodeUri</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the session is associated with a
         principal and the ACL of the node does not allow the <code>Get</code>
         operation for the associated principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if node information cannot be
         retrieved according to the meta-data (it does not have
         <code>MetaNode.CMD_GET</code> access type)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>FEATURE_NOT_SUPPORTED</code> if the Timestamp property is
         not supported by the DmtAdmin implementation or the underlying
         plugin</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the URI is not within the current
         session's subtree, or if some unspecified error is encountered
         while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session is already closed or
         invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the node with the Get action present   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getNodeTitle(String)" xml:id="org.osgi.service.dmt.DmtSession.getNodeTitle-String-">
         <title>public String getNodeTitle(String nodeUri) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI of the node</para>
         </formalpara>
         <para role="description">
Get the title of a node. There might be no title property set for a node.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the title of the node, or <code>null</code> if the node has no title</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if <code>nodeUri</code> is longer than
         accepted by the <code>DmtAdmin</code> implementation (especially on
         systems with limited resources)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodeUri</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the session is associated with a
         principal and the ACL of the node does not allow the <code>Get</code>
         operation for the associated principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if node information cannot be
         retrieved according to the meta-data (it does not have
         <code>MetaNode.CMD_GET</code> access type)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>FEATURE_NOT_SUPPORTED</code> if the Title property is not
         supported by the DmtAdmin implementation or the underlying plugin
         </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the URI is not within the current
         session's subtree, or if some unspecified error is encountered
         while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session is already closed or
         invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the node with the Get action present   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getNodeType(String)" xml:id="org.osgi.service.dmt.DmtSession.getNodeType-String-">
         <title>public String getNodeType(String nodeUri) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI of the node</para>
         </formalpara>
         <para role="description">
Get the type of a node. The type of leaf node is the MIME type of the
 data it contains. The type of an interior node is a URI identifying a DDF
 document; a <code>null</code> type means that there is no DDF document
 overriding the tree structure defined by the ancestors.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the type of the node, can be <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if <code>nodeUri</code> is longer than
         accepted by the <code>DmtAdmin</code> implementation (especially on
         systems with limited resources)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodeUri</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the session is associated with a
         principal and the ACL of the node does not allow the <code>Get</code>
         operation for the associated principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if node information cannot be
         retrieved according to the meta-data (it does not have
         <code>MetaNode.CMD_GET</code> access type)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the URI is not within the current
         session's subtree, or if some unspecified error is encountered
         while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session is already closed or
         invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the node with the Get action present   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getNodeValue(String)" xml:id="org.osgi.service.dmt.DmtSession.getNodeValue-String-">
         <title>public DmtData getNodeValue(String nodeUri) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI of the node to retrieve</para>
         </formalpara>
         <para role="description">
Get the data contained in a leaf or interior node. When retrieving the
 value associated with an interior node, the caller must have rights to
 read all nodes in the subtree under the given node.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the data of the node, can not be <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if <code>nodeUri</code> is longer than
         accepted by the <code>DmtAdmin</code> implementation (especially on
         systems with limited resources)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodeUri</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the session is associated with a
         principal and the ACL of the node (and the ACLs of all its
         descendants in case of interior nodes) do not allow the
         <code>Get</code> operation for the associated principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the node value cannot be
         retrieved according to the meta-data (it does not have
         <code>MetaNode.CMD_GET</code> access type)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>FEATURE_NOT_SUPPORTED</code> if the specified node is an
         interior node and does not support Java object values</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the URI is not within the current
         session's subtree, or if some unspecified error is encountered
         while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session is already closed or
         invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the node (and all its descendants in
         case of interior nodes) with the Get action present   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getNodeVersion(String)" xml:id="org.osgi.service.dmt.DmtSession.getNodeVersion-String-">
         <title>public int getNodeVersion(String nodeUri) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI of the node</para>
         </formalpara>
         <para role="description">
Get the version of a node. The version can not be set, it is calculated
 automatically by the device. It is incremented modulo 0x10000 at every
 modification of the value or any other property of the node, for both
 leaf and interior nodes. When a node is created the initial value is 0.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the version of the node</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if <code>nodeUri</code> is longer than
         accepted by the <code>DmtAdmin</code> implementation (especially on
         systems with limited resources)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodeUri</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the session is associated with a
         principal and the ACL of the node does not allow the <code>Get</code>
         operation for the associated principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if node information cannot be
         retrieved according to the meta-data (it does not have
         <code>MetaNode.CMD_GET</code> access type)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>FEATURE_NOT_SUPPORTED</code> if the Version property is not
         supported by the DmtAdmin implementation or the underlying plugin
         </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the URI is not within the current
         session's subtree, or if some unspecified error is encountered
         while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session is already closed or
         invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the node with the Get action present   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getPrincipal()" xml:id="org.osgi.service.dmt.DmtSession.getPrincipal--">
         <title>public String getPrincipal()</title>
         <para role="description">
Gives the name of the principal on whose behalf the session was created.
 Local sessions do not have an associated principal, in this case
 <code>null</code> is returned.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the identifier of the remote server that initiated the session,
         or <code>null</code> for local sessions</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRootUri()" xml:id="org.osgi.service.dmt.DmtSession.getRootUri--">
         <title>public String getRootUri()</title>
         <para role="description">
Get the root URI associated with this session. Gives "<code>.</code>" if the
 session was created without specifying a root, which means that the
 target of this session is the whole DMT.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the root URI</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getSessionId()" xml:id="org.osgi.service.dmt.DmtSession.getSessionId--">
         <title>public int getSessionId()</title>
         <para role="description">
The unique identifier of the session. The ID is generated automatically,
 and it is guaranteed to be unique on a machine for a specific Dmt Admin.
 A session id must be larger than 0.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the session identification number</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getState()" xml:id="org.osgi.service.dmt.DmtSession.getState--">
         <title>public int getState()</title>
         <para role="description">
Get the current state of this session.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the state of the session, one of <link linkend="org.osgi.service.dmt.DmtSession.STATE_OPEN">STATE_OPEN</link>,
         <link linkend="org.osgi.service.dmt.DmtSession.STATE_CLOSED">STATE_CLOSED</link> and <link linkend="org.osgi.service.dmt.DmtSession.STATE_INVALID">STATE_INVALID</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isLeafNode(String)" xml:id="org.osgi.service.dmt.DmtSession.isLeafNode-String-">
         <title>public boolean isLeafNode(String nodeUri) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI of the node</para>
         </formalpara>
         <para role="description">
Tells whether a node is a leaf or an interior node of the DMT.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if the given node is a leaf node</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if <code>nodeUri</code> is longer than
         accepted by the <code>DmtAdmin</code> implementation (especially on
         systems with limited resources)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodeUri</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the session is associated with a
         principal and the ACL of the node does not allow the <code>Get</code>
         operation for the associated principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if node information cannot be
         retrieved according to the meta-data (it does not have
         <code>MetaNode.CMD_GET</code> access type)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the URI is not within the current
         session's subtree, or if some unspecified error is encountered
         while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session is already closed or
         invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the node with the Get action present   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isNodeUri(String)" xml:id="org.osgi.service.dmt.DmtSession.isNodeUri-String-">
         <title>public boolean isNodeUri(String nodeUri)</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI to check</para>
         </formalpara>
         <para role="description">
Check whether the specified URI corresponds to a valid node in the DMT.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if the given node exists in the DMT</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session is already closed or
         invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the node with the Get action present   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="renameNode(String,String)" xml:id="org.osgi.service.dmt.DmtSession.renameNode-String-String-">
         <title>public void renameNode(String nodeUri,String newName) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI of the node to rename</para>
         </formalpara>
         <formalpara role="parameter">
            <title>newName</title>
            <para>the new name property of the node</para>
         </formalpara>
         <para role="description">
Rename a node. This operation only changes the name of the node (updating
 the timestamp and version properties if they are supported), the value
 and the other properties are not changed. The new name of the node must
 be provided, the new URI is constructed from the base of the old URI and
 the given name. It is not allowed to rename the root node of the session.
 </para>
         <para>
 If available, the meta-data of the original and the new nodes are checked
 before performing the rename operation. Neither node can be permanent,
 their leaf/interior property must match, and the name change must not
 violate any of the cardinality constraints. The original node must have
 the <code>MetaNode.CMD_REPLACE</code> access type, and the name of the new
 node must conform to the valid names.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> or <code>newName</code> is
         <code>null</code> or syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code>
         if <code>nodeUri</code> is longer than accepted by the
         <code>DmtAdmin</code> implementation (especially on systems with
         limited resources) </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if
         <code>nodeUri</code> points to a non-existing node, or if the new node
         is not defined in the tree according to the meta-data (see
         <link linkend="org.osgi.service.dmt.DmtSession.getMetaNode-String-">getMetaNode(String)</link>) </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_ALREADY_EXISTS</code>
         if there already exists a sibling of <code>nodeUri</code> with the
         name <code>newName</code>
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the
         session is associated with a principal and the ACL of the node
         does not allow the <code>Replace</code> operation for the associated
         principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_NOT_ALLOWED</code> if the target node
         is the root of the session, or in non-atomic sessions if the
         underlying plugin is read-only or does not support non-atomic
         writing</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the node could not
         be renamed because of meta-data restrictions (see above)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>TRANSACTION_ERROR</code> in an atomic session if the underlying
         plugin is read-only or does not support atomic writing</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while accessing
         the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the URI is not
         within the current session's subtree, or if some unspecified
         error is encountered while attempting to complete the command
         </para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session was opened using the
         <code>LOCK_TYPE_SHARED</code> lock type, or if the session is already
         closed or invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the node with the Replace action
         present   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="rollback()" xml:id="org.osgi.service.dmt.DmtSession.rollback--">
         <title>public void rollback() throws DmtException</title>
         <para role="description">
Rolls back a series of DMT operations issued in the current atomic
 session since the last transaction boundary. Transaction boundaries are
 the creation of this object that starts the session, and all subsequent
 <link linkend="org.osgi.service.dmt.DmtSession.commit--">commit()</link> and <link linkend="org.osgi.service.dmt.DmtSession.rollback--">rollback()</link> calls.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the error code <code>ROLLBACK_FAILED</code> in case
         the rollback did not succeed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session was not opened using the
         <code>LOCK_TYPE_ATOMIC</code> lock type, or if the session is already
         closed or invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setDefaultNodeValue(String)" xml:id="org.osgi.service.dmt.DmtSession.setDefaultNodeValue-String-">
         <title>public void setDefaultNodeValue(String nodeUri) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI of the node</para>
         </formalpara>
         <para role="description">
Set the value of a leaf or interior node to its default. The default can
 be defined by the node's <code>MetaNode</code>. The method throws a
 <code>METADATA_MISMATCH</code> exception if the node does not have a default
 value.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if <code>nodeUri</code> is longer than
         accepted by the <code>DmtAdmin</code> implementation (especially on
         systems with limited resources)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodeUri</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the session is associated with a
         principal and the ACL of the node does not allow the
         <code>Replace</code> operation for the associated principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_NOT_ALLOWED</code> in non-atomic sessions if the
         underlying plugin is read-only or does not support non-atomic
         writing</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the node is permanent or cannot
         be modified according to the meta-data (does not have the
         <code>MetaNode.CMD_REPLACE</code> access type), or if there is no
         default value defined for this node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>FEATURE_NOT_SUPPORTED</code> if the specified node is an
         interior node and does not support Java object values</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>TRANSACTION_ERROR</code> in an atomic session if the
         underlying plugin is read-only or does not support atomic writing
         </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the URI is not within the current
         session's subtree, or if some unspecified error is encountered
         while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session was opened using the
         <code>LOCK_TYPE_SHARED</code> lock type, or if the session is already
         closed or invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the node with the Replace action
         present   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtSession.setNodeValue-String-DmtData-">setNodeValue(String, DmtData)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setNodeAcl(String,Acl)" xml:id="org.osgi.service.dmt.DmtSession.setNodeAcl-String-Acl-">
         <title>public void setNodeAcl(String nodeUri,Acl acl) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI of the node</para>
         </formalpara>
         <formalpara role="parameter">
            <title>acl</title>
            <para>the Access Control List to be set on the node, can be
        <code>null</code>
            </para>
         </formalpara>
         <para role="description">
Set the Access Control List associated with a given node. To perform this
 operation, the caller needs to have replace rights (<code>Acl.REPLACE</code>
 or the corresponding Java permission depending on the session type) as
 described below:
 </para>
         <itemizedlist>
            <listitem>
               <para>if <code>nodeUri</code> specifies a leaf node, replace rights are needed
 on the parent of the node</para>
            </listitem>
            <listitem>
               <para>if <code>nodeUri</code> specifies an interior node, replace rights on
 either the node or its parent are sufficient</para>
            </listitem>
         </itemizedlist>
         <para>
 If the given <code>acl</code> is <code>null</code> or an empty ACL (not specifying
 any permissions for any principals), then the ACL of the node is deleted,
 and the node will inherit the ACL from its parent node.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if
         <code>nodeUri</code> is longer than accepted by the <code>DmtAdmin</code>
         implementation (especially on systems with limited resources)
         </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodeUri</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the
         session is associated with a principal and the ACL of the node or
         its parent (see above) does not allow the <code>Replace</code>
         operation for the associated principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_NOT_ALLOWED</code> if the command attempts to set the
         ACL of the root node not to include Add rights for all principals
         </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the
         URI is not within the current session's subtree, or if some
         unspecified error is encountered while attempting to complete the
         command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session was opened using the
         <code>LOCK_TYPE_SHARED</code> lock type, or if the session is already
         closed or invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– in case of local sessions, if the caller does
         not have <code>DmtPermission</code> for the node or its parent (see
         above) with the Replace action present   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setNodeTitle(String,String)" xml:id="org.osgi.service.dmt.DmtSession.setNodeTitle-String-String-">
         <title>public void setNodeTitle(String nodeUri,String title) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI of the node</para>
         </formalpara>
         <formalpara role="parameter">
            <title>title</title>
            <para>the title text of the node, can be <code>null</code>
            </para>
         </formalpara>
         <para role="description">
Set the title property of a node. The length of the title string in UTF-8
 encoding must not exceed 255 bytes.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if <code>nodeUri</code> is longer than
         accepted by the <code>DmtAdmin</code> implementation (especially on
         systems with limited resources)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodeUri</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the session is associated with a
         principal and the ACL of the node does not allow the
         <code>Replace</code> operation for the associated principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_NOT_ALLOWED</code> in non-atomic sessions if the
         underlying plugin is read-only or does not support non-atomic
         writing</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the node cannot be modified
         according to the meta-data (does not have the
         <code>MetaNode.CMD_REPLACE</code> access type)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>FEATURE_NOT_SUPPORTED</code> if the Title property is not
         supported by the DmtAdmin implementation or the underlying plugin
         </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>TRANSACTION_ERROR</code> in an atomic session if the
         underlying plugin is read-only or does not support atomic writing
         </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the title string is too long, if
         the URI is not within the current session's subtree, or if some
         unspecified error is encountered while attempting to complete the
         command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session was opened using the
         <code>LOCK_TYPE_SHARED</code> lock type, or if the session is already
         closed or invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the node with the Replace action
         present   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setNodeType(String,String)" xml:id="org.osgi.service.dmt.DmtSession.setNodeType-String-String-">
         <title>public void setNodeType(String nodeUri,String type) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI of the node</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>the type of the node, can be <code>null</code>
            </para>
         </formalpara>
         <para role="description">
Set the type of a node. The type of leaf node is the MIME type of the
 data it contains. The type of an interior node is a URI identifying a DDF
 document.
 </para>
         <para>
 For interior nodes, a <code>null</code> type string means that there is no DDF
 document overriding the tree structure defined by the ancestors. For leaf
 nodes, it requests that the default MIME type is used for the given node.
 If the node does not have a default MIME type this method will throw a
 <code>DmtException</code> with error code <code>METADATA_MISMATCH</code>. Note that
 a node might have a default MIME type even if there is no meta-data for
 the node or its meta-data does not specify the default.
 </para>
         <para>
 MIME types must conform to the definition in RFC 2045. Interior node type
 identifiers must follow the format defined in section 7.7.7.2 of the OMA
 Device Management Tree and Description document. Checking the validity of
 the type string does not have to be done by the DmtAdmin, this can be
 left to the plugin handling the node (if any), to avoid unnecessary
 double-checks.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if
         <code>nodeUri</code> is longer than accepted by the <code>DmtAdmin</code>
         implementation (especially on systems with limited resources)
         </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodeUri</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the
         session is associated with a principal and the ACL of the node
         does not allow the <code>Replace</code> operation for the associated
         principal </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_NOT_ALLOWED</code> in non-atomic
         sessions if the underlying plugin is read-only or does not
         support non-atomic writing</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if
         the node is permanent or cannot be modified according to the
         meta-data (does not have the <code>MetaNode.CMD_REPLACE</code> access
         type), and in case of leaf nodes, if <code>null</code> is given and
         there is no default MIME type, or the given MIME type is not
         allowed</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>TRANSACTION_ERROR</code> in an atomic session
         if the underlying plugin is read-only or does not support atomic
         writing</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred
         while accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if
         the URI is not within the current session's subtree, if the type
         string is invalid (see above), or if some unspecified error is
         encountered while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session was opened using the
         <code>LOCK_TYPE_SHARED</code> lock type, or if the session is already
         closed or invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the node with the Replace action
         present   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link xlink:href="http://www.ietf.org/rfc/rfc2045.txt">RFC 2045</link>, <link xlink:href="http://member.openmobilealliance.org/ftp/public_documents/dm/Permanent_documents/OMA-TS-DM-TND-V1_2-20050615-C.zip">
      OMA Device Management Tree and Description v1.2 draft</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setNodeValue(String,DmtData)" xml:id="org.osgi.service.dmt.DmtSession.setNodeValue-String-DmtData-">
         <title>public void setNodeValue(String nodeUri,DmtData data) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodeUri</title>
            <para>the URI of the node</para>
         </formalpara>
         <formalpara role="parameter">
            <title>data</title>
            <para>the data to be set, can be <code>null</code>
            </para>
         </formalpara>
         <para role="description">
Set the value of a leaf or interior node. The format of the node is
 contained in the <code>DmtData</code> object. For interior nodes, the format
 must be <code>FORMAT_NODE</code>, while for leaf nodes this format must not be
 used.
 </para>
         <para>
 If the specified value is <code>null</code>, the default value is taken. In
 this case, if the node does not have a default value, this method will
 throw a <code>DmtException</code> with error code <code>METADATA_MISMATCH</code>.
 Nodes of <code>null</code> format can be set by using
 <link linkend="org.osgi.service.dmt.DmtData.NULL_VALUE">DmtData.NULL_VALUE</link> as second argument.
 </para>
         <para>
 An Event of type REPLACE is sent out for a leaf node. A replaced interior
 node sends out events for each of its children in depth first order and
 node names sorted with Arrays.sort(String[]). When setting a value on an
 interior node, the values of the leaf nodes under it can change, but the
 structure of the subtree is not modified by the operation.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>INVALID_URI</code> if <code>nodeUri</code> is <code>null</code> or
         syntactically invalid</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>URI_TOO_LONG</code> if
         <code>nodeUri</code> is longer than accepted by the <code>DmtAdmin</code>
         implementation (especially on systems with limited resources)
         </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodeUri</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>PERMISSION_DENIED</code> if the
         session is associated with a principal and the ACL of the node
         does not allow the <code>Replace</code> operation for the associated
         principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_NOT_ALLOWED</code> if the given data
         has <code>FORMAT_NODE</code> format but the node is a leaf node (or
         vice versa), or in non-atomic sessions if the underlying plugin
         is read-only or does not support non-atomic writing</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the node is permanent or cannot be
         modified according to the meta-data (does not have the
         <code>MetaNode.CMD_REPLACE</code> access type), or if the given value
         does not conform to the meta-data value constraints</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>FEATURE_NOT_SUPPORTED</code> if the specified node is an
         interior node and does not support Java object values</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>TRANSACTION_ERROR</code> in an atomic session if the underlying
         plugin is read-only or does not support atomic writing</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while accessing
         the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if the URI is not
         within the current session's subtree, or if some unspecified
         error is encountered while attempting to complete the command
         </para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtIllegalStateException</code>– if the session was opened using the
         <code>LOCK_TYPE_SHARED</code> lock type, or if the session is already
         closed or invalidated   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation, or,
         in case of local sessions, if the caller does not have
         <code>DmtPermission</code> for the node with the Replace action
         present   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="MetaNode" xml:id="org.osgi.service.dmt.MetaNode">
      <title>public interface MetaNode</title>
      <para>
The MetaNode contains meta data as standardized by OMA DM but extends it
 (without breaking the compatibility) to provide for better DMT data quality
 in an environment where many software components manipulate this data.
 </para>
      <para>
 The interface has several types of functions to describe the nodes in the
 DMT. Some methods can be used to retrieve standard OMA DM metadata such as
 access type, cardinality, default, etc., others are for data extensions such
 as valid names and values. In some cases the standard behavior has been
 extended, for example it is possible to provide several valid MIME types, or
 to differentiate between normal and automatic dynamic nodes.
 </para>
      <para>
 Most methods in this interface receive no input, just return information
 about some aspect of the node. However, there are two methods that behave
 differently, <link linkend="org.osgi.service.dmt.MetaNode.isValidName-String-">isValidName(String)</link> and <link linkend="org.osgi.service.dmt.MetaNode.isValidValue-DmtData-">isValidValue(DmtData)</link>.
 These validation methods are given a potential node name or value
 (respectively), and can decide whether it is valid for the given node.
 Passing the validation methods is a necessary condition for a name or value
 to be used, but it is not necessarily sufficient: the plugin may carry out
 more thorough (more expensive) checks when the node is actually created or
 set.
 </para>
      <para>
 If a <code>MetaNode</code> is available for a node, the DmtAdmin must use the
 information provided by it to filter out invalid requests on that node.
 However, not all methods on this interface are actually used for this
 purpose, as many of them (e.g. <link linkend="org.osgi.service.dmt.MetaNode.getFormat--">getFormat()</link> or
 <link linkend="org.osgi.service.dmt.MetaNode.getValidNames--">getValidNames()</link>) can be substituted with the validating methods. For
 example, <link linkend="org.osgi.service.dmt.MetaNode.isValidValue-DmtData-">isValidValue(DmtData)</link> can be expected to check the format,
 minimum, maximum, etc. of a given value, making it unnecessary for the
 DmtAdmin to call <link linkend="org.osgi.service.dmt.MetaNode.getFormat--">getFormat()</link>, <link linkend="org.osgi.service.dmt.MetaNode.getMin--">getMin()</link>, <link linkend="org.osgi.service.dmt.MetaNode.getMax--">getMax()</link>
 etc. separately. It is indicated in the description of each method if the
 DmtAdmin does not enforce the constraints defined by it - such methods are
 only for external use, for example in user interfaces.
 </para>
      <para>
 Most of the methods of this class return <code>null</code> if a certain piece of
 meta information is not defined for the node or providing this information is
 not supported. Methods of this class do not throw exceptions.</para>
      <section role="field" xreflabel="AUTOMATIC" xml:id="org.osgi.service.dmt.MetaNode.AUTOMATIC">
         <title>public static final int AUTOMATIC = 2</title>
         <para>
Constant for representing an automatic node in the tree. This must be
 returned by <link linkend="org.osgi.service.dmt.MetaNode.getScope--">getScope()</link>. <code>AUTOMATIC</code> nodes are part of the
 life cycle of their parent node, they usually describe
 attributes/properties of the parent.
   </para>
      </section>
      <section role="field" xreflabel="CMD_ADD" xml:id="org.osgi.service.dmt.MetaNode.CMD_ADD">
         <title>public static final int CMD_ADD = 0</title>
         <para>
Constant for the ADD access type. If <link linkend="org.osgi.service.dmt.MetaNode.can-int-">can(int)</link> returns
 <code>true</code> for this operation, this node can potentially be added to
 its parent. Nodes with <link linkend="org.osgi.service.dmt.MetaNode.PERMANENT">PERMANENT</link> or <link linkend="org.osgi.service.dmt.MetaNode.AUTOMATIC">AUTOMATIC</link> scope
 typically do not have this access type.
   </para>
      </section>
      <section role="field" xreflabel="CMD_DELETE" xml:id="org.osgi.service.dmt.MetaNode.CMD_DELETE">
         <title>public static final int CMD_DELETE = 1</title>
         <para>
Constant for the DELETE access type. If <link linkend="org.osgi.service.dmt.MetaNode.can-int-">can(int)</link> returns
 <code>true</code> for this operation, the node can potentially be deleted.
   </para>
      </section>
      <section role="field" xreflabel="CMD_EXECUTE" xml:id="org.osgi.service.dmt.MetaNode.CMD_EXECUTE">
         <title>public static final int CMD_EXECUTE = 2</title>
         <para>
Constant for the EXECUTE access type. If <link linkend="org.osgi.service.dmt.MetaNode.can-int-">can(int)</link> returns
 <code>true</code> for this operation, the node can potentially be executed.
   </para>
      </section>
      <section role="field" xreflabel="CMD_GET" xml:id="org.osgi.service.dmt.MetaNode.CMD_GET">
         <title>public static final int CMD_GET = 4</title>
         <para>
Constant for the GET access type. If <link linkend="org.osgi.service.dmt.MetaNode.can-int-">can(int)</link> returns
 <code>true</code> for this operation, the value, the list of child nodes (in
 case of interior nodes) and the properties of the node can potentially be
 retrieved.
   </para>
      </section>
      <section role="field" xreflabel="CMD_REPLACE" xml:id="org.osgi.service.dmt.MetaNode.CMD_REPLACE">
         <title>public static final int CMD_REPLACE = 3</title>
         <para>
Constant for the REPLACE access type. If <link linkend="org.osgi.service.dmt.MetaNode.can-int-">can(int)</link> returns
 <code>true</code> for this operation, the value and other properties of the
 node can potentially be modified.
   </para>
      </section>
      <section role="field" xreflabel="DYNAMIC" xml:id="org.osgi.service.dmt.MetaNode.DYNAMIC">
         <title>public static final int DYNAMIC = 1</title>
         <para>
Constant for representing a dynamic node in the tree. This must be
 returned by <link linkend="org.osgi.service.dmt.MetaNode.getScope--">getScope()</link>. Dynamic nodes can be added and deleted.
   </para>
      </section>
      <section role="field" xreflabel="PERMANENT" xml:id="org.osgi.service.dmt.MetaNode.PERMANENT">
         <title>public static final int PERMANENT = 0</title>
         <para>
Constant for representing a <code>PERMANENT</code> node in the tree. This must
 be returned by <link linkend="org.osgi.service.dmt.MetaNode.getScope--">getScope()</link> if the node cannot be added, deleted
 or modified in any way through tree operations. <code>PERMANENT</code> nodes
 in general map to the roots of Plugins.
   </para>
      </section>
      <section role="method" xreflabel="can(int)" xml:id="org.osgi.service.dmt.MetaNode.can-int-">
         <title>public boolean can(int operation)</title>
         <formalpara role="parameter">
            <title>operation</title>
            <para>One of the <code>MetaNode.CMD_...</code> constants.</para>
         </formalpara>
         <para role="description">
Check whether the given operation is valid for this node. If no meta-data
 is provided for a node, all operations are valid.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>false</code> if the operation is not valid for this node or the
         operation code is not one of the allowed constants</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getDefault()" xml:id="org.osgi.service.dmt.MetaNode.getDefault--">
         <title>public DmtData getDefault()</title>
         <para role="description">
Get the default value of this node if any.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The default value or <code>null</code> if not defined</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getDescription()" xml:id="org.osgi.service.dmt.MetaNode.getDescription--">
         <title>public String getDescription()</title>
         <para role="description">
Get the explanation string associated with this node. Can be <code>null</code>
 if no description is provided for this node.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>node description string or <code>null</code> for no description</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getExtensionProperty(String)" xml:id="org.osgi.service.dmt.MetaNode.getExtensionProperty-String-">
         <title>public Object getExtensionProperty(String key)</title>
         <formalpara role="parameter">
            <title>key</title>
            <para>the key for the extension property</para>
         </formalpara>
         <para role="description">
Returns the value for the specified extension property key. This method
 only works if the provider of this <code>MetaNode</code> provides proprietary
 extensions to node meta data.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the value of the requested property, cannot be <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the specified key is not supported by
         this <code>MetaNode</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getExtensionPropertyKeys()" xml:id="org.osgi.service.dmt.MetaNode.getExtensionPropertyKeys--">
         <title>public String[] getExtensionPropertyKeys()</title>
         <para role="description">
Returns the list of extension property keys, if the provider of this
 <code>MetaNode</code> provides proprietary extensions to node meta data. The
 method returns <code>null</code> if the node doesn't provide such extensions.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the array of supported extension property keys</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFormat()" xml:id="org.osgi.service.dmt.MetaNode.getFormat--">
         <title>public int getFormat()</title>
         <para role="description">
Get the node's format, expressed in terms of type constants defined in
 <link linkend="org.osgi.service.dmt.DmtData">DmtData</link>. If there are multiple formats allowed for the node then
 the format constants are OR-ed. Interior nodes must have
 <link linkend="org.osgi.service.dmt.DmtData.FORMAT_NODE">DmtData.FORMAT_NODE</link> format, and this code must not be returned
 for leaf nodes. If no meta-data is provided for a node, all applicable
 formats are considered valid (with the above constraints regarding
 interior and leaf nodes).
 </para>
         <para>
 Note that the 'format' term is a legacy from OMA DM, it is more customary
 to think of this as 'type'.
 </para>
         <para>
 The formats returned by this method are not checked by DmtAdmin, they are
 only for external use, for example in user interfaces. DmtAdmin only
 calls <link linkend="org.osgi.service.dmt.MetaNode.isValidValue-DmtData-">isValidValue(DmtData)</link> for checking the value, its behavior
 should be consistent with this method.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the allowed format(s) of the node</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMax()" xml:id="org.osgi.service.dmt.MetaNode.getMax--">
         <title>public double getMax()</title>
         <para role="description">
Get the maximum allowed value associated with a node of numeric format.
 If no meta-data is provided for a node, there is no upper limit to its
 value. This method is only meaningful if the node has one of the numeric
 formats: integer, float, or long format. The returned limit has
 <code>double</code> type, as this can be used to denote all numeric limits
 with full precision. The actual maximum should be the largest integer,
 float or long number that does not exceed the returned value.
 </para>
         <para>
 The information returned by this method is not checked by DmtAdmin, it is
 only for external use, for example in user interfaces. DmtAdmin only
 calls <link linkend="org.osgi.service.dmt.MetaNode.isValidValue-DmtData-">isValidValue(DmtData)</link> for checking the value, its behavior
 should be consistent with this method.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the allowed maximum, or <code>Double.MAX_VALUE</code> if there is no
         upper limit defined or the node's format is not one of the
         numeric formats integer, float, or long</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMaxOccurrence()" xml:id="org.osgi.service.dmt.MetaNode.getMaxOccurrence--">
         <title>public int getMaxOccurrence()</title>
         <para role="description">
Get the number of maximum occurrences of this type of nodes on the same
 level in the DMT. Returns <code>Integer.MAX_VALUE</code> if there is no upper
 limit. Note that if the occurrence is greater than 1 then this node can
 not have siblings with different metadata. In other words, if different
 types of nodes coexist on the same level, their occurrence can not be
 greater than 1. If no meta-data is provided for a node, there is no upper
 limit on the number of occurrences.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The maximum allowed occurrence of this node type</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMimeTypes()" xml:id="org.osgi.service.dmt.MetaNode.getMimeTypes--">
         <title>public String[] getMimeTypes()</title>
         <para role="description">
Get the list of MIME types this node can hold. The first element of the
 returned list must be the default MIME type.
 </para>
         <para>
 All MIME types are considered valid if no meta-data is provided for a
 node or if <code>null</code> is returned by this method. In this case the
 default MIME type cannot be retrieved from the meta-data, but the node
 may still have a default. This hidden default (if it exists) can be
 utilized by passing <code>null</code> as the type parameter of
 <link linkend="org.osgi.service.dmt.DmtSession.setNodeType-String-String-">DmtSession.setNodeType(String, String)</link> or
 <link linkend="org.osgi.service.dmt.DmtSession.createLeafNode-String-DmtData-String-">DmtSession.createLeafNode(String, DmtData, String)</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the list of allowed MIME types for this node, starting with the
         default MIME type, or <code>null</code> if all types are allowed</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMin()" xml:id="org.osgi.service.dmt.MetaNode.getMin--">
         <title>public double getMin()</title>
         <para role="description">
Get the minimum allowed value associated with a node of numeric format.
 If no meta-data is provided for a node, there is no lower limit to its
 value. This method is only meaningful if the node has one of the numeric
 formats: integer, float, or long format. The returned limit has
 <code>double</code> type, as this can be used to denote both integer and float
 limits with full precision. The actual minimum should be the smallest
 integer, float or long value that is equal or larger than the returned
 value.
 </para>
         <para>
 The information returned by this method is not checked by DmtAdmin, it is
 only for external use, for example in user interfaces. DmtAdmin only
 calls <link linkend="org.osgi.service.dmt.MetaNode.isValidValue-DmtData-">isValidValue(DmtData)</link> for checking the value, its behavior
 should be consistent with this method.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the allowed minimum, or <code>Double.MIN_VALUE</code> if there is no
         lower limit defined or the node's format is not one of the
         numeric formats integer, float, or long</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRawFormatNames()" xml:id="org.osgi.service.dmt.MetaNode.getRawFormatNames--">
         <title>public String[] getRawFormatNames()</title>
         <para role="description">
Get the format names for any raw formats supported by the node. This
 method is only meaningful if the list of supported formats returned by
 <link linkend="org.osgi.service.dmt.MetaNode.getFormat--">getFormat()</link> contains <link linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_STRING">DmtData.FORMAT_RAW_STRING</link> or
 <link linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_BINARY">DmtData.FORMAT_RAW_BINARY</link>: it specifies precisely which raw
 format(s) are actually supported. If the node cannot contain data in one
 of the raw types, this method must return <code>null</code>.
 </para>
         <para>
 The format names returned by this method are not checked by DmtAdmin,
 they are only for external use, for example in user interfaces. DmtAdmin
 only calls <link linkend="org.osgi.service.dmt.MetaNode.isValidValue-DmtData-">isValidValue(DmtData)</link> for checking the value, its
 behavior should be consistent with this method.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the allowed format name(s) of raw data stored by the node, or
         <code>null</code> if raw formats are not supported</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getScope()" xml:id="org.osgi.service.dmt.MetaNode.getScope--">
         <title>public int getScope()</title>
         <para role="description">
Return the scope of the node. Valid values are <link linkend="org.osgi.service.dmt.MetaNode.PERMANENT">MetaNode.PERMANENT</link>, <link linkend="org.osgi.service.dmt.MetaNode.DYNAMIC">MetaNode.DYNAMIC</link> and
 <link linkend="org.osgi.service.dmt.MetaNode.AUTOMATIC">MetaNode.AUTOMATIC</link>. Note that a permanent node is not
 the same as a node where the DELETE operation is not allowed. Permanent
 nodes never can be deleted, whereas a non-deletable node can disappear in
 a recursive DELETE operation issued on one of its parents. If no
 meta-data is provided for a node, it can be assumed to be a dynamic node.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <link linkend="org.osgi.service.dmt.MetaNode.PERMANENT">PERMANENT</link> for permanent nodes, <link linkend="org.osgi.service.dmt.MetaNode.AUTOMATIC">AUTOMATIC</link> for
         nodes that are automatically created, and <link linkend="org.osgi.service.dmt.MetaNode.DYNAMIC">DYNAMIC</link>
         otherwise</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getValidNames()" xml:id="org.osgi.service.dmt.MetaNode.getValidNames--">
         <title>public String[] getValidNames()</title>
         <para role="description">
Return an array of Strings if valid names are defined for the node, or
 <code>null</code> if no valid name list is defined or if this piece of meta
 info is not supported. If no meta-data is provided for a node, all names
 are considered valid.
 </para>
         <para>
 The information returned by this method is not checked by DmtAdmin, it is
 only for external use, for example in user interfaces. DmtAdmin only
 calls <link linkend="org.osgi.service.dmt.MetaNode.isValidName-String-">isValidName(String)</link> for checking the name, its behavior
 should be consistent with this method.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the valid values for this node name, or <code>null</code> if not
         defined</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getValidValues()" xml:id="org.osgi.service.dmt.MetaNode.getValidValues--">
         <title>public DmtData[] getValidValues()</title>
         <para role="description">
Return an array of DmtData objects if valid values are defined for the
 node, or <code>null</code> otherwise. If no meta-data is provided for a node,
 all values are considered valid.
 </para>
         <para>
 The information returned by this method is not checked by DmtAdmin, it is
 only for external use, for example in user interfaces. DmtAdmin only
 calls <link linkend="org.osgi.service.dmt.MetaNode.isValidValue-DmtData-">isValidValue(DmtData)</link> for checking the value, its behavior
 should be consistent with this method.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the valid values for this node, or <code>null</code> if not defined</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isLeaf()" xml:id="org.osgi.service.dmt.MetaNode.isLeaf--">
         <title>public boolean isLeaf()</title>
         <para role="description">
Check whether the node is a leaf node or an internal one.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the node is a leaf node</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isValidName(String)" xml:id="org.osgi.service.dmt.MetaNode.isValidName-String-">
         <title>public boolean isValidName(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>the node name to check for validity</para>
         </formalpara>
         <para role="description">
Checks whether the given name is a valid name for this node. This method
 can be used for example to ensure that the node name is always one of a
 predefined set of valid names, or that it matches a specific pattern.
 This method should be consistent with the values returned by
 <link linkend="org.osgi.service.dmt.MetaNode.getValidNames--">getValidNames()</link> (if any), the DmtAdmin only calls this method
 for name validation.
 </para>
         <para>
 This method may return <code>true</code> even if not all aspects of the name
 have been checked, expensive operations (for example those that require
 external resources) need not be performed here. The actual node creation
 may still indicate that the node name is invalid.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>false</code> if the specified name is found to be invalid for
         the node described by this meta-node, <code>true</code> otherwise</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isValidValue(DmtData)" xml:id="org.osgi.service.dmt.MetaNode.isValidValue-DmtData-">
         <title>public boolean isValidValue(DmtData value)</title>
         <formalpara role="parameter">
            <title>value</title>
            <para>the value to check for validity</para>
         </formalpara>
         <para role="description">
Checks whether the given value is valid for this node. This method can be
 used to ensure that the value has the correct format and range, that it
 is well formed, etc. This method should be consistent with the
 constraints defined by the <link linkend="org.osgi.service.dmt.MetaNode.getFormat--">getFormat()</link>,
 <link linkend="org.osgi.service.dmt.MetaNode.getValidValues--">getValidValues()</link>, <link linkend="org.osgi.service.dmt.MetaNode.getMin--">getMin()</link> and <link linkend="org.osgi.service.dmt.MetaNode.getMax--">getMax()</link>
 methods (if applicable), as the Dmt Admin only calls this method for
 value validation.
 </para>
         <para>
 This method may return <code>true</code> even if not all aspects of the value
 have been checked, expensive operations (for example those that require
 external resources) need not be performed here. The actual value setting
 method may still indicate that the value is invalid.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>false</code> if the specified value is found to be invalid for
         the node described by this meta-node, <code>true</code> otherwise</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isZeroOccurrenceAllowed()" xml:id="org.osgi.service.dmt.MetaNode.isZeroOccurrenceAllowed--">
         <title>public boolean isZeroOccurrenceAllowed()</title>
         <para role="description">
Check whether zero occurrence of this node is valid. If no meta-data is
 returned for a node, zero occurrences are allowed.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if zero occurrence of this node is valid</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Uri" xml:id="org.osgi.service.dmt.Uri">
      <title>public final class Uri</title>
      <para>
This class contains static utility methods to manipulate DMT URIs.
 </para>
      <para>
 Syntax of valid DMT URIs:
 </para>
      <itemizedlist>
         <listitem>
            <para>A slash (<code>'/'</code> \u002F) is the separator of the node names.
 Slashes used in node name must therefore be escaped using a backslash slash (
 <code>"\/"</code>). The backslash must be escaped with a double backslash
 sequence. A backslash found must be ignored when it is not followed by a
 slash or backslash.</para>
         </listitem>
         <listitem>
            <para>The node name can be constructed using full Unicode character set (except
 the Supplementary code, not being supported by CLDC/CDC). However, using the
 full Unicode character set for node names is discouraged because the encoding
 in the underlying storage as well as the encoding needed in communications
 can create significant performance and memory usage overhead. Names that are
 restricted to the URI set <code>[-a-zA-Z0-9_.!~*'()]</code> are most efficient.</para>
         </listitem>
         <listitem>
            <para>URIs used in the DMT must be treated and interpreted as case sensitive.</para>
         </listitem>
         <listitem>
            <para>No End Slash: URI must not end with the delimiter slash (<code>'/'</code>
 \u002F). This implies that the root node must be denoted as <code>"."</code>
 and not <code>"./"</code>.</para>
         </listitem>
         <listitem>
            <para>No parent denotation: URI must not be constructed using the character
 sequence <code>"../"</code> to traverse the tree upwards.</para>
         </listitem>
         <listitem>
            <para>Single Root: The character sequence <code>"./"</code> must not be used
 anywhere else but in the beginning of a URI.</para>
         </listitem>
      </itemizedlist>
      <section role="field" xreflabel="PATH_SEPARATOR" xml:id="org.osgi.service.dmt.Uri.PATH_SEPARATOR">
         <title>public static final String PATH_SEPARATOR = "/"</title>
         <para>
This constant stands for a string identifying the path separator in the
 DmTree ("/").
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>2.0</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="PATH_SEPARATOR_CHAR" xml:id="org.osgi.service.dmt.Uri.PATH_SEPARATOR_CHAR">
         <title>public static final char PATH_SEPARATOR_CHAR = 47</title>
         <para>
This constant stands for a char identifying the path separator in the
 DmTree ('/').
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>2.0</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="ROOT_NODE" xml:id="org.osgi.service.dmt.Uri.ROOT_NODE">
         <title>public static final String ROOT_NODE = "."</title>
         <para>
This constant stands for a string identifying the root of the DmTree
 (".").
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>2.0</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="ROOT_NODE_CHAR" xml:id="org.osgi.service.dmt.Uri.ROOT_NODE_CHAR">
         <title>public static final char ROOT_NODE_CHAR = 46</title>
         <para>
This constant stands for a char identifying the root of the DmTree ('.').
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>2.0</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="decode(String)" xml:id="org.osgi.service.dmt.Uri.decode-String-">
         <title>public static String decode(String nodeName)</title>
         <formalpara role="parameter">
            <title>nodeName</title>
            <para>the node name to be decoded</para>
         </formalpara>
         <para role="description">
Decode the node name so that back slash and forward slash are unescaped
 from a back slash.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the decoded node name</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>2.0</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="encode(String)" xml:id="org.osgi.service.dmt.Uri.encode-String-">
         <title>public static String encode(String nodeName)</title>
         <formalpara role="parameter">
            <title>nodeName</title>
            <para>the node name to be encoded</para>
         </formalpara>
         <para role="description">
Encode the node name so that back slash and forward slash are escaped
 with a back slash. This method is the reverse of <link linkend="org.osgi.service.dmt.Uri.decode-String-">decode(String)</link>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the encoded node name</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>2.0</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isAbsoluteUri(String)" xml:id="org.osgi.service.dmt.Uri.isAbsoluteUri-String-">
         <title>public static boolean isAbsoluteUri(String uri)</title>
         <formalpara role="parameter">
            <title>uri</title>
            <para>the URI to be checked, must not be <code>null</code> and must
        contain a valid URI</para>
         </formalpara>
         <para role="description">
Checks whether the specified URI is an absolute URI. An absolute URI
 contains the complete path to a node in the DMT starting from the DMT
 root (".").
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>whether the specified URI is absolute</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– if the specified URI is <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the specified URI is malformed   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isValidUri(String)" xml:id="org.osgi.service.dmt.Uri.isValidUri-String-">
         <title>public static boolean isValidUri(String uri)</title>
         <formalpara role="parameter">
            <title>uri</title>
            <para>the URI to be validated</para>
         </formalpara>
         <para role="description">
Checks whether the specified URI is valid. A URI is considered valid if
 it meets the following constraints:
 </para>
         <itemizedlist>
            <listitem>
               <para>the URI is not <code>null</code>;</para>
            </listitem>
            <listitem>
               <para>the URI follows the syntax defined for valid DMT URIs;</para>
            </listitem>
         </itemizedlist>
         <para>
 The exact definition of the length of a URI and its segments is given in
 the descriptions of the <code>getMaxUriLength()</code> and
 <code>getMaxSegmentNameLength()</code> methods.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>whether the specified URI is valid</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="mangle(String)" xml:id="org.osgi.service.dmt.Uri.mangle-String-">
         <title>public static String mangle(String nodeName)</title>
         <formalpara role="parameter">
            <title>nodeName</title>
            <para>the node name to be mangled (if necessary), must not be
        <code>null</code> or empty</para>
         </formalpara>
         <para role="description">
Returns a node name that is valid for the tree operation methods, based
 on the given node name. This transformation is not idempotent, so it must
 not be called with a parameter that is the result of a previous
 <code>mangle</code> method call.
 </para>
         <para>
 Node name mangling is needed in the following cases:
 </para>
         <itemizedlist>
            <listitem>
               <para>if the name contains '/' or '\' characters</para>
            </listitem>
         </itemizedlist>
         <para>
 A node name that does not suffer from either of these problems is
 guaranteed to remain unchanged by this method. Therefore the client may
 skip the mangling if the node name is known to be valid (though it is
 always safe to call this method).
 </para>
         <para>
 The method returns the normalized <code>nodeName</code> as described below.
 Invalid node names are normalized in different ways, depending on the
 cause. If the name contains '/' or '\' characters, then these are simply
 escaped by inserting an additional '\' before each occurrence. If the
 length of the name does exceed the limit, the following mechanism is used
 to normalize it:
 </para>
         <itemizedlist>
            <listitem>
               <para>the SHA 1 digest of the name is calculated</para>
            </listitem>
            <listitem>
               <para>the digest is encoded with the base 64 algorithm</para>
            </listitem>
            <listitem>
               <para>all '/' characters in the encoded digest are replaced with '_'</para>
            </listitem>
            <listitem>
               <para>trailing '=' signs are removed</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the normalized node name that is valid for tree operations</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– if <code>nodeName</code> is <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if <code>nodeName</code> is empty   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="toPath(String)" xml:id="org.osgi.service.dmt.Uri.toPath-String-">
         <title>public static String[] toPath(String uri)</title>
         <formalpara role="parameter">
            <title>uri</title>
            <para>the URI to be split, must not be <code>null</code>
            </para>
         </formalpara>
         <para role="description">
Split the specified URI along the path separator '/' characters and
 return an array of URI segments. Special characters in the returned
 segments are escaped. The returned array may be empty if the specified
 URI was empty.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>an array of URI segments created by splitting the specified URI</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– if the specified URI is <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the specified URI is malformed   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="toUri(String[])" xml:id="org.osgi.service.dmt.Uri.toUri-String---">
         <title>public static String toUri(String[] path)</title>
         <formalpara role="parameter">
            <title>path</title>
            <para>a possibly empty array of URI segments, must not be
        <code>null</code>
            </para>
         </formalpara>
         <para role="description">
Construct a URI from the specified URI segments. The segments must
 already be mangled.
 </para>
         <para>
 If the specified path is an empty array then an empty URI (<code>""</code>) is
 returned.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the URI created from the specified segments</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– if the specified path or any of its segments
         are <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the specified path contains too many
         or malformed segments or the resulting URI is too long   </para>
         </formalpara>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.service.dmt.spi" xml:id="org.osgi.service.dmt.spi" xml:base="../../generated/javadoc/docbook/org.osgi.service.dmt.spi.xml">
   <title>org.osgi.service.dmt.spi</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.dmt.spi-version">Version 2.0</releaseinfo>
      <edition xml:id="org.osgi.service.dmt.spi-version.number">2.0</edition>
   </info>
   <para>
Device Management Tree SPI Package Version 2.0.
 
 </para>
   <para>
 This package contains the interface classes that compose the Device Management 
 SPI (Service Provider Interface).  These interfaces are implemented by DMT plugins;
 users of the <code>DmtAdmin</code> interface do not interact directly with these.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.dmt.spi; version="[2.0,3.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.dmt.spi; version="[2.0,2.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.spi.DataPlugin">
                  <code>DataPlugin</code>
               </link> - 
An implementation of this interface takes the responsibility of handling data
 requests in a subtree of the DMT.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.spi.ExecPlugin">
                  <code>ExecPlugin</code>
               </link> - 
An implementation of this interface takes the responsibility of handling node
 execute requests in a subtree of the DMT.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.spi.MountPlugin">
                  <code>MountPlugin</code>
               </link> - 
This interface can be optionally implemented by a <code>DataPlugin</code> or
 <code>ExecPlugin</code> in order to get information about its absolute mount
 points in the overall DMT.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.spi.MountPoint">
                  <code>MountPoint</code>
               </link> - 
This interface can be implemented to represent a single mount point.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.spi.ReadableDataSession">
                  <code>ReadableDataSession</code>
               </link> - 
Provides read-only access to the part of the tree handled by the plugin that
 created this session.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.spi.ReadWriteDataSession">
                  <code>ReadWriteDataSession</code>
               </link> - 
Provides non-atomic read-write access to the part of the tree handled by the
 plugin that created this session.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.spi.TransactionalDataSession">
                  <code>TransactionalDataSession</code>
               </link> - 
Provides atomic read-write access to the part of the tree handled by the
 plugin that created this session.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="DataPlugin" xml:id="org.osgi.service.dmt.spi.DataPlugin">
      <title>public interface DataPlugin</title>
      <para>
An implementation of this interface takes the responsibility of handling data
 requests in a subtree of the DMT.
 </para>
      <para>
 In an OSGi environment such implementations should be registered at the OSGi
 service registry specifying the list of root node URIs in a <code>String</code>
 array or in case of a single value as <code>String</code> in the
 <code>dataRootURIs</code> registration parameter.
 </para>
      <para>
 When the first reference in a session is made to a node handled by this
 plugin, the DmtAdmin calls one of the <code>open...</code> methods to retrieve a
 plugin session object for processing the request. The called method depends
 on the lock type of the current session. In case of
 <link linkend="org.osgi.service.dmt.spi.DataPlugin.openReadWriteSession-String---DmtSession-">openReadWriteSession(String[], DmtSession)</link> and
 <link linkend="org.osgi.service.dmt.spi.DataPlugin.openAtomicSession-String---DmtSession-">openAtomicSession(String[], DmtSession)</link>, the plugin may return
 <code>null</code> to indicate that the specified lock type is not supported. In
 this case the DmtAdmin may call
 <link linkend="org.osgi.service.dmt.spi.DataPlugin.openReadOnlySession-String---DmtSession-">openReadOnlySession(String[], DmtSession)</link> to start a read-only
 plugin session, which can be used as long as there are no write operations on
 the nodes handled by this plugin.
 </para>
      <para>
 The <code>sessionRoot</code> parameter of each method is a String array containing
 the segments of the URI pointing to the root of the session. This is an
 absolute path, so the first segment is always ".". Special
 characters appear escaped in the segments.
 </para>
      <para/>
      <section role="field" xreflabel="DATA_ROOT_URIS" xml:id="org.osgi.service.dmt.spi.DataPlugin.DATA_ROOT_URIS">
         <title>public static final String DATA_ROOT_URIS = "dataRootURIs"</title>
         <para>
The string to be used as key for the “dataRootURIs” property when an
 DataPlugin is registered.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>2.0</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="MOUNT_POINTS" xml:id="org.osgi.service.dmt.spi.DataPlugin.MOUNT_POINTS">
         <title>public static final String MOUNT_POINTS = "mountPoints"</title>
         <para>
The string to be used as key for the mount points property when a
 DataPlugin is registered with mount points.
   </para>
      </section>
      <section role="method" xreflabel="openAtomicSession(String[],DmtSession)" xml:id="org.osgi.service.dmt.spi.DataPlugin.openAtomicSession-String---DmtSession-">
         <title>public TransactionalDataSession openAtomicSession(String[] sessionRoot,DmtSession session) throws DmtException</title>
         <formalpara role="parameter">
            <title>sessionRoot</title>
            <para>the path to the subtree which is locked in the current
        session, must not be <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>session</title>
            <para>the session from which this plugin instance is accessed,
        must not be <code>null</code>
            </para>
         </formalpara>
         <para role="description">
This method is called to signal the start of an atomic read-write session
 when the first reference is made within a <code>DmtSession</code> to a node
 which is handled by this plugin. Session information is given as it is
 needed for sending alerts back from the plugin.
 </para>
         <para>
 The plugin can assume that there are no other sessions open on any
 subtree that has any overlap with the subtree of this session.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a plugin session capable of executing read-write operations in an
         atomic block, or <code>null</code> if the plugin does not support
         atomic read-write sessions</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>sessionRoot</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some
         unspecified error is encountered while attempting to complete the
         command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if some underlying operation failed because of
         lack of permissions   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="openReadOnlySession(String[],DmtSession)" xml:id="org.osgi.service.dmt.spi.DataPlugin.openReadOnlySession-String---DmtSession-">
         <title>public ReadableDataSession openReadOnlySession(String[] sessionRoot,DmtSession session) throws DmtException</title>
         <formalpara role="parameter">
            <title>sessionRoot</title>
            <para>the path to the subtree which is accessed in the
        current session, must not be <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>session</title>
            <para>the session from which this plugin instance is accessed,
        must not be <code>null</code>
            </para>
         </formalpara>
         <para role="description">
This method is called to signal the start of a read-only session when the
 first reference is made within a <code>DmtSession</code> to a node which is
 handled by this plugin. Session information is given as it is needed for
 sending alerts back from the plugin.
 </para>
         <para>
 The plugin can assume that there are no writing sessions open on any
 subtree that has any overlap with the subtree of this session.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a plugin session capable of executing read operations</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>sessionRoot</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some
         unspecified error is encountered while attempting to complete the
         command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if some underlying operation failed because of
         lack of permissions   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="openReadWriteSession(String[],DmtSession)" xml:id="org.osgi.service.dmt.spi.DataPlugin.openReadWriteSession-String---DmtSession-">
         <title>public ReadWriteDataSession openReadWriteSession(String[] sessionRoot,DmtSession session) throws DmtException</title>
         <formalpara role="parameter">
            <title>sessionRoot</title>
            <para>the path to the subtree which is locked in the current
        session, must not be <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>session</title>
            <para>the session from which this plugin instance is accessed,
        must not be <code>null</code>
            </para>
         </formalpara>
         <para role="description">
This method is called to signal the start of a non-atomic read-write
 session when the first reference is made within a <code>DmtSession</code> to a
 node which is handled by this plugin. Session information is given as it
 is needed for sending alerts back from the plugin.
 </para>
         <para>
 The plugin can assume that there are no other sessions open on any
 subtree that has any overlap with the subtree of this session.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a plugin session capable of executing read-write operations, or
         <code>null</code> if the plugin does not support non-atomic read-write
         sessions</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>sessionRoot</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some
         unspecified error is encountered while attempting to complete the
         command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if some underlying operation failed because of
         lack of permissions   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ExecPlugin" xml:id="org.osgi.service.dmt.spi.ExecPlugin">
      <title>public interface ExecPlugin</title>
      <para>
An implementation of this interface takes the responsibility of handling node
 execute requests in a subtree of the DMT.
 </para>
      <para>
 In an OSGi environment such implementations should be registered at the OSGi
 service registry specifying the list of root node URIs in a <code>String</code>
 array or in case of a single value as <code>String</code> in the
 <code>execRootURIs</code> registration parameter.</para>
      <section role="field" xreflabel="EXEC_ROOT_URIS" xml:id="org.osgi.service.dmt.spi.ExecPlugin.EXEC_ROOT_URIS">
         <title>public static final String EXEC_ROOT_URIS = "execRootURIs"</title>
         <para>
The string to be used as key for the “execRootURIs” property when an
 ExecPlugin is registered.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>2.0</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="MOUNT_POINTS" xml:id="org.osgi.service.dmt.spi.ExecPlugin.MOUNT_POINTS">
         <title>public static final String MOUNT_POINTS = "mountPoints"</title>
         <para>
The string to be used as key for the mount points property when an Exec
 Plugin is registered with mount points.
   </para>
      </section>
      <section role="method" xreflabel="execute(DmtSession,String[],String,String)" xml:id="org.osgi.service.dmt.spi.ExecPlugin.execute-DmtSession-String---String-String-">
         <title>public void execute(DmtSession session,String[] nodePath,String correlator,String data) throws DmtException</title>
         <formalpara role="parameter">
            <title>session</title>
            <para>a reference to the session in which the operation was
        issued, must not be <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>nodePath</title>
            <para>the absolute path of the node to be executed, must not be
        <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>correlator</title>
            <para>an identifier to associate this operation with any
        alerts sent in response to it, can be <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>data</title>
            <para>the parameter of the execute operation, can be <code>null</code>
            </para>
         </formalpara>
         <para role="description">
Execute the given node with the given data. This operation corresponds to
 the EXEC command in OMA DM.
 </para>
         <para>
 The semantics of an execute operation and the data parameter it takes
 depends on the definition of the managed object on which the command is
 issued. Session information is given as it is needed for sending alerts
 back from the plugin. If a correlation ID is specified, it should be used
 as the <code>correlator</code> parameter for alerts sent in response to this
 execute operation.
 </para>
         <para>
 The <code>nodePath</code> parameter contains an array of path segments
 identifying the node to be executed in the subtree of this plugin. This
 is an absolute path, so the first segment is always ".".
 Special characters appear escaped in the segments.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if the node does not exist</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the command failed because of
         meta-data restrictions</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an
         error occurred while accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some unspecified error is encountered
         while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtSession.execute-String-String-">DmtSession.execute(String, String)</link>, <link linkend="org.osgi.service.dmt.DmtSession.execute-String-String-String-">DmtSession.execute(String, String, String)</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="MountPlugin" xml:id="org.osgi.service.dmt.spi.MountPlugin">
      <title>public interface MountPlugin</title>
      <para>
This interface can be optionally implemented by a <code>DataPlugin</code> or
 <code>ExecPlugin</code> in order to get information about its absolute mount
 points in the overall DMT.
 </para>
      <para>
 This is especially interesting, if the plugin is mapped to the tree as part
 of a list. In such a case the id for this particular data plugin is
 determined by the DmtAdmin after the registration of the plugin and therefore
 unknown to the plugin in advance.
 </para>
      <para>
 This is not a service interface, the Data or Exec Plugin does not also have
 to register this interface as a service, the Dmt Admin should use an
 <code>instanceof</code> to detect that a Plugin is also a Mount Plugin.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>2.0</para>
      </formalpara>
      <section role="method" xreflabel="mountPointAdded(MountPoint)" xml:id="org.osgi.service.dmt.spi.MountPlugin.mountPointAdded-MountPoint-">
         <title>public void mountPointAdded(MountPoint mountPoint)</title>
         <formalpara role="parameter">
            <title>mountPoint</title>
            <para>the newly mapped mount point</para>
         </formalpara>
         <para role="description">
Provides the <code>MountPoint</code> describing the path where the plugin is
 mapped in the overall DMT. The given mountPoint is withdrawn with the
 <link linkend="org.osgi.service.dmt.spi.MountPlugin.mountPointRemoved-MountPoint-">mountPointRemoved(MountPoint)</link> method. Corresponding mount points
 must compare equal and have an appropriate hash code.
   </para>
      </section>
      <section role="method" xreflabel="mountPointRemoved(MountPoint)" xml:id="org.osgi.service.dmt.spi.MountPlugin.mountPointRemoved-MountPoint-">
         <title>public void mountPointRemoved(MountPoint mountPoint)</title>
         <formalpara role="parameter">
            <title>mountPoint</title>
            <para>The unmapped mount point array of <code>MountPoint</code>
        objects that have been removed from the mapping</para>
         </formalpara>
         <para role="description">
Informs the plugin that the provided <code>MountPoint</code> objects have been
 removed from the mapping. The given mountPoint is withdrawn method. Mount
 points must compare equal and have an appropriate hash code with the
 given Mount Point in <link linkend="org.osgi.service.dmt.spi.MountPlugin.mountPointAdded-MountPoint-">mountPointAdded(MountPoint)</link>.
 </para>
         <para>
 NOTE: attempts to invoke the <code>postEvent</code> method on the provided
 <code>MountPoint</code> must be ignored.</para>
      </section>
   </section>
   <section role="class" xreflabel="MountPoint" xml:id="org.osgi.service.dmt.spi.MountPoint">
      <title>public interface MountPoint</title>
      <para>
This interface can be implemented to represent a single mount point.
 </para>
      <para>
 It provides function to get the absolute mounted uri and a shortcut method to
 post events via the DmtAdmin.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>2.0</para>
      </formalpara>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.dmt.spi.MountPoint.equals-Object-">
         <title>public boolean equals(Object other)</title>
         <para role="description">
This object must provide a suitable hash function such that a Mount Point
 given in <link linkend="org.osgi.service.dmt.spi.MountPlugin.mountPointAdded-MountPoint-">MountPlugin.mountPointAdded(MountPoint)</link> is equal to the
 corresponding Mount Point in
 <link linkend="org.osgi.service.dmt.spi.MountPlugin.mountPointRemoved-MountPoint-">MountPlugin.mountPointRemoved(MountPoint)</link>.
 
 Object.equals(Object)</para>
      </section>
      <section role="method" xreflabel="getMountPath()" xml:id="org.osgi.service.dmt.spi.MountPoint.getMountPath--">
         <title>public String[] getMountPath()</title>
         <para role="description">
Provides the absolute mount path of this <code>MountPoint</code>
         </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the absolute mount path of this <code>MountPoint</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.dmt.spi.MountPoint.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
This object must provide a suitable hash function such that a Mount Point
 given in <link linkend="org.osgi.service.dmt.spi.MountPlugin.mountPointAdded-MountPoint-">MountPlugin.mountPointAdded(MountPoint)</link> has the same
 hashCode as the corresponding Mount Point in
 <link linkend="org.osgi.service.dmt.spi.MountPlugin.mountPointRemoved-MountPoint-">MountPlugin.mountPointRemoved(MountPoint)</link>.
 
 Object.hashCode()</para>
      </section>
      <section role="method" xreflabel="postEvent(String,String[],Dictionary)" xml:id="org.osgi.service.dmt.spi.MountPoint.postEvent-String-String---Dictionary-">
         <title>public void postEvent(String topic,String[] relativeURIs,Dictionary properties)</title>
         <formalpara role="parameter">
            <title>topic</title>
            <para>the topic of the event to send. Valid values are:
        <itemizedlist>
                  <listitem>
                     <para>
                        <code>org/osgi/service/dmt/DmtEvent/ADDED</code> if the change was
        caused by an add action</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>org/osgi/service/dmt/DmtEvent/DELETED</code> if the change was
        caused by a delete action</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>org/osgi/service/dmt/DmtEvent/REPLACED</code> if the change was
        caused by a replace action</para>
                  </listitem>
               </itemizedlist>
        Must not be <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>relativeURIs</title>
            <para>an array of affected node <code>URI</code>'s. All
        <code>URI</code>'s specified here are relative to the current
        <code>MountPoint</code>'s mountPath. The value of this parameter
        determines the value of the event property
        <code>EVENT_PROPERTY_NODES</code>. An empty array or <code>null</code> is
        permitted. In both cases the value of the events
        <code>EVENT_PROPERTY_NODES</code> property will be set to an empty
        array.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>properties</title>
            <para>an optional parameter that can be provided to add
        properties to the Event that is going to be send by the DMTAdmin.
        If the properties contain a key <code>EVENT_PROPERTY_NODES</code>, then
        the value of this property is ignored and will be overwritten by
        <code>relativeURIs</code>.</para>
         </formalpara>
         <para role="description">
Posts an event via the DmtAdmin about changes in the current plugins
 subtree.
 </para>
         <para>
 This method distributes Events asynchronously to the EventAdmin as well
 as to matching local DmtEventListeners.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the topic has not one of the defined
         values   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="postEvent(String,String[],String[],Dictionary)" xml:id="org.osgi.service.dmt.spi.MountPoint.postEvent-String-String---String---Dictionary-">
         <title>public void postEvent(String topic,String[] relativeURIs,String[] newRelativeURIs,Dictionary properties)</title>
         <formalpara role="parameter">
            <title>topic</title>
            <para>the topic of the event to send. Valid values are:
        <itemizedlist>
                  <listitem>
                     <para>
                        <code>org/osgi/service/dmt/DmtEvent/RENAMED</code> if the change
        was caused by a rename action</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>org/osgi/service/dmt/DmtEvent/COPIED</code> if the change was
        caused by a copy action</para>
                  </listitem>
               </itemizedlist>
        Must not be <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>relativeURIs</title>
            <para>an array of affected node <code>URI</code>'s.
        </para>
         </formalpara>
         <para>
        All <code>URI</code>'s specified here are relative to the current
        <code>MountPoint</code>'s mountPath. The value of this parameter
        determines the value of the event property
        <code>EVENT_PROPERTY_NODES</code>. An empty array or <code>null</code> is
        permitted. In both cases the value of the events
        <code>EVENT_PROPERTY_NODES</code> property will be set to an empty
        array.</para>
         <formalpara role="parameter">
            <title>newRelativeURIs</title>
            <para>an array of affected node <code>URI</code>'s. The value
        of this parameter determines the value of the event property
        <code>EVENT_PROPERTY_NEW_NODES</code>. An empty array or <code>null</code>
        is permitted. In both cases the value of the events
        <code>EVENT_PROPERTY_NEW_NODES</code> property will be set to an empty
        array.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>properties</title>
            <para>an optional parameter that can be provided to add
        properties to the Event that is going to be send by the DMTAdmin.
        If the properties contain the keys <code>EVENT_PROPERTY_NODES</code> or
        <code>EVENT_PROPERTY_NEW_NODES</code>, then the values of these
        properties are ignored and will be overwritten by
        <code>relativeURIs</code> and <code>newRelativeURIs</code>.</para>
         </formalpara>
         <para role="description">
Posts an event via the DmtAdmin about changes in the current plugins
 subtree.
 </para>
         <para>
 This method distributes Events asynchronously to the EventAdmin as well
 as to matching local DmtEventListeners.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the topic has not one of the defined
         values   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ReadableDataSession" xml:id="org.osgi.service.dmt.spi.ReadableDataSession">
      <title>public interface ReadableDataSession</title>
      <para>
Provides read-only access to the part of the tree handled by the plugin that
 created this session.
 </para>
      <para>
 Since the <link linkend="org.osgi.service.dmt.spi.ReadWriteDataSession">ReadWriteDataSession</link> and <link linkend="org.osgi.service.dmt.spi.TransactionalDataSession">TransactionalDataSession</link>
 interfaces inherit from this interface, some of the method descriptions do
 not apply for an instance that is only a <code>ReadableDataSession</code>. For
 example, the <link linkend="org.osgi.service.dmt.spi.ReadableDataSession.close--">close()</link> method description also contains information
 about its behavior when invoked as part of a transactional session.
 </para>
      <para>
 The <code>nodePath</code> parameters appearing in this interface always contain an
 array of path segments identifying a node in the subtree of this plugin. This
 parameter contains an absolute path, so the first segment is always
 ".". Special characters appear escaped in the segments.
 </para>
      <para>
         <emphasis role="strong">Error handling</emphasis>
      </para>
      <para>
 When a tree access command is called on the DmtAdmin service, it must perform
 an extensive set of checks on the parameters and the authority of the caller
 before delegating the call to a plugin. Therefore plugins can take certain
 circumstances for granted: that the path is valid and is within the subtree
 of the plugin and the session, the command can be applied to the given node
 (e.g. the target of <code>getChildNodeNames</code> is an interior node), etc. All
 errors described by the error codes <link linkend="org.osgi.service.dmt.DmtException.INVALID_URI">DmtException.INVALID_URI</link>,
 <link linkend="org.osgi.service.dmt.DmtException.URI_TOO_LONG">DmtException.URI_TOO_LONG</link>, <link linkend="org.osgi.service.dmt.DmtException.PERMISSION_DENIED">DmtException.PERMISSION_DENIED</link>,
 <link linkend="org.osgi.service.dmt.DmtException.COMMAND_NOT_ALLOWED">DmtException.COMMAND_NOT_ALLOWED</link> and
 <link linkend="org.osgi.service.dmt.DmtException.TRANSACTION_ERROR">DmtException.TRANSACTION_ERROR</link> are fully filtered out before control
 reaches the plugin.
 </para>
      <para>
 If the plugin provides meta-data for a node, the DmtAdmin service must also
 check the constraints specified by it, as described in <link linkend="org.osgi.service.dmt.MetaNode">MetaNode</link>. If
 the plugin does not provide meta-data, it must perform the necessary checks
 for itself and use the <link linkend="org.osgi.service.dmt.DmtException.METADATA_MISMATCH">DmtException.METADATA_MISMATCH</link> error code to
 indicate such discrepancies.
 </para>
      <para>
 The DmtAdmin does not check that the targeted node exists before calling the
 plugin. It is the responsibility of the plugin to perform this check and to
 throw a <link linkend="org.osgi.service.dmt.DmtException.NODE_NOT_FOUND">DmtException.NODE_NOT_FOUND</link> if needed. In this case the
 DmtAdmin must pass through this exception to the caller of the corresponding
 DmtSession method.
 </para>
      <para>
 The plugin can use the remaining error codes as needed. If an error does not
 fit into any other category, the <link linkend="org.osgi.service.dmt.DmtException.COMMAND_FAILED">DmtException.COMMAND_FAILED</link> code
 should be used.</para>
      <section role="method" xreflabel="close()" xml:id="org.osgi.service.dmt.spi.ReadableDataSession.close--">
         <title>public void close() throws DmtException</title>
         <para role="description">
Closes a session. This method is always called when the session ends for
 any reason: if the session is closed, if a fatal error occurs in any
 method, or if any error occurs during commit or rollback. In case the
 session was invalidated due to an exception during commit or rollback, it
 is guaranteed that no methods are called on the plugin until it is
 closed. In case the session was invalidated due to a fatal exception in
 one of the tree manipulation methods, only the rollback method is called
 before this (and only in atomic sessions).
 </para>
         <para>
 This method should not perform any data manipulation, only cleanup
 operations. In non-atomic read-write sessions the data manipulation
 should be done instantly during each tree operation, while in atomic
 sessions the <code>DmtAdmin</code> always calls
 <link linkend="org.osgi.service.dmt.spi.TransactionalDataSession.commit--">TransactionalDataSession.commit()</link> automatically before the
 session is actually closed.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the error code <code>COMMAND_FAILED</code> if the
         plugin failed to close for any reason   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getChildNodeNames(String[])" xml:id="org.osgi.service.dmt.spi.ReadableDataSession.getChildNodeNames-String---">
         <title>public String[] getChildNodeNames(String[] nodePath) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodePath</title>
            <para>the absolute path of the node</para>
         </formalpara>
         <para role="description">
Get the list of children names of a node. The returned array contains the
 names - not the URIs - of the immediate children nodes of the given node.
 The returned array may contain <code>null</code> entries, but these are
 removed by the DmtAdmin before returning it to the client.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the list of child node names as a string array or an empty string
         array if the node has no children</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodePath</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the information could not be
         retrieved because of meta-data restrictions</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some unspecified error is
         encountered while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMetaNode(String[])" xml:id="org.osgi.service.dmt.spi.ReadableDataSession.getMetaNode-String---">
         <title>public MetaNode getMetaNode(String[] nodePath) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodePath</title>
            <para>the absolute path of the node</para>
         </formalpara>
         <para role="description">
Get the meta data which describes a given node. Meta data can be only
 inspected, it can not be changed.
 </para>
         <para>
 Meta data support by plugins is an optional feature. It can be used, for
 example, when a data plugin is implemented on top of a data store or
 another API that has their own metadata, such as a relational database,
 in order to avoid metadata duplication and inconsistency. The meta data
 specific to the plugin returned by this method is complemented by meta
 data from the DmtAdmin before returning it to the client. If there are
 differences in the meta data elements known by the plugin and the
 <code>DmtAdmin</code> then the plugin specific elements take precedence.
 </para>
         <para>
 Note, that a node does not have to exist for having meta-data associated
 with it. This method may provide meta-data for any node that can possibly
 exist in the tree (any node defined by the Management Object provided by
 the plugin). For nodes that are not defined, a <code>DmtException</code> may
 be thrown with the <code>NODE_NOT_FOUND</code> error code. To allow easier
 implementation of plugins that do not provide meta-data, it is allowed to
 return <code>null</code> for any node, regardless of whether it is defined or
 not.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a MetaNode which describes meta data information, can be
         <code>null</code> if there is no meta data available for the given
         node</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodeUri</code> points to a node
         that is not defined in the tree (see above)</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while accessing
         the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some unspecified
         error is encountered while attempting to complete the command
         </para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getNodeSize(String[])" xml:id="org.osgi.service.dmt.spi.ReadableDataSession.getNodeSize-String---">
         <title>public int getNodeSize(String[] nodePath) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodePath</title>
            <para>the absolute path of the leaf node</para>
         </formalpara>
         <para role="description">
Get the size of the data in a leaf node. The value to return depends on
 the format of the data in the node, see the description of the
 <link linkend="org.osgi.service.dmt.DmtData.getSize--">DmtData.getSize()</link> method for the definition of node size for each
 format.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the size of the data in the node</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodePath</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the information could not be
         retrieved because of meta-data restrictions</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>FEATURE_NOT_SUPPORTED</code> if the Size property is not
         supported by the plugin</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some unspecified error is
         encountered while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtData.getSize--">DmtData.getSize()</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getNodeTimestamp(String[])" xml:id="org.osgi.service.dmt.spi.ReadableDataSession.getNodeTimestamp-String---">
         <title>public Date getNodeTimestamp(String[] nodePath) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodePath</title>
            <para>the absolute path of the node</para>
         </formalpara>
         <para role="description">
Get the timestamp when the node was last modified.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the timestamp of the last modification</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodePath</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the information could not be
         retrieved because of meta-data restrictions</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>FEATURE_NOT_SUPPORTED</code> if the Timestamp property is
         not supported by the plugin</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some unspecified error is
         encountered while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getNodeTitle(String[])" xml:id="org.osgi.service.dmt.spi.ReadableDataSession.getNodeTitle-String---">
         <title>public String getNodeTitle(String[] nodePath) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodePath</title>
            <para>the absolute path of the node</para>
         </formalpara>
         <para role="description">
Get the title of a node. There might be no title property set for a node.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the title of the node, or <code>null</code> if the node has no title</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodePath</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the information could not be
         retrieved because of meta-data restrictions</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>FEATURE_NOT_SUPPORTED</code> if the Title property is not
         supported by the plugin</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some unspecified error is
         encountered while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getNodeType(String[])" xml:id="org.osgi.service.dmt.spi.ReadableDataSession.getNodeType-String---">
         <title>public String getNodeType(String[] nodePath) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodePath</title>
            <para>the absolute path of the node</para>
         </formalpara>
         <para role="description">
Get the type of a node. The type of leaf node is the MIME type of the
 data it contains. The type of an interior node is a URI identifying a DDF
 document; a <code>null</code> type means that there is no DDF document
 overriding the tree structure defined by the ancestors.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the type of the node, can be <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodePath</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the information could not be
         retrieved because of meta-data restrictions</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some unspecified error is
         encountered while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getNodeValue(String[])" xml:id="org.osgi.service.dmt.spi.ReadableDataSession.getNodeValue-String---">
         <title>public DmtData getNodeValue(String[] nodePath) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodePath</title>
            <para>the absolute path of the node to retrieve</para>
         </formalpara>
         <para role="description">
Get the data contained in a leaf or interior node.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the data of the leaf node, must not be <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodePath</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the information could not be
         retrieved because of meta-data restrictions</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>FEATURE_NOT_SUPPORTED</code> if the specified node is an
         interior node and does not support Java object values</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some unspecified error is
         encountered while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getNodeVersion(String[])" xml:id="org.osgi.service.dmt.spi.ReadableDataSession.getNodeVersion-String---">
         <title>public int getNodeVersion(String[] nodePath) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodePath</title>
            <para>the absolute path of the node</para>
         </formalpara>
         <para role="description">
Get the version of a node. The version can not be set, it is calculated
 automatically by the device. It is incremented modulo 0x10000 at every
 modification of the value or any other property of the node, for both
 leaf and interior nodes. When a node is created the initial value is 0.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the version of the node</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodePath</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the information could not be
         retrieved because of meta-data restrictions</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>FEATURE_NOT_SUPPORTED</code> if the Version property is not
         supported by the plugin</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some unspecified error is
         encountered while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isLeafNode(String[])" xml:id="org.osgi.service.dmt.spi.ReadableDataSession.isLeafNode-String---">
         <title>public boolean isLeafNode(String[] nodePath) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodePath</title>
            <para>the absolute path of the node</para>
         </formalpara>
         <para role="description">
Tells whether a node is a leaf or an interior node of the DMT.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if the given node is a leaf node</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodePath</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the information could not be
         retrieved because of meta-data restrictions</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some unspecified error is
         encountered while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isNodeUri(String[])" xml:id="org.osgi.service.dmt.spi.ReadableDataSession.isNodeUri-String---">
         <title>public boolean isNodeUri(String[] nodePath)</title>
         <formalpara role="parameter">
            <title>nodePath</title>
            <para>the absolute path to check</para>
         </formalpara>
         <para role="description">
Check whether the specified path corresponds to a valid node in the DMT.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if the given node exists in the DMT</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="nodeChanged(String[])" xml:id="org.osgi.service.dmt.spi.ReadableDataSession.nodeChanged-String---">
         <title>public void nodeChanged(String[] nodePath) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodePath</title>
            <para>the absolute path of the node that has changed</para>
         </formalpara>
         <para role="description">
Notifies the plugin that the given node has changed outside the scope of
 the plugin, therefore the Version and Timestamp properties must be
 updated (if supported). This method is needed because the ACL property of
 a node is managed by the DmtAdmin instead of the plugin. The DmtAdmin
 must call this method whenever the ACL property of a node changes.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodePath</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some unspecified error is
         encountered while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ReadWriteDataSession" xml:id="org.osgi.service.dmt.spi.ReadWriteDataSession">
      <title>public interface ReadWriteDataSession<?line-break?> extends ReadableDataSession</title>
      <para>
Provides non-atomic read-write access to the part of the tree handled by the
 plugin that created this session.
 </para>
      <para>
 The <code>nodePath</code> parameters appearing in this interface always contain an
 array of path segments identifying a node in the subtree of this plugin. This
 parameter contains an absolute path, so the first segment is always
 ".". Special characters appear escaped in the segments.
 </para>
      <para>
         <emphasis role="strong">Error handling</emphasis>
      </para>
      <para>
 When a tree manipulation command is called on the DmtAdmin service, it must
 perform an extensive set of checks on the parameters and the authority of the
 caller before delegating the call to a plugin. Therefore plugins can take
 certain circumstances for granted: that the path is valid and is within the
 subtree of the plugin and the session, the command can be applied to the
 given node (e.g. the target of <code>setNodeValue</code> is a leaf node), etc. All
 errors described by the error codes <link linkend="org.osgi.service.dmt.DmtException.INVALID_URI">DmtException.INVALID_URI</link>,
 <link linkend="org.osgi.service.dmt.DmtException.URI_TOO_LONG">DmtException.URI_TOO_LONG</link>, <link linkend="org.osgi.service.dmt.DmtException.PERMISSION_DENIED">DmtException.PERMISSION_DENIED</link>,
 <link linkend="org.osgi.service.dmt.DmtException.COMMAND_NOT_ALLOWED">DmtException.COMMAND_NOT_ALLOWED</link> and
 <link linkend="org.osgi.service.dmt.DmtException.TRANSACTION_ERROR">DmtException.TRANSACTION_ERROR</link> are fully filtered out before control
 reaches the plugin.
 </para>
      <para>
 If the plugin provides meta-data for a node, the DmtAdmin service must also
 check the constraints specified by it, as described in <link linkend="org.osgi.service.dmt.MetaNode">MetaNode</link>. If
 the plugin does not provide meta-data, it must perform the necessary checks
 for itself and use the <link linkend="org.osgi.service.dmt.DmtException.METADATA_MISMATCH">DmtException.METADATA_MISMATCH</link> error code to
 indicate such discrepancies.
 </para>
      <para>
 The DmtAdmin does not check that the targeted node exists (or that it does
 not exist, in case of a node creation) before calling the plugin. It is the
 responsibility of the plugin to perform this check and to throw a
 <link linkend="org.osgi.service.dmt.DmtException.NODE_NOT_FOUND">DmtException.NODE_NOT_FOUND</link> or
 <link linkend="org.osgi.service.dmt.DmtException.NODE_ALREADY_EXISTS">DmtException.NODE_ALREADY_EXISTS</link> if needed. In this case the DmtAdmin
 must pass through this exception to the caller of the corresponding
 DmtSession method.
 </para>
      <para>
 The plugin can use the remaining error codes as needed. If an error does not
 fit into any other category, the <link linkend="org.osgi.service.dmt.DmtException.COMMAND_FAILED">DmtException.COMMAND_FAILED</link> code
 should be used.</para>
      <section role="method" xreflabel="copy(String[],String[],boolean)" xml:id="org.osgi.service.dmt.spi.ReadWriteDataSession.copy-String---String---boolean-">
         <title>public void copy(String[] nodePath,String[] newNodePath,boolean recursive) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodePath</title>
            <para>an absolute path specifying the node or the root of a
        subtree to be copied</para>
         </formalpara>
         <formalpara role="parameter">
            <title>newNodePath</title>
            <para>the absolute path of the new node or root of a subtree</para>
         </formalpara>
         <formalpara role="parameter">
            <title>recursive</title>
            <para>
               <code>false</code> if only a single node is copied,
        <code>true</code> if the whole subtree is copied</para>
         </formalpara>
         <para role="description">
Create a copy of a node or a whole subtree. Beside the structure and
 values of the nodes, most properties managed by the plugin must also be
 copied, with the exception of the Timestamp and Version properties.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodePath</code> points to a
         non-existing node, or if <code>newNodePath</code> points to a node
         that cannot exist in the tree</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_ALREADY_EXISTS</code> if <code>newNodePath</code> points to
         a node that already exists</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the node could not be copied
         because of meta-data restrictions</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>FEATURE_NOT_SUPPORTED</code> if the copy operation is not
         supported by the plugin</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some unspecified error is
         encountered while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtSession.copy-String-String-boolean-">DmtSession.copy(String, String, boolean)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="createInteriorNode(String[],String)" xml:id="org.osgi.service.dmt.spi.ReadWriteDataSession.createInteriorNode-String---String-">
         <title>public void createInteriorNode(String[] nodePath,String type) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodePath</title>
            <para>the absolute path of the node to create</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>the type URI of the interior node, can be <code>null</code> if no
        node type is defined</para>
         </formalpara>
         <para role="description">
Create an interior node with a given type. The type of interior node, if
 specified, is a URI identifying a DDF document.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodePath</code> points to a node
         that cannot exist in the tree</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_ALREADY_EXISTS</code> if <code>nodeUri</code> points to a
         node that already exists</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the node could not be created
         because of meta-data restrictions</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some unspecified error is
         encountered while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtSession.createInteriorNode-String-">DmtSession.createInteriorNode(String)</link>, <link linkend="org.osgi.service.dmt.DmtSession.createInteriorNode-String-String-">DmtSession.createInteriorNode(String, String)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="createLeafNode(String[],DmtData,String)" xml:id="org.osgi.service.dmt.spi.ReadWriteDataSession.createLeafNode-String---DmtData-String-">
         <title>public void createLeafNode(String[] nodePath,DmtData value,String mimeType) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodePath</title>
            <para>the absolute path of the node to create</para>
         </formalpara>
         <formalpara role="parameter">
            <title>value</title>
            <para>the value to be given to the new node, can be <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>mimeType</title>
            <para>the MIME type to be given to the new node, can be
        <code>null</code>
            </para>
         </formalpara>
         <para role="description">
Create a leaf node with a given value and MIME type. If the specified
 value or MIME type is <code>null</code>, their default values must be taken.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodePath</code> points to a node
         that cannot exist in the tree</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_ALREADY_EXISTS</code> if <code>nodePath</code> points to a
         node that already exists</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the node could not be created
         because of meta-data restrictions</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some unspecified error is
         encountered while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtSession.createLeafNode-String-">DmtSession.createLeafNode(String)</link>, <link linkend="org.osgi.service.dmt.DmtSession.createLeafNode-String-DmtData-">DmtSession.createLeafNode(String, DmtData)</link>, <link linkend="org.osgi.service.dmt.DmtSession.createLeafNode-String-DmtData-String-">DmtSession.createLeafNode(String, DmtData, String)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="deleteNode(String[])" xml:id="org.osgi.service.dmt.spi.ReadWriteDataSession.deleteNode-String---">
         <title>public void deleteNode(String[] nodePath) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodePath</title>
            <para>the absolute path of the node to delete</para>
         </formalpara>
         <para role="description">
Delete the given node. Deleting interior nodes is recursive, the whole
 subtree under the given node is deleted.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodePath</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the node could not be deleted
         because of meta-data restrictions</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some unspecified error is
         encountered while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtSession.deleteNode-String-">DmtSession.deleteNode(String)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="renameNode(String[],String)" xml:id="org.osgi.service.dmt.spi.ReadWriteDataSession.renameNode-String---String-">
         <title>public void renameNode(String[] nodePath,String newName) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodePath</title>
            <para>the absolute path of the node to rename</para>
         </formalpara>
         <formalpara role="parameter">
            <title>newName</title>
            <para>the new name property of the node</para>
         </formalpara>
         <para role="description">
Rename a node. This operation only changes the name of the node (updating
 the timestamp and version properties if they are supported), the value
 and the other properties are not changed. The new name of the node must
 be provided, the new path is constructed from the base of the old path
 and the given name.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodePath</code> points to a
         non-existing node, or if the new node is not defined in the tree</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>NODE_ALREADY_EXISTS</code> if there already exists a sibling
         of <code>nodePath</code> with the name <code>newName</code>
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the node could not be renamed
         because of meta-data restrictions</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some unspecified error is
         encountered while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtSession.renameNode-String-String-">DmtSession.renameNode(String, String)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setNodeTitle(String[],String)" xml:id="org.osgi.service.dmt.spi.ReadWriteDataSession.setNodeTitle-String---String-">
         <title>public void setNodeTitle(String[] nodePath,String title) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodePath</title>
            <para>the absolute path of the node</para>
         </formalpara>
         <formalpara role="parameter">
            <title>title</title>
            <para>the title text of the node, can be <code>null</code>
            </para>
         </formalpara>
         <para role="description">
Set the title property of a node. The length of the title is guaranteed
 not to exceed the limit of 255 bytes in UTF-8 encoding.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodePath</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the title could not be set
         because of meta-data restrictions</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>FEATURE_NOT_SUPPORTED</code> if the Title property is not
         supported by the plugin</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some unspecified error is
         encountered while attempting to complete the command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtSession.setNodeTitle-String-String-">DmtSession.setNodeTitle(String, String)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setNodeType(String[],String)" xml:id="org.osgi.service.dmt.spi.ReadWriteDataSession.setNodeType-String---String-">
         <title>public void setNodeType(String[] nodePath,String type) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodePath</title>
            <para>the absolute path of the node</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>the type of the node, can be <code>null</code>
            </para>
         </formalpara>
         <para role="description">
Set the type of a node. The type of leaf node is the MIME type of the
 data it contains. The type of an interior node is a URI identifying a DDF
 document.
 </para>
         <para>
 For interior nodes, the <code>null</code> type should remove the reference (if
 any) to a DDF document overriding the tree structure defined by the
 ancestors. For leaf nodes, it requests that the default MIME type is used
 for the given node.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodePath</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the type
         could not be set because of meta-data restrictions</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while accessing
         the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some unspecified
         error is encountered while attempting to complete the command
         </para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtSession.setNodeType-String-String-">DmtSession.setNodeType(String, String)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setNodeValue(String[],DmtData)" xml:id="org.osgi.service.dmt.spi.ReadWriteDataSession.setNodeValue-String---DmtData-">
         <title>public void setNodeValue(String[] nodePath,DmtData data) throws DmtException</title>
         <formalpara role="parameter">
            <title>nodePath</title>
            <para>the absolute path of the node</para>
         </formalpara>
         <formalpara role="parameter">
            <title>data</title>
            <para>the data to be set, can be <code>null</code>
            </para>
         </formalpara>
         <para role="description">
Set the value of a leaf or interior node. The format of the node is
 contained in the <code>DmtData</code> object. For interior nodes, the format
 is <code>FORMAT_NODE</code>, while for leaf nodes this format is never used.
 </para>
         <para>
 If the specified value is <code>null</code>, the default value must be taken;
 if there is no default value, a <code>DmtException</code> with error code
 <code>METADATA_MISMATCH</code> must be thrown.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>NODE_NOT_FOUND</code> if <code>nodePath</code> points to a
         non-existing node</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the value
         could not be set because of meta-data restrictions</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>FEATURE_NOT_SUPPORTED</code> if the specified node is an
         interior node and does not support Java object values</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while accessing
         the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some unspecified
         error is encountered while attempting to complete the command
         </para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dmt.DmtSession.setNodeValue-String-DmtData-">DmtSession.setNodeValue(String, DmtData)</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="TransactionalDataSession" xml:id="org.osgi.service.dmt.spi.TransactionalDataSession">
      <title>public interface TransactionalDataSession<?line-break?> extends ReadWriteDataSession</title>
      <para>
Provides atomic read-write access to the part of the tree handled by the
 plugin that created this session.
   </para>
      <section role="method" xreflabel="commit()" xml:id="org.osgi.service.dmt.spi.TransactionalDataSession.commit--">
         <title>public void commit() throws DmtException</title>
         <para role="description">
Commits a series of DMT operations issued in the current atomic session
 since the last transaction boundary. Transaction boundaries are the
 creation of this object that starts the session, and all subsequent
 <link linkend="org.osgi.service.dmt.spi.TransactionalDataSession.commit--">commit()</link> and <link linkend="org.osgi.service.dmt.spi.TransactionalDataSession.rollback--">rollback()</link> calls.
 </para>
         <para>
 This method can fail even if all operations were successful. This can
 happen due to some multi-node semantic constraints defined by a specific
 implementation. For example, node A can be required to always have
 children A/B, A/C and A/D. If this condition is broken when
 <code>commit()</code> is executed, the method will fail, and throw a
 <code>METADATA_MISMATCH</code> exception.
 </para>
         <para>
 In many cases the tree is not the only way to manage a given part of the
 system. It may happen that while modifying some nodes in an atomic
 session, the underlying settings are modified in parallel outside the
 scope of the DMT. If this is detected during commit, an exception with
 the code <code>CONCURRENT_ACCESS</code> is thrown.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>METADATA_MISMATCH</code> if the operation failed because of
         meta-data restrictions</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>CONCURRENT_ACCESS</code> if it is
         detected that some modification has been made outside the scope
         of the DMT to the nodes affected in the session's operations</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>DATA_STORE_FAILURE</code> if an error occurred while
         accessing the data store</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> if some
         unspecified error is encountered while attempting to complete the
         command</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="rollback()" xml:id="org.osgi.service.dmt.spi.TransactionalDataSession.rollback--">
         <title>public void rollback() throws DmtException</title>
         <para role="description">
Rolls back a series of DMT operations issued in the current atomic
 session since the last transaction boundary. Transaction boundaries are
 the creation of this object that starts the session, and all subsequent
 <link linkend="org.osgi.service.dmt.spi.TransactionalDataSession.commit--">commit</link> and <link linkend="org.osgi.service.dmt.spi.TransactionalDataSession.rollback--">rollback</link> calls.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the error code <code>ROLLBACK_FAILED</code> in case
         the rollback did not succeed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the necessary
         permissions to execute the underlying management operation   </para>
         </formalpara>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.service.dmt.notification" xml:id="org.osgi.service.dmt.notification" xml:base="../../generated/javadoc/docbook/org.osgi.service.dmt.notification.xml">
   <title>org.osgi.service.dmt.notification</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.dmt.notification-version">Version 2.0</releaseinfo>
      <edition xml:id="org.osgi.service.dmt.notification-version.number">2.0</edition>
   </info>
   <para>
Device Management Tree Notification Package Version 2.0.
 
 </para>
   <para>
 This package contains the public API of the Notification service. This service
 enables the sending of asynchronous notifications to management servers.
 Permission classes are provided by the <code>org.osgi.service.dmt.security</code> package.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.dmt.notification; version="[2.0,3.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.dmt.notification; version="[2.0,2.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.notification.AlertItem">
                  <code>AlertItem</code>
               </link> - 
Immutable data structure carried in an alert (client initiated notification).
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.notification.NotificationService">
                  <code>NotificationService</code>
               </link> - 
NotificationService enables sending asynchronous notifications to a
 management server.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="AlertItem" xml:id="org.osgi.service.dmt.notification.AlertItem">
      <title>public class AlertItem</title>
      <para>
Immutable data structure carried in an alert (client initiated notification).
 The <code>AlertItem</code> describes details of various notifications that can be
 sent by the client, for example as alerts in the OMA DM protocol. The use
 cases include the client sending a session request to the server (alert
 1201), the client notifying the server of completion of a software update
 operation (alert 1226) or sending back results in response to an asynchronous
 EXEC command.
 </para>
      <para>
 The data syntax and semantics varies widely between various alerts, so does
 the optionality of particular parameters of an alert item. If an item, such
 as source or type, is not defined, the corresponding getter method returns
 <code>null</code>. For example, for alert 1201 (client-initiated session) all
 elements will be <code>null</code>.
 </para>
      <para>
 The syntax used in <code>AlertItem</code> class corresponds to the OMA DM alert
 format. <link linkend="org.osgi.service.dmt.notification.NotificationService">NotificationService</link> implementations on other management
 protocols should map these constructs to the underlying protocol.</para>
      <section role="method" xreflabel="AlertItem(String,String,String,DmtData)" xml:id="org.osgi.service.dmt.notification.AlertItem.AlertItem-String-String-String-DmtData-">
         <title>public  AlertItem(String source,String type,String mark,DmtData data)</title>
         <formalpara role="parameter">
            <title>source</title>
            <para>the URI of the node which is the source of the alert item</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>a MIME type or a URN that identifies the type of the data in
        the alert item</para>
         </formalpara>
         <formalpara role="parameter">
            <title>data</title>
            <para>a <code>DmtData</code> object that contains the format and value
        of the data in the alert item</para>
         </formalpara>
         <formalpara role="parameter">
            <title>mark</title>
            <para>the mark parameter of the alert item</para>
         </formalpara>
         <para role="description">
Create an instance of the alert item. The constructor takes all possible
 data entries as parameters. Any of these parameters can be <code>null</code>.
 The semantics of the parameters may be refined by the definition of a
 specific alert, identified by its alert code (see
 <link linkend="org.osgi.service.dmt.notification.NotificationService.sendNotification-String-int-String-AlertItem---">NotificationService.sendNotification(String, int, String, AlertItem[])</link>
 ). In case of Generic Alerts for example (code 1226), the <code>mark</code>
 parameter contains a severity string.
   </para>
      </section>
      <section role="method" xreflabel="AlertItem(String[],String,String,DmtData)" xml:id="org.osgi.service.dmt.notification.AlertItem.AlertItem-String---String-String-DmtData-">
         <title>public  AlertItem(String[] source,String type,String mark,DmtData data)</title>
         <formalpara role="parameter">
            <title>source</title>
            <para>the path of the node which is the source of the alert item</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>a MIME type or a URN that identifies the type of the data in
        the alert item</para>
         </formalpara>
         <formalpara role="parameter">
            <title>data</title>
            <para>a <code>DmtData</code> object that contains the format and value
        of the data in the alert item</para>
         </formalpara>
         <formalpara role="parameter">
            <title>mark</title>
            <para>the mark parameter of the alert item</para>
         </formalpara>
         <para role="description">
Create an instance of the alert item, specifying the source node URI as
 an array of path segments. The constructor takes all possible data
 entries as parameters. Any of these parameters can be <code>null</code>. The
 semantics of the parameters may be refined by the definition of a
 specific alert, identified by its alert code (see
 <link linkend="org.osgi.service.dmt.notification.NotificationService.sendNotification-String-int-String-AlertItem---">NotificationService.sendNotification(String, int, String, AlertItem[])</link>
 ). In case of Generic Alerts for example (code 1226), the <code>mark</code>
 parameter contains a severity string.
   </para>
      </section>
      <section role="method" xreflabel="getData()" xml:id="org.osgi.service.dmt.notification.AlertItem.getData--">
         <title>public DmtData getData()</title>
         <para role="description">
Get the data associated with the alert item. The returned <code>DmtData</code>
 object contains the format and the value of the data in the alert item.
 There might be no data associated with the alert item.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the data associated with the alert item, or <code>null</code> if there
         is no data</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMark()" xml:id="org.osgi.service.dmt.notification.AlertItem.getMark--">
         <title>public String getMark()</title>
         <para role="description">
Get the mark parameter associated with the alert item. The interpretation
 of the mark parameter depends on the alert being sent, as identified by
 the alert code in
 <link linkend="org.osgi.service.dmt.notification.NotificationService.sendNotification-String-int-String-AlertItem---">NotificationService.sendNotification(String, int, String, AlertItem[])</link>
 . There might be no mark associated with the alert item.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the mark associated with the alert item, or <code>null</code> if there
         is no mark</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getSource()" xml:id="org.osgi.service.dmt.notification.AlertItem.getSource--">
         <title>public String getSource()</title>
         <para role="description">
Get the node which is the source of the alert. There might be no source
 associated with the alert item.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the URI of the node which is the source of this alert, or
         <code>null</code> if there is no source</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.dmt.notification.AlertItem.getType--">
         <title>public String getType()</title>
         <para role="description">
Get the type associated with the alert item. The type string is a MIME
 type or a URN that identifies the type of the data in the alert item
 (returned by <link linkend="org.osgi.service.dmt.notification.AlertItem.getData--">getData()</link>). There might be no type associated with
 the alert item.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the type associated with the alert item, or <code>null</code> if there
         is no type</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="toString()" xml:id="org.osgi.service.dmt.notification.AlertItem.toString--">
         <title>public String toString()</title>
         <para role="description">
Returns the string representation of this alert item. The returned string
 includes all parameters of the alert item, and has the following format:
 
 </para>
         <programlisting>   AlertItem(&lt;source&gt;, &lt;type&gt;, &lt;mark&gt;, &lt;data&gt;)</programlisting>
         <para>
 
 The last parameter is the string representation of the data value. The
 format of the data is not explicitly included.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the string representation of this alert item</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="NotificationService" xml:id="org.osgi.service.dmt.notification.NotificationService">
      <title>public interface NotificationService</title>
      <para>
NotificationService enables sending asynchronous notifications to a
 management server. The implementation of <code>NotificationService</code> should
 register itself in the OSGi service registry as a service.
   </para>
      <section role="method" xreflabel="sendNotification(String,int,String,AlertItem[])" xml:id="org.osgi.service.dmt.notification.NotificationService.sendNotification-String-int-String-AlertItem---">
         <title>public void sendNotification(String principal,int code,String correlator,AlertItem[] items) throws DmtException</title>
         <formalpara role="parameter">
            <title>principal</title>
            <para>the principal name which is the recipient of this
        notification, can be <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>code</title>
            <para>the alert code, can be 0 if not needed</para>
         </formalpara>
         <formalpara role="parameter">
            <title>correlator</title>
            <para>optional field that contains the correlation identifier
        of an associated exec command, can be <code>null</code> if not needed</para>
         </formalpara>
         <formalpara role="parameter">
            <title>items</title>
            <para>the data of the alert items carried in this alert, can be
        <code>null</code> or empty if not needed</para>
         </formalpara>
         <para role="description">
Sends a notification to a named principal. It is the responsibility of
 the <code>NotificationService</code> to route the notification to the given
 principal using the registered
 <link linkend="org.osgi.service.dmt.notification.spi.RemoteAlertSender">org.osgi.service.dmt.notification.spi.RemoteAlertSender</link> services.
 </para>
         <para>
 In remotely initiated sessions the principal name identifies the remote
 server that created the session, this can be obtained using the session's
 <link linkend="org.osgi.service.dmt.DmtSession.getPrincipal--">getPrincipal</link> call.
 </para>
         <para>
 The principal name may be omitted if the client does not know the
 principal name. Even in this case the routing might be possible if the
 Notification Service finds an appropriate default destination (for
 example if it is only connected to one protocol adapter, which is only
 connected to one management server).
 </para>
         <para>
 Since sending the notification and receiving acknowledgment for it is
 potentially a very time-consuming operation, notifications are sent
 asynchronously. This method should attempt to ensure that the
 notification can be sent successfully, and should throw an exception if
 it detects any problems. If the method returns without error, the
 notification is accepted for sending and the implementation must make a
 best-effort attempt to deliver it.
 </para>
         <para>
 In case the notification is an asynchronous response to a previous
 <link linkend="org.osgi.service.dmt.DmtSession.execute-String-String-String-">execute</link> command, a
 correlation identifier can be specified to provide the association
 between the execute and the notification.
 </para>
         <para>
 In order to send a notification using this method, the caller must have
 an <code>AlertPermission</code> with a target string matching the specified
 principal name. If the <code>principal</code> parameter is <code>null</code> (the
 principal name is not known), the target of the <code>AlertPermission</code>
 must be "*".
 </para>
         <para>
 When this method is called with null correlator, null or empty AlertItem
 array, and a 0 code as values, it should send a protocol specific default
 notification to initiate a management session. For example, in case of
 OMA DM this is alert 1201 "Client Initiated Session". The
 <code>principal</code> parameter can be used to determine the recipient of the
 session initiation request.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DmtException</code>– with the following possible error codes:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>UNAUTHORIZED</code> when the remote server rejected the
         request due to insufficient authorization</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>ALERT_NOT_ROUTED</code> when the alert can not be routed to the
         given principal</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>REMOTE_ERROR</code> in case of
         communication problems between the device and the destination
         </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>COMMAND_FAILED</code> for unspecified errors
         encountered while attempting to complete the command</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>FEATURE_NOT_SUPPORTED</code> if the underlying management
         protocol doesn't support asynchronous notifications</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– if the caller does not have the required
         <code>AlertPermission</code> with a target matching the
         <code>principal</code> parameter, as described above   </para>
         </formalpara>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.service.dmt.notification.spi" xml:id="org.osgi.service.dmt.notification.spi" xml:base="../../generated/javadoc/docbook/org.osgi.service.dmt.notification.spi.xml">
   <title>org.osgi.service.dmt.notification.spi</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.dmt.notification.spi-version">Version 2.0</releaseinfo>
      <edition xml:id="org.osgi.service.dmt.notification.spi-version.number">2.0</edition>
   </info>
   <para>
Device Management Tree Notification SPI Package Version 2.0.
 
 </para>
   <para>
 This package contains the SPI (Service Provider Interface) of the Notification
 service. These interfaces are implemented by Protocol Adapters capable of 
 delivering notifications to management servers on a specific protocol.  Users of
 the <code>NotificationService</code> interface do not interact directly with this 
 package.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.dmt.notification.spi; version="[2.0,3.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.dmt.notification.spi; version="[2.0,2.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.notification.spi.RemoteAlertSender">
                  <code>RemoteAlertSender</code>
               </link> - 
The RemoteAlertSender can be used to send notifications to (remote) entities
 identified by principal names.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="RemoteAlertSender" xml:id="org.osgi.service.dmt.notification.spi.RemoteAlertSender">
      <title>public interface RemoteAlertSender</title>
      <para>
The RemoteAlertSender can be used to send notifications to (remote) entities
 identified by principal names. This service is provided by Protocol Adapters,
 and is used by the
 <link linkend="org.osgi.service.dmt.notification.NotificationService">org.osgi.service.dmt.notification.NotificationService</link> when sending
 alerts. Implementations of this interface have to be able to connect and send
 alerts to one or more management servers in a protocol specific way.
 </para>
      <para>
 The properties of the service registration should specify a list of
 destinations (principals) where the service is capable of sending alerts.
 This can be done by providing a <code>String</code> array of principal names in
 the <code>principals</code> registration property. If this property is not
 registered, the service will be treated as the default sender. The default
 alert sender is only used when a more specific alert sender cannot be found.
 </para>
      <para>
 The <code>principals</code> registration property is used when the
 <link linkend="org.osgi.service.dmt.notification.NotificationService.sendNotification-String-int-String-AlertItem---">org.osgi.service.dmt.notification.NotificationService.sendNotification(String, int, String, AlertItem[])</link>
 method is called, to find the proper <code>RemoteAlertSender</code> for the given
 destination. If the caller does not specify a principal, the alert is only
 sent if the Notification Sender finds a default alert sender, or if the
 choice is unambiguous for some other reason (for example if only one alert
 sender is registered).</para>
      <section role="method" xreflabel="sendAlert(String,int,String,AlertItem[])" xml:id="org.osgi.service.dmt.notification.spi.RemoteAlertSender.sendAlert-String-int-String-AlertItem---">
         <title>public void sendAlert(String principal,int code,String correlator,AlertItem[] items) throws Exception</title>
         <formalpara role="parameter">
            <title>principal</title>
            <para>the name identifying the server where the alert should
        be sent, can be <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>code</title>
            <para>the alert code, can be 0 if not needed</para>
         </formalpara>
         <formalpara role="parameter">
            <title>correlator</title>
            <para>the correlation identifier of an associated EXEC
        command, or <code>null</code> if there is no associated EXEC</para>
         </formalpara>
         <formalpara role="parameter">
            <title>items</title>
            <para>the data of the alert items carried in this alert, can be
        empty or <code>null</code> if no alert items are needed</para>
         </formalpara>
         <para role="description">
Sends an alert to a server identified by its principal name. In case the
 alert is sent in response to a previous
 <link linkend="org.osgi.service.dmt.DmtSession.execute-String-String-String-">execute</link> command, a correlation identifier can be specified to provide
 the association between the execute and the alert.
 </para>
         <para>
 The <code>principal</code> parameter specifies which server the alert should
 be sent to. This parameter can be <code>null</code> if the client does not
 know the name of the destination. The alert should still be delivered if
 possible; for example if the alert sender is only connected to one
 destination.
 </para>
         <para>
 Any exception thrown on this method will be propagated to the original
 sender of the event, wrapped in a <code>DmtException</code> with the code
 <code>REMOTE_ERROR</code>.
 </para>
         <para>
 Since sending the alert and receiving acknowledgment for it is
 potentially a very time-consuming operation, alerts are sent
 asynchronously. This method should attempt to ensure that the alert can
 be sent successfully, and should throw an exception if it detects any
 problems. If the method returns without error, the alert is accepted for
 sending and the implementation must make a best-effort attempt to deliver
 it.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– if the alert can not be sent to the server   </para>
         </formalpara>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.service.dmt.security" xml:id="org.osgi.service.dmt.security" xml:base="../../generated/javadoc/docbook/org.osgi.service.dmt.security.xml">
   <title>org.osgi.service.dmt.security</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.dmt.security-version">Version 2.0</releaseinfo>
      <edition xml:id="org.osgi.service.dmt.security-version.number">2.0</edition>
   </info>
   <para>
Device Management Tree Security Package Version 2.0.
 
 </para>
   <para>
 This package contains the permission classes used by the Device
 Management API in environments that support the Java 2 security model.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.dmt.security; version="[2.0,3.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.dmt.security; version="[2.0,2.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.security.AlertPermission">
                  <code>AlertPermission</code>
               </link> - 
Indicates the callers authority to send alerts to management servers,
 identified by their principal names.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.security.DmtPermission">
                  <code>DmtPermission</code>
               </link> - 
Controls access to management objects in the Device Management Tree (DMT).
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dmt.security.DmtPrincipalPermission">
                  <code>DmtPrincipalPermission</code>
               </link> - 
Indicates the callers authority to create DMT sessions on behalf of a remote
 management server.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="AlertPermission" xml:id="org.osgi.service.dmt.security.AlertPermission">
      <title>public class AlertPermission<?line-break?> extends Permission</title>
      <para>
Indicates the callers authority to send alerts to management servers,
 identified by their principal names.
 </para>
      <para>
         <code>AlertPermission</code> has a target string which controls the principal
 names where alerts can be sent. A wildcard is allowed at the end of the
 target string, to allow sending alerts to any principal with a name matching
 the given prefix. The "*" target means that alerts can be sent to
 any destination.</para>
      <section role="method" xreflabel="AlertPermission(String)" xml:id="org.osgi.service.dmt.security.AlertPermission.AlertPermission-String-">
         <title>public  AlertPermission(String target)</title>
         <formalpara role="parameter">
            <title>target</title>
            <para>the name of a principal, can end with <code>*</code> to match
        any principal identifier with the given prefix</para>
         </formalpara>
         <para role="description">
Creates a new <code>AlertPermission</code> object with its name set to the
 target string. Name must be non-null and non-empty.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– if <code>name</code> is <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if <code>name</code> is empty   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="AlertPermission(String,String)" xml:id="org.osgi.service.dmt.security.AlertPermission.AlertPermission-String-String-">
         <title>public  AlertPermission(String target,String actions)</title>
         <formalpara role="parameter">
            <title>target</title>
            <para>the name of the server, can end with <code>*</code> to match any
        server identifier with the given prefix</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>no actions defined, must be "*" for forward compatibility</para>
         </formalpara>
         <para role="description">
Creates a new <code>AlertPermission</code> object using the 'canonical' two
 argument constructor. In this version this class does not define any
 actions, the second argument of this constructor must be "*" so that this
 class can later be extended in a backward compatible way.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– if <code>name</code> or <code>actions</code> is
         <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if <code>name</code> is empty or
         <code>actions</code> is not "*"   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.dmt.security.AlertPermission.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>the object to compare to this AlertPermission instance</para>
         </formalpara>
         <para role="description">
Checks whether the given object is equal to this AlertPermission
 instance. Two AlertPermission instances are equal if they have the same
 target string.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the parameter represents the same permissions as
         this instance</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getActions()" xml:id="org.osgi.service.dmt.security.AlertPermission.getActions--">
         <title>public String getActions()</title>
         <para role="description">
Returns the action list (always <code>*</code> in the current version).
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the action string "*"</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.dmt.security.AlertPermission.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code for this permission object. If two AlertPermission
 objects are equal according to the <link linkend="org.osgi.service.dmt.security.AlertPermission.equals-Object-">equals(Object)</link> method, then
 calling this method on each of the two AlertPermission objects must
 produce the same integer result.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>hash code for this permission object</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="implies(Permission)" xml:id="org.osgi.service.dmt.security.AlertPermission.implies-Permission-">
         <title>public boolean implies(Permission p)</title>
         <formalpara role="parameter">
            <title>p</title>
            <para>the permission to check for implication</para>
         </formalpara>
         <para role="description">
Checks if this AlertPermission object implies the specified permission.
 Another AlertPermission instance is implied by this permission either if
 the target strings are identical, or if this target can be made identical
 to the other target by replacing a trailing "*" with any
 string.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if this AlertPermission instance implies the specified
         permission</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="newPermissionCollection()" xml:id="org.osgi.service.dmt.security.AlertPermission.newPermissionCollection--">
         <title>public PermissionCollection newPermissionCollection()</title>
         <para role="description">
Returns a new PermissionCollection object for storing AlertPermission
 objects.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the new PermissionCollection</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="DmtPermission" xml:id="org.osgi.service.dmt.security.DmtPermission">
      <title>public class DmtPermission<?line-break?> extends Permission</title>
      <para>
Controls access to management objects in the Device Management Tree (DMT). It
 is intended to control local access to the DMT. DmtPermission target string
 identifies the management object URI and the action field lists the OMA DM
 commands that are permitted on the management object. Example:
 
 </para>
      <programlisting> DmtPermission("./OSGi/bundles", "Add,Replace,Get");</programlisting>
      <para>
 
 This means that owner of this permission can execute Add, Replace and Get
 commands on the ./OSGi/bundles management object. It is possible to use
 wildcards in both the target and the actions field. Wildcard in the target
 field means that the owner of the permission can access children nodes of the
 target node. Example:
 
 </para>
      <programlisting> DmtPermission("./OSGi/bundles/*", "Get");</programlisting>
      <para>
 
 This means that owner of this permission has Get access on every child node
 of ./OSGi/bundles. The asterisk does not necessarily have to follow a '/'
 character. For example the <code>"./OSGi/a*"</code> target matches the
 <code>./OSGi/applications</code> subtree.
 </para>
      <para>
 If wildcard is present in the actions field, all legal OMA DM commands are
 allowed on the designated nodes(s) by the owner of the permission. Action
 names are interpreted case-insensitively, but the canonical action string
 returned by <link linkend="org.osgi.service.dmt.security.DmtPermission.getActions--">getActions()</link> uses the forms defined by the action
 constants.</para>
      <section role="field" xreflabel="ADD" xml:id="org.osgi.service.dmt.security.DmtPermission.ADD">
         <title>public static final String ADD = "Add"</title>
         <para>
Holders of DmtPermission with the Add action present can create new nodes
 in the DMT, that is they are authorized to execute the
 createInteriorNode() and createLeafNode() methods of the DmtSession. This
 action is also required for the copy() command, which needs to perform
 node creation operations (among others).
   </para>
      </section>
      <section role="field" xreflabel="DELETE" xml:id="org.osgi.service.dmt.security.DmtPermission.DELETE">
         <title>public static final String DELETE = "Delete"</title>
         <para>
Holders of DmtPermission with the Delete action present can delete nodes
 from the DMT, that is they are authorized to execute the deleteNode()
 method of the DmtSession.
   </para>
      </section>
      <section role="field" xreflabel="EXEC" xml:id="org.osgi.service.dmt.security.DmtPermission.EXEC">
         <title>public static final String EXEC = "Exec"</title>
         <para>
Holders of DmtPermission with the Exec action present can execute nodes
 in the DMT, that is they are authorized to call the execute() method of
 the DmtSession.
   </para>
      </section>
      <section role="field" xreflabel="GET" xml:id="org.osgi.service.dmt.security.DmtPermission.GET">
         <title>public static final String GET = "Get"</title>
         <para>
Holders of DmtPermission with the Get action present can query DMT node
 value or properties, that is they are authorized to execute the
 isLeafNode(), getNodeAcl(), getEffectiveNodeAcl(), getMetaNode(),
 getNodeValue(), getChildNodeNames(), getNodeTitle(), getNodeVersion(),
 getNodeTimeStamp(), getNodeSize() and getNodeType() methods of the
 DmtSession. This action is also required for the copy() command, which
 needs to perform node query operations (among others).
   </para>
      </section>
      <section role="field" xreflabel="REPLACE" xml:id="org.osgi.service.dmt.security.DmtPermission.REPLACE">
         <title>public static final String REPLACE = "Replace"</title>
         <para>
Holders of DmtPermission with the Replace action present can update DMT
 node value or properties, that is they are authorized to execute the
 setNodeAcl(), setNodeTitle(), setNodeValue(), setNodeType() and
 renameNode() methods of the DmtSession. This action is also be required
 for the copy() command if the original node had a title property (which
 must be set in the new node).
   </para>
      </section>
      <section role="method" xreflabel="DmtPermission(String,String)" xml:id="org.osgi.service.dmt.security.DmtPermission.DmtPermission-String-String-">
         <title>public  DmtPermission(String dmtUri,String actions)</title>
         <formalpara role="parameter">
            <title>dmtUri</title>
            <para>URI of the management object (or subtree)</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>OMA DM actions allowed</para>
         </formalpara>
         <para role="description">
Creates a new DmtPermission object for the specified DMT URI with the
 specified actions. The given URI can be:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>"*"</code>, which matches all valid (see
 <link linkend="org.osgi.service.dmt.Uri.isValidUri-String-">Uri.isValidUri(String)</link>) absolute URIs;</para>
            </listitem>
            <listitem>
               <para>the prefix of an absolute URI followed by the <code>*</code> character
 (for example <code>"./OSGi/L*"</code>), which matches all valid absolute URIs
 beginning with the given prefix;</para>
            </listitem>
            <listitem>
               <para>a valid absolute URI, which matches itself.</para>
            </listitem>
         </itemizedlist>
         <para>
 Since the <code>*</code> character is itself a valid URI character, it can
 appear as the last character of a valid absolute URI. To distinguish this
 case from using <code>*</code> as a wildcard, the <code>*</code> character at the
 end of the URI must be escaped with the <code>\</code> character. For example
 the URI <code>"./a*"</code> matches <code>"./a"</code>, <code>"./aa"</code>,
 <code>"./a/b"</code> etc. while <code>"./a\*"</code> matches <code>"./a*"</code> only.
 </para>
         <para>
 The actions string must either be "*" to allow all actions, or it must
 contain a non-empty subset of the valid actions, defined as constants in
 this class.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– if any of the parameters are <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if any of the parameters are invalid   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.dmt.security.DmtPermission.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>the object to compare to this DmtPermission instance</para>
         </formalpara>
         <para role="description">
Checks whether the given object is equal to this DmtPermission instance.
 Two DmtPermission instances are equal if they have the same target string
 and the same action mask. The "*" action mask is considered equal to a
 mask containing all actions.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the parameter represents the same permissions as
         this instance</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getActions()" xml:id="org.osgi.service.dmt.security.DmtPermission.getActions--">
         <title>public String getActions()</title>
         <para role="description">
Returns the String representation of the action list. The allowed actions
 are listed in the following order: Add, Delete, Exec, Get, Replace. The
 wildcard character is not used in the returned string, even if the class
 was created using the "*" wildcard.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>canonical action list for this permission object</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.dmt.security.DmtPermission.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code for this permission object. If two DmtPermission
 objects are equal according to the <link linkend="org.osgi.service.dmt.security.DmtPermission.equals-Object-">equals(Object)</link> method, then
 calling this method on each of the two DmtPermission objects must produce
 the same integer result.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>hash code for this permission object</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="implies(Permission)" xml:id="org.osgi.service.dmt.security.DmtPermission.implies-Permission-">
         <title>public boolean implies(Permission p)</title>
         <formalpara role="parameter">
            <title>p</title>
            <para>the permission to check for implication</para>
         </formalpara>
         <para role="description">
Checks if this DmtPermission object "implies" the specified
 permission. This method returns <code>false</code> if and only if at least one
 of the following conditions are fulfilled for the specified permission:
 </para>
         <itemizedlist>
            <listitem>
               <para>it is not a DmtPermission</para>
            </listitem>
            <listitem>
               <para>its set of actions contains an action not allowed by this permission</para>
            </listitem>
            <listitem>
               <para>the set of nodes defined by its path contains a node not defined by
 the path of this permission</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if this DmtPermission instance implies the specified
         permission</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="newPermissionCollection()" xml:id="org.osgi.service.dmt.security.DmtPermission.newPermissionCollection--">
         <title>public PermissionCollection newPermissionCollection()</title>
         <para role="description">
Returns a new PermissionCollection object for storing DmtPermission
 objects.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the new PermissionCollection</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="DmtPrincipalPermission" xml:id="org.osgi.service.dmt.security.DmtPrincipalPermission">
      <title>public class DmtPrincipalPermission<?line-break?> extends Permission</title>
      <para>
Indicates the callers authority to create DMT sessions on behalf of a remote
 management server. Only protocol adapters communicating with management
 servers should be granted this permission.
 </para>
      <para>
         <code>DmtPrincipalPermission</code> has a target string which controls the name of
 the principal on whose behalf the protocol adapter can act. A wildcard is
 allowed at the end of the target string, to allow using any principal name
 with the given prefix. The "*" target means the adapter can create
 a session in the name of any principal.</para>
      <section role="method" xreflabel="DmtPrincipalPermission(String)" xml:id="org.osgi.service.dmt.security.DmtPrincipalPermission.DmtPrincipalPermission-String-">
         <title>public  DmtPrincipalPermission(String target)</title>
         <formalpara role="parameter">
            <title>target</title>
            <para>the name of the principal, can end with <code>*</code> to match
        any principal with the given prefix</para>
         </formalpara>
         <para role="description">
Creates a new <code>DmtPrincipalPermission</code> object with its name set to
 the target string. Name must be non-null and non-empty.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– if <code>name</code> is <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if <code>name</code> is empty   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="DmtPrincipalPermission(String,String)" xml:id="org.osgi.service.dmt.security.DmtPrincipalPermission.DmtPrincipalPermission-String-String-">
         <title>public  DmtPrincipalPermission(String target,String actions)</title>
         <formalpara role="parameter">
            <title>target</title>
            <para>the name of the principal, can end with <code>*</code> to match
        any principal with the given prefix</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>no actions defined, must be "*" for forward compatibility</para>
         </formalpara>
         <para role="description">
Creates a new <code>DmtPrincipalPermission</code> object using the 'canonical'
 two argument constructor. In this version this class does not define any
 actions, the second argument of this constructor must be "*" so that this
 class can later be extended in a backward compatible way.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– if <code>name</code> or <code>actions</code> is
         <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if <code>name</code> is empty or
         <code>actions</code> is not "*"   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.dmt.security.DmtPrincipalPermission.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>the object to compare to this DmtPrincipalPermission instance</para>
         </formalpara>
         <para role="description">
Checks whether the given object is equal to this DmtPrincipalPermission
 instance. Two DmtPrincipalPermission instances are equal if they have the
 same target string.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the parameter represents the same permissions as
         this instance</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getActions()" xml:id="org.osgi.service.dmt.security.DmtPrincipalPermission.getActions--">
         <title>public String getActions()</title>
         <para role="description">
Returns the action list (always <code>*</code> in the current version).
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the action string "*"</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.dmt.security.DmtPrincipalPermission.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code for this permission object. If two
 DmtPrincipalPermission objects are equal according to the
 <link linkend="org.osgi.service.dmt.security.DmtPrincipalPermission.equals-Object-">equals(Object)</link> method, then calling this method on each of the
 two DmtPrincipalPermission objects must produce the same integer result.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>hash code for this permission object</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="implies(Permission)" xml:id="org.osgi.service.dmt.security.DmtPrincipalPermission.implies-Permission-">
         <title>public boolean implies(Permission p)</title>
         <formalpara role="parameter">
            <title>p</title>
            <para>the permission to check for implication</para>
         </formalpara>
         <para role="description">
Checks if this DmtPrincipalPermission object implies the specified
 permission. Another DmtPrincipalPermission instance is implied by this
 permission either if the target strings are identical, or if this target
 can be made identical to the other target by replacing a trailing
 "*" with any string.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if this DmtPrincipalPermission instance implies the
         specified permission</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="newPermissionCollection()" xml:id="org.osgi.service.dmt.security.DmtPrincipalPermission.newPermissionCollection--">
         <title>public PermissionCollection newPermissionCollection()</title>
         <para role="description">
Returns a new PermissionCollection object for storing
 DmtPrincipalPermission objects.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the new PermissionCollection</para>
         </formalpara>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i2165260"><title>OMA DM-TND v1.2
      draft</title>http://member.openmobilealliance.org/ftp/public_documents/dm/Permanent_documents/OMA-TS-DM-TND-V1_2-20050615-C.zip</bibliomixed>

      <bibliomixed><title>OMA DM-RepPro v1.2
      draft:</title>http://member.openmobilealliance.org/ftp/public_documents/dm/Permanent_documents/OMA-DM-RepPro-V1_2_0-20050131-D.zip</bibliomixed>

      <bibliomixed><title>IETF RFC2578. Structure of Management
      Information</title>Version 2 (SMIv2)<?line-break?>http://www.ietf.org/rfc/rfc2578.txt</bibliomixed>

      <bibliomixed xml:id="i1399261"><title>Java™ Management Extensions
      Instrumentation and Agent Specification v1.2, October
      2002,</title>http://www.oracle.com/technetwork/java/javase/tech/javamanagement-140525.html</bibliomixed>

      <bibliomixed xml:id="i1399277"><title>JSR 9 - Federated Management
      Architecture (FMA) Specification</title>Version 1.0, January
      2000<?line-break?>http://www.jcp.org/en/jsr/detailid=9</bibliomixed>

      <bibliomixed xml:id="i1399342"><title>WBEM Profile Template,
      DSP1000</title>Status: Draft, Version 1.0 Preliminary, March 11,
      2004<?line-break?>http://www.dmtf.org/standards/wbem</bibliomixed>

      <bibliomixed xml:id="i1399257"><title>SNMP</title>http://www.wtcs.org/snmp4tpc/snmp_rfc.htm#rfc</bibliomixed>

      <bibliomixed xml:id="i1418110"><title>RFC 2396 Uniform Resource
      Identifiers (URI): Generic
      Syntax</title>http://www.ietf.org/rfc/rfc2396.txt</bibliomixed>

      <bibliomixed xml:id="i1662528"><title>MIME Media
      Types</title>http://www.iana.org/assignments/media-types/</bibliomixed>

      <bibliomixed xml:id="i1869240"><title>RFC 3548 The Base16, Base32, and
      Base64 Data
      Encodings</title>http://www.ietf.org/rfc/rfc3548.txt</bibliomixed>

      <bibliomixed xml:id="i1869214"><title>Secure Hash Algorithm
      1</title>http://www.itl.nist.gov/fipspubs/fip180-1.htm</bibliomixed>

      <bibliomixed xml:id="i2409502"><title>TR-069 CPE WAN Management Protocol
      (CWMP)</title>Customer Premises Equipment Wide Area Network Management
      Protocol (CWMP)<?line-break?>http://en.wikipedia.org/wiki/TR-069</bibliomixed>

      <bibliomixed xml:id="i2437549"><title>XML Schema Part 2: Datatypes
      Second
      Edition</title>http://www.w3.org/TR/2004/PER-xmlschema-2-20040318/</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="131" revision="$Id: c6a76319c382baec251e5dbf5cee6cb1df9a2bcb $" version="5" xml:id="service.tr069todmt" xml:base="../131/service.tr069todmt.xml">
  <title>TR069 Connector Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.tr069todmt-version" linkend="org.osgi.service.tr069todmt"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>This chapter provides a specification for the TR069 Connector, an
    assistant to a Protocol Adapter based on <xref linkend="i741499"/>. A
    TR069 Connector provides a mapping of TR-069 concepts to/from the <xref linkend="service.dmt"/>. It mainly handles the low level details of
    Object/Parameter Name to Dmt Admin URI mapping, and vice versa. TR-069
    Protocol Adapter developers can use this service to simplify the use the
    Dmt Admin service. The TR069 Connector service is based on the definition
    of a Protocol Mapping in <xref linkend="service.dmt.protocolmapping"/>. It
    is assumed that the reader understands TR-069 and has a basic
    understanding of the Dmt Admin service.</para>

    <para>The examples in this specification are not from a Broadband Forum
    Technical Report and are purely fictional.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Connector</emphasis> - Provide a TR-069 view on top
          of the Dmt Admin service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Simplify</emphasis> - Simplify the handling of data
          models implemented through the DMT through the TR-069
          protocol.</para>
        </listitem>

        <listitem>
          <para><emphasis>Browse</emphasis> - Implement the constructs for
          <code>MAP</code> and <code>LIST</code> handling.</para>
        </listitem>

        <listitem>
          <para><emphasis>Native</emphasis> - Provide a mechanism for Data
          Plugins to convey conversion information to the Protocol Adapter so
          that native TR-069 object models can be implemented as Data
          Plugins.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.tr069todmt.TR069ConnectorFactory" xrefstyle="hyperlink"/> - Provides a way to create a <xref linkend="org.osgi.service.tr069todmt.TR069Connector" xrefstyle="hyperlink"/> that is bound to an active Dmt
          Session.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.tr069todmt.TR069Connector" xrefstyle="hyperlink"/> - Created by <xref linkend="org.osgi.service.tr069todmt.TR069ConnectorFactory" xrefstyle="hyperlink"/> on a Dmt Session; provides methods that
          helps in using the TR-069 namespace and RPCs on a Dmt Admin
          DMT.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.tr069todmt.ParameterValue" xrefstyle="hyperlink"/> - The value of a parameter, maps to the
          TR-069 <code>ParameterValueStruct</code>.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.tr069todmt.ParameterInfo" xrefstyle="hyperlink"/> - Information about the parameter, maps to
          the TR-069 <code>ParameterInfoStruct</code>.</para>
        </listitem>

        <listitem>
          <para>DMT - The Device Management Tree as available through the Dmt
          Admin service.</para>
        </listitem>
      </itemizedlist>

      <figure xml:id="i742559">
        <title>TR-069 Entities</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.501in" contentwidth="6.230in" fileref="tr069-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Synopsis</title>

      <para>A TR-069 Protocol Adapter first creates a Dmt Session on the node
      in the DMT that maps to an object model that should be visible to the
      TR-069 Management Server. A Protocol Adapter can choose to map a whole
      sub-tree or it can create a virtual object model based on different
      nodes, this depends on the implementation of the Protocol
      Adapter.</para>

      <para>When a TR-069 RPC arrives, the Protocol Adapter must parse the
      SOAP message and analyze the request. In general, an RPC can request the
      update or retrieval of multiple values. The Protocol Adapter must
      decompose these separate requests into single requests and execute them
      as a single unit. If the request is a retrieval or update of a data
      model maintained in the Dmt Admin service then the Protocol Adapter can
      use a TR069 Connector to simplify implementing this request. The TR069
      Connector Factory service can be used to create an instance of a TR069
      Connector that is based on a specific Dmt Session.</para>

      <para>The TR069 Connector maps the Object or Parameter Name to a URI and
      perform the requested operation on the corresponding node. The
      name-to-URI conversion supports the <code>LIST</code> and
      <code>MAP</code> concepts as defined in <xref linkend="service.dmt.osgiobjectmodeling"/>.</para>

      <para>The TR069 Connector handles conversion from the Dmt Admin data
      types to the TR-069 data types. There is a default mapping for the
      standard Dmt Admin formats including the comma separated list supported
      by TR-069. However, Data Plugins that implement TR-069 aware object
      models can instruct the TR069 Connector by providing specific MIME types
      on the Meta Node.</para>

      <para>Objects can be added and deleted but are, in general, not added
      immediately. These objects are lazily created when they are accessed.
      The reason is that TR-069 does not support the concept of a session with
      atomic semantics, a fact leveraged by certain object models in the DMT.
      Therefore, adding an object will assign a instance id to an object but
      the creation of the object is delayed until the object is used.</para>

      <para>After all the requests in an RPC are properly handled the TR069
      Connector must be closed, the Dmt Session must be closed
      separately.</para>

      <para>Errors are reported to the caller as they happen, if a Dmt Admin
      service error is fatal then the Dmt Session will be closed and it will
      be necessary to create a new TR069 Connector.</para>
    </section>
  </section>

  <section>
    <title>TR-069 Protocol Primer</title>

    <para>The <xref linkend="i799974"/> is an organization for broadband
    wire-line solutions. They develop multi-service broadband packet
    networking specifications addressing inter-operability, architecture, and
    management. Their specifications enable home, business and converged
    broadband services, encompassing customer, access and backbone networks.
    One of the specifications of the Broadband Forum is the
    <emphasis>Technical Report No 69</emphasis>, also called TR-069, a
    specification of a management model.</para>

    <section>
      <title>Architecture</title>

      <para><xref linkend="i741499"/> is a technical report (Broadband Forum's
      specification model) that specifies a management protocol based on <xref linkend="i741562"/> over HTTP. The TR-069 technical report defines a
      number of mandatory Remote Procedure Calls (RPCs) that allow a
      management system, the Auto-Configuration Server (ACS), to discover the
      capabilities of the Consumer Premises Equipment (CPE) and do basic
      management. This model is depicted in <xref linkend="i753210"/>.</para>

      <figure xml:id="i753210">
        <title>TR-069 Reference Architecture</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="0.750in" contentwidth="6.214in" fileref="ref-architecture.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>In TR-069, the CPE is always initiating the conversation with the
      ACS though the ACS can request a session.</para>

      <para>Inside the CPE there is a Protocol Adapter that implements the
      TR-069 RPCs. These RPCs read and modify the objects models present in
      the CPE. There is usually a mechanism that allows the different modules
      in the CPE to contribute a management object to the Protocol Adapter so
      that the Protocol Adapter does not require knowledge about highly
      specialized domains.</para>

      <para><xref linkend="i694602"/> specifies object model guidelines to be
      followed by all TR-069-enabled devices as well as a formal model to
      document these object models.</para>
    </section>

    <section>
      <title>Object Model</title>

      <para>The object model of TR-069 consists of
      <emphasis>objects</emphasis> that contain
      <emphasis>parameters</emphasis> as well as <emphasis>tables</emphasis>
      that contain objects. TR-106 says:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Object</emphasis> - A named collection of parameters
          and/or other objects.</para>
        </listitem>

        <listitem>
          <para><emphasis>Parameter</emphasis> - A name-value pair.</para>
        </listitem>

        <listitem>
          <para><emphasis>Table</emphasis> - An enumeration of objects
          identified by an instance id.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>Type Model TR-069</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.874in" contentwidth="6.259in" fileref="type-model.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Objects can also occur in tables, in that case the object name is
      suffixed with an <emphasis>instance id</emphasis>. An object that has no
      instance id is a singleton, with an instance id they are referred to as
      <emphasis>tables</emphasis>. In the Broadband Forum technical reports
      tables end in the special suffix <code>{i}</code>, the instance
      id.</para>

      <para>This provides the following structural definition for this
      specification:</para>

      <programlisting>named-value ::= NAME ( object | table | parameter )
object      ::= named-value +
table       ::= ( instance object )*
parameter   ::=
instance    ::= INTEGER &gt; 0</programlisting>

      <para>TR-069 talks about partial paths and parameter names. In this
      specification, a <emphasis>name</emphasis> is reserved for the short
      relative name used inside an object, also called the <emphasis>local
      name</emphasis>. The term <emphasis>path</emphasis> is reserved for the
      combination of object names, table names, and instance ids that are
      separated by a full stop (<code>'.' \u002E</code>) and used to traverse
      an instance model.</para>

      <programlisting>path           ::= parameter-path | object-path| table-path
segment        ::= NAME '.' ( instance '.' )?
object-path    ::= segment+
table-path     ::= segment* NAME '.'   // expect INTEGER next
parameter-path ::= object-path NAME
instance-path  ::= table-path instance '.'</programlisting>

      <para>In this specification the following terms are used
      consistently:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Object</emphasis> - Refers to a named type defining
          a certain set of parameters, objects, and tables.</para>
        </listitem>

        <listitem>
          <para><emphasis>Table</emphasis> - A list of instances for a given
          object.</para>
        </listitem>

        <listitem>
          <para><emphasis>Instance</emphasis> - An object element in a table
          at a certain id.</para>
        </listitem>

        <listitem>
          <para><emphasis>Instance Id</emphasis> - The integer id used to
          identify an instance in a table.</para>
        </listitem>

        <listitem>
          <para><emphasis>Alias</emphasis> - A name chosen by the ACS that
          uniquely identifies an instance.</para>
        </listitem>

        <listitem>
          <para><emphasis>Singleton</emphasis> - An object that is not in a
          table.</para>
        </listitem>

        <listitem>
          <para><emphasis>Name</emphasis> - The name of an object, table, or
          parameter refers to the local name only and not the path.</para>
        </listitem>

        <listitem>
          <para><emphasis>Segment</emphasis> - A component in a path that
          always ends in a full stop. A segment can contain instance ids to
          identify an instance.</para>
        </listitem>

        <listitem>
          <para><emphasis>Path</emphasis> - A string uniquely identifying a
          path in the tree to either a parameter, an object, or a
          table.</para>
        </listitem>

        <listitem>
          <para><emphasis>Object Path</emphasis> - A path that uniquely
          identifies an instance or a singleton. An object path must always
          ends in a full stop. This maps to the TR-069 concept of an
          <code>ObjectName</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Parameter Path</emphasis> - The name of the
          parameter preceded by the owning object. A path that does not end in
          a full stop is always a parameter path.</para>
        </listitem>

        <listitem>
          <para><emphasis>Table Path</emphasis> - An object path that lacks
          the last instance id. In TR-069 this is also sometimes called a
          partial path. The last segment is an object path that must be
          followed by an instance id to address an instance.</para>
        </listitem>

        <listitem>
          <para><emphasis>Instance Path</emphasis> - A path to an instance in
          a table</para>
        </listitem>
      </itemizedlist>

      <para>This provides a hierarchy as depicted in <xref linkend="i808992"/>.</para>

      <figure xml:id="i808992">
        <title>TR-069 Object and Parameter naming relative to the parameter
        MemoryStatus</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.913in" contentwidth="5.011in" fileref="naming.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section xml:id="i760050">
      <title>Parameter Names</title>

      <para>The grammars for parameter names and object names are as
      follows:</para>

      <programlisting>NAME ::= ( Letter | '_' )
         ( Letter | Digit | '-' | '_' | CombiningChar| Extender )*</programlisting>

      <para>The productions <code>Letter</code>, <code>Digit</code>,
      <code>CombiningChar</code>, and <code>Extender</code> are defined in
      <xref linkend="i747814"/>. The name basically supports the full unicode
      character set for letters and digits (including digits for other
      languages), including sets for languages like Hebrew and Chinese.
      Examples of different parameter names are:</para>

      <programlisting>name            // simple name
Name            // case sensitive
_                           
_-_-_
ångstrom            
þingsten
<phrase role="symbol">ΨΣΩΠ</phrase></programlisting>
    </section>

    <section xml:id="i786112">
      <title>Parameter Type</title>

      <para>A parameter value can have one of the data types defined in <xref linkend="i694602"/>, they are summarized in <xref linkend="service.tr069todmt-tr106.data.types"/>.</para>

      <table xml:id="service.tr069todmt-tr106.data.types">
        <title>TR-106 Data types</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>TR-106 Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>object</code></entry>

              <entry><para>Represents a structured type</para></entry>
            </row>

            <row>
              <entry><code>string</code></entry>

              <entry><para>A Unicode string, optionally restricted in
              length</para></entry>
            </row>

            <row>
              <entry><code>int</code></entry>

              <entry><para>32 bit integer</para></entry>
            </row>

            <row>
              <entry><code>long</code></entry>

              <entry><para>64 bit integer</para></entry>
            </row>

            <row>
              <entry><code>unsignedInt</code></entry>

              <entry><para>32 bit unsigned integer</para></entry>
            </row>

            <row>
              <entry><code>unsignedLong</code></entry>

              <entry><para>64 bit unsigned integer</para></entry>
            </row>

            <row>
              <entry><code>boolean</code></entry>

              <entry><para>Can have values 0 or false (<code>false</code>) or
              1 or true (<code>true</code>)</para></entry>
            </row>

            <row>
              <entry><code>dateTime</code></entry>

              <entry><para>TR-069 recognizes three different date times. These
              three cases are differentiated in the following
              way:</para><itemizedlist>
                  <listitem>
                    <para><emphasis>Unknown time</emphasis> - If the time is
                    not known.</para>
                  </listitem>

                  <listitem>
                    <para><emphasis>Relative time</emphasis> - Relative time
                    is the time since boot time.</para>
                  </listitem>

                  <listitem>
                    <para><emphasis>Absolute time</emphasis> - Normal date and
                    time.</para>
                  </listitem>
                </itemizedlist></entry>
            </row>

            <row>
              <entry><code>base64</code></entry>

              <entry><para>An array of bytes</para></entry>
            </row>

            <row>
              <entry><code>hexBinary</code></entry>

              <entry><para>An array of bytes</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>SOAP messages always provide a type for the parameter value. For
      example:</para>

      <programlisting>&lt;ParameterValueStruct&gt;
  &lt;name&gt;Parameter1&lt;/name&gt;
  &lt;value xsi:type="long"&gt;1234&lt;/value&gt;
&lt;/ParameterValueStruct&gt;</programlisting>

      <para>The <code>xsi</code> prefix refers to the
      <code>http://www.w3.org/2001/XMLSchema-instance</code> namespace.
      However, this makes not all TR-106 types well defined, for example in
      XML Schema <code>base64</code> is called <code>base64Binary</code>. This
      specification assumes that the names and definitions in <xref linkend="service.tr069todmt-tr106.data.types"/> and provides appropriate
      constants for the Protocol Adapter.</para>

      <para>Parameters can be read-only or read-write. All writable Parameters
      must also be readable although security can cause certain parameters to
      be read as an empty string, for example passwords. Parameters can
      reflect configuration as well as status of the device. External causes
      can cause parameters to change at any time. The TR-069 protocol has the
      facility to call an <code>Inform</code> RPC to provide the ACS with a
      notification of changed parameters.</para>
    </section>

    <section>
      <title>Parameter Attributes</title>

      <para>Parameter attributes provide the meta data for a parameter. In
      TR-069, the attributes are used to manage notifications and access
      control. Each parameter in TR-069 can be watched by the ACS by setting
      the corresponding parameter attribute to <emphasis>active</emphasis> or
      <emphasis>passive notifications</emphasis>. Passive notifications are
      passed whenever the CPE communicates with the ACS and active
      notifications initiate a session. Parameters that have a notification
      are said to be <emphasis>watched</emphasis>.</para>

      <para>Access to the parameters can be managed by setting Access Control
      Lists via the corresponding parameter attribute.</para>
    </section>

    <section xml:id="i831294">
      <title>Objects and Tables</title>

      <para>TR-106 has the concept of an <emphasis>object</emphasis> stored in
      a <emphasis>table</emphasis> to allow multiple instances of the same
      type. It is part of the object definition if it is stored in a table or
      not. An object cannot both appear as a table instance and as a
      singleton.</para>

      <para>Each instance in the table is addressed with an integer &gt;= 1.
      This <emphasis>instance id</emphasis> is not chosen by the ACS since it
      can be required to create a new instance due to an external event. For
      example the user plugging in a USB device or starting a new VOIP
      session. The ACS must discover these instance ids by asking the device
      for the instance ids in a table.</para>

      <para>For example, the parameter path
      <code>Device.LAN.DHCPOption.4.Request</code> refers to a parameter on a
      <code>DHCPOption</code> object that has the instance id 4. Instance ids
      are not sequential nor predictable. It is the responsibility of the
      device to choose an instance id when an object is created. Instance ids
      are assumed to be persistent so that the ACS can cache results from a
      discovery process.</para>

      <para>Newer TR-069 objects have been given an <code>Alias</code>
      parameter. This alias uniquely identifies the table instance.</para>

      <para>TR-069 defines a convention for a parameter that contains the
      number of entries in a table. Any parameter name that ends with
      <code>NumberOfEntries</code> contains the number of entries in a table
      with the name of the prefix in the same object. For example
      <code>A.B.CNumberOfEntries</code> provides the number of entries in the
      table:</para>

      <programlisting>A.B.C.</programlisting>
    </section>

    <section>
      <title>RPCs</title>

      <para>The object model implemented in a device is accessed and modified
      with <emphasis>RPCs</emphasis>. RPCs are remote procedure calls; a way
      to invoke a function remotely. TR-069 defines a number of mandatory RPCs
      and provides a mechanism to extend and discover the set of RPCs
      implemented by a CPE. The mandatory RPCs are listed in in the following
      table.</para>

      <table>
        <title>TR-069 RPCs</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1.2*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>RPC</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>GetRPCMethods</code></entry>

              <entry><para>Return a list of RPC methods</para></entry>
            </row>

            <row>
              <entry><code>SetParameterValues</code></entry>

              <entry><para>Set one or more parameter values</para></entry>
            </row>

            <row>
              <entry><code>GetParameterValues</code></entry>

              <entry><para>Get one or more parameter values</para></entry>
            </row>

            <row>
              <entry><code>GetParameterNames</code></entry>

              <entry><para>Get the parameter information for a parameter,
              object, or table.</para></entry>
            </row>

            <row>
              <entry><code>SetParameterAttributes</code></entry>

              <entry><para>Set parameter attributes</para></entry>
            </row>

            <row>
              <entry><code>GetParameterAttributes</code></entry>

              <entry><para>Get parameter attributes</para></entry>
            </row>

            <row>
              <entry><code>AddObject</code></entry>

              <entry><para>Add a new object to a table</para></entry>
            </row>

            <row>
              <entry><code>DeleteObject</code></entry>

              <entry><para>Delete an object from a table</para></entry>
            </row>

            <row>
              <entry><code>Download</code></entry>

              <entry><para>Download software/firmware</para></entry>
            </row>

            <row>
              <entry><code>Reboot</code></entry>

              <entry><para>Reboot the device</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Authentication</title>

      <para>The security model of TR-069 is based around the authentication
      taking place during the setup of a TLS (formerly SSL) connection. This
      authentication is then used to manage the access control lists via the
      parameter attributes.</para>
    </section>

    <section>
      <title>Sessions and Transactions</title>

      <para>A <emphasis>session</emphasis> with the ACS is always initiated by
      the CPE. The ACS can request a session, but it is always the CPE that
      starts a session by opening the connection to the ACS and then sending
      an <code>Inform</code> RPC. The session ends when the connection is
      closed, which happens after the ACS has informed the CPE it has no more
      requests.</para>

      <para>During a session, a CPE has the requirements that parameters must
      not change due to other sources than the session and that the parameters
      are consistent with the changes. However, there is no transactionality
      over the session, atomicity is only guaranteed for one RPC. An RPC can
      consist of multiple parameter modifications that should therefore be
      atomically applied.</para>
    </section>

    <section xml:id="i791700">
      <title>Events and Notifications</title>

      <para>TR-069 sessions always start with an <code>Inform</code> RPC from
      the CPE to the ACS. This RPC contains any events and notifications for
      parameters that were watched. Events signal crucial state changes from
      the CPE to the ACS. For example, if a device has rebooted it will inform
      the ACS. Notifications are caused by parameter changes, the
      <code>Inform</code> RPC contains a list of events and parameters with
      changed values.</para>
    </section>

    <section>
      <title>Errors</title>

      <para>Invoked RPCs can return a fault status if errors occur during the
      execution of the RPC. For ACS to CPE RPCs these fault codes start at
      9000, for the reverse direction they start at 8000. Each RPC defines the
      fault codes that can occur and their semantics in that context.</para>
    </section>
  </section>

  <section>
    <title>TR069 Connector</title>

    <para>A TR-069 Protocol Adapter must be able to browse foreign Data
    Plugins on the device and support native TR069 objects models implemented
    by a Data Plugin. As Data Plugins are available through the Dmt Admin
    service, the Protocol Adapter must provide a bi-directional mapping
    between Dmt Admin nodes and TR-069 parameters, notifications, and error
    codes.The mapping must enable a Data Plugin to provide a native Broadband
    Forum object model that limits itself to the required RPCs.</para>

    <section>
      <title>Role</title>

      <para>Developers implementing the TR-069 protocol are not likely to be
      also experts in the Dmt Admin service. This specification therefore
      provides a TR069 Connector Factory service that provides an object that
      can map from the TR-069 concepts to the Dmt Admin concepts, supporting
      all the constructs defined in the <xref linkend="service.dmt.osgiobjectmodeling"/>.</para>

      <para>The TR069 Connector only specifies a number of primitive functions
      to manage the DMT. Parsing the SOAP messages, handling the
      notifications, and splitting the requests for TR069 Connector is the
      responsibility of the Protocol Adapter. The reason that the TR069
      Connector does not work on a higher level is that a Protocol Adapter for
      TR-069 will likely communicate with other subsystems in the CPE than the
      OSGi framework alone. Though the Dmt Plugin model is an attractive
      approach to implement object models, there is history. Existing code
      will likely not be rewritten just because it can be done better as a
      Data Plugin.</para>

      <para>For example, a Data Plugin could implement the
      <code>Device.DeviceInfo.</code> object. However, this object actually
      resides in the DMT at a node:</para>

      <programlisting>./TR-069/Device/DeviceInfo</programlisting>

      <para>A TR-069 Protocol Adapter will therefore be confronted with a
      number of data models that reside in different places. Each place
      provides one or more consistent data models but it is the responsibility
      of the TR-069 Protocol Adapter to ensure the ACS gets a consistent and
      standardized view of the whole. To create this consistent view it will
      be necessary to adapt the paths given in the RPCs. It is expected that a
      Protocol Adapter is required to have a certain amount of domain
      knowledge, for example a table, that maps TR-069 paths to their actual
      providers.</para>

      <para>The basic model is depicted in <xref linkend="i800789"/>.</para>

      <figure pgwide="1" xml:id="i800789">
        <title>TR-069 Connector Context</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.200in" contentwidth="6.214in" fileref="connector-context.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The Protocol Adapter can be implemented as an OSGi Bundle or it
      can be implemented in native code in the device. Both architectures are
      viable. For certain aspects like the TR-157a3 Software Modules a certain
      amount of native code will be required to manage the OSGi Framework as
      an Execution Environment.</para>

      <para>In an environment where the Protocol Adapter is implemented
      outside an OSGi Framework it will be necessary to create a link to the
      Dmt Admin service. This can be achieved with a proxy bundle inside the
      OSGi framework that dispatches any requests from the native Protocol
      Adapter to the functionality present in the OSGi Framework. In this
      specification, it is assumed that such proxies can be present. However,
      the examples are all assuming that the Protocol Adapter is running as a
      Bundle.</para>
    </section>

    <section>
      <title>Obtaining a TR069 Connector</title>

      <para>A TR069 Connector is associated with a Dmt Session, the <xref linkend="org.osgi.service.tr069todmt.TR069ConnectorFactory" xrefstyle="hyperlink"/> provides the <xref linkend="org.osgi.service.tr069todmt.TR069ConnectorFactory.create-DmtSession-" xrefstyle="hyperlink"/> method that will return a <xref linkend="org.osgi.service.tr069todmt.TR069Connector" xrefstyle="hyperlink"/> object. This object remains associated with the
      Dmt Session until the Dmt Session is closed, which can happen because of
      a fatal error or when the TR069 Connector Factory is unregistered or
      un-gotten/released. Creating a TR069 Connector must not be expensive,
      Protocol Adapters should create and close them at will. Closing the
      connector must not close the corresponding Dmt Session.</para>

      <para>The TR069 Connector must use the root of the session as its
      <emphasis>base</emphasis>. That is, their URI mapping all parameters
      must start from the base. For example, if the session is opened at
      <code>./TR-069</code> then the parameter
      <code>IGD/DeviceInfo/Manufacturer</code> must map to URI
      <code>./TR-069/IGD/DeviceInfo/Manufacturer</code>.</para>

      <para>If a Protocol Adapter will modify the tree then it should use an
      atomic session for all RPCs even if the RPC indicates read-only. The
      reason for the atomicity is that in certain cases the lazy behavior of
      the TR069 Connector requires the creation of objects during a read
      operation. If a non-atomic session is used then the TR069 Connector must
      not attempt to lazily create objects and reject any <xref linkend="org.osgi.service.tr069todmt.TR069Connector.addObject-String-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.tr069todmt.TR069Connector.deleteObject-String-" xrefstyle="hyperlink"/> methods. See also <xref linkend="i838963"/>.</para>
    </section>

    <section>
      <title>Supported RPCs</title>

      <para>The TR069 Connector supports a limited number of RPCs, and for
      those RPCs it only supports the singleton case. The TR069 Connector
      provides support for the RPCs primitives listed in the following
      table.</para>

      <table pgwide="1">
        <title>Supported TR-069 RPCs</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1.2*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3" colwidth="2.8*"/>

          <thead>
            <row>
              <entry>RPC</entry>

              <entry>Related Method</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>SetParameterValues</code></entry>

              <entry><xref linkend="org.osgi.service.tr069todmt.TR069Connector.setParameterValue-String-String-int-" xrefstyle="hyperlink"/></entry>

              <entry><para>Set one or more parameter values. The connector
              supports setting a single value, ensuring the proper path
              traversal and data type conversion</para></entry>
            </row>

            <row>
              <entry><code>GetParameterValues</code></entry>

              <entry><xref linkend="org.osgi.service.tr069todmt.TR069Connector.getParameterValue-String-" xrefstyle="hyperlink"/></entry>

              <entry><para>Get one or more parameter values. The connector
              supports getting a single value, converting it to a <xref linkend="org.osgi.service.tr069todmt.ParameterValue" xrefstyle="hyperlink"/> object, which contains the value and the
              type.</para></entry>
            </row>

            <row>
              <entry><code>GetParameterNames</code></entry>

              <entry><xref linkend="org.osgi.service.tr069todmt.TR069Connector.getParameterNames-String-boolean-" xrefstyle="hyperlink"/></entry>

              <entry><para>Get the paths of objects and parameters from the
              sub-tree or children that begins at the parameter path. The
              TR-069 Connector supports the full traversal of the given path
              and the next level option.</para></entry>
            </row>

            <row>
              <entry><code>AddObject</code></entry>

              <entry><xref linkend="org.osgi.service.tr069todmt.TR069Connector.addObject-String-" xrefstyle="hyperlink"/></entry>

              <entry><para>Add a new object to a table. The fully supports the
              semantics, taking the <code>MAP</code> and <code>LIST</code>
              nodes into account. Node creation can be delayed until a node is
              really needed.</para></entry>
            </row>

            <row>
              <entry><code>DeleteObject</code></entry>

              <entry><xref linkend="org.osgi.service.tr069todmt.TR069Connector.deleteObject-String-" xrefstyle="hyperlink"/></entry>

              <entry><para>Delete an object from a table.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Name Escaping</title>

      <para>An object or parameter path describes a traversal through a set of
      objects, this is almost the same model that Dmt Admin provides. The
      difference is that the characters allowed in a TR-069 parameter name are
      different from the Dmt Admin node names and that TR-069 does not support
      application specific parameter/object names like the Dmt Admin service
      does.</para>

      <para>A path consist of a number segments, where each segment identifies
      a name or instance id. TR-069 names can always be mapped to Dmt Admin
      node names as the character set of TR-069 parameter names is restricted
      and falls within the character set of the Dmt Admin node names. The
      length of a segment could be a problem but TR-069 paths are generally
      limited to have a length of less than 256 bytes. This specification
      therefore assumes that a segment of a TR-069 path is never too long to
      fit in a Dmt Admin node name.</para>

      <para>Mapping a Dmt Admin node name to a parameter name, needed for
      browsing, is more complicated as Dmt Admin node names allow virtually
      every Unicode character except the solidus (<code>'/' \u002F</code>). It
      is therefore necessary to escape Dmt Admin URIs into a path that is
      acceptable for the TR-069 protocol. It is assumed that escaping is only
      used in a browsing mode since native object models will never require
      escaping. The TR069 Connector must return names from the <xref linkend="org.osgi.service.tr069todmt.TR069Connector.getParameterNames-String-boolean-" xrefstyle="hyperlink"/> call that the ACS can handle, optionally show to
      the user, and then use to construct new paths for subsequent
      RPCs.</para>

      <para>There is no obvious escape character defined in TR-069, like for
      example the reverse solidus (<code>'\' \u005C</code>) that the Dmt Admin
      uses for escaping. The character for escaping is the latin small letter
      thorn (<code>'þ' \u00FE</code>) because his character is highly unlikely
      to ever be used in a TR-069 path for a native object model, however,
      even if it is then it would be no problem for the escaping algorithm.
      The thorn is a letter, allowing it to be used as the first character in
      a parameter name, this allows escaping the first character.</para>

      <para>A character in a segment that is not allowed must be escaped into
      the following sequence:</para>

      <programlisting>þ[0-9A-Z][0-9A-Z][0-9A-Z][0-9A-Z]</programlisting>

      <para>The 4 hexadecimal upper case digits form a hexadecimal number that
      is the Unicode for that character. Each character that does not conform
      to the syntax specified in <xref linkend="i760050"/> or the thorn
      character itself must be replaced with the escape sequence. For example,
      the name 3ABC<code>þ</code> must be translated to:</para>

      <programlisting>þ0033ABCþ00FE</programlisting>

      <para>If the segment is an instance id then the segment must not be
      escaped. Otherwise, if the segment does not start with a
      <code>Letter</code> or underscore, then the first character must be
      escaped with the thorn.</para>

      <para>Unescaping must undo the escaping. Any sequence of
      <code>þ[0-9A-Z][0-9A-Z][0-9A-Z][0-9A-Z]</code> must be replaced with the
      character with the corresponding Unicode. A thorn found without the
      subsequent 4 hexadecimal upper case digits must be treated as a single
      thorn. For readability it is best to minimize the escaping. However, any
      name given to the TR069 Connector that is escaped must be properly
      interpreted even if the unescaped string did not require escaping. For
      example, <code>þ0031þ0032þ0033</code> must be usable as an object
      instance id as the unescaped form is 123, which is a number.</para>

      <para>A number of examples of the escaping are shown in the following
      table.</para>

      <table pgwide="1">
        <title>Escaping Parameter Names</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="1.4*"/>

          <colspec colnum="2" colwidth="1.4*"/>

          <colspec colnum="3" colwidth="2.4*"/>

          <colspec colnum="4" colwidth="2.8*"/>

          <thead>
            <row>
              <entry>Segment</entry>

              <entry>Dmt Admin Escaped</entry>

              <entry>TR-069 Escaped</entry>

              <entry>Notes</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>DeviceInfo</code></entry>

              <entry><code>DeviceInfo</code></entry>

              <entry><code>DeviceInfo</code></entry>

              <entry><para>Most common case.</para></entry>
            </row>

            <row>
              <entry><code>3x Hello World</code></entry>

              <entry><code>3x Hello World</code></entry>

              <entry><code>þ0033xþ0020Helloþ0020World</code></entry>

              <entry><para>The initial digit and the spaces must be escaped in
              TR-069.</para></entry>
            </row>

            <row>
              <entry><code>þorn</code></entry>

              <entry><code>þorn</code></entry>

              <entry><code>þornþ00FEorn</code></entry>

              <entry><para>A single thorn does not require escaping as it is
              not followed by 4 hexadecimal digits. So both forms are valid
              for unescaping although escaping must deliver the
              <code>þ00FE</code> form.</para></entry>
            </row>

            <row>
              <entry><code>application/bin</code></entry>

              <entry><code>application\/bin</code></entry>

              <entry><code>applicationþ002Fbin</code></entry>

              <entry><para>The solidus must be escaped in both.</para></entry>
            </row>

            <row>
              <entry><code>234</code></entry>

              <entry><code>234</code></entry>

              <entry><code>234</code></entry>

              <entry><para>A numeral does not require escaping, it is assumed
              to be an instance id.</para></entry>
            </row>

            <row>
              <entry><code>234x</code></entry>

              <entry><code>234x</code></entry>

              <entry><code>þ003234x</code></entry>

              <entry><para>A name that starts with a digit requires the first
              digit to be escaped.</para></entry>
            </row>

            <row>
              <entry><code>þ00FEorn</code></entry>

              <entry><code>þ00FEorn</code></entry>

              <entry><code>þ00FE00FEorn</code></entry>

              <entry><para>It is possible to encode even already escaped
              names.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The TR069 Connector only accepts escaped paths and returns escaped
      paths. When a method returns a path it must be properly escaped and
      suitable as a TR-069 path.</para>
    </section>

    <section>
      <title>Root</title>

      <para>In general, the TR-069 Protocol Adapter is free to choose what
      parts of the DMT it wants to expose. A simple mapping table containing
      path prefixes can be used to define the handler for the given data
      model. However, since the intention is to allow TR-069 object models to
      be implemented in Dmt Admin Data Plugins there is a need to know where
      those plugins should reside in the DMT. This root is defined as:</para>

      <programlisting>./TR-069</programlisting>

      <para>Any Data Plugin that wants to provide an object model in the
      TR-069 family of object models should provide a Data Plugin rooted at
      the TR-069 root. For example, a Data Plugin implementing the
      <code>InternetGatewayDevice.DeviceInfo.</code> object should register
      its Data Plugin under the data Root URI <code>./TR-069/
      InternetGatewayDevice/DeviceInfo</code></para>
    </section>

    <section>
      <title>DMT Traversal</title>

      <para>A path must be mapped from the TR-069 hierarchy to the Dmt Admin
      nodes URI. The Protocol Adapter decides the <emphasis>base</emphasis> in
      the DMT by opening the Dmt Session with a session root parameter. The
      TR-069 Connector must then traverse the tree from this base based on the
      TR-069 path. The Protocol Adapter must use the <xref linkend="service.dmt.instanceid"/> for <code>MAP</code> and
      <code>LIST</code> nodes to traverse the DMT.</para>

      <para>Assume that the URI of a node is requested for a given path
      <code>P</code>. The path P must be traversed from the root node. The
      root node can find the child, the first segment in P, and then use the
      same routine recursively for the remainder. This recursive routine must
      perform the following actions on each current node:</para>

      <itemizedlist>
        <listitem>
          <para>If path <code>P</code> is empty, then this is the requested
          node.</para>
        </listitem>

        <listitem>
          <para><code>S</code> = first segment of path <code>P</code> up to
          the first full stop.</para>
        </listitem>

        <listitem>
          <para><code>R</code> = remainder of path <code>P</code> after the
          first full stop or empty if no full stop.</para>
        </listitem>

        <listitem>
          <para>If <code>S</code> is an alias (surrounded by <code>'['</code>
          and <code>']'</code>), replace <code>S</code> with the alias inside
          the brackets. For Dmt Admin nodes aliases are identical to normal
          node names.</para>
        </listitem>

        <listitem>
          <para>unescape <code>S</code> (replace the thorns)</para>
        </listitem>

        <listitem>
          <para>If the current node is a <code>MAP</code> or a
          <code>LIST</code> and <code>S</code> is an integer</para>

          <itemizedlist>
            <listitem>
              <para>Get the list <code>L</code> of children of the current
              nodes</para>
            </listitem>

            <listitem>
              <para>If the nodes in <code>L</code> have an
              <code>InstanceId</code> node find the node where the
              <code>InstanceId</code> matches the segment <code>S</code> as
              integer, this becomes then the next level node <code>N</code>
              and the algorithm is repeated with path <code>R</code>.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>If no next node <code>N</code> was found then make it the
          child node of the current node with the name <code>S</code>.</para>
        </listitem>

        <listitem>
          <para>Repeat the algorithm with <code>N with path R</code></para>
        </listitem>
      </itemizedlist>

      <para>Since each node that is traversed this way knows the node name it
      corresponds to it is easy to create an encoded URI for Dmt Admin.</para>

      <para>For example, the TR-069 path:</para>

      <programlisting>Device.DeviceInfo.Interface.14.Connections.3.BytesSent</programlisting>

      <para>Assuming that <code>Interface</code> node is a <code>MAP</code>
      node and its children have an <code>InstanceId</code> node, where the
      <code>WAN_1</code> node has an <code>InstanceId</code> of 14.</para>

      <para>The Connections node is a <code>LIST</code> and the children have
      no <code>InstanceId</code>, therefore the name is the index. The
      translated URI then looks like:</para>

      <programlisting>Device/DeviceInfo/Interface/WAN_1/Connections/3/BytesSent</programlisting>

      <para>The <xref linkend="org.osgi.service.tr069todmt.TR069Connector.toURI-String-boolean-" xrefstyle="hyperlink"/> method can take a TR-069 path and perform the
      substitutions. If the create parameter is <code>true</code> then the
      TR069 Connector will create <emphasis>missing nodes</emphasis> if
      possible. Missing nodes can only be created under a <code>LIST</code> or
      <code>MAP</code> node.</para>

      <para>A missing node is a node that is addressed by a path but not
      present in the DMT. For example, the root of the session
      is<code>./TR-069</code> and the parameter path is <code>A.B.C</code>. If
      the DMT contains <code>./TR-069/A</code> but not
      <code>./TR-069/A/B</code> then node <code>B</code> is a missing
      node.</para>
    </section>

    <section xml:id="i831296">
      <title>Synthetic Nodes</title>

      <para>The Protocol Adapter must synthesize an <code>Alias</code>
      parameter and for any <code>MAP</code> or <code>LIST</code> node called
      <code>X</code> it must provide a sibling <code>XNumberOfEntries</code>
      parameter that provides the number of entries in table
      <code>X</code>.</para>

      <section>
        <title>Alias</title>

        <para>The <code>Alias</code> node is a read-write parameter that must
        map to the actual node name of its parent. For example,
        <code>./A/B/C/Alias</code> must map to <code>C</code>. Reading it must
        provide the this parent's node name and writing it must rename this
        parent's node name. The <code>Alias</code> must be automatically
        provided on any child of a <code>MAP</code> node. The
        <code>Alias</code> parameter must also be returned in the result of
        <xref linkend="org.osgi.service.tr069todmt.TR069Connector.getParameterNames-String-boolean-" xrefstyle="hyperlink"/> if its parent's children are included. It is
        not possible to convert an Alias parameter name to a URI as the
        <code>Alias</code> node is synthetic and does not exist in the DMT.
        The model of aliases are depicted in <xref linkend="i775831"/>.</para>

        <figure xml:id="i775831">
          <title>Aliases</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" contentdepth="0.814in" contentwidth="5.927in" fileref="aliases.svg"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para>Aliases can be used by the ACS to set the key of a
        <code>MAP</code>. For example, if a set of properties is defined as a
        <code>MAP</code>:</para>

        <informaltable pgwide="1">
          <tgroup cols="6">
            <colspec colnum="1" colwidth="2*"/>

            <colspec colnum="2" colwidth="1*"/>

            <colspec colnum="3" colwidth="3*"/>

            <colspec colnum="4" colwidth="1*"/>

            <colspec colnum="5" colwidth=".5*"/>

            <colspec colnum="6" colwidth="3*"/>

            <thead>
              <row>
                <entry>Name</entry>

                <entry>Act</entry>

                <entry>Type</entry>

                <entry>Card.</entry>

                <entry>S</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><code>Properties</code></entry>

                <entry><code>Get</code></entry>

                <entry><code>MAP</code></entry>

                <entry><code>1</code></entry>

                <entry><code>P</code></entry>

                <entry><para>A Properties map</para></entry>
              </row>

              <row>
                <entry><code> [string]</code></entry>

                <entry><code>Get Set Add Del</code></entry>

                <entry><code>string</code></entry>

                <entry><code>0..n</code></entry>

                <entry><code>A</code></entry>

                <entry><para>Key/Value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>An ACS can first add an object to the table. This will create an
        entry with a calculated instance id. However, the ACS can then rename
        the node with the Alias node. In pseudo code:</para>

        <programlisting>AddObject           ..Properties.               (returnsnode name = 3421)
SetParameterValue   ..Properties.3421.Alias = MyKey</programlisting>

        <para>Alternatively, addressing with an alias in the parameter name
        would be simpler:</para>

        <programlisting>AddObject           ..Properties.[MyKey]</programlisting>
      </section>

      <section>
        <title>Number Of Entries</title>

        <para>TR-069 has the convention of parameters that end with
        <code>NumberOfEntries</code>. For example, the parameter
        <code>UserNumberOfEntries</code> in the object
        <code>InternetGatewayDevice</code> object contains the number of
        entries of the <code>InternetGatewayDevice.User</code> table.</para>

        <para>The Protocol Adapter must synthesize these
        <code>NumberOfEntries</code> parameters for each <code>MAP</code> or
        <code>LIST</code> node. The <code>NumberOfEntries</code> parameter
        must be a sibling of the <code>MAP</code> or <code>LIST</code> node.
        Any such parameter must also be returned in the result of the <xref linkend="org.osgi.service.tr069todmt.TR069Connector.getParameterNames-String-boolean-" xrefstyle="hyperlink"/> method.</para>
      </section>
    </section>

    <section xml:id="i838963">
      <title>Lazy and Sessions</title>

      <para>In the Dmt Admin service the session plays an important role in
      how the object model operates. Especially atomic sessions have a clear
      point to commit any changes so that many actions can be deferred until
      all the information is available. In TR-069 there is no real session
      concept although one RPC must be executed atomically even if it changes
      multiple parameters. As there are different RPCs to create objects and
      set their parameters it is impossible to create and parameterize an
      object in a single session. This creates problems with general DMT
      models.</para>

      <para>It is recommended to operate all RPCs in an atomic session to
      allow these DMT models to leverage the session commit phase. However, a
      TR-069 Connector must also accept a read only or exclusive session. The
      session can then of course cause exceptions to be thrown at certain
      operations.</para>

      <para>The connector must <emphasis>lazily</emphasis> create instances.
      An <xref linkend="org.osgi.service.tr069todmt.TR069Connector.addObject-String-" xrefstyle="hyperlink"/> method must not actually create the object, it
      only has to create an instance id and ensure the uniqueness of this id
      over time. The id must follow the rules from TR-069, it must not clash
      with an existing id even after such an id has been used in the
      past.</para>

      <para>This id is then returned to the ACS who will then use it in
      subsequent RPCs. When one of the subsequent RPCs tries to access this
      not-yet existent node, for example a get or set, then the TR069
      Connector must create it before it sets or gets the value of this node.
      This lazy strategy allows the node creation and the parameterization of
      that node to happen in a single session/RPC.</para>

      <para>For example, in session 100 the <xref linkend="org.osgi.service.tr069todmt.TR069Connector.addObject-String-" xrefstyle="hyperlink"/> creates a new node. This node is not really
      created but the unique instance id 4311 is assigned to it. After this
      RPC, the session is closed. The ACS receives this instance and then
      prepares a <code>GetParameterValues</code> RPC to get the
      <code>../4311/Foo</code> parameter. The management agent receives the
      RPC and opens a new session 200, it then calls <xref linkend="org.osgi.service.tr069todmt.TR069Connector.getParameterValue-String-" xrefstyle="hyperlink"/>. The TR069 Connector will not find the
      appropriate entry 4311 in the table. Instead of raising an error it
      creates this node and then gets the value for the
      <code>../4311/Foo</code> parameter.</para>

      <para>A Data Plugin implementing a native TR-069 object model can
      override the lazy behavior by adding a
      <code>application/x-tr-069-eager</code> MIME type to the list of MIME
      types in the Meta Node. If this MIME type is present then the node must
      be eagerly created during the <xref linkend="org.osgi.service.tr069todmt.TR069Connector.addObject-String-" xrefstyle="hyperlink"/> method.</para>

      <para>The TR069 Connector must assign the unique id according to the
      TR-069 rules for instance ids.</para>
    </section>

    <section xml:id="i819800">
      <title>Data Types</title>

      <para>This specifications assume the <xref linkend="i694602"/> defined
      data types. TR-106 defines a number of data types, derived from XML
      Schema and creates a number of sub-types to discriminate between
      different use cases. A Protocol Adapter must be able to understand the
      types defined in <xref linkend="service.tr069todmt-tr069types"/> to be
      able to faithfully define a data model based on <xref linkend="i694602"/>. Discriminating between some of the sub-types
      requires inspection of the data. Each sub-type requires mapping rules
      that are defined later. Each mapping is assigned a unique MIME sub-type
      in the <code>application</code> media type. That is, the TR-069
      <code>int</code> type has a MIME type of
      <code>application/x-tr-069-int</code>.</para>

      <table xml:id="service.tr069todmt-tr069types">
        <title>TR-069 Types, MIME types</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="1.5*"/>

          <colspec colnum="3" colwidth="2*"/>

          <thead>
            <row>
              <entry>TR-069 Type</entry>

              <entry>MIME Type</entry>

              <entry>Notes</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>base64</code></entry>

              <entry><code>x-tr-069-base64</code></entry>

              <entry><para>Base 64 encoded</para></entry>
            </row>

            <row>
              <entry><code>hexBinary</code></entry>

              <entry><code>x-tr-069-hexBinary</code></entry>

              <entry><para>Hex encoded</para></entry>
            </row>

            <row>
              <entry><code>boolean</code></entry>

              <entry><code>x-tr-069-boolean</code></entry>

              <entry><para/></entry>
            </row>

            <row>
              <entry><code>string</code></entry>

              <entry><code>x-tr-069-string</code></entry>

              <entry><para>General string type.</para></entry>
            </row>

            <row>
              <entry><code>string (list)</code></entry>

              <entry><code>x-tr-069-list</code></entry>

              <entry><para>A comma separated string that acts as a
              list.</para></entry>
            </row>

            <row>
              <entry><code>int</code></entry>

              <entry><code>x-tr-069-int</code></entry>

              <entry><para>Signed integer</para></entry>
            </row>

            <row>
              <entry><code>unsignedInt</code></entry>

              <entry><code>x-tr-069-unsignedInt</code></entry>

              <entry><para>Unsigned integer</para></entry>
            </row>

            <row>
              <entry><code>long</code></entry>

              <entry><code>x-tr-069-long</code></entry>

              <entry><para>Signed long</para></entry>
            </row>

            <row>
              <entry><code>unsignedLong</code></entry>

              <entry><code>x-tr-069-unsignedLong</code></entry>

              <entry><para>Unsigned long</para></entry>
            </row>

            <row>
              <entry><code>dateTime</code></entry>

              <entry><code>x-tr-069-dateTime</code></entry>

              <entry><para>Absolute UTC time, relative boot time, or unknown
              time</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>x-tr-069-eager</code></entry>

              <entry><para>Eager creation (not a data type, see <xref linkend="i838963"/> ).</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>It is the responsibility of the Protocol Adapter to properly clean
      up the parameter values, that is, remove any unnecessary white space,
      etc. The TR069 Connector must accept any lexically correct form of the
      value of a parameter. However, the connector must always return the
      value according to the format of the data types specified by
      TR-069.</para>
    </section>

    <section xml:id="i776019">
      <title>DMT to TR-069 Conversion</title>

      <para>This section describes the conversion from a DMT node (a Dmt Data)
      to a TR-069 Parameter value. The <emphasis>source</emphasis> is the DMT
      node retrieved from the DMT. The <emphasis>destination</emphasis> is the
      value and its type that must be encoded in the TR-069 response. The
      <emphasis>meta node</emphasis> is the Meta Node associated with the
      source. This model is depicted in <xref linkend="i728691"/>.</para>

      <figure xml:id="i728691">
        <title>DMT to TR-069</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.464in" contentwidth="6.214in" fileref="dmt-tr069-conversion.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The different conversions possible for the Dmt Data to the TR-069
      Parameter value are shown in <xref linkend="service.tr069todmt-dmt2tr069"/>. This table shows vertically
      the Dmt Admin formats and horizontally the TR-106 types defined in <xref linkend="service.tr069todmt-tr069types"/>. Each row has a default
      conversion type, indicated with a bold entry. For example, the default
      conversion of a <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BOOLEAN" xrefstyle="hyperlink"/> to the <code>boolean</code> type is the default
      conversion.</para>

      <para>This default conversion can be overridden by the Data Plugin by
      specifying an alternative MIME type in the list of allowed MIME types in
      the Meta Node <xref linkend="org.osgi.service.dmt.MetaNode.getMimeTypes--" xrefstyle="hyperlink"/>. If this list contains a MIME type that has the
      prefix <code>application/x-tr-069-</code> then the first entry in this
      list must be chosen as the destination type instead of the default type.
      This way, a TR-069 Data Plugin can indicate the exact type to a TR-069
      Protocol Adapter.</para>

      <para>For example, a Dmt Data has the format <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BASE64" xrefstyle="hyperlink"/>. However, the Data Plugin for this node has a
      Meta Node that contains</para>

      <programlisting>String[] { "application/x-tr-069-hexBinary"}</programlisting>

      <para>The resulting type must therefore be <code>hexBinary</code> in
      this example.</para>

      <para>The Dmt Data nodes are leaf nodes, however, there is a special
      case for interior <code>LIST</code> nodes marked with a
      <code>application/x-tr-069-list</code> type in the Meta Node. These
      nodes must be converted to a comma separated string as described in
      <xref linkend="i713365"/>.</para>

      <para>Cells that are empty in the table indicate an impossible
      conversion that must be reported. Cells with a name refer to one of the
      subsequent sections.</para>

      <table pgwide="1" xml:id="service.tr069todmt-dmt2tr069">
        <?dbfo keep-together="always"?>

        <title>Dmt Data Format to TR-069 Data</title>

        <tgroup cols="10">
          <colspec colnum="1" colwidth="2.3*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="1*"/>

          <colspec colnum="4" colwidth="1*"/>

          <colspec colnum="5" colwidth="1*"/>

          <colspec colnum="6" colwidth="1*"/>

          <colspec colnum="7" colwidth="1*"/>

          <colspec colnum="8" colwidth="1*"/>

          <colspec colnum="9" colwidth="1*"/>

          <colspec colnum="10" colwidth="1*"/>

          <thead>
            <row>
              <?dbfo rotated-width="0.7in"?>

              <entry/>

              <entry rotate="1"><?dbfo orientation="90"?>base64</entry>

              <entry rotate="1"><?dbfo orientation="90"?>boolean</entry>

              <entry rotate="1"><?dbfo orientation="90"?>dateTime</entry>

              <entry rotate="1"><?dbfo orientation="90"?>hexBinary</entry>

              <entry rotate="1"><?dbfo orientation="90"?>int</entry>

              <entry rotate="1"><?dbfo orientation="90"?>long</entry>

              <entry rotate="1"><?dbfo orientation="90"?>string</entry>

              <entry rotate="1"><?dbfo orientation="90"?>unsignedInt</entry>

              <entry rotate="1"><?dbfo orientation="90"?>unsignedLong</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BASE64" xrefstyle="hyperlink"/></entry>

              <entry><code>binary</code></entry>

              <entry/>

              <entry/>

              <entry><code>binary</code></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BINARY" xrefstyle="hyperlink"/></entry>

              <entry><para><emphasis role="strong">binary</emphasis></para></entry>

              <entry/>

              <entry/>

              <entry><code>binary</code></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BOOLEAN" xrefstyle="hyperlink"/></entry>

              <entry/>

              <entry><para><emphasis role="strong">=</emphasis></para></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry><code>true | false</code></entry>

              <entry/>

              <entry/>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_DATE" xrefstyle="hyperlink"/></entry>

              <entry/>

              <entry/>

              <entry><para><emphasis role="strong">date</emphasis></para></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry><code>=</code></entry>

              <entry/>

              <entry/>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_DATE_TIME" xrefstyle="hyperlink"/></entry>

              <entry/>

              <entry/>

              <entry><para><emphasis role="strong">date</emphasis></para></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry><code>date</code></entry>

              <entry/>

              <entry/>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_FLOAT" xrefstyle="hyperlink"/></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry><code>number</code></entry>

              <entry><para><emphasis role="strong">number</emphasis></para></entry>

              <entry><code>number</code></entry>

              <entry><code>number</code></entry>

              <entry><code>number</code></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_INTEGER" xrefstyle="hyperlink"/></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry><para><emphasis role="strong">number</emphasis></para></entry>

              <entry><code>number</code></entry>

              <entry><code>number</code></entry>

              <entry><code>number</code></entry>

              <entry><code>number</code></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_LONG" xrefstyle="hyperlink"/></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry><code>number</code></entry>

              <entry><para><emphasis role="strong">number</emphasis></para></entry>

              <entry><code>number</code></entry>

              <entry><code>number</code></entry>

              <entry><code>number</code></entry>
            </row>

            <row>
              <entry><code>LIST</code></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry><para><emphasis role="strong">list</emphasis></para></entry>

              <entry/>

              <entry/>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_NULL" xrefstyle="hyperlink"/></entry>

              <entry/>

              <entry><code>false</code></entry>

              <entry><code>date</code></entry>

              <entry/>

              <entry><code>0</code></entry>

              <entry><code>0</code></entry>

              <entry><code>"null"</code></entry>

              <entry><code>0</code></entry>

              <entry><code>0</code></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_BINARY" xrefstyle="hyperlink"/></entry>

              <entry><para><emphasis role="strong">binary</emphasis></para></entry>

              <entry/>

              <entry/>

              <entry><code>binary</code></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_STRING" xrefstyle="hyperlink"/></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry><para><emphasis role="strong">=</emphasis></para></entry>

              <entry/>

              <entry/>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_STRING" xrefstyle="hyperlink"/></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry><para><emphasis role="strong">=</emphasis></para></entry>

              <entry/>

              <entry/>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_TIME" xrefstyle="hyperlink"/></entry>

              <entry/>

              <entry/>

              <entry><code>date</code></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry><para><emphasis role="strong">=</emphasis></para></entry>

              <entry/>

              <entry/>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_XML" xrefstyle="hyperlink"/></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry><para><emphasis role="strong">=</emphasis></para></entry>

              <entry/>

              <entry/>
            </row>
          </tbody>
        </tgroup>
      </table>

      <section xml:id="i712177">
        <title>Date</title>

        <para>If the destination type is <code>string</code> then a date must
        be formatted according to the TR-069 <code>dateTime</code> format.
        <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_DATE" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_TIME" xrefstyle="hyperlink"/> must be set to a <xref linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_DATETIME" xrefstyle="hyperlink"/> typed destination with just the day or just
        the time respectively. That is, the <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_TIME" xrefstyle="hyperlink"/> must be treated as a relative time for
        TR-069.</para>

        <para>The <code>Date</code> object of the <code>Dmt Data</code> object
        represents the three different <xref linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_DATETIME" xrefstyle="hyperlink"/> types with the <code>getTime()</code> method.
        The value of <code>getTime()</code> indicates what type of date time
        it is:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>Unknown</emphasis> - The <code>getTime()</code>
            method must be 0</para>
          </listitem>

          <listitem>
            <para><emphasis>Relative</emphasis> - The <code>getTime()</code>
            method must return a negative number</para>
          </listitem>

          <listitem>
            <para><emphasis>Absolute</emphasis> - The <code>getTime()</code>
            method must return a positive number</para>
          </listitem>
        </itemizedlist>

        <para>If a <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_DATE" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_TIME" xrefstyle="hyperlink"/>, or <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_DATE_TIME" xrefstyle="hyperlink"/> is converted to a string the string
        representation of <xref linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_DATETIME" xrefstyle="hyperlink"/> must be used, including the form of unknown,
        relative, or absolute. A <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_NULL" xrefstyle="hyperlink"/> stands for an unknown time.</para>
      </section>

      <section>
        <title>Binary</title>

        <para>The Dmt Admin service has several binary formats ( <code><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BASE64" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BINARY" xrefstyle="hyperlink"/>, and <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_BINARY" xrefstyle="hyperlink"/> ) that can be converted to</code> <xref linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_HEXBINARY" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_BASE64" xrefstyle="hyperlink"/>. All binary formats maintain their data as a
        <code>byte[]</code>. Conversion is therefore straightforward encoding
        of the <code>byte[]</code> into the proper encoding: hex or base
        64.</para>
      </section>

      <section>
        <title>Number</title>

        <para>The TR-069 Connector must convert numeric values ( <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_INTEGER" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_LONG" xrefstyle="hyperlink"/>, and <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_FLOAT" xrefstyle="hyperlink"/> ) to <xref linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_INT" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_LONG" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_UNSIGNED_INT" xrefstyle="hyperlink"/>, and <xref linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_UNSIGNED_LONG" xrefstyle="hyperlink"/> values. Float values must be rounded according
        to the standard Java rounding rules when converted to an
        <code>integer</code> or <code>long</code>.</para>

        <para>A conversion must not exceed the range of the destination type.
        That is, if an integer is converted to an unsigned <code>int</code>
        then negative values must be treated as an error. If the destination
        type is <code>string</code> then the numeric value must be calculated
        with the Dmt Data <code>toString</code> method.</para>
      </section>

      <section xml:id="i713365">
        <title>List</title>

        <para><code>LIST</code> nodes with primitive children must be
        converted to a comma separated list. If the children nodes are
        interior nodes then an error must be raised. The values of the comma
        separated list must come from the children of the value node. Each of
        these children must be converted to a string type according to <xref linkend="service.tr069todmt-dmt2tr069"/>. These children must then be
        escaped and concatenated with a comma as separator according to the
        rules of TR-106 comma separated lists. Nested lists are not
        allowed.</para>
      </section>
    </section>

    <section xml:id="i777240">
      <title>TR-069 to Dmt Data Conversion</title>

      <para>A TR-069 Parameter value consists of a string and a type
      identifier from the set of TR-069 types, see <xref linkend="i819800"/>.
      The conversion is depicted in <xref linkend="i728691"/>.</para>

      <figure>
        <title>TR-069 to DMT</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.318in" contentwidth="6.214in" fileref="tr069-dmt-conversion.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The destination type is obtained from the corresponding Meta Node.
      If multiple formats are specified in the result of the <xref linkend="org.osgi.service.dmt.MetaNode.getFormat--" xrefstyle="hyperlink"/> method then the most applicable type must be
      used. The following table lists the applicability for each TR-106 data
      type.</para>

      <programlisting>base64        <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BASE64" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BINARY" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_BINARY" xrefstyle="hyperlink"/>
boolean       <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BOOLEAN" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_STRING" xrefstyle="hyperlink"/>
dateTime      <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_DATE_TIME" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_DATE" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_TIME" xrefstyle="hyperlink"/>
hexBinary     <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BASE64" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BINARY" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_BINARY" xrefstyle="hyperlink"/>
int           <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_INTEGER" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_LONG" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_FLOAT" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_STRING" xrefstyle="hyperlink"/>
long          <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_LONG" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_FLOAT" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_INTEGER" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_STRING" xrefstyle="hyperlink"/>
string        <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_STRING" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BOOLEAN" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_INTEGER" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_LONG" xrefstyle="hyperlink"/>,
              <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_FLOAT" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_STRING" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_XML" xrefstyle="hyperlink"/>
unsignedInt   <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_INTEGER" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_LONG" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_FLOAT" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_STRING" xrefstyle="hyperlink"/>
unsignedLong  <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_LONG" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_FLOAT" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_INTEGER" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_STRING" xrefstyle="hyperlink"/></programlisting>

      <para>If the conversion fails and there are untried formats left then
      the other formats must be used.</para>

      <para>There is a special case when the destination node is a LIST node
      with primitive children and the source is a <code>string</code> type. In
      that case the string must be parsed according to TR-106 comma separated
      lists and each element must be stored as a child node.</para>

      <para>The conversion matrix is in the following table. The equal sign
      indicates identity taking into account any encoding. It is not necessary
      that the source type corresponds to a MIME type in the meta node.</para>

      <table pgwide="1">
        <?dbfo keep-together="always"?>

        <title>TR-069 Value to Dmt Data</title>

        <tgroup cols="15">
          <colspec colnum="1" colwidth="2.2*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="1*"/>

          <colspec colnum="4" colwidth="1*"/>

          <colspec colnum="5" colwidth="1*"/>

          <colspec colnum="6" colwidth="1*"/>

          <colspec colnum="7" colwidth="1*"/>

          <colspec colnum="8" colwidth="1*"/>

          <colspec colnum="9" colwidth="1*"/>

          <colspec colnum="10" colwidth="1*"/>

          <colspec colnum="11" colwidth="1*"/>

          <colspec colnum="12" colwidth="1*"/>

          <colspec colnum="13" colwidth="1*"/>

          <colspec colnum="14" colwidth="1*"/>

          <colspec colnum="15" colwidth="1*"/>

          <thead>
            <row>
              <?dbfo rotated-width="1.2in"?>

              <entry/>

              <entry rotate="1"><?dbfo orientation="90"?><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BASE64" xrefstyle="hyperlink"/></entry>

              <entry rotate="1"><?dbfo orientation="90"?><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BINARY" xrefstyle="hyperlink"/></entry>

              <entry rotate="1"><?dbfo orientation="90"?><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BOOLEAN" xrefstyle="hyperlink"/></entry>

              <entry rotate="1"><?dbfo orientation="90"?><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_DATE" xrefstyle="hyperlink"/></entry>

              <entry rotate="1"><?dbfo orientation="90"?><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_DATE_TIME" xrefstyle="hyperlink"/></entry>

              <entry rotate="1"><?dbfo orientation="90"?><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_FLOAT" xrefstyle="hyperlink"/></entry>

              <entry rotate="1"><?dbfo orientation="90"?><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_INTEGER" xrefstyle="hyperlink"/></entry>

              <entry rotate="1"><?dbfo orientation="90"?><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_LONG" xrefstyle="hyperlink"/></entry>

              <entry rotate="1"><?dbfo orientation="90"?><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_BINARY" xrefstyle="hyperlink"/></entry>

              <entry rotate="1"><?dbfo orientation="90"?><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_RAW_STRING" xrefstyle="hyperlink"/></entry>

              <entry rotate="1"><?dbfo orientation="90"?><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_STRING" xrefstyle="hyperlink"/></entry>

              <entry rotate="1"><?dbfo orientation="90"?><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_TIME" xrefstyle="hyperlink"/></entry>

              <entry rotate="1"><?dbfo orientation="90"?><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_XML" xrefstyle="hyperlink"/></entry>

              <entry rotate="1"><?dbfo orientation="90"?>LIST</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>base64</code></entry>

              <entry><code>binary</code></entry>

              <entry><code>binary</code></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry><code>binary</code></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>
            </row>

            <row>
              <entry><code>boolean</code></entry>

              <entry/>

              <entry/>

              <entry><code>bool</code></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry><code>true| false</code></entry>

              <entry/>

              <entry/>

              <entry/>
            </row>

            <row>
              <entry><code>dateTime</code></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry><code>date</code></entry>

              <entry><code>date</code></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry><code>=</code></entry>

              <entry><code>date</code></entry>

              <entry/>

              <entry/>
            </row>

            <row>
              <entry><code>hexBinary</code></entry>

              <entry><code>binary</code></entry>

              <entry><code>binary</code></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry><code>binary</code></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>
            </row>

            <row>
              <entry><code>int</code></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry><code>num</code></entry>

              <entry><code>num</code></entry>

              <entry><code>num</code></entry>

              <entry/>

              <entry/>

              <entry><code>=</code></entry>

              <entry/>

              <entry/>

              <entry/>
            </row>

            <row>
              <entry><code>long</code></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry><code>num</code></entry>

              <entry><code>num</code></entry>

              <entry><code>num</code></entry>

              <entry/>

              <entry/>

              <entry><code>=</code></entry>

              <entry/>

              <entry/>

              <entry/>
            </row>

            <row>
              <entry><code>string</code></entry>

              <entry/>

              <entry/>

              <entry><code>bool</code></entry>

              <entry/>

              <entry/>

              <entry><code>num</code></entry>

              <entry><code>num</code></entry>

              <entry><code>num</code></entry>

              <entry/>

              <entry><code>=</code></entry>

              <entry><code>=</code></entry>

              <entry/>

              <entry><code>=</code></entry>

              <entry><code>list</code></entry>
            </row>

            <row>
              <entry><code>unsignedInt</code></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry><code>num</code></entry>

              <entry><code>num</code></entry>

              <entry><code>num</code></entry>

              <entry/>

              <entry/>

              <entry><code>=</code></entry>

              <entry/>

              <entry/>

              <entry/>
            </row>

            <row>
              <entry><code>unsignedLong</code></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry/>

              <entry><code>num</code></entry>

              <entry><code>num</code></entry>

              <entry><code>num</code></entry>

              <entry/>

              <entry/>

              <entry><code>=</code></entry>

              <entry/>

              <entry/>

              <entry/>
            </row>
          </tbody>
        </tgroup>
      </table>

      <section>
        <title>Date</title>

        <para>A <xref linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_DATETIME" xrefstyle="hyperlink"/> can be converted to a <code><xref linkend="org.osgi.service.dmt.DmtData.FORMAT_DATE" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_TIME" xrefstyle="hyperlink"/>, and</code> <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_DATE_TIME" xrefstyle="hyperlink"/>. A <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_DATE" xrefstyle="hyperlink"/> must take the day part and a <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_TIME" xrefstyle="hyperlink"/> must take the time part.</para>
      </section>

      <section>
        <title>Num</title>

        <para>Source numbers must be converted to their destination
        counterpart. The conversion result must fail if the result falls
        outside the range of the destination.</para>
      </section>

      <section>
        <title>Bool</title>

        <para>If the source is a <code>string</code> or <code>boolean</code>
        type and the destination <code>FORMAT_BOOLEAN</code> then the
        conversion must parse the string ignoring the case. The strings
        <code>true</code> and <code>false</code> map to their corresponding
        value. The strings 0 must map to <code>false</code> and 1 to
        <code>true</code>.</para>
      </section>

      <section>
        <title>Binary</title>

        <para>The source must be decoded according to its TR-069 type ( <xref linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_BASE64" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_HEXBINARY" xrefstyle="hyperlink"/> ). The resulting byte array can then be set
        with the <xref linkend="org.osgi.service.dmt.DmtData.DmtData-byte---int-" xrefstyle="hyperlink"/> with the destination format: <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BINARY" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.dmt.DmtData.FORMAT_BASE64" xrefstyle="hyperlink"/>.</para>
      </section>

      <section>
        <title>List</title>

        <para>The source is a comma separated list and must be stored as
        children of the destination node.</para>
      </section>
    </section>
  </section>

  <section>
    <title>RPCs</title>

    <para>The following sections explain in more detail how the different RPCs
    are supported by the TR069 Connector operate.</para>

    <section>
      <title>Get Parameter Values</title>

      <para>The <code>GetParameterValues</code> RPC retrieves the value from
      one or more parameters. Each request in the RPC can request one
      parameter value or provides an object or table path, requesting multiple
      values with one path.</para>

      <para>The <xref linkend="org.osgi.service.tr069todmt.TR069Connector.getParameterValue-String-" xrefstyle="hyperlink"/> method retrieves the value of one parameter in
      the DMT. The <xref linkend="org.osgi.service.tr069todmt.TR069Connector.getParameterNames-String-boolean-" xrefstyle="hyperlink"/> method can be used to retrieve the values of a
      table or object.</para>

      <para>For the <xref linkend="org.osgi.service.tr069todmt.TR069Connector.getParameterValue-String-" xrefstyle="hyperlink"/> method the TR069 Connector must first check for
      synthesized parameters, see <xref linkend="i831296"/>
      (<code>Alias</code> and <code>NumberOfEntries</code>). Otherwise, the
      parameter name must be converted to a URI, this must be done according
      to the <xref linkend="org.osgi.service.tr069todmt.TR069Connector.toURI-String-boolean-" xrefstyle="hyperlink"/> method with the boolean set to
      <code>true</code>, creating any missing nodes if possible. The Dmt Data
      for this node must be converted according to <xref linkend="i776019"/>.
      The returned <code>ParameterValue</code> contains the type and value of
      the parameter.</para>

      <para>For example:</para>

      <programlisting>ParameterValue v = connector.getParameterValue( 
          "Device.DeviceInfo.Manufacturer");
String value = v.getValue(); 
int type = v.getType();</programlisting>
    </section>

    <section>
      <title>Set Parameter Values</title>

      <para>The <code>SetParameterValues</code> RPC sets a number of values in
      one RPC. The <xref linkend="org.osgi.service.tr069todmt.TR069Connector.setParameterValue-String-String-int-" xrefstyle="hyperlink"/> method corresponds to setting a single parameter
      in the DMT. It takes a parameter path, a value, and the type of this
      parameter.</para>

      <para>The TR069 Connector must first check if the requested destination
      is the <code>Alias</code> node of a <code>MAP</code> child. If the
      <code>Alias</code> node is set, the name of the parent node must be
      renamed to the given value. The value of the <code>Alias</code> node
      must be a TR-069 string type, the Connector must ensure the value is
      escaped when necessary. See <xref linkend="i831296"/> for further
      information about aliases.</para>

      <para>Otherwise, the parameter name must be converted to a URI, this
      must be done according to the <xref linkend="org.osgi.service.tr069todmt.TR069Connector.toURI-String-boolean-" xrefstyle="hyperlink"/> method with the boolean set to
      <code>true</code>.</para>

      <para>The given value must be converted to a Dmt Data according to the
      <xref linkend="i777240"/>. For example:</para>

      <programlisting>connector.setParameterValue("Starwars.R2D.2.Start", 
                             "20110805T10:15:20Z", <code>TR069_DATETIME</code> );</programlisting>
    </section>

    <section>
      <title>Get Parameter Names</title>

      <para>The <code>GetParameterNames</code> RPC allows an ACS to discover
      the parameters accessible on a particular CPE as well as verifying the
      existence of a parameter. There are modes for this RPC depending on the
      path and next level arguments. See the following table.</para>

      <table>
        <title>Modes based on type of path and NextLevel arguments</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="3*"/>

          <colspec colnum="3" colwidth="3*"/>

          <thead>
            <row>
              <entry>NextLevel</entry>

              <entry>Parameter Path</entry>

              <entry>Table or Object Path</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>true</code></entry>

              <entry><para>Invalid Argument Fault code <code>9003</code> since
              this field must always be <code>false</code> for a parameter
              path.</para></entry>

              <entry><para>Include only the children of the object or
              table.</para></entry>
            </row>

            <row>
              <entry><code>false</code></entry>

              <entry><para>A single <code>ParameterInfo</code> object is
              returned that provides information about the given
              parameter.</para></entry>

              <entry><para>The whole sub-tree rooted at the given object or
              table path, this includes the object at the path itself. All
              objects must be included even if they are empty.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The result must include only parameters, objects, and tables that
      are actually implemented by the CPE. If a parameter is listed then a
      <xref linkend="org.osgi.service.tr069todmt.TR069Connector.getParameterValue-String-" xrefstyle="hyperlink"/> method called with this parameter's path should
      succeed. As a convenience, the <xref linkend="org.osgi.service.tr069todmt.ParameterInfo" xrefstyle="hyperlink"/> class provides a <xref linkend="org.osgi.service.tr069todmt.ParameterInfo.getParameterValue--" xrefstyle="hyperlink"/> method as a short cut to the value.</para>

      <para>For example, assume the following instances:</para>

      <programlisting>IGD.LAN.1.Hosts.
IGD.LAN.1.Hosts.HostNumberOfEntries
IGD.LAN.1.Hosts.Host.
IGD.LAN.1.Hosts.Host.1.
IGD.LAN.1.Hosts.Host.1.Active
IGD.LAN.1.Hosts.Host.2.
IGD.LAN.1.Hosts.Host.2.Active
IGD.LAN.2.Hosts.
IGD.LAN.2.Hosts.HostNumberOfEntries</programlisting>

      <para>The following table demonstrates some of the different results
      based on these example instances.</para>

      <table pgwide="1">
        <title>Example Get Parameter Names</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="1.8*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="3.2*"/>

          <colspec colnum="4" colwidth="3*"/>

          <thead>
            <row>
              <entry>Parameter Name</entry>

              <entry>Next level</entry>

              <entry>Results</entry>

              <entry>Comments</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry morerows="1"><code>IGD.LAN.1.</code></entry>

              <entry><code>false</code></entry>

              <entry><para><code>IGD.LAN.1.</code></para><para><code>IGD.LAN.1.Hosts.</code></para><para><code>IGD.LAN.1.Hosts.HostNumberOfEntries</code></para><para><code>IGD.LAN.1.Hosts.Host.</code></para><para><code>IGD.LAN.1.Hosts.Host.1.</code></para><para><code>IGD.LAN.1.Hosts.Host.1.Active</code></para><para><code>IGD.LAN.1.Hosts.Host.2.</code></para><para><code>IGD.LAN.1.Hosts.Host.2.Active</code></para></entry>

              <entry><para>The path specifies an instance in at table and
              since the Next Level is false the whole sub-tree must be
              returned, including the root of the sub-tree.</para></entry>
            </row>

            <row>
              <entry><code>true</code></entry>

              <entry><code>IGD.LAN.1.Hosts.</code></entry>

              <entry><para>The path is the same, an instance in a table, but
              now only the children must be returned for the source. There is
              only one child, <code>Hosts</code>. This must be returned as an
              object path.</para></entry>
            </row>

            <row>
              <entry morerows="1"><para><code>IGD.LAN.1.Hosts.«</code></para><para><code> 1.Active</code></para></entry>

              <entry><code>false</code></entry>

              <entry><para><code>IGD.LAN.1.Hosts.Host.</code></para><para><code> 1.Active</code></para></entry>

              <entry><para>The path is a parameter path, therefore only the
              source is returned.</para></entry>
            </row>

            <row>
              <entry><code>true</code></entry>

              <entry>Fault 9003 Invalid Arguments, next level must be false
              for a parameter path.</entry>

              <entry><para>Next Level must not be set to true for a parameter
              path</para></entry>
            </row>

            <row>
              <entry><code>IGD.LAN.1</code></entry>

              <entry><para><code>false</code> or
              <code>true</code></para></entry>

              <entry>Fault 9003 Invalid Arguments, it is not a parameter path
              but an instance id</entry>

              <entry><para>It is not allowed to specify a parameter path that
              is actual pointing to an instance.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>For example:</para>

      <programlisting>Collection&lt;ParameterInfo&gt; pinfos = connector.getParameterNames("Device.");
for ( ParameterInfo info : pinfos ) {
  if ( info.isParameter() ) {
     System.out.println( 
         connector.getParameterValue(info.getName()).getValue());    
  }
}</programlisting>
    </section>

    <section xml:id="i780399">
      <title>Add Object</title>

      <para>The <code>AddObject</code> RPC creates a new instance in a table.
      There basic form for this RPC is to create an object and return the name
      of this object. It is also possible to specify an alias (a name
      specified in square brackets) after the table path. In that case, the
      alias is used as the node name. In either case, the path must be a valid
      table path pointing to a an existing <code>MAP</code> or
      <code>LIST</code> node.</para>

      <para>When an object is added without an alias then the TR069 Connector
      must assign a unique id. TR-069 mandates that this id is unique for the
      table. The TR069 Connector must be able to create and maintain such a
      persistent id range. The Connector must ensure that any id chosen is not
      actually already in use or has been handed out recently. How such an id
      is calculated and maintained is implementation dependent.</para>

      <para>If alias based addressing is used, a name between square brackets,
      then the alias is retrieved from the square brackets. The DMT must then
      be verified that no node exists in the corresponding table. If it does
      already exist, an <xref linkend="org.osgi.service.tr069todmt.TR069Exception.INVALID_PARAMETER_NAME" xrefstyle="hyperlink"/> exception is thrown. Otherwise the alias is
      returned as the selected name.</para>

      <para>If the corresponding <code>MAP</code> or <code>LIST</code> node
      has a Meta Node with a MIME type of
      <code>application/x-tr-69-eager</code> then the alias or instance id
      must be used to create the node. Otherwise the alias or instance id must
      be returned without creating the node. The purpose of this lazy creation
      is to allow a single Set Parameter Values RPC to atomically create a
      number of nodes and set their values.</para>

      <para>For example:</para>

      <programlisting>String id = connector.addObject( "Starwars.CP.3.Obiwan.");
connector.setParameterValue( "Starwars.CP.3.Obiwan." + id+ ".Name", 
                                            "cp30", TR069_STRING );</programlisting>

      <para>The previous code gets an assigned id with the <xref linkend="org.osgi.service.tr069todmt.TR069Connector.addObject-String-" xrefstyle="hyperlink"/> method. The <xref linkend="org.osgi.service.tr069todmt.TR069Connector.setParameterValue-String-String-int-" xrefstyle="hyperlink"/> then assigns the string cp30 to the
      <code>Name</code> node. This will first create the actual node since it
      was not created in the <xref linkend="org.osgi.service.tr069todmt.TR069Connector.addObject-String-" xrefstyle="hyperlink"/> method and then sets the value of the <code>DMT
      Starwars/CP/3/Obiwan/&lt;id&gt;/Name</code> node.</para>

      <para>The <xref linkend="org.osgi.service.tr069todmt.TR069Connector.addObject-String-" xrefstyle="hyperlink"/> method requires an atomic session. If a
      non-atomic session is used then the <xref linkend="org.osgi.service.tr069todmt.TR069Connector.addObject-String-" xrefstyle="hyperlink"/> method must not attempt to create any objects
      and an exception must be thrown.</para>
    </section>

    <section>
      <title>Delete Object</title>

      <para>The <code>DeleteObject</code> RPC deletes an object from the tree,
      it takes the instance path as argument. This behavior is implemented in
      the <xref linkend="org.osgi.service.tr069todmt.TR069Connector.deleteObject-String-" xrefstyle="hyperlink"/> method. The corresponding node must be deleted
      if it exists. No error must be raised if the node does not exist in the
      DMT.</para>

      <para>For example, deleting the object created in <xref linkend="i780399"/>:</para>

      <programlisting>connector.deleteObject("Starwars.CP.3.Obiwan.cp30.");</programlisting>
    </section>
  </section>

  <section>
    <title>Error and Fault Codes</title>

    <para>The TR069 Connector must translate any Dmt Admin codes into a TR-069
    fault code. Since the methods in the <xref linkend="org.osgi.service.tr069todmt.TR069Connector" xrefstyle="hyperlink"/> only relate to a single value it is possible to
    provide a mapping from Dmt Exception codes to TR-069 fault codes. It is
    the responsibility of the Protocol Adapter to aggregate these errors in
    the response to a <code>SetParameterValues</code> RPCs.</para>

    <para>A TR069 Connector must prevent exceptions from happening and ensure
    that the different applicable error cases defined in the TR-069 RPCs are
    properly reported as a TR069 Exception with the intended fault code.
    However, this section defines a list of default translations between Dmt
    Exceptions and TR-069 fault codes.</para>

    <para>The following table contains the exceptions and the resulting fault
    codes. Any obligations that are mandated by the TR-069 protocol are the
    responsibility of the TR-069 Protocol Adapter. The Dmt Exception is
    available from the TR-069 Exception for further inspection.</para>

    <table pgwide="1">
      <title>Exceptions to TR-069 Fault code.</title>

      <tgroup cols="3">
        <thead>
          <row>
            <entry>Exception</entry>

            <entry>Fault code</entry>

            <entry>Comments</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><xref linkend="org.osgi.service.dmt.DmtException.ALERT_NOT_ROUTED" xrefstyle="hyperlink"/></entry>

            <entry><xref linkend="org.osgi.service.tr069todmt.TR069Exception.INTERNAL_ERROR" xrefstyle="hyperlink"/></entry>

            <entry/>
          </row>

          <row>
            <entry><xref linkend="org.osgi.service.dmt.DmtException.COMMAND_FAILED" xrefstyle="hyperlink"/></entry>

            <entry><xref linkend="org.osgi.service.tr069todmt.TR069Exception.INTERNAL_ERROR" xrefstyle="hyperlink"/></entry>

            <entry/>
          </row>

          <row>
            <entry><xref linkend="org.osgi.service.dmt.DmtException.COMMAND_NOT_ALLOWED" xrefstyle="hyperlink"/></entry>

            <entry><xref linkend="org.osgi.service.tr069todmt.TR069Exception.REQUEST_DENIED" xrefstyle="hyperlink"/></entry>

            <entry/>
          </row>

          <row>
            <entry><xref linkend="org.osgi.service.dmt.DmtException.CONCURRENT_ACCESS" xrefstyle="hyperlink"/></entry>

            <entry><xref linkend="org.osgi.service.tr069todmt.TR069Exception.INTERNAL_ERROR" xrefstyle="hyperlink"/></entry>

            <entry/>
          </row>

          <row>
            <entry><xref linkend="org.osgi.service.dmt.DmtException.DATA_STORE_FAILURE" xrefstyle="hyperlink"/></entry>

            <entry><xref linkend="org.osgi.service.tr069todmt.TR069Exception.INTERNAL_ERROR" xrefstyle="hyperlink"/></entry>

            <entry><para/></entry>
          </row>

          <row>
            <entry><xref linkend="org.osgi.service.dmt.DmtException.FEATURE_NOT_SUPPORTED" xrefstyle="hyperlink"/></entry>

            <entry><xref linkend="org.osgi.service.tr069todmt.TR069Exception.REQUEST_DENIED" xrefstyle="hyperlink"/></entry>

            <entry/>
          </row>

          <row>
            <entry><xref linkend="org.osgi.service.dmt.DmtException.INVALID_URI" xrefstyle="hyperlink"/></entry>

            <entry><xref linkend="org.osgi.service.tr069todmt.TR069Exception.INVALID_PARAMETER_NAME" xrefstyle="hyperlink"/></entry>

            <entry><para/></entry>
          </row>

          <row>
            <entry><xref linkend="org.osgi.service.dmt.DmtException.LIMIT_EXCEEDED" xrefstyle="hyperlink"/></entry>

            <entry><xref linkend="org.osgi.service.tr069todmt.TR069Exception.RESOURCES_EXCEEDED" xrefstyle="hyperlink"/></entry>

            <entry><para/></entry>
          </row>

          <row>
            <entry><xref linkend="org.osgi.service.dmt.DmtException.METADATA_MISMATCH" xrefstyle="hyperlink"/></entry>

            <entry><xref linkend="org.osgi.service.tr069todmt.TR069Exception.INVALID_PARAMETER_TYPE" xrefstyle="hyperlink"/></entry>

            <entry><para/></entry>
          </row>

          <row>
            <entry><xref linkend="org.osgi.service.dmt.DmtException.NODE_ALREADY_EXISTS" xrefstyle="hyperlink"/></entry>

            <entry><xref linkend="org.osgi.service.tr069todmt.TR069Exception.INTERNAL_ERROR" xrefstyle="hyperlink"/></entry>

            <entry><para/></entry>
          </row>

          <row>
            <entry><xref linkend="org.osgi.service.dmt.DmtException.NODE_NOT_FOUND" xrefstyle="hyperlink"/></entry>

            <entry><xref linkend="org.osgi.service.tr069todmt.TR069Exception.INVALID_PARAMETER_NAME" xrefstyle="hyperlink"/></entry>

            <entry><para/></entry>
          </row>

          <row>
            <entry><xref linkend="org.osgi.service.dmt.DmtException.PERMISSION_DENIED" xrefstyle="hyperlink"/></entry>

            <entry><xref linkend="org.osgi.service.tr069todmt.TR069Exception.NON_WRITABLE_PARAMETER" xrefstyle="hyperlink"/></entry>

            <entry><para/></entry>
          </row>

          <row>
            <entry><xref linkend="org.osgi.service.dmt.DmtException.REMOTE_ERROR" xrefstyle="hyperlink"/></entry>

            <entry><xref linkend="org.osgi.service.tr069todmt.TR069Exception.INTERNAL_ERROR" xrefstyle="hyperlink"/></entry>

            <entry/>
          </row>

          <row>
            <entry><xref linkend="org.osgi.service.dmt.DmtException.ROLLBACK_FAILED" xrefstyle="hyperlink"/></entry>

            <entry><xref linkend="org.osgi.service.tr069todmt.TR069Exception.INTERNAL_ERROR" xrefstyle="hyperlink"/></entry>

            <entry/>
          </row>

          <row>
            <entry><xref linkend="org.osgi.service.dmt.DmtException.SESSION_CREATION_TIMEOUT" xrefstyle="hyperlink"/></entry>

            <entry><xref linkend="org.osgi.service.tr069todmt.TR069Exception.REQUEST_DENIED" xrefstyle="hyperlink"/></entry>

            <entry/>
          </row>

          <row>
            <entry><xref linkend="org.osgi.service.dmt.DmtException.TRANSACTION_ERROR" xrefstyle="hyperlink"/></entry>

            <entry><xref linkend="org.osgi.service.tr069todmt.TR069Exception.REQUEST_DENIED" xrefstyle="hyperlink"/></entry>

            <entry/>
          </row>

          <row>
            <entry><xref linkend="org.osgi.service.dmt.DmtException.UNAUTHORIZED" xrefstyle="hyperlink"/></entry>

            <entry><xref linkend="org.osgi.service.tr069todmt.TR069Exception.REQUEST_DENIED" xrefstyle="hyperlink"/></entry>

            <entry/>
          </row>

          <row>
            <entry><xref linkend="org.osgi.service.dmt.DmtException.URI_TOO_LONG" xrefstyle="hyperlink"/></entry>

            <entry><xref linkend="org.osgi.service.tr069todmt.TR069Exception.INVALID_PARAMETER_NAME" xrefstyle="hyperlink"/></entry>

            <entry/>
          </row>

          <row>
            <entry><code>Dmt Illegal State Exception</code></entry>

            <entry><xref linkend="org.osgi.service.tr069todmt.TR069Exception.INTERNAL_ERROR" xrefstyle="hyperlink"/></entry>

            <entry/>
          </row>

          <row>
            <entry><code>Security Exception</code></entry>

            <entry><xref linkend="org.osgi.service.tr069todmt.TR069Exception.REQUEST_DENIED" xrefstyle="hyperlink"/></entry>

            <entry/>
          </row>

          <row>
            <entry><code>Other Exceptions</code></entry>

            <entry><xref linkend="org.osgi.service.tr069todmt.TR069Exception.REQUEST_DENIED" xrefstyle="hyperlink"/></entry>

            <entry/>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section>
    <title>Managing the RMT</title>

    <para>The RMT is not a native TR-069 model as it is not defined by BBF and
    it takes advantage of the Dmt Admin features. This section therefore shows
    a number of examples how the RMT can be managed from an ACS.</para>

    <para>For example, on a specific CPE the following bundles are installed,
    the given name is the location</para>

    <programlisting>System Bundle
org-apache-felix-webconsole
org-apache-felix-configadmin
org-eclipse-equinox-scr
jp-co-ntt-admin
de-telekom-shell</programlisting>

    <para>The intention is to:</para>

    <itemizedlist>
      <listitem>
        <para>Uninstall <code>org-apache-felix-configadmin</code>,</para>
      </listitem>

      <listitem>
        <para>Install and start <code>org-eclipse-equinox-cm</code>,</para>
      </listitem>

      <listitem>
        <para>Update <code>jp-co-ntt-admin</code>.</para>
      </listitem>
    </itemizedlist>

    <para>After the successful reconfiguration, the framework must restart. As
    framework changes must happen in a atomic session, the following
    parameters must be set in a single RPC:</para>

    <programlisting>SetParameterValues {
  Framework.Bundle.org-apache-felix-configadmin.RequestedState = UNINSTALLED
  Framework.Bundle.jp-co-ntt-admin.URL                         = http://....
  Framework.Bundle.org-eclipse-equinox-cm.URL                  = http://....
  Framework.Bundle.org-eclipse-equinox-cm.RequestedState       = ACTIVE
  Framework.Bundle.org-eclipse-equinox-cm.AutoStart            = true
  Framework.Bundle.Systemþ0020Bundle.URL                       = ""
}</programlisting>

    <para>The Protocol Adapter must open an atomic session on the $ node as
    defined in the RMT. It will then set all the parameters in the previous
    list. As the <code>Framework/Bundle/org-eclipse-equinox-cm</code> node
    does not exist, the TR069 Connector will create it because it is below a
    writable <code>MAP</code> node. The System Bundle is updated with an empty
    string, signalling an update. A System Bundle update is a framework
    restart.</para>

    <para>Once the session is committed after all the
    <code>SetParameterValues</code> elements are executed the Data Plugin will
    perform the actions and report success or failure. The handler must then
    restart the framework after the commit has returned.</para>
  </section>

  <section>
    <title>Native TR-069 Object Models</title>

    <para>This section provides an example of a Data Plugin that provides a
    native TR-069 Object Model. As example is chosen a naive implementation of
    the Configuration Admin service. The object model implemented has the
    following definition:</para>

    <informaltable pgwide="1">
      <tgroup cols="5">
        <colspec colnum="1" colwidth="2*"/>

        <colspec colnum="2"/>

        <colspec colnum="3"/>

        <colspec colnum="4"/>

        <colspec colnum="5" colwidth="3*"/>

        <thead>
          <row>
            <entry>Path</entry>

            <entry>Type</entry>

            <entry>Write</entry>

            <entry>Read</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>CM.{i}.</code></entry>

            <entry><code>Object</code></entry>

            <entry/>

            <entry/>

            <entry><para/></entry>
          </row>

          <row>
            <entry><code>CM.{i}.Pid</code></entry>

            <entry><code>string</code></entry>

            <entry><code>x</code></entry>

            <entry><code>x</code></entry>

            <entry><para>The PID</para></entry>
          </row>

          <row>
            <entry><code>CM.{i}.Properties.{i}.</code></entry>

            <entry><code>Object</code></entry>

            <entry/>

            <entry/>

            <entry><para>Property nodes</para></entry>
          </row>

          <row>
            <entry><code>CM.{i}.Properties.{i}.Key</code></entry>

            <entry><code>string</code></entry>

            <entry><code>x</code></entry>

            <entry><code>x</code></entry>

            <entry><para>The key</para></entry>
          </row>

          <row>
            <entry><code>CM.{i}.Properties.{i}.Value</code></entry>

            <entry><code>string</code></entry>

            <entry><code>x</code></entry>

            <entry><code>x</code></entry>

            <entry><para>Comma separated values</para></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The corresponding DMT sub-tree is defined like:</para>

    <informaltable pgwide="1">
      <tgroup cols="6">
        <colspec colnum="1" colwidth="2*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="2*"/>

        <colspec colnum="4" colwidth="1*"/>

        <colspec colnum="5" colwidth=".5*"/>

        <colspec colnum="6" colwidth="3*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Act</entry>

            <entry>Type</entry>

            <entry>Card.</entry>

            <entry>S</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>CM</code></entry>

            <entry><code>Get</code></entry>

            <entry><code>MAP</code></entry>

            <entry><code>1</code></entry>

            <entry><code>P</code></entry>

            <entry><para>Base node for the CM model</para></entry>
          </row>

          <row>
            <entry><code> [string]</code></entry>

            <entry><code>Get Set Add Del</code></entry>

            <entry><code>Configuration</code></entry>

            <entry><code>0..n</code></entry>

            <entry><code>D</code></entry>

            <entry><para>A MAP of the PID</para></entry>
          </row>

          <row>
            <entry><code>  InstanceId</code></entry>

            <entry><code>Get</code></entry>

            <entry><code>int</code></entry>

            <entry><code>1</code></entry>

            <entry><code>P</code></entry>

            <entry><para>The persistent instance Id</para></entry>
          </row>

          <row>
            <entry><code>  Pid</code></entry>

            <entry><code>Get</code></entry>

            <entry><code>string</code></entry>

            <entry><code>1</code></entry>

            <entry><code>P</code></entry>

            <entry><para>The PID of the configuration</para></entry>
          </row>

          <row>
            <entry><code>  Properties</code></entry>

            <entry><code>Get</code></entry>

            <entry><code>MAP</code></entry>

            <entry><code>1</code></entry>

            <entry><code>P</code></entry>

            <entry><para>The properties</para></entry>
          </row>

          <row>
            <entry><code>   [string]</code></entry>

            <entry><code>Get Set Add Del</code></entry>

            <entry><code>LIST</code></entry>

            <entry><code>0..n</code></entry>

            <entry><code>D</code></entry>

            <entry><para>A property definitions; a property consists of a list
            of strings. Single values are just a list with one
            element.</para></entry>
          </row>

          <row>
            <entry><code>    [index]</code></entry>

            <entry><code>Get Set Add Del</code></entry>

            <entry><code>string</code></entry>

            <entry><code>0..n</code></entry>

            <entry><code>D</code></entry>

            <entry><para>An element in the list</para></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The Protocol Adapter allows an ACS to access the data model
    implemented in the Dmt Plugin. It also allows the creation of new
    configuration objects.</para>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.tr069todmt" xml:id="org.osgi.service.tr069todmt" xml:base="../../generated/javadoc/docbook/org.osgi.service.tr069todmt.xml">
   <title>org.osgi.service.tr069todmt</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.tr069todmt-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.tr069todmt-version.number">1.0</edition>
   </info>
   <para>
TR069 Connector Service Package Version 1.0.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.tr069todmt; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers of the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.tr069todmt; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.tr069todmt.ParameterInfo">
                  <code>ParameterInfo</code>
               </link> - 
Maps to the TR-069 <code>ParameterInfoStruct</code> that is returned from the
 <link linkend="org.osgi.service.tr069todmt.TR069Connector.getParameterNames-String-boolean-">TR069Connector.getParameterNames(String, boolean)</link> method.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.tr069todmt.ParameterValue">
                  <code>ParameterValue</code>
               </link> - 
Maps to the TR-069 <code>ParameterValueStruct</code>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.tr069todmt.TR069Connector">
                  <code>TR069Connector</code>
               </link> - 
A TR-069 Connector is an assistant to a TR-069 Protocol Adapter developer.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.tr069todmt.TR069ConnectorFactory">
                  <code>TR069ConnectorFactory</code>
               </link> - 
A service that can create TR069 Connector
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.tr069todmt.TR069Exception">
                  <code>TR069Exception</code>
               </link> - 
This exception is defined in terms of applicable TR-069 fault codes.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="ParameterInfo" xml:id="org.osgi.service.tr069todmt.ParameterInfo">
      <title>public interface ParameterInfo</title>
      <para>
Maps to the TR-069 <code>ParameterInfoStruct</code> that is returned from the
 <link linkend="org.osgi.service.tr069todmt.TR069Connector.getParameterNames-String-boolean-">TR069Connector.getParameterNames(String, boolean)</link> method.
   </para>
      <section role="method" xreflabel="getParameterValue()" xml:id="org.osgi.service.tr069todmt.ParameterInfo.getParameterValue--">
         <title>public ParameterValue getParameterValue() throws TR069Exception</title>
         <para role="description">
Provide the value of the node. This method throws an exception if it is
 called for anything but a parameter
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Parameter Value of the corresponding object</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>TR069Exception</code>– If there is a problem   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getPath()" xml:id="org.osgi.service.tr069todmt.ParameterInfo.getPath--">
         <title>public String getPath()</title>
         <para role="description">
The path of the parameter, either a parameter path, an instance path, a
 table path, or an object path.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of the parameter</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isParameter()" xml:id="org.osgi.service.tr069todmt.ParameterInfo.isParameter--">
         <title>public boolean isParameter()</title>
         <para role="description">
Returns <code>true</code> of this is a parameter, if it returns <code>false</code>
 it is an object or table.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> for a parameter, <code>false</code> otherwise</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isWriteable()" xml:id="org.osgi.service.tr069todmt.ParameterInfo.isWriteable--">
         <title>public boolean isWriteable()</title>
         <para role="description">
Return <code>true</code> if this parameter is writeable, otherwise
 <code>false</code>. A parameter is writeable if the SetParamaterValue with the
 given name would be successful if an appropriate value was given. If this
 is a table path, the method specifies whether or not AddObject would be
 successful. If the parameter path points to a table instance, the method
 specifies whether or not DeleteObject would be successful.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>If this parameter is writeable</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ParameterValue" xml:id="org.osgi.service.tr069todmt.ParameterValue">
      <title>public interface ParameterValue</title>
      <para>
Maps to the TR-069 <code>ParameterValueStruct</code>
      </para>
      <section role="method" xreflabel="getPath()" xml:id="org.osgi.service.tr069todmt.ParameterValue.getPath--">
         <title>public String getPath()</title>
         <para role="description">
This is the path of a Parameter. In TR-069 this is called the Parameter
 Name.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The path of the parameter</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.tr069todmt.ParameterValue.getType--">
         <title>public int getType()</title>
         <para role="description">
The type of the parameter. One of <link linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_INT">TR069Connector.TR069_INT</link>,
 <link linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_UNSIGNED_INT">TR069Connector.TR069_UNSIGNED_INT</link>,
 <link linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_LONG">TR069Connector.TR069_LONG</link>,
 <link linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_UNSIGNED_LONG">TR069Connector.TR069_UNSIGNED_LONG</link>,
 <link linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_STRING">TR069Connector.TR069_STRING</link>,
 <link linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_DATETIME">TR069Connector.TR069_DATETIME</link>,
 <link linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_BASE64">TR069Connector.TR069_BASE64</link>,
 <link linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_HEXBINARY">TR069Connector.TR069_HEXBINARY</link>. This method is not part of the
 <code>ParameterValueStruct</code> but is necessary to encode the type in the
 XML.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The parameter type</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getValue()" xml:id="org.osgi.service.tr069todmt.ParameterValue.getValue--">
         <title>public String getValue()</title>
         <para role="description">
This is the value of the parameter. The returned value must be in a
 representation defined by the TR-069 protocol.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The value of the parameter</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="TR069Connector" xml:id="org.osgi.service.tr069todmt.TR069Connector">
      <title>public interface TR069Connector</title>
      <para>
A TR-069 Connector is an assistant to a TR-069 Protocol Adapter developer.
 The connector manages the low level details of converting the different
 TR-069 RPCs to a Device Management Tree managed by Dmt Admin. The connector
 manages the conversions from the TR-069 Object Names to a node in the DMT and
 vice versa.
 </para>
      <para>
 The connector uses a Dmt Session from the caller, which is given when the
 connector is created. The connector does not implement the exact RPCs but
 only provides the basic functions to set and get the parameters of an object
 as well as adding and deleting an object in a table. A TR-069 developer must
 still parse the XML, handle the relative and absolute path issues, open a Dmt
 Session etc.
 </para>
      <para>
 The connector assumes that each parameter or object path is relative to the
 root of the Dmt Session.
 </para>
      <para>
 This connector must convert the TR-069 paths to Dmt Admin URIs. This
 conversion must take into account the <code>LIST</code> and <code>MAP</code> concepts
 defined in the specifications as well as the synthetic parameters
 <code>NumberOfEntries</code> and <code>Alias</code>. These concepts define the use of
 an <code>InstanceId</code> node that must be used by the connector to provide a
 TR-069 table view on the <code>LIST</code> and <code>MAP</code> nodes.</para>
      <section role="field" xreflabel="PREFIX" xml:id="org.osgi.service.tr069todmt.TR069Connector.PREFIX">
         <title>public static final String PREFIX = "application/x-tr-069-"</title>
         <para>
The MIME type prefix.
   </para>
      </section>
      <section role="field" xreflabel="TR069_BASE64" xml:id="org.osgi.service.tr069todmt.TR069Connector.TR069_BASE64">
         <title>public static final int TR069_BASE64 = 64</title>
         <para>
Constant representing the TR-069 base64 type.
   </para>
      </section>
      <section role="field" xreflabel="TR069_BOOLEAN" xml:id="org.osgi.service.tr069todmt.TR069Connector.TR069_BOOLEAN">
         <title>public static final int TR069_BOOLEAN = 32</title>
         <para>
Constant representing the TR-069 boolean type.
   </para>
      </section>
      <section role="field" xreflabel="TR069_DATETIME" xml:id="org.osgi.service.tr069todmt.TR069Connector.TR069_DATETIME">
         <title>public static final int TR069_DATETIME = 256</title>
         <para>
Constant representing the TR-069 date time type.
   </para>
      </section>
      <section role="field" xreflabel="TR069_DEFAULT" xml:id="org.osgi.service.tr069todmt.TR069Connector.TR069_DEFAULT">
         <title>public static final int TR069_DEFAULT = 0</title>
         <para>
Constant representing the default or unknown type. If this type is used a
 default conversion will take place
   </para>
      </section>
      <section role="field" xreflabel="TR069_HEXBINARY" xml:id="org.osgi.service.tr069todmt.TR069Connector.TR069_HEXBINARY">
         <title>public static final int TR069_HEXBINARY = 128</title>
         <para>
Constant representing the TR-069 hex binary type.
   </para>
      </section>
      <section role="field" xreflabel="TR069_INT" xml:id="org.osgi.service.tr069todmt.TR069Connector.TR069_INT">
         <title>public static final int TR069_INT = 1</title>
         <para>
Constant representing the TR-069 integer type.
   </para>
      </section>
      <section role="field" xreflabel="TR069_LONG" xml:id="org.osgi.service.tr069todmt.TR069Connector.TR069_LONG">
         <title>public static final int TR069_LONG = 4</title>
         <para>
Constant representing the TR-069 long type.
   </para>
      </section>
      <section role="field" xreflabel="TR069_MIME_BASE64" xml:id="org.osgi.service.tr069todmt.TR069Connector.TR069_MIME_BASE64">
         <title>public static final String TR069_MIME_BASE64 = "application/x-tr-069-base64"</title>
         <para>
Constant representing the TR-069 base64 type.
   </para>
      </section>
      <section role="field" xreflabel="TR069_MIME_BOOLEAN" xml:id="org.osgi.service.tr069todmt.TR069Connector.TR069_MIME_BOOLEAN">
         <title>public static final String TR069_MIME_BOOLEAN = "application/x-tr-069-boolean"</title>
         <para>
Constant representing the TR-069 boolean type.
   </para>
      </section>
      <section role="field" xreflabel="TR069_MIME_DATETIME" xml:id="org.osgi.service.tr069todmt.TR069Connector.TR069_MIME_DATETIME">
         <title>public static final String TR069_MIME_DATETIME = "application/x-tr-069-dateTime"</title>
         <para>
Constant representing the TR-069 date time type.
   </para>
      </section>
      <section role="field" xreflabel="TR069_MIME_DEFAULT" xml:id="org.osgi.service.tr069todmt.TR069Connector.TR069_MIME_DEFAULT">
         <title>public static final String TR069_MIME_DEFAULT = "application/x-tr-069-default"</title>
         <para>
Constant representing the default or unknown type. If this type is used a
 default conversion will take place
   </para>
      </section>
      <section role="field" xreflabel="TR069_MIME_EAGER" xml:id="org.osgi.service.tr069todmt.TR069Connector.TR069_MIME_EAGER">
         <title>public static final String TR069_MIME_EAGER = "application/x-tr-069-eager"</title>
         <para>
Constant representing the TR-069 eager type.
   </para>
      </section>
      <section role="field" xreflabel="TR069_MIME_HEXBINARY" xml:id="org.osgi.service.tr069todmt.TR069Connector.TR069_MIME_HEXBINARY">
         <title>public static final String TR069_MIME_HEXBINARY = "application/x-tr-069-hexBinary"</title>
         <para>
Constant representing the TR-069 hex binary type.
   </para>
      </section>
      <section role="field" xreflabel="TR069_MIME_INT" xml:id="org.osgi.service.tr069todmt.TR069Connector.TR069_MIME_INT">
         <title>public static final String TR069_MIME_INT = "application/x-tr-069-int"</title>
         <para>
Constant representing the TR-069 integer type.
   </para>
      </section>
      <section role="field" xreflabel="TR069_MIME_LONG" xml:id="org.osgi.service.tr069todmt.TR069Connector.TR069_MIME_LONG">
         <title>public static final String TR069_MIME_LONG = "application/x-tr-069-long"</title>
         <para>
Constant representing the TR-069 long type.
   </para>
      </section>
      <section role="field" xreflabel="TR069_MIME_STRING" xml:id="org.osgi.service.tr069todmt.TR069Connector.TR069_MIME_STRING">
         <title>public static final String TR069_MIME_STRING = "application/x-tr-069-string"</title>
         <para>
Constant representing the TR-069 string type.
   </para>
      </section>
      <section role="field" xreflabel="TR069_MIME_STRING_LIST" xml:id="org.osgi.service.tr069todmt.TR069Connector.TR069_MIME_STRING_LIST">
         <title>public static final String TR069_MIME_STRING_LIST = "application/x-tr-069-string-list"</title>
         <para>
Constant representing the TR-069 string list type.
   </para>
      </section>
      <section role="field" xreflabel="TR069_MIME_UNSIGNED_INT" xml:id="org.osgi.service.tr069todmt.TR069Connector.TR069_MIME_UNSIGNED_INT">
         <title>public static final String TR069_MIME_UNSIGNED_INT = "application/x-tr-069-unsignedInt"</title>
         <para>
Constant representing the TR-069 unsigned integer type.
   </para>
      </section>
      <section role="field" xreflabel="TR069_MIME_UNSIGNED_LONG" xml:id="org.osgi.service.tr069todmt.TR069Connector.TR069_MIME_UNSIGNED_LONG">
         <title>public static final String TR069_MIME_UNSIGNED_LONG = "application/x-tr-069-unsignedLong"</title>
         <para>
Constant representing the TR-069 unsigned long type.
   </para>
      </section>
      <section role="field" xreflabel="TR069_STRING" xml:id="org.osgi.service.tr069todmt.TR069Connector.TR069_STRING">
         <title>public static final int TR069_STRING = 16</title>
         <para>
Constant representing the TR-069 string type.
   </para>
      </section>
      <section role="field" xreflabel="TR069_UNSIGNED_INT" xml:id="org.osgi.service.tr069todmt.TR069Connector.TR069_UNSIGNED_INT">
         <title>public static final int TR069_UNSIGNED_INT = 2</title>
         <para>
Constant representing the TR-069 unsigned integer type.
   </para>
      </section>
      <section role="field" xreflabel="TR069_UNSIGNED_LONG" xml:id="org.osgi.service.tr069todmt.TR069Connector.TR069_UNSIGNED_LONG">
         <title>public static final int TR069_UNSIGNED_LONG = 8</title>
         <para>
Constant representing the TR-069 unsigned long type.
   </para>
      </section>
      <section role="method" xreflabel="addObject(String)" xml:id="org.osgi.service.tr069todmt.TR069Connector.addObject-String-">
         <title>public String addObject(String path) throws TR069Exception</title>
         <formalpara role="parameter">
            <title>path</title>
            <para>A table path with an optional alias at the end</para>
         </formalpara>
         <para role="description">
Add a new node to the Dmt Admin as defined by the AddObject RPC.
 
 The path must map to either a <code>LIST</code> or <code>MAP</code> node as no
 other nodes can accept new children.
 </para>
         <para>
 If the path ends in an alias (<code>[ ALIAS ]</code>) then the node name must
 be the alias, however, no new node must be created. Otherwise, the
 Connector must calculate a unique instance id for the new node name that
 follows the TR-069 rules for instance ids. That is, this id must not be
 reused and must not be in use. That is, the id must be reserved
 persistently.
 
 </para>
         <para>
 If the <code>LIST</code> or <code>MAP</code> node has a Meta Node with a MIME type
 application/x-tr-069-eager then the node must be immediately created.
 Otherwise no new node must be created, this node must be created when the
 node is accessed in a subsequent RPC.
 </para>
         <para>
 The alias name or instance id must be returned as identifier for the ACS.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of the new node.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>TR069Exception</code>– The following fault codes are defined for this
         method: 9001, 9002, 9003, 9004, 9005. If an AddObject request
         would result in exceeding the maximum number of such objects
         supported by the CPE, the CPE MUST return a fault response with
         the Resources Exceeded (9004) fault code.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="close()" xml:id="org.osgi.service.tr069todmt.TR069Connector.close--">
         <title>public void close()</title>
         <para role="description">
Close this connector. This will <emphasis role="strong">not</emphasis> close the corresponding
 session.
   </para>
      </section>
      <section role="method" xreflabel="deleteObject(String)" xml:id="org.osgi.service.tr069todmt.TR069Connector.deleteObject-String-">
         <title>public void deleteObject(String objectPath) throws TR069Exception</title>
         <formalpara role="parameter">
            <title>objectPath</title>
            <para>The path to an object in a table to be deleted.</para>
         </formalpara>
         <para role="description">
Delete an object from a table. A missing node must be ignored.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>TR069Exception</code>– The following fault codes are defined for this
         method: 9001, 9002, 9003, 9005. If the fault is caused by an
         invalid objectPath value, the Invalid Parameter Name fault code
         (9005) must be used instead of the more general Invalid Arguments
         fault code (9003). A missing node for <code>objectPath</code> must be
         ignored.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getParameterNames(String,boolean)" xml:id="org.osgi.service.tr069todmt.TR069Connector.getParameterNames-String-boolean-">
         <title>public Collection&lt;ParameterInfo&gt; getParameterNames(String objectOrTablePath,boolean nextLevel) throws TR069Exception</title>
         <formalpara role="parameter">
            <title>objectOrTablePath</title>
            <para>A path to an object or table.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>nextLevel</title>
            <para>If <code>true</code> consider only the children of the object
        or table addressed by <code>path</code>, otherwise include the whole
        sub-tree, including the addressed object or table.</para>
         </formalpara>
         <para role="description">
Getting the <link linkend="org.osgi.service.tr069todmt.ParameterInfo">ParameterInfo</link> objects addressed by path. This method
 is intended to be used to implement the GetParameterNames RPC.
 </para>
         <para>
 The connector must attempt to create any missing nodes that are needed
 for the <code>objectOrTablePath</code> by using the
 <link linkend="org.osgi.service.tr069todmt.TR069Connector.toURI-String-boolean-">toURI(String, boolean)</link> method with <code>true</code>.
 </para>
         <para>
 This method must traverse the sub-tree addressed by the path and return
 the paths to all the objects, tables, and parameters in that tree. If the
 nextLevel argument is <code>true</code> then only the children object, table,
 and parameter information must be returned.
 </para>
         <para>
 The returned <link linkend="org.osgi.service.tr069todmt.ParameterInfo">ParameterInfo</link> objects must be usable to discover the
 sub-tree.
 </para>
         <para>
 If the child nodes have an <code>InstanceId</code> node then the returned
 names must include the <code>InstanceId</code> values instead of the node
 names.
 </para>
         <para>
 If the parent node is a <code>MAP</code>, then the synthetic <code>Alias</code>
 parameter must be included.
 </para>
         <para>
 Any <code>MAP</code> and <code>LIST</code> node must include a
 <link linkend="org.osgi.service.tr069todmt.ParameterInfo">ParameterInfo</link> for the corresponding <code>NumberOfEntries</code>
 parameter.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A collection of <link linkend="org.osgi.service.tr069todmt.ParameterInfo">ParameterInfo</link> objects representing the
         resulting child parameter, objects, and tables as defined by the
         TR-069 <code>ParameterInfoStruct</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>TR069Exception</code>– If the fault is caused by an invalid ParameterPath
         value, the Invalid Parameter Name fault code (9005) MUST be used
         instead of the more general Invalid Arguments fault code (9003).
         A ParameterPath value must be considered invalid if it is not an
         empty string and does not exactly match a parameter or object
         name currently present in the data model. If <code>nextLevel</code> is
         <code>true</code> and <code>objectOrTablePath</code> is a parameter path
         rather than an object/table path, the method must return a fault
         response with the Invalid Arguments fault code (9003). If the
         value cannot be gotten for some reason, this method can generate
         the following fault codes::
         <itemizedlist>
                  <listitem>
                     <para> 9001 <link linkend="org.osgi.service.tr069todmt.TR069Exception.REQUEST_DENIED">TR069Exception.REQUEST_DENIED</link>
                     </para>
                  </listitem>
                  <listitem>
                     <para> 9002
         <link linkend="org.osgi.service.tr069todmt.TR069Exception.INTERNAL_ERROR">TR069Exception.INTERNAL_ERROR</link>
                     </para>
                  </listitem>
                  <listitem>
                     <para> 9003
         <link linkend="org.osgi.service.tr069todmt.TR069Exception.INVALID_ARGUMENTS">TR069Exception.INVALID_ARGUMENTS</link>
                     </para>
                  </listitem>
                  <listitem>
                     <para> 9005
         <link linkend="org.osgi.service.tr069todmt.TR069Exception.INVALID_PARAMETER_NAME">TR069Exception.INVALID_PARAMETER_NAME</link>
                     </para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getParameterValue(String)" xml:id="org.osgi.service.tr069todmt.TR069Connector.getParameterValue-String-">
         <title>public ParameterValue getParameterValue(String parameterPath) throws TR069Exception</title>
         <formalpara role="parameter">
            <title>parameterPath</title>
            <para>A parameter path (must refer to a valid parameter,
        not an object or table).</para>
         </formalpara>
         <para role="description">
Getting a parameter value. This method should be used to implement the
 GetParameterValues RPC. This method does <emphasis role="strong">not</emphasis> handle retrieving
 multiple values as the corresponding RPC can request with an object or
 table path, this method only accepts a parameter path. Retrieving
 multiple values can be achieved with the
 <link linkend="org.osgi.service.tr069todmt.TR069Connector.getParameterNames-String-boolean-">getParameterNames(String, boolean)</link>.
 </para>
         <para>
 If the <code>parameterPath</code> ends in <code>NumberOfEntries</code> then the
 method must synthesize the value. The <code>parameterPath</code> then has a
 pattern like <code>(object-path)(table-name)NumberOfEntries</code>. The
 returned value must be an <link linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_UNSIGNED_INT">TR069_UNSIGNED_INT</link> that contains the
 number of child nodes in the table <code>(object-path)(table-name)</code>. For
 example, if <code>A.B.CNumberOfEntries</code> is requested the return value
 must be the number of child nodes under <code>A/B/C</code>.
 </para>
         <para>
 If the value of a an <code>Alias</code> node is requested then the name of the
 parent node must be returned. For example, if the path is
 <code>M.X.Alias</code> then the returned value must be <code>X</code>.
 </para>
         <para>
 The connector must attempt to create any missing nodes along the way,
 creating parent nodes on demand.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name, value, and type triad of the requested parameter as
         defined by the TR-069 <code>ParameterValueStruct</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>TR069Exception</code>– The following fault codes are defined for this
         method: 9001, 9002, 9003, 9004, 9005.
         <itemizedlist>
                  <listitem>
                     <para> 9001 <link linkend="org.osgi.service.tr069todmt.TR069Exception.REQUEST_DENIED">TR069Exception.REQUEST_DENIED</link>
                     </para>
                  </listitem>
                  <listitem>
                     <para> 9002
         <link linkend="org.osgi.service.tr069todmt.TR069Exception.INTERNAL_ERROR">TR069Exception.INTERNAL_ERROR</link>
                     </para>
                  </listitem>
                  <listitem>
                     <para> 9003
         <link linkend="org.osgi.service.tr069todmt.TR069Exception.INVALID_ARGUMENTS">TR069Exception.INVALID_ARGUMENTS</link>
                     </para>
                  </listitem>
                  <listitem>
                     <para> 9004
         <link linkend="org.osgi.service.tr069todmt.TR069Exception.RESOURCES_EXCEEDED">TR069Exception.RESOURCES_EXCEEDED</link>
                     </para>
                  </listitem>
                  <listitem>
                     <para> 9005
         <link linkend="org.osgi.service.tr069todmt.TR069Exception.INVALID_PARAMETER_NAME">TR069Exception.INVALID_PARAMETER_NAME</link>
                     </para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setParameterValue(String,String,int)" xml:id="org.osgi.service.tr069todmt.TR069Connector.setParameterValue-String-String-int-">
         <title>public void setParameterValue(String parameterPath,String value,int type) throws TR069Exception</title>
         <formalpara role="parameter">
            <title>parameterPath</title>
            <para>The parameter path</para>
         </formalpara>
         <formalpara role="parameter">
            <title>value</title>
            <para>A trimmed string value that has the given type. The value
        can be in either canonical or lexical representation by TR069.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>The type of the parameter (<link linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_INT">TR069_INT</link>,
        <link linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_UNSIGNED_INT">TR069_UNSIGNED_INT</link>,<link linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_LONG">TR069_LONG</link>,
        <link linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_UNSIGNED_LONG">TR069_UNSIGNED_LONG</link>,<link linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_STRING">TR069_STRING</link>,
        <link linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_DATETIME">TR069_DATETIME</link>,<link linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_BASE64">TR069_BASE64</link>,
        <link linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_HEXBINARY">TR069_HEXBINARY</link>, <link linkend="org.osgi.service.tr069todmt.TR069Connector.TR069_BOOLEAN">TR069_BOOLEAN</link>)</para>
         </formalpara>
         <para role="description">
Setting a parameter. This method should be used to provide the
 SetParameterValues RPC. This method must convert the parameter Name to a
 URI and replace the DMT node at that place. It must follow the type
 conversions as described in the specification.
 </para>
         <para>
 The connector must attempt to create any missing nodes along the way,
 creating parent nodes on demand.
 </para>
         <para>
 If the value of a an Alias node is set then the parent node must be
 renamed. For example, if the value of <code>M/X/Alias</code> is set to
 <code>Y</code> then the node will have a URI of <code>M/Y/Alias</code>. The value
 must not be escaped as the connector will escape it.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>TR069Exception</code>– The following fault codes are defined for this
         method: 9001, 9002, 9003, 9004, 9005, 9006, 9007, 9008.
         <itemizedlist>
                  <listitem>
                     <para> 9001 <link linkend="org.osgi.service.tr069todmt.TR069Exception.REQUEST_DENIED">TR069Exception.REQUEST_DENIED</link>
                     </para>
                  </listitem>
                  <listitem>
                     <para> 9002
         <link linkend="org.osgi.service.tr069todmt.TR069Exception.INTERNAL_ERROR">TR069Exception.INTERNAL_ERROR</link>
                     </para>
                  </listitem>
                  <listitem>
                     <para> 9003
         <link linkend="org.osgi.service.tr069todmt.TR069Exception.INVALID_ARGUMENTS">TR069Exception.INVALID_ARGUMENTS</link>
                     </para>
                  </listitem>
                  <listitem>
                     <para> 9004
         <link linkend="org.osgi.service.tr069todmt.TR069Exception.RESOURCES_EXCEEDED">TR069Exception.RESOURCES_EXCEEDED</link>
                     </para>
                  </listitem>
                  <listitem>
                     <para> 9005
         <link linkend="org.osgi.service.tr069todmt.TR069Exception.INVALID_PARAMETER_NAME">TR069Exception.INVALID_PARAMETER_NAME</link>
                     </para>
                  </listitem>
                  <listitem>
                     <para> 9006
         <link linkend="org.osgi.service.tr069todmt.TR069Exception.INVALID_PARAMETER_TYPE">TR069Exception.INVALID_PARAMETER_TYPE</link>
                     </para>
                  </listitem>
                  <listitem>
                     <para> 9007
         <link linkend="org.osgi.service.tr069todmt.TR069Exception.INVALID_PARAMETER_VALUE">TR069Exception.INVALID_PARAMETER_VALUE</link>
                     </para>
                  </listitem>
                  <listitem>
                     <para> 9008
         <link linkend="org.osgi.service.tr069todmt.TR069Exception.NON_WRITABLE_PARAMETER">TR069Exception.NON_WRITABLE_PARAMETER</link>
                     </para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="toPath(String)" xml:id="org.osgi.service.tr069todmt.TR069Connector.toPath-String-">
         <title>public String toPath(String uri) throws TR069Exception</title>
         <formalpara role="parameter">
            <title>uri</title>
            <para>A Dmt Session relative URI</para>
         </formalpara>
         <para role="description">
Convert a Dmt Session relative Dmt Admin URI to a valid TR-069 path,
 either a table, object, or parameter path depending on the structure of
 the DMT. The translation takes into account the special meaning
 <code>LIST</code>, <code>MAP</code> , <code>Alias</code>, and <code>InstanceId</code> nodes.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An object, table, or parameter path</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>TR069Exception</code>– If there is an error   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="toURI(String,boolean)" xml:id="org.osgi.service.tr069todmt.TR069Connector.toURI-String-boolean-">
         <title>public String toURI(String name,boolean create) throws TR069Exception</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>A TR-069 path</para>
         </formalpara>
         <formalpara role="parameter">
            <title>create</title>
            <para>If <code>true</code>, create missing nodes when they reside
        under a MAP or LIST</para>
         </formalpara>
         <para role="description">
Convert a TR-069 path to a Dmt Session relative Dmt Admin URI. The
 translation takes into account the special meaning <code>LIST</code>,
 <code>MAP</code>, <code>InstanceId</code> node semantics.
 </para>
         <para>
 The synthetic <code>Alias</code> or <code>NumberOfEntries</code> parameter cannot
 be mapped and must throw an <link linkend="org.osgi.service.tr069todmt.TR069Exception.INVALID_PARAMETER_NAME">TR069Exception.INVALID_PARAMETER_NAME</link>.
 </para>
         <para>
 The returned path is properly escaped for TR-069.
 </para>
         <para>
 The mapping from the path to a URI requires support from the meta data in
 the DMT, it is not possible to use a mapping solely based on string
 replacements. The translation takes into account the semantics of the MAP
 and LIST nodes. If at a certain point a node under a <code>MAP</code> node
 does not exist then the Connector can create it if the <code>create</code>
 flag is set to <code>true</code>. Otherwise a non-existent node will terminate
 the mapping.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A relative Dmt Admin URI</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>TR069Exception</code>– If there is an error   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="TR069ConnectorFactory" xml:id="org.osgi.service.tr069todmt.TR069ConnectorFactory">
      <title>public interface TR069ConnectorFactory</title>
      <para>
A service that can create TR069 Connector
   </para>
      <section role="method" xreflabel="create(DmtSession)" xml:id="org.osgi.service.tr069todmt.TR069ConnectorFactory.create-DmtSession-">
         <title>public TR069Connector create(DmtSession session)</title>
         <formalpara role="parameter">
            <title>session</title>
            <para>The session to use for the adaption. This session must not
        be closed before the TR069 Connector is closed.</para>
         </formalpara>
         <para role="description">
Create a TR069 connector based on the given session .
 </para>
         <para>
 The session must be an atomic session when objects are added and/or
 parameters are going to be set, otherwise it can be a read only or
 exclusive session. Due to the lazy creation nature of the TR069 Connector
 it is possible that a node must be created in a read method after a node
 has been added, it is therefore necessary to always provide an atomic
 session when an ACS session requires modifying parameters.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new TR069 Connector bound to the given session</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="TR069Exception" xml:id="org.osgi.service.tr069todmt.TR069Exception">
      <title>public class TR069Exception<?line-break?> extends RuntimeException</title>
      <para>
This exception is defined in terms of applicable TR-069 fault codes. The
 TR-069 specification defines the fault codes that can occur in different
 situations.
   </para>
      <section role="field" xreflabel="INTERNAL_ERROR" xml:id="org.osgi.service.tr069todmt.TR069Exception.INTERNAL_ERROR">
         <title>public static final int INTERNAL_ERROR = 9002</title>
         <para>
9002 Internal error
   </para>
      </section>
      <section role="field" xreflabel="INVALID_ARGUMENTS" xml:id="org.osgi.service.tr069todmt.TR069Exception.INVALID_ARGUMENTS">
         <title>public static final int INVALID_ARGUMENTS = 9003</title>
         <para>
9003 Invalid Arguments
   </para>
      </section>
      <section role="field" xreflabel="INVALID_PARAMETER_NAME" xml:id="org.osgi.service.tr069todmt.TR069Exception.INVALID_PARAMETER_NAME">
         <title>public static final int INVALID_PARAMETER_NAME = 9005</title>
         <para>
9005 Invalid parameter name (associated with Set/GetParameterValues,
 GetParameterNames, Set/GetParameterAttributes, AddObject, and
 DeleteObject)
   </para>
      </section>
      <section role="field" xreflabel="INVALID_PARAMETER_TYPE" xml:id="org.osgi.service.tr069todmt.TR069Exception.INVALID_PARAMETER_TYPE">
         <title>public static final int INVALID_PARAMETER_TYPE = 9006</title>
         <para>
9006 Invalid parameter type (associated with SetParameterValues)
   </para>
      </section>
      <section role="field" xreflabel="INVALID_PARAMETER_VALUE" xml:id="org.osgi.service.tr069todmt.TR069Exception.INVALID_PARAMETER_VALUE">
         <title>public static final int INVALID_PARAMETER_VALUE = 9007</title>
         <para>
9007 Invalid parameter value (associated with SetParameterValues)
   </para>
      </section>
      <section role="field" xreflabel="METHOD_NOT_SUPPORTED" xml:id="org.osgi.service.tr069todmt.TR069Exception.METHOD_NOT_SUPPORTED">
         <title>public static final int METHOD_NOT_SUPPORTED = 9000</title>
         <para>
9000 Method not supported
   </para>
      </section>
      <section role="field" xreflabel="NON_WRITABLE_PARAMETER" xml:id="org.osgi.service.tr069todmt.TR069Exception.NON_WRITABLE_PARAMETER">
         <title>public static final int NON_WRITABLE_PARAMETER = 9008</title>
         <para>
9008 Attempt to set a non-writable parameter (associated with
 SetParameterValues)
   </para>
      </section>
      <section role="field" xreflabel="NOTIFICATION_REJECTED" xml:id="org.osgi.service.tr069todmt.TR069Exception.NOTIFICATION_REJECTED">
         <title>public static final int NOTIFICATION_REJECTED = 9009</title>
         <para>
9009 Notification request rejected (associated with
 SetParameterAttributes method).
   </para>
      </section>
      <section role="field" xreflabel="REQUEST_DENIED" xml:id="org.osgi.service.tr069todmt.TR069Exception.REQUEST_DENIED">
         <title>public static final int REQUEST_DENIED = 9001</title>
         <para>
9001 Request denied (no reason specified
   </para>
      </section>
      <section role="field" xreflabel="RESOURCES_EXCEEDED" xml:id="org.osgi.service.tr069todmt.TR069Exception.RESOURCES_EXCEEDED">
         <title>public static final int RESOURCES_EXCEEDED = 9004</title>
         <para>
9004 Resources exceeded (when used in association with
 SetParameterValues, this MUST NOT be used to indicate parameters in
 error)
   </para>
      </section>
      <section role="method" xreflabel="TR069Exception(String)" xml:id="org.osgi.service.tr069todmt.TR069Exception.TR069Exception-String-">
         <title>public  TR069Exception(String message)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The message</para>
         </formalpara>
         <para role="description">
A default constructor when only a message is known. This will generate a
 <link linkend="org.osgi.service.tr069todmt.TR069Exception.INTERNAL_ERROR">INTERNAL_ERROR</link> fault.
   </para>
      </section>
      <section role="method" xreflabel="TR069Exception(String,int,DmtException)" xml:id="org.osgi.service.tr069todmt.TR069Exception.TR069Exception-String-int-DmtException-">
         <title>public  TR069Exception(String message,int faultCode,DmtException e)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The message</para>
         </formalpara>
         <formalpara role="parameter">
            <title>faultCode</title>
            <para>The TR-069 defined fault code</para>
         </formalpara>
         <formalpara role="parameter">
            <title>e</title>
            <para/>
         </formalpara>
         <para role="description">
A Constructor with a message and a fault code.
   </para>
      </section>
      <section role="method" xreflabel="TR069Exception(String,int)" xml:id="org.osgi.service.tr069todmt.TR069Exception.TR069Exception-String-int-">
         <title>public  TR069Exception(String message,int faultCode)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The message</para>
         </formalpara>
         <formalpara role="parameter">
            <title>faultCode</title>
            <para>The TR-069 defined fault code</para>
         </formalpara>
         <para role="description">
A Constructor with a message and a fault code.
   </para>
      </section>
      <section role="method" xreflabel="TR069Exception(DmtException)" xml:id="org.osgi.service.tr069todmt.TR069Exception.TR069Exception-DmtException-">
         <title>public  TR069Exception(DmtException e)</title>
         <formalpara role="parameter">
            <title>e</title>
            <para>The Dmt Exception</para>
         </formalpara>
         <para role="description">
Create a TR069Exception from a Dmt Exception.
   </para>
      </section>
      <section role="method" xreflabel="getDmtException()" xml:id="org.osgi.service.tr069todmt.TR069Exception.getDmtException--">
         <title>public DmtException getDmtException()</title>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the corresponding Dmt Exception</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getFaultCode()" xml:id="org.osgi.service.tr069todmt.TR069Exception.getFaultCode--">
         <title>public int getFaultCode()</title>
         <para role="description">
Answer the associated TR-069 fault code.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Answer the associated TR-069 fault code.</para>
         </formalpara>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i741499"><title>TR-069 Amendment
      3</title>http://www.broadband-forum.org/technical/download/TR-069_Amendment-3.pdf</bibliomixed>

      <bibliomixed xml:id="i694602"><title>TR-106 Amendment
      3</title>http://www.broadband-forum.org/technical/download/TR-106_Amendment-3.pdf</bibliomixed>

      <bibliomixed xml:id="i731609"><title>XML Schema Part 2: Datatypes Second
      Edition</title>http://www.w3.org/TR/xmlschema-2/</bibliomixed>

      <bibliomixed xml:id="i741562"><title>SOAP
      1.1</title>http://www.w3.org/TR/2000/NOTE- SOAP-20000508</bibliomixed>

      <bibliomixed xml:id="i747814"><title>Extensible Markup Language (XML)
      1.0 (Second
      Edition)</title>http://www.w3.org/TR/2000/WD-xml-2e-20000814#NT-Letter</bibliomixed>

      <bibliomixed xml:id="i799974"><title>Broadband
      Forum</title>http://www.broadband-forum.org/</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="135" revision="$Id: 45c3744f05790eff8f996dbec881006066ad1afb $" version="5" xml:id="service.namespaces" xml:base="../135/service.namespaces.xml">
  <title>Common Namespaces Specification</title>

  <info>
    <releaseinfo xml:id="service.namespaces-version">Version 1.1</releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>A key aspect of the OSGi general dependency model based on
    requirements and capabilities is the concept of a
    <emphasis>Namespace</emphasis>. A Namespace defines the semantics of a
    Requirement-Capability pair. The generic model is defined in the <xref linkend="i1777721"/>. This section defines a number of Namespaces that are
    not part of the <xref linkend="intro.core.release" xrefstyle="template:%t"/> specification. Unless an attribute is
    specifically overridden, all Namespaces inherit the attributes and
    directives of the default Namespace as defined <xref linkend="i1777761"/>.</para>

    <para>Each Namespace is defined with the following items:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Name</emphasis> - the name of an attribute or
        directive</para>
      </listitem>

      <listitem>
        <para><emphasis>Kind</emphasis> - Defines where the attribute or
        directive can be used</para>

        <itemizedlist>
          <listitem>
            <para><code>CA</code> - Capability Attribute</para>
          </listitem>

          <listitem>
            <para><code>CD</code> - Capability Directive</para>
          </listitem>

          <listitem>
            <para><code>RA</code> - Requirement Attribute</para>
          </listitem>

          <listitem>
            <para><code>RD</code> - Requirement Directive</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis>M/O</emphasis> - Mandatory (<code>M</code>) or
        Optional (<code>O</code>)</para>
      </listitem>

      <listitem>
        <para><emphasis>Type</emphasis> - The data type</para>
      </listitem>

      <listitem>
        <para><emphasis>Syntax</emphasis> - Any syntax rules. The syntax
        refers in general to the syntaxes defined in <xref linkend="i1777866"/> and <xref linkend="i1777884"/>.</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Versioning</title>

      <para>In general, capabilities in a Namespace are versioned using
      Semantic Versioning. See <xref linkend="service.namespaces-coresemver"/>. Therefore, a capability will
      specify a single version and a requirement will specify a version range.
      See <xref linkend="service.namespaces-osgi.extender.namespace" xrefstyle="template:%t"/> for an example.</para>

      <para>For some Namespaces, capabilities are not versioned using Semantic
      Versioning. The versioning scheme used in those Namespaces will be
      described in the specification for the Namespace.</para>
    </section>
  </section>

  <section xml:id="service.namespaces-osgi.extender.namespace">
    <title>osgi.extender Namespace</title>

    <para>An <emphasis>Extender</emphasis> is a bundle that uses the life
    cycle events from another bundle, the <emphasis>extendee</emphasis>, to
    extend that bundle's functionality when that bundle is active. It can use
    metadata (headers, or files inside the extendee) to control its
    functionality. Extendees therefore have a dependency on the Extender that
    can be modeled with the <code>osgi.extender</code> Namespace. The
    definition for this Namespace can be found in the following table and the
    <xref linkend="org.osgi.namespace.extender.ExtenderNamespace" xrefstyle="hyperlink"/> class.</para>

    <table pgwide="1">
      <title>osgi.extender Namespace</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="3*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="3*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.extender</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>symbolic-name</code></entry>

            <entry><para>A symbolic name for the extender. These names are
            defined in their respective specifications and should in general
            use the specification top level package name. For example,
            <code>org.acme.foo</code>. The OSGi Alliance reserves names that
            start with "<code>osgi.</code>".</para></entry>
          </row>

          <row>
            <entry><code>version</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>Version</code></entry>

            <entry><code>version</code></entry>

            <entry><para>A version. This version must correspond to the
            specification of the extender.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Specifications for extenders (Blueprint, Declarative Services, etc.)
    should specify the values for these attributes. Extenders that provide
    such a capability should list the packages that they use in their
    specification in the <code>uses</code> directive of that capability to
    ensure class space consistency. For example a Declarative Services
    implementation could declare its capability with the following manifest
    header:</para>

    <programlisting>Provide-Capability: osgi.extender; 
   osgi.extender="osgi.component";
   uses:="org.osgi.service.component";
   version:Version="1.3"</programlisting>

    <para>A bundle that depends on a Declarative Services implementation
    should require such an extender with the following manifest header:</para>

    <programlisting>Require-Capability: osgi.extender;
  filter:="(&amp;(osgi.extender=osgi.component)(version&gt;=1.3)(!(version&gt;=2.0)))"</programlisting>

    <para>Extenders can extend an extendee bundle even if that bundle does not
    require the extender, unless the extender's specification explicitly
    forbids this. It is recommended that an extender should only extend a
    bundle if one of the following is true:</para>

    <itemizedlist>
      <listitem>
        <para>The bundle's wiring has a required wire for at least one
        <code>osgi.extender</code> capability with the name of the extender
        and the first of these required wires is wired to the extender.</para>
      </listitem>

      <listitem>
        <para>The bundle's wiring has no required wire for an
        <code>osgi.extender</code> capability with the name of the
        extender.</para>
      </listitem>
    </itemizedlist>

    <para>Otherwise, the extender should not extend the bundle.</para>

    <section>
      <title>Extenders and Framework Hooks</title>

      <para>The Framework provides a number of hooks that allow groups of
      bundles to be scoped. For example, the <emphasis>Subsystem Service
      Specification</emphasis>. An extender may want to extend the complete
      set of bundles installed in the Framework even when extendee bundles are
      hidden from the extender. The system bundle context provides a complete
      view of the bundles and services available in the Framework even if
      Framework hooks are used to scope groups of bundles. The system bundle
      context can be used by an extender to track all bundles installed in the
      Framework regardless of how Framework hooks are used to scope groups of
      bundles. This is useful in scenarios where several scoped groups contain
      bundles that require an extender. Instead of requiring an extender to be
      installed in each scoped group of bundles, a single extender that uses
      the system bundle context to track extendees can be installed to extend
      all scoped groups of bundles.</para>
    </section>
  </section>

  <section xml:id="service.namespaces-osgi.contract.namespace">
    <title>osgi.contract Namespace</title>

    <para>Products or technologies often have a number of related APIs
    consisting of a large set of packages. Some IDEs have not optimized for
    OSGi and requires work for each imported package. In these development
    environments using modularized systems tends to require a significant
    amount of manual effort to manage the imported packages.</para>

    <para>The <code>osgi.contract</code> Namespace addresses this IDE
    deficiency. It allows a developer to specify a single name and version for
    a contract that can then be expanded to a potentially large number of
    packages. For example, a developer can then specify a dependency on Java
    Enterprise Edition 6 contract that can be provided by an application
    server.</para>

    <para>The <code>osgi.contract</code> Namespace provides such a name and
    binds it to a set of packages with the uses constraint. The bundle that
    declares this contract must then import or export each of the listed
    packages with the correct versioning. Such a bundle is called a
    <emphasis>contract bundle</emphasis>. The contract bundle must ensure that
    it is bound to the correct versions of the packages contained within the
    contract it is providing. If the contract bundle imports the packages
    which are specified as part of the contract then proper matching
    attributes must be used to make sure it is bound to the correct versions
    of the packages.</para>

    <para>Additionally, the <code>osgi.contract</code> Namespace can be used
    in cases where API is defined by parties that do not use Semantic
    Versioning. In those cases, the version of the exported package can be
    unclear and so it is difficult to specify a meaningful version range for
    the package import. In such cases, importing the package
    <emphasis>without</emphasis> specifying a version range and specifying a
    requirement in the <code>osgi.contract</code> Namespace can provide a way
    to create portable bundles that use the API. OSGi has defined contract
    names for a number of such APIs. See <xref linkend="service.namespaces-portable.java.contracts.ref"/> for more
    information.</para>

    <para>An <code>osgi.contract</code> capability can then be used in the
    following ways:</para>

    <itemizedlist>
      <listitem>
        <para>IDEs can use the information in the <code>uses</code> directive
        to make all those packages available on the build path. In this case
        the developer no longer has to specify each package separately.</para>
      </listitem>

      <listitem>
        <para>During run time the <code>uses</code> clause is used to enforce
        that all packages in the contract form a consistent class
        space.</para>
      </listitem>
    </itemizedlist>

    <para>The <code>uses</code> directive will make it impossible to get wired
    to packages that are not valid for the contract. Since the uses constrains
    enforce the consistency, it is in principle not necessary to version the
    imported packages on client bundles since only the correctly versioned
    packages can be used. Contracts are aggregates and therefore make clients
    depend on the whole and all their transitive dependencies, even if the
    client only uses a single package of the contract.</para>

    <para>The recommended way of using contracts is to create a contract
    bundle that provides the <code>osgi.contract</code> capability and imports
    the packages with their required version range. For example:</para>

    <programlisting>Provide-Capability: osgi.contract;
    osgi.contract=JavaServlet;
    version:Version=2.5;
    uses:="javax.servlet,javax.servlet.http"
Export-Package:
    javax.servlet;      version="2.5",
    javax.servlet.http; version="2.5"</programlisting>

    <para>A contract may support multiple versions of a named contract. Such a
    contract must use a single capability for the contract name that specifies
    a list of all the versions that are supported. For example, the
    JavaServlet 3.1 contract capability would be specified with the
    following:</para>

    <programlisting>Provide-Capability: osgi.contract;
    osgi.contract=JavaServlet;
    version:List&lt;Version&gt;="2.5,3.0,3.1";
    uses:=
        "javax.servlet,
        javax.servlet.annotation,
        javax.servlet.descriptor,
        javax.servlet.http"
Export-Package:
    javax.servlet;            version="3.1",
    javax.servlet.annotation; version="3.1",
    javax.servlet.descriptor; version="3.1",
    javax.servlet.http;       version="3.1"</programlisting>

    <para>A client bundle that requires the Servlet 2.5 contract can then have
    the following manifest:</para>

    <programlisting>Require-Capability: osgi.contract;
    filter:="(&amp;(osgi.contract=JavaServlet)(version=2.5))",
Import-Package:
    javax.servlet, javax.servlet.http</programlisting>

    <para>The client bundle will be constrained by the contract's uses
    constraints and automatically gets the correct packages. In this example,
    no semantic versioning is used for the contract because the Servlet
    Specifications do not use semantic versioning (version 3.0 is backward
    compatible with 2.X).</para>

    <para>In this model it is even possible to use the normally not
    recommended DynamicImport-Package header with a wild card since also this
    header is constrained by the uses constraints. However, using a full
    wildcard can also dynamically import packages that are not part of the
    contract. To prevent these unwanted dynamic imports, the exporter could
    include an attribute on the exports. For example:</para>

    <programlisting>Require-Capability: osgi.contract;
    filter:="(&amp;(osgi.contract=JavaServlet)(version=2.5))"
DynamicImport-Package: 
    *;JavaServlet=contract</programlisting>

    <para>However, this model requires the exporter to specify an agreed
    attribute. The contract bundle does not require such coordination; it also
    allows the package exporters to reside in different and unrelated
    bundles.</para>

    <para>The definition of the <code>osgi.contract</code> Namespace is in the
    following table and in the <xref linkend="org.osgi.namespace.contract.ContractNamespace" xrefstyle="hyperlink"/> class. See <xref linkend="service.namespaces-portable.java.contracts.ref"/>.</para>

    <table pgwide="1">
      <title>osgi.contract Namespace</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="2.5*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="3.5*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.contract</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>symbolic-name</code></entry>

            <entry><para>A symbolic name for the contract.</para></entry>
          </row>

          <row>
            <entry><code>version</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>Version+</code></entry>

            <entry><code>version</code></entry>

            <entry><para>A list of versions for the contract. A contract that
            supports multiple versions must use a single capability with a
            version attribute that lists all versions
            supported.</para></entry>
          </row>

          <row>
            <entry><code>uses</code></entry>

            <entry><code>CD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><para><code>package-name</code></para><para><code>( ','
            package-name )</code></para></entry>

            <entry><para>For a contract, the standard uses clause is used to
            indicate which packages are part of the contract. The imports or
            exports of those packages link these packages to a particular
            version.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <section>
      <title>Versioning</title>

      <para>As the <code>osgi.contract</code> Namespace follows the versioning
      of the associated contract, capabilities in this Namespace are
      <emphasis>not</emphasis> semantically versioned. The associated
      contracts are often versioned using marketing or other versioning
      schemes and therefore the version number cannot be used as an indication
      of backwards compatibility.</para>

      <para>As a result, capabilities in the <code>osgi.contract</code>
      Namespace use a <emphasis>discrete</emphasis> versioning scheme. In such
      a versioning scheme, each version is treated as separate without any
      implied relation to another version. A capability lists
      <emphasis>all</emphasis> compatible versions. A requirement only selects
      a single version.</para>
    </section>
  </section>

  <section xml:id="service.namespaces-osgi.service.namespace">
    <title>osgi.service Namespace</title>

    <para>The Service Namespace is intended to be used for:</para>

    <itemizedlist>
      <listitem>
        <para>Preventing a bundle from resolving if there is not at least one
        bundle that potentially can register a specific service.</para>
      </listitem>

      <listitem>
        <para>Providing a hint to the provisioning agent that the bundle
        requires a given service.</para>
      </listitem>

      <listitem>
        <para>Used as template for specifications like Blueprint and
        Declarative Services to express their provided and referenced services
        in the Repository model, see the <emphasis>Repository Service
        Specification</emphasis>.</para>
      </listitem>
    </itemizedlist>

    <para>A bundle providing this capability indicates that it can register
    such a service with at least the given custom attributes as service
    properties. At resolve time this is a promise since there is no guarantee
    that during runtime the bundle will actually register such a service;
    clients must handle this with the normal runtime dependency managers like
    Blueprint, Declarative Services, or others.</para>

    <para>See the following table and the <xref linkend="org.osgi.namespace.service.ServiceNamespace" xrefstyle="hyperlink"/> class for this Namespace definition.</para>

    <table pgwide="1">
      <title>osgi.service Namespace</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="3*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="3*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>objectClass</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><para><code>List</code></para><para><code>&lt;String&gt;</code></para></entry>

            <entry><para><code>qname</code></para><para><code>(','
            qname)*</code></para></entry>

            <entry><para>The fully qualified name of the object class of the
            service.</para></entry>
          </row>

          <row>
            <entry><code>*</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>*</code></entry>

            <entry><code>*</code></entry>

            <entry><para>Custom attributes that will be provided as service
            properties if they do not conflict with the service properties
            rules and are not private service properties. Private properties
            start with a full
            stop (<code>'.' \u002E</code>).</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <section>
      <title>Versioning</title>

      <para>Capabilities in the <code>osgi.service</code> Namespace are
      <emphasis>not</emphasis> versioned. The package of a service's object
      class is generally versioned and the package can be associated with the
      capability via the <code>uses</code> directive.</para>
    </section>
  </section>

  <section xml:id="service.namespaces-osgi.implementation.namespace">
    <title>osgi.implementation Namespace</title>

    <para>The Implementation Namespace is intended to be used for:</para>

    <itemizedlist>
      <listitem>
        <para>Preventing a bundle from resolving if there is not at least one
        bundle that provides an implementation of the specified specification
        or contract.</para>
      </listitem>

      <listitem>
        <para>Providing uses constraints to ensure that bundles which require
        an implementation of a specification or contract will be wired
        appropriately by the framework.</para>
      </listitem>

      <listitem>
        <para>Providing a hint to the provisioning agent that the bundle
        requires a given specification or contract implementation.</para>
      </listitem>

      <listitem>
        <para>Used as a general capability Namespace for specifications or
        contracts to express their provided function in the Repository model,
        see the <emphasis>Repository Service Specification</emphasis>.</para>
      </listitem>
    </itemizedlist>

    <para>A bundle providing this capability indicates that it implements a
    specification or contract with the specified name and version. For
    example, the <emphasis>Asynchronous Service Specification</emphasis> would
    provide the following capability:</para>

    <programlisting>Provide-Capability: osgi.implementation;
    osgi.implementation="osgi.async";
    version:Version="1.0";
    uses:="org.osgi.service.async"</programlisting>

    <para>See the following table and the <xref linkend="org.osgi.namespace.implementation.ImplementationNamespace" xrefstyle="hyperlink"/> class for this Namespace definition.</para>

    <table pgwide="1">
      <title>osgi.implementation Namespace</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="3.5*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="2.5*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.implementation</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><para><code>String</code></para></entry>

            <entry><para><code>symbolic-name</code></para></entry>

            <entry><para>The symbolic name of the specification or contract.
            The OSGi Alliance reserves names that start with
            "<code>osgi.</code>".</para></entry>
          </row>

          <row>
            <entry><code>version</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><para><code>Version</code></para></entry>

            <entry><para><code>version</code></para></entry>

            <entry><para>The version of the implemented specification or
            contract. </para></entry>
          </row>

          <row>
            <entry><code>*</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>*</code></entry>

            <entry><code>*</code></entry>

            <entry><para>Custom attributes that can be used to further
            identify the implementation</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.namespace.contract" xml:id="org.osgi.namespace.contract" xml:base="../../generated/javadoc/docbook/org.osgi.namespace.contract.xml">
   <title>org.osgi.namespace.contract</title>
   <info>
      <releaseinfo xml:id="org.osgi.namespace.contract-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.namespace.contract-version.number">1.0</edition>
   </info>
   <para>
Contract Namespace Package Version 1.0.
 
 </para>
   <para>
 Bundles should not need to import this package at runtime since all
 the types in this package just contain constants for capability and 
 requirement namespaces specified by the OSGi Alliance.</para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.namespace.contract.ContractNamespace">
                  <code>ContractNamespace</code>
               </link> - 
Contract Capability and Requirement Namespace.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="ContractNamespace" xml:id="org.osgi.namespace.contract.ContractNamespace">
      <title>public final class ContractNamespace<?line-break?> extends Namespace</title>
      <para>
Contract Capability and Requirement Namespace.
 
 </para>
      <para>
 This class defines the names for the attributes and directives for this
 namespace. All unspecified capability attributes are of type <code>String</code>
 and are used as arbitrary matching attributes for the capability. The values
 associated with the specified directive and attribute keys are of type
 <code>String</code>, unless otherwise indicated.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="CAPABILITY_VERSION_ATTRIBUTE" xml:id="org.osgi.namespace.contract.ContractNamespace.CAPABILITY_VERSION_ATTRIBUTE">
         <title>public static final String CAPABILITY_VERSION_ATTRIBUTE = "version"</title>
         <para>
The capability attribute contains the <code>Version</code> of the
 specification of the contract. The value of this attribute must be of
 type <code>Version</code>.
   </para>
      </section>
      <section role="field" xreflabel="CONTRACT_NAMESPACE" xml:id="org.osgi.namespace.contract.ContractNamespace.CONTRACT_NAMESPACE">
         <title>public static final String CONTRACT_NAMESPACE = "osgi.contract"</title>
         <para>
Namespace name for contract capabilities and requirements.
 
 </para>
         <para>
 Also, the capability attribute used to specify the name of the contract.</para>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.namespace.extender" xml:id="org.osgi.namespace.extender" xml:base="../../generated/javadoc/docbook/org.osgi.namespace.extender.xml">
   <title>org.osgi.namespace.extender</title>
   <info>
      <releaseinfo xml:id="org.osgi.namespace.extender-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.namespace.extender-version.number">1.0</edition>
   </info>
   <para>
Extender Namespace Package Version 1.0.
 
 </para>
   <para>
 Bundles should not need to import this package at runtime since all
 the types in this package just contain constants for capability and 
 requirement namespaces specified by the OSGi Alliance.</para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.namespace.extender.ExtenderNamespace">
                  <code>ExtenderNamespace</code>
               </link> - 
Extender Capability and Requirement Namespace.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="ExtenderNamespace" xml:id="org.osgi.namespace.extender.ExtenderNamespace">
      <title>public final class ExtenderNamespace<?line-break?> extends Namespace</title>
      <para>
Extender Capability and Requirement Namespace.
 
 </para>
      <para>
 This class defines the names for the attributes and directives for this
 namespace. All unspecified capability attributes are of type <code>String</code>
 and are used as arbitrary matching attributes for the capability. The values
 associated with the specified directive and attribute keys are of type
 <code>String</code>, unless otherwise indicated.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="CAPABILITY_VERSION_ATTRIBUTE" xml:id="org.osgi.namespace.extender.ExtenderNamespace.CAPABILITY_VERSION_ATTRIBUTE">
         <title>public static final String CAPABILITY_VERSION_ATTRIBUTE = "version"</title>
         <para>
The capability attribute contains the <code>Version</code> of the
 specification of the extender. The value of this attribute must be of
 type <code>Version</code>.
   </para>
      </section>
      <section role="field" xreflabel="EXTENDER_NAMESPACE" xml:id="org.osgi.namespace.extender.ExtenderNamespace.EXTENDER_NAMESPACE">
         <title>public static final String EXTENDER_NAMESPACE = "osgi.extender"</title>
         <para>
Namespace name for extender capabilities and requirements.
 
 </para>
         <para>
 Also, the capability attribute used to specify the name of the extender.</para>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.namespace.service" xml:id="org.osgi.namespace.service" xml:base="../../generated/javadoc/docbook/org.osgi.namespace.service.xml">
   <title>org.osgi.namespace.service</title>
   <info>
      <releaseinfo xml:id="org.osgi.namespace.service-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.namespace.service-version.number">1.0</edition>
   </info>
   <para>
Service Namespace Package Version 1.0.
 
 </para>
   <para>
 Bundles should not need to import this package at runtime since all
 the types in this package just contain constants for capability and 
 requirement namespaces specified by the OSGi Alliance.</para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.namespace.service.ServiceNamespace">
                  <code>ServiceNamespace</code>
               </link> - 
Service Capability and Requirement Namespace.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="ServiceNamespace" xml:id="org.osgi.namespace.service.ServiceNamespace">
      <title>public final class ServiceNamespace<?line-break?> extends Namespace</title>
      <para>
Service Capability and Requirement Namespace.
 
 </para>
      <para>
 This class defines the names for the attributes and directives for this
 namespace.
 
 </para>
      <para>
 All unspecified capability attributes are of one of the following types:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <code>String</code>
            </para>
         </listitem>
         <listitem>
            <para>
               <code>Version</code>
            </para>
         </listitem>
         <listitem>
            <para>
               <code>Long</code>
            </para>
         </listitem>
         <listitem>
            <para>
               <code>Double</code>
            </para>
         </listitem>
         <listitem>
            <para>
               <code>List&lt;String&gt;</code>
            </para>
         </listitem>
         <listitem>
            <para>
               <code>List&lt;Version&gt;</code>
            </para>
         </listitem>
         <listitem>
            <para>
               <code>List&lt;Long&gt;</code>
            </para>
         </listitem>
         <listitem>
            <para>
               <code>List&lt;Double&gt;</code>
            </para>
         </listitem>
      </itemizedlist>
      <para>
 and are used as arbitrary matching attributes for the capability. The values
 associated with the specified directive and attribute keys are of type
 <code>String</code>, unless otherwise indicated.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="CAPABILITY_OBJECTCLASS_ATTRIBUTE" xml:id="org.osgi.namespace.service.ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE">
         <title>public static final String CAPABILITY_OBJECTCLASS_ATTRIBUTE = "objectClass"</title>
         <para>
The capability attribute used to specify the types of the service. The
 value of this attribute must be of type <code>List&lt;String&gt;</code>.
 
 </para>
         <para>
 A <code>ServiceNamespace</code> capability should express a
 <link linkend="org.osgi.resource.Namespace.CAPABILITY_USES_DIRECTIVE">uses constraint</link> for all the
 packages mentioned in the value of this attribute.</para>
      </section>
      <section role="field" xreflabel="SERVICE_NAMESPACE" xml:id="org.osgi.namespace.service.ServiceNamespace.SERVICE_NAMESPACE">
         <title>public static final String SERVICE_NAMESPACE = "osgi.service"</title>
         <para>
Namespace name for service capabilities and requirements.
   </para>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.namespace.implementation" xml:id="org.osgi.namespace.implementation" xml:base="../../generated/javadoc/docbook/org.osgi.namespace.implementation.xml">
   <title>org.osgi.namespace.implementation</title>
   <info>
      <releaseinfo xml:id="org.osgi.namespace.implementation-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.namespace.implementation-version.number">1.0</edition>
   </info>
   <para>
Implementation Namespace Package Version 1.0.
 
 </para>
   <para>
 Bundles should not need to import this package at runtime since all
 the types in this package just contain constants for capability and 
 requirement namespaces specified by the OSGi Alliance.</para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.namespace.implementation.ImplementationNamespace">
                  <code>ImplementationNamespace</code>
               </link> - 
Implementation Capability and Requirement Namespace.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="ImplementationNamespace" xml:id="org.osgi.namespace.implementation.ImplementationNamespace">
      <title>public final class ImplementationNamespace<?line-break?> extends Namespace</title>
      <para>
Implementation Capability and Requirement Namespace.
 
 </para>
      <para>
 This class defines the names for the attributes and directives for this
 namespace.
 
 </para>
      <para>
 This class defines the names for the attributes and directives for this
 namespace. All unspecified capability attributes are of type <code>String</code>
 and are used as arbitrary matching attributes for the capability. The values
 associated with the specified directive and attribute keys are of type
 <code>String</code>, unless otherwise indicated.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="CAPABILITY_VERSION_ATTRIBUTE" xml:id="org.osgi.namespace.implementation.ImplementationNamespace.CAPABILITY_VERSION_ATTRIBUTE">
         <title>public static final String CAPABILITY_VERSION_ATTRIBUTE = "version"</title>
         <para>
The capability attribute contains the <code>Version</code> of the
 specification or contract being implemented. The value of this attribute
 must be of type <code>Version</code>.
   </para>
      </section>
      <section role="field" xreflabel="IMPLEMENTATION_NAMESPACE" xml:id="org.osgi.namespace.implementation.ImplementationNamespace.IMPLEMENTATION_NAMESPACE">
         <title>public static final String IMPLEMENTATION_NAMESPACE = "osgi.implementation"</title>
         <para>
Namespace name for "implementation" capabilities and requirements.
 
 This is also the capability attribute used to specify the name of the
 specification or contract being implemented.
 
 </para>
         <para>
 A <code>ImplementationNamespace</code> capability should express a
 <link linkend="org.osgi.resource.Namespace.CAPABILITY_USES_DIRECTIVE">uses constraint</link> for the
 appropriate packages defined by the specification/contract the packages
 mentioned in the value of this attribute.</para>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i1772882"><title>Specification
      References</title>http://www.osgi.org/Specifications/Reference</bibliomixed>

      <bibliomixed xml:id="service.namespaces-portable.java.contracts.ref"><title>Portable
      Java Contract
      Definitions</title>http://www.osgi.org/Specifications/ReferenceContract</bibliomixed>

      <bibliomixed xml:id="i1777721"><title>Resources API
      Specification</title>OSGi Core, Chapter 6 Resource API
      Specification</bibliomixed>

      <bibliomixed xml:id="i1777761"><title>Framework Namespaces
      Specification</title>OSGi Core, Chapter 8 Framework Namespaces
      Specification</bibliomixed>

      <bibliomixed xml:id="i1777866"><title>General Syntax
      Definitions</title>OSGi Core, General Syntax Definitions</bibliomixed>

      <bibliomixed xml:id="i1777884"><title>Common Headers</title>OSGi Core,
      Chapter 3, Common Header Syntax</bibliomixed>

      <bibliomixed xml:id="service.namespaces-coresemver"><title>Semantic
      Versioning</title>OSGi Core, Chapter 3, Semantic
      Versioning</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="139" revision="$Id: c9d0b7e96309ed3981be2c8871a9a8e6b064cd97 $" version="5" xml:id="service.enocean" xml:base="../139/service.enocean.xml">
  <title>EnOcean Device Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.enocean-version" linkend="org.osgi.service.enocean"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>EnOcean is a standard wireless communication protocol designed for
    low-cost and low-power devices by EnOcean Alliance.</para>

    <para>EnOcean is widely supported by various types of devices such as
    smart meters, lights and many kinds of sensors in the residential area.
    OSGi applications need to communicate with those EnOcean devices. This
    specification defines how OSGi bundles can be developed to discover and
    control EnOcean devices on the one hand, and act as EnOcean devices and
    interoperate with EnOcean clients on the other hand. In particular, a Java
    mapping is provided for the standard representation of EnOcean devices
    called EnOcean Equipment Profile (EEPs). See <xref linkend="service.enocean-bibliomixed_id_20140602_17h03_10_5"/>.</para>

    <para>The specification also describes the external API of an EnOcean Base
    Driver according to Device Access specification.</para>
  </section>

  <section>
    <title>Essentials</title>

    <itemizedlist>
      <listitem>
        <para><emphasis role="italic">Scope</emphasis> - This specification is
        limited to general device discovery and control aspects of the
        standard EnOcean specifications. Aspects concerning the representation
        of specific or proprietary EnOcean profiles is not addressed.</para>
      </listitem>

      <listitem>
        <para><emphasis>Transparency</emphasis> - EnOcean devices discovered
        on the network and devices locally implemented on the platform are
        represented in the OSGi service registry with the same API.</para>
      </listitem>

      <listitem>
        <para><emphasis>Lightweight implementation option</emphasis> - The
        full description of EnOcean device services on the OSGi platform is
        optional. Some base driver implementations may implement all the
        classes including EnOcean device description classes while
        Implementations targeting constrained devices are able to implement
        only the part that is necessary for EnOcean device discovery and
        control.</para>
      </listitem>

      <listitem>
        <para><emphasis>Network Selection</emphasis> - It must be possible to
        restrict the use of the EnOcean protocols to a selection of the
        connected devices.</para>
      </listitem>

      <listitem>
        <para><emphasis>Event handling</emphasis> - Bundles are able to listen
        to EnOcean events.</para>
      </listitem>

      <listitem>
        <para><emphasis>Discover and control EnOcean devices as OSGi services
        </emphasis> - Available learned (via an EnOcean teach-in procedure)
        EnOcean external endpoints are dynamically reified as OSGi services on
        the service registry upon discovery.</para>
      </listitem>

      <listitem>
        <para><emphasis>OSGi services as exported EnOcean devices</emphasis> -
        OSGi services implementing the API defined here and explicitly set to
        be exported should be made available to networks with EnOcean-enabled
        endpoints in a transparent way.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Entities</title>

    <itemizedlist>
      <listitem>
        <para><emphasis>EnOcean Base Driver</emphasis> - The bundle that
        implements the bridge between OSGi and EnOcean networks, see <xref linkend="service.enocean-figure_id_20140603_11h12_46" xrefstyle="template:Figure %n on page %p"/>. It is responsible for
        accessing the various EnOcean gateway chips on the execution machine,
        and ensures the reception and translation of EnOcean messages into
        proper objects. It is also used to send messages on the EnOcean
        network, using whatever chip it deems most appropriate.</para>
      </listitem>

      <listitem>
        <para><emphasis>EnOcean Host</emphasis> - The EnOceanHost object is a
        link between the software and the EnOcean network. It represents the
        chip configuration (gateway capabilities) described in <xref linkend="service.enocean-bibliomixed_id_20140602_17h03_46_9"/>. It is
        registered as an OSGi service.</para>
      </listitem>

      <listitem>
        <para><emphasis>EnOcean Device</emphasis> - An EnOcean device. This
        entity is represented by a EnOceanDevice interface and registered as a
        service within the framework. It carries the unique chip ID of the
        device, and may represent either an imported or exported device, which
        may be a pure transmitter or a transceiver.</para>
      </listitem>

      <listitem>
        <para><emphasis>EnOcean Message</emphasis> - Every EnOcean reporting
        equipment is supposed to follow a “profile”, which is essentially the
        way the emitted data is encoded. In order to reflect this standard as
        it is defined in <xref linkend="service.enocean-bibliomixed_id_20140602_17h03_10_5"/>,
        manufacturers are able to register the description of “Messages”, the
        essence of a profile, along with their associated payload (as
        Channels). See “EnOcean Channels” below for more information.</para>
      </listitem>

      <listitem>
        <para><emphasis>EnOcean Channel</emphasis> - EnOcean channels are
        available as an array inside EnOceanMessage objects. They are a useful
        way to define any kind of payload that would be put inside of an
        EnOcean Message.</para>

        <para>EnOcean Messages and their associated Channels can be described
        with EnOceanMessageDescription and EnOceanChannelDescription
        interfaces. Description providers aggregate these descriptions in sets
        that they register with EnOceanMessageDescriptionSet and
        EnOceanChannelDescriptionSet interfaces within the framework.</para>
      </listitem>

      <listitem>
        <para><emphasis>EnOcean RPC</emphasis> - An interface that enables the
        invocation of vendor-specific Remote Procedure Calls and Remote
        Management Commands. These are particular types of Messages and are
        not linked to any EnOcean Profile, so that their descriptions are
        defined and registered in another way. The RPCs are documented via the
        EnOceanRPCDescription objects gathered into registered
        EnOceanRPCDescriptionSet services.</para>
      </listitem>

      <listitem>
        <para><emphasis>EnOcean Handler</emphasis> - Enables clients to
        asynchronously get answers to their RPCs.</para>
      </listitem>

      <listitem>
        <para><emphasis>EnOcean Client</emphasis> - An application that is
        intended to control EnOcean device services.</para>
      </listitem>

      <listitem>
        <para><emphasis>EnOcean Exception</emphasis> - Delivers errors during
        EnOceanMessage serialization/deserialization or during execution
        outside transmission.</para>
      </listitem>
    </itemizedlist>

    <figure xml:id="service.enocean-figure_id_20140603_11h12_46">
      <title>EnOcean Service Specification class diagram.</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="3.5in" contentwidth="5.000in" fileref="enocean_service_specification_class_diagram_RFC_EnOcean_ClassDiagram_Rev18.svg"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section>
    <title>Operation Summary</title>

    <para>To make an EnOcean device service available to EnOcean clients on
    the OSGi platform, it must be registered under the EnOceanDevice interface
    within the OSGi framework.</para>

    <para>The EnOcean Base Driver is responsible for mapping external devices
    into EnOceanDevice objects, through the use of an EnOcean gateway. See
    <xref linkend="service.enocean-bibliomixed_id_20140602_17h02_51_3"/>. The
    latter is represented on OSGi framework as an object implementing
    EnOceanHost interface. EnOcean “teach-in” messages will trigger this
    behavior, this is called a device import situation, see <xref linkend="service.enocean-figure_id_20140603_11h32_54" xrefstyle="template:Figure %n on page %p"/>.</para>

    <figure xml:id="service.enocean-figure_id_20140603_11h32_54">
      <title>EnOcean device import.</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.5in" contentwidth="5.000in" fileref="enocean_device_import_DeviceImport-1.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Client bundles may also expose framework-internal (local)
    EnOceanDevice instances, registered within the framework, see <xref linkend="service.enocean-figure_id_20140603_11h43_01" xrefstyle="template:Figure %n on page %p"/>. The Base Driver then should
    emulate those objects as EnOcean devices on the EnOcean network. This is a
    device export situation, made possible by the use of the 127 virtual base
    IDs available on an EnOcean gateway. For more information about this
    process, see <xref linkend="service.enocean-export.enocean.device"/>.</para>

    <figure xml:id="service.enocean-figure_id_20140603_11h43_01">
      <title>EnOcean device export.</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.5in" fileref="enocean_device_export_DeviceExport-1.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>EnOcean clients send RPCs (Remote Procedure Calls) to EnOcean
    devices and receives RPC responses and messages from them. Messages coming
    from EnOcean devices are accessible through Event Admin.</para>

    <para>RPCs and messages content are specified by EnOcean Alliance or
    vendor-specific descriptions. Those descriptions may be provided on the
    OSGi platform by any bundle through the registration of
    EnOceanRPCDescriptionSet, EnOceanMessageDescriptionSet and
    EnOceanChannelDescriptionSet services. Every service is a set of
    description that enables applications to retrieve information about
    supported RPCs, messages or channels that compose messages.</para>

    <figure xml:id="service.enocean-figure_id_20140603_11h53_00">
      <title>Using a set of message descriptions.</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.5in" fileref="using_a_set_of_message_descriptions_message_description_set.svg"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section>
    <title>EnOcean Base Driver</title>

    <para>Most of the functionality described in the operation summary is
    implemented in an EnOcean base driver. This bundle implements the EnOcean
    protocol and handles the interaction with bundles that use the EnOcean
    devices. An EnOcean base driver is able to discover EnOcean devices on the
    network and map each discovered device into an OSGi registered
    EnOceanDevice service. It is also the receptor, through EventAdmin service
    and OSGi service registry, of all the events related to local devices and
    clients. It enables bidirectional communication for RPC and Channel
    updates.</para>

    <para>Several base drivers may be deployed on a residential OSGi device,
    one for every supported network technology. An OSGi device abstraction
    layer may then be implemented as a layer of refinement drivers above a
    layer of base drivers. The refinement driver is responsible for adapting
    technology-specific device services registered by the base driver into
    device services of another model, see AbstractDevice interface in <xref linkend="service.enocean-figure_id_20140603_14h51_11" xrefstyle="template:Figure %n on page %p"/>. In the case of a generic
    device abstraction layer, the model is agnostic to technologies.</para>

    <para>The EnOcean Alliance defines their own abstract model with EnOcean
    Equipment Profiles and refinement drivers may provide the implementation
    of all EEPs with EnOcean specific Java interfaces. The AbstractDevice
    interface of <xref linkend="service.enocean-figure_id_20140603_14h51_11" xrefstyle="template:Figure %n on page %p"/> is then replaced by an EEP
    specific Java interface in that case. The need and the choice of the
    abstraction depends on the targeted application domain.</para>

    <figure xml:id="service.enocean-figure_id_20140603_14h51_11">
      <title>EnOcean Base Driver and a refinement driver representing devices
      in an abstract model.</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.5in" contentwidth="5.000in" fileref="enocean_base_driver_and_a_refinement_driver_representing_devices_in_an_abstract_model_RefinedDriver-2.svg"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section>
    <title>EnOcean Host</title>

    <para>The EnOcean host represents an EnOcean gateway chip. Any EnOcean
    device service implementation should rely on at least one Gateway Chip in
    order to send and receive messages on the external EnOcean network. This
    interface enables standard control over an EnOcean compatible chip. Every
    EnOceanHost object should at least be identified by its unique chip
    ID.</para>

    <para>The EnOceanHost interface enables OSGi applications to:</para>

    <itemizedlist>
      <listitem>
        <para>Get or set gateway metadata (version, name, etc);</para>
      </listitem>

      <listitem>
        <para>Reset the gateway chip device;</para>
      </listitem>

      <listitem>
        <para>Retrieve a chip ID (derived from EnOcean's BASE_ID) for the
        given Service PID of a device.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>EnOcean Device</title>

    <section>
      <title>Generics</title>

      <para>A physical EnOcean device is reified as an <xref linkend="org.osgi.service.enocean.EnOceanDevice" xrefstyle="hyperlink"/>
      object within the framework.</para>

      <para>An EnOcean device holds most of the natural properties for an
      EnOcean object: its unique ID, the profile, a friendly name, its
      security information, and its available RPCs – along with the associated
      getters (and setters when applicable). All those properties MUST be
      persistent across restart so that teach-in procedures are made only
      once.</para>

      <para>It also holds methods that reflect the natural actions a user
      application may physically trigger on such a device: send a message to
      the device, send a teach-in message to the device, or switch the device
      to learning mode.</para>

      <para>Every EnOcean Device keeps a service PID property that is assigned
      either by the base driver or by any service-exporting bundle. The
      property value format is free and the value must be unique on the
      framework.</para>

      <para>The properties on which EnOceanDevice services can be filtered on
      are: the device's service PID and chip ID, and its profile identifiers
      (RORG / FUNC / TYPE integers).</para>

      <para>The EnOceanDevice also keeps security features as defined in the
      EnOcean Security Draft, <xref linkend="service.enocean-bibliomixed_id_20140602_17h03_46_9"/>, which
      allow for a security level format (integer mask), an encryption key
      and/or a rolling authentication code.</para>

      <para>The EnOceanDevice service MUST also be registered with the
      <code>DEVICE_CATEGORY</code> service property, see <xref linkend="service.device-device.service.registration"/>, that describes a
      array of categories to which the device belongs. One value MUST be
      <code>EnOcean</code> which is specified in <xref linkend="org.osgi.service.enocean.EnOceanDevice.DEVICE_CATEGORY" xrefstyle="hyperlink"/>.</para>

      <para>Values for the additional service properties,
      <code>DEVICE_DESCRIPTION</code>, <code>DEVICE_SERIAL</code> as defined
      in <xref linkend="service.device-device.service.registration"/>, are not
      specified here as no description nor application-level serial number are
      provided in the EnOcean standard protocol.</para>
    </section>

    <section>
      <title>Import Situation</title>

      <para>In import situations, the device's chip ID is uniquely set by the
      Base Driver, according to the one present in the teach-in message that
      originated the Device's creation. The service PID, see <xref linkend="service.enocean-reference.service.pid"/>, should also be
      generated and deterministically derived from the chip ID to allow
      reconstruction of a device without a new teach-in process after a
      framework restart.</para>
    </section>

    <section xml:id="service.enocean-export.enocean.device">
      <title>Export Situation</title>

      <para>In export situations:</para>

      <orderedlist>
        <listitem>
          <para>The registering Client bundle sets the service PID of the
          EnOceanDevice object by itself, in a unique manner, and registers
          that object.</para>
        </listitem>

        <listitem>
          <para>The chip ID (this device's EnOcean source ID when it issues
          messages) will be allocated by the Base Driver. The latter keeps a
          dictionary of the currently allocated chip IDs. The Client bundle
          must also set an <xref linkend="org.osgi.service.enocean.EnOceanDevice.ENOCEAN_EXPORT" xrefstyle="hyperlink"/> property in the registered device's Property
          Map.</para>
        </listitem>
      </orderedlist>

      <para>The standard way to programmatically retrieve an exported chip ID
      from a given service PID is by using EnOceanHost's dedicated interface
      for this use.</para>

      <para>The Base Driver MUST ensure the persistence of the
      CHIP_ID:SERVICE_PID mapping.</para>

      <para>As an application developer, please refer to the documentation of
      your Base Driver to know its policies concerning exported chip ID
      updating, deletion and exhaustion.</para>
    </section>

    <section>
      <title>Interface</title>

      <para>The EnOceanDevice interface enables client bundles to:</para>

      <itemizedlist>
        <listitem>
          <para>Get or set the security features of the device in a protected
          way;</para>
        </listitem>

        <listitem>
          <para>Retrieve the currently paired devices in the case of a
          receiver, as a collection of device IDs;</para>
        </listitem>

        <listitem>
          <para>Get the ID-based list of currently available RPCs for the
          device, as a Map of {manufacturerID:[functionId1,
          functionId2,...]};</para>
        </listitem>

        <listitem>
          <para>Invoke RPCs onto the device, through the <xref linkend="org.osgi.service.enocean.EnOceanDevice.invoke-EnOceanRPC-EnOceanHandler-" xrefstyle="hyperlink"/> call.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>EnOcean Messages</title>

    <para>EnOcean Messages are at the core of the EnOcean application layer as
    a whole and the EnOcean Equipment Profile specification, <xref linkend="service.enocean-bibliomixed_id_20140602_17h03_10_5"/>, in
    particular. Every exchange of information within EnOcean networks is done
    with a dedicated message. The <xref linkend="org.osgi.service.enocean.EnOceanMessage" xrefstyle="hyperlink"/>
    interface provides a set of getters. The latter enables OSGi applications
    to get the information contained in the payload of an EnOcean message and
    defined as data and optional data of the EnOcean Serial Protocol Type 1
    (RADIO) message (see Table 2 in Section "1.6.1 Packet description" of
    <xref linkend="service.enocean-bibliomixed_id_20140602_17h03_37_8"/>).</para>

    <para>This model enables reading both the EnOcean radio telegram data and
    the associated metadata that may be attached to it in a single object,
    EnOceanMessage.</para>

    <para>In case the 'Optional Data' section gets missing at the lowest level
    (the radio access layer not following ESP protocol for instance) it is the
    responsibility of the Base Driver to mock the missing field's (dBm,
    destinationID, …) values.</para>

    <section>
      <title>Mode of operation</title>

      <para>Any EnOceanMessage object creation will be mirrored to Event
      Admin.</para>

      <para>Details about the available topics, filters and properties can be
      found in <xref linkend="service.enocean-event.api"/>.</para>

      <para>EnOceanMessage objects will be created only if the originating
      device has already been registered in the OSGi Service Registry, along
      with profile information.</para>
    </section>

    <section>
      <title>Identification</title>

      <para>The RORG of a message defines its shape and generic type; all the
      RORGs are defined in the EnOcean Radio Specification.</para>

      <para>An addressed message will be encapsulated into an Addressed
      Telegram (ADT) by the base driver transparently; this means that from
      the application level, it will be represented under its original RORG,
      but with a valid destinationID.</para>

      <para>A particular EnOcean Equipment Profile message is identified by
      three numbers: its RORG, and its FUNC, TYPE and EXTRA subtypes. In
      EnOcean, a (RORG, FUNC, TYPE) triplet is enough to identify a profile;
      though an EXTRA identifier is sometimes needed to identify a particular
      message layout for that profile.</para>

      <para>Those identifiers allow for retrieving <xref linkend="org.osgi.service.enocean.descriptions.EnOceanMessageDescription" xrefstyle="hyperlink"/> objects within a registered <xref linkend="org.osgi.service.enocean.descriptions.EnOceanMessageDescriptionSet" xrefstyle="hyperlink"/>, which give the application more information to
      parse the message.</para>
    </section>

    <section>
      <title>Interface</title>

      <para>The methods available in the <xref linkend="org.osgi.service.enocean.EnOceanMessage" xrefstyle="hyperlink"/> interface are:</para>

      <itemizedlist>
        <listitem>
          <para>Identification methods, retrieving the message's profile,
          sender ID, optional destination ID, status;</para>
        </listitem>

        <listitem>
          <para>A method to get the raw bytes of payload data in the message.
          This data can then be passed to the deserializer of the <xref linkend="org.osgi.service.enocean.descriptions.EnOceanMessageDescription" xrefstyle="hyperlink"/> object to be converted to <xref linkend="org.osgi.service.enocean.EnOceanChannel" xrefstyle="hyperlink"/>, which may -again- be documented (through
          <xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription" xrefstyle="hyperlink"/> objects) or not.</para>
        </listitem>

        <listitem>
          <para>Link quality information read-only methods that mirror some of
          the 'Optional Data' header information.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>EnOcean Message Description</title>

    <para><xref linkend="org.osgi.service.enocean.descriptions.EnOceanMessageDescription" xrefstyle="hyperlink"/> objects exposes only two methods:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.enocean.descriptions.EnOceanMessageDescription.deserialize-byte---" xrefstyle="hyperlink"/>: makes the user able to deserialize the
        payload bytes of a raw <xref linkend="org.osgi.service.enocean.EnOceanMessage" xrefstyle="hyperlink"/> object, into a collection of <xref linkend="org.osgi.service.enocean.EnOceanChannel" xrefstyle="hyperlink"/> objects.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.enocean.descriptions.EnOceanMessageDescription.serialize-EnOceanChannel---" xrefstyle="hyperlink"/>: serializes the input <xref linkend="org.osgi.service.enocean.EnOceanChannel" xrefstyle="hyperlink"/> objects into a collection of bytes.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>EnOcean Channel</title>

    <para>The <xref linkend="org.osgi.service.enocean.EnOceanChannel" xrefstyle="hyperlink"/> interface is the first step of an abstraction to
    generate or interpret <xref linkend="org.osgi.service.enocean.EnOceanMessage" xrefstyle="hyperlink"/>
    channels with plain Java types.</para>

    <para>The simple EnOceanChannel interface provides a way to separate the
    different fields in a message payload, knowing their offset and size in
    the byte array that constitutes the full message's payload.</para>

    <para>At the EnOceanChannel level, the only way to get/set the information
    contained in the channel is through a pair of <xref linkend="org.osgi.service.enocean.EnOceanChannel.getRawValue--" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.enocean.EnOceanChannel.setRawValue-byte---" xrefstyle="hyperlink"/> methods, which act on plain bytes.</para>

    <para>Those bytes are meant right-aligned, and the number of those bytes
    is the size of the data field, floored up to the next multiple of 8. For
    instance, a 3-bit long channel would be encoded on one byte, all the
    necessary information starting from bit 0.</para>

    <para>Every EnOceanMessage as described in the EEP Specification contains
    a various amount of channels, each of them being identified by their
    unique ID.</para>

    <para>This ID, or channelID, is constituted of the “Shortcut” field of
    this channel from the EEP 2.5 Specification, <xref linkend="service.enocean-bibliomixed_id_20140602_17h03_10_5"/>, and a
    number fixed by the order of appearance of such a “Shortcut” in the
    specification.</para>

    <para>This unique identifier links a Channel to an <xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription" xrefstyle="hyperlink"/> object that provides more information to encode
    and decode that channel's information; see below for more details. This
    enables for loose coupling of the raw Channel itself and a richer,
    3rd-party provided, information.</para>

    <para>As an example, if the platform being developed is an electronic
    display that waits for Messages from a well-known temperature sensor, the
    Client bundle on the platform may interpret the Temperature Channels in
    every Temperature Message without needing an appropriate
    TemperatureChannelDescription object; it may directly cast and convert the
    Byte[] array of every received message to a properly valued Double and
    display that.</para>

    <para>Otherwise, it could as well use the channelID to get a
    TemperatureChannelDescription object that would properly handle the
    deserialization process from the raw bytes to a proper, physical
    unit-augmented, result.</para>

    <figure xml:id="service.enocean-figure_id_20140603_16h48_38">
      <title>EnOcean channel and EnOcean channel descriptions.</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.5in" contentwidth="5.000in" fileref="enocean_channel_and_enocean_channel_descriptions_channel_diagram_v5.svg"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section>
    <title>EnOcean Channel Description</title>

    <para>The <xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription" xrefstyle="hyperlink"/> interface enables the description of all the
    various channels as specified in the EnOcean specification, as well as the
    description of channels issued by 3rd party actors.</para>

    <para>Those description objects are retrieved from the registered <xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescriptionSet" xrefstyle="hyperlink"/> interface using an unique ID known as the
    channelID.</para>

    <para>Here are the Channel types defined in this specification:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription.TYPE_RAW" xrefstyle="hyperlink"/>: A collection of bytes. This type is used when
        the description is not provided, and is thus the default. For this
        type, the <xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription.deserialize-byte---" xrefstyle="hyperlink"/> call actually returns a byte[] collection. The
        encryption key or a device ID on 4 bytes are examples of such raw
        types.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription.TYPE_DATA" xrefstyle="hyperlink"/>: A scaled physical value. Used when the data
        can be mapped to a physical value; for instance, the 'WND – Wind
        Speed' channel is a raw binary value, in a range from 0 to 255, that
        will be mapped as a wind speed between 0 and 70 m/s. For this type,
        the <xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription.deserialize-byte---" xrefstyle="hyperlink"/> call actually returns a Double value.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription.TYPE_FLAG" xrefstyle="hyperlink"/>: A boolean value. Used when the Channel value
        can be either 1 or 0. The “Teach-In” Channel is a well-known example;
        this 1-bit field may either be 0 or 1, depending whether the Message
        is a teach-in one or not. For this type, the <xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription.deserialize-byte---" xrefstyle="hyperlink"/> call actually returns a Boolean value.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription.TYPE_ENUM" xrefstyle="hyperlink"/>: An enumeration of possible values. Used when
        the Channel can only take a discrete number of values. More
        complicated than <xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription.TYPE_FLAG" xrefstyle="hyperlink"/>, enumerated types may have thresholds: for
        instance, the A5-30 “Digital Input- Input State (IPS)” channel is a
        8-bit value which means “Contact closed” between 0 and 195, and
        “Contact open” from 196 to 255. For this type, the <xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription.deserialize-byte---" xrefstyle="hyperlink"/> call actually returns an <xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelEnumValue" xrefstyle="hyperlink"/> object.</para>
      </listitem>
    </itemizedlist>

    <para>According to the channel type, the actual description object should
    implement one of the following specialized interfaces. This will ease the
    use of casting to the specialized interfaces on documented
    channels.</para>

    <section>
      <title>EnOcean Data Channel Description</title>

      <para>The <xref linkend="org.osgi.service.enocean.descriptions.EnOceanDataChannelDescription" xrefstyle="hyperlink"/> interface inherits from <xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription" xrefstyle="hyperlink"/> interface.</para>

      <para>Two more methods give access to the integer input domain of the
      data channel (such as 0-255) and to the floating-point output range of
      it (such as -30.0°C – 24.5°C). A method is also present to retrieve the
      physical unit of the channel. The <xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription.serialize-Object-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription.deserialize-byte---" xrefstyle="hyperlink"/> methods are implemented to easily convert from
      the raw byte[] collection to a Double, and vice versa.</para>

      <para>Here are a few samples of such Channels:</para>

      <table>
        <title>EnOcean Data Channel Description example</title>

        <tgroup align="left" cols="6" colsep="1" rowsep="1">
          <colspec colname="c1" colwidth="1*"/>

          <colspec colname="c2" colwidth="2*"/>

          <colspec colname="c3" colwidth="3*"/>

          <colspec colname="c4" colwidth="1*"/>

          <colspec colname="c5" colwidth="1*"/>

          <colspec colname="c6" colwidth="1*"/>

          <thead>
            <row>
              <entry>Short</entry>

              <entry>Description</entry>

              <entry>Possible implemented name</entry>

              <entry>Domain</entry>

              <entry>Range</entry>

              <entry>Unit</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>TMP</entry>

              <entry>Temperature</entry>

              <entry>TemperatureScaledChannel_X</entry>

              <entry>0..255</entry>

              <entry>-10°..+30°</entry>

              <entry>°C</entry>
            </row>

            <row>
              <entry>HUM</entry>

              <entry>Humidity</entry>

              <entry>HumidityScaledChannel_X</entry>

              <entry>0..250</entry>

              <entry>0..100</entry>

              <entry>%</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>EnOcean Flag Channel Description</title>

      <para>The <xref linkend="org.osgi.service.enocean.descriptions.EnOceanFlagChannelDescription" xrefstyle="hyperlink"/> interface inherits from the <xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription" xrefstyle="hyperlink"/> interface.</para>

      <para>Those channels, are typically used for On/Off reporting values
      (like a switch); they have no additional methods, though the <xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription.deserialize-byte---" xrefstyle="hyperlink"/> method converts the input bit into a proper
      Boolean object.</para>
    </section>

    <section>
      <title>EnOcean Enumerated Channel Description</title>

      <para>The <xref linkend="org.osgi.service.enocean.descriptions.EnOceanEnumChannelDescription" xrefstyle="hyperlink"/> interface inherits from the <xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription" xrefstyle="hyperlink"/> interface.</para>

      <para>The additional method provided to this interface is <xref linkend="org.osgi.service.enocean.descriptions.EnOceanEnumChannelDescription.getPossibleValues--" xrefstyle="hyperlink"/>, which returns an array of the available <xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelEnumValue" xrefstyle="hyperlink"/> objects accessible to this channel. Every <xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelEnumValue" xrefstyle="hyperlink"/> object contains its integer input range and a
      String identifier that defines its meaning.</para>

      <para>The <xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription.serialize-Object-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription.deserialize-byte---" xrefstyle="hyperlink"/> methods of an <xref linkend="org.osgi.service.enocean.descriptions.EnOceanEnumChannelDescription" xrefstyle="hyperlink"/> object thus convert an integer input value (say,
      156) to an <xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelEnumValue" xrefstyle="hyperlink"/>, and vice versa.</para>

      <para>Here is an example that shows the input range and the associated
      <xref linkend="org.osgi.service.enocean.descriptions.EnOceanChannelEnumValue" xrefstyle="hyperlink"/>:</para>

      <table>
        <title>EnOcean Enumerated Channel Description example</title>

        <tgroup align="left" cols="5" colsep="1" rowsep="1">
          <colspec colname="c1" colwidth="3*"/>

          <colspec colname="c2" colwidth="3*"/>

          <colspec colname="c3" colwidth="1*"/>

          <colspec colname="c4" colwidth="1*"/>

          <colspec colname="c5" colwidth="2*"/>

          <thead>
            <row>
              <entry>Device profile</entry>

              <entry>EnOceanChannelEnumValue</entry>

              <entry>Start</entry>

              <entry>Stop</entry>

              <entry>Meaning</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry morerows="3" valign="top"><para> Fan speed stage
              switch</para></entry>

              <entry>FanStageSwitch_Stage3</entry>

              <entry>0</entry>

              <entry>144</entry>

              <entry>Fan speed: Stage 3</entry>
            </row>

            <row>
              <entry>FanStageSwitch_Stage2</entry>

              <entry>145</entry>

              <entry>164</entry>

              <entry>Fan speed: Stage 2</entry>
            </row>

            <row>
              <entry>FanStageSwitch_Stage1</entry>

              <entry>165</entry>

              <entry>189</entry>

              <entry>Fan speed: Stage 1</entry>
            </row>

            <row>
              <entry>FanStageSwitch_Stage0</entry>

              <entry>190</entry>

              <entry>209</entry>

              <entry>Fan speed: Stage 0</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>

  <section>
    <title>EnOcean Remote Management</title>

    <para>Remote Management is a feature which allows EnOcean devices to be
    configured and maintained over the air using radio messages.</para>

    <para>The Remote Procedure Calls, or RPCs - as defined by the EnOcean
    Remote Management specification, <xref linkend="service.enocean-bibliomixed_id_20140602_17h03_19_6"/> - are not
    related to any EnOcean Equipment Profile.</para>

    <para>Note that EnOcean Remote Commissioning is detailed in an additional
    EnOcean document, <xref linkend="service.enocean-bibliomixed_id_20150105_16h26_16_99"/>.</para>

    <section>
      <title>EnOcean RPC</title>

      <para>An <xref linkend="org.osgi.service.enocean.EnOceanRPC" xrefstyle="hyperlink"/> object enables client bundles to remotely manage
      EnOcean devices using already defined behavior.</para>

      <para>RPCs are defined by a <xref linkend="org.osgi.service.enocean.EnOceanRPC.MANUFACTURER_ID" xrefstyle="hyperlink"/> (11 bits, 0x7FF for the EnOcean alliance) and a
      unique <xref linkend="org.osgi.service.enocean.EnOceanRPC.FUNCTION_ID" xrefstyle="hyperlink"/> code on 12 bits.</para>

      <para>RPCs are called directly onto an <xref linkend="org.osgi.service.enocean.EnOceanDevice" xrefstyle="hyperlink"/>
      object via the <xref linkend="org.osgi.service.enocean.EnOceanDevice.invoke-EnOceanRPC-EnOceanHandler-" xrefstyle="hyperlink"/> method, which accepts also a non-mandatory <xref linkend="org.osgi.service.enocean.EnOceanHandler" xrefstyle="hyperlink"/> object as a parameter to retrieve the
      asynchronous answer.</para>

      <para>Broadcasted RPCs can be addressed directly to the Base Driver
      using the relevant Event Admin topic; see <xref linkend="service.enocean-event.api"/>.</para>
    </section>

    <section>
      <title>EnOcean Handler</title>

      <para>Responses to RPCs are processed by the driver and sent back to a
      handler using <xref linkend="org.osgi.service.enocean.EnOceanHandler.notifyResponse-EnOceanRPC-byte---" xrefstyle="hyperlink"/> method when an <xref linkend="org.osgi.service.enocean.EnOceanHandler" xrefstyle="hyperlink"/> is passed to the base driver.</para>
    </section>
  </section>

  <section>
    <title>Working With an EnOcean Device</title>

    <section>
      <title>Service Tracking</title>

      <para>All discovered EnOcean devices in the local networks are
      registered under <xref linkend="org.osgi.service.enocean.EnOceanDevice" xrefstyle="hyperlink"/> interface within the OSGi framework. Every time
      an EnOcean device appears or quits the network, the associated OSGi
      service is registered or unregistered in the OSGi service registry.
      Thanks to the EnOcean Base Driver, the OSGi service availability in the
      registry mirrors EnOcean device availability on EnOcean network, <xref linkend="service.enocean-bibliomixed_id_20140602_17h02_51_3"/>.</para>

      <para>Thanks to service events, a bundle is able to track the addition,
      modification and removal of an <xref linkend="org.osgi.service.enocean.EnOceanDevice" xrefstyle="hyperlink"/>
      service.</para>

      <para>The following example shows using a ServiceTracker to track
      EnOceanDevice services.</para>

      <programlisting>ServiceTracker&lt;EnOceanDevice, EnOceanDevice&gt; enOceanTracker = 
    new ServiceTracker&lt;&gt;(bundleContext, EnOceanDevice.class, null);
enOceanTracker.open(); // open the tracker

...

// get a snaphot of the current EnOceanDevice services
EnOceanDevice[] enOceanDeviceSnapshot = 
    enOceanTracker.getServices(new EnOceanDevice[0]);

...

enOceanTracker.close(); // close the tracker</programlisting>
    </section>
  </section>

  <section xml:id="service.enocean-event.api">
    <title>Event API</title>

    <para>EnOcean events must be delivered to the EventAdmin service by the
    EnOcean implementation, if present. EnOcean event topic follow the
    following form:
    <code>org/osgi/service/enocean/EnOceanEvent/</code><emphasis>SUBTOPIC</emphasis>.</para>

    <para><code>MESSAGE_RECEIVED</code> and <code>RPC_BROADCAST</code> are the
    two available subtopics.</para>

    <section>
      <title>MESSAGE_RECEIVED</title>

      <para>Properties (every event may dispatch some or all of the following
      properties):</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.enocean.EnOceanDevice.CHIP_ID" xrefstyle="hyperlink"/> – . The chip ID of the sending
          device.</para>
        </listitem>

        <listitem>
          <para><code>service.pid</code> – The service PID of the exported
          device.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.enocean.EnOceanDevice.RORG" xrefstyle="hyperlink"/> – The RORG (Radio Telegram Type) of the
          sending device.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.enocean.EnOceanDevice.FUNC" xrefstyle="hyperlink"/> – The FUNC profile identifier of the sending
          device.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.enocean.EnOceanDevice.TYPE" xrefstyle="hyperlink"/> – The TYPE profile identifier of the sending
          device.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.enocean.EnOceanEvent.PROPERTY_MESSAGE" xrefstyle="hyperlink"/> – The EnOceanMessage object associated with
          this event.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.enocean.EnOceanEvent.PROPERTY_EXPORTED" xrefstyle="hyperlink"/> – The presence of this property means that
          this message has actually been exported from a locally implemented
          EnOcean Device.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>RPC_BROADCAST</title>

      <para>This event is used whenever an RPC is broadcasted on EnOcean
      networks, in IMPORT or EXPORT situations.</para>

      <para>Properties (every event may dispatch some or all of the following
      properties):</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.enocean.EnOceanRPC.MANUFACTURER_ID" xrefstyle="hyperlink"/> – The RPC's manufacturer ID.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.enocean.EnOceanRPC.FUNCTION_ID" xrefstyle="hyperlink"/> – The RPC's function ID .</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.enocean.EnOceanEvent.PROPERTY_EXPORTED" xrefstyle="hyperlink"/> – The presence of this property means that
          this RPC has actually been exported from a locally implemented
          EnOcean Device.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.enocean.EnOceanEvent.PROPERTY_RPC" xrefstyle="hyperlink"/> – The EnOceanRPC object associated with this
          event.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>EnOcean Exceptions</title>

    <para>The <xref linkend="org.osgi.service.enocean.EnOceanException" xrefstyle="hyperlink"/> can be thrown and holds information about the
    different EnOcean layers. Here below, ESP stands for <emphasis>EnOcean
    Serial Protocol</emphasis>. The following errors are defined:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.enocean.EnOceanException.ESP_UNEXPECTED_FAILURE" xrefstyle="hyperlink"/> – Operation was not successful.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.enocean.EnOceanException.ESP_RET_NOT_SUPPORTED" xrefstyle="hyperlink"/> – The ESP command was not supported by the
        driver.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.enocean.EnOceanException.ESP_RET_WRONG_PARAM" xrefstyle="hyperlink"/> – The ESP command was supplied wrong
        parameters.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.enocean.EnOceanException.ESP_RET_OPERATION_DENIED" xrefstyle="hyperlink"/> – The ESP command was denied
        authorization.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.enocean.EnOceanException.INVALID_TELEGRAM" xrefstyle="hyperlink"/> – The message was invalid.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Security</title>

    <para>It is recommended that
    <code>ServicePermission[EnOceanDevice|EnOceanHost, REGISTER|GET]</code> be
    used sparingly and only for bundles that are trusted.</para>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.enocean" xml:id="org.osgi.service.enocean" xml:base="../../generated/javadoc/docbook/org.osgi.service.enocean.xml">
   <title>org.osgi.service.enocean</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.enocean-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.enocean-version.number">1.0</edition>
   </info>
   <para>
EnOcean Package Version 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.enocean; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.enocean; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.enocean.EnOceanChannel">
                  <code>EnOceanChannel</code>
               </link> - 
Holds the raw value and channel identification info of an EnOceanChannel.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.enocean.EnOceanDevice">
                  <code>EnOceanDevice</code>
               </link> - 
This interface represents a physical device that communicates over the
 EnOcean protocol.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.enocean.EnOceanEvent">
                  <code>EnOceanEvent</code>
               </link> - 
Constants for use in EnOcean events.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.enocean.EnOceanException">
                  <code>EnOceanException</code>
               </link> - 
This class contains code and definitions necessary to support common EnOcean
 exceptions.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.enocean.EnOceanHandler">
                  <code>EnOceanHandler</code>
               </link> - 
The interface used to get callback answers from a RPC or a Message.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.enocean.EnOceanHost">
                  <code>EnOceanHost</code>
               </link> - 
This interface represents an EnOcean Host, a device that offers EnOcean
 networking features.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.enocean.EnOceanMessage">
                  <code>EnOceanMessage</code>
               </link> - 
Holds the necessary methods to interact with an EnOcean message.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.enocean.EnOceanRPC">
                  <code>EnOceanRPC</code>
               </link> - 
A very basic interface for RPCs.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="EnOceanChannel" xml:id="org.osgi.service.enocean.EnOceanChannel">
      <title>public interface EnOceanChannel</title>
      <para>
Holds the raw value and channel identification info of an EnOceanChannel.
   </para>
      <section role="method" xreflabel="getChannelId()" xml:id="org.osgi.service.enocean.EnOceanChannel.getChannelId--">
         <title>public String getChannelId()</title>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The unique ID of this channel.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getOffset()" xml:id="org.osgi.service.enocean.EnOceanChannel.getOffset--">
         <title>public int getOffset()</title>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The offset, in bits, where this channel is found in the telegram.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getRawValue()" xml:id="org.osgi.service.enocean.EnOceanChannel.getRawValue--">
         <title>public byte[] getRawValue()</title>
         <para role="description">
Gets the raw value of this channel.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>corresponding value.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getSize()" xml:id="org.osgi.service.enocean.EnOceanChannel.getSize--">
         <title>public int getSize()</title>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The size, in bits, of this channel.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="setRawValue(byte[])" xml:id="org.osgi.service.enocean.EnOceanChannel.setRawValue-byte---">
         <title>public void setRawValue(byte[] rawValue)</title>
         <formalpara role="parameter">
            <title>rawValue</title>
            <para/>
         </formalpara>
         <para role="description">
Sets the raw value of a channel.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="EnOceanDevice" xml:id="org.osgi.service.enocean.EnOceanDevice">
      <title>public interface EnOceanDevice</title>
      <para>
This interface represents a physical device that communicates over the
 EnOcean protocol.
   </para>
      <section role="field" xreflabel="CHIP_ID" xml:id="org.osgi.service.enocean.EnOceanDevice.CHIP_ID">
         <title>public static final String CHIP_ID = "enocean.device.chip_id"</title>
         <para>
Property name for the mandatory CHIP_ID of the device
   </para>
      </section>
      <section role="field" xreflabel="DEVICE_CATEGORY" xml:id="org.osgi.service.enocean.EnOceanDevice.DEVICE_CATEGORY">
         <title>public static final String DEVICE_CATEGORY = "EnOcean"</title>
         <para>
Property name for the mandatory DEVICE_CATEGORY of the device
   </para>
      </section>
      <section role="field" xreflabel="ENOCEAN_EXPORT" xml:id="org.osgi.service.enocean.EnOceanDevice.ENOCEAN_EXPORT">
         <title>public static final String ENOCEAN_EXPORT = "enocean.device.export"</title>
         <para>
Property name that defines if the device is exported or not. If present,
 the device is exported.
   </para>
      </section>
      <section role="field" xreflabel="FUNC" xml:id="org.osgi.service.enocean.EnOceanDevice.FUNC">
         <title>public static final String FUNC = "enocean.device.profile.func"</title>
         <para>
Property name for the radiotelegram functional type of the profile
 associated with this device.
   </para>
      </section>
      <section role="field" xreflabel="MANUFACTURER" xml:id="org.osgi.service.enocean.EnOceanDevice.MANUFACTURER">
         <title>public static final String MANUFACTURER = "enocean.device.manufacturer"</title>
         <para>
Property name for the manufacturer ID that may be specified by some
 teach-in messages.
   </para>
      </section>
      <section role="field" xreflabel="RORG" xml:id="org.osgi.service.enocean.EnOceanDevice.RORG">
         <title>public static final String RORG = "enocean.device.profile.rorg"</title>
         <para>
Property name for the radiotelegram main type of the profile associated
 with this device.
   </para>
      </section>
      <section role="field" xreflabel="SECURITY_LEVEL_FORMAT" xml:id="org.osgi.service.enocean.EnOceanDevice.SECURITY_LEVEL_FORMAT">
         <title>public static final String SECURITY_LEVEL_FORMAT = "enocean.device.security_level_format"</title>
         <para>
Property name for the security level mask for this device. The format of
 that mask is specified in EnOcean Security Draft.
   </para>
      </section>
      <section role="field" xreflabel="TYPE" xml:id="org.osgi.service.enocean.EnOceanDevice.TYPE">
         <title>public static final String TYPE = "enocean.device.profile.type"</title>
         <para>
Property name for the radiotelegram subtype of the profile associated
 with this device.
   </para>
      </section>
      <section role="method" xreflabel="getChipId()" xml:id="org.osgi.service.enocean.EnOceanDevice.getChipId--">
         <title>public int getChipId()</title>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The EnOcean device chip ID.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getEncryptionKey()" xml:id="org.osgi.service.enocean.EnOceanDevice.getEncryptionKey--">
         <title>public byte[] getEncryptionKey()</title>
         <para role="description">
Returns the current encryption key used by this device.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The current encryption key, or null.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFunc()" xml:id="org.osgi.service.enocean.EnOceanDevice.getFunc--">
         <title>public int getFunc()</title>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The EnOcean profile FUNC, or -1 if unknown.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getLearnedDevices()" xml:id="org.osgi.service.enocean.EnOceanDevice.getLearnedDevices--">
         <title>public int[] getLearnedDevices()</title>
         <para role="description">
Gets the list of devices the device already has learned.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The list of currently learned device's CHIP_IDs.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getManufacturer()" xml:id="org.osgi.service.enocean.EnOceanDevice.getManufacturer--">
         <title>public int getManufacturer()</title>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The EnOcean manufacturer code, -1 if unknown.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getRollingCode()" xml:id="org.osgi.service.enocean.EnOceanDevice.getRollingCode--">
         <title>public int getRollingCode()</title>
         <para role="description">
Get the current rolling code of the device.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The current rolling code in use with this device's
         communications.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRorg()" xml:id="org.osgi.service.enocean.EnOceanDevice.getRorg--">
         <title>public int getRorg()</title>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The EnOcean profile RORG.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getRPCs()" xml:id="org.osgi.service.enocean.EnOceanDevice.getRPCs--">
         <title>public Map getRPCs()</title>
         <para role="description">
Retrieves the currently available RPCs to this device; those are stored
 using their manfufacturerId:commandId identifiers.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A list of the available RPCs, in a Map&lt;Integer, Integer[]&gt;
         form.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getSecurityLevelFormat()" xml:id="org.osgi.service.enocean.EnOceanDevice.getSecurityLevelFormat--">
         <title>public int getSecurityLevelFormat()</title>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The EnOcean security level format, or 0 as default (no security)</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.enocean.EnOceanDevice.getType--">
         <title>public int getType()</title>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The EnOcean profile TYPE, or -1 if unknown.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="invoke(EnOceanRPC,EnOceanHandler)" xml:id="org.osgi.service.enocean.EnOceanDevice.invoke-EnOceanRPC-EnOceanHandler-">
         <title>public void invoke(EnOceanRPC rpc,EnOceanHandler handler)</title>
         <formalpara role="parameter">
            <title>rpc</title>
            <para/>
         </formalpara>
         <formalpara role="parameter">
            <title>handler</title>
            <para/>
         </formalpara>
         <para role="description">
Sends an RPC to the remote device.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="remove()" xml:id="org.osgi.service.enocean.EnOceanDevice.remove--">
         <title>public void remove()</title>
         <para role="description">
Removes the device's OSGi service from OSGi service platform.
   </para>
      </section>
      <section role="method" xreflabel="setEncryptionKey(byte[])" xml:id="org.osgi.service.enocean.EnOceanDevice.setEncryptionKey-byte---">
         <title>public void setEncryptionKey(byte[] key)</title>
         <formalpara role="parameter">
            <title>key</title>
            <para>the encryption key to be set.</para>
         </formalpara>
         <para role="description">
Sets the encryption key of the device.
   </para>
      </section>
      <section role="method" xreflabel="setFunc(int)" xml:id="org.osgi.service.enocean.EnOceanDevice.setFunc-int-">
         <title>public void setFunc(int func)</title>
         <formalpara role="parameter">
            <title>func</title>
            <para>the EEP func of the device;</para>
         </formalpara>
         <para role="description">
Manually sets the EEP FUNC of the device.
   </para>
      </section>
      <section role="method" xreflabel="setLearningMode(boolean)" xml:id="org.osgi.service.enocean.EnOceanDevice.setLearningMode-boolean-">
         <title>public void setLearningMode(boolean learnMode)</title>
         <formalpara role="parameter">
            <title>learnMode</title>
            <para>the desired state: true for learning mode, false to
        disable it.</para>
         </formalpara>
         <para role="description">
Switches the device into learning mode.
   </para>
      </section>
      <section role="method" xreflabel="setRollingCode(int)" xml:id="org.osgi.service.enocean.EnOceanDevice.setRollingCode-int-">
         <title>public void setRollingCode(int rollingCode)</title>
         <formalpara role="parameter">
            <title>rollingCode</title>
            <para>the rolling code to be set or initiated.</para>
         </formalpara>
         <para role="description">
Sets the rolling code of this device.
   </para>
      </section>
      <section role="method" xreflabel="setType(int)" xml:id="org.osgi.service.enocean.EnOceanDevice.setType-int-">
         <title>public void setType(int type)</title>
         <formalpara role="parameter">
            <title>type</title>
            <para>the EEP type of the device;</para>
         </formalpara>
         <para role="description">
Manually sets the EEP TYPE of the device.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="EnOceanEvent" xml:id="org.osgi.service.enocean.EnOceanEvent">
      <title>public final class EnOceanEvent</title>
      <para>
Constants for use in EnOcean events.
   </para>
      <section role="field" xreflabel="PROPERTY_EXPORTED" xml:id="org.osgi.service.enocean.EnOceanEvent.PROPERTY_EXPORTED">
         <title>public static final String PROPERTY_EXPORTED = "enocean.message.is_exported"</title>
         <para>
Property key used to tell apart messages that are exported or imported.
   </para>
      </section>
      <section role="field" xreflabel="PROPERTY_MESSAGE" xml:id="org.osgi.service.enocean.EnOceanEvent.PROPERTY_MESSAGE">
         <title>public static final String PROPERTY_MESSAGE = "enocean.message"</title>
         <para>
Property key for the <link linkend="org.osgi.service.enocean.EnOceanMessage">EnOceanMessage</link> object embedded in an event.
   </para>
      </section>
      <section role="field" xreflabel="PROPERTY_RPC" xml:id="org.osgi.service.enocean.EnOceanEvent.PROPERTY_RPC">
         <title>public static final String PROPERTY_RPC = "enocean.rpc"</title>
         <para>
Property key for the <link linkend="org.osgi.service.enocean.EnOceanRPC">EnOceanRPC</link> object embedded in an event.
   </para>
      </section>
      <section role="field" xreflabel="TOPIC_MSG_RECEIVED" xml:id="org.osgi.service.enocean.EnOceanEvent.TOPIC_MSG_RECEIVED">
         <title>public static final String TOPIC_MSG_RECEIVED = "org/osgi/service/enocean/EnOceanEvent/MESSAGE_RECEIVED"</title>
         <para>
Main topic for all OSGi dispatched EnOcean messages, imported or
 exported.
   </para>
      </section>
      <section role="field" xreflabel="TOPIC_RPC_BROADCAST" xml:id="org.osgi.service.enocean.EnOceanEvent.TOPIC_RPC_BROADCAST">
         <title>public static final String TOPIC_RPC_BROADCAST = "org/osgi/service/enocean/EnOceanEvent/RPC_BROADCAST"</title>
         <para>
Main topic for all OSGi broadcast EnOcean RPCs, imported or exported.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="EnOceanException" xml:id="org.osgi.service.enocean.EnOceanException">
      <title>public class EnOceanException<?line-break?> extends Exception</title>
      <para>
This class contains code and definitions necessary to support common EnOcean
 exceptions. This class is mostly used with low-level, gateway-interacting
 code : EnOceanHost.
   </para>
      <section role="field" xreflabel="ESP_RET_NOT_SUPPORTED" xml:id="org.osgi.service.enocean.EnOceanException.ESP_RET_NOT_SUPPORTED">
         <title>public static final short ESP_RET_NOT_SUPPORTED = 2</title>
         <para>
Operation is not supported by the target device.
   </para>
      </section>
      <section role="field" xreflabel="ESP_RET_OPERATION_DENIED" xml:id="org.osgi.service.enocean.EnOceanException.ESP_RET_OPERATION_DENIED">
         <title>public static final short ESP_RET_OPERATION_DENIED = 4</title>
         <para>
The operation was denied.
   </para>
      </section>
      <section role="field" xreflabel="ESP_RET_WRONG_PARAM" xml:id="org.osgi.service.enocean.EnOceanException.ESP_RET_WRONG_PARAM">
         <title>public static final short ESP_RET_WRONG_PARAM = 3</title>
         <para>
One of the parameters was badly specified or missing.
   </para>
      </section>
      <section role="field" xreflabel="ESP_UNEXPECTED_FAILURE" xml:id="org.osgi.service.enocean.EnOceanException.ESP_UNEXPECTED_FAILURE">
         <title>public static final short ESP_UNEXPECTED_FAILURE = 1</title>
         <para>
Unexpected failure.
   </para>
      </section>
      <section role="field" xreflabel="INVALID_TELEGRAM" xml:id="org.osgi.service.enocean.EnOceanException.INVALID_TELEGRAM">
         <title>public static final short INVALID_TELEGRAM = 240</title>
         <para>
The message was invalid.
   </para>
      </section>
      <section role="field" xreflabel="SUCCESS" xml:id="org.osgi.service.enocean.EnOceanException.SUCCESS">
         <title>public static final short SUCCESS = 0</title>
         <para>
SUCCESS status code.
   </para>
      </section>
      <section role="method" xreflabel="EnOceanException(String)" xml:id="org.osgi.service.enocean.EnOceanException.EnOceanException-String-">
         <title>public  EnOceanException(String errordesc)</title>
         <formalpara role="parameter">
            <title>errordesc</title>
            <para>exception error description</para>
         </formalpara>
         <para role="description">
Constructor for EnOceanException
   </para>
      </section>
      <section role="method" xreflabel="EnOceanException(int,String)" xml:id="org.osgi.service.enocean.EnOceanException.EnOceanException-int-String-">
         <title>public  EnOceanException(int errorCode,String errorDesc)</title>
         <formalpara role="parameter">
            <title>errorCode</title>
            <para>the error code.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>errorDesc</title>
            <para>the description.</para>
         </formalpara>
         <para role="description">
Constructor for EnOceanException
   </para>
      </section>
      <section role="method" xreflabel="EnOceanException(int)" xml:id="org.osgi.service.enocean.EnOceanException.EnOceanException-int-">
         <title>public  EnOceanException(int errorCode)</title>
         <formalpara role="parameter">
            <title>errorCode</title>
            <para>An error code.</para>
         </formalpara>
         <para role="description">
Constructor for EnOceanException
   </para>
      </section>
      <section role="method" xreflabel="errorCode()" xml:id="org.osgi.service.enocean.EnOceanException.errorCode--">
         <title>public int errorCode()</title>
         <para role="description">
Constructor for EnOceanException
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An EnOcean error code, defined by the EnOcean Forum working
         committee or an EnOcean vendor.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="EnOceanHandler" xml:id="org.osgi.service.enocean.EnOceanHandler">
      <title>public interface EnOceanHandler</title>
      <para>
The interface used to get callback answers from a RPC or a Message.
   </para>
      <section role="method" xreflabel="notifyResponse(EnOceanRPC,byte[])" xml:id="org.osgi.service.enocean.EnOceanHandler.notifyResponse-EnOceanRPC-byte---">
         <title>public void notifyResponse(EnOceanRPC original,byte[] payload)</title>
         <formalpara role="parameter">
            <title>original</title>
            <para>the original <link linkend="org.osgi.service.enocean.EnOceanRPC">EnOceanRPC</link> that originated this
        answer.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>payload</title>
            <para>the payload of the response; may be deserialized to an
        <link linkend="org.osgi.service.enocean.EnOceanRPC">EnOceanRPC</link> object.</para>
         </formalpara>
         <para role="description">
Notifies of the answer to a RPC.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="EnOceanHost" xml:id="org.osgi.service.enocean.EnOceanHost">
      <title>public interface EnOceanHost</title>
      <para>
This interface represents an EnOcean Host, a device that offers EnOcean
 networking features.
   </para>
      <section role="field" xreflabel="HOST_ID" xml:id="org.osgi.service.enocean.EnOceanHost.HOST_ID">
         <title>public static final Object HOST_ID</title>
         <para>
The unique ID for this Host: this matches the CHIP_ID of the EnOcean
 Gateway Chip it embodies.
   </para>
      </section>
      <section role="field" xreflabel="REPEATER_LEVEL_OFF" xml:id="org.osgi.service.enocean.EnOceanHost.REPEATER_LEVEL_OFF">
         <title>public static final int REPEATER_LEVEL_OFF = 0</title>
         <para>
repeater level to disable repeating; this is the default.
   </para>
      </section>
      <section role="field" xreflabel="REPEATER_LEVEL_ONE" xml:id="org.osgi.service.enocean.EnOceanHost.REPEATER_LEVEL_ONE">
         <title>public static final int REPEATER_LEVEL_ONE = 1</title>
         <para>
repeater level to repeat every telegram at most once.
   </para>
      </section>
      <section role="field" xreflabel="REPEATER_LEVEL_TWO" xml:id="org.osgi.service.enocean.EnOceanHost.REPEATER_LEVEL_TWO">
         <title>public static final int REPEATER_LEVEL_TWO = 2</title>
         <para>
repeater level to repeat every telegram at most twice.
   </para>
      </section>
      <section role="method" xreflabel="apiVersion()" xml:id="org.osgi.service.enocean.EnOceanHost.apiVersion--">
         <title>public String apiVersion() throws EnOceanException</title>
         <para role="description">
Returns the chip's API version info (cf. ESP3 command 0x03:
 CO_RD_VERSION)
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a String object containing the API version info.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>EnOceanException</code>– if any problem occurs.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="appVersion()" xml:id="org.osgi.service.enocean.EnOceanHost.appVersion--">
         <title>public String appVersion() throws EnOceanException</title>
         <para role="description">
Returns the chip's application version info (cf. ESP3 command 0x03:
 CO_RD_VERSION)
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a String object containing the application version info.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>EnOceanException</code>– if any problem occurs.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getBaseID()" xml:id="org.osgi.service.enocean.EnOceanHost.getBaseID--">
         <title>public int getBaseID() throws EnOceanException</title>
         <para role="description">
Gets the BASE_ID of the chip, if set (cf. ESP3 command 0x08:
 CO_RD_IDBASE)
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the BASE_ID of the device as defined in EnOcean specification</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>EnOceanException</code>– if any problem occurs.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getChipId(String)" xml:id="org.osgi.service.enocean.EnOceanHost.getChipId-String-">
         <title>public int getChipId(String servicePID) throws EnOceanException</title>
         <formalpara role="parameter">
            <title>servicePID</title>
            <para/>
         </formalpara>
         <para role="description">
Retrieves the CHIP_ID associated with the given servicePID, if existing
 on this chip.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the associated CHIP_ID of the exported device.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>EnOceanException</code>– if any problem occurs.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRepeaterLevel()" xml:id="org.osgi.service.enocean.EnOceanHost.getRepeaterLevel--">
         <title>public int getRepeaterLevel() throws EnOceanException</title>
         <para role="description">
Gets the current repeater level of the host (cf. ESP3 command 0x0A:
 CO_RD_REPEATER)
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>one of the Repeater Level constants as defined above.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>EnOceanException</code>– if any problem occurs.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="reset()" xml:id="org.osgi.service.enocean.EnOceanHost.reset--">
         <title>public void reset() throws EnOceanException</title>
         <para role="description">
Reset the EnOcean Host (cf. ESP3 command 0x02: CO_WR_RESET)
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>EnOceanException</code>– if any problem occurs.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setBaseID(int)" xml:id="org.osgi.service.enocean.EnOceanHost.setBaseID-int-">
         <title>public void setBaseID(int baseID) throws EnOceanException</title>
         <formalpara role="parameter">
            <title>baseID</title>
            <para>to be set.</para>
         </formalpara>
         <para role="description">
Sets the base ID of the device, may be used up to 10 times (cf. ESP3
 command 0x07: CO_WR_IDBASE)
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>EnOceanException</code>– if any problem occurs.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setRepeaterLevel(int)" xml:id="org.osgi.service.enocean.EnOceanHost.setRepeaterLevel-int-">
         <title>public void setRepeaterLevel(int level) throws EnOceanException</title>
         <formalpara role="parameter">
            <title>level</title>
            <para>one of the Repeater Level constants as defined above.</para>
         </formalpara>
         <para role="description">
Sets the repeater level on the host (cf. ESP3 command 0x09:
 CO_WR_REPEATER)
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>EnOceanException</code>– if any problem occurs.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="EnOceanMessage" xml:id="org.osgi.service.enocean.EnOceanMessage">
      <title>public interface EnOceanMessage</title>
      <para>
Holds the necessary methods to interact with an EnOcean message.
   </para>
      <section role="method" xreflabel="getBytes()" xml:id="org.osgi.service.enocean.EnOceanMessage.getBytes--">
         <title>public byte[] getBytes()</title>
         <para role="description">
Gets the bytes corresponding to the whole message, including the CRC. The
 generated byte[] array may be sent to an EnOcean gateway and is conform
 to EnOcean Radio Protocol.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The serialized byte list corresponding to the binary message.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getDbm()" xml:id="org.osgi.service.enocean.EnOceanMessage.getDbm--">
         <title>public int getDbm()</title>
         <para role="description">
Returns the average RSSI on all the received subtelegrams, including
 redundant ones.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The average RSSI perceived.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getDestinationId()" xml:id="org.osgi.service.enocean.EnOceanMessage.getDestinationId--">
         <title>public int getDestinationId()</title>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the message's destination ID, or -1</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getFunc()" xml:id="org.osgi.service.enocean.EnOceanMessage.getFunc--">
         <title>public int getFunc()</title>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the message's FUNC</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getPayloadBytes()" xml:id="org.osgi.service.enocean.EnOceanMessage.getPayloadBytes--">
         <title>public byte[] getPayloadBytes()</title>
         <para role="description">
Returns the payload bytes of this message.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>corresponding value.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRorg()" xml:id="org.osgi.service.enocean.EnOceanMessage.getRorg--">
         <title>public int getRorg()</title>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the message's RORG</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getSecurityLevelFormat()" xml:id="org.osgi.service.enocean.EnOceanMessage.getSecurityLevelFormat--">
         <title>public int getSecurityLevelFormat()</title>
         <para role="description">
Returns the security level of this message, as specified in the 'Security
 of EnOcean Radio Networks' draft, section 4.2.1.3.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The security level format.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getSenderId()" xml:id="org.osgi.service.enocean.EnOceanMessage.getSenderId--">
         <title>public int getSenderId()</title>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the message's Sender ID</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getStatus()" xml:id="org.osgi.service.enocean.EnOceanMessage.getStatus--">
         <title>public int getStatus()</title>
         <para role="description">
Gets the current EnOcean status of the Message. The 'status' byte is
 actually a bitfield that mainly holds repeater information, teach-in
 status, and more or less information depending on the radiotelegram type.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the current EnOcean status of this message.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getSubTelNum()" xml:id="org.osgi.service.enocean.EnOceanMessage.getSubTelNum--">
         <title>public int getSubTelNum()</title>
         <para role="description">
Returns the number of subtelegrams (usually 1) this Message carries.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The number of subtelegrams in the case of multiframe messages.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.enocean.EnOceanMessage.getType--">
         <title>public int getType()</title>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the message's TYPE</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="EnOceanRPC" xml:id="org.osgi.service.enocean.EnOceanRPC">
      <title>public interface EnOceanRPC</title>
      <para>
A very basic interface for RPCs.
   </para>
      <section role="field" xreflabel="FUNCTION_ID" xml:id="org.osgi.service.enocean.EnOceanRPC.FUNCTION_ID">
         <title>public static final String FUNCTION_ID = "enocean.rpc.function_id"</title>
         <para>
The Function ID property string, used in EventAdmin RPC broadcasting.
   </para>
      </section>
      <section role="field" xreflabel="MANUFACTURER_ID" xml:id="org.osgi.service.enocean.EnOceanRPC.MANUFACTURER_ID">
         <title>public static final String MANUFACTURER_ID = "enocean.rpc.manufacturer_id"</title>
         <para>
The Manufacturer ID property string, used in EventAdmin RPC broadcasting.
   </para>
      </section>
      <section role="method" xreflabel="getFunctionId()" xml:id="org.osgi.service.enocean.EnOceanRPC.getFunctionId--">
         <title>public int getFunctionId()</title>
         <para role="description">
Gets the functionID for this RPC.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>function id.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getManufacturerId()" xml:id="org.osgi.service.enocean.EnOceanRPC.getManufacturerId--">
         <title>public int getManufacturerId()</title>
         <para role="description">
Gets the manufacturerID for this RPC.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>manufacturer id.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getName()" xml:id="org.osgi.service.enocean.EnOceanRPC.getName--">
         <title>public String getName()</title>
         <para role="description">
Get a friendly name for the RPC
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the name.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getPayload()" xml:id="org.osgi.service.enocean.EnOceanRPC.getPayload--">
         <title>public byte[] getPayload()</title>
         <para role="description">
Gets the current payload of the RPC.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the payload, in bytes, of this RPC.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getSenderId()" xml:id="org.osgi.service.enocean.EnOceanRPC.getSenderId--">
         <title>public int getSenderId()</title>
         <para role="description">
Sets the RPC's senderID.
 
 This member has to belong to <link linkend="org.osgi.service.enocean.EnOceanRPC">EnOceanRPC</link> interface, for the object
 may be sent as a standalone using EventAdmin for instance.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>sender id.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setSenderId(int)" xml:id="org.osgi.service.enocean.EnOceanRPC.setSenderId-int-">
         <title>public void setSenderId(int chipId)</title>
         <formalpara role="parameter">
            <title>chipId</title>
            <para/>
         </formalpara>
         <para role="description">
Sets the RPC's senderID.
   </para>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.service.enocean.descriptions" xml:id="org.osgi.service.enocean.descriptions" xml:base="../../generated/javadoc/docbook/org.osgi.service.enocean.descriptions.xml">
   <title>org.osgi.service.enocean.descriptions</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.enocean.descriptions-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.enocean.descriptions-version.number">1.0</edition>
   </info>
   <para>
EnOcean Descriptions Package Version 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.enocean.descriptions; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.enocean.descriptions; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription">
                  <code>EnOceanChannelDescription</code>
               </link> - 
Public and registered description interface for a channel.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescriptionSet">
                  <code>EnOceanChannelDescriptionSet</code>
               </link> - 
This interface represents an EnOcean Channel Description Set.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.enocean.descriptions.EnOceanChannelEnumValue">
                  <code>EnOceanChannelEnumValue</code>
               </link> - 
This transitional interface is used to define all the possible values taken
 by an enumerated channel.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.enocean.descriptions.EnOceanDataChannelDescription">
                  <code>EnOceanDataChannelDescription</code>
               </link> - 
Subinterface of <link linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription">EnOceanChannelDescription</link> that describes physical
 measuring channels.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.enocean.descriptions.EnOceanEnumChannelDescription">
                  <code>EnOceanEnumChannelDescription</code>
               </link> - 
Subinterface of <link linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription">EnOceanChannelDescription</link> that describes enumerated
 channels.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.enocean.descriptions.EnOceanFlagChannelDescription">
                  <code>EnOceanFlagChannelDescription</code>
               </link> - 
Subinterface of <link linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription">EnOceanChannelDescription</link> that describes boolean
 channels.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.enocean.descriptions.EnOceanMessageDescription">
                  <code>EnOceanMessageDescription</code>
               </link> - 
This interface represents an EnOcean Message Description.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.enocean.descriptions.EnOceanMessageDescriptionSet">
                  <code>EnOceanMessageDescriptionSet</code>
               </link> - 
This interface represents an EnOcean Message Description Set.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="EnOceanChannelDescription" xml:id="org.osgi.service.enocean.descriptions.EnOceanChannelDescription">
      <title>public interface EnOceanChannelDescription</title>
      <para>
Public and registered description interface for a channel. Encompasses all
 the possible subtypes for a channel.
   </para>
      <section role="field" xreflabel="CHANNEL_ID" xml:id="org.osgi.service.enocean.descriptions.EnOceanChannelDescription.CHANNEL_ID">
         <title>public static final String CHANNEL_ID = "enocean.channel.description.channel_id"</title>
         <para>
The unique ID of this EnOceanChannelDescription object.
   </para>
      </section>
      <section role="field" xreflabel="TYPE_DATA" xml:id="org.osgi.service.enocean.descriptions.EnOceanChannelDescription.TYPE_DATA">
         <title>public static final String TYPE_DATA = "enocean.channel.description.data"</title>
         <para>
A DATA channel maps itself to a Double value representing a
 physical measure.
   </para>
      </section>
      <section role="field" xreflabel="TYPE_ENUM" xml:id="org.osgi.service.enocean.descriptions.EnOceanChannelDescription.TYPE_ENUM">
         <title>public static final String TYPE_ENUM = "enocean.channel.description.enum"</title>
         <para>
An ENUM channel maps itself to one between a list of discrete
 <link linkend="org.osgi.service.enocean.descriptions.EnOceanChannelEnumValue">EnOceanChannelEnumValue</link> "value objects".
   </para>
      </section>
      <section role="field" xreflabel="TYPE_FLAG" xml:id="org.osgi.service.enocean.descriptions.EnOceanChannelDescription.TYPE_FLAG">
         <title>public static final String TYPE_FLAG = "enocean.channel.description.flag"</title>
         <para>
A FLAG channel maps itself to a Boolean value.
   </para>
      </section>
      <section role="field" xreflabel="TYPE_RAW" xml:id="org.osgi.service.enocean.descriptions.EnOceanChannelDescription.TYPE_RAW">
         <title>public static final String TYPE_RAW = "enocean.channel.description.raw"</title>
         <para>
A RAW channel is only made of bytes.
   </para>
      </section>
      <section role="method" xreflabel="deserialize(byte[])" xml:id="org.osgi.service.enocean.descriptions.EnOceanChannelDescription.deserialize-byte---">
         <title>public Object deserialize(byte[] bytes)</title>
         <formalpara role="parameter">
            <title>bytes</title>
            <para>the right-aligned raw bytes.</para>
         </formalpara>
         <para role="description">
Tries to deserialize a series of bytes into a documented value object
 (raw bytes, Double or <link linkend="org.osgi.service.enocean.descriptions.EnOceanChannelEnumValue">EnOceanChannelEnumValue</link>. Of course this
 method will be specialized for each <link linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription">EnOceanChannelDescription</link>
 subinterface, depending on the type of this channel.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a value object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.enocean.descriptions.EnOceanChannelDescription.getType--">
         <title>public String getType()</title>
         <para role="description">
Retrieves the type of the channel.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>one of the above-described types.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="serialize(Object)" xml:id="org.osgi.service.enocean.descriptions.EnOceanChannelDescription.serialize-Object-">
         <title>public byte[] serialize(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>the value of the channel.</para>
         </formalpara>
         <para role="description">
Tries to serialize the channel into a series of bytes.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the right-aligned value, in raw bytes, of the channel.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="EnOceanChannelDescriptionSet" xml:id="org.osgi.service.enocean.descriptions.EnOceanChannelDescriptionSet">
      <title>public interface EnOceanChannelDescriptionSet</title>
      <para>
This interface represents an EnOcean Channel Description Set.
 <link linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescriptionSet">EnOceanChannelDescriptionSet</link> is registered as an OSGi Service.
 Provides a method to retrieve the <link linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription">EnOceanChannelDescription</link> objects
 it documents.
   </para>
      <section role="method" xreflabel="getChannelDescription(String)" xml:id="org.osgi.service.enocean.descriptions.EnOceanChannelDescriptionSet.getChannelDescription-String-">
         <title>public EnOceanChannelDescription getChannelDescription(String channelId)</title>
         <formalpara role="parameter">
            <title>channelId</title>
            <para>the unique string identifier of the description object.</para>
         </formalpara>
         <para role="description">
Retrieves a <link linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription">EnOceanChannelDescription</link> object according to its
 identifier.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The corresponding <link linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription">EnOceanChannelDescription</link> object, or
         null.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the supplied String is invalid, null,
         or other reason.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="EnOceanChannelEnumValue" xml:id="org.osgi.service.enocean.descriptions.EnOceanChannelEnumValue">
      <title>public interface EnOceanChannelEnumValue</title>
      <para>
This transitional interface is used to define all the possible values taken
 by an enumerated channel.
   </para>
      <section role="method" xreflabel="getDescription()" xml:id="org.osgi.service.enocean.descriptions.EnOceanChannelEnumValue.getDescription--">
         <title>public String getDescription()</title>
         <para role="description">
A non-mandatory description of what this enumerated value is about.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the description of this channel.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getStart()" xml:id="org.osgi.service.enocean.descriptions.EnOceanChannelEnumValue.getStart--">
         <title>public int getStart()</title>
         <para role="description">
The start value of the enumeration.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the start value.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getStop()" xml:id="org.osgi.service.enocean.descriptions.EnOceanChannelEnumValue.getStop--">
         <title>public int getStop()</title>
         <para role="description">
The stop value of the enumeration.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the stop value.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="EnOceanDataChannelDescription" xml:id="org.osgi.service.enocean.descriptions.EnOceanDataChannelDescription">
      <title>public interface EnOceanDataChannelDescription<?line-break?> extends EnOceanChannelDescription</title>
      <para>
Subinterface of <link linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription">EnOceanChannelDescription</link> that describes physical
 measuring channels.
   </para>
      <section role="method" xreflabel="getDomainStart()" xml:id="org.osgi.service.enocean.descriptions.EnOceanDataChannelDescription.getDomainStart--">
         <title>public int getDomainStart()</title>
         <para role="description">
The start of the raw input range for this channel.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the domain start.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getDomainStop()" xml:id="org.osgi.service.enocean.descriptions.EnOceanDataChannelDescription.getDomainStop--">
         <title>public int getDomainStop()</title>
         <para role="description">
The end of the raw input range for this channel.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the domain stop.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRangeStart()" xml:id="org.osgi.service.enocean.descriptions.EnOceanDataChannelDescription.getRangeStart--">
         <title>public double getRangeStart()</title>
         <para role="description">
The scale start at which this channel will be mapped to (-20,0°C for
 instance)
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the range start.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRangeStop()" xml:id="org.osgi.service.enocean.descriptions.EnOceanDataChannelDescription.getRangeStop--">
         <title>public double getRangeStop()</title>
         <para role="description">
The scale stop at which this channel will be mapped to (+30,0°C for
 instance)
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the range stop.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getUnit()" xml:id="org.osgi.service.enocean.descriptions.EnOceanDataChannelDescription.getUnit--">
         <title>public String getUnit()</title>
         <para role="description">
The non-mandatory physical unit description of this channel.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the unit as a String</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="EnOceanEnumChannelDescription" xml:id="org.osgi.service.enocean.descriptions.EnOceanEnumChannelDescription">
      <title>public interface EnOceanEnumChannelDescription<?line-break?> extends EnOceanChannelDescription</title>
      <para>
Subinterface of <link linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription">EnOceanChannelDescription</link> that describes enumerated
 channels.
   </para>
      <section role="method" xreflabel="getPossibleValues()" xml:id="org.osgi.service.enocean.descriptions.EnOceanEnumChannelDescription.getPossibleValues--">
         <title>public EnOceanChannelEnumValue[] getPossibleValues()</title>
         <para role="description">
Gets all the possible value for this channel.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>corresponding value(s).</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="EnOceanFlagChannelDescription" xml:id="org.osgi.service.enocean.descriptions.EnOceanFlagChannelDescription">
      <title>public interface EnOceanFlagChannelDescription<?line-break?> extends EnOceanChannelDescription</title>
      <para>
Subinterface of <link linkend="org.osgi.service.enocean.descriptions.EnOceanChannelDescription">EnOceanChannelDescription</link> that describes boolean
 channels.
   </para>
   </section>
   <section role="class" xreflabel="EnOceanMessageDescription" xml:id="org.osgi.service.enocean.descriptions.EnOceanMessageDescription">
      <title>public interface EnOceanMessageDescription</title>
      <para>
This interface represents an EnOcean Message Description.
   </para>
      <section role="method" xreflabel="deserialize(byte[])" xml:id="org.osgi.service.enocean.descriptions.EnOceanMessageDescription.deserialize-byte---">
         <title>public EnOceanChannel[] deserialize(byte[] bytes)</title>
         <formalpara role="parameter">
            <title>bytes</title>
            <para>to be deserialized.</para>
         </formalpara>
         <para role="description">
Deserializes an array of bytes into the EnOceanChannels available to the
 payload, if possible.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>deserialized value.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the actual instance type of the
         message is not compatible with the bytes it is fed with (RORG to
         begin with).   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMessageDescription()" xml:id="org.osgi.service.enocean.descriptions.EnOceanMessageDescription.getMessageDescription--">
         <title>public String getMessageDescription()</title>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the message description containing the RORG, (and the FUNC, and
         the TYPE if available), as well as, the EEP's "title" (e.g. for
         F60201: Rocker Switch, 2 Rocker; Light and Blind Control -
         Application Style 1).</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="serialize(EnOceanChannel[])" xml:id="org.osgi.service.enocean.descriptions.EnOceanMessageDescription.serialize-EnOceanChannel---">
         <title>public byte[] serialize(EnOceanChannel[] channels)</title>
         <formalpara role="parameter">
            <title>channels</title>
            <para>to be serialized.</para>
         </formalpara>
         <para role="description">
Serializes a series of <link linkend="org.osgi.service.enocean.EnOceanChannel">EnOceanChannel</link> objects into the
 corresponding byte[] sequence.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>serialized value.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the given channels is null.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="EnOceanMessageDescriptionSet" xml:id="org.osgi.service.enocean.descriptions.EnOceanMessageDescriptionSet">
      <title>public interface EnOceanMessageDescriptionSet</title>
      <para>
This interface represents an EnOcean Message Description Set.
 <link linkend="org.osgi.service.enocean.descriptions.EnOceanMessageDescriptionSet">EnOceanMessageDescriptionSet</link> is registered as an OSGi Service.
 Provides method to retrieve the <link linkend="org.osgi.service.enocean.descriptions.EnOceanMessageDescription">EnOceanMessageDescription</link> objects it
 documents.
   </para>
      <section role="method" xreflabel="getMessageDescription(int,int,int,int)" xml:id="org.osgi.service.enocean.descriptions.EnOceanMessageDescriptionSet.getMessageDescription-int-int-int-int-">
         <title>public EnOceanMessageDescription getMessageDescription(int rorg,int func,int type,int extra)</title>
         <formalpara role="parameter">
            <title>rorg</title>
            <para>the radio telegram type of the message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>func</title>
            <para>The func subtype of this message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>The type subselector.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>extra</title>
            <para>Some extra information; some
        <link linkend="org.osgi.service.enocean.descriptions.EnOceanMessageDescription">EnOceanMessageDescription</link> objects need an additional
        specifier. If not needed, has to be set to -1.</para>
         </formalpara>
         <para role="description">
Retrieves a <link linkend="org.osgi.service.enocean.descriptions.EnOceanMessageDescription">EnOceanMessageDescription</link> object according to its
 identifiers. See EnOcean Equipment Profile Specification for more
 details.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <link linkend="org.osgi.service.enocean.descriptions.EnOceanMessageDescription">EnOceanMessageDescription</link> object looked for, or null.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if there was an error related to the
         input arguments.   </para>
         </formalpara>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="service.enocean-bibliomixed_id_20140602_17h02_51_3"><title>Pervasive
      Service Composition in the Home Network</title>Bottaro, A., Gérodolle,
      A., Lalanda, P., 21st IEEE International Conference on Advanced
      Information Networking and Applications (AINA-07), Niagara Falls,
      Canada, May 2007</bibliomixed>

      <bibliomixed xml:id="service.enocean-bibliomixed_id_20140602_17h03_10_5"><title>EnOcean
      Equipment Profiles v2.6.2</title>EnOcean Alliance,
      https://www.enocean-alliance.org/en/enocean_standard/, November 19,
      2014</bibliomixed>

      <bibliomixed xml:id="service.enocean-bibliomixed_id_20140602_17h03_19_6"><title>EnOcean
      System Specification - Remote Management v2.0</title>EnOcean Alliance,
      March 06, 2014</bibliomixed>

      <bibliomixed xml:id="service.enocean-bibliomixed_id_20140602_17h03_37_8"><title>EnOcean
      System Specification - EnOcean Serial Protocol v1.17</title>EnOcean
      Alliance, August 2, 2011</bibliomixed>

      <bibliomixed xml:id="service.enocean-bibliomixed_id_20140602_17h03_46_9"><title>EnOcean
      System Specification - Security of EnOcean Radio Networks
      v1.9</title>EnOcean Alliance, July 26, 2013</bibliomixed>

      <bibliomixed xml:id="service.enocean-bibliomixed_id_20150105_16h26_16_99"><title>EnOcean
      Remote Commissioning Summary v1.0</title>EnOcean Alliance,
      https://www.enocean-alliance.org/en/downloads/, December 01,
      2014</bibliomixed>

      <bibliomixed xml:id="service.enocean-reference.service.pid"><title>Persistent
      Identifier (PID)</title>OSGi Core Release, Service Layer</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="141" version="5" xml:id="service.dal" xml:base="../141/service.dal.xml">
  <title>Device Abstraction Layer Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.dal-version" linkend="org.osgi.service.dal"/></releaseinfo>
  </info>

  <section xml:id="service.dal-introduction">
    <title>Introduction</title>

    <para>The Internet-of-Things (IoT) has a major impact in the IT industry.
    It requires backend systems to receive information from sensors,
    actuators, and appliances in various vertical markets such as Smart Home,
    eHealth, industrial automation, logistics, and automotive telematics.
    Application developers have to face the still increasing amount of
    communication protocols which are the major hurdle for
    interoperability.</para>

    <para>The Device Abstraction Layer specification provides a unified
    interface for application developers to interact with sensor, devices,
    etc. connected to a gateway. Application developers don't have to deal
    with protocol specific details which simplifies the development of their
    applications.</para>

    <para>The remote device control provides an opportunity to save energy, to
    support better security, to save your time during daily tasks and more.
    The devices can play different roles in their networks as event reporters,
    controllers, etc. That dynamic behavior is well mappable to the dynamic
    OSGi service registry. When a new device is available in the network,
    there is a registration of a <code>Device</code> service. It realizes
    basic set of management operations and provides a rich set of properties.
    The applications can track the device status, read descriptive information
    and follow the device relations. A set of functions can belong to a single
    device. They represent the device operations and related properties in an
    atomic way. The device functions can be found in the OSGi service
    registry. The applications are allowed to get directly the required
    functions if they don't need information about the device. For example,
    light device is registered as <code>Device</code> service and there is
    <code>Function</code> service to turn on and turn off the light. The
    application can operate with the light control service without access to
    the device service.</para>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Device</emphasis> - represents the device in the
          OSGi service registry. It's described with a set of service
          properties and provides basic management operations.</para>
        </listitem>

        <listitem>
          <para><emphasis>Function</emphasis> - atomic functional entity like
          switch or sensor. The function can belong to a device. The function
          provides a set of properties and operations.</para>
        </listitem>

        <listitem>
          <para><emphasis>FunctionEvent</emphasis> - asynchronous event. It's
          posted through <code>EventAdmin</code> service and notifies for
          <code>Function</code> property change.</para>
        </listitem>

        <listitem>
          <para><emphasis>FunctionData</emphasis> - data structure which
          carries <code>Function</code> property value with extra
          metadata.</para>
        </listitem>

        <listitem>
          <para><emphasis>PropertyMetadata</emphasis> and
          <emphasis>OperationMetadata</emphasis> - contain metadata about the
          <code>Function</code> properties and operations.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>Device Abstraction Layer Overview</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="service.dal.overview.diagram.svg" width="80%"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section xml:id="service.dal-device.access.category">
    <title>Device Category</title>

    <para>The device category defined in the scope of the Device Access
    service specification is called <code>DAL</code>. <xref linkend="org.osgi.service.dal.Device.DEVICE_CATEGORY" xrefstyle="hyperlink"/> constant contains the category name.</para>
  </section>

  <section xml:id="service.dal-device.service">
    <title>Device Service</title>

    <para>The <xref linkend="org.osgi.service.dal.Device" xrefstyle="hyperlink"/> interface is dedicated to a common access to the
    devices provided by different protocols. It can be mapped one to one with
    the physical device, but can be mapped only with a given functional part
    of the device. Another mapping can be a device realized with a set of
    <xref linkend="org.osgi.service.dal.Device" xrefstyle="hyperlink"/>
    services and different relations between them. <xref linkend="org.osgi.service.dal.Device" xrefstyle="hyperlink"/> service can
    represent pure software unit. For example, it can simulate the real device
    work. There are basic management operations for removal and property
    access. New protocol devices can be supported with the registration of new
    <xref linkend="org.osgi.service.dal.Device" xrefstyle="hyperlink"/>
    services.</para>

    <para>If the underlying protocol and the implementation allow, the <xref linkend="org.osgi.service.dal.Device" xrefstyle="hyperlink"/> services
    must be registered again after the OSGi framework restarts. The service
    properties must be restored, the supported functions must be registered
    and <xref linkend="org.osgi.service.dal.Device" xrefstyle="hyperlink"/>
    relations must be visible to the applications.</para>

    <section>
      <title>Device Service Properties</title>

      <para>The OSGi service registry has the advantage of being easily
      accessible. The services can be filtered and accessed with their
      properties. The <xref linkend="org.osgi.service.dal.Device" xrefstyle="hyperlink"/> service has a rich set of such properties:
      <itemizedlist>
          <listitem>
            <para><xref linkend="org.osgi.service.dal.Device.SERVICE_UID" xrefstyle="hyperlink"/> – Specifies the device unique identifier.
            It's a mandatory property. The value type is
            <code>java.lang.String</code>. To simplify the unique identifier
            generation, the property value must follow the rule:</para>

            <programlisting>UID ::= driver-name ':' device-id</programlisting>

            <itemizedlist>
              <listitem>
                <para>UID – device unique identifier</para>
              </listitem>

              <listitem>
                <para>driver-name – the value of the
                <code>Device.SERVICE_DRIVER</code> service property</para>
              </listitem>

              <listitem>
                <para>device-id – device unique identifier in the scope of the
                driver</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.Device.SERVICE_REFERENCE_UIDS" xrefstyle="hyperlink"/> – Specifies the reference device unique
            identifiers. It's an optional property. The value type is
            <code>java.lang.String[]</code>. It can be used to represent
            different relationships between the devices. For example, The
            EnOcean controller can have a reference to the USB dongle.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.Device.SERVICE_DRIVER" xrefstyle="hyperlink"/> – Specifies the device driver name. For
            example, EnOcean, Z-Wave, Bluetooth, etc. It's a mandatory
            property. The value type is <code>java.lang.String</code>.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.Device.SERVICE_NAME" xrefstyle="hyperlink"/> – Specifies the device name. It's an
            optional property. The value type is
            <code>java.lang.String</code>.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.Device.SERVICE_STATUS" xrefstyle="hyperlink"/> – Specifies the current device status.
            It's a mandatory property. The value type
            <code>java.lang.Integer</code>. The possible values are:</para>

            <itemizedlist>
              <listitem>
                <para><xref linkend="org.osgi.service.dal.Device.STATUS_REMOVED" xrefstyle="hyperlink"/> – Indicates that the device has been
                removed from the network. That status must be set as the last
                device status and after that the device service can be
                unregistered from the service registry. The status is
                available for stale device services too. All transitions to
                this status are described in <xref linkend="service.dal-status.transitions.removed"/>.</para>
              </listitem>

              <listitem>
                <para><xref linkend="org.osgi.service.dal.Device.STATUS_OFFLINE" xrefstyle="hyperlink"/> – Indicates that the device is
                currently not available for operations. The end device is
                available in the network and can become online later. The
                controller is unplugged or there is no connection. All
                transitions to and from this status are described in detail in
                <xref linkend="service.dal-status.transitions.offline"/>.</para>
              </listitem>

              <listitem>
                <para><xref linkend="org.osgi.service.dal.Device.STATUS_ONLINE" xrefstyle="hyperlink"/> – Indicates that the device is
                currently available for operations. The recent communication
                with the device has been passed through. All transitions to
                and from this status are described in detail in <xref linkend="service.dal-status.transitions.online"/>.</para>
              </listitem>

              <listitem>
                <para><xref linkend="org.osgi.service.dal.Device.STATUS_PROCESSING" xrefstyle="hyperlink"/> – Indicates that the device is
                currently busy with an operation. All transitions to and from
                this status are described in detail in <xref linkend="service.dal-status.transitions.processing"/>.</para>
              </listitem>

              <listitem>
                <para><xref linkend="org.osgi.service.dal.Device.STATUS_NOT_INITIALIZED" xrefstyle="hyperlink"/> – Indicates that the device is
                currently not initialized. Some protocols don't provide device
                information right after the device is connected. The device
                can be initialized later when it's awakened. All transitions
                to and from this status are described in detail in <xref linkend="service.dal-status.transitions.not.initialized"/>.</para>
              </listitem>

              <listitem>
                <para><xref linkend="org.osgi.service.dal.Device.STATUS_NOT_CONFIGURED" xrefstyle="hyperlink"/> – Indicates that the device is
                currently not configured. The device can require additional
                actions to become completely connected to the network. All
                transitions to and from this status are described in detail in
                <xref linkend="service.dal-status.transitions.not.configured"/>.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.Device.SERVICE_STATUS_DETAIL" xrefstyle="hyperlink"/> – Provides the reason for the current
            device status. It's an optional property. The property value
            cannot be externally set or modified. The value type is
            <code>java.lang.Integer</code>. There are two value categories.
            Positive values indicate the reason for the current status like
            <xref linkend="org.osgi.service.dal.Device.STATUS_DETAIL_CONNECTING" xrefstyle="hyperlink"/>. Negative values indicate errors related
            to the current device status like <xref linkend="org.osgi.service.dal.Device.STATUS_DETAIL_BROKEN" xrefstyle="hyperlink"/>. The list with defined status details
            is:</para>

            <itemizedlist>
              <listitem>
                <para><xref linkend="org.osgi.service.dal.Device.STATUS_DETAIL_CONNECTING" xrefstyle="hyperlink"/> – The device is currently connecting
                to the network. The status detail indicates the reason with a
                positive value <code>1</code>. The device status must be <xref linkend="org.osgi.service.dal.Device.STATUS_PROCESSING" xrefstyle="hyperlink"/>.</para>
              </listitem>

              <listitem>
                <para><xref linkend="org.osgi.service.dal.Device.STATUS_DETAIL_INITIALIZING" xrefstyle="hyperlink"/> – The device is currently in process
                of initialization. The status detail indicates the reason with
                a positive value <code>2</code>. The network controller
                initializing means that information about the network is
                currently read. The device status must be <xref linkend="org.osgi.service.dal.Device.STATUS_PROCESSING" xrefstyle="hyperlink"/>.</para>
              </listitem>

              <listitem>
                <para><xref linkend="org.osgi.service.dal.Device.STATUS_DETAIL_REMOVING" xrefstyle="hyperlink"/> – The device is leaving the network.
                The status detail indicates the reason with positive value
                <code>3</code>. The device status must be <xref linkend="org.osgi.service.dal.Device.STATUS_PROCESSING" xrefstyle="hyperlink"/>.</para>
              </listitem>

              <listitem>
                <para><xref linkend="org.osgi.service.dal.Device.STATUS_DETAIL_FIRMWARE_UPDATING" xrefstyle="hyperlink"/> – The device firmware is updating. The
                status detail indicates the reason with positive value
                <code>4</code>. The device status must be <xref linkend="org.osgi.service.dal.Device.STATUS_PROCESSING" xrefstyle="hyperlink"/>.</para>
              </listitem>

              <listitem>
                <para><xref linkend="org.osgi.service.dal.Device.STATUS_DETAIL_CONFIGURATION_UNAPPLIED" xrefstyle="hyperlink"/> – The device configuration is not
                applied. The status detail indicates an error with a negative
                value <code>-1</code>. The device status must be <xref linkend="org.osgi.service.dal.Device.STATUS_NOT_CONFIGURED" xrefstyle="hyperlink"/>.</para>
              </listitem>

              <listitem>
                <para><xref linkend="org.osgi.service.dal.Device.STATUS_DETAIL_BROKEN" xrefstyle="hyperlink"/> – The device is broken. The status
                detail indicates an error with a negative value
                <code>-2</code>. The device status must be <xref linkend="org.osgi.service.dal.Device.STATUS_OFFLINE" xrefstyle="hyperlink"/>.</para>
              </listitem>

              <listitem>
                <para><xref linkend="org.osgi.service.dal.Device.STATUS_DETAIL_COMMUNICATION_ERROR" xrefstyle="hyperlink"/> – The device communication is
                problematic. The status detail indicates an error with a
                negative value <code>-3</code>. The device status must be
                <xref linkend="org.osgi.service.dal.Device.STATUS_ONLINE" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.dal.Device.STATUS_NOT_INITIALIZED" xrefstyle="hyperlink"/>.</para>
              </listitem>

              <listitem>
                <para><xref linkend="org.osgi.service.dal.Device.STATUS_DETAIL_DATA_INSUFFICIENT" xrefstyle="hyperlink"/> – The device doesn't provide enough
                information and cannot be determined. The status detail
                indicates an error with a negative value <code>-4</code>. The
                device status must be <xref linkend="org.osgi.service.dal.Device.STATUS_NOT_INITIALIZED" xrefstyle="hyperlink"/>.</para>
              </listitem>

              <listitem>
                <para><xref linkend="org.osgi.service.dal.Device.STATUS_DETAIL_INACCESSIBLE" xrefstyle="hyperlink"/> – The device is not accessible and
                further communication is not possible. The status detail
                indicates an error with a negative value <code>-5</code>. The
                device status must be <xref linkend="org.osgi.service.dal.Device.STATUS_OFFLINE" xrefstyle="hyperlink"/>.</para>
              </listitem>

              <listitem>
                <para><xref linkend="org.osgi.service.dal.Device.STATUS_DETAIL_CONFIGURATION_ERROR" xrefstyle="hyperlink"/> – The device cannot be configured. The
                status detail indicates an error with a negative value
                <code>-6</code>. The device status must be <xref linkend="org.osgi.service.dal.Device.STATUS_NOT_CONFIGURED" xrefstyle="hyperlink"/>.</para>
              </listitem>

              <listitem>
                <para><xref linkend="org.osgi.service.dal.Device.STATUS_DETAIL_DUTY_CYCLE" xrefstyle="hyperlink"/> – The device is in duty cycle. The
                status detail indicates an error with a negative value
                <code>-7</code>. The device status must be <xref linkend="org.osgi.service.dal.Device.STATUS_OFFLINE" xrefstyle="hyperlink"/>.</para>
              </listitem>
            </itemizedlist>

            <para>Custom status details are allowed, but they must not overlap
            the specified codes. To prevent possible collisions with further
            updates, custom codes must be greater than <code>100</code> and
            less than <code>-100</code>. <xref linkend="service.dal-table.status.detail.mapping"/> contains the
            mapping of the status details to the statuses.</para>

            <table xml:id="service.dal-table.status.detail.mapping">
              <title>Status detail to status mapping.</title>

              <tgroup cols="2">
                <thead>
                  <row>
                    <entry>Status Detail</entry>

                    <entry>Status</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry><code>CONNECTING</code></entry>

                    <entry><code>PROCESSING</code></entry>
                  </row>

                  <row>
                    <entry><code>INITIALIZING</code></entry>

                    <entry><code>PROCESSING</code></entry>
                  </row>

                  <row>
                    <entry><code>REMOVING</code></entry>

                    <entry><code>PROCESSING</code></entry>
                  </row>

                  <row>
                    <entry><code>FIRMWARE_UPDATING</code></entry>

                    <entry><code>PROCESSING</code></entry>
                  </row>

                  <row>
                    <entry><code>CONFIGURATION_UNAPPLIED</code></entry>

                    <entry><code>NOT_CONFIGURED</code></entry>
                  </row>

                  <row>
                    <entry><code>BROKEN</code></entry>

                    <entry><code>OFFLINE</code></entry>
                  </row>

                  <row>
                    <entry><code>COMMUNICATION_ERROR</code></entry>

                    <entry><code>ONLINE, NOT_INITIALIZED</code></entry>
                  </row>

                  <row>
                    <entry><code>DATA_INSUFFICIENT</code></entry>

                    <entry><code>NOT_INITIALIZED</code></entry>
                  </row>

                  <row>
                    <entry><code>INACCESSIBLE</code></entry>

                    <entry><code>OFFLINE</code></entry>
                  </row>

                  <row>
                    <entry><code>CONFIGURATION_ERROR</code></entry>

                    <entry><code>NOT_CONFIGURED</code></entry>
                  </row>

                  <row>
                    <entry><code>DUTY_CYCLE</code></entry>

                    <entry><code>OFFLINE</code></entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.Device.SERVICE_HARDWARE_VENDOR" xrefstyle="hyperlink"/> – Specifies the device hardware vendor.
            It's an optional property. The value type is
            <code>java.lang.String</code>.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.Device.SERVICE_HARDWARE_VERSION" xrefstyle="hyperlink"/> – Specifies the device hardware version.
            It's an optional property. The value type is
            <code>java.lang.String</code>.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.Device.SERVICE_FIRMWARE_VENDOR" xrefstyle="hyperlink"/> – Specifies the device firmware vendor.
            It's an optional property. The value type is
            <code>java.lang.String</code>.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.Device.SERVICE_FIRMWARE_VERSION" xrefstyle="hyperlink"/> – Specifies the device firmware version.
            It's an optional property. The value type is
            <code>java.lang.String</code>.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.Device.SERVICE_TYPES" xrefstyle="hyperlink"/> – Specifies the device types. It's an
            optional property. The value type is
            <code>java.lang.String[]</code>.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.Device.SERVICE_MODEL" xrefstyle="hyperlink"/> – Specifies the device model. It's an
            optional property. The value type is
            <code>java.lang.String</code>.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.Device.SERVICE_SERIAL_NUMBER" xrefstyle="hyperlink"/> – Specifies the device serial number. It's
            an optional property. The value type is
            <code>java.lang.String</code>.</para>
          </listitem>
        </itemizedlist></para>

      <para>The next code snippet prints all online devices. <programlisting>ServiceReference[] deviceSRefs = context.getServiceReferences(
    Device.class.getName(),
    '(' + Device.SERVICE_STATUS + '=' + Device.STATUS_ONLINE + ')');
if (deviceSRefs != null) {
    for (int i = 0; i &lt; deviceSRefs.length; i++) {
        printDevice(deviceSRefs[i]);
    }
}</programlisting></para>

      <para>Applications need to have an access to the device properties. For
      convenience, there are helper methods: <itemizedlist>
          <listitem>
            <para><xref linkend="org.osgi.service.dal.Device.getServiceProperty-String-" xrefstyle="hyperlink"/> – Returns the current value of the
            specified property. The method will return the same value as
            <code>org.osgi.framework.ServiceReference.getProperty(String)</code>
            for the service reference of this device.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.Device.getServicePropertyKeys--" xrefstyle="hyperlink"/> – Returns an array with all device service
            property keys. The method will return the same value as
            <code>org.osgi.framework.ServiceReference.getPropertyKeys()</code>
            for the service reference of this device.</para>
          </listitem>
        </itemizedlist></para>
    </section>

    <section xml:id="service.dal-device.registration">
      <title>Device Registration</title>

      <para>The devices are registered as services in the OSGi service
      registry. The service interface is
      <code>org.osgi.service.dal.Device</code>. There is a registration order.
      <xref linkend="org.osgi.service.dal.Device" xrefstyle="hyperlink"/>
      services are registered last on start up. Before their registration,
      there is <xref linkend="org.osgi.service.dal.Function" xrefstyle="hyperlink"/> service registration. The function registration
      procedure is described in <xref linkend="service.dal-function.registration"/>.</para>

      <para>The OSGi service registry provides an access to the services, but
      there are no management operations like remove a given service. The
      service provider is responsible to register and unregister own services.
      That design doesn't provide an option to remove the device services. The
      <xref linkend="org.osgi.service.dal.Device" xrefstyle="hyperlink"/>
      interface fills this gap with <xref linkend="org.osgi.service.dal.Device.remove--" xrefstyle="hyperlink"/>
      method. It's a callback to the service provider to remove the device
      from the network. The method can be optionally implemented.
      <code>java.lang.UnsupportedOperationException</code> can be thrown if
      the method is not supported. When the <xref linkend="org.osgi.service.dal.Device.remove--" xrefstyle="hyperlink"/>
      is called: <itemizedlist>
          <listitem>
            <para>An appropriate command will be synchronously send to the
            device. As a result it can leave the network.</para>
          </listitem>

          <listitem>
            <para>The device status will be set to <xref linkend="org.osgi.service.dal.Device.STATUS_REMOVED" xrefstyle="hyperlink"/>.</para>
          </listitem>

          <listitem>
            <para>The related device service will be unregistered from the
            OSGi service registry.</para>
          </listitem>
        </itemizedlist> There is an unregistration order. The registration
      reverse order is used when the services are unregistered. <xref linkend="org.osgi.service.dal.Device" xrefstyle="hyperlink"/> services
      are unregistered first before <xref linkend="org.osgi.service.dal.Function" xrefstyle="hyperlink"/>
      services.</para>
    </section>

    <section>
      <title>Reference Devices</title>

      <para><xref linkend="org.osgi.service.dal.Device" xrefstyle="hyperlink"/> service can have a reference to other devices.
      That link can be used to represent different relationships between
      devices. For example, the EnOcean dongle can be used as USB Device and
      EnOcean network controller <xref linkend="org.osgi.service.dal.Device" xrefstyle="hyperlink"/>. The network controller device can have a
      reference to the physical USB device as it's depicted on the next
      diagram.</para>

      <figure pgwide="1">
        <title>Device Reference</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="service.dal.device.reference.svg" width="15%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The related service property is <xref linkend="org.osgi.service.dal.Device.SERVICE_REFERENCE_UIDS" xrefstyle="hyperlink"/>.</para>
    </section>

    <section xml:id="service.dal-status.transitions">
      <title>Device Status Transitions</title>

      <para>The device status reveals the device availability. It can
      demonstrate that device is currently not available for operations or
      that the device requires some additional configuration steps. The status
      can move between the different values according to the rules defined in
      this section. The status transitions are summarized in <xref linkend="service.dal-table.device.status.transitions"/>, visualized on
      <xref linkend="service.dal-figure.device.status.transitions"/> and
      described in detail in the next sections. The initial device status is
      always <xref linkend="org.osgi.service.dal.Device.STATUS_PROCESSING" xrefstyle="hyperlink"/>. When device info is processed, the device can
      go to another status. The last possible device status is <xref linkend="org.osgi.service.dal.Device.STATUS_REMOVED" xrefstyle="hyperlink"/>. The status must be set when the device is
      removed from the network. After that status, the device service will be
      unregistered.</para>

      <figure pgwide="1" xml:id="service.dal-figure.device.status.transitions">
        <title>Device Status Transitions</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="service.dal.status.transitions.svg" width="80%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <table xml:id="service.dal-table.device.status.transitions">
        <title>Device Status Transitions</title>

        <tgroup cols="7">
          <thead>
            <row>
              <entry>From\To Status</entry>

              <entry><code>PROCESSING</code></entry>

              <entry><code>ONLINE</code></entry>

              <entry><code>OFFLINE</code></entry>

              <entry><code>NOT INITIALIZED</code></entry>

              <entry><code>NOT CONFIGURED</code></entry>

              <entry><code>REMOVED</code></entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>PROCESSING</code></entry>

              <entry>-</entry>

              <entry>Initial device data has been read.</entry>

              <entry>Device is not accessible.</entry>

              <entry>Initial device data has been partially read.</entry>

              <entry>Device has a pending configuration.</entry>

              <entry>Device has been removed.</entry>
            </row>

            <row>
              <entry><code>ONLINE</code></entry>

              <entry>Device data is processing.</entry>

              <entry>-</entry>

              <entry>Device is not accessible.</entry>

              <entry>-</entry>

              <entry>Device has a new pending configuration.</entry>

              <entry>Device has been removed.</entry>
            </row>

            <row>
              <entry><code>OFFLINE</code></entry>

              <entry>Device data is processing.</entry>

              <entry>Device data has been read.</entry>

              <entry>-</entry>

              <entry>-</entry>

              <entry>Device has a pending configuration.</entry>

              <entry>Device has been removed.</entry>
            </row>

            <row>
              <entry><code>NOT INITIALIZED</code></entry>

              <entry>Device data is processing.</entry>

              <entry>-</entry>

              <entry>Device is not accessible.</entry>

              <entry>-</entry>

              <entry>-</entry>

              <entry>Device has been removed.</entry>
            </row>

            <row>
              <entry><code>NOT CONFIGURED</code></entry>

              <entry>Device data is processing.</entry>

              <entry>Device pending configuration is satisfied.</entry>

              <entry>Device is not accessible.</entry>

              <entry>-</entry>

              <entry>-</entry>

              <entry>Device has been removed.</entry>
            </row>

            <row>
              <entry><code>REMOVED</code></entry>

              <entry>-</entry>

              <entry>-</entry>

              <entry>-</entry>

              <entry>-</entry>

              <entry>-</entry>

              <entry>-</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <section xml:id="service.dal-status.transitions.removed">
        <title>Removed</title>

        <para>The device can go to <xref linkend="org.osgi.service.dal.Device.STATUS_REMOVED" xrefstyle="hyperlink"/> from any other status. Once reached, the
        device status cannot be updated any more. The device has been removed
        from the network and the device service is unregistered from the OSGi
        service registry. If there are stale references to the <xref linkend="org.osgi.service.dal.Device" xrefstyle="hyperlink"/> service,
        their status will be set to <xref linkend="org.osgi.service.dal.Device.STATUS_REMOVED" xrefstyle="hyperlink"/>.</para>

        <para>The common way for a given device to be removed is <xref linkend="org.osgi.service.dal.Device.remove--" xrefstyle="hyperlink"/>
        method. When the method returns, the device status will be <xref linkend="org.osgi.service.dal.Device.STATUS_REMOVED" xrefstyle="hyperlink"/>. It requires a synchronous execution of the
        operation.</para>
      </section>

      <section xml:id="service.dal-status.transitions.offline">
        <title>Offline</title>

        <para>The <xref linkend="org.osgi.service.dal.Device.STATUS_OFFLINE" xrefstyle="hyperlink"/> indicates that the device is currently not
        available for operations. That status can be set, because of different
        reasons. The network controller has been unplugged, the connection to
        the device has been lost, etc. The device can move to this status from
        any other status with the exception of <xref linkend="org.osgi.service.dal.Device.STATUS_REMOVED" xrefstyle="hyperlink"/>. Transitions to and from this status are:
        <itemizedlist>
            <listitem>
              <para>From <code>STATUS_OFFLINE</code> to
              <code>STATUS_REMOVED</code> – The device has been removed. The
              status can be set as a result of <xref linkend="org.osgi.service.dal.Device.remove--" xrefstyle="hyperlink"/> method call.</para>
            </listitem>

            <listitem>
              <para>From <code>STATUS_OFFLINE</code> to
              <code>STATUS_PROCESSING</code> – Device data is
              processing.</para>
            </listitem>

            <listitem>
              <para>From <code>STATUS_OFFLINE</code> to
              <code>STATUS_NOT_CONFIGURED</code> – The device has a pending
              configuration.</para>
            </listitem>

            <listitem>
              <para>From <code>STATUS_OFFLINE</code> to
              <code>STATUS_ONLINE</code> – Device data has been read and the
              device is currently available for operations.</para>
            </listitem>

            <listitem>
              <para>From <code>STATUS_OFFLINE</code> to
              <code>STATUS_NOT_INITIALIZED</code> – That transition is not
              possible, because the status have to go through
              <code>STATUS_PROCESSING</code>. If the processing is
              unsuccessful, <code>STATUS_NOT_INITIALIZED</code> will be
              set.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_OFFLINE</code> from
              <code>STATUS_REMOVED</code> – That transition is not possible.
              If the device has been removed, the service will be unregistered
              from the service registry.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_OFFLINE</code> from
              <code>STATUS_PROCESSING</code> – The device is not accessible
              any more while device data is processing.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_OFFLINE</code> from
              <code>STATUS_NOT_CONFIGURED</code> – The device with pending
              configuration is not accessible any more.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_OFFLINE</code> from
              <code>STATUS_ONLINE</code> – The online device is not accessible
              any more.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_OFFLINE</code> from
              <code>STATUS_NOT_INITIALIZED</code> – The not initialized device
              is not accessible any more.</para>
            </listitem>
          </itemizedlist> The possible transitions are summarized on <xref linkend="service.dal-figure.device.status.transitions.offline"/>.
        <figure pgwide="1" xml:id="service.dal-figure.device.status.transitions.offline">
            <title>Transitions to and from STATUS_OFFLINE</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="service.dal.status.transitions.offline.svg" width="70%"/>
              </imageobject>
            </mediaobject>
          </figure></para>
      </section>

      <section xml:id="service.dal-status.transitions.online">
        <title>Online</title>

        <para>The <xref linkend="org.osgi.service.dal.Device.STATUS_ONLINE" xrefstyle="hyperlink"/> indicates that the device is currently
        available for operations. The online devices are initialized and ready
        for use. Transitions to and from this status are: <itemizedlist>
            <listitem>
              <para>From <code>STATUS_ONLINE</code> to
              <code>STATUS_REMOVED</code> – The device has been removed. The
              status can be set as a result of <xref linkend="org.osgi.service.dal.Device.remove--" xrefstyle="hyperlink"/> method call.</para>
            </listitem>

            <listitem>
              <para>From <code>STATUS_ONLINE</code> to
              <code>STATUS_PROCESSING</code> – The device data is
              processing.</para>
            </listitem>

            <listitem>
              <para>From <code>STATUS_ONLINE</code> to
              <code>STATUS_NOT_CONFIGURED</code> – The device has a pending
              configuration.</para>
            </listitem>

            <listitem>
              <para>From <code>STATUS_ONLINE</code> to
              <code>STATUS_OFFLINE</code> – The online device is not
              accessible any more.</para>
            </listitem>

            <listitem>
              <para>From <code>STATUS_ONLINE</code> to
              <code>STATUS_NOT_INITIALIZED</code> – That transition is not
              possible. Online devices are initialized.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_ONLINE</code> from
              <code>STATUS_REMOVED</code> – That transition is not possible.
              If the device has been removed, the service will be unregistered
              from the service registry.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_ONLINE</code> from
              <code>STATUS_PROCESSING</code> – Initial device data has been
              read. The device is available for operations.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_ONLINE</code> from
              <code>STATUS_NOT_CONFIGURED</code> – The device pending
              configuration is satisfied.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_ONLINE</code> from
              <code>STATUS_OFFLINE</code> – The device is accessible for
              operations.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_ONLINE</code> from
              <code>STATUS_NOT_INITIALIZED</code> – That transition is not
              possible. The device data has to be processed and then the
              device can become online. Intermediate status
              <code>STATUS_PROCESSING</code> will be used.</para>
            </listitem>
          </itemizedlist> The possible transitions are summarized on <xref linkend="service.dal-figure.device.status.transitions.online"/>.
        <figure pgwide="1" xml:id="service.dal-figure.device.status.transitions.online">
            <title>Transitions to and from STATUS_ONLINE</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="service.dal.status.transitions.online.svg" width="90%"/>
              </imageobject>
            </mediaobject>
          </figure></para>
      </section>

      <section xml:id="service.dal-status.transitions.processing">
        <title>Processing</title>

        <para>The status indicates that the device is currently busy with an
        operation. It can be time consuming operation and can result to any
        other status. The operation processing can be reached by any other
        status except <xref linkend="org.osgi.service.dal.Device.STATUS_REMOVED" xrefstyle="hyperlink"/>. For example, offline device requires some
        data processing to become online. It will apply this status sequence:
        <code>STATUS_OFFLINE</code>, <code>STATUS_PROCESSING</code> and
        <code>STATUS_ONLINE</code>. Transitions to and from this status are:
        <itemizedlist>
            <listitem>
              <para>From <code>STATUS_PROCESSING</code> to
              <code>STATUS_REMOVED</code> – The device has been removed. The
              status can be set as a result of <xref linkend="org.osgi.service.dal.Device.remove--" xrefstyle="hyperlink"/> method call.</para>
            </listitem>

            <listitem>
              <para>From <code>STATUS_PROCESSING</code> to
              <code>STATUS_ONLINE</code> – Initial device data has been read.
              The device is available for operations.</para>
            </listitem>

            <listitem>
              <para>From <code>STATUS_PROCESSING</code> to
              <code>STATUS_NOT_CONFIGURED</code> – The device has a pending
              configuration.</para>
            </listitem>

            <listitem>
              <para>From <code>STATUS_PROCESSING</code> to
              <code>STATUS_OFFLINE</code> – The device is not accessible any
              more.</para>
            </listitem>

            <listitem>
              <para>From <code>STATUS_PROCESSING</code> to
              <code>STATUS_NOT_INITIALIZED</code> – The device initial data is
              partially read.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_PROCESSING</code> from
              <code>STATUS_REMOVED</code> – That transition is not possible.
              If the device has been removed, the service will be unregistered
              from the service registry.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_PROCESSING</code> from
              <code>STATUS_ONLINE</code> – The device is busy with an
              operation.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_PROCESSING</code> from
              <code>STATUS_NOT_CONFIGURED</code> – The device pending
              configuration is satisfied and the device is busy with an
              operation.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_PROCESSING</code> from
              <code>STATUS_OFFLINE</code> – The device is busy with an
              operation.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_PROCESSING</code> from
              <code>STATUS_NOT_INITIALIZED</code> – The device initial data is
              processing.</para>
            </listitem>
          </itemizedlist> The possible transitions are summarized on <xref linkend="service.dal-figure.device.status.transitions.processing"/>.
        <figure pgwide="1" xml:id="service.dal-figure.device.status.transitions.processing">
            <title>Transitions to and from STATUS_PROCESSING</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="service.dal.status.transitions.processing.svg" width="90%"/>
              </imageobject>
            </mediaobject>
          </figure></para>
      </section>

      <section xml:id="service.dal-status.transitions.not.initialized">
        <title>Not Initialized</title>

        <para>The status indicates that the device is currently not
        initialized. Some protocols don't provide device information right
        after the device is connected. The device can be initialized later
        when it's awakened. The not initialized device requires some data
        processing to become online. <xref linkend="org.osgi.service.dal.Device.STATUS_PROCESSING" xrefstyle="hyperlink"/> is used as an intermediate status. Transitions
        to and from this status are: <itemizedlist>
            <listitem>
              <para>From <code>STATUS_NOT_INITIALIZED</code> to
              <code>STATUS_REMOVED</code> – The device has been removed. The
              status can be set as a result of <xref linkend="org.osgi.service.dal.Device.remove--" xrefstyle="hyperlink"/> method call.</para>
            </listitem>

            <listitem>
              <para>From <code>STATUS_NOT_INITIALIZED</code> to
              <code>STATUS_PROCESSING</code> – The device data is
              processing.</para>
            </listitem>

            <listitem>
              <para>From <code>STATUS_NOT_INITIALIZED</code> to
              <code>STATUS_NOT_CONFIGURED</code> – That transition is not
              possible. Device requires some data processing.</para>
            </listitem>

            <listitem>
              <para>From <code>STATUS_NOT_INITIALIZED</code> to
              <code>STATUS_OFFLINE</code> – The device is not accessible any
              more.</para>
            </listitem>

            <listitem>
              <para>From <code>STATUS_NOT_INITIALIZED</code> to
              <code>STATUS_ONLINE</code> – That transition is not possible.
              Device requires some data processing to become online.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_NOT_INITIALIZED</code> from
              <code>STATUS_REMOVED</code> – That transition is not possible.
              If the device has been removed, the service will be unregistered
              from the service registry.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_NOT_INITIALIZED</code> from
              <code>STATUS_PROCESSING</code> – Device data is partially
              read.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_NOT_INITIALIZED</code> from
              <code>STATUS_NOT_CONFIGURED</code> – That transition is not
              possible. When device pending configuration is satisfied, the
              device requires additional data processing.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_NOT_INITIALIZED</code> from
              <code>STATUS_OFFLINE</code> – That transition is not possible.
              Device requires some data processing and then can become not
              initialized.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_NOT_INITIALIZED</code> from
              <code>STATUS_ONLINE</code> – That transition is not possible.
              The online device is initialized.</para>
            </listitem>
          </itemizedlist> The possible transitions are summarized on <xref linkend="service.dal-figure.device.status.transitions.not.initialized"/>.
        <figure pgwide="1" xml:id="service.dal-figure.device.status.transitions.not.initialized">
            <title>Transitions to and from STATUS_NOT_INITIALIZED</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="service.dal.status.transitions.not.initialized.svg" width="70%"/>
              </imageobject>
            </mediaobject>
          </figure></para>
      </section>

      <section xml:id="service.dal-status.transitions.not.configured">
        <title>Not Configured</title>

        <para>Indicates that the device is currently not configured. The
        device can require additional actions to become completely connected
        to the network. For example, a given device button has to be pushed.
        That status doesn't have transitions with <xref linkend="org.osgi.service.dal.Device.STATUS_NOT_INITIALIZED" xrefstyle="hyperlink"/>, because some data processing is required.
        Transitions to and from this status are: <itemizedlist>
            <listitem>
              <para>From <code>STATUS_NOT_CONFIGURED</code> to
              <code>STATUS_REMOVED</code> – The device has been removed. The
              status can be set as a result of <xref linkend="org.osgi.service.dal.Device.remove--" xrefstyle="hyperlink"/> method call.</para>
            </listitem>

            <listitem>
              <para>From <code>STATUS_NOT_CONFIGURED</code> to
              <code>STATUS_PROCESSING</code> – The device pending
              configuration is satisfied and some additional data processing
              is required.</para>
            </listitem>

            <listitem>
              <para>From <code>STATUS_NOT_CONFIGURED</code> to
              <code>STATUS_ONLINE</code> – The device pending configuration is
              satisfied.</para>
            </listitem>

            <listitem>
              <para>From <code>STATUS_NOT_CONFIGURED</code> to
              <code>STATUS_OFFLINE</code> – The device is not accessible any
              more.</para>
            </listitem>

            <listitem>
              <para>From <code>STATUS_NOT_CONFIGURED</code> to
              <code>STATUS_NOT_INITIALIZED</code> – That transition is not
              possible. When device pending configuration is satisfied, the
              device requires additional data processing.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_NOT_CONFIGURED</code> from
              <code>STATUS_REMOVED</code> – That transition is not possible.
              If the device has been removed, the service will be unregistered
              from the service registry.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_NOT_CONFIGURED</code> from
              <code>STATUS_PROCESSING</code> – Initial device data has been
              read but there is a pending configuration.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_NOT_CONFIGURED</code> from
              <code>STATUS_ONLINE</code> – The device has a pending
              configuration.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_NOT_CONFIGURED</code> from
              <code>STATUS_OFFLINE</code> – The device is going to be online,
              but has a pending configuration.</para>
            </listitem>

            <listitem>
              <para>To <code>STATUS_NOT_CONFIGURED</code> from
              <code>STATUS_NOT_INITIALIZED</code> – That transition is not
              possible. Device requires some data processing.</para>
            </listitem>
          </itemizedlist> The possible transitions are summarized on <xref linkend="service.dal-figure.device.status.transitions.not.configured"/>.
        <figure pgwide="1" xml:id="service.dal-figure.device.status.transitions.not.configured">
            <title>Transitions to and from STATUS_NOT_CONFIGURED</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="service.dal.status.transitions.not.configured.svg" width="100%"/>
              </imageobject>
            </mediaobject>
          </figure></para>
      </section>
    </section>
  </section>

  <section xml:id="service.dal-function">
    <title>Function Service</title>

    <para>The user applications have full control over the device with the
    <xref linkend="org.osgi.service.dal.Function" xrefstyle="hyperlink"/>
    services. Synchronous or asynchronous operations can trigger different
    actions. For example, turn on or off the light, can change the room
    temperature, send an user notification, etc. The action result can be
    reported immediately or later in case of concurrent execution. As a
    result, a <xref linkend="org.osgi.service.dal.Function" xrefstyle="hyperlink"/> property can be updated. The property is the
    device value container. It can provide, sensor information, meter data,
    the switch current position, etc. Different property access types allow
    the applications to read, write or receive events.</para>

    <section>
      <title>Function Service Properties</title>

      <para>The OSGi service registry has the advantage of being easily
      accessible. The services can be filtered and accessed with their
      properties. The function service has a rich set of such properties:
      <itemizedlist>
          <listitem>
            <para><xref linkend="org.osgi.service.dal.Function.SERVICE_UID" xrefstyle="hyperlink"/> – mandatory service property. The property
            value is the function unique identifier. The value type is
            <code>java.lang.String</code>. To simplify the unique identifier
            generation, the property value must follow the rule:</para>

            <programlisting>function UID ::= device-id ':' function-id</programlisting>

            <itemizedlist>
              <listitem>
                <para>function UID – function unique identifier</para>
              </listitem>

              <listitem>
                <para>device-id – the value of the Device.SERVICE_UID Device
                service property</para>
              </listitem>

              <listitem>
                <para>function-id – function identifier in the scope of the
                device</para>
              </listitem>
            </itemizedlist>

            <para>If the function is not bound to a device, the function
            unique identifier can be device independent.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.Function.SERVICE_TYPE" xrefstyle="hyperlink"/> – optional service property. The service
            property value contains the function type. For example, the sensor
            function can have different types like temperature, pressure, etc.
            The value type is <code>java.lang.String</code>.</para>

            <para>Organizations that want to use function types that do not
            clash with OSGi Alliance defined types should prefix their types
            in own namespace.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.Function.SERVICE_VERSION" xrefstyle="hyperlink"/> – optional service property. The service
            property value contains the function version. That version can
            point to specific implementation version and vary in the different
            vendor implementations. The value type is
            <code>java.lang.String</code>.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.Function.SERVICE_DEVICE_UID" xrefstyle="hyperlink"/> – optional service property. The property
            value is the device identifier. The function belongs to this
            device. The value type is <code>java.lang.String</code>.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.Function.SERVICE_REFERENCE_UIDS" xrefstyle="hyperlink"/> – optional service property. The service
            property value contains the reference function unique identifiers.
            The value type is <code>java.lang.String[]</code>. It can be used
            to represent different relationships between the functions.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.Function.SERVICE_DESCRIPTION" xrefstyle="hyperlink"/> – optional service property. The property
            value is the function description. The value type is
            <code>java.lang.String</code>.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.Function.SERVICE_OPERATION_NAMES" xrefstyle="hyperlink"/> – optional service property. The property
            is missing when there are no function operations and property must
            be set when there are function operations. The property value is
            the function operation names. The value type is
            <code>java.lang.String[]</code>. It's not possible to exist two or
            more function operations with the same name i.e. the operation
            overloading is not allowed.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.Function.SERVICE_PROPERTY_NAMES" xrefstyle="hyperlink"/> – optional service property. The property
            is missing when there are no function properties and property must
            be set when there are function properties. The property value is
            the function property names. The value type is
            <code>java.lang.String[]</code>. It's not possible to exist two or
            more function properties with the same name.</para>
          </listitem>
        </itemizedlist></para>
    </section>

    <section xml:id="service.dal-function.registration">
      <title>Function Registration</title>

      <para>On start up, the <code>Function</code> services are registered
      before the <xref linkend="org.osgi.service.dal.Device" xrefstyle="hyperlink"/> service. It's possible that <xref linkend="org.osgi.service.dal.Function.SERVICE_DEVICE_UID" xrefstyle="hyperlink"/> points to missing service at the moment of the
      registration. The reverse order is used when the services are
      unregistered. <xref linkend="org.osgi.service.dal.Device" xrefstyle="hyperlink"/> service is unregistered before the <xref linkend="org.osgi.service.dal.Function" xrefstyle="hyperlink"/>
      services. The device registration procedure is available in <xref linkend="service.dal-device.registration"/>.</para>

      <para>The <xref linkend="org.osgi.service.dal.Function" xrefstyle="hyperlink"/> service should be registered only under the
      function class hierarchy. Other classes can be used if there are no
      ambiguous representations. For example, an ambiguous representation can
      be a function registered under two independent function classes like
      <code>BinarySwitch</code> and <code>Meter</code>. In this example, both
      functions support the same property “state” with different meaning.
      <code>getPropertyMetadata(String propertyName)</code> method cannot
      determinate which property is requested. It can be
      <code>BinarySwitch</code> “state” or <code>Meter</code> “state”.</para>

      <para>To simplify the generic function discovery, the
      <code>Function</code> interface must be used for the service
      registration. In this way, the generic applications can easily find all
      services, which are functions in the service registry. Because of this
      rule, this registration is not allowed: <programlisting>context.registerService(MeterV1.class.getName(), this, regProps);</programlisting></para>

      <para>If the implementation would like to mark that there is a function,
      but no specific function interface exists, the registration can be:
      <programlisting>context.registerService(Function.class.getName(), this, regProps);</programlisting>
      Note that such functions usually don't have operations and
      properties.</para>
    </section>

    <section>
      <title>Function Interface</title>

      <para><xref linkend="org.osgi.service.dal.Function" xrefstyle="hyperlink"/> is built by a set of properties and operations.
      The function can have unique identifier, type, version, description,
      link to the <xref linkend="org.osgi.service.dal.Device" xrefstyle="hyperlink"/> service and information about the referenced
      functions. <xref linkend="org.osgi.service.dal.Function" xrefstyle="hyperlink"/> interface must be the base interface for all
      functions. If the device provider defines custom functions, all of them
      must extend <xref linkend="org.osgi.service.dal.Function" xrefstyle="hyperlink"/> interface. It provides a common access to the
      operations and properties metadata.</para>

      <para>There are some general type rules, which unify the access to the
      function data. They make easier the transfer over different protocols.
      All properties and operation arguments must use one of: <itemizedlist>
          <listitem>
            <para>Java primitive type or corresponding reference type.</para>
          </listitem>

          <listitem>
            <para>Numerical type i.e. the type which extends
            <code>java.lang.Number</code>. The numerical type must follow
            these conventions:</para>

            <itemizedlist>
              <listitem>
                <para>The type must provide a public static method called
                <code>valueOf</code> that returns an instance of the given
                type and takes a single <code>String</code> argument or a
                public constructor which takes a single <code>String</code>
                argument.</para>
              </listitem>
            </itemizedlist>

            <para><itemizedlist>
                <listitem>
                  <para>The <code>String</code> argument from the previous
                  bullet can be provided by <code>toString()</code> method of
                  the instance.</para>
                </listitem>
              </itemizedlist></para>
          </listitem>

          <listitem>
            <para><code>java.lang.String</code></para>
          </listitem>

          <listitem>
            <para>Java Bean, but its properties must use those rules. Java
            Bean is defined in <xref linkend="service.dal-ref.bean.spec"/>.</para>
          </listitem>

          <listitem>
            <para><code>java.util.Map</code> instance. The map keys can be
            <code>java.lang.String</code>. The values of a single type follow
            these rules.</para>
          </listitem>

          <listitem>
            <para>Array of defined types.</para>
          </listitem>
        </itemizedlist></para>

      <para>In order to provide common behavior, all functions must follow a
      set of common rules related to the implementation of their setters,
      getters, operations and events: <itemizedlist>
          <listitem>
            <para>The setter method must be executed synchronously. If the
            underlying protocol can return response to the setter call, it
            must be awaited. It simplifies the property value modification and
            doesn't require asynchronous callback.</para>
          </listitem>

          <listitem>
            <para>The operation method must be executed synchronously. If the
            underlying protocol can return an operation confirmation or
            response, it must be awaited. It simplifies the operation
            execution and doesn't require asynchronous callback.</para>
          </listitem>

          <listitem>
            <para>The getter must return the last know cached property value.
            The device implementation is responsible to keep that value up to
            date. It'll speed up the applications when the function property
            values are collected. The same cached value can be shared between
            a few requests instead of a few calls to the real device.</para>
          </listitem>

          <listitem>
            <para>The function operations, getters and setters must not
            override <code>java.lang.Object</code> and this interface methods.
            For example:</para>

            <itemizedlist>
              <listitem>
                <para><code>hashCode()</code> – it's
                <code>java.lang.Object</code> method and invalid function
                operation;</para>
              </listitem>

              <listitem>
                <para><code>wait()</code> – it's <code>java.lang.Object</code>
                method and invalid function operation;</para>
              </listitem>

              <listitem>
                <para><code>getClass()</code> – it's
                <code>java.lang.Object</code> method and invalid function
                getter;</para>
              </listitem>

              <listitem>
                <para><code>getPropertyMetadata(String propertyName)</code> –
                it's <code>org.osgi.service.dal.Function</code> method and
                invalid function getter.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist></para>
    </section>

    <section>
      <title>Function Operations</title>

      <para><xref linkend="org.osgi.service.dal.Function" xrefstyle="hyperlink"/> operations are the main callable units. They can
      perform a specific task on the device like turn on or turn off. They can
      be used by the applications to control the device. Operation names are
      available as a value of the service property <xref linkend="org.osgi.service.dal.Function.SERVICE_OPERATION_NAMES" xrefstyle="hyperlink"/>. The operations are identified by their names.
      It's not possible to exist two operations with the same name i.e.
      overloaded operations are not allowed. They cannot override the property
      accessor methods. The operations are regular java methods. That implies
      that they have zero or more arguments and zero or one return value. The
      operation arguments and return value must follow the general type
      rules.</para>

      <para>The operations can be optionally described with metadata. Metadata
      is accessible with <xref linkend="org.osgi.service.dal.Function.getOperationMetadata-String-" xrefstyle="hyperlink"/> method. The result provides metadata about the
      operation, operation arguments and result value. Operation arguments and
      result value are using the same metadata as the function properties. The
      full details are defined in the next section.</para>
    </section>

    <section xml:id="service.dal-function.properties">
      <title>Function Properties</title>

      <para><xref linkend="org.osgi.service.dal.Function" xrefstyle="hyperlink"/> properties are class fields. Their values can be
      read with getter methods and can be set with setter methods. The
      property names are available as a value of the service property <xref linkend="org.osgi.service.dal.Function.SERVICE_PROPERTY_NAMES" xrefstyle="hyperlink"/>. The properties are identified by their names.
      It's not possible to exist two properties with the same name.</para>

      <para>The function properties must be integrated according to these
      rules: <itemizedlist>
          <listitem>
            <para>Getter methods must be available for all properties with
            <xref linkend="org.osgi.service.dal.PropertyMetadata.ACCESS_READABLE" xrefstyle="hyperlink"/> access.</para>
          </listitem>

          <listitem>
            <para>Getter method must return a subclass of <xref linkend="org.osgi.service.dal.FunctionData" xrefstyle="hyperlink"/>.</para>
          </listitem>

          <listitem>
            <para>Setter methods must be available for all properties with
            <xref linkend="org.osgi.service.dal.PropertyMetadata.ACCESS_WRITABLE" xrefstyle="hyperlink"/> access.</para>
          </listitem>

          <listitem>
            <para>Setter methods can be any combination of: <itemizedlist>
                <listitem>
                  <para>Setter method which accepts a subclass of <xref linkend="org.osgi.service.dal.FunctionData" xrefstyle="hyperlink"/>.</para>
                </listitem>

                <listitem>
                  <para>Setter method which accepts the values used by the
                  <xref linkend="org.osgi.service.dal.FunctionData" xrefstyle="hyperlink"/> subclass, if there are no equal
                  types.</para>
                </listitem>
              </itemizedlist> It's possible to have only one or both of them.
            Examples: <itemizedlist>
                <listitem>
                  <para>There is <code>MyFunctionData</code> bean with
                  <code>BigDecimal</code> value for a <code>data</code>
                  property. Valid setters are <code>setData(MyFunctionData
                  data)</code> and <code>setData(BigDecimal
                  data)</code>.</para>
                </listitem>

                <listitem>
                  <para>There is <code>MySecondFunctionData</code> bean with
                  <code>BigDecimal</code> prefix and <code>BigDecimal</code>
                  suffix for a <code>data</code> property. The prefix and
                  suffix are using equal types and we cannot have a setter
                  with the values used by <code>MySecondFunctionData</code>.
                  The only one possible setter is
                  <code>setData(MySecondFunctionData data)</code>.</para>
                </listitem>
              </itemizedlist></para>
          </listitem>

          <listitem>
            <para>No methods are required for properties with <xref linkend="org.osgi.service.dal.PropertyMetadata.ACCESS_EVENTABLE" xrefstyle="hyperlink"/> access.</para>
          </listitem>
        </itemizedlist></para>

      <para>The accessor method names must be defined according to <xref linkend="service.dal-ref.bean.spec"/>.</para>

      <para>The properties can be optionally described with a set of metadata
      properties. The property values can be collected with <xref linkend="org.osgi.service.dal.Function.getPropertyMetadata-String-" xrefstyle="hyperlink"/> method. The method result is <xref linkend="org.osgi.service.dal.PropertyMetadata" xrefstyle="hyperlink"/>
      with: <itemizedlist>
          <listitem>
            <para>Minimum value – available through <xref linkend="org.osgi.service.dal.PropertyMetadata.getMinValue-String-" xrefstyle="hyperlink"/>. The minimum value can be different for
            the different units.</para>
          </listitem>

          <listitem>
            <para>Maximum value – available through <xref linkend="org.osgi.service.dal.PropertyMetadata.getMaxValue-String-" xrefstyle="hyperlink"/>. The maximum value can be different for
            the different units.</para>
          </listitem>

          <listitem>
            <para>Enumeration of values – available through <xref linkend="org.osgi.service.dal.PropertyMetadata.getEnumValues-String-" xrefstyle="hyperlink"/>. The array of the possible values is
            sorted in increasing order according to the given unit.</para>
          </listitem>

          <listitem>
            <para>Step – available through <xref linkend="org.osgi.service.dal.PropertyMetadata.getStep-String-" xrefstyle="hyperlink"/>. The difference between two values in
            series. For example, if the range is <code>[0, 100]</code>, the
            step can be <code>10</code>.</para>
          </listitem>

          <listitem>
            <para>Property access – available as a value in <xref linkend="org.osgi.service.dal.PropertyMetadata.getMetadata-String-" xrefstyle="hyperlink"/> result map. It's a bitmap of
            <code>java.lang.Integer</code> type and doesn't depend on the
            given unit. The access is available only for the function
            properties and it's missing for the operation arguments and result
            metadata. The bitmap can be any combination of:</para>

            <itemizedlist>
              <listitem>
                <para><xref linkend="org.osgi.service.dal.PropertyMetadata.ACCESS_READABLE" xrefstyle="hyperlink"/> – Marks the property as a readable.
                Function must provide a getter method for this property
                according to <xref linkend="service.dal-ref.bean.spec"/>.
                Function operations must not be overridden by this getter
                method.</para>
              </listitem>

              <listitem>
                <para><xref linkend="org.osgi.service.dal.PropertyMetadata.ACCESS_WRITABLE" xrefstyle="hyperlink"/> – Marks the property as writable.
                Function must provide a setter method for this property
                according to <xref linkend="service.dal-ref.bean.spec"/>.
                Function operations must not be overridden by this setter
                method.</para>
              </listitem>

              <listitem>
                <para><xref linkend="org.osgi.service.dal.PropertyMetadata.ACCESS_EVENTABLE" xrefstyle="hyperlink"/> – Marks the property as eventable.
                Function must not provide special methods because of this
                access type. <code>FunctionEvent</code> is sent on property
                change. Note that the event can be sent when there is no value
                change.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>Units - available as a value in <xref linkend="org.osgi.service.dal.PropertyMetadata.getMetadata-String-" xrefstyle="hyperlink"/> result map. They can be requested with key
            <xref linkend="org.osgi.service.dal.PropertyMetadata.UNITS" xrefstyle="hyperlink"/>. The value contains the property supported
            units. The property value type is <code>java.lang.String[]</code>.
            The array first element at index <code>0</code> represents the
            default unit. Each unit must follow those rules:</para>

            <itemizedlist>
              <listitem>
                <para>The International System of Units must be used where
                it's applicable. For example, kg for kilogram and km for
                kilometer.</para>
              </listitem>

              <listitem>
                <para>If the unit name matches to a Unicode symbol name, the
                Unicode symbol must be used. For example, the degree unit
                matches to the Unicode degree sign (<code>°</code>).</para>
              </listitem>

              <listitem>
                <para>If the unit name doesn't match to a Unicode symbol, the
                unit symbol must be built by Unicode Basic Latin block of
                characters, superscript and subscript characters. For example,
                watt per square meter steradian is built by <code>W/(m²
                sr)</code>.</para>
              </listitem>
            </itemizedlist>

            <para>If those rules cannot be applied to the unit symbol, custom
            rules are allowed.</para>

            <para>A set of predefined unit symbols are available in
            <code>SIUnits</code> interface.</para>
          </listitem>

          <listitem>
            <para>Description – available as a value in <xref linkend="org.osgi.service.dal.PropertyMetadata.getMetadata-String-" xrefstyle="hyperlink"/> result map. It can be requested with key
            <xref linkend="org.osgi.service.dal.PropertyMetadata.DESCRIPTION" xrefstyle="hyperlink"/>. The property value type is
            <code>java.lang.String</code> and specifies a user readable
            description. It doesn't depend on the given unit.</para>
          </listitem>

          <listitem>
            <para>Vendor custom properties – available as a value in <xref linkend="org.osgi.service.dal.PropertyMetadata.getMetadata-String-" xrefstyle="hyperlink"/> result map and can depend on the given
            unit. Organizations that want to use custom keys that do not clash
            with OSGi Alliance defined should prefix their keys in own
            namespace.</para>
          </listitem>
        </itemizedlist></para>
    </section>

    <section xml:id="service.dal-function.event">
      <title>Function Property Events</title>

      <para>The eventable function properties can trigger a new event on each
      property value modification. It doesn't require a modification of the
      value. For example, the motion sensor can send a few events with no
      property value change when motion is detected and continued to be
      detected. The event must use <xref linkend="org.osgi.service.dal.FunctionEvent" xrefstyle="hyperlink"/>
      class. The event properties are: <itemizedlist>
          <listitem>
            <para><xref linkend="org.osgi.service.dal.FunctionEvent.FUNCTION_UID" xrefstyle="hyperlink"/> – the event source function unique
            identifier.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.FunctionEvent.PROPERTY_NAME" xrefstyle="hyperlink"/> – the property name.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.FunctionEvent.PROPERTY_VALUE" xrefstyle="hyperlink"/> – the property value.</para>
          </listitem>
        </itemizedlist> For example, there is function with an eventable
      boolean property called “state”. When “state” value is changed to
      <code>false</code>, function implementation can post: <programlisting>FunctionEvent {
    dal.function.UID=acme.function
    dal.function.property.name=”state”
    dal.function.property.value=ACMEFuntionData(java.lang.Boolean.FALSE...)
}</programlisting></para>
    </section>
  </section>

  <section xml:id="service.dal-security">
    <title>Security</title>

    <section>
      <title>Device Permission</title>

      <para>The <xref linkend="org.osgi.service.dal.DevicePermission" xrefstyle="hyperlink"/> controls the bundle's authority to perform
      specific privileged administrative operations on the devices. There is
      only one action for this permission <xref linkend="org.osgi.service.dal.DevicePermission.REMOVE" xrefstyle="hyperlink"/> to protect <xref linkend="org.osgi.service.dal.Device.remove--" xrefstyle="hyperlink"/>
      method.</para>

      <para>The name of the permission is a filter based. For more details
      about filter based permissions, see OSGi Core Specification, Filter
      Based Permissions. The filter provides an access to all device service
      properties. Filter attribute names are processed in a case sensitive
      manner. For example, the operator can give a bundle the permission to
      only manage devices of vendor "acme": <programlisting>org.osgi.service.dal.DevicePermission("dal.device.hardware.vendor=acme", "remove")</programlisting></para>

      <para>The permission action allows the operator to assign only the
      necessary permissions to the bundle. For example, the management bundle
      can have permission to remove all registered devices: <programlisting>org.osgi.service.dal.DevicePermission("*", "remove")</programlisting></para>

      <para>The code that needs to check the device permission must always use
      the constructor that takes the device as a parameter <xref linkend="org.osgi.service.dal.Device" xrefstyle="hyperlink"/> with a
      single action. For example, the implementation of <xref linkend="org.osgi.service.dal.Device.remove--" xrefstyle="hyperlink"/>
      method must check that the caller has an access to the operation:
      <programlisting>public class DeviceImpl implements Device {
  ...
  public void remove() {
    securityManager.checkPermission(
      new DevicePermission(this, DevicePermission.REMOVE));
  }
  ...
}</programlisting></para>
    </section>

    <section>
      <title>Required Permissions</title>

      <para>The <code>Device</code> implementation must check the caller for
      the appropriate <code>DevicePermission</code> before execution of the
      remove operation. Once the <code>DevicePermission</code> is checked
      against the caller the implementation will proceed with the actual
      operation. The operation can require a number of other permissions to
      complete. The implementation must isolate the caller from such
      permission checks by use of proper privileged blocks.</para>

      <para><code>DevicePermission</code> check will keep the
      <code>Device</code> implementation in the call stack. This requires the
      implementation to have this permission to perform the operation. The
      security policy should be aware of this and should grant the correct
      permissions. Note that the <code>DevicePermission</code> is a filter
      based permission, see OSGi Core Specification, Filter Based Permissions.
      It provides flexibility and fine control based on the
      <code>Device</code> service properties.</para>
    </section>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.dal" xml:id="org.osgi.service.dal" xml:base="../../generated/javadoc/docbook/org.osgi.service.dal.xml">
   <title>org.osgi.service.dal</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.dal-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.dal-version.number">1.0</edition>
   </info>
   <para>
Device Abstraction Layer Package Version 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.dal; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.dal; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.Device">
                  <code>Device</code>
               </link> - 
Represents the device in the OSGi service registry.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.DeviceException">
                  <code>DeviceException</code>
               </link> - <code>DeviceException</code> is a special <code>IOException</code>, which is thrown to
 indicate that there is a device operation fail.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.DevicePermission">
                  <code>DevicePermission</code>
               </link> - 
A bundle's authority to perform specific privileged administrative operations
 on the devices.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.Function">
                  <code>Function</code>
               </link> - 
Function service provides specific device operations and properties.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.FunctionData">
                  <code>FunctionData</code>
               </link> - 
Abstract <code>Function</code> data wrapper.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.FunctionEvent">
                  <code>FunctionEvent</code>
               </link> - 
Asynchronous event, which marks a function property value modification.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.OperationMetadata">
                  <code>OperationMetadata</code>
               </link> - 
Contains metadata about function operation.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.PropertyMetadata">
                  <code>PropertyMetadata</code>
               </link> - 
Contains metadata about a function property, a function operation parameter
 or a function operation return value.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.SIUnits">
                  <code>SIUnits</code>
               </link> - 
Contains most of the International System of Units unit symbols.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="Device" xml:id="org.osgi.service.dal.Device">
      <title>public interface Device</title>
      <para>
Represents the device in the OSGi service registry. Note that <code>Device</code>
 services are registered last. Before their registration, there is
 <code>Function</code> services registration. The reverse order is used when the
 services are unregistered. <code>Device</code> services are unregistered first
 before <code>Function</code> services.
   </para>
      <section role="field" xreflabel="DEVICE_CATEGORY" xml:id="org.osgi.service.dal.Device.DEVICE_CATEGORY">
         <title>public static final String DEVICE_CATEGORY = "DAL"</title>
         <para>
Constant for the value of the <link linkend="org.osgi.service.device.Constants.DEVICE_CATEGORY">Constants.DEVICE_CATEGORY</link> service
 property. That category is used by all device services.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.device.Constants.DEVICE_CATEGORY">Constants.DEVICE_CATEGORY</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SERVICE_DESCRIPTION" xml:id="org.osgi.service.dal.Device.SERVICE_DESCRIPTION">
         <title>public static final String SERVICE_DESCRIPTION = "dal.device.description"</title>
         <para>
The service property value contains the device description. It's an
 optional property. The value type is <code>java.lang.String</code>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_DRIVER" xml:id="org.osgi.service.dal.Device.SERVICE_DRIVER">
         <title>public static final String SERVICE_DRIVER = "dal.device.driver"</title>
         <para>
The service property value contains the device driver name. For example,
 EnOcean, Z-Wave, Bluetooth, etc. It's a mandatory property. The value
 type is <code>java.lang.String</code>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_FIRMWARE_VENDOR" xml:id="org.osgi.service.dal.Device.SERVICE_FIRMWARE_VENDOR">
         <title>public static final String SERVICE_FIRMWARE_VENDOR = "dal.device.firmware.vendor"</title>
         <para>
The service property value contains the device firmware vendor. It's an
 optional property. The value type is <code>java.lang.String</code>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_FIRMWARE_VERSION" xml:id="org.osgi.service.dal.Device.SERVICE_FIRMWARE_VERSION">
         <title>public static final String SERVICE_FIRMWARE_VERSION = "dal.device.firmware.version"</title>
         <para>
The service property value contains the device firmware version. It's an
 optional property. The value type is <code>java.lang.String</code>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_HARDWARE_VENDOR" xml:id="org.osgi.service.dal.Device.SERVICE_HARDWARE_VENDOR">
         <title>public static final String SERVICE_HARDWARE_VENDOR = "dal.device.hardware.vendor"</title>
         <para>
The service property value contains the device hardware vendor. It's an
 optional property. The value type is <code>java.lang.String</code>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_HARDWARE_VERSION" xml:id="org.osgi.service.dal.Device.SERVICE_HARDWARE_VERSION">
         <title>public static final String SERVICE_HARDWARE_VERSION = "dal.device.hardware.version"</title>
         <para>
The service property value contains the device hardware version. It's an
 optional property. The value type is <code>java.lang.String</code>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_MODEL" xml:id="org.osgi.service.dal.Device.SERVICE_MODEL">
         <title>public static final String SERVICE_MODEL = "dal.device.model"</title>
         <para>
The service property value contains the device model. It's an optional
 property. The value type is <code>java.lang.String</code>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_NAME" xml:id="org.osgi.service.dal.Device.SERVICE_NAME">
         <title>public static final String SERVICE_NAME = "dal.device.name"</title>
         <para>
The service property value contains the device name. It's an optional
 property. The value type is <code>java.lang.String</code>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_REFERENCE_UIDS" xml:id="org.osgi.service.dal.Device.SERVICE_REFERENCE_UIDS">
         <title>public static final String SERVICE_REFERENCE_UIDS = "dal.device.reference.UIDs"</title>
         <para>
The service property value contains the reference device unique
 identifiers. It's an optional property. The value type is
 <code>java.lang.String[]</code>. It can be used to represent different
 relationships between the devices. For example, the EnOcean controller
 can have a reference to the USB dongle.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_SERIAL_NUMBER" xml:id="org.osgi.service.dal.Device.SERVICE_SERIAL_NUMBER">
         <title>public static final String SERVICE_SERIAL_NUMBER = "dal.device.serial.number"</title>
         <para>
The service property value contains the device serial number. It's an
 optional property. The value type is <code>java.lang.String</code>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_STATUS" xml:id="org.osgi.service.dal.Device.SERVICE_STATUS">
         <title>public static final String SERVICE_STATUS = "dal.device.status"</title>
         <para>
The service property value contains the device status. It's a mandatory
 property. The value type is <code>java.lang.Integer</code>. The possible
 values are:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.Device.STATUS_ONLINE">STATUS_ONLINE</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.Device.STATUS_OFFLINE">STATUS_OFFLINE</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.Device.STATUS_REMOVED">STATUS_REMOVED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.Device.STATUS_PROCESSING">STATUS_PROCESSING</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.Device.STATUS_NOT_INITIALIZED">STATUS_NOT_INITIALIZED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.Device.STATUS_NOT_CONFIGURED">STATUS_NOT_CONFIGURED</link>
               </para>
            </listitem>
         </itemizedlist>
      </section>
      <section role="field" xreflabel="SERVICE_STATUS_DETAIL" xml:id="org.osgi.service.dal.Device.SERVICE_STATUS_DETAIL">
         <title>public static final String SERVICE_STATUS_DETAIL = "dal.device.status.detail"</title>
         <para>
The service property value contains the device status detail. It holds
 the reason for the current device status. It's an optional property. The
 value type is <code>java.lang.Integer</code>. There are two value categories:
 </para>
         <itemizedlist>
            <listitem>
               <para>positive values i.e. &gt; 0 - those values contain details related to
 the current status. Examples: <link linkend="org.osgi.service.dal.Device.STATUS_DETAIL_CONNECTING">STATUS_DETAIL_CONNECTING</link> and
 <link linkend="org.osgi.service.dal.Device.STATUS_DETAIL_INITIALIZING">STATUS_DETAIL_INITIALIZING</link>.</para>
            </listitem>
            <listitem>
               <para>negative values i.e. &lt;0 - those values contain errors related to the
 current status. Examples:<link linkend="org.osgi.service.dal.Device.STATUS_DETAIL_CONFIGURATION_UNAPPLIED">STATUS_DETAIL_CONFIGURATION_UNAPPLIED</link>,
 <link linkend="org.osgi.service.dal.Device.STATUS_DETAIL_BROKEN">STATUS_DETAIL_BROKEN</link> and
 <link linkend="org.osgi.service.dal.Device.STATUS_DETAIL_COMMUNICATION_ERROR">STATUS_DETAIL_COMMUNICATION_ERROR</link>.</para>
            </listitem>
         </itemizedlist>
      </section>
      <section role="field" xreflabel="SERVICE_TYPES" xml:id="org.osgi.service.dal.Device.SERVICE_TYPES">
         <title>public static final String SERVICE_TYPES = "dal.device.types"</title>
         <para>
The service property value contains the device types like DVD, TV, etc.
 It's an optional property. The value type is <code>java.lang.String[]</code>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_UID" xml:id="org.osgi.service.dal.Device.SERVICE_UID">
         <title>public static final String SERVICE_UID = "dal.device.UID"</title>
         <para>
The service property value contains the device unique identifier. It's a
 mandatory property. The value type is <code>java.lang.String</code>. To
 simplify the unique identifier generation, the property value must follow
 the rule:
 </para>
         <para>
 UID ::= driver-name ':' device-id
 </para>
         <para>
 UID - device unique identifier
 </para>
         <para>
 driver-name - the value of the <link linkend="org.osgi.service.dal.Device.SERVICE_DRIVER">SERVICE_DRIVER</link> service property
 </para>
         <para>
 device-id - device unique identifier in the scope of the driver</para>
      </section>
      <section role="field" xreflabel="STATUS_DETAIL_BROKEN" xml:id="org.osgi.service.dal.Device.STATUS_DETAIL_BROKEN">
         <title>public static final Integer STATUS_DETAIL_BROKEN</title>
         <para>
Device status detail indicates that the device is broken. It can be used
 as a value of <link linkend="org.osgi.service.dal.Device.SERVICE_STATUS_DETAIL">SERVICE_STATUS_DETAIL</link> service property. The device
 status must be <link linkend="org.osgi.service.dal.Device.STATUS_OFFLINE">STATUS_OFFLINE</link>.
   </para>
      </section>
      <section role="field" xreflabel="STATUS_DETAIL_COMMUNICATION_ERROR" xml:id="org.osgi.service.dal.Device.STATUS_DETAIL_COMMUNICATION_ERROR">
         <title>public static final Integer STATUS_DETAIL_COMMUNICATION_ERROR</title>
         <para>
Device status detail indicates that the device communication is
 problematic. It can be used as a value of <link linkend="org.osgi.service.dal.Device.SERVICE_STATUS_DETAIL">SERVICE_STATUS_DETAIL</link>
 service property. The device status must be <link linkend="org.osgi.service.dal.Device.STATUS_ONLINE">STATUS_ONLINE</link> or
 <link linkend="org.osgi.service.dal.Device.STATUS_NOT_INITIALIZED">STATUS_NOT_INITIALIZED</link>.
   </para>
      </section>
      <section role="field" xreflabel="STATUS_DETAIL_CONFIGURATION_ERROR" xml:id="org.osgi.service.dal.Device.STATUS_DETAIL_CONFIGURATION_ERROR">
         <title>public static final Integer STATUS_DETAIL_CONFIGURATION_ERROR</title>
         <para>
Device status detail indicates that the device cannot be configured. It
 can be used as a value of <link linkend="org.osgi.service.dal.Device.SERVICE_STATUS_DETAIL">SERVICE_STATUS_DETAIL</link> service
 property. The device status must be <link linkend="org.osgi.service.dal.Device.STATUS_NOT_CONFIGURED">STATUS_NOT_CONFIGURED</link>.
   </para>
      </section>
      <section role="field" xreflabel="STATUS_DETAIL_CONFIGURATION_UNAPPLIED" xml:id="org.osgi.service.dal.Device.STATUS_DETAIL_CONFIGURATION_UNAPPLIED">
         <title>public static final Integer STATUS_DETAIL_CONFIGURATION_UNAPPLIED</title>
         <para>
Device status detail indicates that the device configuration is not
 applied. It can be used as a value of <link linkend="org.osgi.service.dal.Device.SERVICE_STATUS_DETAIL">SERVICE_STATUS_DETAIL</link>
 service property. The device status must be
 <link linkend="org.osgi.service.dal.Device.STATUS_NOT_CONFIGURED">STATUS_NOT_CONFIGURED</link>.
   </para>
      </section>
      <section role="field" xreflabel="STATUS_DETAIL_CONNECTING" xml:id="org.osgi.service.dal.Device.STATUS_DETAIL_CONNECTING">
         <title>public static final Integer STATUS_DETAIL_CONNECTING</title>
         <para>
Device status detail indicates that the device is currently connecting to
 the network. It can be used as a value of <link linkend="org.osgi.service.dal.Device.SERVICE_STATUS_DETAIL">SERVICE_STATUS_DETAIL</link>
 service property. The device status must be <link linkend="org.osgi.service.dal.Device.STATUS_PROCESSING">STATUS_PROCESSING</link>.
   </para>
      </section>
      <section role="field" xreflabel="STATUS_DETAIL_DATA_INSUFFICIENT" xml:id="org.osgi.service.dal.Device.STATUS_DETAIL_DATA_INSUFFICIENT">
         <title>public static final Integer STATUS_DETAIL_DATA_INSUFFICIENT</title>
         <para>
Device status detail indicates that the device doesn't provide enough
 information and cannot be determined. It can be used as a value of
 <link linkend="org.osgi.service.dal.Device.SERVICE_STATUS_DETAIL">SERVICE_STATUS_DETAIL</link> service property. The device status must
 be <link linkend="org.osgi.service.dal.Device.STATUS_NOT_INITIALIZED">STATUS_NOT_INITIALIZED</link>.
   </para>
      </section>
      <section role="field" xreflabel="STATUS_DETAIL_DUTY_CYCLE" xml:id="org.osgi.service.dal.Device.STATUS_DETAIL_DUTY_CYCLE">
         <title>public static final Integer STATUS_DETAIL_DUTY_CYCLE</title>
         <para>
Device status detail indicates that the device is in duty cycle. It can
 be used as a value of <link linkend="org.osgi.service.dal.Device.SERVICE_STATUS_DETAIL">SERVICE_STATUS_DETAIL</link> service property.
 The device status must be <link linkend="org.osgi.service.dal.Device.STATUS_OFFLINE">STATUS_OFFLINE</link>.
   </para>
      </section>
      <section role="field" xreflabel="STATUS_DETAIL_FIRMWARE_UPDATING" xml:id="org.osgi.service.dal.Device.STATUS_DETAIL_FIRMWARE_UPDATING">
         <title>public static final Integer STATUS_DETAIL_FIRMWARE_UPDATING</title>
         <para>
Device status detail indicates that the device firmware is updating. It
 can be used as a value of <link linkend="org.osgi.service.dal.Device.SERVICE_STATUS_DETAIL">SERVICE_STATUS_DETAIL</link> service
 property. The device status must be <link linkend="org.osgi.service.dal.Device.STATUS_PROCESSING">STATUS_PROCESSING</link>.
   </para>
      </section>
      <section role="field" xreflabel="STATUS_DETAIL_INACCESSIBLE" xml:id="org.osgi.service.dal.Device.STATUS_DETAIL_INACCESSIBLE">
         <title>public static final Integer STATUS_DETAIL_INACCESSIBLE</title>
         <para>
Device status detail indicates that the device is not accessible and
 further communication is not possible. It can be used as a value of
 <link linkend="org.osgi.service.dal.Device.SERVICE_STATUS_DETAIL">SERVICE_STATUS_DETAIL</link> service property. The device status must
 be <link linkend="org.osgi.service.dal.Device.STATUS_OFFLINE">STATUS_OFFLINE</link>.
   </para>
      </section>
      <section role="field" xreflabel="STATUS_DETAIL_INITIALIZING" xml:id="org.osgi.service.dal.Device.STATUS_DETAIL_INITIALIZING">
         <title>public static final Integer STATUS_DETAIL_INITIALIZING</title>
         <para>
Device status detail indicates that the device is currently in process of
 initialization. It can be used as a value of
 <link linkend="org.osgi.service.dal.Device.SERVICE_STATUS_DETAIL">SERVICE_STATUS_DETAIL</link> service property. The device status must
 be <link linkend="org.osgi.service.dal.Device.STATUS_PROCESSING">STATUS_PROCESSING</link>.
   </para>
      </section>
      <section role="field" xreflabel="STATUS_DETAIL_REMOVING" xml:id="org.osgi.service.dal.Device.STATUS_DETAIL_REMOVING">
         <title>public static final Integer STATUS_DETAIL_REMOVING</title>
         <para>
Device status detail indicates that the device is leaving the network. It
 can be used as a value of <link linkend="org.osgi.service.dal.Device.SERVICE_STATUS_DETAIL">SERVICE_STATUS_DETAIL</link> service
 property. The device status must be <link linkend="org.osgi.service.dal.Device.STATUS_PROCESSING">STATUS_PROCESSING</link>.
   </para>
      </section>
      <section role="field" xreflabel="STATUS_NOT_CONFIGURED" xml:id="org.osgi.service.dal.Device.STATUS_NOT_CONFIGURED">
         <title>public static final Integer STATUS_NOT_CONFIGURED</title>
         <para>
Device status indicates that the device is currently not configured. The
 device can require additional actions to become completely connected to
 the network. It can be used as a value of <link linkend="org.osgi.service.dal.Device.SERVICE_STATUS">SERVICE_STATUS</link> service
 property.
   </para>
      </section>
      <section role="field" xreflabel="STATUS_NOT_INITIALIZED" xml:id="org.osgi.service.dal.Device.STATUS_NOT_INITIALIZED">
         <title>public static final Integer STATUS_NOT_INITIALIZED</title>
         <para>
Device status indicates that the device is currently not initialized.
 Some protocols don't provide device information right after the device is
 connected. The device can be initialized later when it's awakened. It can
 be used as a value of <link linkend="org.osgi.service.dal.Device.SERVICE_STATUS">SERVICE_STATUS</link> service property.
   </para>
      </section>
      <section role="field" xreflabel="STATUS_OFFLINE" xml:id="org.osgi.service.dal.Device.STATUS_OFFLINE">
         <title>public static final Integer STATUS_OFFLINE</title>
         <para>
Device status indicates that the device is currently not available for
 operations. It can be used as a value of <link linkend="org.osgi.service.dal.Device.SERVICE_STATUS">SERVICE_STATUS</link> service
 property.
   </para>
      </section>
      <section role="field" xreflabel="STATUS_ONLINE" xml:id="org.osgi.service.dal.Device.STATUS_ONLINE">
         <title>public static final Integer STATUS_ONLINE</title>
         <para>
Device status indicates that the device is currently available for
 operations. The recent communication with the device has been passed
 through. It can be used as a value of <link linkend="org.osgi.service.dal.Device.SERVICE_STATUS">SERVICE_STATUS</link> service
 property.
   </para>
      </section>
      <section role="field" xreflabel="STATUS_PROCESSING" xml:id="org.osgi.service.dal.Device.STATUS_PROCESSING">
         <title>public static final Integer STATUS_PROCESSING</title>
         <para>
Device status indicates that the device is currently busy with an
 operation. It can be used as a value of <link linkend="org.osgi.service.dal.Device.SERVICE_STATUS">SERVICE_STATUS</link> service
 property.
   </para>
      </section>
      <section role="field" xreflabel="STATUS_REMOVED" xml:id="org.osgi.service.dal.Device.STATUS_REMOVED">
         <title>public static final Integer STATUS_REMOVED</title>
         <para>
Device status indicates that the device has been removed from the
 network. That status must be set as the last device status. After that
 the device service can be unregistered from the service registry. It can
 be used as a value of <link linkend="org.osgi.service.dal.Device.SERVICE_STATUS">SERVICE_STATUS</link> service property.
   </para>
      </section>
      <section role="method" xreflabel="getServiceProperty(String)" xml:id="org.osgi.service.dal.Device.getServiceProperty-String-">
         <title>public Object getServiceProperty(String propKey)</title>
         <formalpara role="parameter">
            <title>propKey</title>
            <para>The property key.</para>
         </formalpara>
         <para role="description">
Returns the current value of the specified property. The method will
 return the same value as <code>ServiceReference.getProperty(String)</code> for
 the service reference of this device.
 </para>
         <para>
 This method must continue to return property values after the device
 service has been unregistered.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The property value or <code>null</code> if the property key cannot be
         mapped to a value.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getServicePropertyKeys()" xml:id="org.osgi.service.dal.Device.getServicePropertyKeys--">
         <title>public String[] getServicePropertyKeys()</title>
         <para role="description">
Returns an array with all device service property keys. The method will
 return the same value as <code>ServiceReference.getPropertyKeys()</code> for
 the service reference of this device. The result cannot be <code>null</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An array with all device service property keys, cannot be
         <code>null</code>.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="remove()" xml:id="org.osgi.service.dal.Device.remove--">
         <title>public void remove() throws DeviceException</title>
         <para role="description">
Removes this device.
 </para>
         <para>
 The method must synchronously:
 </para>
         <itemizedlist>
            <listitem>
               <para>Remove the device from the device network.</para>
            </listitem>
            <listitem>
               <para>Set the device status to <link linkend="org.osgi.service.dal.Device.STATUS_REMOVED">STATUS_REMOVED</link>.</para>
            </listitem>
            <listitem>
               <para>Unregister the device service from the OSGi service registry.</para>
            </listitem>
         </itemizedlist>
         <para>
 The caller should release the device service after successful execution,
 because the device will not be operational.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DeviceException</code>– If an operation error is available.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>UnsupportedOperationException</code>– If the operation is not supported
         over this device.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>DevicePermission(this device,</code>
               <link linkend="org.osgi.service.dal.DevicePermission.REMOVE">DevicePermission.REMOVE</link>
               <code>)</code> and the Java Runtime
         Environment supports permissions.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this device service object has already
         been unregistered.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="DeviceException" xml:id="org.osgi.service.dal.DeviceException">
      <title>public class DeviceException<?line-break?> extends IOException</title>
      <para>
         <code>DeviceException</code> is a special <code>IOException</code>, which is thrown to
 indicate that there is a device operation fail. The error reason can be
 located with <link linkend="org.osgi.service.dal.DeviceException.getCode--">getCode()</link> method. The cause is available with
 getCause().
   </para>
      <section role="field" xreflabel="COMMUNICATION_ERROR" xml:id="org.osgi.service.dal.DeviceException.COMMUNICATION_ERROR">
         <title>public static final int COMMUNICATION_ERROR = 1</title>
         <para>
An exception code indicates that there is an error in the communication.
   </para>
      </section>
      <section role="field" xreflabel="NO_DATA" xml:id="org.osgi.service.dal.DeviceException.NO_DATA">
         <title>public static final int NO_DATA = 4</title>
         <para>
An exception code indicates that the requested value is currently not
 available.
   </para>
      </section>
      <section role="field" xreflabel="NOT_INITIALIZED" xml:id="org.osgi.service.dal.DeviceException.NOT_INITIALIZED">
         <title>public static final int NOT_INITIALIZED = 3</title>
         <para>
An exception code indicates that the device is not initialized. The
 device status is <link linkend="org.osgi.service.dal.Device.STATUS_NOT_INITIALIZED">Device.STATUS_NOT_INITIALIZED</link> or
 <link linkend="org.osgi.service.dal.Device.STATUS_PROCESSING">Device.STATUS_PROCESSING</link>.
   </para>
      </section>
      <section role="field" xreflabel="TIMEOUT" xml:id="org.osgi.service.dal.DeviceException.TIMEOUT">
         <title>public static final int TIMEOUT = 2</title>
         <para>
An exception code indicates that there is expired timeout without any
 processing.
   </para>
      </section>
      <section role="field" xreflabel="UNKNOWN" xml:id="org.osgi.service.dal.DeviceException.UNKNOWN">
         <title>public static final int UNKNOWN = 0</title>
         <para>
An exception code indicates that the error is unknown.
   </para>
      </section>
      <section role="method" xreflabel="DeviceException()" xml:id="org.osgi.service.dal.DeviceException.DeviceException--">
         <title>public  DeviceException()</title>
         <para role="description">
Construct a new device exception with <code>null</code> message. The cause is
 not initialized and the exception code is set to <link linkend="org.osgi.service.dal.DeviceException.UNKNOWN">UNKNOWN</link>.
   </para>
      </section>
      <section role="method" xreflabel="DeviceException(String)" xml:id="org.osgi.service.dal.DeviceException.DeviceException-String-">
         <title>public  DeviceException(String message)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The exception message.</para>
         </formalpara>
         <para role="description">
Constructs a new device exception with the given message. The cause is
 not initialized and the exception code is set to <link linkend="org.osgi.service.dal.DeviceException.UNKNOWN">UNKNOWN</link>.
   </para>
      </section>
      <section role="method" xreflabel="DeviceException(String,Throwable)" xml:id="org.osgi.service.dal.DeviceException.DeviceException-String-Throwable-">
         <title>public  DeviceException(String message,Throwable cause)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The exception message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The exception cause.</para>
         </formalpara>
         <para role="description">
Constructs a new device exception with the given message and cause. The
 exception code is set to <link linkend="org.osgi.service.dal.DeviceException.UNKNOWN">UNKNOWN</link>.
   </para>
      </section>
      <section role="method" xreflabel="DeviceException(String,Throwable,int)" xml:id="org.osgi.service.dal.DeviceException.DeviceException-String-Throwable-int-">
         <title>public  DeviceException(String message,Throwable cause,int code)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The exception message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The exception cause.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>code</title>
            <para>The exception code.</para>
         </formalpara>
         <para role="description">
Constructs a new device exception with the given message, cause and code.
   </para>
      </section>
      <section role="method" xreflabel="getCode()" xml:id="org.osgi.service.dal.DeviceException.getCode--">
         <title>public int getCode()</title>
         <para role="description">
Returns the exception code. It indicates the reason for this exception.
 The code can be:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.DeviceException.UNKNOWN">UNKNOWN</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.DeviceException.COMMUNICATION_ERROR">COMMUNICATION_ERROR</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.DeviceException.TIMEOUT">TIMEOUT</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.DeviceException.NOT_INITIALIZED">NOT_INITIALIZED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.DeviceException.NO_DATA">NO_DATA</link>
               </para>
            </listitem>
            <listitem>
               <para>custom code</para>
            </listitem>
         </itemizedlist>
         <para>
 Zero and positive values are reserved for this definition and further
 extensions of the device exception codes. Custom codes can be used only
 as negative values to prevent potential collisions.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An exception code.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="DevicePermission" xml:id="org.osgi.service.dal.DevicePermission">
      <title>public class DevicePermission<?line-break?> extends BasicPermission</title>
      <para>
A bundle's authority to perform specific privileged administrative operations
 on the devices. The method <link linkend="org.osgi.service.dal.Device.remove--">Device.remove()</link> is protected with
 <link linkend="org.osgi.service.dal.DevicePermission.REMOVE">REMOVE</link> permission action.
 </para>
      <para>
 The name of the permission is a filter based. See OSGi Core Specification,
 Filter Based Permissions. The filter gives an access to all device service
 properties. Filter attribute names are processed in a case sensitive manner.</para>
      <section role="field" xreflabel="REMOVE" xml:id="org.osgi.service.dal.DevicePermission.REMOVE">
         <title>public static final String REMOVE = "remove"</title>
         <para>
A permission action to remove the device.
   </para>
      </section>
      <section role="method" xreflabel="DevicePermission(String,String)" xml:id="org.osgi.service.dal.DevicePermission.DevicePermission-String-String-">
         <title>public  DevicePermission(String filter,String action)</title>
         <formalpara role="parameter">
            <title>filter</title>
            <para>A filter expression that can use any device service
        property. The filter attribute names are processed in a case
        insensitive manner. A special value of "*" can be used to match
        all devices.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>action</title>
            <para>
               <link linkend="org.osgi.service.dal.DevicePermission.REMOVE">REMOVE</link> action.</para>
         </formalpara>
         <para role="description">
Creates a new <code>DevicePermission</code> with the given filter and actions.
 The constructor must only be used to create a permission that is going to
 be checked.
 </para>
         <para>
 A filter example: (dal.device.hardware.vendor=acme)
 </para>
         <para>
 An action: remove</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the filter syntax is not correct or
         invalid action is specified.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– If the filter or action is null.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="DevicePermission(Device,String)" xml:id="org.osgi.service.dal.DevicePermission.DevicePermission-Device-String-">
         <title>public  DevicePermission(Device device,String action)</title>
         <formalpara role="parameter">
            <title>device</title>
            <para>The device that needs to be checked for a permission.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>action</title>
            <para>
               <link linkend="org.osgi.service.dal.DevicePermission.REMOVE">REMOVE</link> action.</para>
         </formalpara>
         <para role="description">
Creates a new <code>DevicePermission</code> with the given device and actions.
 The permission must be used for the security checks like:
 </para>
         <para>
            <code>securityManager.checkPermission(new DevicePermission(this, "remove"))</code>
 . The permissions constructed by this constructor must not be added to
 the <code>DevicePermission</code> permission collections.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If an invalid action is specified.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– If the device or action is null.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.dal.DevicePermission.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>The object being compared for equality with this object.</para>
         </formalpara>
         <para role="description">
Two <code>DevicePermission</code> instances are equal if:
 </para>
         <itemizedlist>
            <listitem>
               <para>Represents the same filter and action.</para>
            </listitem>
            <listitem>
               <para>Represents the same device (in respect to device unique identifier)
 and action.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if two permissions are equal, <code>false</code>
         otherwise.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getActions()" xml:id="org.osgi.service.dal.DevicePermission.getActions--">
         <title>public String getActions()</title>
         <para role="description">
Returns the canonical string representation of <link linkend="org.osgi.service.dal.DevicePermission.REMOVE">REMOVE</link> action.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The canonical string representation of the actions.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.dal.DevicePermission.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code value for this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Hash code value for this object.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="implies(Permission)" xml:id="org.osgi.service.dal.DevicePermission.implies-Permission-">
         <title>public boolean implies(Permission p)</title>
         <formalpara role="parameter">
            <title>p</title>
            <para>The permission to be implied. It must be constructed by
        <link linkend="org.osgi.service.dal.DevicePermission.DevicePermission-Device-String-">DevicePermission(Device, String)</link>.</para>
         </formalpara>
         <para role="description">
Determines if the specified permission is implied by this object. The
 method will return <code>false</code> if the specified permission was not
 constructed by <link linkend="org.osgi.service.dal.DevicePermission.DevicePermission-Device-String-">DevicePermission(Device, String)</link>.
 
 Returns <code>true</code> if the specified permission is a
 <code>DevicePermission</code> and this permission filter matches the specified
 permission device properties.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the specified permission is implied by this
         permission, <code>false</code> otherwise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified permission is not
         constructed by <link linkend="org.osgi.service.dal.DevicePermission.DevicePermission-Device-String-">DevicePermission(Device, String)</link>.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="newPermissionCollection()" xml:id="org.osgi.service.dal.DevicePermission.newPermissionCollection--">
         <title>public PermissionCollection newPermissionCollection()</title>
         <para role="description">
Returns a new <code>PermissionCollection</code> suitable for storing
 <code>DevicePermission</code> instances.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new <code>PermissionCollection</code> instance.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Function" xml:id="org.osgi.service.dal.Function">
      <title>public interface Function</title>
      <para>
Function service provides specific device operations and properties. Each
 function service must implement this interface. In additional to this
 interface, the implementation can provide own:
 </para>
      <itemizedlist>
         <listitem>
            <para>properties;</para>
         </listitem>
         <listitem>
            <para>operations.</para>
         </listitem>
      </itemizedlist>
      <para>
 The function service is registered in the service registry with these service
 properties:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.Function.SERVICE_UID">SERVICE_UID</link> - mandatory service property. The property value
 contains the function unique identifier.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.Function.SERVICE_DEVICE_UID">SERVICE_DEVICE_UID</link> - optional service property. The property
 value is the Functional Device identifiers. The function belongs to those
 devices.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.Function.SERVICE_REFERENCE_UIDS">SERVICE_REFERENCE_UIDS</link> - optional service property. The property
 value contains the reference function unique identifiers.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.Function.SERVICE_TYPE">SERVICE_TYPE</link> - mandatory service property. The property value is
 the function type.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.Function.SERVICE_VERSION">SERVICE_VERSION</link> - optional service property. The property value
 contains the function version.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.Function.SERVICE_DESCRIPTION">SERVICE_DESCRIPTION</link> - optional service property. The property
 value is the function description.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.Function.SERVICE_OPERATION_NAMES">SERVICE_OPERATION_NAMES</link> - optional service property. The
 property is missing when there are no function operations and property must
 be set when there are function operations. The property value is the function
 operation names.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.Function.SERVICE_PROPERTY_NAMES">SERVICE_PROPERTY_NAMES</link> - optional service property. The property
 is missing when there are no function properties and property must be set
 when there are function properties. The property value is the function
 property names.</para>
         </listitem>
      </itemizedlist>
      <para>
 On start up, the <code>Function</code> services are registered before the
 <code>Device</code> services. It's possible that <link linkend="org.osgi.service.dal.Function.SERVICE_DEVICE_UID">SERVICE_DEVICE_UID</link> point
 to missing services at the moment of the registration. The reverse order is
 used when the services are unregistered. <code>Function</code> services are
 unregistered last after <code>Device</code> services.
 </para>
      <para>
 The <code>Function</code> service should be registered only under the function
 class hierarchy. Other classes can be used if there are no ambiguous
 representations. For example, an ambiguous representation can be a function
 registered under two independent function classes like <code>BinarySwitch</code>
 and <code>Meter</code>. In this example, both functions support the same property
 <code>state</code> with different meaning.
 <code>getPropertyMetadata(String propertyName)</code> method cannot determinate
 which property is requested. It can be <code>BinarySwitch state</code> or
 <code>Meter state</code>.
 </para>
      <para>
 To simplify the generic function discovery, the <code>Function</code> interface
 must be used for the service registration. In this way, the generic
 applications can easily find all services, which are functions in the service
 registry. Because of this rule, this registration is not allowed:
 </para>
      <para>
         <code>context.registerService(MeterV1.class.getName(), this, regProps);</code>
      </para>
      <para>
 If the implementation would like to mark that there is a function, but no
 specific function interface exists, the registration can be:
 </para>
      <para>
         <code>context.registerService(Function.class.getName(), this, regProps);</code>
      </para>
      <para>
 Note that such functions usually don't have operations and properties.
 </para>
      <para>
 The function properties must be integrated according to these rules:
 </para>
      <itemizedlist>
         <listitem>
            <para>Getter methods must be available for all properties with
 <link linkend="org.osgi.service.dal.PropertyMetadata.ACCESS_READABLE">PropertyMetadata.ACCESS_READABLE</link> access.</para>
         </listitem>
         <listitem>
            <para>Getter method must return a subclass of <link linkend="org.osgi.service.dal.FunctionData">FunctionData</link>.</para>
         </listitem>
         <listitem>
            <para>Setter methods must be available for all properties with
 <link linkend="org.osgi.service.dal.PropertyMetadata.ACCESS_WRITABLE">PropertyMetadata.ACCESS_WRITABLE</link> access.</para>
         </listitem>
         <listitem>
            <para>
 Setter methods can be any combination of:
 </para>
            <itemizedlist>
               <listitem>
                  <para>Setter method which accepts a subclass of <link linkend="org.osgi.service.dal.FunctionData">FunctionData</link>.</para>
               </listitem>
               <listitem>
                  <para>
 Setter method which accepts the values used by the <link linkend="org.osgi.service.dal.FunctionData">FunctionData</link>
 subclass, if there are no equal types.</para>
               </listitem>
            </itemizedlist>
            <para>
 It's possible to have only one or both of them. Examples:
 </para>
            <itemizedlist>
               <listitem>
                  <para>
 There is <code>MyFunctionData</code> bean with <code>BigDecimal</code> value for a
 <code>data</code> property. Valid setters are <code>setData(MyFunctionData data)</code>
 and <code>setData(BigDecimal data)</code>.</para>
               </listitem>
               <listitem>
                  <para>
 There is <code>MySecondFunctionData</code> bean with <code>BigDecimal</code> prefix and
 <code>BigDecimal</code> suffix for a <code>data</code> property. The prefix and suffix
 are using equal types and we cannot have a setter with the values used by
 <code>MySecondFunctionData</code>. The only one possible setter is
 <code>setData(MySecondFunctionData data)</code>.</para>
               </listitem>
            </itemizedlist>
         </listitem>
         <listitem>
            <para>No methods are required for properties with
 <link linkend="org.osgi.service.dal.PropertyMetadata.ACCESS_EVENTABLE">PropertyMetadata.ACCESS_EVENTABLE</link> access.</para>
         </listitem>
      </itemizedlist>
      <para>
 The accessor method names must be defined according JavaBeans specification.
 </para>
      <para>
 The function operations are java methods, which cannot override the property
 accessor methods. They can have zero or more parameters and zero or one
 return value.
 </para>
      <para>
 Operation arguments and function properties are restricted by the same set of
 rules. The data type can be one of the following types:
 </para>
      <itemizedlist>
         <listitem>
            <para>Java primitive type or corresponding reference type.</para>
         </listitem>
         <listitem>
            <para>
               <code>java.lang.String</code>.</para>
         </listitem>
         <listitem>
            <para>Numerical type i.e. the type which extends <code>java.lang.Number</code>.
 The numerical type must follow these conventions:
 </para>
            <itemizedlist>
               <listitem>
                  <para>The type must provide a public static method called <code>valueOf</code> that
 returns an instance of the given type and takes a single <code>String</code>
 argument or a public constructor which takes a single <code>String</code>
 argument.</para>
               </listitem>
               <listitem>
                  <para>
 The <code>String</code> argument from the previous bullet can be provided by
 <code>toString()</code> method of the instance.</para>
               </listitem>
            </itemizedlist>
         </listitem>
         <listitem>
            <para>
               <code>Beans</code>, but the beans properties must use those rules. Java Beans
 are defined in JavaBeans specification.</para>
         </listitem>
         <listitem>
            <para>
               <code>java.util.Map</code>s. The keys can be <code>java.lang.String</code>. The values
 of a single type follow these rules.</para>
         </listitem>
         <listitem>
            <para>Arrays of defined types.</para>
         </listitem>
      </itemizedlist>
      <para>
 The properties metadata is accessible with
 <link linkend="org.osgi.service.dal.Function.getPropertyMetadata-String-">getPropertyMetadata(String)</link>. The operations metadata is accessible
 with <link linkend="org.osgi.service.dal.Function.getOperationMetadata-String-">getOperationMetadata(String)</link>.
 </para>
      <para>
 In order to provide common behavior, all functions must follow a set of
 common rules related to the implementation of their setters, getters,
 operations and events:
 </para>
      <itemizedlist>
         <listitem>
            <para>
 The setter method must be executed synchronously. If the underlying protocol
 can return response to the setter call, it must be awaited. It simplifies the
 property value modifications and doesn't require asynchronous callback.</para>
         </listitem>
         <listitem>
            <para>
 The operation method must be executed synchronously. If the underlying
 protocol can return an operation confirmation or response, they must be
 awaited. It simplifies the operation execution and doesn't require
 asynchronous callback.</para>
         </listitem>
         <listitem>
            <para>
 The getter must return the last know cached property value. The device
 implementation is responsible to keep that value up to date. It'll speed up
 the applications when the function property values are collected. The same
 cached value can be shared between a few requests instead of a few calls to
 the real device.</para>
         </listitem>
         <listitem>
            <para>The function operations, getters and setters must not override
 <code>java.lang.Object</code> and this interface methods.</para>
         </listitem>
      </itemizedlist>
      <section role="field" xreflabel="SERVICE_DESCRIPTION" xml:id="org.osgi.service.dal.Function.SERVICE_DESCRIPTION">
         <title>public static final String SERVICE_DESCRIPTION = "dal.function.description"</title>
         <para>
The service property value contains the function description. It's an
 optional property. The value type is <code>java.lang.String</code>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_DEVICE_UID" xml:id="org.osgi.service.dal.Function.SERVICE_DEVICE_UID">
         <title>public static final String SERVICE_DEVICE_UID = "dal.function.device.UID"</title>
         <para>
The service property value contains the device unique identifier. The
 function belongs to this device. It's an optional property. The value
 type is <code>java.lang.String</code>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_OPERATION_NAMES" xml:id="org.osgi.service.dal.Function.SERVICE_OPERATION_NAMES">
         <title>public static final String SERVICE_OPERATION_NAMES = "dal.function.operation.names"</title>
         <para>
The service property value contains the function operation names. It's an
 optional property. The property is missing when there are no function
 operations and property must be set when there are function operations.
 The value type is <code>java.lang.String[]</code>. It's not possible to exist
 two or more function operations with the same name i.e. the operation
 overloading is not allowed.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_PROPERTY_NAMES" xml:id="org.osgi.service.dal.Function.SERVICE_PROPERTY_NAMES">
         <title>public static final String SERVICE_PROPERTY_NAMES = "dal.function.property.names"</title>
         <para>
The service property value contains the function property names. It's an
 optional property. The property is missing when there are no function
 properties and property must be set when there are function properties.
 The value type is <code>java.lang.String[]</code>. It's not possible to exist
 two or more function properties with the same name.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_REFERENCE_UIDS" xml:id="org.osgi.service.dal.Function.SERVICE_REFERENCE_UIDS">
         <title>public static final String SERVICE_REFERENCE_UIDS = "dal.function.reference.UIDs"</title>
         <para>
The service property value contains the reference function unique
 identifiers. It's an optional property. The value type is
 <code>java.lang.String[]</code>. It can be used to represent different
 relationships between the functions.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_TYPE" xml:id="org.osgi.service.dal.Function.SERVICE_TYPE">
         <title>public static final String SERVICE_TYPE = "dal.function.type"</title>
         <para>
The service property value contains the function type. It's an optional
 property. For example, the sensor function can have different types like
 temperature, pressure, etc. The value type is <code>java.lang.String</code>.
 </para>
         <para>
 Organizations that want to use function types that do not clash with OSGi
 Alliance defined types should prefix their types in own namespace.
 </para>
         <para>
 The type doesn't mandate specific function interface. It can be used with
 different functions.</para>
      </section>
      <section role="field" xreflabel="SERVICE_UID" xml:id="org.osgi.service.dal.Function.SERVICE_UID">
         <title>public static final String SERVICE_UID = "dal.function.UID"</title>
         <para>
The service property value contains the function unique identifier. It's
 a mandatory property. The value type is <code>java.lang.String</code>. To
 simplify the unique identifier generation, the property value must follow
 the rule:
 </para>
         <para>
 function UID ::= device-id ':' function-id
 </para>
         <para>
 function UID - function unique identifier
 </para>
         <para>
 device-id - the value of the <link linkend="org.osgi.service.dal.Device.SERVICE_UID">Device.SERVICE_UID</link> Device service
 property
 </para>
         <para>
 function-id - function identifier in the scope of the device
 </para>
         <para>
 If the function is not bound to a device, the function unique identifier
 can be device independent.</para>
      </section>
      <section role="field" xreflabel="SERVICE_VERSION" xml:id="org.osgi.service.dal.Function.SERVICE_VERSION">
         <title>public static final String SERVICE_VERSION = "dal.function.version"</title>
         <para>
The service property value contains the function version. That version
 can point to specific implementation version and vary in the different
 vendor implementations. It's an optional property. The value type is
 <code>java.lang.String</code>.
   </para>
      </section>
      <section role="method" xreflabel="getOperationMetadata(String)" xml:id="org.osgi.service.dal.Function.getOperationMetadata-String-">
         <title>public OperationMetadata getOperationMetadata(String operationName)</title>
         <formalpara role="parameter">
            <title>operationName</title>
            <para>The function operation name, for which metadata is
        requested.</para>
         </formalpara>
         <para role="description">
Provides metadata about the function operation.
 </para>
         <para>
 This method must continue to return the operation metadata after the
 function service has been unregistered.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The operation metadata for the given operation name. <code>null</code>
         if the operation metadata is not available.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the function operation with the
         specified name is not available.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getPropertyMetadata(String)" xml:id="org.osgi.service.dal.Function.getPropertyMetadata-String-">
         <title>public PropertyMetadata getPropertyMetadata(String propertyName)</title>
         <formalpara role="parameter">
            <title>propertyName</title>
            <para>The function property name, for which metadata is
        requested.</para>
         </formalpara>
         <para role="description">
Provides metadata about the function property.
 </para>
         <para>
 This method must continue to return the property metadata after the
 function service has been unregistered.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The property metadata for the given property name. <code>null</code>
         if the property metadata is not available.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the function property with the
         specified name is not available.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getServiceProperty(String)" xml:id="org.osgi.service.dal.Function.getServiceProperty-String-">
         <title>public Object getServiceProperty(String propKey)</title>
         <formalpara role="parameter">
            <title>propKey</title>
            <para>The property key.</para>
         </formalpara>
         <para role="description">
Returns the current value of the specified property. The method will
 return the same value as <code>ServiceReference.getProperty(String)</code> for
 the service reference of this function.
 </para>
         <para>
 This method must continue to return property values after the device
 function service has been unregistered.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The property value or <code>null</code> if the property key cannot be
         mapped to a value.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getServicePropertyKeys()" xml:id="org.osgi.service.dal.Function.getServicePropertyKeys--">
         <title>public String[] getServicePropertyKeys()</title>
         <para role="description">
Returns an array with all function service property keys. The method will
 return the same value as <code>ServiceReference.getPropertyKeys()</code> for
 the service reference of this function. The result cannot be <code>null</code>
 .
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An array with all function service property keys, cannot be
         <code>null</code>.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="FunctionData" xml:id="org.osgi.service.dal.FunctionData">
      <title>public abstract class FunctionData<?line-break?> implements Comparable</title>
      <para>
Abstract <code>Function</code> data wrapper. A subclass must be used for an access
 to the property values by all functions. It takes care about the timestamp
 and additional metadata. The subclasses are responsible to provide concrete
 value and unit if required.
   </para>
      <section role="field" xreflabel="DESCRIPTION" xml:id="org.osgi.service.dal.FunctionData.DESCRIPTION">
         <title>public static final String DESCRIPTION = "description"</title>
         <para>
Metadata key, which value represents the data description. The property
 value type is <code>java.lang.String</code>.
   </para>
      </section>
      <section role="field" xreflabel="FIELD_METADATA" xml:id="org.osgi.service.dal.FunctionData.FIELD_METADATA">
         <title>public static final String FIELD_METADATA = "metadata"</title>
         <para>
Represents the metadata field name. The field value is available with
 <link linkend="org.osgi.service.dal.FunctionData.getMetadata--">getMetadata()</link>. The field type is <code>Map</code>. The constant can
 be used as a key to <link linkend="org.osgi.service.dal.FunctionData.FunctionData-Map-">FunctionData(Map)</link>.
   </para>
      </section>
      <section role="field" xreflabel="FIELD_TIMESTAMP" xml:id="org.osgi.service.dal.FunctionData.FIELD_TIMESTAMP">
         <title>public static final String FIELD_TIMESTAMP = "timestamp"</title>
         <para>
Represents the timestamp field name. The field value is available with
 <link linkend="org.osgi.service.dal.FunctionData.getTimestamp--">getTimestamp()</link>. The field type is <code>long</code>. The constant can
 be used as a key to <link linkend="org.osgi.service.dal.FunctionData.FunctionData-Map-">FunctionData(Map)</link>.
   </para>
      </section>
      <section role="method" xreflabel="FunctionData(Map)" xml:id="org.osgi.service.dal.FunctionData.FunctionData-Map-">
         <title>public  FunctionData(Map fields)</title>
         <formalpara role="parameter">
            <title>fields</title>
            <para>Contains the new <code>FunctionData</code> instance field
        values.</para>
         </formalpara>
         <para role="description">
Constructs new <code>FunctionData</code> instance with the specified field
 values. The map keys must match to the field names. The map values will
 be assigned to the appropriate class fields. For example, the maps can
 be: {"timestamp"=Long(1384440775495)}. That map will initialize the
 <link linkend="org.osgi.service.dal.FunctionData.FIELD_TIMESTAMP">FIELD_TIMESTAMP</link> field with 1384440775495. If timestamp is
 missing, Long.MIN_VALUE is used.
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.FunctionData.FIELD_TIMESTAMP">FIELD_TIMESTAMP</link> - optional field. The value type must be
 <code>Long</code>.</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.FunctionData.FIELD_METADATA">FIELD_METADATA</link> - optional field. The value type must be
 <code>Map</code>.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ClassCastException</code>– If the field value types are not expected.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– If the fields map is <code>null</code>.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="FunctionData(long,Map)" xml:id="org.osgi.service.dal.FunctionData.FunctionData-long-Map-">
         <title>public  FunctionData(long timestamp,Map metadata)</title>
         <formalpara role="parameter">
            <title>timestamp</title>
            <para>The data timestamp optional field.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>metadata</title>
            <para>The data metadata optional field.</para>
         </formalpara>
         <para role="description">
Constructs new <code>FunctionData</code> instance with the specified
 arguments.
   </para>
      </section>
      <section role="method" xreflabel="compareTo(Object)" xml:id="org.osgi.service.dal.FunctionData.compareTo-Object-">
         <title>public int compareTo(Object o)</title>
         <formalpara role="parameter">
            <title>o</title>
            <para>
               <code>FunctionData</code> to be compared.</para>
         </formalpara>
         <para role="description">
Compares this <code>FunctionData</code> instance with the given argument. If
 the argument is not <code>FunctionData</code>, it throws
 <code>ClassCastException</code>. Otherwise, this method returns:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>-1</code> if this instance timestamp is less than the argument
 timestamp. If they are equivalent, it can be the result of the metadata
 map deep comparison.</para>
            </listitem>
            <listitem>
               <para>
                  <code>0</code> if all fields are equivalent.</para>
            </listitem>
            <listitem>
               <para>
                  <code>1</code> if this instance timestamp is greater than the argument
 timestamp. If they are equivalent, it can be the result of the metadata
 map deep comparison.</para>
            </listitem>
         </itemizedlist>
         <para>
 Metadata map deep comparison compares the elements of all nested
 <code>java.util.Map</code> and array instances. <code>null</code> is less than any
 other non-null instance.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>-1</code>, <code>0</code> or <code>1</code> depending on the comparison
         rules.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ClassCastException</code>– If the method argument is not of type
         <code>FunctionData</code> or metadata maps contain values of different
         types for the same key.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– If the method argument is <code>null</code>.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>java.lang.Comparable.compareTo(java.lang.Object)</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.dal.FunctionData.equals-Object-">
         <title>public boolean equals(Object other)</title>
         <formalpara role="parameter">
            <title>other</title>
            <para>The other instance to compare. It must be of
        <code>FunctionData</code> type.</para>
         </formalpara>
         <para role="description">
Two <code>FunctionData</code> instances are equal if their metadata and
 timestamp are equivalent.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this instance and argument have equivalent
         metadata and timestamp, <code>false</code> otherwise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>java.lang.Object.equals(java.lang.Object)</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMetadata()" xml:id="org.osgi.service.dal.FunctionData.getMetadata--">
         <title>public Map getMetadata()</title>
         <para role="description">
Returns <code>FunctionData</code> metadata. It's dynamic metadata related only
 to this specific value. Possible keys:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.FunctionData.DESCRIPTION">DESCRIPTION</link>
               </para>
            </listitem>
            <listitem>
               <para>custom key</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>FunctionData</code> metadata or <code>null</code> is there is no
         metadata.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getTimestamp()" xml:id="org.osgi.service.dal.FunctionData.getTimestamp--">
         <title>public long getTimestamp()</title>
         <para role="description">
Returns <code>FunctionData</code> timestamp. The timestamp is the difference
 between the value collecting time and midnight, January 1, 1970 UTC. It's
 measured in milliseconds. The device driver is responsible to generate
 that value when the value is received from the device.
 java.lang.Long.MIN_VALUE value means no timestamp.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>FunctionData</code> timestamp.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.dal.FunctionData.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code of this <code>FunctionData</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>FunctionData</code> hash code.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>java.lang.Object.hashCode()</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="FunctionEvent" xml:id="org.osgi.service.dal.FunctionEvent">
      <title>public class FunctionEvent<?line-break?> extends Event</title>
      <para>
Asynchronous event, which marks a function property value modification. The
 event can be triggered when there is a new property value, but it's possible
 to have events in series with no value change. The event properties must
 contain:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.FunctionEvent.FUNCTION_UID">FUNCTION_UID</link> - the event source function unique identifier.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.FunctionEvent.PROPERTY_NAME">PROPERTY_NAME</link> - the property name.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.FunctionEvent.PROPERTY_VALUE">PROPERTY_VALUE</link> - the property value. The property value type
 must be a subclass of FunctionData.</para>
         </listitem>
      </itemizedlist>
      <section role="field" xreflabel="EVENT_CLASS" xml:id="org.osgi.service.dal.FunctionEvent.EVENT_CLASS">
         <title>public static final String EVENT_CLASS = "org/osgi/service/dal/FunctionEvent/"</title>
         <para>
Represents the event class. That constant can be useful for the event
 handlers depending on the event filters.
   </para>
      </section>
      <section role="field" xreflabel="EVENT_PACKAGE" xml:id="org.osgi.service.dal.FunctionEvent.EVENT_PACKAGE">
         <title>public static final String EVENT_PACKAGE = "org/osgi/service/dal/"</title>
         <para>
Represents the event package. That constant can be useful for the event
 handlers depending on the event filters.
   </para>
      </section>
      <section role="field" xreflabel="FUNCTION_UID" xml:id="org.osgi.service.dal.FunctionEvent.FUNCTION_UID">
         <title>public static final String FUNCTION_UID = "dal.function.UID"</title>
         <para>
Represents an event property key for function UID. The property value
 type is <code>java.lang.String</code>. The value represents the property value
 change source function identifier.
   </para>
      </section>
      <section role="field" xreflabel="PROPERTY_NAME" xml:id="org.osgi.service.dal.FunctionEvent.PROPERTY_NAME">
         <title>public static final String PROPERTY_NAME = "dal.function.property.name"</title>
         <para>
Represents an event property key for the function property name. The
 property value type is <code>java.lang.String</code>. The value represents the
 property name.
   </para>
      </section>
      <section role="field" xreflabel="PROPERTY_VALUE" xml:id="org.osgi.service.dal.FunctionEvent.PROPERTY_VALUE">
         <title>public static final String PROPERTY_VALUE = "dal.function.property.value"</title>
         <para>
Represents an event property key for the function property value. The
 property value type is a subclass of <code>FunctionData</code>. The value
 represents the property value.
   </para>
      </section>
      <section role="field" xreflabel="TOPIC_PROPERTY_CHANGED" xml:id="org.osgi.service.dal.FunctionEvent.TOPIC_PROPERTY_CHANGED">
         <title>public static final String TOPIC_PROPERTY_CHANGED = "org/osgi/service/dal/FunctionEvent/PROPERTY_CHANGED"</title>
         <para>
Represents the event topic for the function property changed.
   </para>
      </section>
      <section role="method" xreflabel="FunctionEvent(String,Dictionary)" xml:id="org.osgi.service.dal.FunctionEvent.FunctionEvent-String-Dictionary-">
         <title>public  FunctionEvent(String topic,Dictionary properties)</title>
         <formalpara role="parameter">
            <title>topic</title>
            <para>The event topic.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>properties</title>
            <para>The event properties.</para>
         </formalpara>
         <para role="description">
Constructs a new event with the specified topic and properties.
   </para>
      </section>
      <section role="method" xreflabel="FunctionEvent(String,Map)" xml:id="org.osgi.service.dal.FunctionEvent.FunctionEvent-String-Map-">
         <title>public  FunctionEvent(String topic,Map properties)</title>
         <formalpara role="parameter">
            <title>topic</title>
            <para>The event topic.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>properties</title>
            <para>The event properties.</para>
         </formalpara>
         <para role="description">
Constructs a new event with the specified topic and properties.
   </para>
      </section>
      <section role="method" xreflabel="FunctionEvent(String,String,String,FunctionData)" xml:id="org.osgi.service.dal.FunctionEvent.FunctionEvent-String-String-String-FunctionData-">
         <title>public  FunctionEvent(String topic,String functionUID,String propName,FunctionData propValue)</title>
         <formalpara role="parameter">
            <title>topic</title>
            <para>The event topic.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>functionUID</title>
            <para>The event source function UID.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>propName</title>
            <para>The event source property name.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>propValue</title>
            <para>The event source property value.</para>
         </formalpara>
         <para role="description">
Constructs a new event with the specified topic, function UID, property
 name and property value.
   </para>
      </section>
      <section role="method" xreflabel="getFunctionPropertyName()" xml:id="org.osgi.service.dal.FunctionEvent.getFunctionPropertyName--">
         <title>public String getFunctionPropertyName()</title>
         <para role="description">
Returns the property name. The value is same as the value of
 <link linkend="org.osgi.service.dal.FunctionEvent.PROPERTY_NAME">PROPERTY_NAME</link>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The property name.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFunctionPropertyValue()" xml:id="org.osgi.service.dal.FunctionEvent.getFunctionPropertyValue--">
         <title>public FunctionData getFunctionPropertyValue()</title>
         <para role="description">
Returns the property value. The value is same as the value of
 <link linkend="org.osgi.service.dal.FunctionEvent.PROPERTY_VALUE">PROPERTY_VALUE</link>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The property value.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFunctionUID()" xml:id="org.osgi.service.dal.FunctionEvent.getFunctionUID--">
         <title>public String getFunctionUID()</title>
         <para role="description">
Returns the property value change source function identifier. The value
 is same as the value of <link linkend="org.osgi.service.dal.FunctionEvent.FUNCTION_UID">FUNCTION_UID</link> property.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The property value change source function.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="OperationMetadata" xml:id="org.osgi.service.dal.OperationMetadata">
      <title>public interface OperationMetadata</title>
      <para>
Contains metadata about function operation.
   </para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.dal.Function">Function</link>, <link linkend="org.osgi.service.dal.PropertyMetadata">PropertyMetadata</link>
         </para>
      </formalpara>
      <section role="field" xreflabel="DESCRIPTION" xml:id="org.osgi.service.dal.OperationMetadata.DESCRIPTION">
         <title>public static final String DESCRIPTION = "description"</title>
         <para>
Metadata key, which value represents the operation description. The
 property value type is <code>java.lang.String</code>.
   </para>
      </section>
      <section role="method" xreflabel="getMetadata()" xml:id="org.osgi.service.dal.OperationMetadata.getMetadata--">
         <title>public Map getMetadata()</title>
         <para role="description">
Returns metadata about the function operation. The keys of the
 <code>java.util.Map</code> result must be of <code>java.lang.String</code> type.
 Possible keys:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.OperationMetadata.DESCRIPTION">DESCRIPTION</link>
               </para>
            </listitem>
            <listitem>
               <para>custom key</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The operation metadata or <code>null</code> if no such metadata is
         available.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getParametersMetadata()" xml:id="org.osgi.service.dal.OperationMetadata.getParametersMetadata--">
         <title>public PropertyMetadata[] getParametersMetadata()</title>
         <para role="description">
Returns metadata about the operation parameters or <code>null</code> if no
 such metadata is available.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Operation parameters metadata.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getReturnValueMetadata()" xml:id="org.osgi.service.dal.OperationMetadata.getReturnValueMetadata--">
         <title>public PropertyMetadata getReturnValueMetadata()</title>
         <para role="description">
Returns metadata about the operation return value or <code>null</code> if no
 such metadata is available.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Operation return value metadata.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="PropertyMetadata" xml:id="org.osgi.service.dal.PropertyMetadata">
      <title>public interface PropertyMetadata</title>
      <para>
Contains metadata about a function property, a function operation parameter
 or a function operation return value.
 
 The access to the function properties is a bitmap value of <link linkend="org.osgi.service.dal.PropertyMetadata.ACCESS">ACCESS</link>
 metadata key. Function properties can be accessed in three ways. Any
 combinations between them are possible:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.PropertyMetadata.ACCESS_READABLE">ACCESS_READABLE</link> - available for all properties, which can be read.
 Function must provide a getter method for an access to the property value.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.PropertyMetadata.ACCESS_WRITABLE">ACCESS_WRITABLE</link> - available for all properties, which can be
 modified. Function must provide a setter method for a modification of the
 property value.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.PropertyMetadata.ACCESS_EVENTABLE">ACCESS_EVENTABLE</link> - available for all properties, which can report
 the property value. <link linkend="org.osgi.service.dal.FunctionEvent">FunctionEvent</link>s are sent on property change.</para>
         </listitem>
      </itemizedlist>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.dal.Function">Function</link>, <link linkend="org.osgi.service.dal.PropertyMetadata">PropertyMetadata</link>
         </para>
      </formalpara>
      <section role="field" xreflabel="ACCESS" xml:id="org.osgi.service.dal.PropertyMetadata.ACCESS">
         <title>public static final String ACCESS = "access"</title>
         <para>
Metadata key, which value represents the access to the function property.
 The property value is a bitmap of <code>Integer</code> type. The bitmap can be
 any combination of:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.PropertyMetadata.ACCESS_READABLE">ACCESS_READABLE</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.PropertyMetadata.ACCESS_WRITABLE">ACCESS_WRITABLE</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.PropertyMetadata.ACCESS_EVENTABLE">ACCESS_EVENTABLE</link>
               </para>
            </listitem>
         </itemizedlist>
         <para>
 For example, value <code>Integer(3)</code> means that the property is readable
 and writable, but not eventable.
 </para>
         <para>
 The property access is available only for function properties and it's
 missing for the operation parameters.</para>
      </section>
      <section role="field" xreflabel="ACCESS_EVENTABLE" xml:id="org.osgi.service.dal.PropertyMetadata.ACCESS_EVENTABLE">
         <title>public static final int ACCESS_EVENTABLE = 4</title>
         <para>
Marks the eventable function properties. The flag can be used as a part
 of bitmap value of <link linkend="org.osgi.service.dal.PropertyMetadata.ACCESS">ACCESS</link>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dal.Function">Function</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="ACCESS_READABLE" xml:id="org.osgi.service.dal.PropertyMetadata.ACCESS_READABLE">
         <title>public static final int ACCESS_READABLE = 1</title>
         <para>
Marks the readable function properties. The flag can be used as a part of
 bitmap value of <link linkend="org.osgi.service.dal.PropertyMetadata.ACCESS">ACCESS</link>. The readable access mandates function to
 provide a property getter method.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dal.Function">Function</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="ACCESS_WRITABLE" xml:id="org.osgi.service.dal.PropertyMetadata.ACCESS_WRITABLE">
         <title>public static final int ACCESS_WRITABLE = 2</title>
         <para>
Marks the writable function properties. The flag can be used as a part of
 bitmap value of <link linkend="org.osgi.service.dal.PropertyMetadata.ACCESS">ACCESS</link>. The writable access mandates function to
 provide a property setter methods.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dal.Function">Function</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="DESCRIPTION" xml:id="org.osgi.service.dal.PropertyMetadata.DESCRIPTION">
         <title>public static final String DESCRIPTION = "description"</title>
         <para>
Metadata key, which value represents the property description. The
 property value type is <code>java.lang.String</code>.
   </para>
      </section>
      <section role="field" xreflabel="UNITS" xml:id="org.osgi.service.dal.PropertyMetadata.UNITS">
         <title>public static final String UNITS = "units"</title>
         <para>
Metadata key, which value represents the property supported units. The
 property value type is <code>java.lang.String[]</code>. The array first
 element at index <code>0</code> represents the default unit. Each unit must
 follow those rules:
 </para>
         <itemizedlist>
            <listitem>
               <para>The International System of Units must be used where it's applicable.
 For example, kg for kilogram and km for kilometer.</para>
            </listitem>
            <listitem>
               <para>If the unit name matches to an Unicode symbol name, the Unicode
 symbol must be used. For example, the degree unit matches to the Unicode
 degree sign (<code>°</code>).</para>
            </listitem>
            <listitem>
               <para>If the unit name doesn't match to an Unicode symbol, the unit symbol
 must be built by Unicode Basic Latin block of characters, superscript and
 subscript characters. For example, watt per square meter steradian is
 built by <code>W/(m² sr)</code>.</para>
            </listitem>
         </itemizedlist>
         <para>
 If those rules cannot be applied to the unit symbol, custom rules are
 allowed. A set of predefined unit symbols are available in
 <link linkend="org.osgi.service.dal.SIUnits">SIUnits</link> interface.
   </para>
      </section>
      <section role="method" xreflabel="getEnumValues(String)" xml:id="org.osgi.service.dal.PropertyMetadata.getEnumValues-String-">
         <title>public FunctionData[] getEnumValues(String unit)</title>
         <formalpara role="parameter">
            <title>unit</title>
            <para>The unit to align the supported values, can be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Returns the property possible values according to the specified unit. If
 the unit is <code>null</code>, the values set is aligned to the default unit.
 If there is no such set of supported values, <code>null</code> is returned.
 The values must be sorted in increasing order.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The supported values according to the specified unit or
         <code>null</code> if no such values are supported. The values must be
         sorted in increasing order.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the unit is not supported.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMaxValue(String)" xml:id="org.osgi.service.dal.PropertyMetadata.getMaxValue-String-">
         <title>public FunctionData getMaxValue(String unit)</title>
         <formalpara role="parameter">
            <title>unit</title>
            <para>The unit to align the maximum value, can be <code>null</code> .</para>
         </formalpara>
         <para role="description">
Returns the property maximum value according to the specified unit. If
 the unit is <code>null</code>, the maximum value is aligned to the default
 unit. If there is no maximum value, <code>null</code> is returned.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The maximum value according to the specified unit or <code>null</code>
         if no maximum value is supported.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the unit is not supported.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMetadata(String)" xml:id="org.osgi.service.dal.PropertyMetadata.getMetadata-String-">
         <title>public Map getMetadata(String unit)</title>
         <formalpara role="parameter">
            <title>unit</title>
            <para>The unit to align the metadata if it's applicable. It can be
        null, which means that the default unit will be used.</para>
         </formalpara>
         <para role="description">
Returns metadata about the function property or operation parameter. The
 keys of the <code>java.util.Map</code> result must be of
 <code>java.lang.String</code> type. Possible keys:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.PropertyMetadata.DESCRIPTION">DESCRIPTION</link> - doesn't depend on the given unit.</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.PropertyMetadata.ACCESS">ACCESS</link> - available only for function property and missing
 for function operation parameters. It doesn't depend on the given unit.</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.PropertyMetadata.UNITS">UNITS</link> - doesn't depend on the given unit.</para>
            </listitem>
            <listitem>
               <para>custom key - can depend on the unit. Organizations that want to use
 custom keys that do not clash with OSGi Alliance defined should prefix
 their keys in own namespace.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The property metadata or <code>null</code> if no such metadata is
         available.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMinValue(String)" xml:id="org.osgi.service.dal.PropertyMetadata.getMinValue-String-">
         <title>public FunctionData getMinValue(String unit)</title>
         <formalpara role="parameter">
            <title>unit</title>
            <para>The unit to align the minimum value, can be <code>null</code> .</para>
         </formalpara>
         <para role="description">
Returns the property minimum value according to the specified unit. If
 the unit is <code>null</code>, the minimum value is aligned to the default
 unit. If there is no minimum value, <code>null</code> is returned.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The minimum value according to the specified unit or <code>null</code>
         if no minimum value is supported.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the unit is not supported.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getStep(String)" xml:id="org.osgi.service.dal.PropertyMetadata.getStep-String-">
         <title>public FunctionData getStep(String unit)</title>
         <formalpara role="parameter">
            <title>unit</title>
            <para>The unit to align the step, can be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Returns the difference between two values in series. For example, if the
 range is [0, 100], the step can be 10.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The step according to the specified unit or <code>null</code> if no
         step is supported.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the unit is not supported.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="SIUnits" xml:id="org.osgi.service.dal.SIUnits">
      <title>public final class SIUnits</title>
      <para>
Contains most of the International System of Units unit symbols. The constant
 name represents the unit name. The constant value represents the unit symbol
 as it's defined in <link linkend="org.osgi.service.dal.PropertyMetadata.UNITS">PropertyMetadata.UNITS</link>.
   </para>
      <section role="field" xreflabel="AMPERE" xml:id="org.osgi.service.dal.SIUnits.AMPERE">
         <title>public static final String AMPERE = "A"</title>
         <para>
Unit of electric current defined by the International System of Units
 (SI). It's one of be base units called ampere.
   </para>
      </section>
      <section role="field" xreflabel="AMPERE_PER_METER" xml:id="org.osgi.service.dal.SIUnits.AMPERE_PER_METER">
         <title>public static final String AMPERE_PER_METER = "A/m"</title>
         <para>
Unit of magnetic field strength. It's one of coherent derived units in
 the SI expressed in terms of base units. The unit is called ampere per
 meter.
   </para>
      </section>
      <section role="field" xreflabel="AMPERE_PER_SQUARE_METER" xml:id="org.osgi.service.dal.SIUnits.AMPERE_PER_SQUARE_METER">
         <title>public static final String AMPERE_PER_SQUARE_METER = "A/m\u00b2"</title>
         <para>
Unit of current density. It's one of coherent derived units in the SI
 expressed in terms of base units. The unit is called ampere per square
 meter.
   </para>
      </section>
      <section role="field" xreflabel="ANGSTROM" xml:id="org.osgi.service.dal.SIUnits.ANGSTROM">
         <title>public static final String ANGSTROM = "\u212b"</title>
         <para>
Unit of length. It's one of other non-SI units. The unit is called
 angstrom.
   </para>
      </section>
      <section role="field" xreflabel="BAR" xml:id="org.osgi.service.dal.SIUnits.BAR">
         <title>public static final String BAR = "bar"</title>
         <para>
Unit of pressure. It's one of other non-SI units. The unit is called bar.
   </para>
      </section>
      <section role="field" xreflabel="BARN" xml:id="org.osgi.service.dal.SIUnits.BARN">
         <title>public static final String BARN = "b"</title>
         <para>
Unit of area. It's one of other non-SI units. The unit is called barn.
   </para>
      </section>
      <section role="field" xreflabel="BECQUEREL" xml:id="org.osgi.service.dal.SIUnits.BECQUEREL">
         <title>public static final String BECQUEREL = "Bq"</title>
         <para>
Unit of activity referred to a radionuclide. It's one of the coherent
 derived units in the SI with special names and symbols. The unit is
 called becquerel.
   </para>
      </section>
      <section role="field" xreflabel="BEL" xml:id="org.osgi.service.dal.SIUnits.BEL">
         <title>public static final String BEL = "B"</title>
         <para>
Unit of logarithmic ratio quantities. It's one of other non-SI units. The
 unit is called bel.
   </para>
      </section>
      <section role="field" xreflabel="CANDELA" xml:id="org.osgi.service.dal.SIUnits.CANDELA">
         <title>public static final String CANDELA = "cd"</title>
         <para>
Unit of luminous intensity defined by the International System of Units
 (SI). It's one of be base units called candela.
   </para>
      </section>
      <section role="field" xreflabel="CANDELA_PER_SQUARE_METER" xml:id="org.osgi.service.dal.SIUnits.CANDELA_PER_SQUARE_METER">
         <title>public static final String CANDELA_PER_SQUARE_METER = "cd/m\u00b2"</title>
         <para>
Unit of luminance. It's one of coherent derived units in the SI expressed
 in terms of base units. The unit is called candela per square meter.
   </para>
      </section>
      <section role="field" xreflabel="COULOMB" xml:id="org.osgi.service.dal.SIUnits.COULOMB">
         <title>public static final String COULOMB = "C"</title>
         <para>
Unit of electronic charge, amount of electricity. It's one of the
 coherent derived units in the SI with special names and symbols. The unit
 is called coulomb.
   </para>
      </section>
      <section role="field" xreflabel="COULOMB_PER_CUBIC_METER" xml:id="org.osgi.service.dal.SIUnits.COULOMB_PER_CUBIC_METER">
         <title>public static final String COULOMB_PER_CUBIC_METER = "C/m\u00b3"</title>
         <para>
Unit of electric charge density. It's one of coherent derived units whose
 names and symbols include SI coherent derived units with special names
 and symbols. The unit is called coulomb per cubic meter.
   </para>
      </section>
      <section role="field" xreflabel="COULOMB_PER_KILOGRAM" xml:id="org.osgi.service.dal.SIUnits.COULOMB_PER_KILOGRAM">
         <title>public static final String COULOMB_PER_KILOGRAM = "C/kg"</title>
         <para>
Unit of exposure (x- and gamma-rays). It's one of coherent derived units
 whose names and symbols include SI coherent derived units with special
 names and symbols. The unit is called coulomb per kilogram.
   </para>
      </section>
      <section role="field" xreflabel="COULOMB_PER_SQUARE_METER" xml:id="org.osgi.service.dal.SIUnits.COULOMB_PER_SQUARE_METER">
         <title>public static final String COULOMB_PER_SQUARE_METER = "C/m\u00b2"</title>
         <para>
Unit of surface charge density, electric flux density, electric
 displacement. It's one of coherent derived units whose names and symbols
 include SI coherent derived units with special names and symbols. The
 unit is called coulomb per square meter.
   </para>
      </section>
      <section role="field" xreflabel="CUBIC_METER" xml:id="org.osgi.service.dal.SIUnits.CUBIC_METER">
         <title>public static final String CUBIC_METER = "m\u00b3"</title>
         <para>
Unit of volume. It's one of coherent derived units in the SI expressed in
 terms of base units. The unit is called cubic meter.
   </para>
      </section>
      <section role="field" xreflabel="CUBIC_METER_PER_KILOGRAM" xml:id="org.osgi.service.dal.SIUnits.CUBIC_METER_PER_KILOGRAM">
         <title>public static final String CUBIC_METER_PER_KILOGRAM = "m\u00b3/kg"</title>
         <para>
Unit of specific volume. It's one of coherent derived units in the SI
 expressed in terms of base units. The unit is called cubic meter per
 kilogram.
   </para>
      </section>
      <section role="field" xreflabel="DAY" xml:id="org.osgi.service.dal.SIUnits.DAY">
         <title>public static final String DAY = "d"</title>
         <para>
Unit of time. It's one of non-SI units accepted for use with the
 International System of Units. The unit is called day.
   </para>
      </section>
      <section role="field" xreflabel="DECIBEL" xml:id="org.osgi.service.dal.SIUnits.DECIBEL">
         <title>public static final String DECIBEL = "dB"</title>
         <para>
Unit of logarithmic ratio quantities. It's one of other non-SI units. The
 unit is called decibel.
   </para>
      </section>
      <section role="field" xreflabel="DEGREE" xml:id="org.osgi.service.dal.SIUnits.DEGREE">
         <title>public static final String DEGREE = "\u00b0"</title>
         <para>
Unit of plane angle. It's one of non-SI units accepted for use with the
 International System of Units. The unit is called degree.
   </para>
      </section>
      <section role="field" xreflabel="DEGREE_CELSIUS" xml:id="org.osgi.service.dal.SIUnits.DEGREE_CELSIUS">
         <title>public static final String DEGREE_CELSIUS = "\u2103"</title>
         <para>
Unit of Celsius temperature. It's one of the coherent derived units in
 the SI with special names and symbols. The unit is called degree Celsius.
   </para>
      </section>
      <section role="field" xreflabel="DYNE" xml:id="org.osgi.service.dal.SIUnits.DYNE">
         <title>public static final String DYNE = "dyn"</title>
         <para>
Unit of force. It's one of non-SI units associated with the CGS and the
 CGS-Gaussian system of units. The unit is called dyne.
   </para>
      </section>
      <section role="field" xreflabel="ERG" xml:id="org.osgi.service.dal.SIUnits.ERG">
         <title>public static final String ERG = "erg"</title>
         <para>
Unit of energy. It's one of non-SI units associated with the CGS and the
 CGS-Gaussian system of units. The unit is called erg.
   </para>
      </section>
      <section role="field" xreflabel="FARAD" xml:id="org.osgi.service.dal.SIUnits.FARAD">
         <title>public static final String FARAD = "F"</title>
         <para>
Unit of capacitance. It's one of the coherent derived units in the SI
 with special names and symbols. The unit is called farad.
   </para>
      </section>
      <section role="field" xreflabel="FARAD_PER_METER" xml:id="org.osgi.service.dal.SIUnits.FARAD_PER_METER">
         <title>public static final String FARAD_PER_METER = "F/m"</title>
         <para>
Unit of permittivity. It's one of coherent derived units whose names and
 symbols include SI coherent derived units with special names and symbols.
 The unit is called farad per meter.
   </para>
      </section>
      <section role="field" xreflabel="GAL" xml:id="org.osgi.service.dal.SIUnits.GAL">
         <title>public static final String GAL = "Gal"</title>
         <para>
Unit of acceleration. It's one of non-SI units associated with the CGS
 and the CGS-Gaussian system of units. The unit is called gal.
   </para>
      </section>
      <section role="field" xreflabel="GAUSS" xml:id="org.osgi.service.dal.SIUnits.GAUSS">
         <title>public static final String GAUSS = "G"</title>
         <para>
Unit of magnetic flux density. It's one of non-SI units associated with
 the CGS and the CGS-Gaussian system of units. The unit is called gauss.
   </para>
      </section>
      <section role="field" xreflabel="GRAY" xml:id="org.osgi.service.dal.SIUnits.GRAY">
         <title>public static final String GRAY = "Gy"</title>
         <para>
Unit of absorbed dose, specific energy (imparted), kerma. It's one of the
 coherent derived units in the SI with special names and symbols. The unit
 is called gray.
   </para>
      </section>
      <section role="field" xreflabel="GRAY_PER_SECOND" xml:id="org.osgi.service.dal.SIUnits.GRAY_PER_SECOND">
         <title>public static final String GRAY_PER_SECOND = "Gy/s"</title>
         <para>
Unit of absorbed dose rate. It's one of coherent derived units whose
 names and symbols include SI coherent derived units with special names
 and symbols. The unit is called gray per second.
   </para>
      </section>
      <section role="field" xreflabel="HECTARE" xml:id="org.osgi.service.dal.SIUnits.HECTARE">
         <title>public static final String HECTARE = "ha"</title>
         <para>
Unit of area. It's one of non-SI units accepted for use with the
 International System of Units. The unit is called hectare.
   </para>
      </section>
      <section role="field" xreflabel="HENRY" xml:id="org.osgi.service.dal.SIUnits.HENRY">
         <title>public static final String HENRY = "H"</title>
         <para>
Unit of inductance. It's one of the coherent derived units in the SI with
 special names and symbols. The unit is called henry.
   </para>
      </section>
      <section role="field" xreflabel="HENRY_PER_METER" xml:id="org.osgi.service.dal.SIUnits.HENRY_PER_METER">
         <title>public static final String HENRY_PER_METER = "H/m"</title>
         <para>
Unit of permeability. It's one of coherent derived units whose names and
 symbols include SI coherent derived units with special names and symbols.
 The unit is called henry per meter.
   </para>
      </section>
      <section role="field" xreflabel="HERTZ" xml:id="org.osgi.service.dal.SIUnits.HERTZ">
         <title>public static final String HERTZ = "Hz"</title>
         <para>
Unit of frequency. It's one of the coherent derived units in the SI with
 special names and symbols. The unit is called hertz.
   </para>
      </section>
      <section role="field" xreflabel="HOUR" xml:id="org.osgi.service.dal.SIUnits.HOUR">
         <title>public static final String HOUR = "h"</title>
         <para>
Unit of time. It's one of non-SI units accepted for use with the
 International System of Units. The unit is called hour.
   </para>
      </section>
      <section role="field" xreflabel="JOULE" xml:id="org.osgi.service.dal.SIUnits.JOULE">
         <title>public static final String JOULE = "J"</title>
         <para>
Unit of energy, work, amount of electricity. It's one of the coherent
 derived units in the SI with special names and symbols. The unit is
 called joule.
   </para>
      </section>
      <section role="field" xreflabel="JOULE_PER_CUBIC_METER" xml:id="org.osgi.service.dal.SIUnits.JOULE_PER_CUBIC_METER">
         <title>public static final String JOULE_PER_CUBIC_METER = "J/m\u00b3"</title>
         <para>
Unit of energy density. It's one of coherent derived units whose names
 and symbols include SI coherent derived units with special names and
 symbols. The unit is called joule per cubic meter.
   </para>
      </section>
      <section role="field" xreflabel="JOULE_PER_KELVIN" xml:id="org.osgi.service.dal.SIUnits.JOULE_PER_KELVIN">
         <title>public static final String JOULE_PER_KELVIN = "J/\u212a"</title>
         <para>
Unit of heat capacity, entropy. It's one of coherent derived units whose
 names and symbols include SI coherent derived units with special names
 and symbols. The unit is called joule per kelvin.
   </para>
      </section>
      <section role="field" xreflabel="JOULE_PER_KILOGRAM" xml:id="org.osgi.service.dal.SIUnits.JOULE_PER_KILOGRAM">
         <title>public static final String JOULE_PER_KILOGRAM = "J/kg"</title>
         <para>
Unit of specific energy. It's one of coherent derived units whose names
 and symbols include SI coherent derived units with special names and
 symbols. The unit is called joule per kilogram.
   </para>
      </section>
      <section role="field" xreflabel="JOULE_PER_KILOGRAM_KELVIN" xml:id="org.osgi.service.dal.SIUnits.JOULE_PER_KILOGRAM_KELVIN">
         <title>public static final String JOULE_PER_KILOGRAM_KELVIN = "J/(kg \u212a)"</title>
         <para>
Unit of specific heat capacity, specific entropy. It's one of coherent
 derived units whose names and symbols include SI coherent derived units
 with special names and symbols. The unit is called joule per kilogram
 kelvin.
   </para>
      </section>
      <section role="field" xreflabel="JOULE_PER_MOLE" xml:id="org.osgi.service.dal.SIUnits.JOULE_PER_MOLE">
         <title>public static final String JOULE_PER_MOLE = "J/mol"</title>
         <para>
Unit of molar energy. It's one of coherent derived units whose names and
 symbols include SI coherent derived units with special names and symbols.
 The unit is called joule per mole.
   </para>
      </section>
      <section role="field" xreflabel="JOULE_PER_MOLE_KELVIN" xml:id="org.osgi.service.dal.SIUnits.JOULE_PER_MOLE_KELVIN">
         <title>public static final String JOULE_PER_MOLE_KELVIN = "J/(mol \u212a)"</title>
         <para>
Unit of molar entropy, molar heat capacity. It's one of coherent derived
 units whose names and symbols include SI coherent derived units with
 special names and symbols. The unit is called joule per mole kelvin.
   </para>
      </section>
      <section role="field" xreflabel="KATAL" xml:id="org.osgi.service.dal.SIUnits.KATAL">
         <title>public static final String KATAL = "kat"</title>
         <para>
Unit of catalytic activity. It's one of the coherent derived units in the
 SI with special names and symbols. The unit is called katal.
   </para>
      </section>
      <section role="field" xreflabel="KATAL_PER_CUBIC_METER" xml:id="org.osgi.service.dal.SIUnits.KATAL_PER_CUBIC_METER">
         <title>public static final String KATAL_PER_CUBIC_METER = "kat/m\u00b3"</title>
         <para>
Unit of catalytic activity concentration. It's one of coherent derived
 units whose names and symbols include SI coherent derived units with
 special names and symbols. The unit is called katal per cubic meter.
   </para>
      </section>
      <section role="field" xreflabel="KELVIN" xml:id="org.osgi.service.dal.SIUnits.KELVIN">
         <title>public static final String KELVIN = "\u212a"</title>
         <para>
Unit of thermodynamic temperature defined by the International System of
 Units (SI). It's one of be base units called kelvin.
   </para>
      </section>
      <section role="field" xreflabel="KILOGRAM" xml:id="org.osgi.service.dal.SIUnits.KILOGRAM">
         <title>public static final String KILOGRAM = "kg"</title>
         <para>
Unit of mass defined by the International System of Units (SI). It's one
 of be base units called kilogram.
   </para>
      </section>
      <section role="field" xreflabel="KILOGRAM_PER_CUBIC_METER" xml:id="org.osgi.service.dal.SIUnits.KILOGRAM_PER_CUBIC_METER">
         <title>public static final String KILOGRAM_PER_CUBIC_METER = "kg/m\u00b3"</title>
         <para>
Unit of density, mass density, mass concentration. It's one of coherent
 derived units in the SI expressed in terms of base units. The unit is
 called kilogram per cubic meter.
   </para>
      </section>
      <section role="field" xreflabel="KILOGRAM_PER_SQUARE_METER" xml:id="org.osgi.service.dal.SIUnits.KILOGRAM_PER_SQUARE_METER">
         <title>public static final String KILOGRAM_PER_SQUARE_METER = "kg/m\u00b2"</title>
         <para>
Unit of surface density. It's one of coherent derived units in the SI
 expressed in terms of base units. The unit is called kilogram per square
 meter.
   </para>
      </section>
      <section role="field" xreflabel="KNOT" xml:id="org.osgi.service.dal.SIUnits.KNOT">
         <title>public static final String KNOT = "kn"</title>
         <para>
Unit of speed. It's one of other non-SI units. The unit is called knot.
   </para>
      </section>
      <section role="field" xreflabel="LITER" xml:id="org.osgi.service.dal.SIUnits.LITER">
         <title>public static final String LITER = "l"</title>
         <para>
Unit of volume. It's one of non-SI units accepted for use with the
 International System of Units. The unit is called liter. International
 System of Units accepts two symbols: lower-case l and capital L. That
 constant value is using the lower-case l.
   </para>
      </section>
      <section role="field" xreflabel="LUMEN" xml:id="org.osgi.service.dal.SIUnits.LUMEN">
         <title>public static final String LUMEN = "lm"</title>
         <para>
Unit of luminous flux. It's one of the coherent derived units in the SI
 with special names and symbols. The unit is called lumen.
   </para>
      </section>
      <section role="field" xreflabel="LUX" xml:id="org.osgi.service.dal.SIUnits.LUX">
         <title>public static final String LUX = "lx"</title>
         <para>
Unit of illuminance. It's one of the coherent derived units in the SI
 with special names and symbols. The unit is called lux.
   </para>
      </section>
      <section role="field" xreflabel="MAXWELL" xml:id="org.osgi.service.dal.SIUnits.MAXWELL">
         <title>public static final String MAXWELL = "Mx"</title>
         <para>
Unit of magnetic flux. It's one of non-SI units associated with the CGS
 and the CGS-Gaussian system of units. The unit is called maxwell.
   </para>
      </section>
      <section role="field" xreflabel="METER" xml:id="org.osgi.service.dal.SIUnits.METER">
         <title>public static final String METER = "m"</title>
         <para>
Unit of length defined by the International System of Units (SI). It's
 one of be base units called meter.
   </para>
      </section>
      <section role="field" xreflabel="METER_PER_SECOND" xml:id="org.osgi.service.dal.SIUnits.METER_PER_SECOND">
         <title>public static final String METER_PER_SECOND = "m/s"</title>
         <para>
Unit of speed, velocity. It's one of coherent derived units in the SI
 expressed in terms of base units. The unit is called meter per second.
   </para>
      </section>
      <section role="field" xreflabel="METER_PER_SECOND_SQUARED" xml:id="org.osgi.service.dal.SIUnits.METER_PER_SECOND_SQUARED">
         <title>public static final String METER_PER_SECOND_SQUARED = "m/s\u00b2"</title>
         <para>
Unit of acceleration. It's one of coherent derived units in the SI
 expressed in terms of base units. The unit is called meter per second
 squared.
   </para>
      </section>
      <section role="field" xreflabel="MILLIMETER_OF_MERCURY" xml:id="org.osgi.service.dal.SIUnits.MILLIMETER_OF_MERCURY">
         <title>public static final String MILLIMETER_OF_MERCURY = "mmHg"</title>
         <para>
Unit of pressure. It's one of other non-SI units. The unit is called
 millimeter of mercury.
   </para>
      </section>
      <section role="field" xreflabel="MOLE" xml:id="org.osgi.service.dal.SIUnits.MOLE">
         <title>public static final String MOLE = "mol"</title>
         <para>
Unit of amount of substance defined by the International System of Units
 (SI). It's one of be base units called mole.
   </para>
      </section>
      <section role="field" xreflabel="MOLE_PER_CUBIC_METER" xml:id="org.osgi.service.dal.SIUnits.MOLE_PER_CUBIC_METER">
         <title>public static final String MOLE_PER_CUBIC_METER = "mol/m\u00b3"</title>
         <para>
Unit of amount concentration, concentration. It's one of coherent derived
 units in the SI expressed in terms of base units. The unit is called mole
 per cubic meter.
   </para>
      </section>
      <section role="field" xreflabel="NAUTICAL_MILE" xml:id="org.osgi.service.dal.SIUnits.NAUTICAL_MILE">
         <title>public static final String NAUTICAL_MILE = "M"</title>
         <para>
Unit of distance. It's one of other non-SI units. The unit is called
 nautical mile.
   </para>
      </section>
      <section role="field" xreflabel="NEPER" xml:id="org.osgi.service.dal.SIUnits.NEPER">
         <title>public static final String NEPER = "Np"</title>
         <para>
Unit of logarithmic ratio quantities. It's one of other non-SI units. The
 unit is called neper.
   </para>
      </section>
      <section role="field" xreflabel="NEWTON" xml:id="org.osgi.service.dal.SIUnits.NEWTON">
         <title>public static final String NEWTON = "N"</title>
         <para>
Unit of force. It's one of the coherent derived units in the SI with
 special names and symbols. The unit is called newton.
   </para>
      </section>
      <section role="field" xreflabel="NEWTON_METER" xml:id="org.osgi.service.dal.SIUnits.NEWTON_METER">
         <title>public static final String NEWTON_METER = "N m"</title>
         <para>
Unit of moment of force. It's one of coherent derived units whose names
 and symbols include SI coherent derived units with special names and
 symbols. The unit is called newton meter.
   </para>
      </section>
      <section role="field" xreflabel="NEWTON_PER_METER" xml:id="org.osgi.service.dal.SIUnits.NEWTON_PER_METER">
         <title>public static final String NEWTON_PER_METER = "N/m"</title>
         <para>
Unit of surface tension. It's one of coherent derived units whose names
 and symbols include SI coherent derived units with special names and
 symbols. The unit is called newton per meter.
   </para>
      </section>
      <section role="field" xreflabel="OERSTED" xml:id="org.osgi.service.dal.SIUnits.OERSTED">
         <title>public static final String OERSTED = "Oe"</title>
         <para>
Unit of magnetic field. It's one of non-SI units associated with the CGS
 and the CGS-Gaussian system of units. The unit is called oersted.
   </para>
      </section>
      <section role="field" xreflabel="OHM" xml:id="org.osgi.service.dal.SIUnits.OHM">
         <title>public static final String OHM = "\u2126"</title>
         <para>
Unit of electric resistance. It's one of the coherent derived units in
 the SI with special names and symbols. The unit is called ohm.
   </para>
      </section>
      <section role="field" xreflabel="PASCAL" xml:id="org.osgi.service.dal.SIUnits.PASCAL">
         <title>public static final String PASCAL = "Pa"</title>
         <para>
Unit of pressure, stress. It's one of the coherent derived units in the
 SI with special names and symbols. The unit is called pascal.
   </para>
      </section>
      <section role="field" xreflabel="PASCAL_SECOND" xml:id="org.osgi.service.dal.SIUnits.PASCAL_SECOND">
         <title>public static final String PASCAL_SECOND = "Pa s"</title>
         <para>
Unit of dynamic viscosity. It's one of coherent derived units whose names
 and symbols include SI coherent derived units with special names and
 symbols. The unit is called pascal second.
   </para>
      </section>
      <section role="field" xreflabel="PHOT" xml:id="org.osgi.service.dal.SIUnits.PHOT">
         <title>public static final String PHOT = "ph"</title>
         <para>
Unit of illuminance. It's one of non-SI units associated with the CGS and
 the CGS-Gaussian system of units. The unit is called phot.
   </para>
      </section>
      <section role="field" xreflabel="PLANE_ANGLE_MINUTE" xml:id="org.osgi.service.dal.SIUnits.PLANE_ANGLE_MINUTE">
         <title>public static final String PLANE_ANGLE_MINUTE = "\u2032"</title>
         <para>
Unit of plane angle. It's one of non-SI units accepted for use with the
 International System of Units. The unit is called minute.
   </para>
      </section>
      <section role="field" xreflabel="PLANE_ANGLE_SECOND" xml:id="org.osgi.service.dal.SIUnits.PLANE_ANGLE_SECOND">
         <title>public static final String PLANE_ANGLE_SECOND = "\u2033"</title>
         <para>
Unit of plane angle. It's one of non-SI units accepted for use with the
 International System of Units. The unit is called second.
   </para>
      </section>
      <section role="field" xreflabel="POISE" xml:id="org.osgi.service.dal.SIUnits.POISE">
         <title>public static final String POISE = "P"</title>
         <para>
Unit of dynamic viscosity. It's one of non-SI units associated with the
 CGS and the CGS-Gaussian system of units. The unit is called poise.
   </para>
      </section>
      <section role="field" xreflabel="PREFIX_ATTO" xml:id="org.osgi.service.dal.SIUnits.PREFIX_ATTO">
         <title>public static final String PREFIX_ATTO = "a"</title>
         <para>
Adopted prefix symbol to form the symbols of the decimal submultiples of
 SI units. It's called atto and represents the 18th negative power of ten.
   </para>
      </section>
      <section role="field" xreflabel="PREFIX_CENTI" xml:id="org.osgi.service.dal.SIUnits.PREFIX_CENTI">
         <title>public static final String PREFIX_CENTI = "c"</title>
         <para>
Adopted prefix symbol to form the symbols of the decimal submultiples of
 SI units. It's called centi and represents the 2nd negative power of ten.
   </para>
      </section>
      <section role="field" xreflabel="PREFIX_DECA" xml:id="org.osgi.service.dal.SIUnits.PREFIX_DECA">
         <title>public static final String PREFIX_DECA = "da"</title>
         <para>
Adopted prefix symbol to form the symbols of the decimal multiples of SI
 units. It's called deca and represents the 1st power of ten.
   </para>
      </section>
      <section role="field" xreflabel="PREFIX_DECI" xml:id="org.osgi.service.dal.SIUnits.PREFIX_DECI">
         <title>public static final String PREFIX_DECI = "d"</title>
         <para>
Adopted prefix symbol to form the symbols of the decimal submultiples of
 SI units. It's called deci and represents the 1st negative power of ten.
   </para>
      </section>
      <section role="field" xreflabel="PREFIX_EXA" xml:id="org.osgi.service.dal.SIUnits.PREFIX_EXA">
         <title>public static final String PREFIX_EXA = "E"</title>
         <para>
Adopted prefix symbol to form the symbols of the decimal multiples of SI
 units. It's called exa and represents the 18th power of ten.
   </para>
      </section>
      <section role="field" xreflabel="PREFIX_FEMTO" xml:id="org.osgi.service.dal.SIUnits.PREFIX_FEMTO">
         <title>public static final String PREFIX_FEMTO = "f"</title>
         <para>
Adopted prefix symbol to form the symbols of the decimal submultiples of
 SI units. It's called femto and represents the 15th negative power of
 ten.
   </para>
      </section>
      <section role="field" xreflabel="PREFIX_GIGA" xml:id="org.osgi.service.dal.SIUnits.PREFIX_GIGA">
         <title>public static final String PREFIX_GIGA = "G"</title>
         <para>
Adopted prefix symbol to form the symbols of the decimal multiples of SI
 units. It's called giga and represents the 9th power of ten.
   </para>
      </section>
      <section role="field" xreflabel="PREFIX_HECTO" xml:id="org.osgi.service.dal.SIUnits.PREFIX_HECTO">
         <title>public static final String PREFIX_HECTO = "h"</title>
         <para>
Adopted prefix symbol to form the symbols of the decimal multiples of SI
 units. It's called hecto and represents the 2nd power of ten.
   </para>
      </section>
      <section role="field" xreflabel="PREFIX_KILO" xml:id="org.osgi.service.dal.SIUnits.PREFIX_KILO">
         <title>public static final String PREFIX_KILO = "k"</title>
         <para>
Adopted prefix symbol to form the symbols of the decimal multiples of SI
 units. It's called kilo and represents the 3rd power of ten.
   </para>
      </section>
      <section role="field" xreflabel="PREFIX_MEGA" xml:id="org.osgi.service.dal.SIUnits.PREFIX_MEGA">
         <title>public static final String PREFIX_MEGA = "M"</title>
         <para>
Adopted prefix symbol to form the symbols of the decimal multiples of SI
 units. It's called mega and represents the 6th power of ten.
   </para>
      </section>
      <section role="field" xreflabel="PREFIX_MICRO" xml:id="org.osgi.service.dal.SIUnits.PREFIX_MICRO">
         <title>public static final String PREFIX_MICRO = "\u00b5"</title>
         <para>
Adopted prefix symbol to form the symbols of the decimal submultiples of
 SI units. It's called micro and represents the 6th negative power of ten.
   </para>
      </section>
      <section role="field" xreflabel="PREFIX_MILLI" xml:id="org.osgi.service.dal.SIUnits.PREFIX_MILLI">
         <title>public static final String PREFIX_MILLI = "m"</title>
         <para>
Adopted prefix symbol to form the symbols of the decimal submultiples of
 SI units. It's called milli and represents the 3rd negative power of ten.
   </para>
      </section>
      <section role="field" xreflabel="PREFIX_NANO" xml:id="org.osgi.service.dal.SIUnits.PREFIX_NANO">
         <title>public static final String PREFIX_NANO = "n"</title>
         <para>
Adopted prefix symbol to form the symbols of the decimal submultiples of
 SI units. It's called nano and represents the 9th negative power of ten.
   </para>
      </section>
      <section role="field" xreflabel="PREFIX_PICO" xml:id="org.osgi.service.dal.SIUnits.PREFIX_PICO">
         <title>public static final String PREFIX_PICO = "p"</title>
         <para>
Adopted prefix symbol to form the symbols of the decimal submultiples of
 SI units. It's called pico and represents the 12th negative power of ten.
   </para>
      </section>
      <section role="field" xreflabel="PREFIX_YOCTO" xml:id="org.osgi.service.dal.SIUnits.PREFIX_YOCTO">
         <title>public static final String PREFIX_YOCTO = "y"</title>
         <para>
Adopted prefix symbol to form the symbols of the decimal submultiples of
 SI units. It's called yocto and represents the 24th negative power of
 ten.
   </para>
      </section>
      <section role="field" xreflabel="PREFIX_YOTTA" xml:id="org.osgi.service.dal.SIUnits.PREFIX_YOTTA">
         <title>public static final String PREFIX_YOTTA = "Y"</title>
         <para>
Adopted prefix symbol to form the symbols of the decimal multiples of SI
 units. It's called yotta and represents the 24th power of ten.
   </para>
      </section>
      <section role="field" xreflabel="PREFIX_ZEPTO" xml:id="org.osgi.service.dal.SIUnits.PREFIX_ZEPTO">
         <title>public static final String PREFIX_ZEPTO = "z"</title>
         <para>
Adopted prefix symbol to form the symbols of the decimal submultiples of
 SI units. It's called zepto and represents the 21th negative power of
 ten.
   </para>
      </section>
      <section role="field" xreflabel="PREFIX_ZETTA" xml:id="org.osgi.service.dal.SIUnits.PREFIX_ZETTA">
         <title>public static final String PREFIX_ZETTA = "Z"</title>
         <para>
Adopted prefix symbol to form the symbols of the decimal multiples of SI
 units. It's called zetta and represents the 21th power of ten.
   </para>
      </section>
      <section role="field" xreflabel="RADIAN" xml:id="org.osgi.service.dal.SIUnits.RADIAN">
         <title>public static final String RADIAN = "rad"</title>
         <para>
Unit of plane angle. It's one of the coherent derived units in the SI
 with special names and symbols. The unit is called radian.
   </para>
      </section>
      <section role="field" xreflabel="RADIAN_PER_SECOND" xml:id="org.osgi.service.dal.SIUnits.RADIAN_PER_SECOND">
         <title>public static final String RADIAN_PER_SECOND = "rad/s"</title>
         <para>
Unit of angular velocity. It's one of coherent derived units whose names
 and symbols include SI coherent derived units with special names and
 symbols. The unit is called radian per second.
   </para>
      </section>
      <section role="field" xreflabel="RADIAN_PER_SECOND_SQUARED" xml:id="org.osgi.service.dal.SIUnits.RADIAN_PER_SECOND_SQUARED">
         <title>public static final String RADIAN_PER_SECOND_SQUARED = "rad/s\u00b2"</title>
         <para>
Unit of angular acceleration. It's one of coherent derived units whose
 names and symbols include SI coherent derived units with special names
 and symbols. The unit is called radian per second squared.
   </para>
      </section>
      <section role="field" xreflabel="RECIPROCAL_METER" xml:id="org.osgi.service.dal.SIUnits.RECIPROCAL_METER">
         <title>public static final String RECIPROCAL_METER = "m\u207b\u00b9"</title>
         <para>
Unit of wavenumber. It's one of coherent derived units in the SI
 expressed in terms of base units. The unit is called reciprocal meter.
   </para>
      </section>
      <section role="field" xreflabel="SECOND" xml:id="org.osgi.service.dal.SIUnits.SECOND">
         <title>public static final String SECOND = "s"</title>
         <para>
Unit of time defined by the International System of Units (SI). It's one
 of be base units called second.
   </para>
      </section>
      <section role="field" xreflabel="SIEMENS" xml:id="org.osgi.service.dal.SIUnits.SIEMENS">
         <title>public static final String SIEMENS = "S"</title>
         <para>
Unit of electric conductance. It's one of the coherent derived units in
 the SI with special names and symbols. The unit is called siemens.
   </para>
      </section>
      <section role="field" xreflabel="SIEVERT" xml:id="org.osgi.service.dal.SIUnits.SIEVERT">
         <title>public static final String SIEVERT = "Sv"</title>
         <para>
Unit of dose equivalent, ambient dose equivalent, directional dose
 equivalent, personal dose equivalent. It's one of the coherent derived
 units in the SI with special names and symbols. The unit is called
 sievert.
   </para>
      </section>
      <section role="field" xreflabel="SQUARE_METER" xml:id="org.osgi.service.dal.SIUnits.SQUARE_METER">
         <title>public static final String SQUARE_METER = "m\u00b2"</title>
         <para>
Unit of area. It's one of coherent derived units in the SI expressed in
 terms of base units. The unit is called square meter.
   </para>
      </section>
      <section role="field" xreflabel="STERADIAN" xml:id="org.osgi.service.dal.SIUnits.STERADIAN">
         <title>public static final String STERADIAN = "sr"</title>
         <para>
Unit of solid angle. It's one of the coherent derived units in the SI
 with special names and symbols. The unit is called steradian.
   </para>
      </section>
      <section role="field" xreflabel="STILB" xml:id="org.osgi.service.dal.SIUnits.STILB">
         <title>public static final String STILB = "sb"</title>
         <para>
Unit of luminance. It's one of non-SI units associated with the CGS and
 the CGS-Gaussian system of units. The unit is called stilb.
   </para>
      </section>
      <section role="field" xreflabel="STOKES" xml:id="org.osgi.service.dal.SIUnits.STOKES">
         <title>public static final String STOKES = "St"</title>
         <para>
Unit of kinematic viscosity. It's one of non-SI units associated with the
 CGS and the CGS-Gaussian system of units. The unit is called stokes.
   </para>
      </section>
      <section role="field" xreflabel="TESLA" xml:id="org.osgi.service.dal.SIUnits.TESLA">
         <title>public static final String TESLA = "T"</title>
         <para>
Unit of magnetic flux density. It's one of the coherent derived units in
 the SI with special names and symbols. The unit is called tesla.
   </para>
      </section>
      <section role="field" xreflabel="TIME_MINUTE" xml:id="org.osgi.service.dal.SIUnits.TIME_MINUTE">
         <title>public static final String TIME_MINUTE = "min"</title>
         <para>
Unit of time. It's one of non-SI units accepted for use with the
 International System of Units. The unit is called minute.
   </para>
      </section>
      <section role="field" xreflabel="TONNE" xml:id="org.osgi.service.dal.SIUnits.TONNE">
         <title>public static final String TONNE = "t"</title>
         <para>
Unit of mass. It's one of non-SI units accepted for use with the
 International System of Units. The unit is called tonne.
   </para>
      </section>
      <section role="field" xreflabel="VOLT" xml:id="org.osgi.service.dal.SIUnits.VOLT">
         <title>public static final String VOLT = "V"</title>
         <para>
Unit of electric potential difference, electromotive force. It's one of
 the coherent derived units in the SI with special names and symbols. The
 unit is called volt.
   </para>
      </section>
      <section role="field" xreflabel="VOLT_PER_METER" xml:id="org.osgi.service.dal.SIUnits.VOLT_PER_METER">
         <title>public static final String VOLT_PER_METER = "V/m"</title>
         <para>
Unit of electric field strength. It's one of coherent derived units whose
 names and symbols include SI coherent derived units with special names
 and symbols. The unit is called volt per meter.
   </para>
      </section>
      <section role="field" xreflabel="WATT" xml:id="org.osgi.service.dal.SIUnits.WATT">
         <title>public static final String WATT = "W"</title>
         <para>
Unit of power, radiant flux. It's one of the coherent derived units in
 the SI with special names and symbols. The unit is called watt.
   </para>
      </section>
      <section role="field" xreflabel="WATT_PER_METER_KELVIN" xml:id="org.osgi.service.dal.SIUnits.WATT_PER_METER_KELVIN">
         <title>public static final String WATT_PER_METER_KELVIN = "W/(m \u212a)"</title>
         <para>
Unit of thermal conductivity. It's one of coherent derived units whose
 names and symbols include SI coherent derived units with special names
 and symbols. The unit is called watt per meter kelvin.
   </para>
      </section>
      <section role="field" xreflabel="WATT_PER_SQUARE_METER" xml:id="org.osgi.service.dal.SIUnits.WATT_PER_SQUARE_METER">
         <title>public static final String WATT_PER_SQUARE_METER = "W/m\u00b2"</title>
         <para>
Unit of heat flux density, irradiance. It's one of coherent derived units
 whose names and symbols include SI coherent derived units with special
 names and symbols. The unit is called watt per square meter.
   </para>
      </section>
      <section role="field" xreflabel="WATT_PER_SQUARE_METER_STERADIAN" xml:id="org.osgi.service.dal.SIUnits.WATT_PER_SQUARE_METER_STERADIAN">
         <title>public static final String WATT_PER_SQUARE_METER_STERADIAN = "W/(m\u00b2 sr)"</title>
         <para>
Unit of radiance. It's one of coherent derived units whose names and
 symbols include SI coherent derived units with special names and symbols.
 The unit is called watt per square meter steradian.
   </para>
      </section>
      <section role="field" xreflabel="WATT_PER_STERADIAN" xml:id="org.osgi.service.dal.SIUnits.WATT_PER_STERADIAN">
         <title>public static final String WATT_PER_STERADIAN = "W/sr"</title>
         <para>
Unit of radiant intensity. It's one of coherent derived units whose names
 and symbols include SI coherent derived units with special names and
 symbols. The unit is called watt per steradian.
   </para>
      </section>
      <section role="field" xreflabel="WEBER" xml:id="org.osgi.service.dal.SIUnits.WEBER">
         <title>public static final String WEBER = "Wb"</title>
         <para>
Unit of magnetic flux. It's one of the coherent derived units in the SI
 with special names and symbols. The unit is called weber.
   </para>
      </section>
   </section>
</section>

  <section xml:id="service.dal-references">
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="service.dal-ref.bean.spec"><title>JavaBeans
      Spec</title>
      http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="142" version="5" xml:id="service.dal.functions" xml:base="../142/service.dal.functions.xml">
  <title>Device Abstraction Layer Functions Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.dal.functions-version" linkend="org.osgi.service.dal.functions"/></releaseinfo>
  </info>

  <section xml:id="service.dal.functions-introduction">
    <title>Introduction</title>

    <para>Concrete function interfaces are used to unify the access and the
    control of the basic device operations and the related properties. The
    current section specifies the minimal set of such functionalities. They
    can be extended or replaced to cover domain specific scenarios. The set is
    not closed and can be incorporated with vendor specific functions. There
    is support for: control, monitoring and metering information.</para>
  </section>

  <section xml:id="service.dal.functions-list">
    <title>Functions</title>

    <section xml:id="service.dal.functions-boolean.control">
      <title>BooleanControl</title>

      <para><xref linkend="org.osgi.service.dal.functions.BooleanControl" xrefstyle="hyperlink"/> function provides a binary control support. The
      property eventing must follow the definition of Device Abstraction
      Layer, <xref linkend="service.dal-function.event"/>. The full function
      definition is available in the next tables.</para>

      <table>
        <title>BooleanControl Operations</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>inverse</code></entry>

              <entry>Reverses the <code>BooleanControl</code> state. If the
              current state represents <code>true</code> value, it'll be
              changed to <code>false</code>. If the current state represents
              <code>false</code> value, it'll be changed to
              <code>true</code>.</entry>
            </row>

            <row>
              <entry><code>setTrue</code></entry>

              <entry>Sets the <code>BooleanControl</code> state to
              <code>true</code> value.</entry>
            </row>

            <row>
              <entry><code>setFalse</code></entry>

              <entry>Sets the <code>BooleanControl</code> state to
              <code>false</code> value.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <table>
        <title>BooleanControl Properties</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>data</code></entry>

              <entry>Contains the current state of
              <code>BooleanControl</code>. The property access is readable,
              writable and eventable.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Different types can be used as a value of <xref linkend="org.osgi.service.dal.Function.SERVICE_TYPE" xrefstyle="hyperlink"/> service property. The next list contains some
      suitable to <code>BooleanControl</code>: <itemizedlist>
          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.LIGHT" xrefstyle="hyperlink"/> - indicates that there is a light device
            control. <code>true</code> state means that the light device will
            be turned on. <code>false</code> state means that the light device
            will be turned off.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.DOOR" xrefstyle="hyperlink"/> - indicates that there is a door position
            control. <code>true</code> state means that the door will be
            opened. <code>false</code> state means that the door will be
            closed.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.WINDOW" xrefstyle="hyperlink"/> - indicates that there is a window
            position control. <code>true</code> state means that the window
            will be opened. <code>false</code> state means that the window
            will be closed.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.POWER" xrefstyle="hyperlink"/> - indicates that there is electricity
            control. <code>true</code> state means that the power will be
            restored. <code>false</code> state means that the power will be
            cut.</para>
          </listitem>

          <listitem>
            <para>other type defined in <xref linkend="org.osgi.service.dal.functions.Types" xrefstyle="hyperlink"/></para>
          </listitem>

          <listitem>
            <para>vendor specific</para>
          </listitem>
        </itemizedlist></para>

      <para>The function is using <xref linkend="service.dal.functions-data.boolean"/> data structure to provide
      the control state.</para>

      <para>The next code snippet sets to <code>true</code> all
      <code>BooleanControl</code> functions, which control the light.
      <programlisting>ServiceReference[] booleanControlSRefs = context.getServiceReferences(
      BooleanControl.class.getName(),
      '(' + Function.SERVICE_TYPE + '=' + Types.LIGHT + ')');
if (booleanControlSRefs != null) {
  for (int i = 0; i &lt; booleanControlSRefs.length; i++) {
    BooleanControl booleanControl = (BooleanControl) context.getService(
        booleanControlSRefs[i]);
    if (booleanControl != null) {
      booleanControl.setTrue();
      context.ungetService(booleanControlSRefs[i]);
    }
  }
}</programlisting></para>
    </section>

    <section xml:id="service.dal.functions-boolean.sensor">
      <title>BooleanSensor</title>

      <para><xref linkend="org.osgi.service.dal.functions.BooleanSensor" xrefstyle="hyperlink"/> function provides binary sensor monitoring. It
      reports the state when an important event is available. There are no
      operations. The property eventing must follow the definition of Device
      Abstraction Layer, <xref linkend="service.dal-function.event"/>. The
      full function definition is available in the next table.</para>

      <table>
        <title>BooleanSensor Properties</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>data</code></entry>

              <entry>Contains the current state of <code>BooleanSensor</code>.
              The property access is readable and eventable.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Different types can be used as a value of <xref linkend="org.osgi.service.dal.Function.SERVICE_TYPE" xrefstyle="hyperlink"/> service property. The next list contains some
      suitable to <code>BooleanSensor</code>: <itemizedlist>
          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.LIGHT" xrefstyle="hyperlink"/> - indicates that the
            <code>BooleanSensor</code> can detected light. <code>true</code>
            state means that there is light. <code>false</code> state means
            that there is no light.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.GAS" xrefstyle="hyperlink"/> - indicates that the
            <code>BooleanSensor</code> supports gas detection.
            <code>true</code> state means there is gas. <code>false</code>
            state means that there is no gas.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.SMOKE" xrefstyle="hyperlink"/> - indicates that the
            <code>BooleanSensor</code> can detect smoke. <code>true</code>
            state means that there is smoke. <code>false</code> state means
            that there is no smoke.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.DOOR" xrefstyle="hyperlink"/> - indicates that the
            <code>BooleanSensor</code> can detect the door state.
            <code>true</code> state means that the door is opened.
            <code>false</code> state means that the door is closed.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.WINDOW" xrefstyle="hyperlink"/> - indicates that the
            <code>BooleanSensor</code> can window state. <code>true</code>
            state means that the window is opened. <code>false</code> state
            means that the window is closed.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.POWER" xrefstyle="hyperlink"/> - indicates that the
            <code>BooleanSensor</code> can detect power/no power.
            <code>true</code> state means that there is power.
            <code>false</code> state means that there is no power.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.RAIN" xrefstyle="hyperlink"/> - indicates that the
            <code>BooleanSensor</code> can detect rain. <code>true</code>
            state means that there is rain. <code>false</code> state means
            that there is no rain.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.CONTACT" xrefstyle="hyperlink"/> - indicates that the
            <code>BooleanSensor</code> can detect contact. <code>true</code>
            state means that there is contact. <code>false</code> state means
            that there is no contact.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.FIRE" xrefstyle="hyperlink"/> - indicates that the
            <code>BooleanSensor</code> can detect fire. <code>true</code>
            state means that there is fire. <code>false</code> state means
            that there is no fire.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.OCCUPANCY" xrefstyle="hyperlink"/> - indicates that the
            <code>BooleanSensor</code> can detect presence. <code>true</code>
            state means that someone is detected. <code>false</code> state
            means that nobody is detected.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.WATER" xrefstyle="hyperlink"/> - indicates that the
            <code>BooleanSensor</code> can detect water leak.
            <code>true</code> state means that there is water leak.
            <code>false</code> state means that there is no water leak.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.MOTION" xrefstyle="hyperlink"/> - indicates that the
            <code>BooleanSensor</code> can detect motion. <code>true</code>
            state means that there is motion detection. <code>false</code>
            state means that there is no motion detection.</para>
          </listitem>

          <listitem>
            <para>other type defined in <xref linkend="org.osgi.service.dal.functions.Types" xrefstyle="hyperlink"/></para>
          </listitem>

          <listitem>
            <para>vendor specific</para>
          </listitem>
        </itemizedlist></para>

      <para>The function is using <xref linkend="service.dal.functions-data.boolean"/> data structure to provide
      the sensor state.</para>
    </section>

    <section xml:id="service.dal.functions-multi.level.control">
      <title>MultiLevelControl</title>

      <para><xref linkend="org.osgi.service.dal.functions.MultiLevelControl" xrefstyle="hyperlink"/> function provides multi-level control support.
      The property eventing must follow the definition of Device Abstraction
      Layer, <xref linkend="service.dal-function.event"/>. The full function
      definition is available in the next table.</para>

      <table>
        <title>MultiLevelControl Properties</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>data</code></entry>

              <entry>Contains the current state of
              <code>MultiLevelControl</code>. The property access is readable,
              writable and eventable.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Different types can be used as a value of <xref linkend="org.osgi.service.dal.Function.SERVICE_TYPE" xrefstyle="hyperlink"/> service property. The next list contains some
      suitable to <code>MultiLevelControl</code>: <itemizedlist>
          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.LIGHT" xrefstyle="hyperlink"/> - indicates that the
            <code>MultiLevelControl</code> can control light devices. Usually,
            such devices are called dimmable. <code>MultiLevelControl</code>
            minimum value can switch off the device and
            <code>MultiLevelControl</code> maximum value can increase the
            device light to the maximum possible value.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.TEMPERATURE" xrefstyle="hyperlink"/> - indicates that the
            <code>MultiLevelControl</code> can control temperature devices.
            For example, such device can be thermostat.
            <code>MultiLevelControl</code> minimum value is the lowest
            supported temperature. <code>MultiLevelControl</code> maximum
            value is the highest supported temperature.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.FLOW" xrefstyle="hyperlink"/> - indicates that the
            <code>MultiLevelControl</code> can control the flow level.
            <code>MultiLevelControl</code> minimum value is the minimum
            supported flow level. <code>MultiLevelControl</code> maximum value
            is the maximum supported flow level.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.PRESSURE" xrefstyle="hyperlink"/> - indicates that the
            <code>MultiLevelControl</code> can control the pressure level.
            <code>MultiLevelControl</code> minimum value is the lowest
            supported pressure level. <code>MultiLevelControl</code> maximum
            value is the highest supported pressure level.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.HUMIDITY" xrefstyle="hyperlink"/> - indicates that the
            <code>MultiLevelControl</code> can control the humidity level.
            It's typical functionality for HVAC (heating, ventilation, and air
            conditioning) devices. <code>MultiLevelControl</code> minimum
            value is the lowest supported humidity level.
            <code>MultiLevelControl</code> maximum value is the highest
            supported humidity level.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.GAS" xrefstyle="hyperlink"/> - indicates that the
            <code>MultiLevelControl</code> can control the gas level.
            <code>MultiLevelControl</code> minimum value is the lowest
            supported gas level. <code>MultiLevelControl</code> maximum value
            is the highest supported gas level.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.SMOKE" xrefstyle="hyperlink"/> - indicates that the
            <code>MultiLevelControl</code> can control the smoke level.
            <code>MultiLevelControl</code> minimum value is the lowest
            supported smoke level. <code>MultiLevelControl</code> maximum
            value is the highest supported smoke level.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.DOOR" xrefstyle="hyperlink"/> - indicates that the
            <code>MultiLevelControl</code> can control the door position.
            <code>MultiLevelControl</code> minimum value can completely close
            the door. <code>MultiLevelControl</code> maximum value can open
            the door to the maximum allowed position.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.WINDOW" xrefstyle="hyperlink"/> - indicates that the
            <code>MultiLevelControl</code> can control the window position.
            <code>MultiLevelControl</code> minimum value can completely close
            the window. <code>MultiLevelControl</code> maximum value can open
            the window to the maximum allowed position.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.LIQUID" xrefstyle="hyperlink"/> - indicates that the
            <code>MultiLevelControl</code> can control the liquid level.
            <code>MultiLevelControl</code> minimum value is the lowest
            supported liquid level. <code>MultiLevelControl</code> maximum
            value is the highest supported liquid level.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.POWER" xrefstyle="hyperlink"/> - indicates that the
            <code>MultiLevelControl</code> can control the power level.
            <code>MultiLevelControl</code> minimum value is the lowest
            supported power level. <code>MultiLevelControl</code> maximum
            value is the highest supported power level.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.NOISINESS" xrefstyle="hyperlink"/> - indicates that the
            <code>MultiLevelControl</code> can control the noise level.
            <code>MultiLevelControl</code> minimum value is the lowest
            supported noise level. <code>MultiLevelControl</code> maximum
            value is the highest supported noise level.</para>
          </listitem>

          <listitem>
            <para>other type defined in <xref linkend="org.osgi.service.dal.functions.Types" xrefstyle="hyperlink"/></para>
          </listitem>

          <listitem>
            <para>vendor specific</para>
          </listitem>
        </itemizedlist></para>

      <para>The function is using <xref linkend="service.dal.functions-data.level"/> data structure to provide
      the level.</para>
    </section>

    <section xml:id="service.dal.functions-multi.level.sensor">
      <title>MultiLevelSensor</title>

      <para><xref linkend="org.osgi.service.dal.functions.MultiLevelSensor" xrefstyle="hyperlink"/> function provides multi-level sensor monitoring.
      It reports its state when an important event is available. There are no
      operations. The property eventing must follow the definition of Device
      Abstraction Later, <xref linkend="service.dal-function.event"/>. The
      full function definition is available in the next table.</para>

      <table>
        <title>MultiLevelSensor Properties</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>data</code></entry>

              <entry>Contains the current state of
              <code>MultiLevelSensor</code>. The property access is readable
              and eventable.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Different types can be used as a value of <xref linkend="org.osgi.service.dal.Function.SERVICE_TYPE" xrefstyle="hyperlink"/> service property. The next list contains some
      suitable to <code>MultiLevelSensor</code>: <itemizedlist>
          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.LIGHT" xrefstyle="hyperlink"/> - indicates that the sensor can monitor
            the light level.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.TEMPERATURE" xrefstyle="hyperlink"/> - indicates that the sensor can monitor
            the temperature.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.FLOW" xrefstyle="hyperlink"/> - indicates that the sensor can monitor
            the flow level.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.PRESSURE" xrefstyle="hyperlink"/> - indicates that the sensor can monitor
            the pressure level.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.HUMIDITY" xrefstyle="hyperlink"/> - indicates that the sensor can monitor
            the humidity level.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.GAS" xrefstyle="hyperlink"/> - indicates that the sensor can monitor
            the gas level.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.SMOKE" xrefstyle="hyperlink"/> - indicates that the sensor can monitor
            the smoke level.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.DOOR" xrefstyle="hyperlink"/> - indicates that the sensor can monitor
            the door position.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.WINDOW" xrefstyle="hyperlink"/> - indicates that the sensor can monitor
            the window position.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.LIQUID" xrefstyle="hyperlink"/> - indicates that the sensor can monitor
            the liquid level.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.POWER" xrefstyle="hyperlink"/> - indicates that the sensor can monitor
            the power level.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.NOISINESS" xrefstyle="hyperlink"/> - indicates that the sensor can monitor
            the noise level.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.RAIN" xrefstyle="hyperlink"/> - indicates that the
            <code>MultiLevelSensor</code> can monitor the rain rate.</para>
          </listitem>

          <listitem>
            <para>other type defined in <xref linkend="org.osgi.service.dal.functions.Types" xrefstyle="hyperlink"/></para>
          </listitem>

          <listitem>
            <para>vendor specific</para>
          </listitem>
        </itemizedlist></para>

      <para>The function is using <xref linkend="service.dal.functions-data.level"/> data structure to provide
      the level.</para>
    </section>

    <section xml:id="service.dal.functions-meter">
      <title>Meter</title>

      <para><xref linkend="org.osgi.service.dal.functions.Meter" xrefstyle="hyperlink"/> function can measure metering information. It
      provides the current and total consumptions or generations. The property
      eventing must follow the definition of Device Abstraction Later, <xref linkend="service.dal-function.event"/>. The full function definition is
      available in the next tables.</para>

      <table>
        <title>Meter Properties</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>total</code></entry>

              <entry>Contains the total consumption or production. The
              property access is readable and eventable.</entry>
            </row>

            <row>
              <entry><code>current</code></entry>

              <entry>Contains the current consumption or production. The
              property access is readable and eventable.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Different types can be used as a value of <xref linkend="org.osgi.service.dal.Function.SERVICE_TYPE" xrefstyle="hyperlink"/> service property. The next list contains some
      suitable to <code>Meter</code>: <itemizedlist>
          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.PRESSURE" xrefstyle="hyperlink"/> - indicates that the <code>Meter</code>
            measures pressure.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.GAS" xrefstyle="hyperlink"/> - indicates that the <code>Meter</code>
            measures the gas consumption.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.POWER" xrefstyle="hyperlink"/> - indicates that the <code>Meter</code>
            measures the power consumption.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.WATER" xrefstyle="hyperlink"/> - indicates that the <code>Meter</code>
            measures water consumption.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.HEAT" xrefstyle="hyperlink"/> - indicates that the <code>Meter</code>
            measures thermal energy provided by a source.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.Types.COLD" xrefstyle="hyperlink"/> - indicates that the <code>Meter</code>
            measures thermal energy provided by a source.</para>
          </listitem>

          <listitem>
            <para>other type defined in <xref linkend="org.osgi.service.dal.functions.Types" xrefstyle="hyperlink"/></para>
          </listitem>

          <listitem>
            <para>vendor specific</para>
          </listitem>
        </itemizedlist></para>

      <para>The function is using <xref linkend="service.dal.functions-data.level"/> data structure to provide
      metering information.</para>

      <para><code>Meter</code> function service can be optionally registered
      with <xref linkend="org.osgi.service.dal.functions.Meter.SERVICE_FLOW" xrefstyle="hyperlink"/> service property. The value type is
      <code>java.lang.String</code>. It contains the metering flow. Currently,
      the flow can be <xref linkend="org.osgi.service.dal.functions.Meter.FLOW_IN" xrefstyle="hyperlink"/> for a consumption or <xref linkend="org.osgi.service.dal.functions.Meter.FLOW_OUT" xrefstyle="hyperlink"/> for a production.</para>
    </section>

    <section xml:id="service.dal.functions-alarm">
      <title>Alarm</title>

      <para><xref linkend="org.osgi.service.dal.functions.Alarm" xrefstyle="hyperlink"/> function provides alarm sensor support. There is
      only one eventable property and no operations. The property eventing
      must follow the definition of Device Abstraction Layer, <xref linkend="service.dal-function.event"/>. The full function definition is
      available in the next table.</para>

      <table>
        <title>BooleanSensor Properties</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>alarm</code></entry>

              <entry>Specifies the alarm property name. The property is
              eventable.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The function is using <xref linkend="service.dal.functions-data.alarm"/> data structure to report
      the alarm. The property eventing must follow the definition of Device
      Abstraction Layer, <xref linkend="service.dal-function.event"/>.</para>
    </section>

    <section xml:id="service.dal.functions-keypad">
      <title>Keypad</title>

      <para><xref linkend="org.osgi.service.dal.functions.Keypad" xrefstyle="hyperlink"/> function provides support for keypad control.
      The keypad typically consists of one or more keys/buttons, which can be
      discerned. Different types of key presses like short and long press can
      typically also be detected. Each key pressed event is followed by a key
      released event. It's not possible to have two consecutive key pressed or
      key released events. There is only one eventable property and no
      operations. The property eventing must follow the definition of Device
      Abstraction Layer, <xref linkend="service.dal-function.event"/>. The
      full function definition is available in the next table.</para>

      <table>
        <title>Keypad Properties</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>key</code></entry>

              <entry>Specifies a property name for a key from the keypad. The
              property is eventable.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The function is using <xref linkend="service.dal.functions-data.keypad"/> data structure to report
      the keys.</para>
    </section>

    <section xml:id="service.dal.functions-wake.up">
      <title>WakeUp</title>

      <para><xref linkend="org.osgi.service.dal.functions.WakeUp" xrefstyle="hyperlink"/> function provides device awake monitoring. It's
      especially applicable to battery-operated devices. Such device can
      notify the system that it's awake and can receive commands with a <xref linkend="org.osgi.service.dal.functions.WakeUp.PROPERTY_AWAKE" xrefstyle="hyperlink"/> property event. The property eventing must
      follow the definition of Device Abstraction Layer, <xref linkend="service.dal-function.event"/>.</para>

      <para>The device can periodically wake up for commands. The interval can
      be managed with <xref linkend="org.osgi.service.dal.functions.WakeUp.PROPERTY_WAKE_UP_INTERVAL" xrefstyle="hyperlink"/> property.</para>

      <table>
        <title>WakeUp Properties</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>awake</code></entry>

              <entry>Specifies the awake eventable property name. If the
              device is awake, it will trigger a property event. The property
              value type is <xref linkend="service.dal.functions-data.boolean"/>.</entry>
            </row>

            <row>
              <entry><code>wakeUpInterval</code></entry>

              <entry>Specifies the wake up interval. The device can
              periodically wake up and receive commands. That interval is
              managed by this property. The property access is readable,
              writable and eventable. The property value type is <xref linkend="service.dal.functions-data.level"/>.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>

  <section xml:id="service.dal.functions-data">
    <title>Functions Data</title>

    <para><xref linkend="org.osgi.service.dal.FunctionData" xrefstyle="hyperlink"/> subclasses are wrappers on top of the java types
    to cover the requirements of the Device Abstraction Layer section. They
    can be received with the getter methods, can be set with the setter
    methods and can be reported with <xref linkend="org.osgi.service.dal.FunctionEvent" xrefstyle="hyperlink"/>. The
    value can be described with different properties like: <itemizedlist>
        <listitem>
          <para>timestamp - the timestamp is the difference between the value
          collecting time and midnight, January 1, 1970 UTC. It's measured in
          milliseconds. The device driver is responsible to generate that
          value when the value is received from the device.</para>
        </listitem>

        <listitem>
          <para>unit - represents the value unit as it's defined in <xref linkend="service.dal-function.properties"/>.</para>
        </listitem>

        <listitem>
          <para>description - represents a human readable description of the
          value.</para>
        </listitem>
      </itemizedlist></para>

    <section xml:id="service.dal.functions-data.boolean">
      <title>BooleanData</title>

      <para><xref linkend="org.osgi.service.dal.functions.data.BooleanData" xrefstyle="hyperlink"/> is used by <xref linkend="service.dal.functions-boolean.control"/>, <xref linkend="service.dal.functions-boolean.sensor"/> and <xref linkend="service.dal.functions-wake.up"/>.</para>

      <para>It provides information about the function state. That data object
      contains boolean value, the value collecting time and additional
      metadata. The <code>value</code> field is accessible with <xref linkend="org.osgi.service.dal.functions.data.BooleanData.getValue--" xrefstyle="hyperlink"/> getter. Other fields are inherited from the
      parent class <xref linkend="org.osgi.service.dal.FunctionData" xrefstyle="hyperlink"/>.</para>

      <para>Two <code>BooleanData</code> instances are equal if they contain
      equal metadata, timestamp and boolean value.</para>

      <para><xref linkend="org.osgi.service.dal.functions.data.BooleanData.compareTo-Object-" xrefstyle="hyperlink"/> method compares <code>BooleanData</code>
      instance with the given argument of the same type and returns:
      <itemizedlist>
          <listitem>
            <para><code>-1</code> if the instance field is less than a field
            of the specified argument.</para>
          </listitem>

          <listitem>
            <para><code>0</code> if all fields are equivalent.</para>
          </listitem>

          <listitem>
            <para><code>1</code> if the instance field is greater than a field
            of the specified argument.</para>
          </listitem>
        </itemizedlist> The fields are compared in this order: timestamp,
      metadata, value.</para>
    </section>

    <section xml:id="service.dal.functions-data.level">
      <title>LevelData</title>

      <para><xref linkend="org.osgi.service.dal.functions.data.LevelData" xrefstyle="hyperlink"/> is used by <xref linkend="service.dal.functions-multi.level.control"/>, <xref linkend="service.dal.functions-multi.level.sensor"/>, <xref linkend="service.dal.functions-meter"/> and <xref linkend="service.dal.functions-wake.up"/>.</para>

      <para>It provides information about the function level. That data object
      contains <code>BigDecimal</code> value and the value unit. The
      measurement unit is used as it's defined in <xref linkend="service.dal-function.properties"/>. The <code>unit</code> field
      is accessible with <xref linkend="org.osgi.service.dal.functions.data.LevelData.getUnit--" xrefstyle="hyperlink"/> getter. The <code>level</code> field is
      accessible with <xref linkend="org.osgi.service.dal.functions.data.LevelData.getLevel--" xrefstyle="hyperlink"/> getter.</para>

      <para>Two <code>LevelData</code> instances are equal if they contain
      equal metadata, timestamp, unit and level.</para>

      <para><xref linkend="org.osgi.service.dal.functions.data.LevelData.compareTo-Object-" xrefstyle="hyperlink"/> method compares <code>LevelData</code> instance
      with the given argument of the same type and returns: <itemizedlist>
          <listitem>
            <para><code>-1</code> if the instance field is less than a field
            of the specified argument.</para>
          </listitem>

          <listitem>
            <para><code>0</code> if all fields are equivalent.</para>
          </listitem>

          <listitem>
            <para><code>1</code> if the instance field is greater than a field
            of the specified argument.</para>
          </listitem>
        </itemizedlist> The fields are compared in this order: timestamp,
      metadata, level, unit.</para>
    </section>

    <section xml:id="service.dal.functions-data.alarm">
      <title>AlarmData</title>

      <para><xref linkend="org.osgi.service.dal.functions.data.AlarmData" xrefstyle="hyperlink"/> is used by <xref linkend="service.dal.functions-alarm"/>.</para>

      <para><code>AlarmData</code> data structure is used to provide
      information about the available alarm. That data object contains:
      <itemizedlist>
          <listitem>
            <para>alarm type - indicates the meaning of the alarm like smoke,
            power fail, etc.</para>
          </listitem>

          <listitem>
            <para>alarm severity - indicates the alarm importance level like
            minor, critical, etc.</para>
          </listitem>
        </itemizedlist> The <code>severity</code> field is accessible with
      <xref linkend="org.osgi.service.dal.functions.data.AlarmData.getSeverity--" xrefstyle="hyperlink"/> getter. The <code>type</code> field is
      accessible with <xref linkend="org.osgi.service.dal.functions.data.AlarmData.getType--" xrefstyle="hyperlink"/> getter.</para>

      <para>Two <code>AlarmData</code> instances are equal if they contain
      equal metadata, timestamp, type and severity.</para>

      <para><xref linkend="org.osgi.service.dal.functions.data.AlarmData.compareTo-Object-" xrefstyle="hyperlink"/> method compares <code>AlarmData</code> instance
      with the given argument of the same type and returns: <itemizedlist>
          <listitem>
            <para><code>-1</code> if the instance field is less than a field
            of the specified argument.</para>
          </listitem>

          <listitem>
            <para><code>0</code> if all fields are equivalent.</para>
          </listitem>

          <listitem>
            <para><code>1</code> if the instance field is greater than a field
            of the specified argument.</para>
          </listitem>
        </itemizedlist> The fields are compared in this order: timestamp,
      metadata, type, severity.</para>
    </section>

    <section xml:id="service.dal.functions-data.keypad">
      <title>KeypadData</title>

      <para><xref linkend="org.osgi.service.dal.functions.data.KeypadData" xrefstyle="hyperlink"/> is used by <xref linkend="service.dal.functions-keypad"/>.</para>

      <para><code>KeypadData</code> data structure is used to provide
      information when a change with some key from the keypad has occurred.
      That data object contains the event type, sub-type, key code and key
      name. Currently, there are two predefined event types: <itemizedlist>
          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.data.KeypadData.TYPE_PRESSED" xrefstyle="hyperlink"/> – used for a key pressed;</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.data.KeypadData.TYPE_RELEASED" xrefstyle="hyperlink"/> – used for a key released.</para>
          </listitem>
        </itemizedlist> Predefined event sub-types are: <itemizedlist>
          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.data.KeypadData.SUB_TYPE_PRESSED_NORMAL" xrefstyle="hyperlink"/> – used for a normal key pressed event.
            Usually, there is a single press and the key is not held down.
            This sub-type is used with <xref linkend="org.osgi.service.dal.functions.data.KeypadData.TYPE_PRESSED" xrefstyle="hyperlink"/> type.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.data.KeypadData.SUB_TYPE_PRESSED_LONG" xrefstyle="hyperlink"/> – used for a long key pressed event.
            Usually, there is a single press and the key is held down. This
            sub-type is used with <xref linkend="org.osgi.service.dal.functions.data.KeypadData.TYPE_PRESSED" xrefstyle="hyperlink"/> type.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.data.KeypadData.SUB_TYPE_PRESSED_DOUBLE" xrefstyle="hyperlink"/> – used for a double key pressed event.
            Usually, there are two press actions and the key is not held down
            after the second press. This sub-type is used with <xref linkend="org.osgi.service.dal.functions.data.KeypadData.TYPE_PRESSED" xrefstyle="hyperlink"/> type.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.dal.functions.data.KeypadData.SUB_TYPE_PRESSED_DOUBLE_LONG" xrefstyle="hyperlink"/> – used for a double long key pressed
            event. Usually, there are two press actions and the key is held
            down after the second press. This sub-type is used with <xref linkend="org.osgi.service.dal.functions.data.KeypadData.TYPE_PRESSED" xrefstyle="hyperlink"/> type.</para>
          </listitem>
        </itemizedlist> The <code>type</code> field is accessible with <xref linkend="org.osgi.service.dal.functions.data.KeypadData.getType--" xrefstyle="hyperlink"/> getter. The <code>subType</code> field is
      accessible with <xref linkend="org.osgi.service.dal.functions.data.KeypadData.getSubType--" xrefstyle="hyperlink"/> getter. The <code>keyCode</code> field is
      accessible with <xref linkend="org.osgi.service.dal.functions.data.KeypadData.getKeyCode--" xrefstyle="hyperlink"/> getter. The <code>keyName</code> field is
      accessible with <xref linkend="org.osgi.service.dal.functions.data.KeypadData.getKeyName--" xrefstyle="hyperlink"/> getter.</para>

      <para>Two <code>KeypadData</code> instances are equal if they contain
      equal metadata, timestamp, event type, sub-type, key code and key
      name.</para>

      <para><xref linkend="org.osgi.service.dal.functions.data.KeypadData.compareTo-Object-" xrefstyle="hyperlink"/> method compares <code>KeypadData</code> instance
      with the given argument of the same type and returns: <itemizedlist>
          <listitem>
            <para><code>-1</code> if the instance field is less than a field
            of the specified argument.</para>
          </listitem>

          <listitem>
            <para><code>0</code> if all fields are equivalent.</para>
          </listitem>

          <listitem>
            <para><code>1</code> if the instance field is greater than a field
            of the specified argument.</para>
          </listitem>
        </itemizedlist> The fields are compared in this order: timestamp,
      metadata, type, sub-type, key code, key name.</para>
    </section>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.dal.functions" xml:id="org.osgi.service.dal.functions" xml:base="../../generated/javadoc/docbook/org.osgi.service.dal.functions.xml">
   <title>org.osgi.service.dal.functions</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.dal.functions-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.dal.functions-version.number">1.0</edition>
   </info>
   <para>
Device Abstraction Layer Functions Package 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.dal.functions; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.dal.functions; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Alarm">
                  <code>Alarm</code>
               </link> - <code>Alarm</code> function provides alarm sensor support.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.BooleanControl">
                  <code>BooleanControl</code>
               </link> - <code>BooleanControl</code> function provides a boolean control support.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.BooleanSensor">
                  <code>BooleanSensor</code>
               </link> - <code>BooleanSensor</code> function provides boolean sensor monitoring.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Keypad">
                  <code>Keypad</code>
               </link> - <code>Keypad</code> function provides support for keypad control.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Meter">
                  <code>Meter</code>
               </link> - <code>Meter</code> function can measure metering information.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.MultiLevelControl">
                  <code>MultiLevelControl</code>
               </link> - <code>MultiLevelControl</code> function provides multi-level control support.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.MultiLevelSensor">
                  <code>MultiLevelSensor</code>
               </link> - <code>MultiLevelSensor</code> function provides multi-level sensor monitoring.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types">
                  <code>Types</code>
               </link> - 
Shares common constants for all functions defined in this package.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.WakeUp">
                  <code>WakeUp</code>
               </link> - <code>WakeUp</code> function provides device awake monitoring.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="Alarm" xml:id="org.osgi.service.dal.functions.Alarm">
      <title>public interface Alarm<?line-break?> extends Function</title>
      <para>
         <code>Alarm</code> function provides alarm sensor support. There is only one
 eventable property and no operations.
   </para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.dal.functions.data.AlarmData">AlarmData</link>
         </para>
      </formalpara>
      <section role="field" xreflabel="PROPERTY_ALARM" xml:id="org.osgi.service.dal.functions.Alarm.PROPERTY_ALARM">
         <title>public static final String PROPERTY_ALARM = "alarm"</title>
         <para>
Specifies the alarm property name. The property is eventable.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dal.functions.data.AlarmData">AlarmData</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="BooleanControl" xml:id="org.osgi.service.dal.functions.BooleanControl">
      <title>public interface BooleanControl<?line-break?> extends Function</title>
      <para>
         <code>BooleanControl</code> function provides a boolean control support. The
 eventable function state is accessible with <link linkend="org.osgi.service.dal.functions.BooleanControl.getData--">getData()</link> getter and
 <link linkend="org.osgi.service.dal.functions.BooleanControl.setData-boolean-">setData(boolean)</link> setter. The state can be reversed with
 <link linkend="org.osgi.service.dal.functions.BooleanControl.inverse--">inverse()</link> method, can be set to <code>true</code> value with
 <link linkend="org.osgi.service.dal.functions.BooleanControl.setTrue--">setTrue()</link> method and can be set to <code>false</code> value with
 <link linkend="org.osgi.service.dal.functions.BooleanControl.setFalse--">setFalse()</link> method.
 </para>
      <para>
 The control type can be:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.LIGHT">Types.LIGHT</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.DOOR">Types.DOOR</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.WINDOW">Types.WINDOW</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.POWER">Types.POWER</link>
            </para>
         </listitem>
         <listitem>
            <para>other type defined in <link linkend="org.osgi.service.dal.functions.Types">Types</link>
            </para>
         </listitem>
         <listitem>
            <para>custom - vendor specific type</para>
         </listitem>
      </itemizedlist>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.dal.functions.data.BooleanData">BooleanData</link>
         </para>
      </formalpara>
      <section role="field" xreflabel="OPERATION_INVERSE" xml:id="org.osgi.service.dal.functions.BooleanControl.OPERATION_INVERSE">
         <title>public static final String OPERATION_INVERSE = "inverse"</title>
         <para>
Specifies the inverse operation name. The operation can be executed with
 <link linkend="org.osgi.service.dal.functions.BooleanControl.inverse--">inverse()</link> method.
   </para>
      </section>
      <section role="field" xreflabel="OPERATION_SET_FALSE" xml:id="org.osgi.service.dal.functions.BooleanControl.OPERATION_SET_FALSE">
         <title>public static final String OPERATION_SET_FALSE = "setFalse"</title>
         <para>
Specifies the operation name, which sets the control state to
 <code>false</code> value. The operation can be executed with
 <link linkend="org.osgi.service.dal.functions.BooleanControl.setFalse--">setFalse()</link> method.
   </para>
      </section>
      <section role="field" xreflabel="OPERATION_SET_TRUE" xml:id="org.osgi.service.dal.functions.BooleanControl.OPERATION_SET_TRUE">
         <title>public static final String OPERATION_SET_TRUE = "setTrue"</title>
         <para>
Specifies the operation name, which sets the control state to
 <code>true</code> value. The operation can be executed with <link linkend="org.osgi.service.dal.functions.BooleanControl.setTrue--">setTrue()</link>
 method.
   </para>
      </section>
      <section role="field" xreflabel="PROPERTY_DATA" xml:id="org.osgi.service.dal.functions.BooleanControl.PROPERTY_DATA">
         <title>public static final String PROPERTY_DATA = "data"</title>
         <para>
Specifies the state property name. The eventable property value is
 accessible with <link linkend="org.osgi.service.dal.functions.BooleanControl.getData--">getData()</link> method.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dal.functions.data.BooleanData">BooleanData</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getData()" xml:id="org.osgi.service.dal.functions.BooleanControl.getData--">
         <title>public BooleanData getData() throws DeviceException</title>
         <para role="description">
Returns the current state of <code>BooleanControl</code>. It's a getter method
 for <link linkend="org.osgi.service.dal.functions.BooleanControl.PROPERTY_DATA">PROPERTY_DATA</link> property.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The current state of <code>BooleanControl</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this function service object has already
         been unregistered.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DeviceException</code>– If an operation error is available.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dal.functions.data.BooleanData">BooleanData</link>, <link linkend="org.osgi.service.dal.functions.BooleanControl.PROPERTY_DATA">BooleanControl.PROPERTY_DATA</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="inverse()" xml:id="org.osgi.service.dal.functions.BooleanControl.inverse--">
         <title>public void inverse() throws DeviceException</title>
         <para role="description">
Reverses the <code>BooleanControl</code> state. If the current state
 represents <code>true</code> value, it'll be changed to <code>false</code>. If the
 current state represents <code>false</code> value, it'll be changed to
 <code>true</code>. The operation name is <link linkend="org.osgi.service.dal.functions.BooleanControl.OPERATION_INVERSE">OPERATION_INVERSE</link>.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this function service object has already
         been unregistered.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DeviceException</code>– If an operation error is available.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setData(boolean)" xml:id="org.osgi.service.dal.functions.BooleanControl.setData-boolean-">
         <title>public void setData(boolean data) throws DeviceException</title>
         <formalpara role="parameter">
            <title>data</title>
            <para>The new function value.</para>
         </formalpara>
         <para role="description">
Sets the <code>BooleanControl</code> state to the specified value. It's setter
 method for <link linkend="org.osgi.service.dal.functions.BooleanControl.PROPERTY_DATA">PROPERTY_DATA</link> property.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this function service object has already
         been unregistered.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DeviceException</code>– If an operation error is available.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If there is an invalid argument.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dal.functions.BooleanControl.PROPERTY_DATA">BooleanControl.PROPERTY_DATA</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setFalse()" xml:id="org.osgi.service.dal.functions.BooleanControl.setFalse--">
         <title>public void setFalse() throws DeviceException</title>
         <para role="description">
Sets the <code>BooleanControl</code> state to <code>false</code> value. The
 operation name is <link linkend="org.osgi.service.dal.functions.BooleanControl.OPERATION_SET_FALSE">OPERATION_SET_FALSE</link>.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this function service object has already
         been unregistered.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DeviceException</code>– If an operation error is available.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setTrue()" xml:id="org.osgi.service.dal.functions.BooleanControl.setTrue--">
         <title>public void setTrue() throws DeviceException</title>
         <para role="description">
Sets the <code>BooleanControl</code> state to <code>true</code> value. The
 operation name is <link linkend="org.osgi.service.dal.functions.BooleanControl.OPERATION_SET_TRUE">OPERATION_SET_TRUE</link>.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this function service object has already
         been unregistered.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DeviceException</code>– If an operation error is available.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="BooleanSensor" xml:id="org.osgi.service.dal.functions.BooleanSensor">
      <title>public interface BooleanSensor<?line-break?> extends Function</title>
      <para>
         <code>BooleanSensor</code> function provides boolean sensor monitoring. It reports
 its state when an important event is available. The eventable state is
 accessible with <link linkend="org.osgi.service.dal.functions.BooleanSensor.getData--">getData()</link> getter. There are no operations.
 </para>
      <para>
 The sensor type can be:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.LIGHT">Types.LIGHT</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.GAS">Types.GAS</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.SMOKE">Types.SMOKE</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.DOOR">Types.DOOR</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.WINDOW">Types.WINDOW</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.POWER">Types.POWER</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.RAIN">Types.RAIN</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.CONTACT">Types.CONTACT</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.FIRE">Types.FIRE</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.OCCUPANCY">Types.OCCUPANCY</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.WATER">Types.WATER</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.MOTION">Types.MOTION</link>
            </para>
         </listitem>
         <listitem>
            <para>other type defined in <link linkend="org.osgi.service.dal.functions.Types">Types</link>
            </para>
         </listitem>
         <listitem>
            <para>custom - vendor specific type</para>
         </listitem>
      </itemizedlist>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.dal.functions.data.BooleanData">BooleanData</link>
         </para>
      </formalpara>
      <section role="field" xreflabel="PROPERTY_DATA" xml:id="org.osgi.service.dal.functions.BooleanSensor.PROPERTY_DATA">
         <title>public static final String PROPERTY_DATA = "data"</title>
         <para>
Specifies the state property name. The eventable property value is
 accessible with <link linkend="org.osgi.service.dal.functions.BooleanSensor.getData--">getData()</link> getter.
   </para>
      </section>
      <section role="method" xreflabel="getData()" xml:id="org.osgi.service.dal.functions.BooleanSensor.getData--">
         <title>public BooleanData getData() throws DeviceException</title>
         <para role="description">
Returns the <code>BooleanSensor</code> current state. It's a getter method for
 <link linkend="org.osgi.service.dal.functions.BooleanSensor.PROPERTY_DATA">PROPERTY_DATA</link> property.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <code>BooleanSensor</code> current state.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this function service object has already
         been unregistered.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DeviceException</code>– If an operation error is available.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dal.functions.data.BooleanData">BooleanData</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Keypad" xml:id="org.osgi.service.dal.functions.Keypad">
      <title>public interface Keypad<?line-break?> extends Function</title>
      <para>
         <code>Keypad</code> function provides support for keypad control. The keypad
 typically consists of one or more keys/buttons, which can be discerned.
 Different types of key presses like short and long press can typically also
 be detected. Each key pressed event is followed by a key released event. It's
 not possible to have two consecutive key pressed or key released events.
 There is only one eventable property and no operations.
 </para>
      <para>
         <code>Keypad</code> can enumerate all supported keys in the key property metadata,
 <link linkend="org.osgi.service.dal.PropertyMetadata.getEnumValues-String-">PropertyMetadata.getEnumValues(String)</link>.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.dal.functions.data.KeypadData">KeypadData</link>
         </para>
      </formalpara>
      <section role="field" xreflabel="PROPERTY_KEY" xml:id="org.osgi.service.dal.functions.Keypad.PROPERTY_KEY">
         <title>public static final String PROPERTY_KEY = "key"</title>
         <para>
Specifies a property name for a key from the keypad. The property is
 eventable.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dal.functions.data.KeypadData">KeypadData</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Meter" xml:id="org.osgi.service.dal.functions.Meter">
      <title>public interface Meter<?line-break?> extends Function</title>
      <para>
         <code>Meter</code> function can measure metering information. The function
 provides these properties:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Meter.PROPERTY_CURRENT">PROPERTY_CURRENT</link> - eventable property accessible with
 <link linkend="org.osgi.service.dal.functions.Meter.getCurrent--">getCurrent()</link> getter;</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Meter.PROPERTY_TOTAL">PROPERTY_TOTAL</link> - eventable property accessible with
 <link linkend="org.osgi.service.dal.functions.Meter.getTotal--">getTotal()</link> getter.</para>
         </listitem>
      </itemizedlist>
      <para>
 The sensor type can be:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.PRESSURE">Types.PRESSURE</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.GAS">Types.GAS</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.POWER">Types.POWER</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.WATER">Types.WATER</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.HEAT">Types.HEAT</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.COLD">Types.COLD</link>
            </para>
         </listitem>
         <listitem>
            <para>other type defined in <link linkend="org.osgi.service.dal.functions.Types">Types</link>
            </para>
         </listitem>
         <listitem>
            <para>custom - vendor specific type</para>
         </listitem>
      </itemizedlist>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.dal.functions.data.LevelData">LevelData</link>
         </para>
      </formalpara>
      <section role="field" xreflabel="FLOW_IN" xml:id="org.osgi.service.dal.functions.Meter.FLOW_IN">
         <title>public static final String FLOW_IN = "in"</title>
         <para>
Represents the metering consumption flow. It can be used as
 <link linkend="org.osgi.service.dal.functions.Meter.SERVICE_FLOW">SERVICE_FLOW</link> property value.
   </para>
      </section>
      <section role="field" xreflabel="FLOW_OUT" xml:id="org.osgi.service.dal.functions.Meter.FLOW_OUT">
         <title>public static final String FLOW_OUT = "out"</title>
         <para>
Represents the metering production flow. It can be used as
 <link linkend="org.osgi.service.dal.functions.Meter.SERVICE_FLOW">SERVICE_FLOW</link> property value.
   </para>
      </section>
      <section role="field" xreflabel="PROPERTY_CURRENT" xml:id="org.osgi.service.dal.functions.Meter.PROPERTY_CURRENT">
         <title>public static final String PROPERTY_CURRENT = "current"</title>
         <para>
Specifies the current consumption or production property name. The
 eventable property can be read with <link linkend="org.osgi.service.dal.functions.Meter.getCurrent--">getCurrent()</link> getter.
   </para>
      </section>
      <section role="field" xreflabel="PROPERTY_TOTAL" xml:id="org.osgi.service.dal.functions.Meter.PROPERTY_TOTAL">
         <title>public static final String PROPERTY_TOTAL = "total"</title>
         <para>
Specifies the total consumption or production property name. The
 eventable property can be read with <link linkend="org.osgi.service.dal.functions.Meter.getTotal--">getTotal()</link> getter.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_FLOW" xml:id="org.osgi.service.dal.functions.Meter.SERVICE_FLOW">
         <title>public static final String SERVICE_FLOW = "dal.meter.flow"</title>
         <para>
The service property value contains the metering flow. It's an optional
 property and available only if it's supported by the meter. The value
 type is <code>java.lang.String</code>. Possible property values:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.Meter.FLOW_IN">FLOW_IN</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.Meter.FLOW_OUT">FLOW_OUT</link>
               </para>
            </listitem>
         </itemizedlist>
      </section>
      <section role="method" xreflabel="getCurrent()" xml:id="org.osgi.service.dal.functions.Meter.getCurrent--">
         <title>public LevelData getCurrent() throws DeviceException</title>
         <para role="description">
Returns the current metering info. It's a getter method for
 <link linkend="org.osgi.service.dal.functions.Meter.PROPERTY_CURRENT">PROPERTY_CURRENT</link> property.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The current metering info.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this function service object has already
         been unregistered.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DeviceException</code>– If an operation error is available.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dal.functions.data.LevelData">LevelData</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getTotal()" xml:id="org.osgi.service.dal.functions.Meter.getTotal--">
         <title>public LevelData getTotal() throws DeviceException</title>
         <para role="description">
Returns the total metering info. It's a getter method for
 <link linkend="org.osgi.service.dal.functions.Meter.PROPERTY_TOTAL">PROPERTY_TOTAL</link> property.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The total metering info.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this function service object has already
         been unregistered.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DeviceException</code>– If an operation error is available.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dal.functions.data.LevelData">LevelData</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="MultiLevelControl" xml:id="org.osgi.service.dal.functions.MultiLevelControl">
      <title>public interface MultiLevelControl<?line-break?> extends Function</title>
      <para>
         <code>MultiLevelControl</code> function provides multi-level control support. The
 eventable function level is accessible with <link linkend="org.osgi.service.dal.functions.MultiLevelControl.getData--">getData()</link> getter and
 <link linkend="org.osgi.service.dal.functions.MultiLevelControl.setData-BigDecimal-String-">setData(BigDecimal, String)</link> setter.
 </para>
      <para>
 The control type can be:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.LIGHT">Types.LIGHT</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.TEMPERATURE">Types.TEMPERATURE</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.FLOW">Types.FLOW</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.PRESSURE">Types.PRESSURE</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.HUMIDITY">Types.HUMIDITY</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.GAS">Types.GAS</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.SMOKE">Types.SMOKE</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.DOOR">Types.DOOR</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.WINDOW">Types.WINDOW</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.LIQUID">Types.LIQUID</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.POWER">Types.POWER</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.NOISINESS">Types.NOISINESS</link>
            </para>
         </listitem>
         <listitem>
            <para>other type defined in <link linkend="org.osgi.service.dal.functions.Types">Types</link>
            </para>
         </listitem>
         <listitem>
            <para>custom - vendor specific type</para>
         </listitem>
      </itemizedlist>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.dal.functions.data.LevelData">LevelData</link>
         </para>
      </formalpara>
      <section role="field" xreflabel="PROPERTY_DATA" xml:id="org.osgi.service.dal.functions.MultiLevelControl.PROPERTY_DATA">
         <title>public static final String PROPERTY_DATA = "data"</title>
         <para>
Specifies the level property name. The eventable property can be read
 with <link linkend="org.osgi.service.dal.functions.MultiLevelControl.getData--">getData()</link> getter and can be set with
 <link linkend="org.osgi.service.dal.functions.MultiLevelControl.setData-BigDecimal-String-">setData(BigDecimal, String)</link> setters.
   </para>
      </section>
      <section role="method" xreflabel="getData()" xml:id="org.osgi.service.dal.functions.MultiLevelControl.getData--">
         <title>public LevelData getData() throws DeviceException</title>
         <para role="description">
Returns <code>MultiLevelControl</code> level. It's a getter method for
 <link linkend="org.osgi.service.dal.functions.MultiLevelControl.PROPERTY_DATA">PROPERTY_DATA</link> property.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>MultiLevelControl</code> level.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this function service object has already
         been unregistered.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DeviceException</code>– If an operation error is available.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dal.functions.data.LevelData">LevelData</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setData(BigDecimal,String)" xml:id="org.osgi.service.dal.functions.MultiLevelControl.setData-BigDecimal-String-">
         <title>public void setData(BigDecimal level,String unit) throws DeviceException</title>
         <formalpara role="parameter">
            <title>level</title>
            <para>The new control level.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>unit</title>
            <para>The level unit.</para>
         </formalpara>
         <para role="description">
Sets <code>MultiLevelControl</code> level according to the specified unit.
 It's a setter method for <link linkend="org.osgi.service.dal.functions.MultiLevelControl.PROPERTY_DATA">PROPERTY_DATA</link> property.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this function service object has already
         been unregistered.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DeviceException</code>– If an operation error is available.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If there is an invalid argument.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="MultiLevelSensor" xml:id="org.osgi.service.dal.functions.MultiLevelSensor">
      <title>public interface MultiLevelSensor<?line-break?> extends Function</title>
      <para>
         <code>MultiLevelSensor</code> function provides multi-level sensor monitoring. It
 reports its state when an important event is available. The eventable state
 is accessible with <link linkend="org.osgi.service.dal.functions.MultiLevelSensor.getData--">getData()</link> getter. There are no operations.
 </para>
      <para>
 The sensor type can be:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.LIGHT">Types.LIGHT</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.TEMPERATURE">Types.TEMPERATURE</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.FLOW">Types.FLOW</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.PRESSURE">Types.PRESSURE</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.HUMIDITY">Types.HUMIDITY</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.GAS">Types.GAS</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.SMOKE">Types.SMOKE</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.DOOR">Types.DOOR</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.WINDOW">Types.WINDOW</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.LIQUID">Types.LIQUID</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.POWER">Types.POWER</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.NOISINESS">Types.NOISINESS</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.RAIN">Types.RAIN</link>
            </para>
         </listitem>
         <listitem>
            <para>other type defined in <link linkend="org.osgi.service.dal.functions.Types">Types</link>
            </para>
         </listitem>
         <listitem>
            <para>custom - vendor specific type</para>
         </listitem>
      </itemizedlist>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.dal.functions.data.LevelData">LevelData</link>
         </para>
      </formalpara>
      <section role="field" xreflabel="PROPERTY_DATA" xml:id="org.osgi.service.dal.functions.MultiLevelSensor.PROPERTY_DATA">
         <title>public static final String PROPERTY_DATA = "data"</title>
         <para>
Specifies the state property name. The eventable property can be read
 with <link linkend="org.osgi.service.dal.functions.MultiLevelSensor.getData--">getData()</link> getter.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dal.functions.data.LevelData">LevelData</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getData()" xml:id="org.osgi.service.dal.functions.MultiLevelSensor.getData--">
         <title>public LevelData getData() throws DeviceException</title>
         <para role="description">
Returns the <code>MultiLevelSensor</code> current state. It's a getter method
 for <link linkend="org.osgi.service.dal.functions.MultiLevelSensor.PROPERTY_DATA">PROPERTY_DATA</link> property.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <code>MultiLevelSensor</code> current state.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this function service object has already
         been unregistered.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DeviceException</code>– If an operation error is available.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dal.functions.data.LevelData">LevelData</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Types" xml:id="org.osgi.service.dal.functions.Types">
      <title>public interface Types</title>
      <para>
Shares common constants for all functions defined in this package. The
 defined function types are mapped as follow:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.LIGHT">LIGHT</link> - <link linkend="org.osgi.service.dal.functions.MultiLevelControl">MultiLevelControl</link>, <link linkend="org.osgi.service.dal.functions.MultiLevelSensor">MultiLevelSensor</link>,
 <link linkend="org.osgi.service.dal.functions.BooleanSensor">BooleanSensor</link> and <link linkend="org.osgi.service.dal.functions.BooleanControl">BooleanControl</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.TEMPERATURE">TEMPERATURE</link> - <link linkend="org.osgi.service.dal.functions.MultiLevelControl">MultiLevelControl</link> and
 <link linkend="org.osgi.service.dal.functions.MultiLevelSensor">MultiLevelSensor</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.FLOW">FLOW</link> - <link linkend="org.osgi.service.dal.functions.MultiLevelControl">MultiLevelControl</link> and <link linkend="org.osgi.service.dal.functions.MultiLevelSensor">MultiLevelSensor</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.PRESSURE">PRESSURE</link> - <link linkend="org.osgi.service.dal.functions.MultiLevelControl">MultiLevelControl</link>, <link linkend="org.osgi.service.dal.functions.MultiLevelSensor">MultiLevelSensor</link>
 and <link linkend="org.osgi.service.dal.functions.Meter">Meter</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.HUMIDITY">HUMIDITY</link> - <link linkend="org.osgi.service.dal.functions.MultiLevelControl">MultiLevelControl</link> and
 <link linkend="org.osgi.service.dal.functions.MultiLevelSensor">MultiLevelSensor</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.GAS">GAS</link> - <link linkend="org.osgi.service.dal.functions.MultiLevelControl">MultiLevelControl</link>, <link linkend="org.osgi.service.dal.functions.MultiLevelSensor">MultiLevelSensor</link>,
 <link linkend="org.osgi.service.dal.functions.BooleanSensor">BooleanSensor</link> and <link linkend="org.osgi.service.dal.functions.Meter">Meter</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.SMOKE">SMOKE</link> - <link linkend="org.osgi.service.dal.functions.MultiLevelControl">MultiLevelControl</link>, <link linkend="org.osgi.service.dal.functions.MultiLevelSensor">MultiLevelSensor</link> and
 <link linkend="org.osgi.service.dal.functions.BooleanSensor">BooleanSensor</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.DOOR">DOOR</link> - <link linkend="org.osgi.service.dal.functions.MultiLevelControl">MultiLevelControl</link>, <link linkend="org.osgi.service.dal.functions.MultiLevelSensor">MultiLevelSensor</link>,
 <link linkend="org.osgi.service.dal.functions.BooleanSensor">BooleanSensor</link> and <link linkend="org.osgi.service.dal.functions.BooleanControl">BooleanControl</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.WINDOW">WINDOW</link> - <link linkend="org.osgi.service.dal.functions.MultiLevelControl">MultiLevelControl</link>, <link linkend="org.osgi.service.dal.functions.MultiLevelSensor">MultiLevelSensor</link>,
 <link linkend="org.osgi.service.dal.functions.BooleanSensor">BooleanSensor</link> and <link linkend="org.osgi.service.dal.functions.BooleanControl">BooleanControl</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.LIQUID">LIQUID</link> - <link linkend="org.osgi.service.dal.functions.MultiLevelControl">MultiLevelControl</link> and <link linkend="org.osgi.service.dal.functions.MultiLevelSensor">MultiLevelSensor</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.POWER">POWER</link> - <link linkend="org.osgi.service.dal.functions.MultiLevelControl">MultiLevelControl</link>, <link linkend="org.osgi.service.dal.functions.MultiLevelSensor">MultiLevelSensor</link>,
 <link linkend="org.osgi.service.dal.functions.BooleanSensor">BooleanSensor</link>, <link linkend="org.osgi.service.dal.functions.BooleanControl">BooleanControl</link> and <link linkend="org.osgi.service.dal.functions.Meter">Meter</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.NOISINESS">NOISINESS</link> - <link linkend="org.osgi.service.dal.functions.MultiLevelControl">MultiLevelControl</link> and
 <link linkend="org.osgi.service.dal.functions.MultiLevelSensor">MultiLevelSensor</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.RAIN">RAIN</link> - <link linkend="org.osgi.service.dal.functions.MultiLevelSensor">MultiLevelSensor</link> and <link linkend="org.osgi.service.dal.functions.BooleanSensor">BooleanSensor</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.CONTACT">CONTACT</link> - <link linkend="org.osgi.service.dal.functions.BooleanSensor">BooleanSensor</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.FIRE">FIRE</link> - <link linkend="org.osgi.service.dal.functions.BooleanSensor">BooleanSensor</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.OCCUPANCY">OCCUPANCY</link> - <link linkend="org.osgi.service.dal.functions.BooleanSensor">BooleanSensor</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.WATER">WATER</link> - <link linkend="org.osgi.service.dal.functions.BooleanSensor">BooleanSensor</link> and <link linkend="org.osgi.service.dal.functions.Meter">Meter</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.MOTION">MOTION</link> - <link linkend="org.osgi.service.dal.functions.BooleanSensor">BooleanSensor</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.HEAT">HEAT</link> - <link linkend="org.osgi.service.dal.functions.Meter">Meter</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.Types.COLD">COLD</link> - <link linkend="org.osgi.service.dal.functions.Meter">Meter</link>
            </para>
         </listitem>
      </itemizedlist>
      <para>
 The mapping is not mandatory. The function can use custom defined types.
   </para>
      <section role="field" xreflabel="COLD" xml:id="org.osgi.service.dal.functions.Types.COLD">
         <title>public static final String COLD = "cold"</title>
         <para>
The function type is applicable to:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>Meter</code> - indicates that the <code>Meter</code> measures thermal energy
 provided by a source.</para>
            </listitem>
         </itemizedlist>
         <para>
 This type can be specified as a value of
 <link linkend="org.osgi.service.dal.Function.SERVICE_TYPE">org.osgi.service.dal.Function.SERVICE_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="CONTACT" xml:id="org.osgi.service.dal.functions.Types.CONTACT">
         <title>public static final String CONTACT = "contact"</title>
         <para>
The function type is applicable to:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>BooleanSensor</code> - indicates that the <code>BooleanSensor</code> can
 detect contact. <code>true</code> state means that there is contact.
 <code>false</code> state means that there is no contact.</para>
            </listitem>
         </itemizedlist>
         <para>
 This type can be specified as a value of
 <link linkend="org.osgi.service.dal.Function.SERVICE_TYPE">org.osgi.service.dal.Function.SERVICE_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="DOOR" xml:id="org.osgi.service.dal.functions.Types.DOOR">
         <title>public static final String DOOR = "door"</title>
         <para>
The function type is applicable to:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>MultiLevelControl</code> - indicates that the <code>MultiLevelControl</code>
 can control the door position. <code>MultiLevelControl</code> minimum value
 can completely close the door. <code>MultiLevelControl</code> maximum value
 can open the door to the maximum allowed position.</para>
            </listitem>
            <listitem>
               <para>
                  <code>MultiLevelSensor</code> - indicates that the sensor can monitor the door
 position.</para>
            </listitem>
            <listitem>
               <para>
                  <code>BooleanSensor</code> - indicates that the <code>BooleanSensor</code> can
 detect the door state. <code>true</code> state means that the door is opened.
 <code>false</code> state means that the door is closed.</para>
            </listitem>
            <listitem>
               <para>
                  <code>BooleanControl</code> - indicates that there is a door position control.
 <code>true</code> state means that the door will be opened. <code>false</code>
 state means that the door will be closed.</para>
            </listitem>
         </itemizedlist>
         <para>
 This type can be specified as a value of
 <link linkend="org.osgi.service.dal.Function.SERVICE_TYPE">org.osgi.service.dal.Function.SERVICE_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="FIRE" xml:id="org.osgi.service.dal.functions.Types.FIRE">
         <title>public static final String FIRE = "fire"</title>
         <para>
The function type is applicable to:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>BooleanSensor</code> - indicates that the <code>BooleanSensor</code> can
 detect fire. <code>true</code> state means that there is fire. <code>false</code>
 state means that there is no fire.</para>
            </listitem>
         </itemizedlist>
         <para>
 This type can be specified as a value of
 <link linkend="org.osgi.service.dal.Function.SERVICE_TYPE">org.osgi.service.dal.Function.SERVICE_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="FLOW" xml:id="org.osgi.service.dal.functions.Types.FLOW">
         <title>public static final String FLOW = "flow"</title>
         <para>
The function type is applicable to:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>MultiLevelControl</code> - indicates that the <code>MultiLevelControl</code>
 can control the flow level. <code>MultiLevelControl</code> minimum value is
 the minimum supported flow level. <code>MultiLevelControl</code> maximum value
 is the maximum supported flow level.</para>
            </listitem>
            <listitem>
               <para>
                  <code>MultiLevelSensor</code> - indicates that the sensor can monitor the flow
 level.</para>
            </listitem>
         </itemizedlist>
         <para>
 This type can be specified as a value of
 <link linkend="org.osgi.service.dal.Function.SERVICE_TYPE">org.osgi.service.dal.Function.SERVICE_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="GAS" xml:id="org.osgi.service.dal.functions.Types.GAS">
         <title>public static final String GAS = "gas"</title>
         <para>
The function type is applicable to:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>MultiLevelControl</code> - indicates that the <code>MultiLevelControl</code>
 can control the gas level. <code>MultiLevelControl</code> minimum value is the
 lowest supported gas level. <code>MultiLevelControl</code> maximum value is
 the highest supported gas level.</para>
            </listitem>
            <listitem>
               <para>
                  <code>MultiLevelSensor</code> - indicates that the sensor can monitor the gas
 level.</para>
            </listitem>
            <listitem>
               <para>
                  <code>BooleanSensor</code> - indicates that the <code>BooleanSensor</code> supports
 gas detection. <code>true</code> state means there is gas. <code>false</code> state
 means that there is no gas.</para>
            </listitem>
            <listitem>
               <para>
                  <code>Meter</code> - indicates that the <code>Meter</code> measures the gas
 consumption.</para>
            </listitem>
         </itemizedlist>
         <para>
 This type can be specified as a value of
 <link linkend="org.osgi.service.dal.Function.SERVICE_TYPE">org.osgi.service.dal.Function.SERVICE_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="HEAT" xml:id="org.osgi.service.dal.functions.Types.HEAT">
         <title>public static final String HEAT = "heat"</title>
         <para>
The function type is applicable to:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>Meter</code> - indicates that the <code>Meter</code> measures thermal energy
 provided by a source.</para>
            </listitem>
         </itemizedlist>
         <para>
 This type can be specified as a value of
 <link linkend="org.osgi.service.dal.Function.SERVICE_TYPE">org.osgi.service.dal.Function.SERVICE_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="HUMIDITY" xml:id="org.osgi.service.dal.functions.Types.HUMIDITY">
         <title>public static final String HUMIDITY = "humidity"</title>
         <para>
The function type is applicable to:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>MultiLevelControl</code> - indicates that the <code>MultiLevelControl</code>
 can control the humidity level. It's typical functionality for HVAC
 (heating, ventilation, and air conditioning) devices.
 <code>MultiLevelControl</code> minimum value is the lowest supported humidity
 level. <code>MultiLevelControl</code> maximum value is the highest supported
 humidity level.</para>
            </listitem>
            <listitem>
               <para>
                  <code>MultiLevelSensor</code> - indicates that the sensor can monitor the
 humidity level.</para>
            </listitem>
         </itemizedlist>
         <para>
 This type can be specified as a value of
 <link linkend="org.osgi.service.dal.Function.SERVICE_TYPE">org.osgi.service.dal.Function.SERVICE_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="LIGHT" xml:id="org.osgi.service.dal.functions.Types.LIGHT">
         <title>public static final String LIGHT = "light"</title>
         <para>
The function type is applicable to:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>MultiLevelControl</code> - indicates that the <code>MultiLevelControl</code>
 can control light devices. Usually, such devices are called dimmable.
 <code>MultiLevelControl</code> minimum value can switch off the device and
 <code>MultiLevelControl</code> maximum value can increase the device light to
 the maximum possible value.</para>
            </listitem>
            <listitem>
               <para>
                  <code>MultiLevelSensor</code> - indicates that the sensor can monitor the
 light level.</para>
            </listitem>
            <listitem>
               <para>
                  <code>BooleanSensor</code> - indicates that the <code>BooleanSensor</code> can
 detected light. <code>true</code> state means that there is light.
 <code>false</code> state means that there is no light.</para>
            </listitem>
            <listitem>
               <para>
                  <code>BooleanControl</code> - indicates that there is a light device control.
 <code>true</code> state means that the light device will be turned on.
 <code>false</code> state means that the light device will be turned off.</para>
            </listitem>
         </itemizedlist>
         <para>
 This type can be specified as a value of
 <link linkend="org.osgi.service.dal.Function.SERVICE_TYPE">org.osgi.service.dal.Function.SERVICE_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="LIQUID" xml:id="org.osgi.service.dal.functions.Types.LIQUID">
         <title>public static final String LIQUID = "liquid"</title>
         <para>
The function type is applicable to:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>MultiLevelControl</code> - indicates that the <code>MultiLevelControl</code>
 can control the liquid level. <code>MultiLevelControl</code> minimum value is
 the lowest supported liquid level. <code>MultiLevelControl</code> maximum
 value is the highest supported liquid level.</para>
            </listitem>
            <listitem>
               <para>
                  <code>MultiLevelSensor</code> - indicates that the sensor can monitor the
 liquid level.</para>
            </listitem>
         </itemizedlist>
         <para>
 This type can be specified as a value of
 <link linkend="org.osgi.service.dal.Function.SERVICE_TYPE">org.osgi.service.dal.Function.SERVICE_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="MOTION" xml:id="org.osgi.service.dal.functions.Types.MOTION">
         <title>public static final String MOTION = "motion"</title>
         <para>
The function type is applicable to:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>BooleanSensor</code> - indicates that the <code>BooleanSensor</code> can
 detect motion. <code>true</code> state means that there is motion detection.
 <code>false</code> state means that there is no motion detection.</para>
            </listitem>
         </itemizedlist>
         <para>
 This type can be specified as a value of
 <link linkend="org.osgi.service.dal.Function.SERVICE_TYPE">org.osgi.service.dal.Function.SERVICE_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="NOISINESS" xml:id="org.osgi.service.dal.functions.Types.NOISINESS">
         <title>public static final String NOISINESS = "noisiness"</title>
         <para>
The function type is applicable to:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>MultiLevelControl</code> - indicates that the <code>MultiLevelControl</code>
 can control the noise level. <code>MultiLevelControl</code> minimum value is
 the lowest supported noise level. <code>MultiLevelControl</code> maximum value
 is the highest supported noise level.</para>
            </listitem>
            <listitem>
               <para>
                  <code>MultiLevelSensor</code> - indicates that the sensor can monitor the
 noise level.</para>
            </listitem>
         </itemizedlist>
         <para>
 This type can be specified as a value of
 <link linkend="org.osgi.service.dal.Function.SERVICE_TYPE">org.osgi.service.dal.Function.SERVICE_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="OCCUPANCY" xml:id="org.osgi.service.dal.functions.Types.OCCUPANCY">
         <title>public static final String OCCUPANCY = "occupancy"</title>
         <para>
The function type is applicable to:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>BooleanSensor</code> - indicates that the <code>BooleanSensor</code> can
 detect presence. <code>true</code> state means that someone is detected.
 <code>false</code> state means that nobody is detected.</para>
            </listitem>
         </itemizedlist>
         <para>
 This type can be specified as a value of
 <link linkend="org.osgi.service.dal.Function.SERVICE_TYPE">org.osgi.service.dal.Function.SERVICE_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="POWER" xml:id="org.osgi.service.dal.functions.Types.POWER">
         <title>public static final String POWER = "power"</title>
         <para>
The function type is applicable to:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>MultiLevelControl</code> - indicates that the <code>MultiLevelControl</code>
 can control the power level. <code>MultiLevelControl</code> minimum value is
 the lowest supported power level. <code>MultiLevelControl</code> maximum value
 is the highest supported power level.</para>
            </listitem>
            <listitem>
               <para>
                  <code>MultiLevelSensor</code> - indicates that the sensor can monitor the
 power level.</para>
            </listitem>
            <listitem>
               <para>
                  <code>BooleanSensor</code> - indicates that the <code>BooleanSensor</code> can
 detect power/no power. <code>true</code> state means that there is power.
 <code>false</code> state means that there is no power.</para>
            </listitem>
            <listitem>
               <para>
                  <code>BooleanControl</code> - indicates that there is electricity control.
 <code>true</code> state means that the power will be restored. <code>false</code>
 state means that the power will be cut.</para>
            </listitem>
            <listitem>
               <para>
                  <code>Meter</code> - indicates that the <code>Meter</code> measures the power
 consumption.</para>
            </listitem>
         </itemizedlist>
         <para>
 This type can be specified as a value of
 <link linkend="org.osgi.service.dal.Function.SERVICE_TYPE">org.osgi.service.dal.Function.SERVICE_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="PRESSURE" xml:id="org.osgi.service.dal.functions.Types.PRESSURE">
         <title>public static final String PRESSURE = "pressure"</title>
         <para>
The function type is applicable to:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>MultiLevelControl</code> - indicates that the <code>MultiLevelControl</code>
 can control the pressure level. <code>MultiLevelControl</code> minimum value
 is the lowest supported pressure level. <code>MultiLevelControl</code> maximum
 value is the highest supported pressure level.</para>
            </listitem>
            <listitem>
               <para>
                  <code>MultiLevelSensor</code> - indicates that the sensor can monitor the
 pressure level.</para>
            </listitem>
            <listitem>
               <para>
                  <code>Meter</code> - Indicates that the <code>Meter</code> measures pressure.</para>
            </listitem>
         </itemizedlist>
         <para>
 This type can be specified as a value of
 <link linkend="org.osgi.service.dal.Function.SERVICE_TYPE">org.osgi.service.dal.Function.SERVICE_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="RAIN" xml:id="org.osgi.service.dal.functions.Types.RAIN">
         <title>public static final String RAIN = "rain"</title>
         <para>
The function type is applicable to:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>MultiLevelSensor</code> - indicates that the <code>MultiLevelSensor</code>
 can monitor the rain rate. It's not applicable to
 <code>MultiLevelControl</code>.</para>
            </listitem>
            <listitem>
               <para>
                  <code>BooleanSensor</code> - indicates that the <code>BooleanSensor</code> can
 detect rain. <code>true</code> state means that there is rain. <code>false</code>
 state means that there is no rain.</para>
            </listitem>
         </itemizedlist>
         <para>
 This type can be specified as a value of
 <link linkend="org.osgi.service.dal.Function.SERVICE_TYPE">org.osgi.service.dal.Function.SERVICE_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="SMOKE" xml:id="org.osgi.service.dal.functions.Types.SMOKE">
         <title>public static final String SMOKE = "smoke"</title>
         <para>
The function type is applicable to:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>MultiLevelControl</code> - indicates that the <code>MultiLevelControl</code>
 can control the smoke level. <code>MultiLevelControl</code> minimum value is
 the lowest supported smoke level. <code>MultiLevelControl</code> maximum value
 is the highest supported smoke level.</para>
            </listitem>
            <listitem>
               <para>
                  <code>MultiLevelSensor</code> - indicates that the sensor can monitor the
 smoke level.</para>
            </listitem>
            <listitem>
               <para>
                  <code>BooleanSensor</code> - indicates that the <code>BooleanSensor</code> can
 detect smoke. <code>true</code> state means that there is smoke. <code>false</code>
 state means that there is no smoke.</para>
            </listitem>
         </itemizedlist>
         <para>
 This type can be specified as a value of
 <link linkend="org.osgi.service.dal.Function.SERVICE_TYPE">org.osgi.service.dal.Function.SERVICE_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="TEMPERATURE" xml:id="org.osgi.service.dal.functions.Types.TEMPERATURE">
         <title>public static final String TEMPERATURE = "temperature"</title>
         <para>
The function type is applicable to:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>MultiLevelControl</code> - indicates that the <code>MultiLevelControl</code>
 can control temperature devices. For example, such device can be
 thermostat. <code>MultiLevelControl</code> minimum value is the lowest
 supported temperature. <code>MultiLevelControl</code> maximum value is the
 highest supported temperature.</para>
            </listitem>
            <listitem>
               <para>
                  <code>MultiLevelSensor</code> - indicates that the sensor can monitor the
 temperature.</para>
            </listitem>
         </itemizedlist>
         <para>
 This type can be specified as a value of
 <link linkend="org.osgi.service.dal.Function.SERVICE_TYPE">org.osgi.service.dal.Function.SERVICE_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="WATER" xml:id="org.osgi.service.dal.functions.Types.WATER">
         <title>public static final String WATER = "water"</title>
         <para>
The function type is applicable to:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>BooleanSensor</code> - indicates that the <code>BooleanSensor</code> can
 detect water leak. <code>true</code> state means that there is water leak.
 <code>false</code> state means that there is no water leak.</para>
            </listitem>
            <listitem>
               <para>
                  <code>Meter</code> - indicates that the <code>Meter</code> measures water
 consumption.</para>
            </listitem>
         </itemizedlist>
         <para>
 This type can be specified as a value of
 <link linkend="org.osgi.service.dal.Function.SERVICE_TYPE">org.osgi.service.dal.Function.SERVICE_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="WINDOW" xml:id="org.osgi.service.dal.functions.Types.WINDOW">
         <title>public static final String WINDOW = "window"</title>
         <para>
The function type is applicable to:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>MultiLevelControl</code> - indicates that the <code>MultiLevelControl</code>
 can control the window position. <code>MultiLevelControl</code> minimum value
 can completely close the window. <code>MultiLevelControl</code> maximum value
 can open the window to the maximum allowed position.</para>
            </listitem>
            <listitem>
               <para>
                  <code>MultiLevelSensor</code> - indicates that the sensor can monitor the
 window position.</para>
            </listitem>
            <listitem>
               <para>
                  <code>BooleanSensor</code> - indicates that the <code>BooleanSensor</code> can
 window state. <code>true</code> state means that the window is opened.
 <code>false</code> state means that the window is closed.</para>
            </listitem>
            <listitem>
               <para>
                  <code>BooleanControl</code> - indicates that there is a window position
 control. <code>true</code> state means that the window will be opened.
 <code>false</code> state means that the window will be closed.</para>
            </listitem>
         </itemizedlist>
         <para>
 This type can be specified as a value of
 <link linkend="org.osgi.service.dal.Function.SERVICE_TYPE">org.osgi.service.dal.Function.SERVICE_TYPE</link>.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="WakeUp" xml:id="org.osgi.service.dal.functions.WakeUp">
      <title>public interface WakeUp<?line-break?> extends Function</title>
      <para>
         <code>WakeUp</code> function provides device awake monitoring. It's especially
 applicable to battery-operated devices. Such device can notify the system
 that it's awake and can receive commands with a <link linkend="org.osgi.service.dal.functions.WakeUp.PROPERTY_AWAKE">PROPERTY_AWAKE</link>
 property event.
 </para>
      <para>
 The device can periodically wake up for commands. The interval can be managed
 with <link linkend="org.osgi.service.dal.functions.WakeUp.PROPERTY_WAKE_UP_INTERVAL">PROPERTY_WAKE_UP_INTERVAL</link> property.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.dal.functions.data.LevelData">LevelData</link>, <link linkend="org.osgi.service.dal.functions.data.BooleanData">BooleanData</link>
         </para>
      </formalpara>
      <section role="field" xreflabel="PROPERTY_AWAKE" xml:id="org.osgi.service.dal.functions.WakeUp.PROPERTY_AWAKE">
         <title>public static final String PROPERTY_AWAKE = "awake"</title>
         <para>
Specifies the awake property name. The property access type can be
 <link linkend="org.osgi.service.dal.PropertyMetadata.ACCESS_EVENTABLE">PropertyMetadata.ACCESS_EVENTABLE</link>. If the device is awake, it
 will trigger a property event.
 </para>
         <para>
 The property value type is <code>BooleanData</code>. The boolean data is
 always <code>true</code>. It marks that the device is awake.</para>
      </section>
      <section role="field" xreflabel="PROPERTY_WAKE_UP_INTERVAL" xml:id="org.osgi.service.dal.functions.WakeUp.PROPERTY_WAKE_UP_INTERVAL">
         <title>public static final String PROPERTY_WAKE_UP_INTERVAL = "wakeUpInterval"</title>
         <para>
Specifies the wake up interval. The device can periodically wake up and
 receive commands. That interval is managed by this eventable property.
 The current property value is available with <link linkend="org.osgi.service.dal.functions.WakeUp.getWakeUpInterval--">getWakeUpInterval()</link>
 and can be modified with <link linkend="org.osgi.service.dal.functions.WakeUp.setWakeUpInterval-BigDecimal-String-">setWakeUpInterval(BigDecimal, String)</link>.
   </para>
      </section>
      <section role="method" xreflabel="getWakeUpInterval()" xml:id="org.osgi.service.dal.functions.WakeUp.getWakeUpInterval--">
         <title>public LevelData getWakeUpInterval() throws DeviceException</title>
         <para role="description">
Returns the current wake up interval. It's a getter method for
 <link linkend="org.osgi.service.dal.functions.WakeUp.PROPERTY_WAKE_UP_INTERVAL">PROPERTY_WAKE_UP_INTERVAL</link> property. The device can periodically
 wake up and receive command based on this interval.
 </para>
         <para>
 The interval can be measured in different units like hours, minutes,
 seconds, etc. The unit is specified in <code>LevelData</code> instance.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The current wake up interval.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this function service object has already
         been unregistered.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DeviceException</code>– If an operation error is available.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dal.functions.data.LevelData">LevelData</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setWakeUpInterval(BigDecimal,String)" xml:id="org.osgi.service.dal.functions.WakeUp.setWakeUpInterval-BigDecimal-String-">
         <title>public void setWakeUpInterval(BigDecimal interval,String unit) throws DeviceException</title>
         <formalpara role="parameter">
            <title>interval</title>
            <para>The new wake up interval.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>unit</title>
            <para>The interval unit. If the unit is <code>null</code>, the interval
        is measured in milliseconds.</para>
         </formalpara>
         <para role="description">
Sets wake up interval according to the specified unit. It's a setter
 method for <link linkend="org.osgi.service.dal.functions.WakeUp.PROPERTY_WAKE_UP_INTERVAL">PROPERTY_WAKE_UP_INTERVAL</link> property. The device can
 periodically wake up and receive command based on this interval. The unit
 can be <code>null</code>, then the interval is measured in milliseconds.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this function service object has already
         been unregistered.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>DeviceException</code>– If an operation error is available.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If there is an invalid argument.   </para>
         </formalpara>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.service.dal.functions.data" xml:id="org.osgi.service.dal.functions.data" xml:base="../../generated/javadoc/docbook/org.osgi.service.dal.functions.data.xml">
   <title>org.osgi.service.dal.functions.data</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.dal.functions.data-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.dal.functions.data-version.number">1.0</edition>
   </info>
   <para>
Device Abstraction Layer Functions Data Package 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.dal.functions.data; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.dal.functions.data; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.data.AlarmData">
                  <code>AlarmData</code>
               </link> - 
Function alarm data.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.data.BooleanData">
                  <code>BooleanData</code>
               </link> - 
Function boolean data wrapper.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.data.KeypadData">
                  <code>KeypadData</code>
               </link> - 
Represents a keypad event data that is collected when a change with some key
 from the keypad has occurred.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.dal.functions.data.LevelData">
                  <code>LevelData</code>
               </link> - 
Function level data wrapper.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="AlarmData" xml:id="org.osgi.service.dal.functions.data.AlarmData">
      <title>public class AlarmData<?line-break?> extends FunctionData</title>
      <para>
Function alarm data. It cares about the alarm type, severity, timestamp and
 additional metadata. It doesn't support unit. The alarm type is mapped to
 <code>FunctionData</code> value.
   </para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.dal.functions.Alarm">Alarm</link>, <link linkend="org.osgi.service.dal.FunctionData">FunctionData</link>
         </para>
      </formalpara>
      <section role="field" xreflabel="FIELD_SEVERITY" xml:id="org.osgi.service.dal.functions.data.AlarmData.FIELD_SEVERITY">
         <title>public static final String FIELD_SEVERITY = "severity"</title>
         <para>
Represents the severity field name. The field value is available with
 <link linkend="org.osgi.service.dal.functions.data.AlarmData.getSeverity--">getSeverity()</link>. The field type is <code>int</code>. The constant can
 be used as a key to <link linkend="org.osgi.service.dal.functions.data.AlarmData.AlarmData-Map-">AlarmData(Map)</link> .
   </para>
      </section>
      <section role="field" xreflabel="FIELD_TYPE" xml:id="org.osgi.service.dal.functions.data.AlarmData.FIELD_TYPE">
         <title>public static final String FIELD_TYPE = "type"</title>
         <para>
Represents the type field name. The field value is available with
 <link linkend="org.osgi.service.dal.functions.data.AlarmData.getType--">getType()</link>. The field type is <code>int</code>. The constant can be
 used as a key to <link linkend="org.osgi.service.dal.functions.data.AlarmData.AlarmData-Map-">AlarmData(Map)</link>.
   </para>
      </section>
      <section role="field" xreflabel="SEVERITY_CRITICAL" xml:id="org.osgi.service.dal.functions.data.AlarmData.SEVERITY_CRITICAL">
         <title>public static final int SEVERITY_CRITICAL = 3</title>
         <para>
The severity rating indicates that there a critical alarm. The severity
 priority is higher than <link linkend="org.osgi.service.dal.functions.data.AlarmData.SEVERITY_MINOR">SEVERITY_MINOR</link> and
 <link linkend="org.osgi.service.dal.functions.data.AlarmData.SEVERITY_MAJOR">SEVERITY_MAJOR</link>.
   </para>
      </section>
      <section role="field" xreflabel="SEVERITY_MAJOR" xml:id="org.osgi.service.dal.functions.data.AlarmData.SEVERITY_MAJOR">
         <title>public static final int SEVERITY_MAJOR = 2</title>
         <para>
The severity rating indicates that there is a major alarm. The severity
 priority is higher than <link linkend="org.osgi.service.dal.functions.data.AlarmData.SEVERITY_MINOR">SEVERITY_MINOR</link> and lower than
 <link linkend="org.osgi.service.dal.functions.data.AlarmData.SEVERITY_CRITICAL">SEVERITY_CRITICAL</link>.
   </para>
      </section>
      <section role="field" xreflabel="SEVERITY_MINOR" xml:id="org.osgi.service.dal.functions.data.AlarmData.SEVERITY_MINOR">
         <title>public static final int SEVERITY_MINOR = 1</title>
         <para>
The severity rating indicates that there is a minor alarm. The severity
 priority is lower than <link linkend="org.osgi.service.dal.functions.data.AlarmData.SEVERITY_MAJOR">SEVERITY_MAJOR</link> and
 <link linkend="org.osgi.service.dal.functions.data.AlarmData.SEVERITY_CRITICAL">SEVERITY_CRITICAL</link>.
   </para>
      </section>
      <section role="field" xreflabel="SEVERITY_UNDEFINED" xml:id="org.osgi.service.dal.functions.data.AlarmData.SEVERITY_UNDEFINED">
         <title>public static final int SEVERITY_UNDEFINED = 0</title>
         <para>
The severity constant indicates that there is no severity rating for this
 alarm.
   </para>
      </section>
      <section role="field" xreflabel="TYPE_ACCESS_CONTROL" xml:id="org.osgi.service.dal.functions.data.AlarmData.TYPE_ACCESS_CONTROL">
         <title>public static final int TYPE_ACCESS_CONTROL = 1</title>
         <para>
The alarm type indicates that there is access control issue. For example,
 the alarm can indicate that the door is unlocked.
   </para>
      </section>
      <section role="field" xreflabel="TYPE_BURGLAR" xml:id="org.osgi.service.dal.functions.data.AlarmData.TYPE_BURGLAR">
         <title>public static final int TYPE_BURGLAR = 2</title>
         <para>
The alarm type indicates that there is a burglar notification. For
 example, the alarm can indicate that the glass is broken.
   </para>
      </section>
      <section role="field" xreflabel="TYPE_COLD" xml:id="org.osgi.service.dal.functions.data.AlarmData.TYPE_COLD">
         <title>public static final int TYPE_COLD = 3</title>
         <para>
The alarm type indicates that temperature is too low.
   </para>
      </section>
      <section role="field" xreflabel="TYPE_GAS_CO" xml:id="org.osgi.service.dal.functions.data.AlarmData.TYPE_GAS_CO">
         <title>public static final int TYPE_GAS_CO = 4</title>
         <para>
The alarm type indicates that carbon monoxide (CO) is detected.
   </para>
      </section>
      <section role="field" xreflabel="TYPE_GAS_CO2" xml:id="org.osgi.service.dal.functions.data.AlarmData.TYPE_GAS_CO2">
         <title>public static final int TYPE_GAS_CO2 = 5</title>
         <para>
The alarm type indicates that carbon dioxide (CO2) is detected.
   </para>
      </section>
      <section role="field" xreflabel="TYPE_HARDWARE_FAIL" xml:id="org.osgi.service.dal.functions.data.AlarmData.TYPE_HARDWARE_FAIL">
         <title>public static final int TYPE_HARDWARE_FAIL = 7</title>
         <para>
The alarm type indicates that there is hardware failure.
   </para>
      </section>
      <section role="field" xreflabel="TYPE_HEAT" xml:id="org.osgi.service.dal.functions.data.AlarmData.TYPE_HEAT">
         <title>public static final int TYPE_HEAT = 6</title>
         <para>
The alarm type indicates that temperature is too high.
   </para>
      </section>
      <section role="field" xreflabel="TYPE_POWER_FAIL" xml:id="org.osgi.service.dal.functions.data.AlarmData.TYPE_POWER_FAIL">
         <title>public static final int TYPE_POWER_FAIL = 8</title>
         <para>
The alarm type indicates a power cut.
   </para>
      </section>
      <section role="field" xreflabel="TYPE_SMOKE" xml:id="org.osgi.service.dal.functions.data.AlarmData.TYPE_SMOKE">
         <title>public static final int TYPE_SMOKE = 9</title>
         <para>
The alarm type indicates that smoke is detected.
   </para>
      </section>
      <section role="field" xreflabel="TYPE_SOFTWARE_FAIL" xml:id="org.osgi.service.dal.functions.data.AlarmData.TYPE_SOFTWARE_FAIL">
         <title>public static final int TYPE_SOFTWARE_FAIL = 10</title>
         <para>
The alarm type indicates that there is software failure.
   </para>
      </section>
      <section role="field" xreflabel="TYPE_TAMPER" xml:id="org.osgi.service.dal.functions.data.AlarmData.TYPE_TAMPER">
         <title>public static final int TYPE_TAMPER = 11</title>
         <para>
The alarm type for a tamper indication.
   </para>
      </section>
      <section role="field" xreflabel="TYPE_UNDEFINED" xml:id="org.osgi.service.dal.functions.data.AlarmData.TYPE_UNDEFINED">
         <title>public static final int TYPE_UNDEFINED = 0</title>
         <para>
The alarm type indicates that the type is not specified.
   </para>
      </section>
      <section role="field" xreflabel="TYPE_WATER" xml:id="org.osgi.service.dal.functions.data.AlarmData.TYPE_WATER">
         <title>public static final int TYPE_WATER = 12</title>
         <para>
The alarm type indicates that a water leak is detected.
   </para>
      </section>
      <section role="method" xreflabel="AlarmData(Map)" xml:id="org.osgi.service.dal.functions.data.AlarmData.AlarmData-Map-">
         <title>public  AlarmData(Map fields)</title>
         <formalpara role="parameter">
            <title>fields</title>
            <para>Contains the new <code>AlarmData</code> instance field values.</para>
         </formalpara>
         <para role="description">
Constructs new <code>AlarmData</code> instance with the specified field
 values. The map keys must match to the field names. The map values will
 be assigned to the appropriate class fields. For example, the maps can
 be: {"severity"=Integer(1)...}. That map will initialize the
 <link linkend="org.osgi.service.dal.functions.data.AlarmData.FIELD_SEVERITY">FIELD_SEVERITY</link> field with 1. If severity is missing,
 <link linkend="org.osgi.service.dal.functions.data.AlarmData.SEVERITY_UNDEFINED">SEVERITY_UNDEFINED</link> is used.
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.AlarmData.FIELD_SEVERITY">FIELD_SEVERITY</link> - optional field. The value type must be
 <code>Integer</code>.</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.AlarmData.FIELD_TYPE">FIELD_TYPE</link> - optional field. The value type must be
 <code>Integer</code>.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ClassCastException</code>– If the field value types are not expected.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the alarm severity is invalid.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– If the fields map is <code>null</code>.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="AlarmData(long,Map,int,int)" xml:id="org.osgi.service.dal.functions.data.AlarmData.AlarmData-long-Map-int-int-">
         <title>public  AlarmData(long timestamp,Map metadata,int severity,int type)</title>
         <formalpara role="parameter">
            <title>timestamp</title>
            <para>The alarm data timestamp optional field.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>metadata</title>
            <para>The alarm data metadata optional field.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>severity</title>
            <para>The alarm data severity optional field.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>The alarm data type optional field.</para>
         </formalpara>
         <para role="description">
Constructs new <code>AlarmData</code> instance with the specified arguments.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the alarm severity is invalid.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="compareTo(Object)" xml:id="org.osgi.service.dal.functions.data.AlarmData.compareTo-Object-">
         <title>public int compareTo(Object o)</title>
         <formalpara role="parameter">
            <title>o</title>
            <para>
               <code>AlarmData</code> to be compared.</para>
         </formalpara>
         <para role="description">
Compares this <code>AlarmData</code> instance with the given argument. If the
 argument is not <code>AlarmData</code>, it throws <code>ClassCastException</code>.
 Otherwise, this method returns:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>-1</code> if this instance field is less than a field of the
 specified argument.</para>
            </listitem>
            <listitem>
               <para>
                  <code>0</code> if all fields are equivalent.</para>
            </listitem>
            <listitem>
               <para>
                  <code>1</code> if this instance field is greater than a field of the
 specified argument.</para>
            </listitem>
         </itemizedlist>
         <para>
 The fields are compared in this order: timestamp, metadata, type,
 severity.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>-1</code>, <code>0</code> or <code>1</code> depending on the comparison
         rules.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ClassCastException</code>– If the method argument is not of type
         <code>AlarmData</code>.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>java.lang.Comparable.compareTo(java.lang.Object)</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.dal.functions.data.AlarmData.equals-Object-">
         <title>public boolean equals(Object o)</title>
         <formalpara role="parameter">
            <title>o</title>
            <para>The object to compare this data.</para>
         </formalpara>
         <para role="description">
Two <code>AlarmData</code> instances are equal if they contain equal metadata,
 timestamp, type and severity.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this object is equivalent to the specified one.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dal.FunctionData.equals-Object-">org.osgi.service.dal.FunctionData.equals(java.lang.Object)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getSeverity()" xml:id="org.osgi.service.dal.functions.data.AlarmData.getSeverity--">
         <title>public int getSeverity()</title>
         <para role="description">
Returns the alarm severity. The severity can be one of:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.AlarmData.SEVERITY_UNDEFINED">SEVERITY_UNDEFINED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.AlarmData.SEVERITY_MINOR">SEVERITY_MINOR</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.AlarmData.SEVERITY_MAJOR">SEVERITY_MAJOR</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.AlarmData.SEVERITY_CRITICAL">SEVERITY_CRITICAL</link>
               </para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The alarm severity.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.dal.functions.data.AlarmData.getType--">
         <title>public int getType()</title>
         <para role="description">
Returns the alarm type. The type can be one of the predefined:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.AlarmData.TYPE_UNDEFINED">TYPE_UNDEFINED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.AlarmData.TYPE_SMOKE">TYPE_SMOKE</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.AlarmData.TYPE_HEAT">TYPE_HEAT</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.AlarmData.TYPE_COLD">TYPE_COLD</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.AlarmData.TYPE_GAS_CO">TYPE_GAS_CO</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.AlarmData.TYPE_GAS_CO2">TYPE_GAS_CO2</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.AlarmData.TYPE_WATER">TYPE_WATER</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.AlarmData.TYPE_POWER_FAIL">TYPE_POWER_FAIL</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.AlarmData.TYPE_HARDWARE_FAIL">TYPE_HARDWARE_FAIL</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.AlarmData.TYPE_SOFTWARE_FAIL">TYPE_SOFTWARE_FAIL</link>
               </para>
            </listitem>
            <listitem>
               <para>vendor specific</para>
            </listitem>
         </itemizedlist>
         <para>
 Zero and positive values are reserved for this definition and further
 extensions of the alarm types. Custom types can be used only as negative
 values to prevent potential collisions.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The alarm type.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.dal.functions.data.AlarmData.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code for this <code>AlarmData</code> object. The hash code is
 a sum of <link linkend="org.osgi.service.dal.FunctionData.hashCode--">FunctionData.hashCode()</link>, the alarm severity and the
 alarm type.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The hash code of this <code>AlarmData</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dal.FunctionData.hashCode--">org.osgi.service.dal.FunctionData.hashCode()</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="toString()" xml:id="org.osgi.service.dal.functions.data.AlarmData.toString--">
         <title>public String toString()</title>
         <para role="description">
Returns the string representation of this alarm data.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The string representation of this alarm data.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="BooleanData" xml:id="org.osgi.service.dal.functions.data.BooleanData">
      <title>public class BooleanData<?line-break?> extends FunctionData</title>
      <para>
Function boolean data wrapper. It can contain a boolean value, timestamp and
 additional metadata. It doesn't support measurement unit.
   </para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.dal.functions.BooleanControl">BooleanControl</link>, <link linkend="org.osgi.service.dal.functions.BooleanSensor">BooleanSensor</link>, <link linkend="org.osgi.service.dal.FunctionData">FunctionData</link>
         </para>
      </formalpara>
      <section role="field" xreflabel="FIELD_VALUE" xml:id="org.osgi.service.dal.functions.data.BooleanData.FIELD_VALUE">
         <title>public static final String FIELD_VALUE = "value"</title>
         <para>
Represents the value field name. The field value is available with
 <link linkend="org.osgi.service.dal.functions.data.BooleanData.getValue--">getValue()</link>. The field type is <code>boolean</code> . The constant can
 be used as a key to <link linkend="org.osgi.service.dal.functions.data.BooleanData.BooleanData-Map-">BooleanData(Map)</link>.
   </para>
      </section>
      <section role="method" xreflabel="BooleanData(Map)" xml:id="org.osgi.service.dal.functions.data.BooleanData.BooleanData-Map-">
         <title>public  BooleanData(Map fields)</title>
         <formalpara role="parameter">
            <title>fields</title>
            <para>Contains the new <code>BooleanData</code> instance field values.</para>
         </formalpara>
         <para role="description">
Constructs new <code>BooleanData</code> instance with the specified field
 values. The map keys must match to the field names. The map values will
 be assigned to the appropriate class fields. For example, the maps can
 be: {"value"=Boolean(true)...}. That map will initialize the
 <link linkend="org.osgi.service.dal.functions.data.BooleanData.FIELD_VALUE">FIELD_VALUE</link> field with <code>true</code>.
 </para>
         <para>
            <link linkend="org.osgi.service.dal.functions.data.BooleanData.FIELD_VALUE">FIELD_VALUE</link> - mandatory field. The value type must be
 <code>Boolean</code>.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ClassCastException</code>– If the field value types are not expected.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the value is missing.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– If the fields map is <code>null</code>.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="BooleanData(long,Map,boolean)" xml:id="org.osgi.service.dal.functions.data.BooleanData.BooleanData-long-Map-boolean-">
         <title>public  BooleanData(long timestamp,Map metadata,boolean value)</title>
         <formalpara role="parameter">
            <title>timestamp</title>
            <para>The boolean data timestamp optional field.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>metadata</title>
            <para>The boolean data metadata optional field.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>value</title>
            <para>The boolean value mandatory field.</para>
         </formalpara>
         <para role="description">
Constructs new <code>BooleanData</code> instance with the specified arguments.
   </para>
      </section>
      <section role="method" xreflabel="compareTo(Object)" xml:id="org.osgi.service.dal.functions.data.BooleanData.compareTo-Object-">
         <title>public int compareTo(Object o)</title>
         <formalpara role="parameter">
            <title>o</title>
            <para>
               <code>BooleanData</code> to be compared.</para>
         </formalpara>
         <para role="description">
Compares this <code>BooleanData</code> instance with the given argument. If
 the argument is not <code>BooleanData</code>, it throws
 <code>ClassCastException</code>. Otherwise, this method returns:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>-1</code> if this instance field is less than a field of the
 specified argument.</para>
            </listitem>
            <listitem>
               <para>
                  <code>0</code> if all fields are equivalent.</para>
            </listitem>
            <listitem>
               <para>
                  <code>1</code> if this instance field is greater than a field of the
 specified argument.</para>
            </listitem>
         </itemizedlist>
         <para>
 The fields are compared in this order: timestamp, metadata, value.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>-1</code>, <code>0</code> or <code>1</code> depending on the comparison
         rules.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ClassCastException</code>– If the method argument is not of type
         <code>BooleanData</code>.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>java.lang.Comparable.compareTo(java.lang.Object)</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.dal.functions.data.BooleanData.equals-Object-">
         <title>public boolean equals(Object o)</title>
         <formalpara role="parameter">
            <title>o</title>
            <para>The object to compare this data.</para>
         </formalpara>
         <para role="description">
Two <code>BooleanData</code> instances are equal if they contain equal
 metadata, timestamp and boolean value.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this object is equivalent to the specified one.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dal.FunctionData.equals-Object-">org.osgi.service.dal.FunctionData.equals(java.lang.Object)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getValue()" xml:id="org.osgi.service.dal.functions.data.BooleanData.getValue--">
         <title>public boolean getValue()</title>
         <para role="description">
Returns <code>BooleanData</code> value.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>BooleanData</code> value.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.dal.functions.data.BooleanData.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code for this <code>BooleanData</code> object. The hash code
 is a sum of <link linkend="org.osgi.service.dal.FunctionData.hashCode--">FunctionData.hashCode()</link> and
 Boolean.hashCode(), where Boolean.hashCode() represents
 the boolean value hash code.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The hash code of this <code>BooleanData</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dal.FunctionData.hashCode--">org.osgi.service.dal.FunctionData.hashCode()</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="toString()" xml:id="org.osgi.service.dal.functions.data.BooleanData.toString--">
         <title>public String toString()</title>
         <para role="description">
Returns the string representation of this boolean data.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The string representation of this boolean data.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="KeypadData" xml:id="org.osgi.service.dal.functions.data.KeypadData">
      <title>public class KeypadData<?line-break?> extends FunctionData</title>
      <para>
Represents a keypad event data that is collected when a change with some key
 from the keypad has occurred.
 </para>
      <para>
 The key pressed event is using <link linkend="org.osgi.service.dal.functions.data.KeypadData.TYPE_PRESSED">TYPE_PRESSED</link> type, while the key
 released event is using <link linkend="org.osgi.service.dal.functions.data.KeypadData.TYPE_RELEASED">TYPE_RELEASED</link> type.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.dal.functions.Keypad">Keypad</link>, <link linkend="org.osgi.service.dal.FunctionData">FunctionData</link>
         </para>
      </formalpara>
      <section role="field" xreflabel="FIELD_KEY_CODE" xml:id="org.osgi.service.dal.functions.data.KeypadData.FIELD_KEY_CODE">
         <title>public static final String FIELD_KEY_CODE = "keyCode"</title>
         <para>
Represents the key code field name. The field value is available with
 <link linkend="org.osgi.service.dal.functions.data.KeypadData.getKeyCode--">getKeyCode()</link>. The field type is <code>int</code> . The constant can
 be used as a key to <link linkend="org.osgi.service.dal.functions.data.KeypadData.KeypadData-Map-">KeypadData(Map)</link>.
   </para>
      </section>
      <section role="field" xreflabel="FIELD_KEY_NAME" xml:id="org.osgi.service.dal.functions.data.KeypadData.FIELD_KEY_NAME">
         <title>public static final String FIELD_KEY_NAME = "keyName"</title>
         <para>
Represents the key name field name. The field value is available with
 <link linkend="org.osgi.service.dal.functions.data.KeypadData.getKeyName--">getKeyName()</link>. The field type is <code>String</code>. The constant can
 be used as a key to <link linkend="org.osgi.service.dal.functions.data.KeypadData.KeypadData-Map-">KeypadData(Map)</link>.
   </para>
      </section>
      <section role="field" xreflabel="FIELD_SUB_TYPE" xml:id="org.osgi.service.dal.functions.data.KeypadData.FIELD_SUB_TYPE">
         <title>public static final String FIELD_SUB_TYPE = "subType"</title>
         <para>
Represents the event sub-type field name. The field value is available
 with <link linkend="org.osgi.service.dal.functions.data.KeypadData.getSubType--">getSubType()</link>. The field type is <code>int</code>. The constant
 can be used as a key to <link linkend="org.osgi.service.dal.functions.data.KeypadData.KeypadData-Map-">KeypadData(Map)</link>.
   </para>
      </section>
      <section role="field" xreflabel="FIELD_TYPE" xml:id="org.osgi.service.dal.functions.data.KeypadData.FIELD_TYPE">
         <title>public static final String FIELD_TYPE = "type"</title>
         <para>
Represents the event type field name. The field value is available with
 <link linkend="org.osgi.service.dal.functions.data.KeypadData.getType--">getType()</link>. The field type is <code>int</code>. The constant can be
 used as a key to <link linkend="org.osgi.service.dal.functions.data.KeypadData.KeypadData-Map-">KeypadData(Map)</link>.
   </para>
      </section>
      <section role="field" xreflabel="SUB_TYPE_PRESSED_DOUBLE" xml:id="org.osgi.service.dal.functions.data.KeypadData.SUB_TYPE_PRESSED_DOUBLE">
         <title>public static final int SUB_TYPE_PRESSED_DOUBLE = 3</title>
         <para>
Represents a keypad event sub-type for a double key pressed event.
 Usually, there are two press actions and the key is not held down after
 the second press. This sub-type is used with <link linkend="org.osgi.service.dal.functions.data.KeypadData.TYPE_PRESSED">TYPE_PRESSED</link> type.
   </para>
      </section>
      <section role="field" xreflabel="SUB_TYPE_PRESSED_DOUBLE_LONG" xml:id="org.osgi.service.dal.functions.data.KeypadData.SUB_TYPE_PRESSED_DOUBLE_LONG">
         <title>public static final int SUB_TYPE_PRESSED_DOUBLE_LONG = 4</title>
         <para>
Represents a keypad event sub-type for a double long key pressed event.
 Usually, there are two press actions and the key is held down after the
 second press. This sub-type is used with <link linkend="org.osgi.service.dal.functions.data.KeypadData.TYPE_PRESSED">TYPE_PRESSED</link> type.
   </para>
      </section>
      <section role="field" xreflabel="SUB_TYPE_PRESSED_LONG" xml:id="org.osgi.service.dal.functions.data.KeypadData.SUB_TYPE_PRESSED_LONG">
         <title>public static final int SUB_TYPE_PRESSED_LONG = 2</title>
         <para>
Represents a keypad event sub-type for a long key pressed event. Usually,
 there is a single press and the key is held down. This sub-type is used
 with <link linkend="org.osgi.service.dal.functions.data.KeypadData.TYPE_PRESSED">TYPE_PRESSED</link> type.
   </para>
      </section>
      <section role="field" xreflabel="SUB_TYPE_PRESSED_NORMAL" xml:id="org.osgi.service.dal.functions.data.KeypadData.SUB_TYPE_PRESSED_NORMAL">
         <title>public static final int SUB_TYPE_PRESSED_NORMAL = 1</title>
         <para>
Represents a keypad event sub-type for a normal key pressed event.
 Usually, there is a single press and the key is not held down. This
 sub-type is used with <link linkend="org.osgi.service.dal.functions.data.KeypadData.TYPE_PRESSED">TYPE_PRESSED</link> type.
   </para>
      </section>
      <section role="field" xreflabel="TYPE_PRESSED" xml:id="org.osgi.service.dal.functions.data.KeypadData.TYPE_PRESSED">
         <title>public static final int TYPE_PRESSED = 0</title>
         <para>
Represents a keypad event type for a key pressed event.
   </para>
      </section>
      <section role="field" xreflabel="TYPE_RELEASED" xml:id="org.osgi.service.dal.functions.data.KeypadData.TYPE_RELEASED">
         <title>public static final int TYPE_RELEASED = 1</title>
         <para>
Represents a keypad event type for a key released event.
   </para>
      </section>
      <section role="method" xreflabel="KeypadData(Map)" xml:id="org.osgi.service.dal.functions.data.KeypadData.KeypadData-Map-">
         <title>public  KeypadData(Map fields)</title>
         <formalpara role="parameter">
            <title>fields</title>
            <para>Contains the new <code>KeypadData</code> instance field values.</para>
         </formalpara>
         <para role="description">
Constructs new <code>KeypadData</code> instance with the specified field
 values. The map keys must match to the field names. The map values will
 be assigned to the appropriate class fields. For example, the maps can
 be: {"type"=Integer(1)...}. That map will initialize the
 <link linkend="org.osgi.service.dal.functions.data.KeypadData.FIELD_TYPE">FIELD_TYPE</link> field with 1.
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.KeypadData.FIELD_TYPE">FIELD_TYPE</link> - mandatory field. The value type must be
 <code>Integer</code>.</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.KeypadData.FIELD_SUB_TYPE">FIELD_SUB_TYPE</link> - optional field. The value type must be
 <code>Integer</code>.</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.KeypadData.FIELD_KEY_CODE">FIELD_KEY_CODE</link> - mandatory field. The value type must be
 <code>Integer</code>.</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.KeypadData.FIELD_KEY_NAME">FIELD_KEY_NAME</link> - optional field. The value type must be
 <code>String</code>.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ClassCastException</code>– If the field value types are not expected.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the event type or key code is missing
         or invalid arguments are specified.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– If the fields map is <code>null</code>.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="KeypadData(long,Map,int,int,int,String)" xml:id="org.osgi.service.dal.functions.data.KeypadData.KeypadData-long-Map-int-int-int-String-">
         <title>public  KeypadData(long timestamp,Map metadata,int type,int subType,int keyCode,String keyName)</title>
         <formalpara role="parameter">
            <title>timestamp</title>
            <para>The data timestamp optional field.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>metadata</title>
            <para>The data metadata optional field.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>The data event type mandatory field.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>subType</title>
            <para>The data event sub-type optional field or <code>0</code> if
        there is no sub-type.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>keyCode</title>
            <para>The data key code mandatory field.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>keyName</title>
            <para>The data key name optional field or <code>null</code> if there
        is no key name.</para>
         </formalpara>
         <para role="description">
Constructs new <code>KeypadData</code> instance with the specified arguments.
   </para>
      </section>
      <section role="method" xreflabel="compareTo(Object)" xml:id="org.osgi.service.dal.functions.data.KeypadData.compareTo-Object-">
         <title>public int compareTo(Object o)</title>
         <formalpara role="parameter">
            <title>o</title>
            <para>
               <code>KeypadData</code> to be compared.</para>
         </formalpara>
         <para role="description">
Compares this <code>KeypadData</code> instance with the given argument. If the
 argument is not <code>KeypadData</code>, it throws <code>ClassCastException</code>.
 Otherwise, this method returns:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>-1</code> if this instance field is less than a field of the
 specified argument.</para>
            </listitem>
            <listitem>
               <para>
                  <code>0</code> if all fields are equivalent.</para>
            </listitem>
            <listitem>
               <para>
                  <code>1</code> if this instance field is greater than a field of the
 specified argument.</para>
            </listitem>
         </itemizedlist>
         <para>
 The fields are compared in this order: timestamp, metadata, type,
 sub-type, key code, key name.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>-1</code>, <code>0</code> or <code>1</code> depending on the comparison
         rules.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ClassCastException</code>– If the method argument is not of type
         <code>KeypadData</code>.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>java.lang.Comparable.compareTo(java.lang.Object)</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.dal.functions.data.KeypadData.equals-Object-">
         <title>public boolean equals(Object o)</title>
         <formalpara role="parameter">
            <title>o</title>
            <para>The object to compare this data.</para>
         </formalpara>
         <para role="description">
Two <code>KeypadData</code> instances are equal if they contain equal
 metadata, timestamp, event type, key code and key name.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this object is equivalent to the specified one.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dal.FunctionData.equals-Object-">org.osgi.service.dal.FunctionData.equals(java.lang.Object)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getKeyCode()" xml:id="org.osgi.service.dal.functions.data.KeypadData.getKeyCode--">
         <title>public int getKeyCode()</title>
         <para role="description">
The code of the key. This field is mandatory and it holds the
 semantics(meaning) of the key.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The key code.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getKeyName()" xml:id="org.osgi.service.dal.functions.data.KeypadData.getKeyName--">
         <title>public String getKeyName()</title>
         <para role="description">
Represents a human readable name of the corresponding key code. This
 field is optional and sometimes it could be missed(might be <code>null</code>
 ).
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A string with the name of the key or <code>null</code> if not
         specified.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getSubType()" xml:id="org.osgi.service.dal.functions.data.KeypadData.getSubType--">
         <title>public int getSubType()</title>
         <para role="description">
Returns the event sub-type. The sub-type provides additional details
 about the event. The sub-type can be one of:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.KeypadData.SUB_TYPE_PRESSED_NORMAL">SUB_TYPE_PRESSED_NORMAL</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.KeypadData.SUB_TYPE_PRESSED_LONG">SUB_TYPE_PRESSED_LONG</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.KeypadData.SUB_TYPE_PRESSED_DOUBLE">SUB_TYPE_PRESSED_DOUBLE</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.KeypadData.SUB_TYPE_PRESSED_DOUBLE_LONG">SUB_TYPE_PRESSED_DOUBLE_LONG</link>
               </para>
            </listitem>
            <listitem>
               <para>custom sub-type</para>
            </listitem>
         </itemizedlist>
         <para>
 Zero and positive values are reserved for this definition and further
 extensions of the sub-types. Custom sub-types can be used only as
 negative values to prevent potential collisions.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The event sub-type.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.dal.functions.data.KeypadData.getType--">
         <title>public int getType()</title>
         <para role="description">
Returns the event type. The type represents the main reason for this
 event. It can be one of:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.KeypadData.TYPE_PRESSED">TYPE_PRESSED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.KeypadData.TYPE_RELEASED">TYPE_RELEASED</link>
               </para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The event type.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.dal.functions.data.KeypadData.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code for this <code>KeypadData</code> object. The hash code
 is a sum of <link linkend="org.osgi.service.dal.FunctionData.hashCode--">FunctionData.hashCode()</link>, String.hashCode(),
 event type, event sub-type and key code, where String.hashCode()
 represents the key name hash code if available.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The hash code of this <code>LevelData</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dal.FunctionData.hashCode--">org.osgi.service.dal.FunctionData.hashCode()</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="toString()" xml:id="org.osgi.service.dal.functions.data.KeypadData.toString--">
         <title>public String toString()</title>
         <para role="description">
Returns the string representation of this keypad data.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The string representation of this keypad data.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="LevelData" xml:id="org.osgi.service.dal.functions.data.LevelData">
      <title>public class LevelData<?line-break?> extends FunctionData</title>
      <para>
Function level data wrapper. It supports all properties defined in
 <code>FunctionData</code>.
   </para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.dal.functions.MultiLevelControl">MultiLevelControl</link>, <link linkend="org.osgi.service.dal.functions.MultiLevelSensor">MultiLevelSensor</link>, <link linkend="org.osgi.service.dal.functions.Meter">Meter</link>, <link linkend="org.osgi.service.dal.FunctionData">FunctionData</link>
         </para>
      </formalpara>
      <section role="field" xreflabel="FIELD_LEVEL" xml:id="org.osgi.service.dal.functions.data.LevelData.FIELD_LEVEL">
         <title>public static final String FIELD_LEVEL = "level"</title>
         <para>
Represents the level field name. The field value is available with
 <link linkend="org.osgi.service.dal.functions.data.LevelData.getLevel--">getLevel()</link>. The field type is <code>BigDecimal</code>. The constant
 can be used as a key to <link linkend="org.osgi.service.dal.functions.data.LevelData.LevelData-Map-">LevelData(Map)</link>.
   </para>
      </section>
      <section role="field" xreflabel="FIELD_UNIT" xml:id="org.osgi.service.dal.functions.data.LevelData.FIELD_UNIT">
         <title>public static final String FIELD_UNIT = "unit"</title>
         <para>
Represents the unit field name. The field value is available with
 <link linkend="org.osgi.service.dal.functions.data.LevelData.getUnit--">getUnit()</link>. The field type is <code>String</code>. The constant can be
 used as a key to <link linkend="org.osgi.service.dal.functions.data.LevelData.LevelData-Map-">LevelData(Map)</link>.
   </para>
      </section>
      <section role="method" xreflabel="LevelData(Map)" xml:id="org.osgi.service.dal.functions.data.LevelData.LevelData-Map-">
         <title>public  LevelData(Map fields)</title>
         <formalpara role="parameter">
            <title>fields</title>
            <para>Contains the new <code>LevelData</code> instance field values.</para>
         </formalpara>
         <para role="description">
Constructs new <code>LevelData</code> instance with the specified field
 values. The map keys must match to the field names. The map values will
 be assigned to the appropriate class fields. For example, the maps can
 be: {"level"=BigDecimal(1)...}. That map will initialize the
 <link linkend="org.osgi.service.dal.functions.data.LevelData.FIELD_LEVEL">FIELD_LEVEL</link> field with 1.
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.LevelData.FIELD_LEVEL">FIELD_LEVEL</link> - mandatory field. The value type must be
 <code>BigDecimal</code>.</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.dal.functions.data.LevelData.FIELD_UNIT">FIELD_UNIT</link> - optional field. The value type must be
 <code>String</code>.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ClassCastException</code>– If the field value types are not expected.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the level is missing.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– If the fields map is <code>null</code>.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="LevelData(long,Map,BigDecimal,String)" xml:id="org.osgi.service.dal.functions.data.LevelData.LevelData-long-Map-BigDecimal-String-">
         <title>public  LevelData(long timestamp,Map metadata,BigDecimal level,String unit)</title>
         <formalpara role="parameter">
            <title>timestamp</title>
            <para>The data timestamp optional field.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>metadata</title>
            <para>The data metadata optional field.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>level</title>
            <para>The level value mandatory field.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>unit</title>
            <para>The data unit optional field.</para>
         </formalpara>
         <para role="description">
Constructs new <code>LevelData</code> instance with the specified arguments.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– If <code>level</code> is <code>null</code>.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="compareTo(Object)" xml:id="org.osgi.service.dal.functions.data.LevelData.compareTo-Object-">
         <title>public int compareTo(Object o)</title>
         <formalpara role="parameter">
            <title>o</title>
            <para>
               <code>LevelData</code> to be compared.</para>
         </formalpara>
         <para role="description">
Compares this <code>LevelData</code> instance with the given argument. If the
 argument is not <code>LevelData</code>, it throws <code>ClassCastException</code>.
 Otherwise, this method returns:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>-1</code> if this instance field is less than a field of the
 specified argument.</para>
            </listitem>
            <listitem>
               <para>
                  <code>0</code> if all fields are equivalent.</para>
            </listitem>
            <listitem>
               <para>
                  <code>1</code> if this instance field is greater than a field of the
 specified argument.</para>
            </listitem>
         </itemizedlist>
         <para>
 The fields are compared in this order: timestamp, metadata, level, unit.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>-1</code>, <code>0</code> or <code>1</code> depending on the comparison
         rules.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ClassCastException</code>– If the method argument is not of type
         <code>LevelData</code>.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>java.lang.Comparable.compareTo(java.lang.Object)</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.dal.functions.data.LevelData.equals-Object-">
         <title>public boolean equals(Object o)</title>
         <formalpara role="parameter">
            <title>o</title>
            <para>The object to compare this data.</para>
         </formalpara>
         <para role="description">
Two <code>LevelData</code> instances are equal if they contain equal metadata,
 timestamp, unit and level.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this object is equivalent to the specified one.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dal.FunctionData.equals-Object-">org.osgi.service.dal.FunctionData.equals(java.lang.Object)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getLevel()" xml:id="org.osgi.service.dal.functions.data.LevelData.getLevel--">
         <title>public BigDecimal getLevel()</title>
         <para role="description">
Returns <code>LevelData</code> value. The value type is <code>BigDecimal</code>
 instead of <code>double</code> to guarantee value accuracy.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <code>LevelData</code> value.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getUnit()" xml:id="org.osgi.service.dal.functions.data.LevelData.getUnit--">
         <title>public String getUnit()</title>
         <para role="description">
Returns <code>LevelData</code> unit as it's specified in
 <link linkend="org.osgi.service.dal.PropertyMetadata.UNITS">PropertyMetadata.UNITS</link> or <code>null</code> if the unit is missing.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The value unit or <code>null</code> if the unit is missing.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.dal.functions.data.LevelData.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code for this <code>LevelData</code> object. The hash code is
 a sum of <link linkend="org.osgi.service.dal.FunctionData.hashCode--">FunctionData.hashCode()</link>, String.hashCode() and
 BigDecimal.hashCode(), where String.hashCode() represents
 the unit hash code and BigDecimal.hashCode() represents the level
 hash code.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The hash code of this <code>LevelData</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.dal.FunctionData.hashCode--">org.osgi.service.dal.FunctionData.hashCode()</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="toString()" xml:id="org.osgi.service.dal.functions.data.LevelData.toString--">
         <title>public String toString()</title>
         <para role="description">
Returns the string representation of this level data.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The string representation of this level data.</para>
         </formalpara>
      </section>
   </section>
</section>
</chapter>

  <chapter label="143" revision="$Id: e60b22a3bb6385cb82eb016127b012483275540c $" version="5" xml:id="service.network" xml:base="../143/service.network.xml">
  <title>Network Interface Information Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.networkadapter-version" linkend="org.osgi.service.networkadapter"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The Network Interface Information Service is a service that provides
    a standard way for bundles to receive notification about changes in the
    network interface and IP address.</para>

    <para>When the IP address has changed, bundles utilizing the IP address
    information need to detect this change. When using the standard Java API,
    such as <code>java.net.NetworkInterface</code> and
    <code>java.net.InetAddress</code>, calls to confirm the IP address at
    regular intervals are required. Since this is a process common to all
    bundles that need to detect any change in IP address information, this
    specification defines a notification feature for all available network
    interfaces, including the IP address. In addition, this specification
    defines an API that provides the function to obtain the network interface
    information and the information about the IP address bound to a network
    interface.</para>

    <para>The name of a network interface can be Operating System specific. In
    order for bundles to refer to the network interface it is necessary to
    distinguish the network interface in a form that it is independent of the
    Operating System.</para>

    <para>This specification defines the <code>NetworkAdapter</code> Service
    and <code>NetworkAddress</code> Service. These services provide
    information about the network interface and IP addresses.</para>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Network Interface</emphasis> - Available and
          activated network interfaces provided in the execution environment.
          In this specification, the unit of the network interface is the
          logical interface, not the physical interface.</para>
        </listitem>

        <listitem>
          <para><emphasis>NetworkAdapter</emphasis> - The OSGi service that
          provides information related to the Network Interface. This service
          provides function similar to
          <code>java.net.NetworkInterface</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>NetworkAddress</emphasis> - The OSGi service that
          provides information of IP addresses available on the execution
          environment in which a Network Interface Information Service bundle
          is running.</para>
        </listitem>

        <listitem>
          <para><emphasis>Network Interface Information Service
          bundle</emphasis> - The OSGi bundle that implements NetworkAdapter
          and NetworkAddress services. Network Interface Information Service
          bundle registers NetworkAdapter and NetworkAddress services with the
          Framework.</para>
        </listitem>

        <listitem>
          <para><emphasis>Network Interface Type</emphasis> - An identifier of
          the network interface. It is independent of the operating system.
          The two type of identifier string is specified in this
          specification. This specification allows that Network Interface type
          other than them can be defined by the platform provider in each
          environment. This identifier is used by user bundle to specify the
          network interface to be monitored.</para>
        </listitem>

        <listitem>
          <para><emphasis>IPAddressVersion</emphasis> - An identifier
          indicating the IP address version. For example, IPv4, IPv6. This
          identifier is defined in this specification. This identifier is used
          by a bundle to specify the network interface to be monitored.</para>
        </listitem>

        <listitem>
          <para><emphasis>IPAddressScope</emphasis> - An identifier indicating
          the scope of IP address. For example, GLOBAL, PRIVATE. This
          identifier is defined in this specification. This identifier is used
          by a bundle to specify the network interface to be monitored.</para>
        </listitem>
      </itemizedlist>

      <figure xml:id="service.network-figure-143-1">
        <title>Network Interface Information Service Overview Diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.750in" contentwidth="5.000in" fileref="service_network_classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The <xref linkend="org.osgi.service.networkadapter.NetworkAdapter" xrefstyle="hyperlink"/> service provides the network interface
      information for a logical interface. <xref linkend="org.osgi.service.networkadapter.NetworkAddress" xrefstyle="hyperlink"/> service provides the IP address information for
      an IP address. A <code>NetworkAddress</code> service is associated with
      a <code>NetworkAdapter</code> service.</para>

      <para>When network interface information is changed, the service
      properties of the corresponing <code>NetworkAdapter</code> service and
      <code>NetworkAddress</code> service are changed. It is necessary for the
      bundle using these services to track these services and be advised of
      changes in the network interface information through Service
      Events.</para>
    </section>
  </section>

  <section>
    <title>NetworkAdapter Service</title>

    <para><xref linkend="org.osgi.service.networkadapter.NetworkAdapter" xrefstyle="hyperlink"/> is an interface that provides information about a
    single network interface provided by the execution environment. If
    multiple network interfaces are present, <code>NetworkAdapter</code>
    services that correspond to each network interface must be registered.
    <code>NetworkAdapter</code> services must be registered with service
    properties as shown in the following table.</para>

    <table>
      <title>Service properties of NetworkAdapter service</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="3*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="3*"/>

        <thead>
          <row>
            <entry>The key of service property</entry>

            <entry>Type</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>networkAdapter.type</code></entry>

            <entry><code>String</code></entry>

            <entry>Required property. Network interface type is set to a
            value.</entry>
          </row>

          <row>
            <entry><code>networkAdapter.hardwareAddress</code></entry>

            <entry><code>byte[]</code></entry>

            <entry>Required property. Hardware address (MAC address) is set to
            a value. This property can also be obtained from <xref linkend="org.osgi.service.networkadapter.NetworkAdapter.getHardwareAddress--" xrefstyle="hyperlink"/>.</entry>
          </row>

          <row>
            <entry><code>networkAdapter.name</code></entry>

            <entry><code>String</code></entry>

            <entry>Required property. Network interface name is set to a
            value. This property can also be obtained from <xref linkend="org.osgi.service.networkadapter.NetworkAdapter.getName--" xrefstyle="hyperlink"/>.</entry>
          </row>

          <row>
            <entry><code>networkAdapter.displayName</code></entry>

            <entry><code>String</code></entry>

            <entry>Required property. Network interface display name is set to
            a value. This property can also be obtained from <xref linkend="org.osgi.service.networkadapter.NetworkAdapter.getDisplayName--" xrefstyle="hyperlink"/>.</entry>
          </row>

          <row>
            <entry><code>networkAdapter.isUp</code></entry>

            <entry><code>boolean</code></entry>

            <entry>Required property. The value is true when a network
            interface is up and running, otherwise it is false.</entry>
          </row>

          <row>
            <entry><code>networkAdapter.isLoopback</code></entry>

            <entry><code>boolean</code></entry>

            <entry>Required property. The value is true when a network
            interface is a loopback interface, otherwise it is false.</entry>
          </row>

          <row>
            <entry><code>networkAdapter.isPointToPoint</code></entry>

            <entry><code>boolean</code></entry>

            <entry>Required property. The value is true when a network
            interface is a point to point interface, otherwise it is
            false.</entry>
          </row>

          <row>
            <entry><code>networkAdapter.isVirtual</code></entry>

            <entry><code>boolean</code></entry>

            <entry>Required property. The value is true when a network
            interface is a virtual interface, otherwise it is false.</entry>
          </row>

          <row>
            <entry><code>networkAdapter.supportsMulticast</code></entry>

            <entry><code>boolean</code></entry>

            <entry>Required property. The value is true when a network
            interface supports multicasting, otherwise it is false.</entry>
          </row>

          <row>
            <entry><code>networkAdapter.parent</code></entry>

            <entry><code>String</code></entry>

            <entry>Required property. Service PID of the NetworkAdapter
            service which is parent of this NetworkAdapter is
            specified.</entry>
          </row>

          <row>
            <entry><code>networkAdapter.subInterface</code></entry>

            <entry><code>String[]</code></entry>

            <entry>Required property. Service PID of the NetworkAdapter
            service which is subinterface of this NetworkAdapter is
            specified.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>When a network interface becomes available, a
    <code>NetworkAdapter</code> service associated with the network interface
    is registered with the service registry. If the network interface becomes
    unavailable, the corresponding <code>NetworkAdapter</code> service is
    unregistered.</para>

    <para>When the attribute values of the network interface change, the
    <code>NetworkAdapter</code> service is updated with changed service
    properties. <code>NetworkAdapter</code> interface provides a method
    corresponding to <code>java.net.NetworkInterface</code> in order to
    provide information on the associated network interface.</para>

    <section>
      <title>Network Interface Type</title>

      <para>Identifying the network interface is possible by using the network
      interface name. However, since the network interface name is an
      identifier that is dependent on the operating system, if network
      interface name is used as identifier, bundles must be implemented to be
      aware of the operating system. Therefore, in this specification,
      "network interface type” which is independent of the operating system,
      is used to identify the network interface. The network interface type
      string of "LAN" and "WAN" are defined in this specification. This
      specification allows that Network Interface type other than "LAN"and
      "WAN" can be defined by the platform provider in each environment. It is
      provided by the platform provider on which Network Interface Information
      Service bundle is running. Network Interface type "LAN"indicates the
      network interface connects to a local area network. Network Interface
      type "WAN" indicates the network interface connects to an external
      network (i.e. Internet). If a bundle wants to obtain the information of
      the network interface connected to the Internet, the bundle is able to
      get it by obtaining <code>NetworkAdapter</code> service with the
      <code>networkAdapter.type</code> service property set to the value
      "WAN".</para>

      <para>This specification allows that Network Interface type other than
      "LAN"and "WAN" can be defined by the platform provider in each
      environment. It may be provided by the platform provider on which
      Network Interface Information Service bundle is running.</para>

      <table>
        <title>Network Interface Type</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="2*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>Network Interface Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>LAN</code></entry>

              <entry><code>The network interface to connect to a local area
              network. </code></entry>
            </row>

            <row>
              <entry><code>WAN</code></entry>

              <entry><code>The network interface to connect to an external
              network (i.e. Internet). </code></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>

  <section>
    <title>NetworkAddress Service</title>

    <para><xref linkend="org.osgi.service.networkadapter.NetworkAddress" xrefstyle="hyperlink"/> interface provides information about an IP address
    available in the execution environment in which the a Network Interface
    Information Service bundle is running. <code>NetworkAddress</code> service
    is registered with the service registry together with service properties
    as shown in the following table.</para>

    <table>
      <title>Service properties of NetworkAddress service</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="3*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="3*"/>

        <thead>
          <row>
            <entry>The key of service property</entry>

            <entry>Type</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>networkAdapter.type</code></entry>

            <entry><code>String</code></entry>

            <entry>Required property. Network interface type is set to a
            value.</entry>
          </row>

          <row>
            <entry><code>ipAddress.version</code></entry>

            <entry><code>String</code></entry>

            <entry>Required property. IP address version is set to a
            value.</entry>
          </row>

          <row>
            <entry><code>ipAddress.scope</code></entry>

            <entry><code>String</code></entry>

            <entry>Required property. IP address scope is set to a
            value.</entry>
          </row>

          <row>
            <entry><code>ipAddress</code></entry>

            <entry><code>String</code></entry>

            <entry>Required property. IP address String is set to a
            value.</entry>
          </row>

          <row>
            <entry><code>subnetmask.length</code></entry>

            <entry><code>int</code></entry>

            <entry>Required property. Subnet mask length of the required
            properties IPv4, or IPv6 prefix length is set to a value.</entry>
          </row>

          <row>
            <entry><code>networkAdapter.pid</code></entry>

            <entry><code>String</code></entry>

            <entry>Required property. Service PID of the NetworkAdapterService
            corresponding to the network interface binding this IP address is
            set to a value.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>A <code>NetworkAddress</code> service is registered with the service
    registry for each available IP address. When an associated IP address is
    deleted, or the network interface to which the IP address is bound becomes
    unavailable, the <code>NetworkAddress</code> service is unregistered. When
    the associated IP address changes, the <code>NetworkAddress</code> service
    is updated with updated service properties. A bundle can detect the change
    of IP address by monitoring the registration or unregistering, updating of
    the <code>NetworkAddress</code> service. When registering a NetworkAdapter
    service, the Network Interface Information Service bundle must register it
    with a unique service PID. Because IP addresses are bound to a network
    interface, the service PID of the associated <code>NetworkAdapter</code>
    service and its network interface type are set in the service properties
    of the <code>NetworkAddress</code> service.</para>

    <section>
      <title>IP Address Version</title>

      <para>Defines the version of the IP address. A bundle can select
      <code>NetworkAddress</code> services using the following IP address
      version.</para>

      <table>
        <title>IP Address Version</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="2*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>IP Address Version</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>IPV4</code></entry>

              <entry><code>IP address version which means IPv4 address.
              </code></entry>
            </row>

            <row>
              <entry><code>IPV6</code></entry>

              <entry><code>IP address version which means IPv6 address.
              </code></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>IP address scope</title>

      <para>Defins the scope of the IP address. A bundle can select
      <code>NetworkAddress</code> services using the following IP address
      scope.</para>

      <table>
        <title>IP Address Scope</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="2*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>IP Address Scope</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>GLOBAL</code></entry>

              <entry><code>IP address scope which means global
              address.</code></entry>
            </row>

            <row>
              <entry><code>PRIVATE_USE</code></entry>

              <entry><code>IP address scope which means private
              address.</code></entry>
            </row>

            <row>
              <entry><code>LOOPBACK</code></entry>

              <entry><code>IP address scope which means loopback
              address.</code></entry>
            </row>

            <row>
              <entry><code>LINKLOCAL</code></entry>

              <entry><code>IP address scope which means link local
              address.</code></entry>
            </row>

            <row>
              <entry><code>UNIQUE_LOCAL</code></entry>

              <entry><code>IP address scope which means
              unique-localaddress.</code></entry>
            </row>

            <row>
              <entry><code>UNSPECIFIED</code></entry>

              <entry><code>IP address scope which means the absence of an
              address. </code></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>If a bundle which wants to check for an IP address of the IPv4
      global, the bundle is able to confirm by obtaining
      <code>NetworkAddress</code> service with the
      <code>ipAddress.version</code> service property set to the value
      "<code>IPV4</code>" and the <code>ipAddress.scope</code> service
      property set to the value "<code>GLOBAL</code>".</para>
    </section>
  </section>

  <section>
    <title>A Controller Example</title>

    <para>The following example shows the usage of <code>NetworkAddress</code>
    service. The sample <code>Controller</code> class extends the
    <code>ServiceTracker</code> class so that it can track
    <code>NetworkAddress</code> services.</para>

    <programlisting>class Controller extends ServiceTracker {
  Controller(BundleContext context) {
    super(context, NetworkAdapter.class.getName(), null);
  }

  public Object addingService(ServiceReference ref) {
    NetworkAdapter addAdapter =  (NetworkAdapter)super.addingService(ref);
    String type = addAdapter.getNetworkAdapterType();
    String displayName = addAdapter.getDisplayName();

    // ...

    String servicePID = (String)ref.getProperty(Constants.SERVICE_PID);
    try {
      String filter 
         = "(" + NetworkAddress.NETWORKADAPTER_PID + "=" + servicePID + ")";
      ServiceReference[] refs  
        = context.getServiceReferences(NetworkAddress.class.getName(), filter);
      for (int i = 0; i &lt; refs.length; i++) {
        NetworkAddress address = (NetworkAddress) context.getService(refs[i]);
        String ipAddress = address.getIpAddress();
        int subnetMaskLength = address.getSubnetMaskLength();
         // ...
       }
    } catch (InvalidSyntaxException e) {
      e.printStackTrace();
    }
    return addAdapter;
  }
}</programlisting>
  </section>

  <section>
    <title>Security</title>

    <para>To acquire network interface information, a bundle needs
    <code>ServicePermission[NetworkAdapter, GET]</code> and
    <code>ServicePermission[NetworkAddress, GET]</code>. It can use Filter
    Based Permissions. When a platform provider performs access control of the
    bundle, It can set ServicePermission like the following example.</para>

    <para><code>ServicePermission["(&amp;(objectClass=org.osgi.service.networkadapter.NetworkAdapter)(networkAdapter.type=LAN))",GET]
    </code></para>

    <para><code>ServicePermission["(&amp;(objectClass=org.osgi.service.networkadapter.NetworkAddress)(networkAdapter.type=LAN)
    (ipAddress.version=IPV4)(ipAddress.scope=PRIVATE_USE))", GET]
    </code></para>

    <para>The <code>NetworkAdapter</code> service and the
    <code>NetworkAddress</code> service should only be implemented by trusted
    bundles. This bundle requires <code>ServicePermission[NetworkAdapter,
    REGISTER]</code> and <code>ServicePermission[NetworkAddress,
    REGISTER]</code>.</para>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.networkadapter" xml:id="org.osgi.service.networkadapter" xml:base="../../generated/javadoc/docbook/org.osgi.service.networkadapter.xml">
   <title>org.osgi.service.networkadapter</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.networkadapter-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.networkadapter-version.number">1.0</edition>
   </info>
   <para>
Network Interface Information Service Specification Package Version 1.0.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.networkadapter; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.networkadapter; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.networkadapter.NetworkAdapter">
                  <code>NetworkAdapter</code>
               </link> - 
NetworkAdapter is an interface that provides information about single network
 interfaces provided by the execution environment.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.networkadapter.NetworkAddress">
                  <code>NetworkAddress</code>
               </link> - 
This interface represents an IP address information.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="NetworkAdapter" xml:id="org.osgi.service.networkadapter.NetworkAdapter">
      <title>public interface NetworkAdapter</title>
      <para>
NetworkAdapter is an interface that provides information about single network
 interfaces provided by the execution environment.
 
 </para>
      <para>
 If multiple network interfaces are present, NetworkAdapter Services that
 correspond to each network interface must be registered. Network interface
 information service is set the following information as service property.
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.networkadapter.NetworkAdapter.NETWORKADAPTER_TYPE">NETWORKADAPTER_TYPE</link> : Network Interface Type</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.networkadapter.NetworkAdapter.NETWORKADAPTER_DISPLAYNAME">NETWORKADAPTER_DISPLAYNAME</link> : Network Interface Display Name</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.networkadapter.NetworkAdapter.NETWORKADAPTER_NAME">NETWORKADAPTER_NAME</link> : Network Interface Name</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.networkadapter.NetworkAdapter.NETWORKADAPTER_HARDWAREADDRESS">NETWORKADAPTER_HARDWAREADDRESS</link> : Hardware Address</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.networkadapter.NetworkAdapter.NETWORKADAPTER_IS_UP">NETWORKADAPTER_IS_UP</link> : Running status of Network Interface</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.networkadapter.NetworkAdapter.NETWORKADAPTER_IS_LOOPBACK">NETWORKADAPTER_IS_LOOPBACK</link> : To check loopback interface</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.networkadapter.NetworkAdapter.NETWORKADAPTER_IS_POINTTOPOINT">NETWORKADAPTER_IS_POINTTOPOINT</link> : To check point to point
 interface</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.networkadapter.NetworkAdapter.NETWORKADAPTER_IS_VIRTUAL">NETWORKADAPTER_IS_VIRTUAL</link> : To check virtual interface</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.networkadapter.NetworkAdapter.NETWORKADAPTER_SUPPORTS_MULTICAST">NETWORKADAPTER_SUPPORTS_MULTICAST</link> : To check supports
 multicasting</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.networkadapter.NetworkAdapter.NETWORKADAPTER_PARENT">NETWORKADAPTER_PARENT</link> : The PID of parent Network Interface</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.networkadapter.NetworkAdapter.NETWORKADAPTER_SUBINTERFACE">NETWORKADAPTER_SUBINTERFACE</link> : The PID of sub Network Interface</para>
         </listitem>
      </itemizedlist>
      <para>
 When a network interface becomes available, NetworkAdapter service associated
 with the network interface is registered with the service registry. If the
 network interface becomes unavailable, the corresponding NetworkAdapter
 service is unregistered.
 </para>
      <para>
 When the attribute values of the network interface are set to the service
 property changes, NetworkAdapter service is updated. NetworkAdapter interface
 provides a method corresponding to java.net.NetworkInterface in order to
 provide information on the associated network interface. However, this
 interface method does not support the Static method. In addition, because
 NetworkInterface object or InetAddress object is registered in the service
 registry as NetworkAdapter and NetworkAddress, the NetworkAdapter interface
 does not provide a method to get those objects. NetworkAdapter provides a
 method to retrieve the value of an attribute of a network interface.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="EMPTY_BYTE_ARRAY" xml:id="org.osgi.service.networkadapter.NetworkAdapter.EMPTY_BYTE_ARRAY">
         <title>public static final byte[] EMPTY_BYTE_ARRAY</title>
         <para>
The value byte array of service property, when information is not
 available.
   </para>
      </section>
      <section role="field" xreflabel="EMPTY_STRING" xml:id="org.osgi.service.networkadapter.NetworkAdapter.EMPTY_STRING">
         <title>public static final String EMPTY_STRING = ""</title>
         <para>
The value string of service property, when information is not available.
   </para>
      </section>
      <section role="field" xreflabel="EMPTY_STRING_ARRAY" xml:id="org.osgi.service.networkadapter.NetworkAdapter.EMPTY_STRING_ARRAY">
         <title>public static final String[] EMPTY_STRING_ARRAY</title>
         <para>
The value string array of service property, when information is not
 available.
   </para>
      </section>
      <section role="field" xreflabel="LAN" xml:id="org.osgi.service.networkadapter.NetworkAdapter.LAN">
         <title>public static final String LAN = "LAN"</title>
         <para>
The string of network interface type which means the network interface to
 connect to a local area network.
   </para>
      </section>
      <section role="field" xreflabel="NETWORKADAPTER_DISPLAYNAME" xml:id="org.osgi.service.networkadapter.NetworkAdapter.NETWORKADAPTER_DISPLAYNAME">
         <title>public static final String NETWORKADAPTER_DISPLAYNAME = "networkAdapter.displayName"</title>
         <para>
The key string of "networkAdapter.displayName" service property.
 </para>
         <para>
 Network Interface display name is specified. <link linkend="org.osgi.service.networkadapter.NetworkAdapter.EMPTY_STRING">EMPTY_STRING</link> if no
 display name is available.</para>
      </section>
      <section role="field" xreflabel="NETWORKADAPTER_HARDWAREADDRESS" xml:id="org.osgi.service.networkadapter.NetworkAdapter.NETWORKADAPTER_HARDWAREADDRESS">
         <title>public static final String NETWORKADAPTER_HARDWAREADDRESS = "networkAdapter.hardwareAddress"</title>
         <para>
The key string of "networkAdapter.hardwareAddress" service property.
 </para>
         <para>
 Hardware Address is specified. <link linkend="org.osgi.service.networkadapter.NetworkAdapter.EMPTY_BYTE_ARRAY">EMPTY_BYTE_ARRAY</link> if no hardware
 address is available.</para>
      </section>
      <section role="field" xreflabel="NETWORKADAPTER_IS_LOOPBACK" xml:id="org.osgi.service.networkadapter.NetworkAdapter.NETWORKADAPTER_IS_LOOPBACK">
         <title>public static final String NETWORKADAPTER_IS_LOOPBACK = "networkAdapter.isLoopback"</title>
         <para>
The key string of "networkAdapter.isLoopback" service property.
 </para>
         <para>
 The value is true when a network interface is a loopback interface,
 otherwise it is false.</para>
      </section>
      <section role="field" xreflabel="NETWORKADAPTER_IS_POINTTOPOINT" xml:id="org.osgi.service.networkadapter.NetworkAdapter.NETWORKADAPTER_IS_POINTTOPOINT">
         <title>public static final String NETWORKADAPTER_IS_POINTTOPOINT = "networkAdapter.isPointToPoint"</title>
         <para>
The key string of "networkAdapter.isPointToPoint" service property.
 </para>
         <para>
 The value is true when a network interface is a point to point interface,
 otherwise it is false.</para>
      </section>
      <section role="field" xreflabel="NETWORKADAPTER_IS_UP" xml:id="org.osgi.service.networkadapter.NetworkAdapter.NETWORKADAPTER_IS_UP">
         <title>public static final String NETWORKADAPTER_IS_UP = "networkAdapter.isUp"</title>
         <para>
The key string of "networkAdapter.isUp" service property.
 </para>
         <para>
 The value is true when a network interface is up and running, otherwise
 it is false.</para>
      </section>
      <section role="field" xreflabel="NETWORKADAPTER_IS_VIRTUAL" xml:id="org.osgi.service.networkadapter.NetworkAdapter.NETWORKADAPTER_IS_VIRTUAL">
         <title>public static final String NETWORKADAPTER_IS_VIRTUAL = "networkAdapter.isVirtual"</title>
         <para>
The key string of "networkAdapter.isVirtual" service property.
 </para>
         <para>
 The value is true when a network interface is a virtual interface,
 otherwise it is false.</para>
      </section>
      <section role="field" xreflabel="NETWORKADAPTER_NAME" xml:id="org.osgi.service.networkadapter.NetworkAdapter.NETWORKADAPTER_NAME">
         <title>public static final String NETWORKADAPTER_NAME = "networkAdapter.name"</title>
         <para>
The key string of "networkAdapter.name" service property.
 </para>
         <para>
 Network Interface Name is specified. <link linkend="org.osgi.service.networkadapter.NetworkAdapter.EMPTY_STRING">EMPTY_STRING</link> if no name is
 available.</para>
      </section>
      <section role="field" xreflabel="NETWORKADAPTER_PARENT" xml:id="org.osgi.service.networkadapter.NetworkAdapter.NETWORKADAPTER_PARENT">
         <title>public static final String NETWORKADAPTER_PARENT = "networkAdapter.parent"</title>
         <para>
The key string of "networkAdapter.parent" service property.
 </para>
         <para>
 Service PID of the NetworkAdapter service which is parent of this
 NetworkAdapter is specified. <link linkend="org.osgi.service.networkadapter.NetworkAdapter.EMPTY_STRING">EMPTY_STRING</link> if no parent is
 available.</para>
      </section>
      <section role="field" xreflabel="NETWORKADAPTER_SUBINTERFACE" xml:id="org.osgi.service.networkadapter.NetworkAdapter.NETWORKADAPTER_SUBINTERFACE">
         <title>public static final String NETWORKADAPTER_SUBINTERFACE = "networkAdapter.subInterface"</title>
         <para>
The key string of "networkAdapter.subInterface" service property.
 </para>
         <para>
 Service PID of the NetworkAdapter service which is subinterface of this
 NetworkAdapter is specified. <link linkend="org.osgi.service.networkadapter.NetworkAdapter.EMPTY_STRING_ARRAY">EMPTY_STRING_ARRAY</link> if no
 subinterface is available.</para>
      </section>
      <section role="field" xreflabel="NETWORKADAPTER_SUPPORTS_MULTICAST" xml:id="org.osgi.service.networkadapter.NetworkAdapter.NETWORKADAPTER_SUPPORTS_MULTICAST">
         <title>public static final String NETWORKADAPTER_SUPPORTS_MULTICAST = "networkAdapter.supportsMulticast"</title>
         <para>
The key string of "networkAdapter.supportsMulticast" service property.
 </para>
         <para>
 The value is true when a network interface supports multicasting,
 otherwise it is false.</para>
      </section>
      <section role="field" xreflabel="NETWORKADAPTER_TYPE" xml:id="org.osgi.service.networkadapter.NetworkAdapter.NETWORKADAPTER_TYPE">
         <title>public static final String NETWORKADAPTER_TYPE = "networkAdapter.type"</title>
         <para>
The key string of "networkAdapter.type" service property.
 </para>
         <para>
 Network Interface Type is specified.</para>
      </section>
      <section role="field" xreflabel="WAN" xml:id="org.osgi.service.networkadapter.NetworkAdapter.WAN">
         <title>public static final String WAN = "WAN"</title>
         <para>
The string of network interface type which means the network interface to
 connect to an external network (i.e. Internet).
   </para>
      </section>
      <section role="method" xreflabel="getDisplayName()" xml:id="org.osgi.service.networkadapter.NetworkAdapter.getDisplayName--">
         <title>public String getDisplayName()</title>
         <para role="description">
Returns the network interface display name of
 "networkAdapter.displayname" service property value.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Network Interface display name, or null if
         "networkAdapter.displayname" service property value is empty.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getHardwareAddress()" xml:id="org.osgi.service.networkadapter.NetworkAdapter.getHardwareAddress--">
         <title>public byte[] getHardwareAddress()</title>
         <para role="description">
Returns the MAC address of "networkAdapter.hardwareAddress" service
 property value.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Hardware Address, or null if "networkAdapter.hardwareAddress"
         service property value is empty.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMTU()" xml:id="org.osgi.service.networkadapter.NetworkAdapter.getMTU--">
         <title>public int getMTU() throws SocketException</title>
         <para role="description">
Returns the Maximum Transmission Unit (MTU) of this interface.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The value of the MTU for that interface.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SocketException</code>– If an I/O error occurs.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getName()" xml:id="org.osgi.service.networkadapter.NetworkAdapter.getName--">
         <title>public String getName()</title>
         <para role="description">
Returns the network interface name of "networkAdapter.name" service
 property value.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Network Interface Name, or null if "networkAdapter.name" service
         property value is empty.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getNetworkAdapterType()" xml:id="org.osgi.service.networkadapter.NetworkAdapter.getNetworkAdapterType--">
         <title>public String getNetworkAdapterType()</title>
         <para role="description">
Returns the network interface type of "networkAdapter.type" service
 property value.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Network Interface Type, or null if "networkAdapter.type" service
         property value is empty.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isLoopback()" xml:id="org.osgi.service.networkadapter.NetworkAdapter.isLoopback--">
         <title>public boolean isLoopback() throws SocketException</title>
         <para role="description">
Returns whether a network interface is a loopback interface.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if the interface is a loopback interface.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SocketException</code>– If an I/O error occurs.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isPointToPoint()" xml:id="org.osgi.service.networkadapter.NetworkAdapter.isPointToPoint--">
         <title>public boolean isPointToPoint() throws SocketException</title>
         <para role="description">
Returns whether a network interface is a point to point interface.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if the interface is a point to point interface.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SocketException</code>– If an I/O error occurs.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isUp()" xml:id="org.osgi.service.networkadapter.NetworkAdapter.isUp--">
         <title>public boolean isUp() throws SocketException</title>
         <para role="description">
Returns whether a network interface is up and running.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if the interface is up and running.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SocketException</code>– If an I/O error occurs.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isVirtual()" xml:id="org.osgi.service.networkadapter.NetworkAdapter.isVirtual--">
         <title>public boolean isVirtual()</title>
         <para role="description">
Returns whether this interface is a virtual interface (also called
 subinterface). Virtual interfaces are, on some systems, interfaces
 created as a child of a physical interface and given different settings
 (like address or MTU). Usually the name of the interface will the name of
 the parent followed by a colon (:) and a number identifying the child
 since there can be several virtual interfaces attached to a single
 physical interface.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if this interface is a virtual interface.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="supportsMulticast()" xml:id="org.osgi.service.networkadapter.NetworkAdapter.supportsMulticast--">
         <title>public boolean supportsMulticast() throws SocketException</title>
         <para role="description">
Returns whether a network interface supports multicasting or not.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if the interface supports Multicasting.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SocketException</code>– If an I/O error occurs.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="NetworkAddress" xml:id="org.osgi.service.networkadapter.NetworkAddress">
      <title>public interface NetworkAddress</title>
      <para>
This interface represents an IP address information.
 
 </para>
      <para>
 NetworkAddress interface provides information of IP addresses available in
 which execution environment on a Network Interface Information Service bundle
 is running. IP address information service is set the following information
 as service property.
 
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.networkadapter.NetworkAddress.NETWORKADAPTER_TYPE">NETWORKADAPTER_TYPE</link> : Network Interface Type</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.networkadapter.NetworkAddress.IPADDRESS_VERSION">IPADDRESS_VERSION</link> : IP Address Version</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.networkadapter.NetworkAddress.IPADDRESS_SCOPE">IPADDRESS_SCOPE</link> : IP Address Scope</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.networkadapter.NetworkAddress.IPADDRESS">IPADDRESS</link> : IP Address</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.networkadapter.NetworkAddress.SUBNETMASK_LENGTH">SUBNETMASK_LENGTH</link> : Subnet Mask Length(IPv4) or Prefix
 Length(IPv6)</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.networkadapter.NetworkAddress.NETWORKADAPTER_PID">NETWORKADAPTER_PID</link> : Service PID of the NetworkAdapter service
 to which this service belongs</para>
         </listitem>
      </itemizedlist>
      <para>
 NetworkAddress service is registered with the service registry for each
 available IP address. When associated IP addresses are deleted, or the
 network interface to which the IP address is bound becomes unavailable, the
 NetworkAddress service is unregistered. When the associated IP address
 changes, NetworkAddress service is updated. The user bundle can detect the
 change of IP address by monitoring the registration or unregistering,
 updating of NetworkAddress service. Because IP addresses are bound to the
 network interface, if any, Service PID of the associated NetworkAdapter
 service and its network interface type are set to service property.
 NetworkAdapter service MUST be registered after the all associated
 NetworkAddress services are registered. On the other hand, when unregistering
 services, after associated NetworkAdapter service is unregistered,
 NetworkAddress of all related services are unregistered.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="EMPTY_INTEGER" xml:id="org.osgi.service.networkadapter.NetworkAddress.EMPTY_INTEGER">
         <title>public static final Integer EMPTY_INTEGER</title>
         <para>
The value integer of service property, when information is not available.
   </para>
      </section>
      <section role="field" xreflabel="IPADDRESS" xml:id="org.osgi.service.networkadapter.NetworkAddress.IPADDRESS">
         <title>public static final String IPADDRESS = "ipAddress"</title>
         <para>
The key string of "ipAddress" service property. IP Address is specified.
   </para>
      </section>
      <section role="field" xreflabel="IPADDRESS_SCOPE" xml:id="org.osgi.service.networkadapter.NetworkAddress.IPADDRESS_SCOPE">
         <title>public static final String IPADDRESS_SCOPE = "ipAddress.scope"</title>
         <para>
The key string of "ipAddress.scope" service property. IP Address scope is
 specified.
   </para>
      </section>
      <section role="field" xreflabel="IPADDRESS_SCOPE_GLOBAL" xml:id="org.osgi.service.networkadapter.NetworkAddress.IPADDRESS_SCOPE_GLOBAL">
         <title>public static final String IPADDRESS_SCOPE_GLOBAL = "GLOBAL"</title>
         <para>
The string of IP address scope which means global address.
 </para>
         <para>
 The global address is defined as the address other than the address
 defined in the RFC6890.</para>
      </section>
      <section role="field" xreflabel="IPADDRESS_SCOPE_HOST" xml:id="org.osgi.service.networkadapter.NetworkAddress.IPADDRESS_SCOPE_HOST">
         <title>public static final String IPADDRESS_SCOPE_HOST = "HOST"</title>
         <para>
The string of IP address scope which means "This host on this network".
 </para>
         <para>
 See RFC6890 for the definition of "This host on this network".</para>
      </section>
      <section role="field" xreflabel="IPADDRESS_SCOPE_LINKED_SCOPED_UNICAST" xml:id="org.osgi.service.networkadapter.NetworkAddress.IPADDRESS_SCOPE_LINKED_SCOPED_UNICAST">
         <title>public static final String IPADDRESS_SCOPE_LINKED_SCOPED_UNICAST = "LINKED_SCOPED_UNICAST"</title>
         <para>
The string of IP address scope which means "Linked-Scoped Unicast".
 </para>
         <para>
 See RFC6890 for the definition of "Linked-Scoped Unicast".</para>
      </section>
      <section role="field" xreflabel="IPADDRESS_SCOPE_LINKLOCAL" xml:id="org.osgi.service.networkadapter.NetworkAddress.IPADDRESS_SCOPE_LINKLOCAL">
         <title>public static final String IPADDRESS_SCOPE_LINKLOCAL = "LINKLOCAL"</title>
         <para>
The string of IP address scope which means "Link Local".
 </para>
         <para>
 See RFC6890 for the definition of "Link Local".</para>
      </section>
      <section role="field" xreflabel="IPADDRESS_SCOPE_LOOPBACK" xml:id="org.osgi.service.networkadapter.NetworkAddress.IPADDRESS_SCOPE_LOOPBACK">
         <title>public static final String IPADDRESS_SCOPE_LOOPBACK = "LOOPBACK"</title>
         <para>
The string of IP address scope which means "Loopback".
 </para>
         <para>
 See RFC6890 for the definition of "Loopback".</para>
      </section>
      <section role="field" xreflabel="IPADDRESS_SCOPE_PRIVATE_USE" xml:id="org.osgi.service.networkadapter.NetworkAddress.IPADDRESS_SCOPE_PRIVATE_USE">
         <title>public static final String IPADDRESS_SCOPE_PRIVATE_USE = "PRIVATE_USE"</title>
         <para>
The string of IP address scope which means "Private-Use Networks".
 </para>
         <para>
 See RFC6890 for the definition of "Private-Use Networks".</para>
      </section>
      <section role="field" xreflabel="IPADDRESS_SCOPE_SHARED" xml:id="org.osgi.service.networkadapter.NetworkAddress.IPADDRESS_SCOPE_SHARED">
         <title>public static final String IPADDRESS_SCOPE_SHARED = "SHARED"</title>
         <para>
The string of IP address scope which means "Shared Address Space".
 </para>
         <para>
 See RFC6890 for the definition of "Shared Address Space".</para>
      </section>
      <section role="field" xreflabel="IPADDRESS_SCOPE_UNIQUE_LOCAL" xml:id="org.osgi.service.networkadapter.NetworkAddress.IPADDRESS_SCOPE_UNIQUE_LOCAL">
         <title>public static final String IPADDRESS_SCOPE_UNIQUE_LOCAL = "UNIQUE_LOCAL"</title>
         <para>
The string of IP address scope which means "Unique-Local".
 </para>
         <para>
 See RFC6890 for the definition of "Unique-Local".</para>
      </section>
      <section role="field" xreflabel="IPADDRESS_SCOPE_UNSPECIFIED" xml:id="org.osgi.service.networkadapter.NetworkAddress.IPADDRESS_SCOPE_UNSPECIFIED">
         <title>public static final String IPADDRESS_SCOPE_UNSPECIFIED = "UNSPECIFIED"</title>
         <para>
The string of IP address scope which means "Unspecified Address".
 </para>
         <para>
 See RFC6890 for the definition of "Unspecified Address".</para>
      </section>
      <section role="field" xreflabel="IPADDRESS_VERSION" xml:id="org.osgi.service.networkadapter.NetworkAddress.IPADDRESS_VERSION">
         <title>public static final String IPADDRESS_VERSION = "ipAddress.version"</title>
         <para>
The key string of "ipAddress.version" service property. IP Address
 version is specified.
   </para>
      </section>
      <section role="field" xreflabel="IPADDRESS_VERSION_4" xml:id="org.osgi.service.networkadapter.NetworkAddress.IPADDRESS_VERSION_4">
         <title>public static final String IPADDRESS_VERSION_4 = "IPV4"</title>
         <para>
The string of IP address version which means IP address version 4.
   </para>
      </section>
      <section role="field" xreflabel="IPADDRESS_VERSION_6" xml:id="org.osgi.service.networkadapter.NetworkAddress.IPADDRESS_VERSION_6">
         <title>public static final String IPADDRESS_VERSION_6 = "IPV6"</title>
         <para>
The string of IP address version which means IP address version 6.
   </para>
      </section>
      <section role="field" xreflabel="NETWORKADAPTER_PID" xml:id="org.osgi.service.networkadapter.NetworkAddress.NETWORKADAPTER_PID">
         <title>public static final String NETWORKADAPTER_PID = "networkAdapter.pid"</title>
         <para>
The key string of "networkAdapter.pid" service property.
 </para>
         <para>
 Service PID of the interface information service to which it belongs is
 specified.</para>
      </section>
      <section role="field" xreflabel="NETWORKADAPTER_TYPE" xml:id="org.osgi.service.networkadapter.NetworkAddress.NETWORKADAPTER_TYPE">
         <title>public static final String NETWORKADAPTER_TYPE = "networkAdapter.type"</title>
         <para>
The key string of "networkAdapter.type" service property. Network
 Interface Type is specified.
   </para>
      </section>
      <section role="field" xreflabel="SUBNETMASK_LENGTH" xml:id="org.osgi.service.networkadapter.NetworkAddress.SUBNETMASK_LENGTH">
         <title>public static final String SUBNETMASK_LENGTH = "subnetmask.length"</title>
         <para>
The key string of "subnetmask.length" service property.
 </para>
         <para>
 Subnet Mask Length(IPv4) or Prefix Length(IPv6) is specified.
 <link linkend="org.osgi.service.networkadapter.NetworkAddress.EMPTY_INTEGER">EMPTY_INTEGER</link> if no length is available.</para>
      </section>
      <section role="method" xreflabel="getInetAddress()" xml:id="org.osgi.service.networkadapter.NetworkAddress.getInetAddress--">
         <title>public InetAddress getInetAddress()</title>
         <para role="description">
Returns the InetAddress object of this IP address.
 </para>
         <para>
 Returned object is created from "ipaddress" service property value.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>InetAddress, or null if "ipaddress" service property value is
         empty.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getIpAddress()" xml:id="org.osgi.service.networkadapter.NetworkAddress.getIpAddress--">
         <title>public String getIpAddress()</title>
         <para role="description">
Returns the IP address of "ipaddress" service property value.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>IP Address string, or null if "ipaddress" service property value
         is empty.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getIpAddressScope()" xml:id="org.osgi.service.networkadapter.NetworkAddress.getIpAddressScope--">
         <title>public String getIpAddressScope()</title>
         <para role="description">
Returns the IP address scope of "ipaddress.scope" service property value.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>IP Address Scope, or null if "ipaddress.scope" service property
         value is empty.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getIpAddressVersion()" xml:id="org.osgi.service.networkadapter.NetworkAddress.getIpAddressVersion--">
         <title>public String getIpAddressVersion()</title>
         <para role="description">
Returns the IP address version of "ipaddress.version" service property
 value.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>IP Address Version, or null if "ipaddress.version" service
         property value is empty.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getNetworkAdapterPid()" xml:id="org.osgi.service.networkadapter.NetworkAddress.getNetworkAdapterPid--">
         <title>public String getNetworkAdapterPid()</title>
         <para role="description">
Returns the "networkadapter.pid" service property value.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Service ID of the interface information service to which it
         belongs, or null if "networkadapter.pid" service property value
         is empty.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getNetworkAdapterType()" xml:id="org.osgi.service.networkadapter.NetworkAddress.getNetworkAdapterType--">
         <title>public String getNetworkAdapterType()</title>
         <para role="description">
Returns the network interface type of "networkAdapter.type" service
 property value.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Network Interface Type, or null if "networkAdapter.type" service
         property value is empty.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getSubnetMaskLength()" xml:id="org.osgi.service.networkadapter.NetworkAddress.getSubnetMaskLength--">
         <title>public int getSubnetMaskLength()</title>
         <para role="description">
Returns the "subnetmask.length" service property value.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Subnet Mask Length(IPv4) or Prefix Length(IPv6), or -1 if
         "subnetmask.length" service property value is empty.</para>
         </formalpara>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed><title>RFC 6890 : Special-Purpose IP Address Registries
      </title>http://www.ietf.org/rfc/rfc6890.txt, April 2013</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="144" revision="$Id: 66f9578ecbb7ec828ea2d970f4f6449533b4ebe2 $" version="5" xml:id="service.resourcemonitoring" xml:base="../144/service.resourcemonitoring.xml">
  <title>Resource Monitoring Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.resourcemonitoring-version" linkend="org.osgi.service.resourcemonitoring"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>Applications, executed on an OSGi platform, need hardware resources
    (CPU, memory, disk, storage space) and software resources (sockets,
    threads). As these resources are limited, applications have to share them
    in order to preserve system quality of service. This is a general fact in
    OSGi business cases where multiple bundles share the OSGi framework. This
    is especially the case when the framework is shared by distinct tenants,
    which are responsible for distinct set of bundles running with their own
    business logic and lifecycle.</para>

    <para>The chapter defines an API for applications to monitor hardware
    resources consumed by any set of bundles. The bundle is the smallest unit
    that can be considered as a resource context, the entity that is
    monitored. Monitored data may enable applications to take decisions on
    management actions to apply. Resource management actions are mentioned as
    examples in this chapter, for example, actions on the lifecycle of
    components, bundles, the framework and the JVM, Java threads, raise of
    exceptions.</para>
  </section>

  <section>
    <title>Essentials</title>

    <itemizedlist mark="bullet">
      <listitem>
        <para><emphasis role="italic">Monitoring</emphasis> - Bundle execution
        resource usage is monitored.</para>
      </listitem>

      <listitem>
        <para><emphasis>Granular activation</emphasis> - The resource
        monitoring service can be activated and deactivated per bundle or per
        bundle set.</para>
      </listitem>

      <listitem>
        <para><emphasis>Extensibility</emphasis> - Five resource types are
        specified (CPU, memory, disk storage, alive thread and in-use
        sockets). The list of monitored resource types is extensible and
        query-able.</para>
      </listitem>

      <listitem>
        <para><emphasis>Eventing</emphasis> - The resource monitoring service
        notifies interested entities of exceeded limits.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Entities</title>

    <itemizedlist mark="bullet">
      <listitem>
        <para><emphasis>Resource Context</emphasis> - A logical entity for
        resource accounting. A context may be related to a single bundle or a
        set of bundles.</para>
      </listitem>

      <listitem>
        <para><emphasis>System Resource Context</emphasis> - Resource context
        of the core framework.</para>
      </listitem>

      <listitem>
        <para><emphasis>Platform Resource Context</emphasis> - A Resource
        context monitoring the resource usage of the platform as a
        whole.</para>
      </listitem>

      <listitem>
        <para><emphasis>Resource Monitor</emphasis> - Monitors the usage of a
        specific resource type for a specific Resource Context. Resource
        Monitors track resource usage. They hold Resource Thresholds
        instances. Resource Monitor object implementation may depend on
        standard or proprietary JVM APIs, and on operating system
        features.</para>
      </listitem>

      <listitem>
        <para><emphasis>Resource Monitor Factory</emphasis> - A factory
        creating Resource Monitor instances for every Resource Context.</para>
      </listitem>

      <listitem>
        <para><emphasis>CPU Monitor</emphasis> - Resource Monitor used to
        monitor CPU.</para>
      </listitem>

      <listitem>
        <para><emphasis>Memory Monitor</emphasis> - Resource Monitor used to
        monitor memory.</para>
      </listitem>

      <listitem>
        <para><emphasis>Socket Monitor</emphasis> - Resource Monitor used to
        monitor socket resource.</para>
      </listitem>

      <listitem>
        <para><emphasis>Disk Storage Monitor</emphasis> - Resource Monitor for
        disk storage usage.</para>
      </listitem>

      <listitem>
        <para><emphasis>Thread Monitor</emphasis> - Resource Monitor used to
        monitor alive Java Thread objects.</para>
      </listitem>

      <listitem>
        <para><emphasis>Resource Listener</emphasis> - A Resource Listener
        receives resource threshold notifications.</para>
      </listitem>

      <listitem>
        <para><emphasis>Resource Event</emphasis> - A Resource Event defines a
        notification to be synchronously sent to Resource Listener
        instances.</para>
      </listitem>

      <listitem>
        <para><emphasis>Resource Context Listener</emphasis> - A Resource
        Context Listener receives notifications about resource context
        creation and configuration.</para>
      </listitem>

      <listitem>
        <para><emphasis>Resource Context Event</emphasis> - A Resource Context
        Event defines a notification to be sent to Resource Context Listeners
        instances.</para>
      </listitem>

      <listitem>
        <para><emphasis>Resource Monitoring Service</emphasis> - This is a
        singleton entity which manages Resource Context instances. It is used
        to create new Resource Context instances and to enumerate existing
        contexts.</para>
      </listitem>

      <listitem>
        <para><emphasis>Resource Monitoring Client</emphasis> - Makes any
        decision to ensure the quality of the service of the system. They use
        the Resource Monitoring Service to create Resource Context instances.
        It configures them by adding bundles and Resource Monitors.</para>
      </listitem>
    </itemizedlist>

    <figure xml:id="service.resourcemonitoring_bibliomixed_id_20141210_15h18_rfc_fig_2">
      <title>Resource monitoring class diagram specification.</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="3.5in" contentwidth="5.000in" fileref="service.resourcemonitoring_resource_monitoring_specification_class_diagram_rev_01.svg"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section>
    <title>Operation Summary</title>

    <para>Resource Monitoring Clients use the Resource Monitoring Service
    service to create Resource Contexts. These clients set bundles or group of
    bundles to Resource Contexts. They also request every Resource Monitor
    Factory to create Resource Monitors for a resource type. These Resource
    Monitors are associated to a single Resource Context.</para>

    <para>When activated, Resource Monitors provide the current resource usage
    per Resource Context. Then, they check whether the current resource usage
    is compatible with the thresholds held by their associated Resource
    Listeners. When one of these thresholds is violated, the related Resource
    Monitor notifies the Resource Listener holding this threshold.</para>

    <para>The Resource Monitoring Service manages the set of Resource
    Contexts. Resource Contexts are persistent between platform restarts.
    Resource Context Listeners are notified when a Resource Context is created
    or deleted or when a Resource Context configuration (that is, adding or
    removing of bundle) is updated.</para>
  </section>

  <section>
    <title>Resource Context</title>

    <para>A <xref linkend="org.osgi.service.resourcemonitoring.ResourceContext" xrefstyle="hyperlink"/> instance is a logical entity used to account
    resource usage. Every Resource Context defines a bundle scope which can be
    either a single bundle or a set of bundles. Once the bundle scope is
    defined, resources used by those bundles are monitored through a set of
    per-resource-type Resource Monitor instances.</para>

    <para>Resource Context instances are persistent. The persistence of those
    instances is directly managed by the Resource Monitoring Service
    instance.</para>

    <para>Each Resource Context is uniquely identified by a name. It can be
    retrieved through the <xref linkend="org.osgi.service.resourcemonitoring.ResourceContext.getName--" xrefstyle="hyperlink"/> method. It can not be changed, that is it is
    definitively set when the Resource Context instance is created.</para>

    <para>The Resource Context bundle scope is retrieved through the <xref linkend="org.osgi.service.resourcemonitoring.ResourceContext.getBundleIds--" xrefstyle="hyperlink"/> method. This bundle scope can be extended through
    the <xref linkend="org.osgi.service.resourcemonitoring.ResourceContext.addBundle-long-" xrefstyle="hyperlink"/> method. Bundles can also be removed from a
    Resource Context through the <xref linkend="org.osgi.service.resourcemonitoring.ResourceContext.removeBundle-long-ResourceContext-" xrefstyle="hyperlink"/> method. For this last method, a Resource Context
    instance MAY be specified in order to associate the removed bundle to
    another Resource Context instance.</para>

    <para>Resource Monitor instances are retrieved through <xref linkend="org.osgi.service.resourcemonitoring.ResourceContext.getMonitor-String-" xrefstyle="hyperlink"/> method or the <xref linkend="org.osgi.service.resourcemonitoring.ResourceContext.getMonitors--" xrefstyle="hyperlink"/> method. The list of available resource types is
    retrieved through the Resource Monitoring Service singleton
    instance.</para>

    <para>Resource Monitor instances are added to and removed from a Resource
    Context instance by calling either <xref linkend="org.osgi.service.resourcemonitoring.ResourceContext.addResourceMonitor-ResourceMonitor-" xrefstyle="hyperlink"/> method or <xref linkend="org.osgi.service.resourcemonitoring.ResourceContext.removeResourceMonitor-ResourceMonitor-" xrefstyle="hyperlink"/> method. Both methods SHOULD only be called by
    <xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitorFactory" xrefstyle="hyperlink"/> instances (see <xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitorFactory.createResourceMonitor-ResourceContext-" xrefstyle="hyperlink"/> method).</para>

    <para>A Resource Context is retrieved through the Resource Monitoring
    Service service.</para>

    <para>A Resource Context instance can be deleted through <xref linkend="org.osgi.service.resourcemonitoring.ResourceContext.removeContext-ResourceContext-" xrefstyle="hyperlink"/> method. The Resource Context input argument then
    defines a destination Resource Context instance for the bundles belonging
    to the to-be-removed Resource Context instance.</para>
  </section>

  <section>
    <title>System Resource Context</title>

    <para>The System Resource Context is the Resource Context of the execution
    environment for the running OSGi bundles. It includes the resources of
    bundle "0". It is retrieved through the Resource Monitoring Service
    service.</para>

    <para>The name of this context is “system”. See <xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService.SYSTEM_CONTEXT_NAME" xrefstyle="hyperlink"/>.</para>
  </section>

  <section>
    <title>Framework Resource Context</title>

    <para>The Framework Resource Context is a Resource Context monitoring
    resources of the platform as a whole. It is retrieved through the Resource
    Monitoring Service service. This Resource Context holds all hosted bundles
    allowing access to the whole platform resource consumption.</para>

    <para>The name of this context is “framework”. See <xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService.FRAMEWORK_CONTEXT_NAME" xrefstyle="hyperlink"/>.</para>
  </section>

  <section>
    <title>Resource Monitor</title>

    <para>A <xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitor" xrefstyle="hyperlink"/> instance monitors a resource type consumed by the
    bundles of a specific Resource Context instance.</para>

    <para>A Resource Context instance holds at most one Resource Monitor
    instance per monitor-able resource type. Resource Monitor instances are
    retrieved through their related Resource Context instance. Resource
    Monitor instances give access to their related Resource Context instance
    through a call to See <xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitor.getContext--" xrefstyle="hyperlink"/> method.</para>

    <para>The monitored resource type is retrieved through the <xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitor.getResourceType--" xrefstyle="hyperlink"/> method.</para>

    <para>The current usage of a resource consumed by a Resource Context
    instance is given through the <xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitor.getUsage--" xrefstyle="hyperlink"/> method. This method returns a Java Object to be
    casted to the appropriate Java object type depending on the Resource type.
    The next table provides the expected Java Object type for each specified
    resource type:</para>

    <table frame="all">
      <title>Table of resource types.</title>

      <tgroup align="left" cols="3" colsep="1" rowsep="1">
        <colspec colname="c1" colwidth="1*"/>

        <colspec colname="c2" colwidth="1*"/>

        <colspec colname="c3" colwidth="1*"/>

        <thead>
          <row>
            <entry>Type of Resource</entry>

            <entry>Expected Java Object type</entry>

            <entry>Value description</entry>
          </row>
        </thead>

        <tfoot>
          <row>
            <entry>Disk storage space</entry>

            <entry><code>Long</code></entry>

            <entry>Bytes on the bundle persistent storage area.</entry>
          </row>
        </tfoot>

        <tbody>
          <row>
            <entry>CPU</entry>

            <entry><code>Long</code></entry>

            <entry>Cumulative CPU time in ns.</entry>
          </row>

          <row>
            <entry>Memory</entry>

            <entry><code>Long</code></entry>

            <entry>Allocated memory in bytes.</entry>
          </row>

          <row>
            <entry>Threads</entry>

            <entry><code>Long</code></entry>

            <entry>Number of alive thread.</entry>
          </row>

          <row>
            <entry>Socket</entry>

            <entry><code>Long</code></entry>

            <entry>Number of in-use socket.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>For example, for a <xref linkend="org.osgi.service.resourcemonitoring.monitor.MemoryMonitor" xrefstyle="hyperlink"/> instance, a call to <xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitor.getUsage--" xrefstyle="hyperlink"/> returns a Long java object indicating the amount
    of memory the related Resource Context instance is consuming.</para>

    <para>A Resource Monitor instance is enabled and disabled through <xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitor.enable--" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitor.disable--" xrefstyle="hyperlink"/> methods. The state (enabled or disabled) of a
    Resource Monitor is retrieved through a call to <xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitor.isEnabled--" xrefstyle="hyperlink"/> method. Enable and disable monitoring mechanisms
    on-the-fly on localized set of bundles may be crucial for performance
    issues. See <xref linkend="service.resourcemonitoring_bibliomixed_id_20150105_11h45_1"/>.</para>

    <para>A Resource Monitor instance can also be deleted (<xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitor.delete--" xrefstyle="hyperlink"/> method). <xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitor.isDeleted--" xrefstyle="hyperlink"/> method returns true if the ResourceMonitor
    instance has been deleted.</para>

    <para>Five types of Resource Monitor are specified:</para>

    <itemizedlist mark="bullet">
      <listitem>
        <para>CPU Monitor</para>
      </listitem>

      <listitem>
        <para>Memory Monitor</para>
      </listitem>

      <listitem>
        <para>Socket Monitor</para>
      </listitem>

      <listitem>
        <para>Disk Storage Monitor</para>
      </listitem>

      <listitem>
        <para>Thread Monitor</para>
      </listitem>
    </itemizedlist>

    <para>The support of any Resource Monitor is optional. This list MAY be
    extended by the solution vendor. The list of the types that are supported
    on the OSGi platform can be computed by querying <xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitorFactory" xrefstyle="hyperlink"/> services. Resource monitoring algorithms may vary
    with factories, see <xref linkend="service.resourcemonitoring_bibliomixed_id_20150105_11h46_2"/>.
    They are out of the scope of this specification.</para>
  </section>

  <section>
    <title>Resource Monitor Factory</title>

    <para>A <xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitorFactory" xrefstyle="hyperlink"/> is a service that provides Resource Monitor
    instances of a specific resource type (for example, <xref linkend="org.osgi.service.resourcemonitoring.monitor.CPUMonitor" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.resourcemonitoring.monitor.MemoryMonitor" xrefstyle="hyperlink"/>, etc.) for every Resource Context.</para>

    <para>Every Resource Monitor Factory service is registered with the
    <code>org.osgi.resourcemonitoring.ResourceType</code> mandatory property,
    see <xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitorFactory.RESOURCE_TYPE_PROPERTY" xrefstyle="hyperlink"/>. This property indicates which type of Resource
    Monitor a Resource Monitor Factory is able to create. The type can also be
    retrieved through a call to <xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitorFactory.getType--" xrefstyle="hyperlink"/>. The type MUST be unique (two Resource Monitor
    Factory services MUST not have the same type).</para>

    <para>New Resource Monitor instances are created by a call to <xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitorFactory.createResourceMonitor-ResourceContext-" xrefstyle="hyperlink"/>. This method returns a new Resource Monitor
    instance associated to the provided Resource Context instance. The
    ResourceMonitorFactory MUST call <xref linkend="org.osgi.service.resourcemonitoring.ResourceContext.addResourceMonitor-ResourceMonitor-" xrefstyle="hyperlink"/> to associate the newly created ResourceMonitor
    with the provided ResourceContext instance. The newly created Resource
    Monitor is disabled, that is, it is initially not monitoring the Resource
    Context resource consumption. It can be activated through a call to <xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitor.enable--" xrefstyle="hyperlink"/>.</para>

    <para>Resource Monitor instances are deleted by calling <xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitor.delete--" xrefstyle="hyperlink"/> method.</para>

    <para>A Resource Monitor instance MUST only be created through its <xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitorFactory" xrefstyle="hyperlink"/>.</para>

    <para>Resource Monitor Factory instances should be only used by the
    Resource Monitoring Service singleton instance. The Resource Monitoring
    Service singleton instance performs a service lookup on all existing
    Resource Monitor Factories. It uses a Resource Monitor Factory instance
    when it has to create a new Resource Context instance and their associated
    Resource Monitor instances.</para>
  </section>

  <section>
    <title>CPU Monitor</title>

    <para>A <xref linkend="org.osgi.service.resourcemonitoring.monitor.CPUMonitor" xrefstyle="hyperlink"/> instance is a Resource Monitor used to monitor the
    CPU usage of the bundles belonging to a Resource Context.</para>

    <para>CPU usage and thresholds are expressed as a cumulative number of
    nanoseconds (long). The encapsulated value can be retrieved with the <xref linkend="org.osgi.service.resourcemonitoring.monitor.CPUMonitor.getCPUUsage--" xrefstyle="hyperlink"/> method.</para>

    <para>In case where a threshold is reached, the CPU Monitor instance
    generates an event triggering Resource Monitoring Clients defined
    corrective actions (for example, decrease thread priority).</para>
  </section>

  <section>
    <title>Memory Monitor</title>

    <para>A <xref linkend="org.osgi.service.resourcemonitoring.monitor.MemoryMonitor" xrefstyle="hyperlink"/> instance monitors and limits the memory used by
    the bundles of a Resource Context instance.</para>

    <para>Memory is accounted as bytes. Memory usage and thresholds are long
    java objects. The encapsulated value can be retrieved through the <xref linkend="org.osgi.service.resourcemonitoring.monitor.MemoryMonitor.getMemoryUsage--" xrefstyle="hyperlink"/> method.</para>

    <para>When an error threshold is reached, the next memory allocation MAY
    be prevented by the system and MAY throw a specific Exception in the
    associated context.</para>
  </section>

  <section>
    <title>Socket Monitor</title>

    <para>A <xref linkend="org.osgi.service.resourcemonitoring.monitor.SocketMonitor" xrefstyle="hyperlink"/> instance monitors and limits the number of
    existing sockets (for example, TCP, UDP) which are considered to be in use
    (for example, listening for incoming packet, bound, or sending outgoing
    packets).</para>

    <para>A Socket is considered to be in-use state when a native socket file
    descriptor is created. It leaves this state when this socket file
    descriptor is deleted.</para>

    <para>The number of in-use sockets is a long. The encapsulated value can
    be retrieved using <xref linkend="org.osgi.service.resourcemonitoring.monitor.SocketMonitor.getSocketUsage--" xrefstyle="hyperlink"/> method.</para>

    <para>When an <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.ERROR" xrefstyle="hyperlink"/> threshold is reached, the next socket file
    descriptor creation in the associated context MAY throw a
    SocketException.</para>
  </section>

  <section>
    <title>Disk Storage Monitor</title>

    <para>A <xref linkend="org.osgi.service.resourcemonitoring.monitor.DiskStorageMonitor" xrefstyle="hyperlink"/> instance monitors and limits the use of persistent
    storage within Bundle Persistent Storage Area a Resource Context (the
    bundles actually belonging to it) consumes.</para>

    <para>Disk Storage is expressed as a number of bytes of type long. The
    encapsulated value can be retrieved using <xref linkend="org.osgi.service.resourcemonitoring.monitor.DiskStorageMonitor.getUsedDiskStorage--" xrefstyle="hyperlink"/> method.</para>

    <para>An IOException MAY be thrown in the associated context when an <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.ERROR" xrefstyle="hyperlink"/> threshold is reached.</para>
  </section>

  <section>
    <title>Thread Monitor</title>

    <para>A <xref linkend="org.osgi.service.resourcemonitoring.monitor.ThreadMonitor" xrefstyle="hyperlink"/> instance monitors and limits the number of alive
    Java Thread objects for a Resource Context instance. A Thread is
    considered to be alive when it is in the <code>RUNNABLE</code>,
    <code>BLOCKED</code>, <code>WAITING</code> or <code>TIMED_WAITING</code>
    thread state.</para>

    <para>Usage and thresholds are Java int objects. The encapsulated value
    can be retrieved using <xref linkend="org.osgi.service.resourcemonitoring.monitor.ThreadMonitor.getAliveThreads--" xrefstyle="hyperlink"/> method.</para>

    <para>When an <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.ERROR" xrefstyle="hyperlink"/> threshold is reached, any further thread
    activation will be prevented in the associated context. An InternalError
    exception MAY also be thrown in the associated context.</para>
  </section>

  <section>
    <title>Resource Listener</title>

    <para>A <xref linkend="org.osgi.service.resourcemonitoring.ResourceListener" xrefstyle="hyperlink"/> receives notifications about resource usage for a
    specific Resource Context and a specific type of resource. A notification
    will be sent to a Resource Listener when one of its thresholds is
    violated.</para>

    <para>A Resource Listener holds two types of threshold:</para>

    <itemizedlist mark="bullet">
      <listitem>
        <para>A lower threshold type. This kind of threshold is reached when
        the monitored resource usage decreases below the threshold.</para>
      </listitem>

      <listitem>
        <para>An upper threshold type. An upper threshold is reached when the
        monitored resource usage exceeds this threshold.</para>
      </listitem>
    </itemizedlist>

    <para>Each of them have two levels:</para>

    <itemizedlist mark="bullet">
      <listitem>
        <para>a <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.WARNING" xrefstyle="hyperlink"/> level.</para>
      </listitem>

      <listitem>
        <para>an <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.ERROR" xrefstyle="hyperlink"/> level.</para>
      </listitem>
    </itemizedlist>

    <para>A threshold has the following state diagram, which transitions are
    associated to events:</para>

    <figure xml:id="service.resourcemonitoring_bibliomixed_id_20141211_16h06_rfc_fig_3">
      <title>Threshold state diagram.</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="3.5in" fileref="ResourceThresholdState.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>A threshold state depends on the current consumption of resource and
    the type of threshold (upper or lower threshold).</para>

    <para>A Resource Listener is registered as an OSGi service. The
    implementer must provide the two following mandatory properties:</para>

    <itemizedlist mark="bullet">
      <listitem>
        <para><xref linkend="org.osgi.service.resourcemonitoring.ResourceListener.RESOURCE_CONTEXT" xrefstyle="hyperlink"/> property – a String defining the name of
        Resource Context for which the Listener want to receive threshold
        notifications.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.resourcemonitoring.ResourceListener.RESOURCE_TYPE" xrefstyle="hyperlink"/> property – a String defining which type of
        resource the listener wants to monitor.</para>
      </listitem>
    </itemizedlist>

    <para>It also has to provide at least one of these four properties when
    registered as an OSGi service:</para>

    <itemizedlist mark="bullet">
      <listitem>
        <para><xref linkend="org.osgi.service.resourcemonitoring.ResourceListener.UPPER_WARNING_THRESHOLD" xrefstyle="hyperlink"/></para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.resourcemonitoring.ResourceListener.UPPER_ERROR_THRESHOLD" xrefstyle="hyperlink"/></para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.resourcemonitoring.ResourceListener.LOWER_WARNING_THRESHOLD" xrefstyle="hyperlink"/></para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.resourcemonitoring.ResourceListener.LOWER_ERROR_THRESHOLD" xrefstyle="hyperlink"/></para>
      </listitem>
    </itemizedlist>

    <para>These properties are mapped to the four types of threshold values a
    Resource Listener may support. The service properties are used to notify
    the associated Resource Monitor when one of these threshold values is
    modified.</para>

    <para>Threshold values can also be retrieved through a set of getter
    methods. All of these methods returns a <code>Comparable</code> object
    used by the associated Resource Monitor in order to determine the current
    state of the current usage.</para>

    <para><xref linkend="org.osgi.service.resourcemonitoring.ResourceListener.RESOURCE_CONTEXT" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.resourcemonitoring.ResourceListener.RESOURCE_TYPE" xrefstyle="hyperlink"/> properties are used by Resource Monitors to
    identify their associated Resource Listeners. Once associated, a Resource
    Monitor retrieves the threshold settings using service properties. When
    one of its thresholds is reached, the Resource Monitor calls <xref linkend="org.osgi.service.resourcemonitoring.ResourceListener.notify-ResourceEvent-" xrefstyle="hyperlink"/>.</para>

    <para>Two examples of resource consumption are explained below, first with
    in-use sockets monitoring, second with CPU monitoring. The next picture
    shows the state diagram of the number of in-use state socket over the
    time.</para>

    <figure xml:id="service.resourcemonitoring_bibliomixed_id_20141211_16h07_rfc_fig_4">
      <title>Number of in-use sockets over the time.</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="3.5in" fileref="LowerAndUpperThreshold.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>In our example, the lower warning threshold and the lower error
    threshold of the Resource Listener are respectively set to 10 and 5. When
    the number of in-use sockets decreases under 10, the usage goes from the
    <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.NORMAL" xrefstyle="hyperlink"/> state to the <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.WARNING" xrefstyle="hyperlink"/> state and the Resource Listener receives a <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.WARNING" xrefstyle="hyperlink"/> event. If the number of in-use state sockets
    decreases again and goes down to 5, the usage goes from the <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.WARNING" xrefstyle="hyperlink"/> state to the <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.ERROR" xrefstyle="hyperlink"/> state and the Resource Listener receives a <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.ERROR" xrefstyle="hyperlink"/> Resource Event.</para>

    <para>The upper threshold is also set. The upper warning threshold and the
    upper error threshold are respectively set to 100 and 1000 in-use state
    sockets. When the number of sockets reaches 100, the usage goes from the
    <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.NORMAL" xrefstyle="hyperlink"/> state to the <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.WARNING" xrefstyle="hyperlink"/> state and the Resource Listener receives a <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.WARNING" xrefstyle="hyperlink"/> Resource Event. If this number is still increasing
    and exceeds 1000, then the usage goes from the <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.WARNING" xrefstyle="hyperlink"/> state to the <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.ERROR" xrefstyle="hyperlink"/> state and the Resource Listener receives an <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.ERROR" xrefstyle="hyperlink"/> Resource Event.</para>

    <para>This is a typical use case for a Java Web server. Indeed, one of the
    most important quality of service indicator is the number of in-use state
    sockets a java web server is handling. A low number of in-use state
    sockets may indicate the java web server encounters network problems. On
    the contrary, a high number of in-use state socket may be the result of an
    external network attack or it could also indicates the java web server is
    overused and its administrator should take actions to load-balance the
    charge to another java web server instance.</para>

    <para>For other resource types, only upper thresholds may be useful. The
    next diagram shows the CPU consumption a Resource Context is using over
    the time:</para>

    <figure xml:id="service.resourcemonitoring_bibliomixed_id_20141211_16h08_rfc_fig_5">
      <title>CPU consumption (%) over the time – Upper Threshold.</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="3.5in" fileref="UpperThreshold.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>In this example, only the upper threshold is set. The upper warning
    threshold is set to 50%, the error one is set to 75%. CPU consumption
    fluctuates between 0 and 50%, the usage is in the <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.NORMAL" xrefstyle="hyperlink"/> state. Then it increases and reaches 50%. The
    usage then goes from the <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.NORMAL" xrefstyle="hyperlink"/> state to the <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.WARNING" xrefstyle="hyperlink"/> state and the Resource Listener holding the
    threshold receives a <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.WARNING" xrefstyle="hyperlink"/> Resource Event.</para>

    <para>Afterwards, CPU consumption decreases under 50%; the usage goes from
    the <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.WARNING" xrefstyle="hyperlink"/> state to the <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.NORMAL" xrefstyle="hyperlink"/> state. The related Resource listener receives a
    <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.NORMAL" xrefstyle="hyperlink"/> Resource Event.</para>

    <para>It then increases again and exceeds 50%. The usage goes to the <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.WARNING" xrefstyle="hyperlink"/> state. CPU consumption is still increasing and
    exceeds 75%. At this moment, the usage goes from the <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.WARNING" xrefstyle="hyperlink"/> state to the <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.ERROR" xrefstyle="hyperlink"/> state and the related Resource Listener receives
    an <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.ERROR" xrefstyle="hyperlink"/> Resource Event.</para>

    <para>After some seconds in the <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.ERROR" xrefstyle="hyperlink"/> state, the Resource Listener implementation stops
    the bundle in order to preserve the quality of service.</para>

    <para>The choice of the type of threshold (lower or upper, or both of
    them) depends on the type of resource and the needs of the Resource
    Monitoring Clients providing the Resource Listener. Other resources like
    the free memory may take advantage of a lower threshold.</para>
  </section>

  <section>
    <title>Resource Event</title>

    <para>A <xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent" xrefstyle="hyperlink"/> instance is an event synchronously sent to a
    Resource Listener when one of its thresholds is reached. This event is
    notified to a Resource Listener through a call to
    ResourceListener.notify(ResourceEvent).</para>

    <para>A Resource Event has a type among the following ones:</para>

    <itemizedlist mark="bullet">
      <listitem>
        <para><xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.ERROR" xrefstyle="hyperlink"/> – The resource consumption reaches either the
        upper or the lower error threshold of the Resource Listener receiving
        this event.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.WARNING" xrefstyle="hyperlink"/> – The resource consumption reaches either the
        upper or the lower warning threshold of the Resource Listener
        receiving this event.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.NORMAL" xrefstyle="hyperlink"/> – The resource consumption is back from
        warning or error state to normal state.</para>
      </listitem>
    </itemizedlist>

    <para>The Resource Listener instance analyzes this event by calling the
    following methods:</para>

    <itemizedlist mark="bullet">
      <listitem>
        <para><xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.getValue--" xrefstyle="hyperlink"/> method returns the resource consumption at the
        time when the Resource Event instance was generated.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.isUpperThreshold--" xrefstyle="hyperlink"/> method returns true if the reached threshold
        is an upper threshold type. If this method returns false, this is a
        lower threshold.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.getType--" xrefstyle="hyperlink"/> method indicates the state (WARNING, ERROR, or
        NORMAL) of the resource usage.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.resourcemonitoring.ResourceEvent.getContext--" xrefstyle="hyperlink"/> method returns the Resource Context instance
        related to this event. The Resource Listener can use it to retrieve
        the Resource Monitor instance. For example,
        <code>event.getContext().getMonitor(event.getResourceType())</code>.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Resource Context Listener</title>

    <para>A <xref linkend="org.osgi.service.resourcemonitoring.ResourceContextListener" xrefstyle="hyperlink"/> instance receives notifications about Resource
    Context lifecycle and configuration.</para>

    <para>A notification will be sent when:</para>

    <itemizedlist mark="bullet">
      <listitem>
        <para>A Resource Context is created.</para>
      </listitem>

      <listitem>
        <para>A Resource Context is updated, that is, a bundle has been added
        or removed from a Resource Context instance.</para>
      </listitem>

      <listitem>
        <para>A Resource Context is deleted.</para>
      </listitem>
    </itemizedlist>

    <para>An application which is interested in notifications has to register
    a Resource Context Listener instance as an OSGi service. The application
    may provide a set of properties at registration time to reduce the number
    of notifications a Resource Listener instance will receive. The available
    property is:</para>

    <itemizedlist mark="bullet">
      <listitem>
        <para><xref linkend="org.osgi.service.resourcemonitoring.ResourceContextListener.RESOURCE_CONTEXT" xrefstyle="hyperlink"/> property – An array of String defining the
        name of Resource Context instances. If defined, a Resource Listener
        instance will only receive notifications related to these specified
        Resource Context instances.</para>
      </listitem>
    </itemizedlist>

    <para>A Resource Context Listener instance is notified through a call to
    <xref linkend="org.osgi.service.resourcemonitoring.ResourceContextListener.notify-ResourceContextEvent-" xrefstyle="hyperlink"/> method.</para>
  </section>

  <section>
    <title>Resource Context Event</title>

    <para>A <xref linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent" xrefstyle="hyperlink"/> instance is an event sent to Resource Context
    Listener instances through a call to the <xref linkend="org.osgi.service.resourcemonitoring.ResourceContextListener.notify-ResourceContextEvent-" xrefstyle="hyperlink"/> method.</para>

    <para>A Resource Context Event has a type among the four following
    ones:</para>

    <itemizedlist mark="bullet">
      <listitem>
        <para><xref linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.RESOURCE_CONTEXT_CREATED" xrefstyle="hyperlink"/> – A new Resource Context instance has been
        created.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.RESOURCE_CONTEXT_REMOVED" xrefstyle="hyperlink"/> – A Resource Context instance has been
        deleted.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.BUNDLE_ADDED" xrefstyle="hyperlink"/> – A bundle has been added in the scope of a
        Resource Context instance.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.BUNDLE_REMOVED" xrefstyle="hyperlink"/> – A bundle has been removed from the scope of
        a Resource Context instance.</para>
      </listitem>
    </itemizedlist>

    <para>In the case of a <xref linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.RESOURCE_CONTEXT_CREATED" xrefstyle="hyperlink"/> event or a <xref linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.RESOURCE_CONTEXT_REMOVED" xrefstyle="hyperlink"/> event, a call to <xref linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.getContext--" xrefstyle="hyperlink"/> returns the targeted Resource Context
    instance.</para>

    <para>In the case of a <xref linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.BUNDLE_ADDED" xrefstyle="hyperlink"/> type or <xref linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.BUNDLE_REMOVED" xrefstyle="hyperlink"/> type, <xref linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.getBundleId--" xrefstyle="hyperlink"/> returns the id of the bundle to be added to or
    removed from. The related Resource Context instance is given by a call to
    <xref linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.getContext--" xrefstyle="hyperlink"/>.</para>
  </section>

  <section>
    <title>Resource Monitoring Service</title>

    <para>The <xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService" xrefstyle="hyperlink"/> manages the Resource Context instances. The
    Resource Monitoring Service is available through the OSGi service
    registry.</para>

    <para>This service holds the existing Resource Context instances. Resource
    Context instances are created by calling the <xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService.createContext-String-ResourceContext-" xrefstyle="hyperlink"/> method. The caller provides a context name as a
    string and optionally a template as a ResourceContext object.</para>

    <para>The list of existing Resource Context instances can be retrieved
    through the following methods:</para>

    <itemizedlist mark="bullet">
      <listitem>
        <para><xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService.getContext-String-" xrefstyle="hyperlink"/> – returns the ResourceContext with the
        specified resource context name.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService.getContext-long-" xrefstyle="hyperlink"/> – returns the ResourceContext associated to
        the provided bundle id.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService.listContext--" xrefstyle="hyperlink"/> – retrieve all existing Resource Context
        instances as an array.</para>
      </listitem>
    </itemizedlist>

    <para>The Resource Monitoring Service singleton manages the persistence of
    the Resource Context instances. The following properties are
    stored:</para>

    <itemizedlist mark="bullet">
      <listitem>
        <para>name of the Resource Context.</para>
      </listitem>

      <listitem>
        <para>list of the bundles belonging to the Resource Context.</para>
      </listitem>

      <listitem>
        <para>list of the Resource Monitor instances. For each one: the
        sampling period, and the monitoring period.</para>
      </listitem>
    </itemizedlist>

    <para>The way the Resource Monitoring Service persists the Resource
    Context instances is implementation specific. The implementer is free to
    use any file format and file location it wants. At startup, the Resource
    Monitoring Service will load the persisted Resource Context instances to
    restore the state prior to shutdown.</para>
  </section>

  <section>
    <title>Resource Monitoring Client</title>

    <para>A Resource Monitoring Client uses the Resource Monitoring Service
    singleton instance to apply Resource Monitoring policies. These entities
    MAY:</para>

    <itemizedlist mark="bullet">
      <listitem>
        <para>create and configure Resource Context instances (resource
        thresholds, bundle scope)</para>
      </listitem>

      <listitem>
        <para>take any decisions (stop a bundle, uninstall a bundle) if a
        Resource Context exceeds resource limit.</para>
      </listitem>
    </itemizedlist>

    <para>These policies are out of the scope of this specification.</para>
  </section>

  <section>
    <title>Security</title>

    <para>It is recommended that
    <code>ServicePermission[ResourceMonitoringService|ResourceMonitoringFactory|ResourceListener,
    REGISTER|GET]</code> be used sparingly and only for bundles that are
    trusted.</para>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.resourcemonitoring" xml:id="org.osgi.service.resourcemonitoring" xml:base="../../generated/javadoc/docbook/org.osgi.service.resourcemonitoring.xml">
   <title>org.osgi.service.resourcemonitoring</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.resourcemonitoring-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.resourcemonitoring-version.number">1.0</edition>
   </info>
   <para>
Resource Monitoring Package Version 1.0.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.resourcemonitoring; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.resourcemonitoring; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">
                  <code>ResourceContext</code>
               </link> - 
Logical entity for resource accounting.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent">
                  <code>ResourceContextEvent</code>
               </link> - 
A Resource Context Event instance is an event sent to Resource Context
 Listener instances through a call to
 <link linkend="org.osgi.service.resourcemonitoring.ResourceContextListener.notify-ResourceContextEvent-">ResourceContextListener.notify(ResourceContextEvent)</link> method.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.ResourceContextException">
                  <code>ResourceContextException</code>
               </link> - 
Resource Context Exception.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.ResourceContextListener">
                  <code>ResourceContextListener</code>
               </link> - 
 A <code>ResourceContextListener</code> is notified whenever:
 <itemizedlist>
                  <listitem>
                     <para>a <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link> is created or deleted.</para>
                  </listitem>
                  <listitem>
                     <para>a bundle is added or removed from a <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link>.</para>
                  </listitem>
               </itemizedlist>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.ResourceEvent">
                  <code>ResourceEvent</code>
               </link> - 
 An event is sent to a <link linkend="org.osgi.service.resourcemonitoring.ResourceListener">ResourceListener</link> when resource usage violates
 one of their thresholds.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.ResourceListener">
                  <code>ResourceListener</code>
               </link> - 
 A ResourceListener is an OSGi service which is notified when a Resource
 Context violates one of the threshold defined by the listener.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitor">
                  <code>ResourceMonitor</code>
               </link> - 
Representation of the state of a resource for a resource context.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitorException">
                  <code>ResourceMonitorException</code>
               </link> - 
Resource Monitor Exception reports an invalid usage of a monitor.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitorFactory">
                  <code>ResourceMonitorFactory</code>
               </link> - 
A Resource Monitor Factory is a service that provides Resource Monitor
 instances of a specific resource type (for example, CPUMonitor, MemoryMonitor...)
 for every Resource Context.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService">
                  <code>ResourceMonitoringService</code>
               </link> - 
It manages the Resource Context instances.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="ResourceContext" xml:id="org.osgi.service.resourcemonitoring.ResourceContext">
      <title>public interface ResourceContext</title>
      <para>
Logical entity for resource accounting. A resource context has a group of
 member bundles, and a bundle can be a member of 0 or 1 resource context.
 
 </para>
      <para>
 Resource Monitoring Clients can use the
 <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService.createContext-String-ResourceContext-">ResourceMonitoringService.createContext(String, ResourceContext)</link>
 method to create ResourceContext instances.
 
 </para>
      <para>
 Resource Monitoring Clients can use the <link linkend="org.osgi.service.resourcemonitoring.ResourceContext.getMonitor-String-">getMonitor(String)</link> method to
 get <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitor">ResourceMonitor</link> instances for the supported resource types. These
 instances can then be used to monitor the usage of the resources, or the set
 usage limits.
 
 </para>
      <para>
 ResourceContexts are retrieved through the <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService">ResourceMonitoringService</link>
 OSGi service.</para>
      <section role="method" xreflabel="addBundle(long)" xml:id="org.osgi.service.resourcemonitoring.ResourceContext.addBundle-long-">
         <title>public void addBundle(long bundleId) throws ResourceContextException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>The bundle to add to this resource context</para>
         </formalpara>
         <para role="description">
Adds a bundle to the resource context. The bundle will be a member of the
 context until it is uninstalled, or explicitly removed from the context
 with <link linkend="org.osgi.service.resourcemonitoring.ResourceContext.removeBundle-long-">removeBundle(long)</link> method or
 <link linkend="org.osgi.service.resourcemonitoring.ResourceContext.removeBundle-long-ResourceContext-">removeBundle(long, ResourceContext)</link> method.
 </para>
         <para>
 Resources previously allocated by this bundle (in another resource
 context) will not be moved to this resource context. The change applies
 only for future allocations.
 </para>
         <para>
 A <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent">ResourceContextEvent</link> with type
 <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.BUNDLE_ADDED">ResourceContextEvent.BUNDLE_ADDED</link> will be sent.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ResourceContextException</code>– For example, when the bundle can't be
         added to the ResourceContext.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="addResourceMonitor(ResourceMonitor)" xml:id="org.osgi.service.resourcemonitoring.ResourceContext.addResourceMonitor-ResourceMonitor-">
         <title>public void addResourceMonitor(ResourceMonitor resourceMonitor) throws ResourceContextException</title>
         <formalpara role="parameter">
            <title>resourceMonitor</title>
            <para>resourceMonitor instance to be added</para>
         </formalpara>
         <para role="description">
Adds a new ResourceMonitor instance monitoring resource for this resource
 context. This method should be called only by ResourceMonitorFactory
 instance.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ResourceContextException</code>– For example, when the monitor can't be
         added to the ResourceContext.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.resourcemonitoring.ResourceContext.equals-Object-">
         <title>public boolean equals(Object resourceContext)</title>
         <formalpara role="parameter">
            <title>resourceContext</title>
            <para>resource context</para>
         </formalpara>
         <para role="description">
A ResourceContext rc1 is equals to ResourceContext rc2 if rc1.getName()
 is equals to rc2.getName().
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if getName().equals(resourceContext.getName()</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getBundleIds()" xml:id="org.osgi.service.resourcemonitoring.ResourceContext.getBundleIds--">
         <title>public long[] getBundleIds()</title>
         <para role="description">
Returns the bundle identifiers belonging to this Resource Context.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An array of <link linkend="org.osgi.framework.Bundle">Bundle</link> objects, or an empty array if no
         bundles are currently members of this context</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMonitor(String)" xml:id="org.osgi.service.resourcemonitoring.ResourceContext.getMonitor-String-">
         <title>public ResourceMonitor getMonitor(String resourceType) throws ResourceContextException</title>
         <formalpara role="parameter">
            <title>resourceType</title>
            <para>The resource type, for which a resource monitor is
        requested</para>
         </formalpara>
         <para role="description">
Returns a ResourceMonitor instance for the specified resource type. If
 the <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService">ResourceMonitoringService</link> implementation does not support
 this resource type, null is returned
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A ResourceMonitor instance, or null, if this resource type is not
         supported</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ResourceContextException</code>– For example, when the monitor(s) can't
         be retrieved from the ResourceContext.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMonitors()" xml:id="org.osgi.service.resourcemonitoring.ResourceContext.getMonitors--">
         <title>public ResourceMonitor[] getMonitors() throws ResourceContextException</title>
         <para role="description">
Retrieves all the existing ResourceMonitor belonging to this context.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>an array of ResourceMonitor. May be empty if no ResourceMonitor</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ResourceContextException</code>– For example, when the monitor(s) can't
         be retrieved from the ResourceContext.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getName()" xml:id="org.osgi.service.resourcemonitoring.ResourceContext.getName--">
         <title>public String getName()</title>
         <para role="description">
Returns the name of the resource context. Resource context names are
 unique within a framework instance.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The resource context name</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.resourcemonitoring.ResourceContext.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Retrieves the hashCode value of a ResourceContext. The hashCode value of
 a ResourceContext is only based on the hashcode value of the name of the
 context.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>hashcode</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="removeBundle(long)" xml:id="org.osgi.service.resourcemonitoring.ResourceContext.removeBundle-long-">
         <title>public void removeBundle(long bundleId) throws ResourceContextException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>bundle identifier</para>
         </formalpara>
         <para role="description">
Removes the bundle identified by bundleId from the Resource Context. The
 bundle is no longer to this Resource Context.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ResourceContextException</code>– For example, when the bundle can't be
         removed from the ResourceContext.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="removeBundle(long,ResourceContext)" xml:id="org.osgi.service.resourcemonitoring.ResourceContext.removeBundle-long-ResourceContext-">
         <title>public void removeBundle(long bundleId,ResourceContext destination) throws ResourceContextException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>the identifier of the bundle to be removed from the
        Resource Context</para>
         </formalpara>
         <formalpara role="parameter">
            <title>destination</title>
            <para>A resource context in which to add the bundle, after
        removing it from this context. If no destination is provided (that
        is null), the bundle is not associated to a new Resource Context.</para>
         </formalpara>
         <para role="description">
Removes the bundle from this resource context. If a
 <code>destination</code> context is specified, the bundle will be added
 in it.
 </para>
         <para>
 Resources previously allocated by this bundle will not be removed from
 the resource context. The change applies only for future allocations.
 </para>
         <para>
 A <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent">ResourceContextEvent</link> with type
 <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.BUNDLE_REMOVED">ResourceContextEvent.BUNDLE_REMOVED</link> will be sent.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ResourceContextException</code>– For example, when the bundle can't be
         removed from the ResourceContext.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="removeContext(ResourceContext)" xml:id="org.osgi.service.resourcemonitoring.ResourceContext.removeContext-ResourceContext-">
         <title>public void removeContext(ResourceContext destination) throws ResourceContextException</title>
         <formalpara role="parameter">
            <title>destination</title>
            <para>The <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link> where the resources
        currently allocated by this resource context will be moved.</para>
         </formalpara>
         <para role="description">
Removes a resource context. All resources allocated in this resource
 context will be moved to the <code>destination</code> context. If
 <code>destination</code> is <code>null</code>, these resources will no
 longer be monitored.
 </para>
         <para>
 A <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent">ResourceContextEvent</link> with type
 <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.RESOURCE_CONTEXT_REMOVED">ResourceContextEvent.RESOURCE_CONTEXT_REMOVED</link> will be sent.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ResourceContextException</code>– For example, when the resource context
         can't be removed.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="removeResourceMonitor(ResourceMonitor)" xml:id="org.osgi.service.resourcemonitoring.ResourceContext.removeResourceMonitor-ResourceMonitor-">
         <title>public void removeResourceMonitor(ResourceMonitor resourceMonitor) throws ResourceContextException</title>
         <formalpara role="parameter">
            <title>resourceMonitor</title>
            <para>resource monitor instance to be removed</para>
         </formalpara>
         <para role="description">
Removes a ResourceMonitor instance from the context.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ResourceContextException</code>– For example, when the monitor can't be
         removed from the ResourceContext.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ResourceContextEvent" xml:id="org.osgi.service.resourcemonitoring.ResourceContextEvent">
      <title>public class ResourceContextEvent</title>
      <para>
A Resource Context Event instance is an event sent to Resource Context
 Listener instances through a call to
 <link linkend="org.osgi.service.resourcemonitoring.ResourceContextListener.notify-ResourceContextEvent-">ResourceContextListener.notify(ResourceContextEvent)</link> method.
 
 A Resource Context Event has a type among the four following ones:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.RESOURCE_CONTEXT_CREATED">RESOURCE_CONTEXT_CREATED</link> – A new Resource Context instance has
 been created.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.RESOURCE_CONTEXT_REMOVED">RESOURCE_CONTEXT_REMOVED</link> – A Resource Context instance has been
 deleted.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.BUNDLE_ADDED">BUNDLE_ADDED</link> – A bundle has been added in the scope of a
 Resource Context instance.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.BUNDLE_REMOVED">BUNDLE_REMOVED</link> – A bundle has been removed from the scope of a
 Resource Context instance.</para>
         </listitem>
      </itemizedlist>
      <section role="field" xreflabel="BUNDLE_ADDED" xml:id="org.osgi.service.resourcemonitoring.ResourceContextEvent.BUNDLE_ADDED">
         <title>public static final int BUNDLE_ADDED = 2</title>
         <para>
A bundle has been added to e <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link>
         </para>
         <para>
 The <link linkend="org.osgi.service.resourcemonitoring.ResourceContext.addBundle-long-">ResourceContext.addBundle(long)</link> method has been invoked</para>
      </section>
      <section role="field" xreflabel="BUNDLE_REMOVED" xml:id="org.osgi.service.resourcemonitoring.ResourceContextEvent.BUNDLE_REMOVED">
         <title>public static final int BUNDLE_REMOVED = 3</title>
         <para>
A bundle has been removed from a <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link>
         </para>
         <para>
            <link linkend="org.osgi.service.resourcemonitoring.ResourceContext.removeBundle-long-">ResourceContext.removeBundle(long)</link> method or
 <link linkend="org.osgi.service.resourcemonitoring.ResourceContext.removeBundle-long-ResourceContext-">ResourceContext.removeBundle(long, ResourceContext)</link> method have
 been invoked, or the bundle has been uninstalled</para>
      </section>
      <section role="field" xreflabel="RESOURCE_CONTEXT_CREATED" xml:id="org.osgi.service.resourcemonitoring.ResourceContextEvent.RESOURCE_CONTEXT_CREATED">
         <title>public static final int RESOURCE_CONTEXT_CREATED = 0</title>
         <para>
A new <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link> has been created.
 </para>
         <para>
 The
 <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService.createContext-String-ResourceContext-">ResourceMonitoringService.createContext(String, ResourceContext)</link>
 method has been invoked.</para>
      </section>
      <section role="field" xreflabel="RESOURCE_CONTEXT_REMOVED" xml:id="org.osgi.service.resourcemonitoring.ResourceContextEvent.RESOURCE_CONTEXT_REMOVED">
         <title>public static final int RESOURCE_CONTEXT_REMOVED = 1</title>
         <para>
A <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link> has been removed
 </para>
         <para>
 The <link linkend="org.osgi.service.resourcemonitoring.ResourceContext.removeContext-ResourceContext-">ResourceContext.removeContext(ResourceContext)</link> method has
 been invoked</para>
      </section>
      <section role="method" xreflabel="ResourceContextEvent(int,ResourceContext)" xml:id="org.osgi.service.resourcemonitoring.ResourceContextEvent.ResourceContextEvent-int-ResourceContext-">
         <title>public  ResourceContextEvent(int pType,ResourceContext pResourceContext)</title>
         <formalpara role="parameter">
            <title>pType</title>
            <para>event type</para>
         </formalpara>
         <formalpara role="parameter">
            <title>pResourceContext</title>
            <para>context</para>
         </formalpara>
         <para role="description">
Create a new ResourceContextEvent. This constructor should be used when
 the type of the event is either <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.RESOURCE_CONTEXT_CREATED">RESOURCE_CONTEXT_CREATED</link> or
 <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.RESOURCE_CONTEXT_REMOVED">RESOURCE_CONTEXT_REMOVED</link>.
   </para>
      </section>
      <section role="method" xreflabel="ResourceContextEvent(int,ResourceContext,long)" xml:id="org.osgi.service.resourcemonitoring.ResourceContextEvent.ResourceContextEvent-int-ResourceContext-long-">
         <title>public  ResourceContextEvent(int pType,ResourceContext pResourceContext,long pBundleId)</title>
         <formalpara role="parameter">
            <title>pType</title>
            <para>event type</para>
         </formalpara>
         <formalpara role="parameter">
            <title>pResourceContext</title>
            <para>context</para>
         </formalpara>
         <formalpara role="parameter">
            <title>pBundleId</title>
            <para>bundle</para>
         </formalpara>
         <para role="description">
Create a new ResourceContextEvent. This constructor should be used when
 the type of the event is either <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.BUNDLE_ADDED">BUNDLE_ADDED</link> or
 <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.BUNDLE_REMOVED">BUNDLE_REMOVED</link>.
   </para>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.resourcemonitoring.ResourceContextEvent.equals-Object-">
         <title>public boolean equals(Object var0)</title>
         <para/>
      </section>
      <section role="method" xreflabel="getBundleId()" xml:id="org.osgi.service.resourcemonitoring.ResourceContextEvent.getBundleId--">
         <title>public long getBundleId()</title>
         <para>
 Retrieves the identifier of the bundle being added to or removed from the
 Resource Context.
 
 </para>
         <para>
 This method returns a valid value only when <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.getType--">getType()</link> returns:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.BUNDLE_ADDED">BUNDLE_ADDED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.BUNDLE_REMOVED">BUNDLE_REMOVED</link>
               </para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the bundle id or -1 (invalid value).</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getContext()" xml:id="org.osgi.service.resourcemonitoring.ResourceContextEvent.getContext--">
         <title>public ResourceContext getContext()</title>
         <para role="description">
Retrieves the Resource Context associated to this event
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Resource Context.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.resourcemonitoring.ResourceContextEvent.getType--">
         <title>public int getType()</title>
         <para role="description">
Retrieves the type of this Resource Context Event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the type of the event. One of:
         <itemizedlist>
                  <listitem>
                     <para>
                        <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.RESOURCE_CONTEXT_CREATED">RESOURCE_CONTEXT_CREATED</link>
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.RESOURCE_CONTEXT_REMOVED">RESOURCE_CONTEXT_REMOVED</link>
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.BUNDLE_ADDED">BUNDLE_ADDED</link>
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.BUNDLE_REMOVED">BUNDLE_REMOVED</link>
                     </para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.resourcemonitoring.ResourceContextEvent.hashCode--">
         <title>public int hashCode()</title>
         <para/>
      </section>
      <section role="method" xreflabel="toString()" xml:id="org.osgi.service.resourcemonitoring.ResourceContextEvent.toString--">
         <title>public String toString()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="ResourceContextException" xml:id="org.osgi.service.resourcemonitoring.ResourceContextException">
      <title>public class ResourceContextException<?line-break?> extends Exception</title>
      <para>
Resource Context Exception.
   </para>
      <section role="method" xreflabel="ResourceContextException(String)" xml:id="org.osgi.service.resourcemonitoring.ResourceContextException.ResourceContextException-String-">
         <title>public  ResourceContextException(String msg)</title>
         <formalpara role="parameter">
            <title>msg</title>
            <para>message</para>
         </formalpara>
         <para role="description">
Create a new ResourceContextException
   </para>
      </section>
      <section role="method" xreflabel="ResourceContextException(String,Throwable)" xml:id="org.osgi.service.resourcemonitoring.ResourceContextException.ResourceContextException-String-Throwable-">
         <title>public  ResourceContextException(String msg,Throwable t)</title>
         <formalpara role="parameter">
            <title>msg</title>
            <para>message</para>
         </formalpara>
         <formalpara role="parameter">
            <title>t</title>
            <para>exception</para>
         </formalpara>
         <para role="description">
Create a new ResourceContextException
   </para>
      </section>
   </section>
   <section role="class" xreflabel="ResourceContextListener" xml:id="org.osgi.service.resourcemonitoring.ResourceContextListener">
      <title>public interface ResourceContextListener</title>
      <para>
 A <code>ResourceContextListener</code> is notified whenever:
 </para>
      <itemizedlist>
         <listitem>
            <para>a <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link> is created or deleted.</para>
         </listitem>
         <listitem>
            <para>a bundle is added or removed from a <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link>.</para>
         </listitem>
      </itemizedlist>
      <para>
 A <code>ResourceContextListener</code> is registered as an OSGi service. At
 registration time, the following property may be provided:
 </para>
      <itemizedlist>
         <listitem>
            <para>the <link linkend="org.osgi.service.resourcemonitoring.ResourceContextListener.RESOURCE_CONTEXT">RESOURCE_CONTEXT</link> property which limits the Resource Context
 for which notifications will be received. This property can be either a
 String value or an array of String. If this property is not set, the Resource
 Context Listener receives events from all the Resource Context.</para>
         </listitem>
      </itemizedlist>
      <section role="field" xreflabel="RESOURCE_CONTEXT" xml:id="org.osgi.service.resourcemonitoring.ResourceContextListener.RESOURCE_CONTEXT">
         <title>public static final String RESOURCE_CONTEXT = "resource.context"</title>
         <para>
 Property specifying the <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link>(s) for which a
 notification will be received by this listener.
 
 </para>
         <para>
 The property value is either a string (i.e the name of the
 <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link>) and an array of string (several
 <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link>).</para>
      </section>
      <section role="method" xreflabel="notify(ResourceContextEvent)" xml:id="org.osgi.service.resourcemonitoring.ResourceContextListener.notify-ResourceContextEvent-">
         <title>public void notify(ResourceContextEvent event)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>event.</para>
         </formalpara>
         <para role="description">
Notify this listener about a <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link> events.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="ResourceEvent" xml:id="org.osgi.service.resourcemonitoring.ResourceEvent">
      <title>public class ResourceEvent</title>
      <para>
 An event is sent to a <link linkend="org.osgi.service.resourcemonitoring.ResourceListener">ResourceListener</link> when resource usage violates
 one of their thresholds.
 
 </para>
      <para>
         <code>ResourceEvent</code> objects are delivered synchronously to all
 matching <link linkend="org.osgi.service.resourcemonitoring.ResourceListener">ResourceListener</link> services. A typed code is used to identify
 the event.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.resourcemonitoring.ResourceListener">ResourceListener</link>
         </para>
      </formalpara>
      <section role="field" xreflabel="ERROR" xml:id="org.osgi.service.resourcemonitoring.ResourceEvent.ERROR">
         <title>public static final int ERROR = 2</title>
         <para>
Type of ResourceEvent indicating a threshold goes to the ERROR state.
   </para>
      </section>
      <section role="field" xreflabel="NORMAL" xml:id="org.osgi.service.resourcemonitoring.ResourceEvent.NORMAL">
         <title>public static final int NORMAL = 0</title>
         <para>
Type of ResourceEvent indicating a threshold goes to the NORMAL state.
   </para>
      </section>
      <section role="field" xreflabel="WARNING" xml:id="org.osgi.service.resourcemonitoring.ResourceEvent.WARNING">
         <title>public static final int WARNING = 1</title>
         <para>
Type of ResourceEvent indicating a threshold goes to the WARNING state.
   </para>
      </section>
      <section role="method" xreflabel="ResourceEvent(int,ResourceContext,boolean,Comparable)" xml:id="org.osgi.service.resourcemonitoring.ResourceEvent.ResourceEvent-int-ResourceContext-boolean-Comparable-">
         <title>public  ResourceEvent(int pType,ResourceContext pContext,boolean pIsUpperThreshold,Comparable pValue)</title>
         <formalpara role="parameter">
            <title>pType</title>
            <para>the event type</para>
         </formalpara>
         <formalpara role="parameter">
            <title>pContext</title>
            <para>the resource context</para>
         </formalpara>
         <formalpara role="parameter">
            <title>pIsUpperThreshold</title>
            <para>whether it is an upper threshold</para>
         </formalpara>
         <formalpara role="parameter">
            <title>pValue</title>
            <para>the value</para>
         </formalpara>
         <para role="description">
Creates a new ResourceEvent.
   </para>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.resourcemonitoring.ResourceEvent.equals-Object-">
         <title>public boolean equals(Object var0)</title>
         <para/>
      </section>
      <section role="method" xreflabel="getContext()" xml:id="org.osgi.service.resourcemonitoring.ResourceEvent.getContext--">
         <title>public ResourceContext getContext()</title>
         <para role="description">
Returns the resource context that caused the event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The resource context that caused the event.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.resourcemonitoring.ResourceEvent.getType--">
         <title>public int getType()</title>
         <para role="description">
Returns the event type. The type values are:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.resourcemonitoring.ResourceEvent.NORMAL">NORMAL</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.resourcemonitoring.ResourceEvent.WARNING">WARNING</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.resourcemonitoring.ResourceEvent.ERROR">ERROR</link>
               </para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The event type</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getValue()" xml:id="org.osgi.service.resourcemonitoring.ResourceEvent.getValue--">
         <title>public Comparable getValue()</title>
         <para role="description">
Returns the resource consumption value. Relevant only for event types
 <link linkend="org.osgi.service.resourcemonitoring.ResourceEvent.NORMAL">NORMAL</link>, <link linkend="org.osgi.service.resourcemonitoring.ResourceEvent.WARNING">WARNING</link> and <link linkend="org.osgi.service.resourcemonitoring.ResourceEvent.ERROR">ERROR</link>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the resource consumption value, or null if a resource monitor is
         not relevant.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.resourcemonitoring.ResourceEvent.hashCode--">
         <title>public int hashCode()</title>
         <para/>
      </section>
      <section role="method" xreflabel="isUpperThreshold()" xml:id="org.osgi.service.resourcemonitoring.ResourceEvent.isUpperThreshold--">
         <title>public boolean isUpperThreshold()</title>
         <para role="description">
Returns true if the threshold triggering this event is an upper
 threshold. This method is only used when <link linkend="org.osgi.service.resourcemonitoring.ResourceEvent.getType--">getType()</link> returns
 <link linkend="org.osgi.service.resourcemonitoring.ResourceEvent.NORMAL">NORMAL</link>, <link linkend="org.osgi.service.resourcemonitoring.ResourceEvent.WARNING">WARNING</link> or <link linkend="org.osgi.service.resourcemonitoring.ResourceEvent.ERROR">ERROR</link>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if it is an upper threshold.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="toString()" xml:id="org.osgi.service.resourcemonitoring.ResourceEvent.toString--">
         <title>public String toString()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="ResourceListener" xml:id="org.osgi.service.resourcemonitoring.ResourceListener">
      <title>public interface ResourceListener</title>
      <para>
 A ResourceListener is an OSGi service which is notified when a Resource
 Context violates one of the threshold defined by the listener.
 </para>
      <para>
 Every ResourceListener is associated to a specific Resource Context and a
 specific Resource type. It defines two types of thresholds: a lower and a
 upper. A lower threshold is reached when the resource usage decreases below
 the threshold. On the contrary, an upper threshold is reached when the
 resource usage exceeds the threshold.
 </para>
      <para>
 Both lower or upper threshold are two levels: a warning level and error
 level. The warning level indicates the resource usage becomes to be critical
 but are still acceptable. The error level indicates the resource usage is now
 critical for the overall system and actions should be taken.
 </para>
      <para>
 A Resource Listener is registered with these two mandatory properties:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.ResourceListener.RESOURCE_CONTEXT">RESOURCE_CONTEXT</link> which defines the ResourceContext associated to
 this Listener</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.ResourceListener.RESOURCE_TYPE">RESOURCE_TYPE</link> which the type of resource</para>
         </listitem>
      </itemizedlist>
      <para>
 The next optional properties are used to specify threshold values. A
 ResourceListener must at least provides one of them:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.ResourceListener.UPPER_WARNING_THRESHOLD">ResourceListener.UPPER_WARNING_THRESHOLD</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.ResourceListener.UPPER_ERROR_THRESHOLD">ResourceListener.UPPER_ERROR_THRESHOLD</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.ResourceListener.LOWER_WARNING_THRESHOLD">ResourceListener.LOWER_WARNING_THRESHOLD</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.ResourceListener.LOWER_ERROR_THRESHOLD">ResourceListener.LOWER_ERROR_THRESHOLD</link>
            </para>
         </listitem>
      </itemizedlist>
      <para>
 These threshold values can also be retrieved through methods.
 </para>
      <para>
 Resource Listeners are associated to a Resource Context and a Resource
 Monitor based on the <link linkend="org.osgi.service.resourcemonitoring.ResourceListener.RESOURCE_CONTEXT">RESOURCE_CONTEXT</link> property and the
 <link linkend="org.osgi.service.resourcemonitoring.ResourceListener.RESOURCE_TYPE">RESOURCE_TYPE</link> property (both of them are mandatory at registration
 time).
 </para>
      <para>
 Once associated, the ResourceMonitor gets the threshold values through the
 service properties (i.e <link linkend="org.osgi.service.resourcemonitoring.ResourceListener.UPPER_WARNING_THRESHOLD">UPPER_WARNING_THRESHOLD</link>,
 <link linkend="org.osgi.service.resourcemonitoring.ResourceListener.UPPER_ERROR_THRESHOLD">UPPER_ERROR_THRESHOLD</link>, <link linkend="org.osgi.service.resourcemonitoring.ResourceListener.LOWER_WARNING_THRESHOLD">LOWER_WARNING_THRESHOLD</link> and
 <link linkend="org.osgi.service.resourcemonitoring.ResourceListener.LOWER_WARNING_THRESHOLD">LOWER_WARNING_THRESHOLD</link>) and store them. Once it detects a new
 resource consumption, it compares the new resource usage value with the
 thresholds provided by the Resource Listener. If the resource usage violates
 one of these thresholds, the Resource Monitor notifies the
 <link linkend="org.osgi.service.resourcemonitoring.ResourceListener">ResourceListener</link> through a call to <link linkend="org.osgi.service.resourcemonitoring.ResourceListener.notify-ResourceEvent-">notify(ResourceEvent)</link>.
 </para>
      <para>
 A ResourceMonitor tracks threshold value modification by using a
 <link linkend="org.osgi.framework.ServiceListener">ServiceListener</link>.</para>
      <section role="field" xreflabel="LOWER_ERROR_THRESHOLD" xml:id="org.osgi.service.resourcemonitoring.ResourceListener.LOWER_ERROR_THRESHOLD">
         <title>public static final String LOWER_ERROR_THRESHOLD = "lower.error.threshold"</title>
         <para>
Optional property defining the value of the lower error threshold.
   </para>
      </section>
      <section role="field" xreflabel="LOWER_WARNING_THRESHOLD" xml:id="org.osgi.service.resourcemonitoring.ResourceListener.LOWER_WARNING_THRESHOLD">
         <title>public static final String LOWER_WARNING_THRESHOLD = "lower.warning.threshold"</title>
         <para>
Optional property defining the value of the lower warning threshold.
   </para>
      </section>
      <section role="field" xreflabel="RESOURCE_CONTEXT" xml:id="org.osgi.service.resourcemonitoring.ResourceListener.RESOURCE_CONTEXT">
         <title>public static final String RESOURCE_CONTEXT = "resource.context"</title>
         <para>
Mandatory property specifying the Resource Context associated with the
 listener.
   </para>
      </section>
      <section role="field" xreflabel="RESOURCE_TYPE" xml:id="org.osgi.service.resourcemonitoring.ResourceListener.RESOURCE_TYPE">
         <title>public static final String RESOURCE_TYPE = "resource.type"</title>
         <para>
Mandatory property defining the type of Resource (i.e the
 ResourceMonitor) associated to this Listener.
   </para>
      </section>
      <section role="field" xreflabel="UPPER_ERROR_THRESHOLD" xml:id="org.osgi.service.resourcemonitoring.ResourceListener.UPPER_ERROR_THRESHOLD">
         <title>public static final String UPPER_ERROR_THRESHOLD = "upper.error.threshold"</title>
         <para>
Optional property defining the value of the upper error threshold.
   </para>
      </section>
      <section role="field" xreflabel="UPPER_WARNING_THRESHOLD" xml:id="org.osgi.service.resourcemonitoring.ResourceListener.UPPER_WARNING_THRESHOLD">
         <title>public static final String UPPER_WARNING_THRESHOLD = "upper.warning.threshold"</title>
         <para>
Optional property defining the value of the upper warning threshold.
   </para>
      </section>
      <section role="method" xreflabel="getLowerErrorThreshold()" xml:id="org.osgi.service.resourcemonitoring.ResourceListener.getLowerErrorThreshold--">
         <title>public Comparable getLowerErrorThreshold()</title>
         <para role="description">
Retrieves the lower error threshold value set by the listener. If the
 resource usage decreases under this threshold, the
 <link linkend="org.osgi.service.resourcemonitoring.ResourceListener.notify-ResourceEvent-">notify(ResourceEvent)</link> will be called. The provided
 <link linkend="org.osgi.service.resourcemonitoring.ResourceEvent">ResourceEvent</link> then indicates the ERROR state is reached.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a comparable object or null if no threshold is set.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getLowerWarningThreshold()" xml:id="org.osgi.service.resourcemonitoring.ResourceListener.getLowerWarningThreshold--">
         <title>public Comparable getLowerWarningThreshold()</title>
         <para role="description">
Retrieves the lower warning threshold value set by the listener. If the
 resource usage decreases under this threshold value, the
 <link linkend="org.osgi.service.resourcemonitoring.ResourceListener.notify-ResourceEvent-">notify(ResourceEvent)</link> will be called. The provided ResourceEvent
 then indicates the WARNING state is reached.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a comparable object or null if no threshold is set.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getUpperErrorThreshold()" xml:id="org.osgi.service.resourcemonitoring.ResourceListener.getUpperErrorThreshold--">
         <title>public Comparable getUpperErrorThreshold()</title>
         <para role="description">
Retrieves the upper error threshold value set by this listener. If the
 resource usage exceeds this threshold, the <link linkend="org.osgi.service.resourcemonitoring.ResourceListener.notify-ResourceEvent-">notify(ResourceEvent)</link>
 will be called. The provided <link linkend="org.osgi.service.resourcemonitoring.ResourceEvent">ResourceEvent</link> then indicates the
 ERROR state is reached.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a comparable object or null if no threshold is reached.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getUpperWarningThreshold()" xml:id="org.osgi.service.resourcemonitoring.ResourceListener.getUpperWarningThreshold--">
         <title>public Comparable getUpperWarningThreshold()</title>
         <para role="description">
Retrieves the upper warning threshold value set by this listener. If the
 resource usage exceeds this threshold, the <link linkend="org.osgi.service.resourcemonitoring.ResourceListener.notify-ResourceEvent-">notify(ResourceEvent)</link>
 method will be called. The provided <link linkend="org.osgi.service.resourcemonitoring.ResourceEvent">ResourceEvent</link> then indicates
 the WARNING state is reached.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a comparable object or null if no threshold is reached.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="notify(ResourceEvent)" xml:id="org.osgi.service.resourcemonitoring.ResourceListener.notify-ResourceEvent-">
         <title>public void notify(ResourceEvent event)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>The <link linkend="org.osgi.service.resourcemonitoring.ResourceEvent">ResourceEvent</link> object</para>
         </formalpara>
         <para role="description">
Receives a resource monitoring notification
   </para>
      </section>
   </section>
   <section role="class" xreflabel="ResourceMonitor" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitor">
      <title>public interface ResourceMonitor</title>
      <para>
Representation of the state of a resource for a resource context.
 </para>
      <para>
 ResourceMonitor objects are returned by the
 <link linkend="org.osgi.service.resourcemonitoring.ResourceContext.getMonitor-String-">ResourceContext.getMonitor(String)</link> method.
 </para>
      <para>
 The <code>ResourceMonitor</code> object may be used to:
 </para>
      <itemizedlist>
         <listitem>
            <para>Enable/Disable the monitoring of the corresponding resource type for the
 corresponding resource context</para>
         </listitem>
         <listitem>
            <para>View the current usage of the resource by this resource context</para>
         </listitem>
      </itemizedlist>
      <para>
 A resource monitor can have a sampling period, a monitored period, or both.
 For example, for CPU monitoring, the resource monitor implementation can get
 the CPU usage of the running threads once per minute, and calculate the CPU
 usage per context in percentages based on the last ten such measurements.
 This could make a 60 000 milliseconds sampling period, and a 600 000
 milliseconds monitored period.</para>
      <section role="method" xreflabel="delete()" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitor.delete--">
         <title>public void delete() throws ResourceMonitorException</title>
         <para role="description">
Disable and delete this instance of Resource Monitor. This method MUST
 update the list of ResourceMonitor instances hold by the Resource Context
 (getContext().removeMonitor(this)).
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ResourceMonitorException</code>– For example, when the monitor can't be
         removed from the ResourceContext.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="disable()" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitor.disable--">
         <title>public void disable() throws ResourceMonitorException</title>
         <para role="description">
Disable the monitoring of this resource type for the resource context
 associated with this monitor instance. The resource usage is not
 available until it is enabled again.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ResourceMonitorException</code>– if the ResourceMonitor instance has been
         previously deleted   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="enable()" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitor.enable--">
         <title>public void enable() throws ResourceMonitorException</title>
         <para role="description">
Enable the monitoring of this resource type for the resource context
 associated with this monitor instance. This method SHOULD also update the
 current resource consumption value (to take into account all previous
 resource allocations and releases occurred during the time the monitor
 was disabled).
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ResourceMonitorException</code>– if the ResourceMonitor instance can not
         be enabled (for example, some MemoryMonitor implementations
         evaluate the memory consumption by tracking memory allocation
         operation at runtime. This kind of Monitor can not get
         instantaneous memory value. Such Monitor instances need to be
         enabled at starting time.). if the ResourceMonitor instance has
         been previously deleted   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitor.equals-Object-">
         <title>public boolean equals(Object resourceMonitor)</title>
         <formalpara role="parameter">
            <title>resourceMonitor</title>
            <para/>
         </formalpara>
         <para role="description">
Checks if resourceMonitor is equals to the current instance. A
 ResourceMonitor rm1 is equals to a ResourceMonitor rm2 if
 rm1.getContext().equals(rm2.getContext()) and
 r1.getType().equals(rm2.getType()).
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if the current instance is equals to the provided
         resourceMonitor</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getContext()" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitor.getContext--">
         <title>public ResourceContext getContext()</title>
         <para role="description">
Returns the resource context that this monitor belongs to
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The associated <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMonitoredPeriod()" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitor.getMonitoredPeriod--">
         <title>public long getMonitoredPeriod()</title>
         <para role="description">
Returns the time period for which the usage of this resource type is
 monitored.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The monitored period in milliseconds, or <code>-1</code> if a
         monitored period is not relevant for this resource type.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getResourceType()" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitor.getResourceType--">
         <title>public String getResourceType()</title>
         <para role="description">
The name of the resource type that this monitor represents
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of the monitored resource type</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getSamplingPeriod()" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitor.getSamplingPeriod--">
         <title>public long getSamplingPeriod()</title>
         <para role="description">
Returns the sampling period for this resource type.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The sampling period in milliseconds, or <code>-1</code> if a
         sampling period is not relevant for this resource type.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getUsage()" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitor.getUsage--">
         <title>public Comparable getUsage() throws ResourceMonitorException</title>
         <para role="description">
Returns an object representing the current usage of this resource type by
 this resource context.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The current usage of this resource type.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ResourceMonitorException</code>– if the ResourceMonitor instance is not
         enabled.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitor.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Retrieves the hashCode value of this ResourceMonitor. The hashCode value
 is based on the hashCode value of the associated ResourceContext and the
 hashCode value of the type.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>hashcode</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isDeleted()" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitor.isDeleted--">
         <title>public boolean isDeleted()</title>
         <para role="description">
Returns true if the ResourceMonitor instance has been deleted, that is the
 <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitor.delete--">delete()</link> method has been called previously.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if deleted.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isEnabled()" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitor.isEnabled--">
         <title>public boolean isEnabled()</title>
         <para role="description">
Checks if the monitoring for this resource type is enabled for this
 resource context
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if monitoring for this resource type is enabled
         for this context, <code>false</code> otherwise</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ResourceMonitorException" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitorException">
      <title>public class ResourceMonitorException<?line-break?> extends Exception</title>
      <para>
Resource Monitor Exception reports an invalid usage of a monitor.
   </para>
      <section role="method" xreflabel="ResourceMonitorException(String)" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitorException.ResourceMonitorException-String-">
         <title>public  ResourceMonitorException(String msg)</title>
         <formalpara role="parameter">
            <title>msg</title>
            <para>message</para>
         </formalpara>
         <para role="description">
Create a new ResourceMonitorException
   </para>
      </section>
      <section role="method" xreflabel="ResourceMonitorException(String,Throwable)" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitorException.ResourceMonitorException-String-Throwable-">
         <title>public  ResourceMonitorException(String msg,Throwable t)</title>
         <formalpara role="parameter">
            <title>msg</title>
            <para>message</para>
         </formalpara>
         <formalpara role="parameter">
            <title>t</title>
            <para/>
         </formalpara>
         <para role="description">
Create a new ResourceMonitorException
   </para>
      </section>
   </section>
   <section role="class" xreflabel="ResourceMonitorFactory" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitorFactory">
      <title>public interface ResourceMonitorFactory</title>
      <para>
A Resource Monitor Factory is a service that provides Resource Monitor
 instances of a specific resource type (for example, CPUMonitor, MemoryMonitor...)
 for every Resource Context.
 
 Every Resource Monitor Factory service is registered with the
 <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitorFactory.RESOURCE_TYPE_PROPERTY">RESOURCE_TYPE_PROPERTY</link> mandatory property. This property indicates
 which type of Resource Monitor a Resource Monitor Factory is able to create.
 The type can also be retrieved through a call to <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitorFactory.getType--">getType()</link>. The type
 MUST be unique (two Resource Monitor Factory instances MUST not have the same
 type).
   </para>
      <section role="field" xreflabel="RESOURCE_TYPE_PROPERTY" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitorFactory.RESOURCE_TYPE_PROPERTY">
         <title>public static final String RESOURCE_TYPE_PROPERTY = "org.osgi.resourcemonitoring.ResourceType"</title>
         <para>
Resource type property. The value is of type String. For example,
 <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService.RES_TYPE_CPU">ResourceMonitoringService.RES_TYPE_CPU</link>
         </para>
      </section>
      <section role="method" xreflabel="createResourceMonitor(ResourceContext)" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitorFactory.createResourceMonitor-ResourceContext-">
         <title>public ResourceMonitor createResourceMonitor(ResourceContext resourceContext) throws ResourceMonitorException</title>
         <formalpara role="parameter">
            <title>resourceContext</title>
            <para>ResourceContext instance associated with the newly
        created ResourceMonitor instance</para>
         </formalpara>
         <para role="description">
Creates a new ResourceMonitor instance. This instance is associated with
 the ResourceContext instance provided as argument (
 <link linkend="org.osgi.service.resourcemonitoring.ResourceContext.addResourceMonitor-ResourceMonitor-">ResourceContext.addResourceMonitor(ResourceMonitor)</link> is called by
 the factory). The newly ResourceMonitor instance is disabled. It can be
 enabled by calling <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitor.enable--">ResourceMonitor.enable()</link>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a ResourceMonitor instance</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ResourceMonitorException</code>– If the factory is unable to create a
         ResourceMonitor For example, when a ResourceMonitor of this type
         already exists for this ResourceContext   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitorFactory.getType--">
         <title>public String getType()</title>
         <para role="description">
Returns the type of ResourceMonitor instance this factory is able to
 create.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>factory type</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ResourceMonitoringService" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitoringService">
      <title>public interface ResourceMonitoringService</title>
      <para>
It manages the Resource Context instances. It is available through the OSGi
 service registry.
 
 This service holds the existing Resource Context instances. Resource Context
 instances are created by calling the
 <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService.createContext-String-ResourceContext-">createContext(String, ResourceContext)</link> method.
   </para>
      <section role="field" xreflabel="FRAMEWORK_CONTEXT_NAME" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitoringService.FRAMEWORK_CONTEXT_NAME">
         <title>public static final String FRAMEWORK_CONTEXT_NAME = "framework"</title>
         <para>
The name of the special, optional resource context, representing the
 whole OSGi framework.
   </para>
      </section>
      <section role="field" xreflabel="RES_TYPE_CPU" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitoringService.RES_TYPE_CPU">
         <title>public static final String RES_TYPE_CPU = "resource.type.cpu"</title>
         <para>
The name of the CPU resource type, used to monitor and control the CPU
 time used by a resource context. <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService">ResourceMonitoringService</link>
 implementations must create <link linkend="org.osgi.service.resourcemonitoring.monitor.CPUMonitor">CPUMonitor</link> instances for this
 resource type.
   </para>
      </section>
      <section role="field" xreflabel="RES_TYPE_DISK_STORAGE" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitoringService.RES_TYPE_DISK_STORAGE">
         <title>public static final String RES_TYPE_DISK_STORAGE = "resource.type.disk.storage"</title>
         <para>
The name of the disk storage resource type, used to monitor and control
 the size of the persistent storage used by a resource context.
 <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService">ResourceMonitoringService</link> implementations must create
 <link linkend="org.osgi.service.resourcemonitoring.monitor.DiskStorageMonitor">DiskStorageMonitor</link> instances for this resource type.
   </para>
      </section>
      <section role="field" xreflabel="RES_TYPE_MEMORY" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitoringService.RES_TYPE_MEMORY">
         <title>public static final String RES_TYPE_MEMORY = "resource.type.memory"</title>
         <para>
The name of the memory resource type, used to monitor and control the
 size of the java heap used by a resource context.
 <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService">ResourceMonitoringService</link> implementations must create
 <link linkend="org.osgi.service.resourcemonitoring.monitor.MemoryMonitor">MemoryMonitor</link> instances for this resource type.
   </para>
      </section>
      <section role="field" xreflabel="RES_TYPE_SOCKET" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitoringService.RES_TYPE_SOCKET">
         <title>public static final String RES_TYPE_SOCKET = "resource.type.socket"</title>
         <para>
The name of the socket resource type, used to monitor and control the
 number of existing sockets used by a resource context.
 <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService">ResourceMonitoringService</link> implementations must create
 <link linkend="org.osgi.service.resourcemonitoring.monitor.SocketMonitor">SocketMonitor</link> instances for this resource type.
   </para>
      </section>
      <section role="field" xreflabel="RES_TYPE_THREADS" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitoringService.RES_TYPE_THREADS">
         <title>public static final String RES_TYPE_THREADS = "resource.type.threads"</title>
         <para>
The name of the threads resource type, used to monitor and control the
 number of threads created by a resource context.
 <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService">ResourceMonitoringService</link> implementations must create
 <link linkend="org.osgi.service.resourcemonitoring.monitor.ThreadMonitor">ThreadMonitor</link> instances for this resource type.
   </para>
      </section>
      <section role="field" xreflabel="SYSTEM_CONTEXT_NAME" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitoringService.SYSTEM_CONTEXT_NAME">
         <title>public static final String SYSTEM_CONTEXT_NAME = "system"</title>
         <para>
The name of the Resource Context associated with System bundle (bundle
 0).
   </para>
      </section>
      <section role="method" xreflabel="createContext(String,ResourceContext)" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitoringService.createContext-String-ResourceContext-">
         <title>public ResourceContext createContext(String name,ResourceContext template)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name identifying the context. Names must be unique within
        the framework instance.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>template</title>
            <para>If a template is provided, the new resource context will
        inherit all resource monitoring settings (enabled monitors,
        thresholds) from the template.</para>
         </formalpara>
         <para role="description">
Creates a new <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link>.
 </para>
         <para>
 A <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent">ResourceContextEvent</link> with type
 <link linkend="org.osgi.service.resourcemonitoring.ResourceContextEvent.RESOURCE_CONTEXT_CREATED">ResourceContextEvent.RESOURCE_CONTEXT_CREATED</link> will be sent.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link> instance.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if a problem occurred, for example if the name
         is already used.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getContext(String)" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitoringService.getContext-String-">
         <title>public ResourceContext getContext(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The resource context name</para>
         </formalpara>
         <para role="description">
Returns the context with the specified resource context name.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An existing <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link> with the specified name, or
         null if such a context doesn't exist</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getContext(long)" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitoringService.getContext-long-">
         <title>public ResourceContext getContext(long bundleId)</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>bundle identifier</para>
         </formalpara>
         <para role="description">
Returns the <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link> associated to the provided bundle id.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link> associated to bundle b or null if the
         bundle b does not belong to a Resource Context.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getSupportedTypes()" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitoringService.getSupportedTypes--">
         <title>public String[] getSupportedTypes()</title>
         <para role="description">
Returns a list with the supported resource type names.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An array containing the names of all resource types that this
         <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService">ResourceMonitoringService</link> implementation supports.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="listContext()" xml:id="org.osgi.service.resourcemonitoring.ResourceMonitoringService.listContext--">
         <title>public ResourceContext[] listContext()</title>
         <para role="description">
Lists all available <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">resource contexts</link>. The list
 will contain the special <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService.FRAMEWORK_CONTEXT_NAME">FRAMEWORK_CONTEXT_NAME</link> context and the
 <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService.SYSTEM_CONTEXT_NAME">SYSTEM_CONTEXT_NAME</link> context, if it is supported.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An array of <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link> objects, or an empty array,
         if no contexts have been created.</para>
         </formalpara>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.service.resourcemonitoring.monitor" xml:id="org.osgi.service.resourcemonitoring.monitor" xml:base="../../generated/javadoc/docbook/org.osgi.service.resourcemonitoring.monitor.xml">
   <title>org.osgi.service.resourcemonitoring.monitor</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.resourcemonitoring.monitor-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.resourcemonitoring.monitor-version.number">1.0</edition>
   </info>
   <para>
Resource Monitoring Monitor Package Version 1.0.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.resourcemonitoring.monitor; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.resourcemonitoring.monitor; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.monitor.CPUMonitor">
                  <code>CPUMonitor</code>
               </link> - 
A <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitor">ResourceMonitor</link> for the
 <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService.RES_TYPE_CPU">ResourceMonitoringService.RES_TYPE_CPU</link> resource type.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.monitor.DiskStorageMonitor">
                  <code>DiskStorageMonitor</code>
               </link> - 
A <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitor">ResourceMonitor</link> for the
 <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService.RES_TYPE_DISK_STORAGE">ResourceMonitoringService.RES_TYPE_DISK_STORAGE</link> resource type.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.monitor.MemoryMonitor">
                  <code>MemoryMonitor</code>
               </link> - 
A <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitor">ResourceMonitor</link> for the
 <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService.RES_TYPE_MEMORY">ResourceMonitoringService.RES_TYPE_MEMORY</link> resource type.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.monitor.SocketMonitor">
                  <code>SocketMonitor</code>
               </link> - 
A <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitor">ResourceMonitor</link> for the
 <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService.RES_TYPE_SOCKET">ResourceMonitoringService.RES_TYPE_SOCKET</link> resource type.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resourcemonitoring.monitor.ThreadMonitor">
                  <code>ThreadMonitor</code>
               </link> - 
A <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitor">ResourceMonitor</link> for the
 <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService.RES_TYPE_THREADS">ResourceMonitoringService.RES_TYPE_THREADS</link> resource type.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="CPUMonitor" xml:id="org.osgi.service.resourcemonitoring.monitor.CPUMonitor">
      <title>public interface CPUMonitor<?line-break?> extends ResourceMonitor</title>
      <para>
A <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitor">ResourceMonitor</link> for the
 <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService.RES_TYPE_CPU">ResourceMonitoringService.RES_TYPE_CPU</link> resource type. CPUMonitor
 instance monitors the CPU consumed by a <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link> instance.
   </para>
      <section role="method" xreflabel="getCPUUsage()" xml:id="org.osgi.service.resourcemonitoring.monitor.CPUMonitor.getCPUUsage--">
         <title>public long getCPUUsage()</title>
         <para role="description">
Returns the CPU usage as a cumulative number of nanoseconds
 </para>
         <para>
 The <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitor.getUsage--">getUsage()</link> method returns the same value, wrapped in a long.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the CPU usage in nanoseconds</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="DiskStorageMonitor" xml:id="org.osgi.service.resourcemonitoring.monitor.DiskStorageMonitor">
      <title>public interface DiskStorageMonitor<?line-break?> extends ResourceMonitor</title>
      <para>
A <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitor">ResourceMonitor</link> for the
 <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService.RES_TYPE_DISK_STORAGE">ResourceMonitoringService.RES_TYPE_DISK_STORAGE</link> resource type. A
 DiskStorageMonitor instance monitors and limits the persistent storage of the
 bundle belonging to the <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link>
      </para>
      <section role="method" xreflabel="getUsedDiskStorage()" xml:id="org.osgi.service.resourcemonitoring.monitor.DiskStorageMonitor.getUsedDiskStorage--">
         <title>public long getUsedDiskStorage()</title>
         <para role="description">
Returns the sum of the size of the persistent storage areas of the
 bundles in this resource context.
 </para>
         <para>
 The <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitor.getUsage--">getUsage()</link> method returns the same value, wrapped in a long.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the sum of the sizes of the persistent storage areas in bytes</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="MemoryMonitor" xml:id="org.osgi.service.resourcemonitoring.monitor.MemoryMonitor">
      <title>public interface MemoryMonitor<?line-break?> extends ResourceMonitor</title>
      <para>
A <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitor">ResourceMonitor</link> for the
 <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService.RES_TYPE_MEMORY">ResourceMonitoringService.RES_TYPE_MEMORY</link> resource type. A
 MemoryMonitor instance monitors and limits the memory used by a
 <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link> instance.
   </para>
      <section role="method" xreflabel="getMemoryUsage()" xml:id="org.osgi.service.resourcemonitoring.monitor.MemoryMonitor.getMemoryUsage--">
         <title>public long getMemoryUsage()</title>
         <para role="description">
Returns the size of the java heap used by the bundles in this resource
 context.
 </para>
         <para>
 The <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitor.getUsage--">getUsage()</link> method returns the same value, wrapped in a long.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the size of the used java heap in bytes</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="SocketMonitor" xml:id="org.osgi.service.resourcemonitoring.monitor.SocketMonitor">
      <title>public interface SocketMonitor<?line-break?> extends ResourceMonitor</title>
      <para>
A <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitor">ResourceMonitor</link> for the
 <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService.RES_TYPE_SOCKET">ResourceMonitoringService.RES_TYPE_SOCKET</link> resource type.
 <link linkend="org.osgi.service.resourcemonitoring.monitor.SocketMonitor">SocketMonitor</link> instance are used to monitor and limit the number of
 in-use sockets per <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link> instance. <link linkend="org.osgi.service.resourcemonitoring.monitor.SocketMonitor">SocketMonitor</link>
 instance handle all types of sockets (TCP, UDP, ...).
 </para>
      <para>
 A TCP socket is considered to be in-use when it is bound (
 Socket.bind(java.net.SocketAddress)) or when it is connected (
 Socket.connect(java.net.SocketAddress)). It leaves the in-use state
 when the socket is closed (Socket.close()). *
 </para>
      <para>
 A UDP socket is in-use when it is bound (
 DatagramSocket.bind(java.net.SocketAddress)) or connected (
 DatagramSocket.connect(java.net.SocketAddress)). A UDP Socket leaves
 the in-use state when it is closed (DatagramSocket.close()).</para>
      <section role="method" xreflabel="getSocketUsage()" xml:id="org.osgi.service.resourcemonitoring.monitor.SocketMonitor.getSocketUsage--">
         <title>public long getSocketUsage()</title>
         <para role="description">
Returns the number of existing socket created by a
 <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link>.
 </para>
         <para>
 The <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitor.getUsage--">getUsage()</link> method returns the same value, wrapped in a long.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the number of existing socket.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ThreadMonitor" xml:id="org.osgi.service.resourcemonitoring.monitor.ThreadMonitor">
      <title>public interface ThreadMonitor<?line-break?> extends ResourceMonitor</title>
      <para>
A <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitor">ResourceMonitor</link> for the
 <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitoringService.RES_TYPE_THREADS">ResourceMonitoringService.RES_TYPE_THREADS</link> resource type. A
 ThreadMonitor instance monitors and limits the thread created by a
 <link linkend="org.osgi.service.resourcemonitoring.ResourceContext">ResourceContext</link> instance.
   </para>
      <section role="method" xreflabel="getAliveThreads()" xml:id="org.osgi.service.resourcemonitoring.monitor.ThreadMonitor.getAliveThreads--">
         <title>public int getAliveThreads()</title>
         <para role="description">
Returns the number of alive threads created by the bundles in this
 resource context. A Thread is considered to be alive when its java state
 is one of the following:
 </para>
         <itemizedlist>
            <listitem>
               <para>RUNNABLE</para>
            </listitem>
            <listitem>
               <para>BLOCKED</para>
            </listitem>
            <listitem>
               <para>WAITING</para>
            </listitem>
            <listitem>
               <para>TIMED_WAITING</para>
            </listitem>
         </itemizedlist>
         <para>
 The <link linkend="org.osgi.service.resourcemonitoring.ResourceMonitor.getUsage--">getUsage()</link> method returns the same value, wrapped in a int.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the number of alive threads created by this resource context</para>
         </formalpara>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="service.resourcemonitoring_bibliomixed_id_20150105_11h45_1"><title>Adaptive
      Monitoring of End-user OSGi based Home Boxes</title>Y. Maurel, A.
      Bottaro, R. Kopetz, and K. Attouchi. Component Base Software
      Engineering, 15th ACM SIGSOFT International Symposium on Component-Based
      Software Engineering, CBSE'2012, Bertinoro, Italy, June
      2012.</bibliomixed>

      <bibliomixed xml:id="service.resourcemonitoring_bibliomixed_id_20150105_11h46_2"><title>Memory
      Monitoring in a Multi-tenant OSGi Execution Environment</title>K.
      Attouchi, G. Thomas, A. Bottaro, and G. Muller. Proceedings of the 17th
      ACM SIGSOFT symposium on Component Based Software Engineering, CBSE’14,
      Lille, France, July 2014.</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="145" revision="$Id: f9fedcc3c2b3b88f9fa7ca3b332fbf04c63efcef $" version="5" xml:id="service.usbinfo" xml:base="../145/service.usbinfo.xml">
  <title>USB Information Device Category Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.usbinfo-version" linkend="org.osgi.service.usbinfo"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The <xref linkend="service.device"/> defines a unified and
    sophisticated way to handle devices attached to a residential gateway or
    devices found in the home network by using various protocols such as USB,
    ZigBee, Z-Wave, KNX, UPnP, etc.</para>

    <para>Recently, OSGi is gaining popularity as enabling technology for
    building embedded systems in the residential market as well as other
    Internet-of-Things (IoT) domains. Such systems often have USB interfaces
    and the need of handling USB devices attached to these systems is
    increasing.</para>

    <para><xref linkend="service.device-device.category"/> defines the concept
    of device categories. This specification defines a device category for USB
    devices.</para>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>USBInfoDevice</emphasis> - The representation of a
          USB device. This service provide information defined by the USB
          Implementers Forum, Inc.</para>
        </listitem>
      </itemizedlist>

      <figure xml:id="service.usbinfo-figure-145-1">
        <title>USB Information Device Service Overview Diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.550in" contentwidth="5.000in" fileref="service_usbinfo_classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>USBInfoDevice Service</title>

    <para>The device services are registered in the OSGi service registry with
    the <xref linkend="org.osgi.service.usbinfo.USBInfoDevice" xrefstyle="hyperlink"/> interface. The service is registered by a USB
    information base driver bundle when a USB device is attached. A USB
    information base driver bundle must implement <xref linkend="org.osgi.service.usbinfo.USBInfoDevice" xrefstyle="hyperlink"/>
    interface and register the OSGi service under <xref linkend="org.osgi.service.usbinfo.USBInfoDevice" xrefstyle="hyperlink"/> .
    Refining drivers can find USB devices via <code>USBInfoDevice</code>
    services and identify the device. The <code>USBInfoDevice</code> service
    has a set of properties.</para>

    <para>USB Specification, see <xref linkend="service.usbinfo-usbspec"/> ,
    defines that a USB device has USB interface(s). A USB information base
    driver bundle must register <code>USBInfoDevice</code> services number of
    USB interfaces. A <code>USBInfoDevice</code> service has information that
    contains a USB device information and a USB interface information.</para>

    <para>The USB information base driver may need native drivers such as
    kernel drivers on Linux. This document has a precondition that there are
    native drivers. It is out of scope how to install native drivers.</para>

    <section>
      <title>Device Access Category</title>

      <para>The device access category is called "<code>USBInfo</code>". The
      category name is defined as a value of <xref linkend="org.osgi.service.usbinfo.USBInfoDevice.DEVICE_CATEGORY" xrefstyle="hyperlink"/> constant. It must be used as a part of the<xref linkend="org.osgi.service.device.Constants.DEVICE_CATEGORY" xrefstyle="hyperlink"/> service property value on the <xref linkend="org.osgi.service.usbinfo.USBInfoDevice" xrefstyle="hyperlink"/>
      service. The category defines the following additional service
      properties for the <xref linkend="org.osgi.service.usbinfo.USBInfoDevice" xrefstyle="hyperlink"/>
      service.</para>
    </section>

    <section>
      <title>Service Properties based upon USB Specification</title>

      <para>The USB Specification defines a Device Descriptor. USB devices
      report their attributes using descriptors. The following <xref linkend="org.osgi.service.usbinfo.USBInfoDevice" xrefstyle="hyperlink"/>
      service properties use information from the USB device
      descriptor.</para>

      <table>
        <title>Service properties of USBInfoDevice service from Device
        Descriptor</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="3.5*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="3.5*"/>

          <colspec colnum="4" colwidth="2*"/>

          <thead>
            <row>
              <entry>The key of service property</entry>

              <entry>Type</entry>

              <entry>Description</entry>

              <entry>Device Descriptor's Field from USB Spec.</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>usbinfo.bcdUSB</code></entry>

              <entry><code>String</code></entry>

              <entry><para>OPTIONAL property key. The 4-digit BCD
              format.</para><para>Example: "0210"</para></entry>

              <entry>bcdUSB</entry>
            </row>

            <row>
              <entry><code>usbinfo.bDeviceClass</code></entry>

              <entry><code>String</code></entry>

              <entry><para>MANDATORY property key. Hexadecimal,
              2-digits.</para><para>Example: "ff"</para></entry>

              <entry>bDeviceClass</entry>
            </row>

            <row>
              <entry><code>usbinfo.bDeviceSubClass</code></entry>

              <entry><code>String</code></entry>

              <entry><para>MANDATORY property key. Hexadecimal,
              2-digits.</para><para>Example: "ff"</para></entry>

              <entry>bDeviceSubClass</entry>
            </row>

            <row>
              <entry><code>usbinfo.bDeviceProtocol</code></entry>

              <entry><code>String</code></entry>

              <entry><para>MANDATORY property key. Hexadecimal,
              2-digits.</para><para>Example: "ff"</para></entry>

              <entry>bDeviceProtocol</entry>
            </row>

            <row>
              <entry><code>usbinfo.bMaxPacketSize0</code></entry>

              <entry><code>Integer</code></entry>

              <entry><para>OPTIONAL property key.</para></entry>

              <entry>bMaxPacketSize0</entry>
            </row>

            <row>
              <entry><code>usbinfo.idVendor</code></entry>

              <entry><code>String</code></entry>

              <entry><para>MANDATORY property key. Hexadecimal,
              4-digits.</para><para>Example: "0403"</para></entry>

              <entry>idVendor</entry>
            </row>

            <row>
              <entry><code>usbinfo.idProduct</code></entry>

              <entry><code>String</code></entry>

              <entry><para>MANDATORY property key. Hexadecimal,
              4-digits.</para><para>Example: "8372"</para></entry>

              <entry>idProduct</entry>
            </row>

            <row>
              <entry><code>usbinfo.bcdDevice</code></entry>

              <entry><code>String</code></entry>

              <entry><para>MANDATORY property key. The 4-digit BCD
              format.</para><para>Example: "0200"</para></entry>

              <entry>bcdDevice</entry>
            </row>

            <row>
              <entry><code>usbinfo.Manufacturer</code></entry>

              <entry><code>String</code></entry>

              <entry><para>OPTIONAL property key. String value referenced by
              iManufacturer. The value is not the index value of
              iManufacturer.</para><para>Example: "Buffalo
              Inc."</para></entry>

              <entry>iManufacturer</entry>
            </row>

            <row>
              <entry><code>usbinfo.Product</code></entry>

              <entry><code>String</code></entry>

              <entry><para>OPTIONAL property key. String value referenced by
              iProduct. The value is not the index value of
              iProduct.</para><para>Example: "USB2.0 PC Camera"</para></entry>

              <entry>iProduct</entry>
            </row>

            <row>
              <entry><code>usbinfo.SerialNumber</code></entry>

              <entry><code>String</code></entry>

              <entry><para>OPTIONAL property key. String value referenced by
              iSerialNumber. The value is not the index value of
              iSerialNumber.</para><para>Example:
              "57B0002600000001"</para></entry>

              <entry>iSerialNumber</entry>
            </row>

            <row>
              <entry><code>usbinfo.bNumConfigurations</code></entry>

              <entry><code>Integer</code></entry>

              <entry><para>OPTIONAL property key.</para></entry>

              <entry>bNumConfigurations</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>According to the USB Specification, a device descriptor has some
      Interface Descriptors.</para>

      <para>Refining drivers need each interface descriptor's bInterfaceClass,
      bInterfaceSubClass and bInterfaceProtocol to identify devices. The
      following <xref linkend="org.osgi.service.usbinfo.USBInfoDevice" xrefstyle="hyperlink"/> service properties use information from the USB
      interface descriptor.</para>

      <table>
        <title>Service properties of USBInfoDevice service from Interface
        Descriptor</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="3.5*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="3.5*"/>

          <colspec colnum="4" colwidth="2*"/>

          <thead>
            <row>
              <entry>The key of service property</entry>

              <entry>Type</entry>

              <entry>Description</entry>

              <entry>Interface Descriptor's Field from USB Spec.</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>usbinfo.bInterfaceNumber</code></entry>

              <entry><code>Integer</code></entry>

              <entry><para>MANDATORY property key.</para></entry>

              <entry>bInterfaceNumber</entry>
            </row>

            <row>
              <entry><code>usbinfo.bAlternateSetting</code></entry>

              <entry><code>Integer</code></entry>

              <entry><para>OPTIONAL property key.</para></entry>

              <entry>bAlternateSetting</entry>
            </row>

            <row>
              <entry><code>usbinfo.bNumEndpoints</code></entry>

              <entry><code>Integer</code></entry>

              <entry><para>OPTIONAL property key.</para></entry>

              <entry>bNumEndpoints</entry>
            </row>

            <row>
              <entry><code>usbinfo.bInterfaceClass</code></entry>

              <entry><code>String</code></entry>

              <entry><para>MANDATORY property key. Hexadecimal,
              2-digits.</para><para>Example: "ff"</para></entry>

              <entry>bInterfaceClass</entry>
            </row>

            <row>
              <entry><code>usbinfo.bInterfaceSubClass</code></entry>

              <entry><code>String</code></entry>

              <entry><para>MANDATORY property key. Hexadecimal,
              2-digits.</para><para>Example: "ff"</para></entry>

              <entry>bInterfaceSubClass</entry>
            </row>

            <row>
              <entry><code>usbinfo.bInterfaceProtocol</code></entry>

              <entry><code>String</code></entry>

              <entry><para>MANDATORY property key. Hexadecimal,
              2-digits.</para><para>Example: "ff"</para></entry>

              <entry>bInterfaceProtocol</entry>
            </row>

            <row>
              <entry><code>usbinfo.Interface</code></entry>

              <entry><code>String</code></entry>

              <entry><para>OPTIONAL property key. String value referenced by
              iInterface. The value is not the index value of
              iInterface.</para></entry>

              <entry>iInterface</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Additional Service Properties</title>

      <para>Some additional service properties are needed to identify and
      access a device by refining drivers.</para>

      <table>
        <title>Additional service properties of USBInfoDevice service</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="2*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="4*"/>

          <thead>
            <row>
              <entry>The key of service property</entry>

              <entry>Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>usbinfo.bus</code></entry>

              <entry><code>Integer</code></entry>

              <entry><para>MANDATORY property key. The value is Integer. Used
              to identify USB devices with same VID / PID. The value is the ID
              of the USB bus assigned when connecting the USB device. USB bus
              ID is integer. The USB bus ID does not change while the USB
              device remains connected. </para><para>Example: 3</para></entry>
            </row>

            <row>
              <entry><code>usbinfo.address</code></entry>

              <entry><code>Integer</code></entry>

              <entry><para>MANDATORY property key. The value is Integer. Used
              to identify USB devices with same VID / PID. The value is the ID
              of the USB address assigned when connecting the USB device. USB
              address is integer in the range 1-127. The USB address does not
              change while the USB device remains connected.
              </para><para>Example: 2</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Match scale</title>

      <para>When the driver service is registered by the driver bundle, the
      Device Manager calls <xref linkend="org.osgi.service.device.Driver.match-ServiceReference-" xrefstyle="hyperlink"/> with the argument of the
      <code>USBInfoDevice</code> service's Service Reference. The driver
      responds with a match value based on following choices.</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.usbinfo.USBInfoDevice.MATCH_VERSION" xrefstyle="hyperlink"/> - Constant for the USB device match scale,
          indicating a match with <xref linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_IDVENDOR" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_IDPRODUCT" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BCDDEVICE" xrefstyle="hyperlink"/>. Value is 50.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.usbinfo.USBInfoDevice.MATCH_MODEL" xrefstyle="hyperlink"/> - Constant for the USB device match scale,
          indicating a match with <xref linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_IDVENDOR" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_IDPRODUCT" xrefstyle="hyperlink"/>. Value is 40.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.usbinfo.USBInfoDevice.MATCH_PROTOCOL" xrefstyle="hyperlink"/> - Constant for the USB device match scale,
          indicating a match with <xref linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BDEVICECLASS" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BDEVICESUBCLASS" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BDEVICEPROTOCOL" xrefstyle="hyperlink"/>, or a match with <xref linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BINTERFACECLASS" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BINTERFACESUBCLASS" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BINTERFACEPROTOCOL" xrefstyle="hyperlink"/>. Value is 30.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.usbinfo.USBInfoDevice.MATCH_SUBCLASS" xrefstyle="hyperlink"/> - Constant for the USB device match scale,
          indicating a match <xref linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BDEVICECLASS" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BDEVICESUBCLASS" xrefstyle="hyperlink"/>, or a match with <xref linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BINTERFACECLASS" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BINTERFACESUBCLASS" xrefstyle="hyperlink"/>. Value is 20.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.usbinfo.USBInfoDevice.MATCH_CLASS" xrefstyle="hyperlink"/> - Constant for the USB device match scale,
          indicating a match with <xref linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BDEVICECLASS" xrefstyle="hyperlink"/>, or a match with <xref linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BINTERFACECLASS" xrefstyle="hyperlink"/>. Value is 10.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>To acquire USB information device service, The refining bundle
    require that <code>ServicePermission[USBInfoDevice, GET]</code> is
    assigned.</para>

    <para><code>USBInfoDevice</code> service should only be implemented by
    trusted bundles. This bundle requires
    <code>ServicePermission[USBInfoDevice, REGISTER]</code>.</para>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.usbinfo" xml:id="org.osgi.service.usbinfo" xml:base="../../generated/javadoc/docbook/org.osgi.service.usbinfo.xml">
   <title>org.osgi.service.usbinfo</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.usbinfo-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.usbinfo-version.number">1.0</edition>
   </info>
   <para>
USB Information Device Category Specification Package Version 1.0.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.usbinfo; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.usbinfo; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.usbinfo.USBInfoDevice">
                  <code>USBInfoDevice</code>
               </link> - 
Represents a USB device.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="USBInfoDevice" xml:id="org.osgi.service.usbinfo.USBInfoDevice">
      <title>public interface USBInfoDevice</title>
      <para>
Represents a USB device. For each USB device, an object is registered with
 the framework under the USBInfoDevice interface. A USB information base
 driver must implement this interface.

 </para>
      <para>
 The values of the USB property names are defined by the USB Implementers
 Forum, Inc.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="DEVICE_CATEGORY" xml:id="org.osgi.service.usbinfo.USBInfoDevice.DEVICE_CATEGORY">
         <title>public static final String DEVICE_CATEGORY = "USBInfo"</title>
         <para>
Constant for the value of the service property <code>DEVICE_CATEGORY</code>
 used for all USB devices.
 
 </para>
         <para>
 A USB information base driver bundle must set this property key.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.device.Constants.DEVICE_CATEGORY">org.osgi.service.device.Constants.DEVICE_CATEGORY</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="MATCH_CLASS" xml:id="org.osgi.service.usbinfo.USBInfoDevice.MATCH_CLASS">
         <title>public static final int MATCH_CLASS = 10</title>
         <para>
Device Access match value indicating a match with
 <link linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BDEVICECLASS">USB_BDEVICECLASS</link> or a match with <link linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BINTERFACECLASS">USB_BINTERFACECLASS</link>.
   </para>
      </section>
      <section role="field" xreflabel="MATCH_MODEL" xml:id="org.osgi.service.usbinfo.USBInfoDevice.MATCH_MODEL">
         <title>public static final int MATCH_MODEL = 40</title>
         <para>
Device Access match value indicating a match with <link linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_IDVENDOR">USB_IDVENDOR</link>,
 and <link linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_IDPRODUCT">USB_IDPRODUCT</link>.
   </para>
      </section>
      <section role="field" xreflabel="MATCH_PROTOCOL" xml:id="org.osgi.service.usbinfo.USBInfoDevice.MATCH_PROTOCOL">
         <title>public static final int MATCH_PROTOCOL = 30</title>
         <para>
Device Access match value indicating a match with
 <link linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BDEVICECLASS">USB_BDEVICECLASS</link>, <link linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BDEVICESUBCLASS">USB_BDEVICESUBCLASS</link>, and
 <link linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BDEVICEPROTOCOL">USB_BDEVICEPROTOCOL</link> or a match with <link linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BINTERFACECLASS">USB_BINTERFACECLASS</link>
 , <link linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BINTERFACESUBCLASS">USB_BINTERFACESUBCLASS</link>, and <link linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BINTERFACEPROTOCOL">USB_BINTERFACEPROTOCOL</link>.
   </para>
      </section>
      <section role="field" xreflabel="MATCH_SUBCLASS" xml:id="org.osgi.service.usbinfo.USBInfoDevice.MATCH_SUBCLASS">
         <title>public static final int MATCH_SUBCLASS = 20</title>
         <para>
Device Access match value indicating a match with
 <link linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BDEVICECLASS">USB_BDEVICECLASS</link>, and <link linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BDEVICESUBCLASS">USB_BDEVICESUBCLASS</link> or a match
 with <link linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BINTERFACECLASS">USB_BINTERFACECLASS</link>, and <link linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BINTERFACESUBCLASS">USB_BINTERFACESUBCLASS</link>.
   </para>
      </section>
      <section role="field" xreflabel="MATCH_VERSION" xml:id="org.osgi.service.usbinfo.USBInfoDevice.MATCH_VERSION">
         <title>public static final int MATCH_VERSION = 50</title>
         <para>
Device Access match value indicating a match with <link linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_IDVENDOR">USB_IDVENDOR</link>,
 <link linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_IDPRODUCT">USB_IDPRODUCT</link>, and <link linkend="org.osgi.service.usbinfo.USBInfoDevice.USB_BCDDEVICE">USB_BCDDEVICE</link>.
   </para>
      </section>
      <section role="field" xreflabel="USB_ADDRESS" xml:id="org.osgi.service.usbinfo.USBInfoDevice.USB_ADDRESS">
         <title>public static final String USB_ADDRESS = "usbinfo.address"</title>
         <para>
Service property to identify USB address.
 </para>
         <para>
 Used to identify USB devices with same VID / PID. The value is the ID of
 the USB address assigned when connecting the USB device. USB address is
 an integer in the range 1-127 and does not change while the USB device
 remains connected. The value type is Integer.</para>
      </section>
      <section role="field" xreflabel="USB_BALTERNATESETTING" xml:id="org.osgi.service.usbinfo.USBInfoDevice.USB_BALTERNATESETTING">
         <title>public static final String USB_BALTERNATESETTING = "usbinfo.bAlternateSetting"</title>
         <para>
Service property for USB Interface Descriptor field "bAlternateSetting".
 </para>
         <para>
 The value type is Integer. This service property is optional.</para>
      </section>
      <section role="field" xreflabel="USB_BCDDEVICE" xml:id="org.osgi.service.usbinfo.USBInfoDevice.USB_BCDDEVICE">
         <title>public static final String USB_BCDDEVICE = "usbinfo.bcdDevice"</title>
         <para>
Service property for USB Device Descriptor field "bcdDevice".
 </para>
         <para>
 The value type is String; the value is in 4-digit BCD format. For
 example, "0200".</para>
      </section>
      <section role="field" xreflabel="USB_BCDUSB" xml:id="org.osgi.service.usbinfo.USBInfoDevice.USB_BCDUSB">
         <title>public static final String USB_BCDUSB = "usbinfo.bcdUSB"</title>
         <para>
Service property for USB Device Descriptor field "bcdUSB".
 </para>
         <para>
 The value type is String; the value is in 4-digit BCD format. For
 example, "0210". This service property is optional.</para>
      </section>
      <section role="field" xreflabel="USB_BDEVICECLASS" xml:id="org.osgi.service.usbinfo.USBInfoDevice.USB_BDEVICECLASS">
         <title>public static final String USB_BDEVICECLASS = "usbinfo.bDeviceClass"</title>
         <para>
Service property for USB Device Descriptor field "bDeviceClass".
 </para>
         <para>
 The value type is String; the value is in 2-digit hexadecimal. For
 example, "ff".</para>
      </section>
      <section role="field" xreflabel="USB_BDEVICEPROTOCOL" xml:id="org.osgi.service.usbinfo.USBInfoDevice.USB_BDEVICEPROTOCOL">
         <title>public static final String USB_BDEVICEPROTOCOL = "usbinfo.bDeviceProtocol"</title>
         <para>
Service property for USB Device Descriptor field "bDeviceProtocol".
 </para>
         <para>
 The value type is String; the value is in 2-digit hexadecimal. For
 example, "ff".</para>
      </section>
      <section role="field" xreflabel="USB_BDEVICESUBCLASS" xml:id="org.osgi.service.usbinfo.USBInfoDevice.USB_BDEVICESUBCLASS">
         <title>public static final String USB_BDEVICESUBCLASS = "usbinfo.bDeviceSubClass"</title>
         <para>
Service property for USB Device Descriptor field "bDeviceSubClass".
 </para>
         <para>
 The value type is String; the value is in 2-digit hexadecimal. For
 example, "ff".</para>
      </section>
      <section role="field" xreflabel="USB_BINTERFACECLASS" xml:id="org.osgi.service.usbinfo.USBInfoDevice.USB_BINTERFACECLASS">
         <title>public static final String USB_BINTERFACECLASS = "usbinfo.bInterfaceClass"</title>
         <para>
Service property for USB Interface Descriptor field "bInterfaceClass".
 </para>
         <para>
 The value type is String; the value is in 2-digit hexadecimal. For
 example, "ff".</para>
      </section>
      <section role="field" xreflabel="USB_BINTERFACENUMBER" xml:id="org.osgi.service.usbinfo.USBInfoDevice.USB_BINTERFACENUMBER">
         <title>public static final String USB_BINTERFACENUMBER = "usbinfo.bInterfaceNumber"</title>
         <para>
Service property for USB Interface Descriptor field "bInterfaceNumber".
 </para>
         <para>
 The value type is Integer.</para>
      </section>
      <section role="field" xreflabel="USB_BINTERFACEPROTOCOL" xml:id="org.osgi.service.usbinfo.USBInfoDevice.USB_BINTERFACEPROTOCOL">
         <title>public static final String USB_BINTERFACEPROTOCOL = "usbinfo.bInterfaceProtocol"</title>
         <para>
Service property for USB Interface Descriptor field "bInterfaceProtocol".
 </para>
         <para>
 The value type is String; the value is in 2-digit hexadecimal. For
 example, "ff".</para>
      </section>
      <section role="field" xreflabel="USB_BINTERFACESUBCLASS" xml:id="org.osgi.service.usbinfo.USBInfoDevice.USB_BINTERFACESUBCLASS">
         <title>public static final String USB_BINTERFACESUBCLASS = "usbinfo.bInterfaceSubClass"</title>
         <para>
Service property for USB Interface Descriptor field "bInterfaceSubClass".
 </para>
         <para>
 The value type is String; the value is in 2-digit hexadecimal. For
 example, "ff".</para>
      </section>
      <section role="field" xreflabel="USB_BMAXPACKETSIZE0" xml:id="org.osgi.service.usbinfo.USBInfoDevice.USB_BMAXPACKETSIZE0">
         <title>public static final String USB_BMAXPACKETSIZE0 = "usbinfo.bMaxPacketSize0"</title>
         <para>
Service property for USB Device Descriptor field "bMaxPacketSize0".
 </para>
         <para>
 The value type is Integer. This service property is optional.</para>
      </section>
      <section role="field" xreflabel="USB_BNUMCONFIGURATIONS" xml:id="org.osgi.service.usbinfo.USBInfoDevice.USB_BNUMCONFIGURATIONS">
         <title>public static final String USB_BNUMCONFIGURATIONS = "usbinfo.bNumConfigurations"</title>
         <para>
Service property for USB Device Descriptor field "bNumConfigurations".
 </para>
         <para>
 The value type is Integer. This service property is optional.</para>
      </section>
      <section role="field" xreflabel="USB_BNUMENDPOINTS" xml:id="org.osgi.service.usbinfo.USBInfoDevice.USB_BNUMENDPOINTS">
         <title>public static final String USB_BNUMENDPOINTS = "usbinfo.bNumEndpoints"</title>
         <para>
Service property for USB Interface Descriptor field "bNumEndpoints".
 </para>
         <para>
 The value type is Integer. This service property is optional.</para>
      </section>
      <section role="field" xreflabel="USB_BUS" xml:id="org.osgi.service.usbinfo.USBInfoDevice.USB_BUS">
         <title>public static final String USB_BUS = "usbinfo.bus"</title>
         <para>
Service property to identify USB bus.
 </para>
         <para>
 Used to identify USB devices with same VID / PID. The value is the ID of
 the USB bus assigned when connecting the USB device. The USB bus ID is an
 integer and does not change while the USB device remains connected. The
 value type is Integer.</para>
      </section>
      <section role="field" xreflabel="USB_IDPRODUCT" xml:id="org.osgi.service.usbinfo.USBInfoDevice.USB_IDPRODUCT">
         <title>public static final String USB_IDPRODUCT = "usbinfo.idProduct"</title>
         <para>
Service property for USB Device Descriptor field "idProduct".
 </para>
         <para>
 The value type is String; the value is in 4-digit hexadecimal. For
 example, "8372".</para>
      </section>
      <section role="field" xreflabel="USB_IDVENDOR" xml:id="org.osgi.service.usbinfo.USBInfoDevice.USB_IDVENDOR">
         <title>public static final String USB_IDVENDOR = "usbinfo.idVendor"</title>
         <para>
Service property for USB Device Descriptor field "idVendor".
 </para>
         <para>
 The value type is String; the value is in 4-digit hexadecimal. For
 example, "0403".</para>
      </section>
      <section role="field" xreflabel="USB_INTERFACE" xml:id="org.osgi.service.usbinfo.USBInfoDevice.USB_INTERFACE">
         <title>public static final String USB_INTERFACE = "usbinfo.Interface"</title>
         <para>
Service property for name referenced by USB Interface Descriptor field
 "iInterface".
 </para>
         <para>
 The value type is String. This service property is optional.</para>
      </section>
      <section role="field" xreflabel="USB_MANUFACTURER" xml:id="org.osgi.service.usbinfo.USBInfoDevice.USB_MANUFACTURER">
         <title>public static final String USB_MANUFACTURER = "usbinfo.Manufacturer"</title>
         <para>
Service property for name referenced by USB Device Descriptor field
 "iManufacturer".
 </para>
         <para>
 The value type is String. For example, "Buffalo Inc.". This service
 property is optional.</para>
      </section>
      <section role="field" xreflabel="USB_PRODUCT" xml:id="org.osgi.service.usbinfo.USBInfoDevice.USB_PRODUCT">
         <title>public static final String USB_PRODUCT = "usbinfo.Product"</title>
         <para>
Service property for name referenced by USB Device Descriptor field
 "iProduct".
 </para>
         <para>
 The value type is String. For example, "USB2.0 PC Camera". This service
 property is optional.</para>
      </section>
      <section role="field" xreflabel="USB_SERIALNUMBER" xml:id="org.osgi.service.usbinfo.USBInfoDevice.USB_SERIALNUMBER">
         <title>public static final String USB_SERIALNUMBER = "usbinfo.SerialNumber"</title>
         <para>
Service property for name referenced by USB Device Descriptor field
 "iSerialNumber".
 </para>
         <para>
 The value type is String. For example, "57B0002600000001". This service
 property is optional.</para>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="service.usbinfo-usbspec"><title>Universal Serial
      Bus Specification Revision 1.1</title>September 23, 1998.</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="146" revision="$Id: 393c660635d6e0d7786d6c40f80abad063dae156 $" version="5" xml:id="service.serial" xml:base="../146/service.serial.xml">
  <title>Serial Device Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.serial-version" linkend="org.osgi.service.serial"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>Recently, OSGi is gaining popularity as an enabling technology for
    building embedded systems in the residential market as well as other
    Internet-of-Things (IoT) domains. It is expected that communication with
    various devices attached to OSGi enabled gateways will be
    necessary.</para>

    <para>Such communication can be implemented by means of serial connection
    when using non-IP devices based on ZigBee and Z-wave protocols. The most
    typical case arises when a USB dongle that supports such protocols is
    connected to the USB port of such a device, for example, residential
    gateway. The Operating System on the gateways will recognize the dongle as
    a virtual serial device and initiate a serial communication with the
    application process.</para>

    <para>The Serial Device Service specification defines an API for
    establishing communications between an OSGi bundle and a serial device,
    such as a ZigBee coordinator or Z-Wave controller.</para>

    <para><xref linkend="service.device-device.category"/> defines the concept
    of device categories. <xref linkend="service.usbinfo"/> defines a device
    category for USB devices. This specification and <xref linkend="service.usbinfo"/> provide a solution for the USB serial use
    case.</para>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>SerialDevice</emphasis> - This is an OSGi service
          that is used to represent a serial device. This OSGi service stores
          information regarding serial device and its status as service
          properties and provides communication function with the
          device.</para>
        </listitem>

        <listitem>
          <para><emphasis>SerialEventListener</emphasis> - A listener to
          events coming from Serial Devices.</para>
        </listitem>

        <listitem>
          <para><emphasis>Serial base driver bundle</emphasis> - The bundle
          that implements <xref linkend="org.osgi.service.serial.SerialDevice" xrefstyle="hyperlink"/>. Serial base driver bundle registers
          SerialDevice services with the Framework. It provides communication
          function with the (physical) serial devices.</para>
        </listitem>

        <listitem>
          <para><emphasis>Refining driver bundle</emphasis> - Refining drivers
          provide a refined view of a physical device that is already
          represented by another Device service registered with the Framework
          (see the details for Device Access Specification).</para>
        </listitem>
      </itemizedlist>

      <figure xml:id="service.serial-figure-146-1">
        <title>Serial Device Service class diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.750in" contentwidth="5.000in" fileref="service_serial_classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>SerialDevice Service</title>

    <para><xref linkend="org.osgi.service.serial.SerialDevice" xrefstyle="hyperlink"/> is the interface expressing a serial device. It
    maintains information and state of the serial device as a service
    property. It provides the communication facility with the serial device.
    Each <code>SerialDevice</code> expresses each serial device.</para>

    <para><code>SerialDevice</code> service is registered with the service
    registry with service properties as shown in the following table.</para>

    <table>
      <title>Service properties of SerialDevice service</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="2*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="4*"/>

        <thead>
          <row>
            <entry>The key of service property</entry>

            <entry>Type</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>DEVICE_CATEGORY</code></entry>

            <entry><code>String[]</code></entry>

            <entry><para>Constant for the value of the service property
            DEVICE_CATEGORY used for all Serial devices. Value is
            "Serial".</para></entry>
          </row>

          <row>
            <entry><code>serial.comport</code></entry>

            <entry><code>String</code></entry>

            <entry><para>MANDATORY property key. Represents the name of the
            port. </para><para>Examples: "/dev/ttyUSB0", "COM5",
            "/dev/tty.usbserial-XXXXXX"</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The Serial base driver may need native libraries. This document has
    a precondition that there are native libraries. It is out of scope how to
    install native libraries.</para>
  </section>

  <section>
    <title>SerialEventListener Service</title>

    <para>Serial events are sent using the white board model, in which a
    bundle interested in receiving the Serial events registers an object
    implementing the <xref linkend="org.osgi.service.serial.SerialEventListener" xrefstyle="hyperlink"/> interface. A COM port name can be set to limit the
    events for which a bundle is notified.</para>
  </section>

  <section>
    <title>USB Serial Example</title>

    <para>The Serial base driver registers a <xref linkend="org.osgi.service.serial.SerialDevice" xrefstyle="hyperlink"/>
    service that represents a (physical) Serial device. If the device is USB
    Serial device, then it is recommended that the base driver implements
    <xref linkend="org.osgi.service.usbinfo.USBInfoDevice" xrefstyle="hyperlink"/> and <code>SerialDevice</code> concurrently, and
    registers the service under <xref linkend="org.osgi.service.usbinfo.USBInfoDevice" xrefstyle="hyperlink"/>
    and <xref linkend="org.osgi.service.serial.SerialDevice" xrefstyle="hyperlink"/> interfaces.</para>
  </section>

  <section>
    <title>Security</title>

    <para>To acquire the Serial device service, the refining bundle need that
    <code>ServicePermission[SerialDevice, GET]</code> are assigned.</para>

    <para>To receive the Serial events, the bundles need that
    <code>ServicePermission[SerialEventListener, REGISTER]</code> are
    assigned.</para>

    <para><code>SerialDevice</code> service should only be implemented by
    trusted bundles. This bundle requires
    <code>ServicePermission[SerialDevice, REGISTER]</code> and
    <code>ServicePermission[SerialEventListener, GET]</code>.</para>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.serial" xml:id="org.osgi.service.serial" xml:base="../../generated/javadoc/docbook/org.osgi.service.serial.xml">
   <title>org.osgi.service.serial</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.serial-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.serial-version.number">1.0</edition>
   </info>
   <para>
Serial Device Service Specification Package Version 1.0.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.serial; version="[1.0,2.0)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.serial.SerialConstants">
                  <code>SerialConstants</code>
               </link> - 
Constants for serial device settings.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.serial.SerialDevice">
                  <code>SerialDevice</code>
               </link> - 
SerialDevice is a service representing a device performing serial
 communication.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.serial.SerialDeviceException">
                  <code>SerialDeviceException</code>
               </link> - 
A exception used to indicate that a serial device communication problem
 occurred.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.serial.SerialEvent">
                  <code>SerialEvent</code>
               </link> - 
A serial device event.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.serial.SerialEventListener">
                  <code>SerialEventListener</code>
               </link> - 
Serial events are sent using the white board model, in which a bundle
 interested in receiving the Serial events registers an object implementing
 the SerialEventListener interface.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.serial.SerialPortConfiguration">
                  <code>SerialPortConfiguration</code>
               </link> - 
An object represents the Serial port configuration.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="SerialConstants" xml:id="org.osgi.service.serial.SerialConstants">
      <title>public final class SerialConstants</title>
      <para>
Constants for serial device settings.
   </para>
      <section role="field" xreflabel="BAUD_115200" xml:id="org.osgi.service.serial.SerialConstants.BAUD_115200">
         <title>public static final int BAUD_115200 = 115200</title>
         <para>
Baud rate: 115200.
   </para>
      </section>
      <section role="field" xreflabel="BAUD_14400" xml:id="org.osgi.service.serial.SerialConstants.BAUD_14400">
         <title>public static final int BAUD_14400 = 14400</title>
         <para>
Baud rate: 14400.
   </para>
      </section>
      <section role="field" xreflabel="BAUD_19200" xml:id="org.osgi.service.serial.SerialConstants.BAUD_19200">
         <title>public static final int BAUD_19200 = 19200</title>
         <para>
Baud rate: 19200.
   </para>
      </section>
      <section role="field" xreflabel="BAUD_38400" xml:id="org.osgi.service.serial.SerialConstants.BAUD_38400">
         <title>public static final int BAUD_38400 = 38400</title>
         <para>
Baud rate: 38400.
   </para>
      </section>
      <section role="field" xreflabel="BAUD_57600" xml:id="org.osgi.service.serial.SerialConstants.BAUD_57600">
         <title>public static final int BAUD_57600 = 57600</title>
         <para>
Baud rate: 57600.
   </para>
      </section>
      <section role="field" xreflabel="BAUD_9600" xml:id="org.osgi.service.serial.SerialConstants.BAUD_9600">
         <title>public static final int BAUD_9600 = 9600</title>
         <para>
Baud rate: 9600.
   </para>
      </section>
      <section role="field" xreflabel="BAUD_AUTO" xml:id="org.osgi.service.serial.SerialConstants.BAUD_AUTO">
         <title>public static final int BAUD_AUTO = -1</title>
         <para>
Baud rate: Automatic baud rate (if available).
   </para>
      </section>
      <section role="field" xreflabel="DATABITS_5" xml:id="org.osgi.service.serial.SerialConstants.DATABITS_5">
         <title>public static final int DATABITS_5 = 5</title>
         <para>
Data bits: 5.
   </para>
      </section>
      <section role="field" xreflabel="DATABITS_6" xml:id="org.osgi.service.serial.SerialConstants.DATABITS_6">
         <title>public static final int DATABITS_6 = 6</title>
         <para>
Data bits: 6.
   </para>
      </section>
      <section role="field" xreflabel="DATABITS_7" xml:id="org.osgi.service.serial.SerialConstants.DATABITS_7">
         <title>public static final int DATABITS_7 = 7</title>
         <para>
Data bits: 7.
   </para>
      </section>
      <section role="field" xreflabel="DATABITS_8" xml:id="org.osgi.service.serial.SerialConstants.DATABITS_8">
         <title>public static final int DATABITS_8 = 8</title>
         <para>
Data bits: 8.
   </para>
      </section>
      <section role="field" xreflabel="FLOWCONTROL_NONE" xml:id="org.osgi.service.serial.SerialConstants.FLOWCONTROL_NONE">
         <title>public static final int FLOWCONTROL_NONE = 0</title>
         <para>
Flow control: None.
   </para>
      </section>
      <section role="field" xreflabel="FLOWCONTROL_RTSCTS_IN" xml:id="org.osgi.service.serial.SerialConstants.FLOWCONTROL_RTSCTS_IN">
         <title>public static final int FLOWCONTROL_RTSCTS_IN = 1</title>
         <para>
Flow control: RTS/CTS on input.
   </para>
      </section>
      <section role="field" xreflabel="FLOWCONTROL_RTSCTS_OUT" xml:id="org.osgi.service.serial.SerialConstants.FLOWCONTROL_RTSCTS_OUT">
         <title>public static final int FLOWCONTROL_RTSCTS_OUT = 2</title>
         <para>
Flow control: RTS/CTS on output.
   </para>
      </section>
      <section role="field" xreflabel="FLOWCONTROL_XONXOFF_IN" xml:id="org.osgi.service.serial.SerialConstants.FLOWCONTROL_XONXOFF_IN">
         <title>public static final int FLOWCONTROL_XONXOFF_IN = 4</title>
         <para>
Flow control: XON/XOFF on input.
   </para>
      </section>
      <section role="field" xreflabel="FLOWCONTROL_XONXOFF_OUT" xml:id="org.osgi.service.serial.SerialConstants.FLOWCONTROL_XONXOFF_OUT">
         <title>public static final int FLOWCONTROL_XONXOFF_OUT = 8</title>
         <para>
Flow control: XON/XOFF on output.
   </para>
      </section>
      <section role="field" xreflabel="PARITY_EVEN" xml:id="org.osgi.service.serial.SerialConstants.PARITY_EVEN">
         <title>public static final int PARITY_EVEN = 2</title>
         <para>
Parity: Even.
   </para>
      </section>
      <section role="field" xreflabel="PARITY_MARK" xml:id="org.osgi.service.serial.SerialConstants.PARITY_MARK">
         <title>public static final int PARITY_MARK = 3</title>
         <para>
Parity: Mark.
   </para>
      </section>
      <section role="field" xreflabel="PARITY_NONE" xml:id="org.osgi.service.serial.SerialConstants.PARITY_NONE">
         <title>public static final int PARITY_NONE = 0</title>
         <para>
Parity: None.
   </para>
      </section>
      <section role="field" xreflabel="PARITY_ODD" xml:id="org.osgi.service.serial.SerialConstants.PARITY_ODD">
         <title>public static final int PARITY_ODD = 1</title>
         <para>
Parity: Odd.
   </para>
      </section>
      <section role="field" xreflabel="PARITY_SPACE" xml:id="org.osgi.service.serial.SerialConstants.PARITY_SPACE">
         <title>public static final int PARITY_SPACE = 4</title>
         <para>
Parity: Space.
   </para>
      </section>
      <section role="field" xreflabel="STOPBITS_1" xml:id="org.osgi.service.serial.SerialConstants.STOPBITS_1">
         <title>public static final int STOPBITS_1 = 1</title>
         <para>
Stop bits: 1.
   </para>
      </section>
      <section role="field" xreflabel="STOPBITS_1_5" xml:id="org.osgi.service.serial.SerialConstants.STOPBITS_1_5">
         <title>public static final int STOPBITS_1_5 = 3</title>
         <para>
Stop bits: 1.5.
   </para>
      </section>
      <section role="field" xreflabel="STOPBITS_2" xml:id="org.osgi.service.serial.SerialConstants.STOPBITS_2">
         <title>public static final int STOPBITS_2 = 2</title>
         <para>
Stop bits: 2.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="SerialDevice" xml:id="org.osgi.service.serial.SerialDevice">
      <title>public interface SerialDevice</title>
      <para>
SerialDevice is a service representing a device performing serial
 communication.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="DEVICE_CATEGORY" xml:id="org.osgi.service.serial.SerialDevice.DEVICE_CATEGORY">
         <title>public static final String DEVICE_CATEGORY = "Serial"</title>
         <para>
Constant for the value of the service property <code>DEVICE_CATEGORY</code>
 used for all Serial devices.
 
 </para>
         <para>
 A Serial base driver bundle must set this property key.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.device.Constants.DEVICE_CATEGORY">org.osgi.service.device.Constants.DEVICE_CATEGORY</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SERIAL_COMPORT" xml:id="org.osgi.service.serial.SerialDevice.SERIAL_COMPORT">
         <title>public static final String SERIAL_COMPORT = "serial.comport"</title>
         <para>
Service property for the serial comport.
 </para>
         <para>
 Represents the name of the port. The value type is String.
 </para>
         <para>
 For example, "/dev/ttyUSB0", "COM5", or "/dev/tty.usbserial-XXXXXX".</para>
      </section>
      <section role="method" xreflabel="getConfiguration()" xml:id="org.osgi.service.serial.SerialDevice.getConfiguration--">
         <title>public SerialPortConfiguration getConfiguration()</title>
         <para role="description">
Gets the Serial port configuration.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The SerialPortConfiguration object containing the configuration.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getInputStream()" xml:id="org.osgi.service.serial.SerialDevice.getInputStream--">
         <title>public InputStream getInputStream() throws IOException</title>
         <para role="description">
Returns an input stream.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An input stream.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if an I/O error occurred.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getOutputStream()" xml:id="org.osgi.service.serial.SerialDevice.getOutputStream--">
         <title>public OutputStream getOutputStream() throws IOException</title>
         <para role="description">
Returns an output stream.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An output stream.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– If an I/O error occurred.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isCTS()" xml:id="org.osgi.service.serial.SerialDevice.isCTS--">
         <title>public boolean isCTS()</title>
         <para role="description">
Returns the CTS state.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The CTS state.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isDSR()" xml:id="org.osgi.service.serial.SerialDevice.isDSR--">
         <title>public boolean isDSR()</title>
         <para role="description">
Returns the DSR state.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The DSR state.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isDTR()" xml:id="org.osgi.service.serial.SerialDevice.isDTR--">
         <title>public boolean isDTR()</title>
         <para role="description">
Returns the DTR state.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The DTR state.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isRTS()" xml:id="org.osgi.service.serial.SerialDevice.isRTS--">
         <title>public boolean isRTS()</title>
         <para role="description">
Returns the DTS state.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The DTS state.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setConfiguration(SerialPortConfiguration)" xml:id="org.osgi.service.serial.SerialDevice.setConfiguration-SerialPortConfiguration-">
         <title>public void setConfiguration(SerialPortConfiguration configuration) throws SerialDeviceException</title>
         <formalpara role="parameter">
            <title>configuration</title>
            <para>The SerialPortConfiguration object containing the
        configuration.</para>
         </formalpara>
         <para role="description">
Sets the Serial port configuration.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SerialDeviceException</code>– If the parameter is specified incorrectly
         or the parameter is not supported.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setDTR(boolean)" xml:id="org.osgi.service.serial.SerialDevice.setDTR-boolean-">
         <title>public void setDTR(boolean dtr) throws SerialDeviceException</title>
         <formalpara role="parameter">
            <title>dtr</title>
            <para>
               <code>true</code> for DTR on; <code>false</code> for DTR for off.</para>
         </formalpara>
         <para role="description">
Sets the DTR state.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SerialDeviceException</code>– If the parameter is not supported.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setRTS(boolean)" xml:id="org.osgi.service.serial.SerialDevice.setRTS-boolean-">
         <title>public void setRTS(boolean rts) throws SerialDeviceException</title>
         <formalpara role="parameter">
            <title>rts</title>
            <para>
               <code>true</code> for RTS on; <code>false</code> for RTS for off.</para>
         </formalpara>
         <para role="description">
Sets the RTS state.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SerialDeviceException</code>– If the parameter is not supported.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="SerialDeviceException" xml:id="org.osgi.service.serial.SerialDeviceException">
      <title>public class SerialDeviceException<?line-break?> extends Exception</title>
      <para>
A exception used to indicate that a serial device communication problem
 occurred.
   </para>
      <section role="field" xreflabel="PORT_IN_USE" xml:id="org.osgi.service.serial.SerialDeviceException.PORT_IN_USE">
         <title>public static final int PORT_IN_USE = 1</title>
         <para>
The port in use.
   </para>
      </section>
      <section role="field" xreflabel="UNKNOWN" xml:id="org.osgi.service.serial.SerialDeviceException.UNKNOWN">
         <title>public static final int UNKNOWN = 0</title>
         <para>
The reason is unknown.
   </para>
      </section>
      <section role="field" xreflabel="UNSUPPORTED_OPERATION" xml:id="org.osgi.service.serial.SerialDeviceException.UNSUPPORTED_OPERATION">
         <title>public static final int UNSUPPORTED_OPERATION = 2</title>
         <para>
The operation is unsupported.
   </para>
      </section>
      <section role="method" xreflabel="SerialDeviceException(int,String)" xml:id="org.osgi.service.serial.SerialDeviceException.SerialDeviceException-int-String-">
         <title>public  SerialDeviceException(int type,String message)</title>
         <formalpara role="parameter">
            <title>type</title>
            <para>The type for this exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>message</title>
            <para>The message.</para>
         </formalpara>
         <para role="description">
Creates a SerialDeviceException with the specified type and message.
   </para>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.serial.SerialDeviceException.getType--">
         <title>public int getType()</title>
         <para role="description">
Returns the type for this exception.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The type of this exception.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="SerialEvent" xml:id="org.osgi.service.serial.SerialEvent">
      <title>public interface SerialEvent</title>
      <para>
A serial device event. SerialEvent objects are delivered to
 SerialEventListeners when an event occurs.
 
 </para>
      <para>
 A type of code is used to identify the event. Additional event types may be
 defined in the future.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="DATA_AVAILABLE" xml:id="org.osgi.service.serial.SerialEvent.DATA_AVAILABLE">
         <title>public static final int DATA_AVAILABLE = 1</title>
         <para>
Event type indicating data available.
   </para>
      </section>
      <section role="method" xreflabel="getComPort()" xml:id="org.osgi.service.serial.SerialEvent.getComPort--">
         <title>public String getComPort()</title>
         <para role="description">
Returns the port name of this event.
 
 </para>
         <para>
 This value must be equal to the value of
 <link linkend="org.osgi.service.serial.SerialDevice.SERIAL_COMPORT">SerialDevice.SERIAL_COMPORT</link> service property of the
 <link linkend="org.osgi.service.serial.SerialDevice">SerialDevice</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The port name of this event.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.serial.SerialEvent.getType--">
         <title>public int getType()</title>
         <para role="description">
Returns the type of this event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The type of this event.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="SerialEventListener" xml:id="org.osgi.service.serial.SerialEventListener">
      <title>public interface SerialEventListener</title>
      <para>
Serial events are sent using the white board model, in which a bundle
 interested in receiving the Serial events registers an object implementing
 the SerialEventListener interface. A COM port name can be set to limit the
 events for which a bundle is notified.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="SERIAL_COMPORT" xml:id="org.osgi.service.serial.SerialEventListener.SERIAL_COMPORT">
         <title>public static final String SERIAL_COMPORT = "serial.comport"</title>
         <para>
Key for a service property that is used to limit received events.
   </para>
      </section>
      <section role="method" xreflabel="notifyEvent(SerialEvent)" xml:id="org.osgi.service.serial.SerialEventListener.notifyEvent-SerialEvent-">
         <title>public void notifyEvent(SerialEvent event)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>The SerialEvent object.</para>
         </formalpara>
         <para role="description">
Callback method that is invoked for received an event.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="SerialPortConfiguration" xml:id="org.osgi.service.serial.SerialPortConfiguration">
      <title>public class SerialPortConfiguration</title>
      <para>
An object represents the Serial port configuration.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="method" xreflabel="SerialPortConfiguration(int,int,int,int,int)" xml:id="org.osgi.service.serial.SerialPortConfiguration.SerialPortConfiguration-int-int-int-int-int-">
         <title>public  SerialPortConfiguration(int baudRate,int dataBits,int flowControl,int parity,int stopBits)</title>
         <formalpara role="parameter">
            <title>baudRate</title>
            <para>Baud rate.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>dataBits</title>
            <para>Data bits.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>flowControl</title>
            <para>Flow control.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>parity</title>
            <para>Parity.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>stopBits</title>
            <para>Stop bits.</para>
         </formalpara>
         <para role="description">
Creates an instance of the serial port configuration with the specified
 Baud rate, Data bits, Flow control, Parity and Stop bits.
   </para>
      </section>
      <section role="method" xreflabel="SerialPortConfiguration(int)" xml:id="org.osgi.service.serial.SerialPortConfiguration.SerialPortConfiguration-int-">
         <title>public  SerialPortConfiguration(int baudRate)</title>
         <formalpara role="parameter">
            <title>baudRate</title>
            <para>Baud rate.</para>
         </formalpara>
         <para role="description">
Creates an instance of the serial port configuration with the specified
 Baud rate and the following configuration: Data bits = 8, Flow control =
 none, Parity = none, Stop bits = 1.
   </para>
      </section>
      <section role="method" xreflabel="SerialPortConfiguration()" xml:id="org.osgi.service.serial.SerialPortConfiguration.SerialPortConfiguration--">
         <title>public  SerialPortConfiguration()</title>
         <para role="description">
Creates an instance of the serial port configuration with the following
 configuration: Baud rate = auto, Data bits = 8, Flow control = none,
 Parity = none, Stop bits = 1.
   </para>
      </section>
      <section role="method" xreflabel="getBaudRate()" xml:id="org.osgi.service.serial.SerialPortConfiguration.getBaudRate--">
         <title>public int getBaudRate()</title>
         <para role="description">
Returns the baud rate.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The baud rate.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getDataBits()" xml:id="org.osgi.service.serial.SerialPortConfiguration.getDataBits--">
         <title>public int getDataBits()</title>
         <para role="description">
Returns the data bits.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The data bits.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFlowControl()" xml:id="org.osgi.service.serial.SerialPortConfiguration.getFlowControl--">
         <title>public int getFlowControl()</title>
         <para role="description">
Returns the flow control.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The flow control.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getParity()" xml:id="org.osgi.service.serial.SerialPortConfiguration.getParity--">
         <title>public int getParity()</title>
         <para role="description">
Returns the parity.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The parity.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getStopBits()" xml:id="org.osgi.service.serial.SerialPortConfiguration.getStopBits--">
         <title>public int getStopBits()</title>
         <para role="description">
Returns the stop bits.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The stop bits.</para>
         </formalpara>
      </section>
   </section>
</section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="702" revision="$Id: 9d3cac423aba69c2a81f1e941b0ddfa46ab4dfe1 $" version="5" xml:id="util.xml" xml:base="../702/util.xml.xml">
  <title>XML Parser Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.util.xml-version" linkend="org.osgi.util.xml"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The Extensible Markup Language (XML) has become a popular method of
    describing data. As more bundles use XML to describe their data, a common
    XML Parser becomes necessary in an embedded environment in order to reduce
    the need for space. Not all XML Parsers are equivalent in function,
    however, and not all bundles have the same requirements on an XML
    parser.</para>

    <para>This problem was addressed in the Java API for XML Processing, see
    <xref linkend="i1255594"/> for Java 2 Standard Edition and Enterprise
    Edition. This specification addresses how the classes defined in JAXP can
    be used in an OSGi framework. It defines how:</para>

    <itemizedlist>
      <listitem>
        <para>Implementations of XML parsers can become available to other
        bundles</para>
      </listitem>

      <listitem>
        <para>Bundles can find a suitable parser</para>
      </listitem>

      <listitem>
        <para>A standard parser in a JAR can be transformed to a bundle</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Standards</emphasis> - Leverage existing standards
          in Java based XML parsing: JAXP, SAX and DOM</para>
        </listitem>

        <listitem>
          <para><emphasis>Unmodified JAXP code</emphasis> - Run unmodified
          JAXP code</para>
        </listitem>

        <listitem>
          <para><emphasis>Simple</emphasis> - It should be easy to provide a
          SAX or DOM parser as well as easy to find a matching parser</para>
        </listitem>

        <listitem>
          <para><emphasis>Multiple</emphasis> - It should be possible to have
          multiple implementations of parsers available</para>
        </listitem>

        <listitem>
          <para><emphasis>Extendable</emphasis> - It is likely that parsers
          will be extended in the future with more functionality</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>XMLParserActivator</emphasis> - A utility class that
          registers a parser factory from declarative information in the
          Manifest file.</para>
        </listitem>

        <listitem>
          <para><emphasis>SAXParserFactory</emphasis> - A class that can
          create an instance of a <code>SAXParser</code> class.</para>
        </listitem>

        <listitem>
          <para><emphasis>DocumentBuilderFactory</emphasis> - A class that can
          create an instance of a <code>DocumentBuilder</code> class.</para>
        </listitem>

        <listitem>
          <para><emphasis>SAXParser</emphasis> - A parser, instantiated by a
          <code>SaxParserFactory</code> object, that parses according to the
          SAX specifications.</para>
        </listitem>

        <listitem>
          <para><emphasis>DocumentBuilder</emphasis> - A parser, instantiated
          by a <code>DocumentBuilderFactory</code>, that parses according to
          the DOM specifications.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>XML Parsing diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.442in" contentwidth="4.958in" fileref="xml-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Operations</title>

      <para>A bundle containing a SAX or DOM parser is started. This bundle
      registers a <code>SAXParserFactory</code> and/or a
      <code>DocumentBuilderFactory</code> service object with the Framework.
      Service registration properties describe the features of the parsers to
      other bundles. A bundle that needs an XML parser will get a
      <code>SAXParserFactory</code> or <code>DocumentBuilderFactory</code>
      service object from the Framework service registry. This object is then
      used to instantiate the requested parsers according to their
      specifications.</para>
    </section>
  </section>

  <section>
    <title>JAXP</title>

    <para>XML has become very popular in the last few years because it allows
    the interchange of complex information between different parties. Though
    only a single XML standard exists, there are multiple APIs to XML parsers,
    primarily of two types:</para>

    <itemizedlist>
      <listitem>
        <para>The Simple API for XML (SAX1 and SAX2)</para>
      </listitem>

      <listitem>
        <para>Based on the Document Object Model (DOM 1 and 2)</para>
      </listitem>
    </itemizedlist>

    <para>Both standards, however, define an abstract API that can be
    implemented by different vendors.</para>

    <para>A given XML Parser implementation may support either or both of
    these parser types by implementing the <code>org.w3c.dom</code> and/or
    <code>org.xml.sax</code> packages. In addition, parsers have
    characteristics such as whether they are validating or non-validating
    parsers and whether or not they are name-space aware.</para>

    <para>An application which uses a specific XML Parser must code to that
    specific parser and become coupled to that specific implementation. If the
    parser has implemented <xref linkend="i1255594"/>, however, the
    application developer can code against SAX or DOM and let the runtime
    environment decide which parser implementation is used.</para>

    <para>JAXP uses the concept of a <emphasis>factory</emphasis>. A factory
    object is an object that abstracts the creation of another object. JAXP
    defines a <code>DocumentBuilderFactory</code> and a
    <code>SAXParserFactory</code> class for this purpose.</para>

    <para>JAXP is implemented in the <code>javax.xml.parsers</code> package
    and provides an abstraction layer between an application and a specific
    XML Parser implementation. Using JAXP, applications can choose to use any
    JAXP compliant parser without changing any code, simply by changing a
    System property which specifies the SAX- and DOM factory class
    names.</para>

    <para>In JAXP, the default factory is obtained with a static method in the
    <code>SAXParserFactory</code> or <code>DocumentBuilderFactory</code>
    class. This method will inspect the associated System property and create
    a new instance of that class.</para>
  </section>

  <section>
    <title>XML Parser service</title>

    <para>The current specification of JAXP has the limitation that only one
    of each type of parser factories can be registered. This specification
    specifies how multiple <code>SAXParserFactory</code> objects and
    <code>DocumentBuilderFactory</code> objects can be made available to
    bundles simultaneously.</para>

    <para>Providers of parsers should register a JAXP factory object with the
    OSGi service registry under the factory class name. Service properties are
    used to describe whether the parser:</para>

    <itemizedlist>
      <listitem>
        <para>Is validating</para>
      </listitem>

      <listitem>
        <para>Is name-space aware</para>
      </listitem>

      <listitem>
        <para>Has additional features</para>
      </listitem>
    </itemizedlist>

    <para>With this functionality, bundles can query the OSGi service registry
    for parsers supporting the specific functionality that they
    require.</para>
  </section>

  <section xml:id="i1259424">
    <title>Properties</title>

    <para>Parsers must be registered with a number of properties that qualify
    the service. In this specification, the following properties are
    specified:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.util.xml.XMLParserActivator.PARSER_NAMESPACEAWARE" xrefstyle="hyperlink"/> - The registered parser is aware of
        name-spaces. Name-spaces allow an XML document to consist of
        independently developed DTDs. In an XML document, they are recognized
        by the <code>xmlns</code> attribute and names prefixed with an
        abbreviated name-space identifier, like: <code>&lt;xsl:if
        ...&gt;</code>. The type is a <code>Boolean</code> object that must be
        <code>true</code> when the parser supports name-spaces. All other
        values, or the absence of the property, indicate that the parser does
        not implement name-spaces.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.util.xml.XMLParserActivator.PARSER_VALIDATING" xrefstyle="hyperlink"/> - The registered parser can read the DTD and
        can validate the XML accordingly. The type is a <code>Boolean</code>
        object that must <code>true</code> when the parser is validating. All
        other values, or the absence of the property, indicate that the parser
        does not validate.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Getting a Parser Factory</title>

    <para>Getting a parser factory requires a bundle to get the appropriate
    factory from the service registry. In a simple case in which a
    non-validating, non-name-space aware parser would suffice, it is best to
    use <code>getServiceReference(String)</code>.</para>

    <programlisting>DocumentBuilder getParser(BundleContext context) 
    throws Exception {
    ServiceReference ref = context.getServiceReference(
        DocumentBuilderFactory.class.getName() );
    if ( ref == null )
        return null;
    DocumentBuilderFactory factory = 
        (DocumentBuilderFactory) context.getService(ref);
    return factory.newDocumentBuilder();
}</programlisting>

    <para>In a more demanding case, the filtered version allows the bundle to
    select a parser that is validating and name-space aware:</para>

    <programlisting>SAXParser getParser(BundleContext context) 
    throws Exception {
    ServiceReference refs[] = context.getServiceReferences(
        SAXParserFactory.class.getName(),
            "(&amp;(parser.namespaceAware=true)"
        +   "(parser.validating=true))" );
    if ( refs == null )
        return null;
    SAXParserFactory factory = 
        (SAXParserFactory) context.getService(refs[O]);
    return factory.newSAXParser();
}</programlisting>
  </section>

  <section>
    <title>Adapting a JAXP Parser to OSGi</title>

    <para>If an XML Parser supports JAXP, then it can be converted to an OSGi
    aware bundle by adding a <code>BundleActivator</code> class which
    registers an XML Parser Service. The utility
    <code>org.osgi.util.xml.XMLParserActivator</code> class provides this
    function and can be added (copied, not referenced) to any XML Parser
    bundle, or it can be extended and customized if desired.</para>

    <section>
      <title>JAR Based Services</title>

      <para>Its functionality is based on the definition of the <xref linkend="i1267674"/>. This specification defines a concept for service
      providers. A JAR file can contain an implementation of an abstractly
      defined service. The class (or classes) implementing the service are
      designated from a file in the <code>META-INF/services</code> directory.
      The name of this file is the same as the abstract service class.</para>

      <para>The content of the UTF-8 encoded file is a list of class names
      separated by new lines. White space is ignored and the number sign
      (<code>'#' \u0023</code>) is the comment character.</para>

      <para>JAXP uses this service provider mechanism. It is therefore likely
      that vendors will place these service files in the
      <code>META-INF/services</code> directory.</para>
    </section>

    <section>
      <title>XMLParserActivator</title>

      <para>To support this mechanism, the XML Parser service provides a
      utility class that should be normally delivered with the OSGi framework
      implementation. This class is a Bundle Activator and must start when the
      bundle is started. This class is copied into the parser bundle, and
      <emphasis>not</emphasis> imported.</para>

      <para>The <code>start</code> method of the utility
      <code>BundleActivator</code> class will look in the
      <code>META-INF/services</code> service provider directory for the files
      <code>javax.xml.parsers.SAXParserFactory (</code> <xref linkend="org.osgi.util.xml.XMLParserActivator.SAXFACTORYNAME" xrefstyle="hyperlink"/> ) or
      <code>javax.xml.parsers.DocumentBuilderFactory (</code> <xref linkend="org.osgi.util.xml.XMLParserActivator.DOMFACTORYNAME" xrefstyle="hyperlink"/> ). The full path name is specified in the
      constants <xref linkend="org.osgi.util.xml.XMLParserActivator.SAXCLASSFILE" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.util.xml.XMLParserActivator.DOMCLASSFILE" xrefstyle="hyperlink"/> respectively.</para>

      <para>If either of these files exist, the utility
      <code>BundleActivator</code> class will parse the contents according to
      the specification. A service provider file can contain multiple class
      names. Each name is read and a new instance is created. The following
      example shows the possible content of such a file:</para>

      <programlisting># ACME example SAXParserFactory file
com.acme.saxparser.SAXParserFast            # Fast
com.acme.saxparser.SAXParserValidating      # Validates</programlisting>

      <para>Both the <code>javax.xml.parsers.SAXParserFactory</code> and the
      <code>javax.xml.parsers.DocumentBuilderFactory</code> provide methods
      that describe the features of the parsers they can create. The
      <code>XMLParserActivator</code> activator will use these methods to set
      the values of the properties, as defined in <xref linkend="i1259424"/>,
      that describe the instances.</para>
    </section>

    <section>
      <title>Adapting an Existing JAXP Compatible Parser</title>

      <para>To incorporate this bundle activator into a XML Parser Bundle, do
      the following:</para>

      <itemizedlist>
        <listitem>
          <para>If SAX parsing is supported, create a
          <code>/META-INF/services/javax.xml.parsers.SAXParserFactory</code>
          resource file containing the class names of the
          <code>SAXParserFactory</code> classes.</para>
        </listitem>

        <listitem>
          <para>If DOM parsing is supported, create a
          <code>/META-INF/services/javax.xml.parsers.DocumentBuilderFactory</code>
          file containing the fully qualified class names of the
          <code>DocumentBuilderFactory</code> classes.</para>
        </listitem>

        <listitem>
          <para>Create manifest file which imports the packages
          <code>org.w3c.dom</code>, <code>org.xml.sax</code>, and
          <code>javax.xml.parsers</code>.</para>
        </listitem>

        <listitem>
          <para>Add a Bundle-Activator header to the manifest pointing to the
          <code>XMLParserActivator</code>, the sub-class that was created, or
          a fully custom one.</para>
        </listitem>

        <listitem>
          <para>If the parsers support attributes, properties, or features
          that should be registered as properties so they can be searched,
          extend the <code>XMLParserActivator</code> class and override <xref linkend="org.osgi.util.xml.XMLParserActivator.setSAXProperties-javax.xml.parsers.SAXParserFactory-Hashtable-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.util.xml.XMLParserActivator.setDOMProperties-javax.xml.parsers.DocumentBuilderFactory-Hashtable-" xrefstyle="hyperlink"/>.</para>
        </listitem>

        <listitem>
          <para>Ensure that custom properties are put into the
          <code>Hashtable</code> object. JAXP does not provide a way for
          <code>XMLParserActivator</code> to query the parser to find out what
          properties were added.</para>
        </listitem>

        <listitem>
          <para>Bundles that extend the <code>XMLParserActivator</code> class
          must call the original methods via super to correctly initialize the
          XML Parser Service properties.</para>
        </listitem>

        <listitem>
          <para>Compile this class into the bundle.</para>
        </listitem>

        <listitem>
          <para>Install the new XML Parser Service bundle.</para>
        </listitem>

        <listitem>
          <para>Ensure that the
          <code>org.osgi.util.xml.XMLParserActivator</code> class is contained
          in the bundle.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Usage of JAXP</title>

    <para>A single bundle should export the JAXP, SAX, and DOM APIs. The
    version of contained packages must be appropriately labeled. JAXP 1.1 or
    later is required which references SAX 2 and DOM 2. See <xref linkend="i1255594"/> for the exact version dependencies.</para>

    <para>This specification is related to related packages as defined in the
    JAXP 1.1 document. The following table contains the expected minimum
    versions.</para>

    <table>
      <title>JAXP 1.1 minimum package versions</title>

      <tgroup cols="2">
        <thead>
          <row>
            <entry>Package</entry>

            <entry>Minimum Version</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><para>javax.xml.parsers</para></entry>

            <entry><para>1.1</para></entry>
          </row>

          <row>
            <entry><para>org.xml.sax</para></entry>

            <entry><para>2.0</para></entry>
          </row>

          <row>
            <entry><para>org.xml.sax.helpers</para></entry>

            <entry><para>2.0</para></entry>
          </row>

          <row>
            <entry><para>org.xsml.sax.ext</para></entry>

            <entry><para>1.0</para></entry>
          </row>

          <row>
            <entry><para>org.w3c.dom</para></entry>

            <entry><para>2.0</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The Xerces project from the Apache group, <xref linkend="i1286146"/>, contains a number libraries that implement the
    necessary APIs. These libraries can be wrapped in a bundle to provide the
    relevant packages.</para>
  </section>

  <section>
    <title>Security</title>

    <para>A centralized XML parser is likely to see sensitive information from
    other bundles. Provisioning an XML parser should therefore be limited to
    trusted bundles. This security can be achieved by providing
    <code>ServicePermission[javax.xml.parsers.DocumentBuilderFactory</code> |
    <code>javax.xml.parsers.SAXFactory,REGISTER]</code> to only trusted
    bundles.</para>

    <para>Using an XML parser is a common function, and
    <code>ServicePermission[javax.xml.parsers.DOMParserFactory</code> |
    <code>javax.xml.parsers.SAXFactory, GET]</code> should not be
    restricted.</para>

    <para>The XML parser bundle will need <code>FilePermission[&lt;&lt;ALL
    FILES&gt;&gt;,READ]</code> for parsing of files because it is not known
    beforehand where those files will be located. This requirement further
    implies that the XML parser is a system bundle that must be fully
    trusted.</para>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.util.xml" xml:id="org.osgi.util.xml" xml:base="../../generated/javadoc/docbook/org.osgi.util.xml.xml">
   <title>org.osgi.util.xml</title>
   <info>
      <releaseinfo xml:id="org.osgi.util.xml-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.util.xml-version.number">1.0</edition>
   </info>
   <para>
XML Parser Package Version 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.util.xml; version="[1.0,2.0)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.util.xml.XMLParserActivator">
                  <code>XMLParserActivator</code>
               </link> - 
A BundleActivator class that allows any JAXP compliant XML Parser to register
 itself as an OSGi parser service.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="XMLParserActivator" xml:id="org.osgi.util.xml.XMLParserActivator">
      <title>public class XMLParserActivator<?line-break?> implements BundleActivator, ServiceFactory</title>
      <para>
A BundleActivator class that allows any JAXP compliant XML Parser to register
 itself as an OSGi parser service.
 
 Multiple JAXP compliant parsers can concurrently register by using this
 BundleActivator class. Bundles who wish to use an XML parser can then use the
 framework's service registry to locate available XML Parsers with the desired
 characteristics such as validating and namespace-aware.
 
 </para>
      <para>
 The services that this bundle activator enables a bundle to provide are:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <code>javax.xml.parsers.SAXParserFactory</code>(<link linkend="org.osgi.util.xml.XMLParserActivator.SAXFACTORYNAME">SAXFACTORYNAME</link>)</para>
         </listitem>
         <listitem>
            <para>
               <code>javax.xml.parsers.DocumentBuilderFactory</code>( <link linkend="org.osgi.util.xml.XMLParserActivator.DOMFACTORYNAME">DOMFACTORYNAME</link>
 )</para>
         </listitem>
      </itemizedlist>
      <para>
 The algorithm to find the implementations of the abstract parsers is derived
 from the JAR file specifications, specifically the Services API.
 </para>
      <para>
 An XMLParserActivator assumes that it can find the class file names of the
 factory classes in the following files:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <code>/META-INF/services/javax.xml.parsers.SAXParserFactory</code> is a file
 contained in a jar available to the runtime which contains the implementation
 class name(s) of the SAXParserFactory.</para>
         </listitem>
         <listitem>
            <para>
               <code>/META-INF/services/javax.xml.parsers.DocumentBuilderFactory</code> is a
 file contained in a jar available to the runtime which contains the
 implementation class name(s) of the <code>DocumentBuilderFactory</code>
            </para>
         </listitem>
      </itemizedlist>
      <para>
 If either of the files does not exist, <code>XMLParserActivator</code> assumes
 that the parser does not support that parser type.
 
 </para>
      <para>
         <code>XMLParserActivator</code> attempts to instantiate both the
 <code>SAXParserFactory</code> and the <code>DocumentBuilderFactory</code>. It registers
 each factory with the framework along with service properties:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.util.xml.XMLParserActivator.PARSER_VALIDATING">PARSER_VALIDATING</link>- indicates if this factory supports validating
 parsers. It's value is a <code>Boolean</code>.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.util.xml.XMLParserActivator.PARSER_NAMESPACEAWARE">PARSER_NAMESPACEAWARE</link>- indicates if this factory supports
 namespace aware parsers It's value is a <code>Boolean</code>.</para>
         </listitem>
      </itemizedlist>
      <para>
 Individual parser implementations may have additional features, properties,
 or attributes which could be used to select a parser with a filter. These can
 be added by extending this class and overriding the <code>setSAXProperties</code>
 and <code>setDOMProperties</code> methods.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="DOMCLASSFILE" xml:id="org.osgi.util.xml.XMLParserActivator.DOMCLASSFILE">
         <title>public static final String DOMCLASSFILE = "/META-INF/services/javax.xml.parsers.DocumentBuilderFactory"</title>
         <para>
Fully qualified path name of DOM Parser Factory Class Name file
   </para>
      </section>
      <section role="field" xreflabel="DOMFACTORYNAME" xml:id="org.osgi.util.xml.XMLParserActivator.DOMFACTORYNAME">
         <title>public static final String DOMFACTORYNAME = "javax.xml.parsers.DocumentBuilderFactory"</title>
         <para>
Filename containing the DOM Parser Factory Class name. Also used as the
 basis for the <code>SERVICE_PID</code> registration property.
   </para>
      </section>
      <section role="field" xreflabel="PARSER_NAMESPACEAWARE" xml:id="org.osgi.util.xml.XMLParserActivator.PARSER_NAMESPACEAWARE">
         <title>public static final String PARSER_NAMESPACEAWARE = "parser.namespaceAware"</title>
         <para>
Service property specifying if factory is configured to support namespace
 aware parsers. The value is of type <code>Boolean</code>.
   </para>
      </section>
      <section role="field" xreflabel="PARSER_VALIDATING" xml:id="org.osgi.util.xml.XMLParserActivator.PARSER_VALIDATING">
         <title>public static final String PARSER_VALIDATING = "parser.validating"</title>
         <para>
Service property specifying if factory is configured to support
 validating parsers. The value is of type <code>Boolean</code>.
   </para>
      </section>
      <section role="field" xreflabel="SAXCLASSFILE" xml:id="org.osgi.util.xml.XMLParserActivator.SAXCLASSFILE">
         <title>public static final String SAXCLASSFILE = "/META-INF/services/javax.xml.parsers.SAXParserFactory"</title>
         <para>
Fully qualified path name of SAX Parser Factory Class Name file
   </para>
      </section>
      <section role="field" xreflabel="SAXFACTORYNAME" xml:id="org.osgi.util.xml.XMLParserActivator.SAXFACTORYNAME">
         <title>public static final String SAXFACTORYNAME = "javax.xml.parsers.SAXParserFactory"</title>
         <para>
Filename containing the SAX Parser Factory Class name. Also used as the
 basis for the <code>SERVICE_PID</code> registration property.
   </para>
      </section>
      <section role="method" xreflabel="XMLParserActivator()" xml:id="org.osgi.util.xml.XMLParserActivator.XMLParserActivator--">
         <title>public  XMLParserActivator()</title>
         <para/>
      </section>
      <section role="method" xreflabel="getService(Bundle,ServiceRegistration)" xml:id="org.osgi.util.xml.XMLParserActivator.getService-Bundle-ServiceRegistration-">
         <title>public Object getService(Bundle bundle,ServiceRegistration registration)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The bundle using the service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>registration</title>
            <para>The <code>ServiceRegistration</code> object for the
        service.</para>
         </formalpara>
         <para role="description">
Creates a new XML Parser Factory object.
 
 </para>
         <para>
 A unique XML Parser Factory object is returned for each call to this
 method.
 
 </para>
         <para>
 The returned XML Parser Factory object will be configured for validating
 and namespace aware support as specified in the service properties of the
 specified ServiceRegistration object.
 
 This method can be overridden to configure additional features in the
 returned XML Parser Factory object.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new, configured XML Parser Factory object or null if a
         configuration error was encountered</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setDOMProperties(javax.xml.parsers.DocumentBuilderFactory,Hashtable)" xml:id="org.osgi.util.xml.XMLParserActivator.setDOMProperties-javax.xml.parsers.DocumentBuilderFactory-Hashtable-">
         <title>public void setDOMProperties(DocumentBuilderFactory factory,Hashtable props)</title>
         <formalpara role="parameter">
            <title>factory</title>
            <para>- the DocumentBuilderFactory object</para>
         </formalpara>
         <formalpara role="parameter">
            <title>props</title>
            <para>- Hashtable of service properties.</para>
         </formalpara>
         <para>
 Set the customizable DOM Parser Service Properties.
 
 </para>
         <para>
 This method attempts to instantiate a validating parser and a namespace
 aware parser to determine if the parser can support those features. The
 appropriate properties are then set in the specified props object.
 
 </para>
         <para>
 This method can be overridden to add additional DOM2 features and
 properties. If you want to be able to filter searches of the OSGi service
 registry, this method must put a key, value pair into the properties
 object for each feature or property. For example,
 
 properties.put("http://www.acme.com/features/foo", Boolean.TRUE);</para>
      </section>
      <section role="method" xreflabel="setSAXProperties(javax.xml.parsers.SAXParserFactory,Hashtable)" xml:id="org.osgi.util.xml.XMLParserActivator.setSAXProperties-javax.xml.parsers.SAXParserFactory-Hashtable-">
         <title>public void setSAXProperties(SAXParserFactory factory,Hashtable properties)</title>
         <formalpara role="parameter">
            <title>factory</title>
            <para>- the SAXParserFactory object</para>
         </formalpara>
         <formalpara role="parameter">
            <title>properties</title>
            <para>- the properties object for the service</para>
         </formalpara>
         <para>
 Set the customizable SAX Parser Service Properties.
 
 </para>
         <para>
 This method attempts to instantiate a validating parser and a namespace
 aware parser to determine if the parser can support those features. The
 appropriate properties are then set in the specified properties object.
 
 </para>
         <para>
 This method can be overridden to add additional SAX2 features and
 properties. If you want to be able to filter searches of the OSGi service
 registry, this method must put a key, value pair into the properties
 object for each feature or property. For example,
 
 properties.put("http://www.acme.com/features/foo", Boolean.TRUE);</para>
      </section>
      <section role="method" xreflabel="start(BundleContext)" xml:id="org.osgi.util.xml.XMLParserActivator.start-BundleContext-">
         <title>public void start(BundleContext context) throws Exception</title>
         <formalpara role="parameter">
            <title>context</title>
            <para>The execution context of the bundle being started.</para>
         </formalpara>
         <para role="description">
Called when this bundle is started so the Framework can perform the
 bundle-specific activities necessary to start this bundle. This method
 can be used to register services or to allocate any resources that this
 bundle needs.
 
 </para>
         <para>
 This method must complete and return to its caller in a timely manner.
 
 </para>
         <para>
 This method attempts to register a SAX and DOM parser with the
 Framework's service registry.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– If this method throws an exception, this
         bundle is marked as stopped and the Framework will remove this
         bundle's listeners, unregister all services registered by this
         bundle, and release all services used by this bundle.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="stop(BundleContext)" xml:id="org.osgi.util.xml.XMLParserActivator.stop-BundleContext-">
         <title>public void stop(BundleContext context) throws Exception</title>
         <formalpara role="parameter">
            <title>context</title>
            <para>The execution context of the bundle being stopped.</para>
         </formalpara>
         <para role="description">
This method has nothing to do as all active service registrations will
 automatically get unregistered when the bundle stops.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– If this method throws an exception, the
         bundle is still marked as stopped, and the Framework will remove
         the bundle's listeners, unregister all services registered by the
         bundle, and release all services used by the bundle.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="ungetService(Bundle,ServiceRegistration,Object)" xml:id="org.osgi.util.xml.XMLParserActivator.ungetService-Bundle-ServiceRegistration-Object-">
         <title>public void ungetService(Bundle bundle,ServiceRegistration registration,Object service)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The bundle releasing the service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>registration</title>
            <para>The <code>ServiceRegistration</code> object for the
        service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>service</title>
            <para>The XML Parser Factory object returned by a previous call
        to the <code>getService</code> method.</para>
         </formalpara>
         <para role="description">
Releases a XML Parser Factory object.
   </para>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed><title>XML</title>http://www.w3.org/XML</bibliomixed>

      <bibliomixed><title>SAX</title>http://www.saxproject.org/</bibliomixed>

      <bibliomixed><title>DOM Java Language
      Binding</title>http://www.w3.org/TR/REC-DOM-Level-1/java-language-binding.html</bibliomixed>

      <bibliomixed xml:id="i1255594"><title>JAXP</title>http://jaxp.java.net/</bibliomixed>

      <bibliomixed xml:id="i1267674"><title>JAR File specification, services
      directory</title>http://download.oracle.com/javase/1.4.2/docs/guide/jar/jar.html</bibliomixed>

      <bibliomixed xml:id="i1286146"><title>Xerces 2 Java
      Parser</title>http://xerces.apache.org/xerces2-j/</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="705" revision="$Id: 5e607514f22b8a60c5c87b11686afa82bc24006d $" version="5" xml:id="util.promise" xml:base="../705/util.promise.xml">
  <title>Promises Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.util.promise-version" linkend="org.osgi.util.promise"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>One of the fundamental pieces of an asynchronous programming model
    is the mechanism by which clients retrieve the result of the asynchronous
    task. Since Java 5, there has been a
    <code>java.util.concurrent.Future</code> interface available in the Java
    class libraries, which means that it is the <emphasis>de facto</emphasis>
    API in Java for handling the result of an asynchronous task. Futures have
    some limitations however in that they have no mechanism for registering
    callbacks. Java 8 introduces the class
    <code>java.util.concurrent.CompletableFuture</code> which addresses this
    but the requirement of Java 8 is unsuitable for many OSGi users at this
    time.</para>

    <para>This specification defines a Promises API which can be used on many
    versions of Java including Java 5 and Java ME CDC/Foundation. The Promises
    API defined by this specification is independent of all other OSGi
    specifications including the OSGi Framework and thus can be easily used
    outside of the OSGi environment.</para>

    <para>A Promise object holds the result of a potentially asynchronous
    task. The receiver of a Promise object can register callbacks on the
    Promise to be notified when the result is available or can block on the
    result becoming available. Promises can be chained together in powerful
    ways to handle asynchronous work flows and recovery.</para>

    <para>Promises capture the effects of latency and errors by making these
    explicit in the API signatures. Latency is represented by callbacks which
    will eventually be called. Errors are represented by the failure member.
    In essence, this is what sets Promises apart from things such as RPC calls
    where such effects are not explicitly captured but rather attempted to be
    transparently handled.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Common concepts</emphasis> - The API is inspired by
          the Promises work in JavaScript and uses the same basic concepts.
          See <xref linkend="util.promise-ref.javascript"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Independent</emphasis> - The design is independent
          of all other OSGi specifications and can be used outside of an OSGi
          environment.</para>
        </listitem>

        <listitem>
          <para><emphasis>Asynchronous</emphasis> - The design supports
          asynchronous tasks.</para>
        </listitem>

        <listitem>
          <para><emphasis>Small</emphasis> - The API and implementation are
          very compact.</para>
        </listitem>

        <listitem>
          <para><emphasis>Complete</emphasis> - The design provides a very
          complete set of operations for Promise which are primitives that can
          be used to address most use cases.</para>
        </listitem>

        <listitem>
          <para><emphasis>Monad</emphasis> - The design supports monadic
          programming. See <xref linkend="util.promise-ref.monad"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Resolution</emphasis> - A Promise can be resolved
          successfully with a value or unsuccessfully with an
          exception.</para>
        </listitem>

        <listitem>
          <para><emphasis>Generified</emphasis> - Generics are used to promote
          type safety.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Promise</emphasis> - A Promise object holds the
          eventual result of a potentially asynchronous task.</para>
        </listitem>

        <listitem>
          <para><emphasis>Callback</emphasis> - The receiver of a Promise can
          register callbacks on the Promise to be notified when the task is
          completed.</para>
        </listitem>

        <listitem>
          <para><emphasis>Deferred</emphasis> - A Deferred object represents
          the potentially asynchronous task and is used to resolve the
          Promise.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Class diagram of org.osgi.util.promise</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.227in" contentwidth="7.000in" fileref="promise-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>Promise</title>

    <para>A Promise object holds the eventual result of a potentially
    asynchronous task. A Promise is either unresolved or resolved. An
    <emphasis>unresolved</emphasis> Promise does not have the result of the
    associated task available while a <emphasis>resolved</emphasis> Promise
    has the result of the associated task available. The <xref linkend="org.osgi.util.promise.Promise.isDone--" xrefstyle="hyperlink"/>
    method must return <code>true</code> if the Promise is resolved and
    <code>false</code> if the Promise is unresolved. A Promise must only be
    resolved once.</para>

    <para>A resolved Promise can be either resolved with a value, which means
    the associated task <emphasis>completed successfully</emphasis> and
    supplied a result, or resolved with a failure, which means the associated
    task <emphasis>completed unsuccessfully</emphasis> and supplied an
    exception. The <xref linkend="org.osgi.util.promise.Promise.getFailure--" xrefstyle="hyperlink"/> method can be called to determine if the resolved
    Promise completed successfully with a value or unsuccessfully with a
    failure. If the <xref linkend="org.osgi.util.promise.Promise.getFailure--" xrefstyle="hyperlink"/> method returns a <code>Throwable</code>, the
    Promise resolved unsuccessfully with a failure. If the <xref linkend="org.osgi.util.promise.Promise.getFailure--" xrefstyle="hyperlink"/> method returns <code>null</code>, the Promise
    resolved successfully with a value that can be obtained from <xref linkend="org.osgi.util.promise.Promise.getValue--" xrefstyle="hyperlink"/>.</para>

    <para>If the Promise is unresolved, then calling <xref linkend="org.osgi.util.promise.Promise.getFailure--" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.util.promise.Promise.getValue--" xrefstyle="hyperlink"/>
    must block until the Promise is resolved. In general, these two methods
    should not be used outside of a callback. Use callbacks to be notified
    when the Promise is resolved. See <xref linkend="util.promise-callbacks"/>.</para>
  </section>

  <section>
    <title>Deferred</title>

    <para><xref linkend="org.osgi.util.promise.Promise" xrefstyle="hyperlink"/> is an interface which can allow for many Promise
    implementations. This API contains the <xref linkend="org.osgi.util.promise.Deferred" xrefstyle="hyperlink"/> class
    which provides a standard Promise implementation. A Deferred object can be
    created with the <xref linkend="org.osgi.util.promise.Deferred.Deferred--" xrefstyle="hyperlink"/> constructor and the Promise associated with the
    new Deferred object can be obtained using <xref linkend="org.osgi.util.promise.Deferred.getPromise--" xrefstyle="hyperlink"/>. This Promise can then be supplied to other
    parties who can use it to be notified of and obtain the eventual
    result.</para>

    <programlisting>public Promise&lt;String&gt; getTimeConsumingAnswer() {
  Deferred&lt;String&gt; deferred = new Deferred&lt;String&gt;();
  asynchronously(() -&gt; doTask(deferred));
  return deferred.getPromise();
}</programlisting>

    <para>A Deferred object can later be used to resolve the associated
    Promise successfully by calling <xref linkend="org.osgi.util.promise.Deferred.resolve-T-" xrefstyle="hyperlink"/> or unsuccessfully by calling <xref linkend="org.osgi.util.promise.Deferred.fail-Throwable-" xrefstyle="hyperlink"/>.</para>

    <programlisting>private void doTask(Deferred&lt;String&gt; deferred) {
  try {
    String answer = computeTimeConsumingAnswer();
    deferred.resolve(answer); // successfully resolve with value
  } catch (Exception e) {
    deferred.fail(e); // unsuccessfully resolve with exception
  }
}</programlisting>

    <para>A Deferred object can also be used to resolve the associated Promise
    with the eventual result of another Promise by calling <xref linkend="org.osgi.util.promise.Deferred.resolveWith-Promise-" xrefstyle="hyperlink"/>.</para>

    <programlisting>private void doTask(Deferred&lt;String&gt; deferred) {
  try {
    Promise&lt;String&gt; answer = getPromiseWithTheAnswer();
    deferred.resolveWith(answer); // resolve with another Promise
  } catch (Exception e) {
    deferred.fail(e); // unsuccessfully resolve with exception
  }
}</programlisting>

    <para>If <xref linkend="org.osgi.util.promise.Deferred.resolve-T-" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.util.promise.Deferred.fail-Throwable-" xrefstyle="hyperlink"/> is called when the Promise associated with the
    Deferred is already resolved, then an Illegal State Exception must be
    thrown.</para>

    <para>Care must be taken in sharing a Deferred object with other parties
    since the other parties can resolve the associated Promise. A Deferred
    object should be made available only to the party that will responsible
    for resolving the associated Promise.</para>
  </section>

  <section xml:id="util.promise-callbacks">
    <title>Callbacks</title>

    <para>To be notified when a Promise has been resolved, callbacks are used.
    The Promise API provides two forms of callbacks: the basic
    <code>Runnable</code> callback and the more specialized <xref linkend="org.osgi.util.promise.Success" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.util.promise.Failure" xrefstyle="hyperlink"/>
    callbacks.</para>

    <para>A callback may be called on a different thread than the thread which
    registered the callback. So the callback must be thread safe but can rely
    upon that the registration of the callback
    <emphasis>happens-before</emphasis> the callback is called.</para>

    <para>Resolving a Promise <emphasis>happens-before</emphasis> any
    registered callback is called. That is, for the resolved Promise, in a
    registered callback <xref linkend="org.osgi.util.promise.Promise.isDone--" xrefstyle="hyperlink"/> must return <code>true</code> and <xref linkend="org.osgi.util.promise.Promise.getValue--" xrefstyle="hyperlink"/>
    and <xref linkend="org.osgi.util.promise.Promise.getFailure--" xrefstyle="hyperlink"/> must not block.</para>

    <para>Callbacks may be registered at any time including before and after a
    Promise has been resolved. If a callback is registered before the Promise
    is resolved, it will be called later when the Promise is resolved. If a
    callback is registered on an already resolved Promise, it will be called
    right away.</para>

    <section>
      <title>Runnable</title>

      <para>The <xref linkend="org.osgi.util.promise.Promise.onResolve-Runnable-" xrefstyle="hyperlink"/> method is used to register a
      <code>Runnable</code> with the Promise which must be called when the
      Promise is resolved either successfully with a value or unsuccessfully
      with a failure. The resolved Promise is not passed to the Runnable, so
      if the Runnable implementation needs access to the resolved Promise, it
      must take care to ensure it has access.</para>

      <programlisting>final Promise&lt;String&gt; answer = getTimeConsumingAnswer();
answer.onResolve(new Runnable() {
  public void run() {
    doSomethingWithAnswer(answer);
  }
});</programlisting>

      <para>The <xref linkend="org.osgi.util.promise.Promise.onResolve-Runnable-" xrefstyle="hyperlink"/> method returns the Promise object upon which it
      is called.</para>
    </section>

    <section>
      <title>Success and Failure</title>

      <para>The <xref linkend="org.osgi.util.promise.Promise.then-Success-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.util.promise.Promise.then-Success-Failure-" xrefstyle="hyperlink"/> methods can be used to register the more
      specialized <xref linkend="org.osgi.util.promise.Success" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.util.promise.Failure" xrefstyle="hyperlink"/>
      callbacks. The <xref linkend="org.osgi.util.promise.Success" xrefstyle="hyperlink"/> callback is only called if the Promise is
      successfully resolved with a value. The <xref linkend="org.osgi.util.promise.Failure" xrefstyle="hyperlink"/> callback
      is only called if the Promise is unsuccessfully resolved with a
      failure.</para>

      <programlisting>Promise&lt;String&gt; answer = getTimeConsumingAnswer();
answer.then(p -&gt; processResult(p.getValue()), p -&gt; handleFailure(p.getFailure()));</programlisting>

      <para>The <code>then</code> methods return a new Promise which can be
      used to chain Promises together.</para>
    </section>
  </section>

  <section xml:id="util.promise-chaining.promises">
    <title>Chaining Promises</title>

    <para>The <xref linkend="org.osgi.util.promise.Promise.then-Success-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.util.promise.Promise.then-Success-Failure-" xrefstyle="hyperlink"/> methods also provide a means to chain Promises
    together. The <code>then</code> methods return a new Promise which is
    chained to the original Promise upon which the <code>then</code> method
    was called. The returned Promise must be resolved when the original
    Promise is resolved after the specified Success or Failure callback is
    executed. The result of the executed callback must be used to resolve the
    returned Promise. A sequence of calls to the <code>then</code> methods can
    be used to create a chain of promises which are resolved in
    sequence.</para>

    <para>If the original Promise is successfully resolved, the Success
    callback is executed and the Promise returned by the Success callback, if
    any, or thrown exception is used to resolve the Promise returned from the
    <code>then</code> method. If the original Promise is resolved with a
    failure, the Failure callback is executed and the Promise returned from
    the <code>then</code> method is resolved with a failure.</para>

    <para>In the following example, a Promise which will supply the name of
    the file to download is chained to a Promise which will return a mirror
    URL to use to download the file which is then further chained to a Promise
    which will return an Input Stream from which to read the download
    file.</para>

    <programlisting>Promise&lt;String&gt; name = getDownloadName();
Promise&lt;URL&gt; mirror = name.then(p -&gt; getMirror(p.getValue()));
Promise&lt;InputStream&gt; in = mirror.then(p -&gt; getStream(p.getValue()));</programlisting>

    <para>Since we probably do not need the intermediate Promises, we can
    collapse the chain into a single statement.</para>

    <programlisting>Promise&lt;InputStream&gt; in = getDownloadName().then(p -&gt; getMirror(p.getValue()))
                                           .then(p -&gt; getStream(p.getValue()));</programlisting>

    <para>The chain of Promises will also propagate any exceptions that occur
    to resolve the last Promise in the chain which means we do not need to do
    any exception handling in the intermediate tasks.</para>
  </section>

  <section xml:id="util.promise-monad.programming">
    <title>Monad</title>

    <para>The Promise API supports monadic programming. See <xref linkend="util.promise-ref.monad"/>. The <xref linkend="org.osgi.util.promise.Promise" xrefstyle="hyperlink"/> interface
    defines a number of interesting methods including <code>map</code>,
    <code>flatMap</code> and <code>filter</code>.</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.util.promise.Promise.filter-Predicate-" xrefstyle="hyperlink"/> - Filter the value of the Promise.</para>

        <para>If the Promise is successfully resolved, the predicate argument
        is called with the value of the Promise. If the predicate accepts the
        value, then the value is used to successfully resolve the Promise
        returned by the filter method. If the predicate does not accept the
        value, the Promise returned by the filter method is unsuccessfully
        resolved with a No Such Element Exception. If the predicate throws an
        exception, the Promise returned by the filter method is unsuccessfully
        resolved with that exception.</para>

        <para>If the Promise is unsuccessfully resolved, the predicate
        argument is not called and the Promise returned by the filter method
        is unsuccessfully resolved with the failure of the Promise.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.util.promise.Promise.map-Function-" xrefstyle="hyperlink"/> - Map the value of the Promise.</para>

        <para>If the Promise is successfully resolved, the function argument
        is called with the value of the Promise. The value returned by the
        function is used to successfully resolve the Promise returned by the
        map method. If the function throws an exception, the Promise returned
        by the map method is unsuccessfully resolved with that
        exception.</para>

        <para>If the Promise is unsuccessfully resolved, the function argument
        is not called and the Promise returned by the map method is
        unsuccessfully resolved with the failure of the Promise.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.util.promise.Promise.flatMap-Function-" xrefstyle="hyperlink"/> - FlatMap the value of the Promise.</para>

        <para>If the Promise is successfully resolved, the function argument
        is called with the value of the Promise. The Promise returned by the
        function is used to resolve the Promise returned by the flatMap
        method. If the function throws an exception, the Promise returned by
        the flatMap method is unsuccessfully resolved with that
        exception.</para>

        <para>If the Promise is unsuccessfully resolved, the function argument
        is not called and the Promise returned by the flatMap method is
        unsuccessfully resolved with the failure of the Promise.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.util.promise.Promise.recover-Function-" xrefstyle="hyperlink"/> - Recover from the unsuccessful resolution of
        the Promise with a recovery value.</para>

        <para>If the Promise is successfully resolved, the function argument
        is not called and the Promise returned by the recover method is
        resolved with the value of the Promise.</para>

        <para>If the Promise is unsuccessfully resolved, the function argument
        is called with the Promise to supply a recovery value. If the recovery
        value is not <code>null</code>, the Promise returned by the recover
        method is successfully resolved with the recovery value. If the
        recovery value is <code>null</code>, the Promise returned by the
        recover method is unsuccessfully resolved with the failure of the
        Promise. If the function throws an exception, the Promise returned by
        the recover method is unsuccessfully resolved with that
        exception.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.util.promise.Promise.recoverWith-Function-" xrefstyle="hyperlink"/> - Recover from the unsuccessful resolution of
        the Promise with a recovery Promise.</para>

        <para>If the Promise is successfully resolved, the function argument
        is not called and the Promise returned by the recover method is
        resolved with the value of the Promise.</para>

        <para>If the Promise is unsuccessfully resolved, the function argument
        is called with the Promise to supply a recovery Promise. If the
        recovery Promise is not <code>null</code>, the Promise returned by the
        recover method is resolved with the recovery Promise. If the recovery
        Promise is <code>null</code>, the Promise returned by the recover
        method is unsuccessfully resolved with the failure of the Promise. If
        the function throws an exception, the Promise returned by the recover
        method is unsuccessfully resolved with that exception.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.util.promise.Promise.fallbackTo-Promise-" xrefstyle="hyperlink"/> - Fall back to the value of the Promise
        argument if the Promise unsuccessfully resolves.</para>

        <para>If the Promise is successfully resolved, the Promise argument is
        not used and the Promise returned by the fallbackTo method is resolved
        with the value of the Promise.</para>

        <para>If the Promise is unsuccessfully resolved, the Promise argument
        is used to provide a fallback value when it becomes resolved. If the
        Promise argument is successfully resolved, the Promise returned by the
        fallbackTo method is resolved with the value of the Promise argument.
        If the Promise argument is unsuccessfully resolved, the Promise
        returned by the fallbackTo method is unsuccessfully resolved with the
        failure of the Promise.</para>
      </listitem>
    </itemizedlist>

    <para>These functions can be used to build pipelines of chained Promises
    that are processed in sequence. For example, in the following chain, the
    value of the original promise, once resolved, is filtered for acceptable
    values. If the filter says the value is not acceptable, the recover method
    will be used to replace it with a default value.</para>

    <programlisting>return promise.filter(v -&gt; isValueOk(v)).recover(p -&gt; getDefaultValue())</programlisting>

    <para>With these chains, one can write powerful programs without the need
    to resort to complex if/else and try/catch logic.</para>
  </section>

  <section>
    <title>Functional Interfaces</title>

    <para>In Java 8, the concept of Functional Interfaces is introduced. See
    <xref linkend="util.promise-ref.functional.interfaces"/>. Functional
    interfaces are interfaces with a single abstract method. Instances of
    functional interfaces can be created with lambda expressions, method
    references, or constructor references. Many methods on <xref linkend="org.osgi.util.promise.Promise" xrefstyle="hyperlink"/> take
    functional interface arguments and so are suitable for use with lambda
    expressions and method references in Java 8.</para>

    <para>Two of these functional interfaces are <xref linkend="org.osgi.util.function.Function" xrefstyle="hyperlink"/> and
    <xref linkend="org.osgi.util.function.Predicate" xrefstyle="hyperlink"/>.
    These are equivalent to functional interfaces which are part of the
    <code>java.util.function</code> package introduced in Java 8. Since OSGi
    intends the Promise API to be usable on versions of Java prior to Java 8,
    we define our own interfaces. In the future, if Java 8 or later, becomes
    the base supported Java level for this specification, OSGi can update the
    <xref linkend="org.osgi.util.promise.Promise" xrefstyle="hyperlink"/>
    interface to add default methods which accept the
    <code>java.util.function</code> versions of these functional
    interfaces.</para>
  </section>

  <section>
    <title>Promises Class</title>

    <para>The <xref linkend="org.osgi.util.promise.Promises" xrefstyle="hyperlink"/> class provides several useful static methods when
    working with Promises.</para>

    <para>Often, you may need to create an already resolved Promise to return
    or chain with another Promise. The <xref linkend="org.osgi.util.promise.Promises.resolved-T-" xrefstyle="hyperlink"/> method can be used to create a new Promise already
    successfully resolved with the specified value. The <xref linkend="org.osgi.util.promise.Promises.failed-Throwable-" xrefstyle="hyperlink"/> method can be used to create a new Promise already
    unsuccessfully resolved with the specified exception.</para>

    <programlisting>  return getTimeConsumingAnswer().fallbackTo(Promises.resolved("Fallback Value"));</programlisting>

    <para>The Promises class also provides the <xref linkend="org.osgi.util.promise.Promises.all-Promise...-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.util.promise.Promises.all-Collection-" xrefstyle="hyperlink"/> methods which return a new Promise that is a latch
    on the specified Promises. The returned Promise must resolve only when all
    of the specified Promises have resolved.</para>
  </section>

  <section>
    <title>Security</title>

    <para>The Promise API does not define any OSGi services nor does the API
    perform any privileged actions. Therefore, it has no security
    considerations.</para>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.util.promise" xml:id="org.osgi.util.promise" xml:base="../../generated/javadoc/docbook/org.osgi.util.promise.xml">
   <title>org.osgi.util.promise</title>
   <info>
      <releaseinfo xml:id="org.osgi.util.promise-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.util.promise-version.number">1.0</edition>
   </info>
   <para>
Promise Package Version 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.util.promise; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.util.promise; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.util.promise.Deferred">
                  <code>Deferred</code>
               </link> - 
A Deferred Promise resolution.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.util.promise.FailedPromisesException">
                  <code>FailedPromisesException</code>
               </link> - 
Promise failure exception for a collection of failed Promises.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.util.promise.Failure">
                  <code>Failure</code>
               </link> - 
Failure callback for a Promise.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.util.promise.Promise">
                  <code>Promise</code>
               </link> - 
A Promise of a value.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.util.promise.Promises">
                  <code>Promises</code>
               </link> - 
Static helper methods for <link linkend="org.osgi.util.promise.Promise">Promise</link>s.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.util.promise.Success">
                  <code>Success</code>
               </link> - 
Success callback for a Promise.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="Deferred" xml:id="org.osgi.util.promise.Deferred">
      <title>public class Deferred&lt;T&gt;</title>
      <formalpara role="parameter">
         <title>&lt;T&gt;</title>
         <para>The value type associated with the created Promise.</para>
      </formalpara>
      <para>
A Deferred Promise resolution.
 
 </para>
      <para>
 Instances of this class can be used to create a <link linkend="org.osgi.util.promise.Promise">Promise</link> that can be
 resolved in the future. The <link linkend="org.osgi.util.promise.Deferred.getPromise--">associated</link> Promise can be
 successfully resolved with <link linkend="org.osgi.util.promise.Deferred.resolve-T-">resolve(Object)</link> or resolved with a
 failure with <link linkend="org.osgi.util.promise.Deferred.fail-Throwable-">fail(Throwable)</link>. It can also be resolved with the
 resolution of another promise using <link linkend="org.osgi.util.promise.Deferred.resolveWith-Promise-">resolveWith(Promise)</link>.
 
 </para>
      <para>
 The associated Promise can be provided to any one, but the Deferred object
 should be made available only to the party that will responsible for
 resolving the Promise.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="method" xreflabel="Deferred()" xml:id="org.osgi.util.promise.Deferred.Deferred--">
         <title>public  Deferred()</title>
         <para role="description">
Create a new Deferred with an associated Promise.
   </para>
      </section>
      <section role="method" xreflabel="fail(Throwable)" xml:id="org.osgi.util.promise.Deferred.fail-Throwable-">
         <title>public void fail(Throwable failure)</title>
         <formalpara role="parameter">
            <title>failure</title>
            <para>The failure of the resolved Promise. Must not be
        <code>null</code>.</para>
         </formalpara>
         <para role="description">
Fail the Promise associated with this Deferred.
 
 </para>
         <para>
 After the associated Promise is resolved with the specified failure, all
 registered <link linkend="org.osgi.util.promise.Promise.onResolve-Runnable-">callbacks</link> are called and
 any <link linkend="org.osgi.util.promise.Promise.then-Success-Failure-">chained</link> Promises are resolved.
 
 </para>
         <para>
 Resolving the associated Promise <emphasis>happens-before</emphasis> any registered
 callback is called. That is, in a registered callback,
 <link linkend="org.osgi.util.promise.Promise.isDone--">Promise.isDone()</link> must return <code>true</code> and
 <link linkend="org.osgi.util.promise.Promise.getValue--">Promise.getValue()</link> and <link linkend="org.osgi.util.promise.Promise.getFailure--">Promise.getFailure()</link> must not
 block.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the associated Promise was already
         resolved.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getPromise()" xml:id="org.osgi.util.promise.Deferred.getPromise--">
         <title>public Promise&lt;T&gt; getPromise()</title>
         <para role="description">
Returns the Promise associated with this Deferred.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Promise associated with this Deferred.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="resolve(T)" xml:id="org.osgi.util.promise.Deferred.resolve-T-">
         <title>public void resolve(T value)</title>
         <formalpara role="parameter">
            <title>value</title>
            <para>The value of the resolved Promise.</para>
         </formalpara>
         <para role="description">
Successfully resolve the Promise associated with this Deferred.
 
 </para>
         <para>
 After the associated Promise is resolved with the specified value, all
 registered <link linkend="org.osgi.util.promise.Promise.onResolve-Runnable-">callbacks</link> are called and
 any <link linkend="org.osgi.util.promise.Promise.then-Success-Failure-">chained</link> Promises are resolved.
 
 </para>
         <para>
 Resolving the associated Promise <emphasis>happens-before</emphasis> any registered
 callback is called. That is, in a registered callback,
 <link linkend="org.osgi.util.promise.Promise.isDone--">Promise.isDone()</link> must return <code>true</code> and
 <link linkend="org.osgi.util.promise.Promise.getValue--">Promise.getValue()</link> and <link linkend="org.osgi.util.promise.Promise.getFailure--">Promise.getFailure()</link> must not
 block.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the associated Promise was already
         resolved.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="resolveWith(Promise)" xml:id="org.osgi.util.promise.Deferred.resolveWith-Promise-">
         <title>public Promise&lt;Void&gt; resolveWith(Promise&lt;? extends T&gt; with)</title>
         <formalpara role="parameter">
            <title>with</title>
            <para>A Promise whose value or failure must be used to resolve the
        associated Promise. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Resolve the Promise associated with this Deferred with the specified
 Promise.
 
 </para>
         <para>
 If the specified Promise is successfully resolved, the associated Promise
 is resolved with the value of the specified Promise. If the specified
 Promise is resolved with a failure, the associated Promise is resolved
 with the failure of the specified Promise.
 
 </para>
         <para>
 After the associated Promise is resolved with the specified Promise, all
 registered <link linkend="org.osgi.util.promise.Promise.onResolve-Runnable-">callbacks</link> are called and
 any <link linkend="org.osgi.util.promise.Promise.then-Success-Failure-">chained</link> Promises are resolved.
 
 </para>
         <para>
 Resolving the associated Promise <emphasis>happens-before</emphasis> any registered
 callback is called. That is, in a registered callback,
 <link linkend="org.osgi.util.promise.Promise.isDone--">Promise.isDone()</link> must return <code>true</code> and
 <link linkend="org.osgi.util.promise.Promise.getValue--">Promise.getValue()</link> and <link linkend="org.osgi.util.promise.Promise.getFailure--">Promise.getFailure()</link> must not
 block.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Promise that is resolved only when the associated Promise is
         resolved by the specified Promise. The returned Promise must be
         successfully resolved with the value <code>null</code>, if the
         associated Promise was resolved by the specified Promise. The
         returned Promise must be resolved with a failure of
         IllegalStateException, if the associated Promise was
         already resolved when the specified Promise was resolved.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="FailedPromisesException" xml:id="org.osgi.util.promise.FailedPromisesException">
      <title>public class FailedPromisesException<?line-break?> extends RuntimeException</title>
      <para>
Promise failure exception for a collection of failed Promises.
   </para>
      <section role="method" xreflabel="FailedPromisesException(Collection,Throwable)" xml:id="org.osgi.util.promise.FailedPromisesException.FailedPromisesException-Collection-Throwable-">
         <title>public  FailedPromisesException(Collection&lt;Promise&lt;?&gt;&gt; failed,Throwable cause)</title>
         <formalpara role="parameter">
            <title>failed</title>
            <para>A collection of Promises that have been resolved with a
        failure. Must not be <code>null</code>, must not be empty and all of
        the elements in the collection must not be <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception. This is typically the failure
        of the first Promise in the specified collection.</para>
         </formalpara>
         <para role="description">
Create a new FailedPromisesException with the specified Promises.
   </para>
      </section>
      <section role="method" xreflabel="getFailedPromises()" xml:id="org.osgi.util.promise.FailedPromisesException.getFailedPromises--">
         <title>public Collection&lt;Promise&lt;?&gt;&gt; getFailedPromises()</title>
         <para role="description">
Returns the collection of Promises that have been resolved with a
 failure.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The collection of Promises that have been resolved with a
         failure. The returned collection is unmodifiable.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Failure" xml:id="org.osgi.util.promise.Failure">
      <title>public interface Failure</title>
      <para>
Failure callback for a Promise.
 
 </para>
      <para>
 A Failure callback is registered with a <link linkend="org.osgi.util.promise.Promise">Promise</link> using the
 <link linkend="org.osgi.util.promise.Promise.then-Success-Failure-">Promise.then(Success, Failure)</link> method and is called if the Promise is
 resolved with a failure.
 
 </para>
      <para>
 This is a functional interface and can be used as the assignment target for a
 lambda expression or method reference.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="fail(Promise)" xml:id="org.osgi.util.promise.Failure.fail-Promise-">
         <title>public void fail(Promise&lt;?&gt; resolved) throws Exception</title>
         <formalpara role="parameter">
            <title>resolved</title>
            <para>The failed resolved <link linkend="org.osgi.util.promise.Promise">Promise</link>.</para>
         </formalpara>
         <para role="description">
Failure callback for a Promise.
 
 </para>
         <para>
 This method is called if the Promise with which it is registered resolves
 with a failure.
 
 </para>
         <para>
 In the remainder of this description we will refer to the Promise
 returned by <link linkend="org.osgi.util.promise.Promise.then-Success-Failure-">Promise.then(Success, Failure)</link> when this Failure
 callback was registered as the chained Promise.
 
 </para>
         <para>
 If this methods completes normally, the chained Promise must be failed
 with the same exception which failed the resolved Promise. If this method
 throws an exception, the chained Promise must be failed with the thrown
 exception.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– The chained Promise must be failed with the thrown
         exception.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Promise" xml:id="org.osgi.util.promise.Promise">
      <title>public interface Promise&lt;T&gt;</title>
      <formalpara role="parameter">
         <title>&lt;T&gt;</title>
         <para>The value type associated with this Promise.</para>
      </formalpara>
      <para>
A Promise of a value.
 
 </para>
      <para>
 A Promise represents a future value. It handles the interactions for
 asynchronous processing. A <link linkend="org.osgi.util.promise.Deferred">Deferred</link> object can be used to create a
 Promise and later resolve the Promise. A Promise is used by the caller of an
 asynchronous function to get the result or handle the error. The caller can
 either get a callback when the Promise is resolved with a value or an error,
 or the Promise can be used in chaining. In chaining, callbacks are provided
 that receive the resolved Promise, and a new Promise is generated that
 resolves based upon the result of a callback.
 
 </para>
      <para>
 Both <link linkend="org.osgi.util.promise.Promise.onResolve-Runnable-">callbacks</link> and
 <link linkend="org.osgi.util.promise.Promise.then-Success-Failure-">chaining</link> can be repeated any number of times,
 even after the Promise has been resolved.
 </para>
      <para>
 Example callback usage:
 
 </para>
      <programlisting> final Promise&lt;String&gt; foo = foo();
 foo.onResolve(new Runnable() {
   public void run() {
     System.out.println(foo.getValue());
   }
 });</programlisting>
      <para>
 
 Example chaining usage;
 
 </para>
      <programlisting> Success&lt;String,String&gt; doubler = new Success&lt;String,String&gt;() {
   public Promise&lt;String&gt; call(Promise&lt;String&gt; p) throws Exception {
     return Promises.resolved(p.getValue()+p.getValue());
   }
 };
 final Promise&lt;String&gt; foo = foo().then(doubler).then(doubler);
 foo.onResolve(new Runnable() {
   public void run() {
     System.out.println(foo.getValue());
   }
 });</programlisting>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="fallbackTo(Promise)" xml:id="org.osgi.util.promise.Promise.fallbackTo-Promise-">
         <title>public Promise&lt;T&gt; fallbackTo(Promise&lt;? extends T&gt; fallback)</title>
         <formalpara role="parameter">
            <title>fallback</title>
            <para>The Promise whose value must be used to resolve the
        returned Promise if this Promise resolves with a failure. Must not
        be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Fall back to the value of the specified Promise if this Promise fails.
 
 </para>
         <para>
 If this Promise is successfully resolved, the returned Promise must be
 resolved with the value of this Promise.
 
 </para>
         <para>
 If this Promise is resolved with a failure, the successful result of the
 specified Promise is used to resolve the returned Promise. If the
 specified Promise is resolved with a failure, the returned Promise must
 be failed with the failure of this Promise rather than the failure of the
 specified Promise.
 
 </para>
         <para>
 This method may be called at any time including before and after this
 Promise has been resolved.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Promise that returns the value of this Promise or falls back to
         the value of the specified Promise.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="filter(Predicate)" xml:id="org.osgi.util.promise.Promise.filter-Predicate-">
         <title>public Promise&lt;T&gt; filter(Predicate&lt;?&gt; predicate)</title>
         <formalpara role="parameter">
            <title>predicate</title>
            <para>The Predicate to evaluate the value of this Promise.
        Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Filter the value of this Promise.
 
 </para>
         <para>
 If this Promise is successfully resolved, the returned Promise must
 either be resolved with the value of this Promise, if the specified
 Predicate accepts that value, or failed with a
 <code>NoSuchElementException</code>, if the specified Predicate does not
 accept that value. If the specified Predicate throws an exception, the
 returned Promise must be failed with the exception.
 
 </para>
         <para>
 If this Promise is resolved with a failure, the returned Promise must be
 failed with that failure.
 
 </para>
         <para>
 This method may be called at any time including before and after this
 Promise has been resolved.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Promise that filters the value of this Promise.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="flatMap(Function)" xml:id="org.osgi.util.promise.Promise.flatMap-Function-">
         <title>public Promise&lt;R&gt; flatMap(Function&lt;?,Promise&lt;? extends R&gt;&gt; mapper)</title>
         <formalpara role="parameter">
            <title>Type Arguments</title>
            <para>
               <code>&lt;R&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;R&gt;</title>
            <para>The value type associated with the returned Promise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>mapper</title>
            <para>The Function that must flatMap the value of this Promise to
        a Promise that must be used to resolve the returned Promise. Must
        not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
FlatMap the value of this Promise.
 
 </para>
         <para>
 If this Promise is successfully resolved, the returned Promise must be
 resolved with the Promise from the specified Function as applied to the
 value of this Promise. If the specified Function throws an exception, the
 returned Promise must be failed with the exception.
 
 </para>
         <para>
 If this Promise is resolved with a failure, the returned Promise must be
 failed with that failure.
 
 </para>
         <para>
 This method may be called at any time including before and after this
 Promise has been resolved.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Promise that returns the value of this Promise as mapped by the
         specified Function.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFailure()" xml:id="org.osgi.util.promise.Promise.getFailure--">
         <title>public Throwable getFailure() throws InterruptedException</title>
         <para role="description">
Returns the failure of this Promise.
 
 </para>
         <para>
 If this Promise is not <link linkend="org.osgi.util.promise.Promise.isDone--">resolved</link>, this method must block
 and wait for this Promise to be resolved before completing.
 
 </para>
         <para>
 If this Promise was resolved with a failure, this method returns with the
 failure of this Promise. If this Promise was successfully resolved, this
 method must return <code>null</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The failure of this resolved Promise or <code>null</code> if this
         Promise was successfully resolved.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>InterruptedException</code>– If the current thread was interrupted while
         waiting.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getValue()" xml:id="org.osgi.util.promise.Promise.getValue--">
         <title>public T getValue() throws InvocationTargetException, InterruptedException</title>
         <para role="description">
Returns the value of this Promise.
 
 </para>
         <para>
 If this Promise is not <link linkend="org.osgi.util.promise.Promise.isDone--">resolved</link>, this method must block
 and wait for this Promise to be resolved before completing.
 
 </para>
         <para>
 If this Promise was successfully resolved, this method returns with the
 value of this Promise. If this Promise was resolved with a failure, this
 method must throw an <code>InvocationTargetException</code> with the
 <link linkend="org.osgi.util.promise.Promise.getFailure--">failure exception</link> as the cause.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The value of this resolved Promise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>InvocationTargetException</code>– If this Promise was resolved with a
         failure. The cause of the <code>InvocationTargetException</code> is
         the failure exception.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>InterruptedException</code>– If the current thread was interrupted while
         waiting.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isDone()" xml:id="org.osgi.util.promise.Promise.isDone--">
         <title>public boolean isDone()</title>
         <para role="description">
Returns whether this Promise has been resolved.
 
 </para>
         <para>
 This Promise may be successfully resolved or resolved with a failure.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this Promise was resolved either successfully or
         with a failure; <code>false</code> if this Promise is unresolved.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="map(Function)" xml:id="org.osgi.util.promise.Promise.map-Function-">
         <title>public Promise&lt;R&gt; map(Function&lt;?,? extends R&gt; mapper)</title>
         <formalpara role="parameter">
            <title>Type Arguments</title>
            <para>
               <code>&lt;R&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;R&gt;</title>
            <para>The value type associated with the returned Promise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>mapper</title>
            <para>The Function that must map the value of this Promise to the
        value that must be used to resolve the returned Promise. Must not
        be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Map the value of this Promise.
 
 </para>
         <para>
 If this Promise is successfully resolved, the returned Promise must be
 resolved with the value of specified Function as applied to the value of
 this Promise. If the specified Function throws an exception, the returned
 Promise must be failed with the exception.
 
 </para>
         <para>
 If this Promise is resolved with a failure, the returned Promise must be
 failed with that failure.
 
 </para>
         <para>
 This method may be called at any time including before and after this
 Promise has been resolved.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Promise that returns the value of this Promise as mapped by the
         specified Function.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="onResolve(Runnable)" xml:id="org.osgi.util.promise.Promise.onResolve-Runnable-">
         <title>public Promise&lt;T&gt; onResolve(Runnable callback)</title>
         <formalpara role="parameter">
            <title>callback</title>
            <para>A callback to be called when this Promise is resolved.
        Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Register a callback to be called when this Promise is resolved.
 
 </para>
         <para>
 The specified callback is called when this Promise is resolved either
 successfully or with a failure.
 
 </para>
         <para>
 This method may be called at any time including before and after this
 Promise has been resolved.
 
 </para>
         <para>
 Resolving this Promise <emphasis>happens-before</emphasis> any registered callback is
 called. That is, in a registered callback, <link linkend="org.osgi.util.promise.Promise.isDone--">isDone()</link> must return
 <code>true</code> and <link linkend="org.osgi.util.promise.Promise.getValue--">getValue()</link> and <link linkend="org.osgi.util.promise.Promise.getFailure--">getFailure()</link> must not
 block.
 
 </para>
         <para>
 A callback may be called on a different thread than the thread which
 registered the callback. So the callback must be thread safe but can rely
 upon that the registration of the callback <emphasis>happens-before</emphasis> the
 registered callback is called.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>This Promise.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="recover(Function)" xml:id="org.osgi.util.promise.Promise.recover-Function-">
         <title>public Promise&lt;T&gt; recover(Function&lt;Promise&lt;?&gt;,? extends T&gt; recovery)</title>
         <formalpara role="parameter">
            <title>recovery</title>
            <para>If this Promise resolves with a failure, the specified
        Function is called to produce a recovery value to be used to
        resolve the returned Promise. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Recover from a failure of this Promise with a recovery value.
 
 </para>
         <para>
 If this Promise is successfully resolved, the returned Promise must be
 resolved with the value of this Promise.
 
 </para>
         <para>
 If this Promise is resolved with a failure, the specified Function is
 applied to this Promise to produce a recovery value.
 </para>
         <itemizedlist>
            <listitem>
               <para>If the recovery value is not <code>null</code>, the returned Promise must
 be resolved with the recovery value.</para>
            </listitem>
            <listitem>
               <para>If the recovery value is <code>null</code>, the returned Promise must be
 failed with the failure of this Promise.</para>
            </listitem>
            <listitem>
               <para>If the specified Function throws an exception, the returned Promise
 must be failed with that exception.</para>
            </listitem>
         </itemizedlist>
         <para>
 To recover from a failure of this Promise with a recovery value of
 <code>null</code>, the <link linkend="org.osgi.util.promise.Promise.recoverWith-Function-">recoverWith(Function)</link> method must be used. The
 specified Function for <link linkend="org.osgi.util.promise.Promise.recoverWith-Function-">recoverWith(Function)</link> can return
 <code>Promises.resolved(null)</code> to supply the desired <code>null</code> value.
 
 </para>
         <para>
 This method may be called at any time including before and after this
 Promise has been resolved.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Promise that resolves with the value of this Promise or
         recovers from the failure of this Promise.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="recoverWith(Function)" xml:id="org.osgi.util.promise.Promise.recoverWith-Function-">
         <title>public Promise&lt;T&gt; recoverWith(Function&lt;Promise&lt;?&gt;,Promise&lt;? extends T&gt;&gt; recovery)</title>
         <formalpara role="parameter">
            <title>recovery</title>
            <para>If this Promise resolves with a failure, the specified
        Function is called to produce a recovery Promise to be used to
        resolve the returned Promise. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Recover from a failure of this Promise with a recovery Promise.
 
 </para>
         <para>
 If this Promise is successfully resolved, the returned Promise must be
 resolved with the value of this Promise.
 
 </para>
         <para>
 If this Promise is resolved with a failure, the specified Function is
 applied to this Promise to produce a recovery Promise.
 </para>
         <itemizedlist>
            <listitem>
               <para>If the recovery Promise is not <code>null</code>, the returned Promise
 must be resolved with the recovery Promise.</para>
            </listitem>
            <listitem>
               <para>If the recovery Promise is <code>null</code>, the returned Promise must be
 failed with the failure of this Promise.</para>
            </listitem>
            <listitem>
               <para>If the specified Function throws an exception, the returned Promise
 must be failed with that exception.</para>
            </listitem>
         </itemizedlist>
         <para>
 This method may be called at any time including before and after this
 Promise has been resolved.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Promise that resolves with the value of this Promise or
         recovers from the failure of this Promise.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="then(Success,Failure)" xml:id="org.osgi.util.promise.Promise.then-Success-Failure-">
         <title>public Promise&lt;R&gt; then(Success&lt;?,? extends R&gt; success,Failure failure)</title>
         <formalpara role="parameter">
            <title>Type Arguments</title>
            <para>
               <code>&lt;R&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;R&gt;</title>
            <para>The value type associated with the returned Promise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>success</title>
            <para>A Success callback to be called when this Promise is
        successfully resolved. May be <code>null</code> if no Success callback
        is required. In this case, the returned Promise must be resolved
        with the value <code>null</code> when this Promise is successfully
        resolved.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>failure</title>
            <para>A Failure callback to be called when this Promise is
        resolved with a failure. May be <code>null</code> if no Failure
        callback is required.</para>
         </formalpara>
         <para role="description">
Chain a new Promise to this Promise with Success and Failure callbacks.
 
 </para>
         <para>
 The specified <link linkend="org.osgi.util.promise.Success">Success</link> callback is called when this Promise is
 successfully resolved and the specified <link linkend="org.osgi.util.promise.Failure">Failure</link> callback is
 called when this Promise is resolved with a failure.
 
 </para>
         <para>
 This method returns a new Promise which is chained to this Promise. The
 returned Promise must be resolved when this Promise is resolved after the
 specified Success or Failure callback is executed. The result of the
 executed callback must be used to resolve the returned Promise. Multiple
 calls to this method can be used to create a chain of promises which are
 resolved in sequence.
 
 </para>
         <para>
 If this Promise is successfully resolved, the Success callback is
 executed and the result Promise, if any, or thrown exception is used to
 resolve the returned Promise from this method. If this Promise is
 resolved with a failure, the Failure callback is executed and the
 returned Promise from this method is failed.
 
 </para>
         <para>
 This method may be called at any time including before and after this
 Promise has been resolved.
 
 </para>
         <para>
 Resolving this Promise <emphasis>happens-before</emphasis> any registered callback is
 called. That is, in a registered callback, <link linkend="org.osgi.util.promise.Promise.isDone--">isDone()</link> must return
 <code>true</code> and <link linkend="org.osgi.util.promise.Promise.getValue--">getValue()</link> and <link linkend="org.osgi.util.promise.Promise.getFailure--">getFailure()</link> must not
 block.
 
 </para>
         <para>
 A callback may be called on a different thread than the thread which
 registered the callback. So the callback must be thread safe but can rely
 upon that the registration of the callback <emphasis>happens-before</emphasis> the
 registered callback is called.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new Promise which is chained to this Promise. The returned
         Promise must be resolved when this Promise is resolved after the
         specified Success or Failure callback, if any, is executed.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="then(Success)" xml:id="org.osgi.util.promise.Promise.then-Success-">
         <title>public Promise&lt;R&gt; then(Success&lt;?,? extends R&gt; success)</title>
         <formalpara role="parameter">
            <title>Type Arguments</title>
            <para>
               <code>&lt;R&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;R&gt;</title>
            <para>The value type associated with the returned Promise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>success</title>
            <para>A Success callback to be called when this Promise is
        successfully resolved. May be <code>null</code> if no Success callback
        is required. In this case, the returned Promise must be resolved
        with the value <code>null</code> when this Promise is successfully
        resolved.</para>
         </formalpara>
         <para role="description">
Chain a new Promise to this Promise with a Success callback.
 
 </para>
         <para>
 This method performs the same function as calling
 <link linkend="org.osgi.util.promise.Promise.then-Success-Failure-">then(Success, Failure)</link> with the specified Success callback and
 <code>null</code> for the Failure callback.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new Promise which is chained to this Promise. The returned
         Promise must be resolved when this Promise is resolved after the
         specified Success, if any, is executed.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.util.promise.Promise.then-Success-Failure-">then(Success, Failure)</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Promises" xml:id="org.osgi.util.promise.Promises">
      <title>public class Promises</title>
      <para>
Static helper methods for <link linkend="org.osgi.util.promise.Promise">Promise</link>s.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="all(Collection)" xml:id="org.osgi.util.promise.Promises.all-Collection-">
         <title>public static Promise&lt;List&lt;T&gt;&gt; all(Collection&lt;Promise&lt;S&gt;&gt; promises)</title>
         <formalpara role="parameter">
            <title>Type Arguments</title>
            <para>
               <code>&lt;T,S extends T&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;T&gt;</title>
            <para>The value type of the List value associated with the returned
        Promise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;S&gt;</title>
            <para>A subtype of the value type of the List value associated with
        the returned Promise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>promises</title>
            <para>The Promises which must be resolved before the returned
        Promise must be resolved. Must not be <code>null</code> and all of the
        elements in the collection must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Create a new Promise that is a latch on the resolution of the specified
 Promises.
 
 </para>
         <para>
 The new Promise acts as a gate and must be resolved after all of the
 specified Promises are resolved.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Promise that is resolved only when all the specified Promises
         are resolved. The returned Promise must be successfully resolved
         with a List of the values in the order of the specified Promises
         if all the specified Promises are successfully resolved. The List
         in the returned Promise is the property of the caller and is
         modifiable. The returned Promise must be resolved with a failure
         of <link linkend="org.osgi.util.promise.FailedPromisesException">FailedPromisesException</link> if any of the specified
         Promises are resolved with a failure. The failure
         <link linkend="org.osgi.util.promise.FailedPromisesException">FailedPromisesException</link> must contain all of the specified
         Promises which resolved with a failure.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="all(Promise...)" xml:id="org.osgi.util.promise.Promises.all-Promise...-">
         <title>public static Promise&lt;List&lt;T&gt;&gt; all(Promise&lt;? extends T&gt; ... promises)</title>
         <formalpara role="parameter">
            <title>Type Arguments</title>
            <para>
               <code>&lt;T&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;T&gt;</title>
            <para>The value type associated with the specified Promises.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>promises</title>
            <para>The Promises which must be resolved before the returned
        Promise must be resolved. Must not be <code>null</code> and all of the
        arguments must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Create a new Promise that is a latch on the resolution of the specified
 Promises.
 
 </para>
         <para>
 The new Promise acts as a gate and must be resolved after all of the
 specified Promises are resolved.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Promise that is resolved only when all the specified Promises
         are resolved. The returned Promise must be successfully resolved
         with a List of the values in the order of the specified Promises
         if all the specified Promises are successfully resolved. The List
         in the returned Promise is the property of the caller and is
         modifiable. The returned Promise must be resolved with a failure
         of <link linkend="org.osgi.util.promise.FailedPromisesException">FailedPromisesException</link> if any of the specified
         Promises are resolved with a failure. The failure
         <link linkend="org.osgi.util.promise.FailedPromisesException">FailedPromisesException</link> must contain all of the specified
         Promises which resolved with a failure.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="failed(Throwable)" xml:id="org.osgi.util.promise.Promises.failed-Throwable-">
         <title>public static Promise&lt;T&gt; failed(Throwable failure)</title>
         <formalpara role="parameter">
            <title>Type Arguments</title>
            <para>
               <code>&lt;T&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;T&gt;</title>
            <para>The value type associated with the returned Promise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>failure</title>
            <para>The failure of the resolved Promise. Must not be
        <code>null</code>.</para>
         </formalpara>
         <para role="description">
Create a new Promise that has been resolved with the specified failure.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new Promise that has been resolved with the specified failure.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="resolved(T)" xml:id="org.osgi.util.promise.Promises.resolved-T-">
         <title>public static Promise&lt;T&gt; resolved(T value)</title>
         <formalpara role="parameter">
            <title>Type Arguments</title>
            <para>
               <code>&lt;T&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;T&gt;</title>
            <para>The value type associated with the returned Promise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>value</title>
            <para>The value of the resolved Promise.</para>
         </formalpara>
         <para role="description">
Create a new Promise that has been resolved with the specified value.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new Promise that has been resolved with the specified value.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Success" xml:id="org.osgi.util.promise.Success">
      <title>public interface Success&lt;T,R&gt;</title>
      <formalpara role="parameter">
         <title>&lt;T&gt;</title>
         <para>The value type of the resolved Promise passed as input to this
        callback.</para>
      </formalpara>
      <formalpara role="parameter">
         <title>&lt;R&gt;</title>
         <para>The value type of the returned Promise from this callback.</para>
      </formalpara>
      <para>
Success callback for a Promise.
 
 </para>
      <para>
 A Success callback is registered with a <link linkend="org.osgi.util.promise.Promise">Promise</link> using the
 <link linkend="org.osgi.util.promise.Promise.then-Success-">Promise.then(Success)</link> method and is called if the Promise is resolved
 successfully.
 
 </para>
      <para>
 This is a functional interface and can be used as the assignment target for a
 lambda expression or method reference.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="call(Promise)" xml:id="org.osgi.util.promise.Success.call-Promise-">
         <title>public Promise&lt;R&gt; call(Promise&lt;T&gt; resolved) throws Exception</title>
         <formalpara role="parameter">
            <title>resolved</title>
            <para>The successfully resolved <link linkend="org.osgi.util.promise.Promise">Promise</link>.</para>
         </formalpara>
         <para role="description">
Success callback for a Promise.
 
 </para>
         <para>
 This method is called if the Promise with which it is registered resolves
 successfully.
 
 </para>
         <para>
 In the remainder of this description we will refer to the Promise
 returned by this method as the returned Promise and the Promise returned
 by <link linkend="org.osgi.util.promise.Promise.then-Success-">Promise.then(Success)</link> when this Success callback was
 registered as the chained Promise.
 
 </para>
         <para>
 If the returned Promise is <code>null</code> then the chained Promise must
 resolve immediately with a successful value of <code>null</code>. If the
 returned Promise is not <code>null</code> then the chained Promise must be
 resolved when the returned Promise is resolved.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Promise to use to resolve the chained Promise, or
         <code>null</code> if the chained Promise is to be resolved immediately
         with the value <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– The chained Promise must be failed with the thrown
         exception.   </para>
         </formalpara>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.util.function" xml:id="org.osgi.util.function" xml:base="../../generated/javadoc/docbook/org.osgi.util.function.xml">
   <title>org.osgi.util.function</title>
   <info>
      <releaseinfo xml:id="org.osgi.util.function-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.util.function-version.number">1.0</edition>
   </info>
   <para>
Function Package Version 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.util.function; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.util.function; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.util.function.Function">
                  <code>Function</code>
               </link> - 
A function that accepts a single argument and produces a result.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.util.function.Predicate">
                  <code>Predicate</code>
               </link> - 
A predicate that accepts a single argument and produces a boolean result.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="Function" xml:id="org.osgi.util.function.Function">
      <title>public interface Function&lt;T,R&gt;</title>
      <formalpara role="parameter">
         <title>&lt;T&gt;</title>
         <para>The type of the function input.</para>
      </formalpara>
      <formalpara role="parameter">
         <title>&lt;R&gt;</title>
         <para>The type of the function output.</para>
      </formalpara>
      <para>
A function that accepts a single argument and produces a result.

 </para>
      <para>
 This is a functional interface and can be used as the assignment target for a
 lambda expression or method reference.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="apply(T)" xml:id="org.osgi.util.function.Function.apply-T-">
         <title>public R apply(T t)</title>
         <formalpara role="parameter">
            <title>t</title>
            <para>The input to this function.</para>
         </formalpara>
         <para role="description">
Applies this function to the specified argument.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The output of this function.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Predicate" xml:id="org.osgi.util.function.Predicate">
      <title>public interface Predicate&lt;T&gt;</title>
      <formalpara role="parameter">
         <title>&lt;T&gt;</title>
         <para>The type of the predicate input.</para>
      </formalpara>
      <para>
A predicate that accepts a single argument and produces a boolean result.

 </para>
      <para>
 This is a functional interface and can be used as the assignment target for a
 lambda expression or method reference.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="test(T)" xml:id="org.osgi.util.function.Predicate.test-T-">
         <title>public boolean test(T t)</title>
         <formalpara role="parameter">
            <title>t</title>
            <para>The input to this predicate.</para>
         </formalpara>
         <para role="description">
Evaluates this predicate on the specified argument.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the specified argument is accepted by this
         predicate; <code>false</code> otherwise.</para>
         </formalpara>
      </section>
   </section>
</section>

  <section xml:id="util.promise.references">
    <title>References</title>

    <bibliolist>
      <bibliomixed><title>JavaScript
      Promises</title>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</bibliomixed>

      <bibliomixed xml:id="util.promise-ref.javascript"><title>JavaScript
      Promises</title>http://www.html5rocks.com/en/tutorials/es6/promises/</bibliomixed>

      <bibliomixed><title>ECMAScript 6
      drafts</title>http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts</bibliomixed>

      <bibliomixed xml:id="util.promise-ref.monad"><title>Monad</title>https://en.wikipedia.org/wiki/Monad_%28functional_programming%29</bibliomixed>

      <bibliomixed xml:id="util.promise-ref.functional.interfaces"><title>Function
      Interfaces</title>http://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.8</bibliomixed>
    </bibliolist>
  </section>
</chapter>
</book>