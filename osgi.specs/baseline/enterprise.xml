<?xml version="1.0" encoding="utf-8"?><book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:ns4="http://www.w3.org/2000/svg" xmlns:ns3="http://www.w3.org/1998/Math/MathML" xmlns:ns="http://docbook.org/ns/docbook" revision="$Id: 9d2432c27b022576005134f0710e5a2239afbabd $" status="final" version="5" xml:id="enterprise.book">
  <info>
    <title>OSGi Enterprise</title>

    <author>
      <orgname>The OSGi Alliance</orgname>
    </author>

    <releaseinfo xml:id="enterprise.book-release">Release 6</releaseinfo>

    <pubdate>July 2015</pubdate>

    <copyright>
      <year>2000, 2015</year>

      <holder>OSGi Alliance</holder>
    </copyright>
  </info>

  <preface xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" condition="draft" revision="$Id: 688841e939d5ee27edfcf79c20af9125b97ca93f $" role="frontmatter" version="5" xml:base="../license/distribution.feedback.license.2.0.xml">
  <title>Distribution and Feedback License, Version 2.0</title>

  <section>
    <title>License Grant</title>

    <para>The OSGi Alliance hereby grants you a limited copyright license to
    copy and display this document (the "Distribution") in any medium without
    fee or royalty. This Distribution license is exclusively for the purpose
    of reviewing and providing feedback to the OSGi Alliance. You agree not to
    modify the Distribution in any way and further agree to not participate in
    any way in the making of derivative works thereof, other than as a
    necessary result of reviewing and providing feedback to the Distribution.
    You also agree to cause this notice, along with the accompanying consent,
    to be included on all copies (or portions thereof) of the Distribution.
    The OSGi Alliance also grants you a perpetual, non-exclusive, worldwide,
    fully paid-up, royalty free, limited license (without the right to
    sublicense) under any applicable copyrights, to create and/or distribute
    an implementation of the Distribution that: (i) fully implements the
    Distribution including all its required interfaces and functionality; (ii)
    does not modify, subset, superset or otherwise extend the OSGi Name Space,
    or include any public or protected packages, classes, Java interfaces,
    fields or methods within the OSGi Name Space other than those required and
    authorized by the Distribution. An implementation that does not satisfy
    limitations (i)-(ii) is not considered an implementation of the
    Distribution, does not receive the benefits of this license, and must not
    be described as an implementation of the Distribution. "OSGi Name Space"
    shall mean the public class or interface declarations whose names begin
    with "org.osgi" or any recognized successors or replacements thereof. The
    OSGi Alliance expressly reserves all rights not granted pursuant to these
    limited copyright licenses including termination of the license at will at
    any time.</para>

    <para>EXCEPT FOR THE LIMITED COPYRIGHT LICENSES GRANTED ABOVE, THE OSGi
    ALLIANCE DOES NOT GRANT, EITHER EXPRESSLY OR IMPLIEDLY, A LICENSE TO ANY
    INTELLECTUAL PROPERTY IT, OR ANY THIRD PARTIES, OWN OR CONTROL. Title to
    the copyright in the Distribution will at all times remain with the OSGi
    Alliance. The example companies, organizations, products, domain names,
    e-mail addresses, logos, people, places, and events depicted therein are
    fictitious. No association with any real company, organization, product,
    domain name, email address, logo, person, place, or event is intended or
    should be inferred.</para>

    <para>THE DISTRIBUTION IS PROVIDED "AS IS," AND THE OSGi ALLIANCE
    (INCLUDING ANY THIRD PARTIES THAT HAVE CONTRIBUTED TO THE DISTRIBUTION)
    MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, BUT
    NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    PURPOSE, NON-INFRINGEMENT, OR TITLE; THAT THE CONTENTS OF THE DISTRIBUTION
    ARE SUITABLE FOR ANY PURPOSE; NOR THAT THE IMPLEMENTATION OF SUCH CONTENTS
    WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER
    RIGHTS.</para>

    <para>NEITHER THE OSGi ALLIANCE NOR ANY THIRD PARTY WILL BE LIABLE FOR ANY
    DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT
    OF OR RELATING TO ANY USE OR DISTRIBUTION OF THE DISTRIBUTION.</para>

    <para>Implementation of certain elements of this Distribution may be
    subject to third party intellectual property rights, including without
    limitation, patent rights (such a third party may or may not be a member
    of the OSGi Alliance). The OSGi Alliance is not responsible and shall not
    be held responsible in any manner for identifying or failing to identify
    any or all such third party intellectual property rights.</para>

    <para>The Distribution is a draft. As a result, the final product may
    change substantially by the time of final publication, and you are
    cautioned against relying on the content of this Distribution. You are
    encouraged to update any implementation of the Distribution if and when
    such Distribution becomes a final specification.</para>

    <para>The OSGi Alliance is willing to receive input, suggestions and other
    feedback ("Feedback") on the Distribution. By providing such Feedback to
    the OSGi Alliance, you grant to the OSGi Alliance and all its Members a
    non-exclusive, non-transferable, worldwide, perpetual, irrevocable,
    royalty-free copyright license to copy, publish, license, modify,
    sublicense or otherwise distribute and exploit your Feedback for any
    purpose. Likewise, if incorporation of your Feedback would cause an
    implementation of the Distribution, including as it may be modified,
    amended, or published at any point in the future ("Future Specification"),
    to necessarily infringe a patent or patent application that you own or
    control, you hereby commit to grant to all implementers of such
    Distribution or Future Specification an irrevocable, worldwide,
    sublicenseable, royalty free license under such patent or patent
    application to make, have made, use, sell, offer for sale, import and
    export products or services that implement such Distribution or Future
    Specification. You warrant that (a) to the best of your knowledge you have
    the right to provide this Feedback, and if you are providing Feedback on
    behalf of a company, you have the rights to provide Feedback on behalf of
    your company; (b) the Feedback is not confidential to you and does not
    violate the copyright or trade secret interests of another; and (c) to the
    best of your knowledge, use of the Feedback would not cause an
    implementation of the Distribution or a Future Specification to
    necessarily infringe any third-party patent or patent application known to
    you. You also acknowledge that the OSGi Alliance is not required to
    incorporate your Feedback into any version of the Distribution or a Future
    Specification.</para>

    <para>I HEREBY ACKNOWLEDGE AND AGREE TO THE TERMS AND CONDITIONS
    DELINEATED ABOVE.</para>
  </section>

  <section role="trademarks">
    <title>Trademarks</title>

    <para>OSGi™ is a trademark, registered trademark, or service mark of the
    OSGi Alliance in the US and other countries. Java is a trademark,
    registered trademark, or service mark of Oracle Corporation in the US and
    other countries. All other trademarks, registered trademarks, or service
    marks used in this document are the property of their respective owners
    and are hereby recognized.</para>
  </section>

  <section role="feedback">
    <title>Feedback</title>

    <para>This specification can be downloaded from the OSGi Alliance web
    site:</para>

    <programlisting>http://www.osgi.org</programlisting>

    <para>Comments about this specification can be raised at:</para>

    <programlisting>https://osgi.org/bugzilla/</programlisting>
  </section>
</preface>

  <preface xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" condition="final" revision="$Id: 7e570e2ddb2ae6191b2ec88b07ec764f074f8a77 $" role="frontmatter" version="5" xml:base="../license/osgi.specification.license.2.0.xml">
  <title>OSGi Specification License, Version 2.0</title>

  <section>
    <title>License Grant</title>

    <para>OSGi Alliance ("OSGi") hereby grants you a fully-paid,
    non-exclusive, non-transferable, worldwide, limited license (without the
    right to sublicense), under OSGi's applicable intellectual property rights
    to view, download, and reproduce this OSGi Specification ("Specification")
    which follows this License Agreement ("Agreement"). You are not authorized
    to create any derivative work of the Specification. However, to the extent
    that an implementation of the Specification would necessarily be a
    derivative work of the Specification, OSGi also grants you a perpetual,
    non-exclusive, worldwide, fully paid-up, royalty free, limited license
    (without the right to sublicense) under any applicable copyrights, to
    create and/or distribute an implementation of the Specification that: (i)
    fully implements the Specification including all its required interfaces
    and functionality; (ii) does not modify, subset, superset or otherwise
    extend the OSGi Name Space, or include any public or protected packages,
    classes, Java interfaces, fields or methods within the OSGi Name Space
    other than those required and authorized by the Specification. An
    implementation that does not satisfy limitations (i)-(ii) is not
    considered an implementation of the Specification, does not receive the
    benefits of this license, and must not be described as an implementation
    of the Specification. An implementation of the Specification must not
    claim to be a compliant implementation of the Specification unless it
    passes the OSGi Compliance Tests for the Specification in accordance with
    OSGi processes. "OSGi Name Space" shall mean the public class or interface
    declarations whose names begin with "org.osgi" or any recognized
    successors or replacements thereof.</para>

    <para>OSGi Participants (as such term is defined in the OSGi Intellectual
    Property Rights Policy) have made non-assert and licensing commitments
    regarding patent claims necessary to implement the Specification, if any,
    under the OSGi Intellectual Property Rights Policy which is available for
    examination on the OSGi public web site (www.osgi.org).</para>
  </section>

  <section>
    <title>No Warranties and Limitation of Liability</title>

    <para>THE SPECIFICATION IS PROVIDED "AS IS," AND OSGi AND ANY OTHER
    AUTHORS MAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED,
    INCLUDING, BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR
    A PARTICULAR PURPOSE, NON-INFRINGEMENT, OR TITLE; THAT THE CONTENTS OF THE
    SPECIFICATION ARE SUITABLE FOR ANY PURPOSE; NOR THAT THE IMPLEMENTATION OF
    SUCH CONTENTS WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS,
    TRADEMARKS OR OTHER RIGHTS. OSGi AND ANY OTHER AUTHORS WILL NOT BE LIABLE
    FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
    ARISING OUT OF ANY USE OF THE SPECIFICATION OR THE PERFORMANCE OR
    IMPLEMENTATION OF THE CONTENTS THEREOF.</para>
  </section>

  <section>
    <title>Covenant Not to Assert</title>

    <para>As a material condition to this license you hereby agree, to the
    extent that you have any patent claims which are necessarily infringed by
    an implementation of the Specification, not to assert any such patent
    claims against the creation, distribution or use of an implementation of
    the Specification.</para>
  </section>

  <section>
    <title>General</title>

    <para>The name and trademarks of OSGi or any other Authors may NOT be used
    in any manner, including advertising or publicity pertaining to the
    Specification or its contents without specific, written prior permission.
    Title to copyright in the Specification will at all times remain with
    OSGi.</para>

    <para>No other rights are granted by implication, estoppel or
    otherwise.</para>
  </section>

  <section role="trademarks">
    <title>Trademarks</title>

    <para>OSGi™ is a trademark, registered trademark, or service mark of the
    OSGi Alliance in the US and other countries. Java is a trademark,
    registered trademark, or service mark of Oracle Corporation in the US and
    other countries. All other trademarks, registered trademarks, or service
    marks used in this document are the property of their respective owners
    and are hereby recognized.</para>
  </section>

  <section role="feedback">
    <title>Feedback</title>

    <para>This specification can be downloaded from the OSGi Alliance web
    site:</para>

    <programlisting>http://www.osgi.org</programlisting>

    <para>Comments about this specification can be raised at:</para>

    <programlisting>https://osgi.org/bugzilla/</programlisting>
  </section>
</preface>

  <chapter label="1" revision="$Id: 3190b510d520b56008843b711dec5ced0670dc72 $" version="5" xml:base="001/introduction.xml">
  <title>Introduction</title>

  <para>The OSGi Enterprise Expert Group (EEG) is chartered to define the
  technical requirements and specifications to tailor and extend the OSGi
  framework to address information technology software infrastructure use
  cases found in enterprise scenarios.</para>

  <para>The EEG technical areas of concern include:</para>

  <itemizedlist>
    <listitem>
      <para>Scaling, including multi-container and multi-process
      environments</para>
    </listitem>

    <listitem>
      <para>Distributed and/or federated service model for:</para>

      <itemizedlist>
        <listitem>
          <para>Multiple OSGi frameworks</para>
        </listitem>

        <listitem>
          <para>External, heterogeneous systems</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>Requirements for extensions to the OSGi publish/find/bind service
      model</para>
    </listitem>

    <listitem>
      <para>Enterprise-class life cycle and configuration management</para>
    </listitem>

    <listitem>
      <para>Integration of established Java EE technology into OSGi</para>
    </listitem>
  </itemizedlist>

  <para>This specification is based on <xref linkend="intro.core.release" xrefstyle="template:%t"/>. The specification combines previously published,
  as well as new, OSGi services that address the common use cases of
  enterprise application and application server developers. It serves as a
  first reference point for the suggested audience when considering the use of
  OSGi in their environment to fulfill their own needs or to better serve the
  needs of their customers. This collection of services is taken from the
  complete set of available specifications and narrowed down to what can be
  relevant to the enterprise domain.</para>

  <para>The services of the Enterprise Specification have been designed to
  integrate with OSGi and cooperate with each other. None of the listed
  service specifications is mandatory; all service specifications are
  optional. However, services provided must follow their specification
  completely.</para>

  <para>It is not suggested, or expected, that an enterprise solution will
  incorporate support for all listed specifications, instead a customized
  subset to satisfy the requirements at hand is recommended. A solution can
  further include other core and compendium services that are not listed as
  part of the Enterprise Specification. The selection of appropriate services
  should be driven by requirements and use cases.</para>

  <para>The Enterprise Specification includes the recommended specifications
  for a number of areas. Together they address use-cases found in the
  enterprise context and provide a powerful set of tools to build enterprise
  OSGi deployments.</para>

  <para>These Enterprise Specification areas are described in the following
  sections.</para>

  <section>
    <title>Overview of Services</title>

    <section>
      <title>Component Models</title>

      <para>While the OSGi framework API is relatively simple to use, it is
      still considered infrastructure that can bleed into the application code
      of a bundle. This Enterprise Specification therefore provides multiple,
      interoperable, Dependency Injection based component models. These DI
      models ensure decoupling of the application code from the OSGi APIs;
      they provide an OSGi bundle programming model with minimal
      implementation dependencies and virtually no accidental complexity in
      the Java code. Both models provide support for handling the life cycle
      of services, albeit in different ways. These component models are the
      Declarative Services Specification and the Blueprint Container
      Specification:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Declarative Services Specification</emphasis> - The
          Declarative Services specification provides dependency injection for
          services. It handles the service life cycle dynamics by notifying
          the component or managing the component's life cycle. See chapter
          <xref linkend="service.component"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Blueprint Container Specification</emphasis> - The
          Blueprint Container is derived from the Spring Dynamic Module
          project. It provides a general DI framework; services are supported
          by proxying them and damping their life cycle. See chapter <xref linkend="service.blueprint"/>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Distributed Services</title>

      <para>The OSGi framework provides a local service registry for bundles
      to communicate through service objects, where a service is an object
      that one bundle registers and another bundle looks up. The Enterprise
      Specification enhances this model by defining endpoints that represent
      services hosted in a remote systems. It allows for seamless access to
      remote services within the OSGi framework without changing the service
      layer. The remote system may or may not be based on OSGi.</para>

      <para>The Enterprise Specification includes the specifications
      of:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Remote Services</emphasis> - The Remote Services
          specification defines a number of service properties that
          participating bundles can use to convey information to a
          distribution provider. The distribution provider creates endpoints
          that are accessible to remote clients or registers proxies that
          access services hosted external to the OSGi framework. See chapter
          <xref linkend="service.remoteservices"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Remote Service Admin Specification</emphasis> - The
          Remote Services Admin Service Specification defines an API for the
          distribution provider and discovery of services in a network. A
          management agent can use this API to provide an actual distribution
          policy. This management agent can export and import services as well
          as discovering services in the network. See <xref linkend="service.remoteserviceadmin"/>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Web Applications and HTTP Servlets</title>

      <para>Current Enterprise Java architectures almost always require
      support for web technologies in the form of Java Servlets or Web
      Applications. The Enterprise Specification includes three complementary
      service specifications in support of web technologies.</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Web Application Specification</emphasis> - The Web
          Application specification provides support for web applications
          written to the Servlet 2.5 specification as well as the JSP 2.1
          specification. This specification details how web applications
          packaged as a WAR or as bundles (WABs) can be installed into an OSGi
          framework, as well as how this application can use OSGi services.
          See <xref linkend="service.war"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Http Service Specification</emphasis> - Bundle
          developers typically need to develop communication and user
          interface solutions for standard technologies such as HTTP, HTML,
          XML, and servlets. The Http Service supports two standard techniques
          for this purpose: registering servlets and registering resources.
          See <xref linkend="service.http"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Http Whiteboard Specification</emphasis> - The <xref linkend="enterprise.intro-whiteboard.pattern.ref"/> pattern has
          shown to be a powerful and flexible mechanism for registering
          customized functionality with a container. The Http Whiteboard
          Specification allows the registration of Servlets, Servlet Filters,
          Resources and Servlet-related listeners via the Whiteboard pattern,
          providing a convenient approach to working with servlets to the Http
          Service Specification. See <xref linkend="service.http.whiteboard"/>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Asynchronous Processing and Event models</title>

      <para>A number of specifications focus specifically on asynchronous
      programming and executing of components, as well as the sending and
      receiving of events.</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Event Admin Service Specification</emphasis> - The
          Event Admin service provides an inter-bundle communication
          mechanism. It is based on a event publish and subscribe model,
          popular in many message based systems. See <xref linkend="service.event"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Asynchronous Services</emphasis> - Asynchronous
          processing can be the key to scalability for large enterprise
          applications, especially under heavy load. OSGi Services have
          traditionally followed the Java interface-based design which by
          default provides synchronous semantics. The Asynchronous Services
          specification adds an asynchronous programming model to new and
          existing OSGi services. See <xref linkend="service.async"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Promises</emphasis> - Many JavaScript applications
          use Promises-based APIs to facilitate asynchronous processing of a
          workflow in which executions are time consuming or subject to
          waiting for I/O operations. The OSGi Promises specification defines
          a Promises API for use in OSGi applications. The Promises API is
          used by other specifications, such as the Asynchronous Services
          specification, but can also be used independently.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Management and Configuration services</title>

      <para>Support for managing the servers and their applications is
      essential to all enterprise systems. The Enterprise Specification
      includes several services addressing the need to manage the framework
      from the outside as well as configuring individual bundles and
      applications from within the OSGi framework.</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>JMX™ Management Model Specification</emphasis> - The
          Java Management Extensions (JMX) is the standard API specification
          for providing a management interface to Java SE and Java EE
          applications. The JMX Management Model specification provides an
          MBean interface adaptation of the existing OSGi framework artifacts;
          these can then be used to expose an OSGi Framework manipulation API
          over JMX. See <xref linkend="service.jmx"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>REST Management Service Specification</emphasis> -
          REST is a powerful paradigm for accessing resources over a network
          and is widely used in Enterprise and Cloud settings as a protocol of
          choice, especially since it generally avoids problems with internet
          firewalls, from which other protocols may suffer. The REST
          Management Service Specification provides an API to manage and
          control an OSGi framework using REST operations. See <xref linkend="service.rest"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>User Admin Service Specification</emphasis> - The
          User Admin Service Specification provides authorization for OSGi
          framework actions based on authenticated users, instead of using the
          Java code-based permission model. See <xref linkend="service.useradmin"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Initial Provisioning Specification</emphasis> - This
          specification defines how the Management Agent can make its way into
          the OSGi framework, and gives a structured view of the problems and
          their corresponding resolution methods. The purpose of this
          specification is to enable the management of a OSGi framework by an
          operator, and (optionally) to hand over the management of the OSGi
          framework later to another operator. See <xref linkend="service.provisioning"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Configuration Admin Service Specification</emphasis>
          - The Configuration Admin service allows an operator to set the
          configuration information of bundles. See <xref linkend="service.cm"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Metatype Service Specification</emphasis> - The
          Metatype specification defines interfaces that allow bundle
          developers to describe attribute types in a computer readable form
          using metadata. It is mostly used in conjunction with the
          Configuration Admin Service. See <xref linkend="service.metatype"/>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Naming and Directory services</title>

      <para>Naming and directory services are well established and useful
      tools in enterprise applications. The Enterprise Specification includes
      the:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>JNDI Services Specification</emphasis> - The Java
          Naming and Directory Interface (JNDI) is a registry technology in
          Java applications, both in the Java SE and Java EE space. JNDI
          provides a vendor-neutral set of APIs that allow clients to interact
          with a naming service. See <xref linkend="service.jndi"/>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Database Access</title>

      <para>There are multiple approaches available to model and persist data
      in databases. The Enterprise Specification includes support for the
      common technologies:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>JDBC™ Service Specification</emphasis> - provides an
          API for applications to interact with relational database systems
          from different vendors. See <xref linkend="service.jdbc"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>JPA Service Specification</emphasis> - The Java
          Persistence API (JPA) is a specification that sets a standard for
          persistence in enterprise and non-enterprise JRE™-based
          environments. The JPA Service Specification defines how bundles may
          access and use JPA persistence units in applications, as well as how
          a JPA implementation can become available and be invoked within an
          OSGi framework. See <xref linkend="service.jpa"/>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Transaction Support</title>

      <para>The support for transactions in Java is well defined outside of
      the OSGi specification. The Enterprise Specification includes
      the:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>JTA Transaction Services Specification</emphasis> -
          This specification provides the User Transaction, Transaction
          Manager, and Synchronization Registry services, which are based on
          their counterparts in the Java EE™ JTA Specifications. These
          services can be used to demarcate transaction boundaries, enlists
          durable and volatile resources, and provides transactional aware
          code to influence the outcome of a transaction and synchronize with
          the ending of a transaction. See <xref linkend="service.jta"/>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Miscellaneous Supporting Services</title>

      <para>Services providing solutions to common infrastructure requirements
      include:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Log Service Specification</emphasis> - Provides a
          general purpose message logger for the OSGi framework. See <xref linkend="service.log"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>XML Parser Service Specification</emphasis> -
          Addresses how the classes defined in JAXP can be used in an OSGi
          framework. See <xref linkend="util.xml"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service Loader Mediator Specification</emphasis> -
          Addresses common problems of bundles that rely on the JRE provided
          Service Loader API to load custom Service Provider Implementations.
          This specification describes how to use the service registry for
          lookup of Service Providers as well as a solution for existing code
          to continue functioning using Service Loader API in a OSGi
          environment. See <xref linkend="service.loader"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Coordinator Specification</emphasis> - The
          Coordinator service provides a mechanism for multiple parties to
          collaborate on a common task without a priori knowledge of who will
          collaborate in that task. The service provides a rendezvous for an
          initiator to create a Coordination where collaborators can decide to
          participate. When the Coordination is ended, all participants are
          informed. See <xref linkend="service.coordinator"/>.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Application and Provisioning Support</title>

    <para>The support for applications in OSGi environments has long been
    missing. The term 'application' may mean different things to different
    people, therefore, rather than defining what an application is, the OSGi
    specification provides a set of enabling services and specifications to
    aid in the definition, composition, deployment, and governance of a group
    of bundles and resources in an OSGi environment. The specifications are
    essential building blocks and provide from low level resolution to higher
    level composition abstractions that a management agent can use to build
    the necessary tools for managing OSGi applications.</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Resolver Hook Service Specification</emphasis> - An
        enabling technology defined by <xref linkend="intro.core.release" xrefstyle="template:%t"/> for OSGi frameworks to support isolation of
        bundles.</para>
      </listitem>

      <listitem>
        <para><emphasis>Resolver Specification</emphasis> - A service that can
        be the base for provisioning, deployment, build, and diagnostic
        tooling. Based on the generic Requirement/Capability model from <xref linkend="intro.core.release" xrefstyle="template:%t"/> a management
        agent can use the Resolver service to compute the set of necessary
        resources needed to satisfy the given set of requirements. These
        requirements could represent the dependencies of a core set of bundles
        that need to be deployed. While the framework already hosts a Resolver
        for Bundle wiring, this specification makes a generic Resolver
        available as a service to resolve dependencies on resources beyond
        Bundle wiring. See <xref linkend="service.resolver"/>.</para>
      </listitem>

      <listitem>
        <para><emphasis>Repository Specification</emphasis> - The Repository
        specification provides a standard API to access (possibly remote)
        repositories. Resources can be obtained from the repository by
        specifying declarative requirements, which might include for example
        'provide all resources that export a given package' or 'provide the
        bundle with the given symbolic name and version', but can also be used
        with any other generic capabilities. While the Repository API can be
        used on its own, in conjunction with the Resolver Specification it
        provides the capability to manage retrieval of external resources
        during the resolution process. Typically one or multiple repositories
        provide the metadata for the Resolver service to draw the resolution
        from. A management agent can then use the repositories to apply the
        result of the resolution. See <xref linkend="service.repository"/>.</para>
      </listitem>

      <listitem>
        <para><emphasis>Subsystems Specification</emphasis> - The core
        framework defines the life cycle of bundles and their relationships,
        but it is missing the ability to define a common life cycle and
        scoping rules for a set of bundles that are conceptually tied
        together. The Subsystems Specification provides the ability not only
        to group multiple bundles into a single manageable entity, but
        furthermore include arbitrary resources in this grouping. This allows
        for complete isolation as well as various sharing models of code,
        services, and resources through a management agent. See <xref linkend="service.subsystem"/>.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Reader Level</title>

    <para>This specification is written for the following audiences:</para>

    <itemizedlist>
      <listitem>
        <para>Application developers</para>
      </listitem>

      <listitem>
        <para>Framework and system service developers (system
        developers)</para>
      </listitem>

      <listitem>
        <para>Architects</para>
      </listitem>
    </itemizedlist>

    <para>This specification assumes that the reader has at least one year of
    practical experience in writing Java programs. Experience with enterprise
    systems and server-environments is a plus. Application developers must be
    aware that the OSGi environment is significantly more dynamic than
    traditional desktop or server environments.</para>

    <para>System developers require a very deep understanding of Java. At
    least three years of Java coding experience in a system environment is
    recommended. A Framework implementation will use areas of Java that are
    not normally encountered in traditional applications. Detailed
    understanding is required of class loaders, garbage collection, Java 2
    security, and Java native library loading.</para>

    <para>Architects should focus on the introduction of each subject. This
    introduction contains a general overview of the subject, the requirements
    that influenced its design, and a short description of its operation as
    well as the entities that are used. The introductory sections require
    knowledge of Java concepts like classes and interfaces, but should not
    require coding experience.</para>

    <para>Most of these specifications are equally applicable to application
    developers and system developers.</para>
  </section>

  <section>
    <title>Version Information</title>

    <para>This document is the Enterprise Specification for the OSGi
    Enterprise <xref endterm="enterprise.book-release" linkend="enterprise.book"/>.</para>

    <section xml:id="intro.core.release">
      <title>OSGi Core Release 6</title>

      <para>This specification is based on the OSGi Core Release 6. This
      specification can be downloaded from:</para>

      <programlisting>http://www.osgi.org/Specifications/HomePage</programlisting>
    </section>

    <section>
      <title>Component Versions</title>

      <para>Components in this specification have their own specification
      version, independent of this specification. The following table
      summarizes the packages and specification versions for the different
      subjects.</para>

      <table pgwide="1">
        <title>Packages and versions</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="2.5*"/>

          <colspec colnum="3" colwidth="0.8*"/>

          <thead>
            <row>
              <entry>Item</entry>

              <entry>Package(s)</entry>

              <entry>Version</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><xref linkend="service.remoteservices" xrefstyle="template:%n %t"/></entry>

              <entry><code>-</code></entry>

              <entry><code><xref endterm="service.remoteservices-version" linkend="service.remoteservices"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.log" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.log"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.log-version" linkend="service.log"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.http" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.http"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.http-version" linkend="service.http"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.cm" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.cm"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.cm-version" linkend="service.cm"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.metatype" xrefstyle="template:%n %t"/></entry>

              <entry><para><code><xref linkend="org.osgi.service.metatype"/></code></para><para><code><xref linkend="org.osgi.service.metatype.annotations"/></code></para></entry>

              <entry><code><xref endterm="org.osgi.service.metatype-version" linkend="service.metatype"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.useradmin" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.useradmin"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.useradmin-version" linkend="service.useradmin"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.provisioning" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.provisioning"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.provisioning-version" linkend="service.provisioning"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.component" xrefstyle="template:%n %t"/></entry>

              <entry><para><code><xref linkend="org.osgi.service.component"/></code></para><para><code><xref linkend="org.osgi.service.component.annotations"/></code></para><para><code><xref linkend="org.osgi.service.component.runtime"/></code></para><para><code><xref linkend="org.osgi.service.component.runtime.dto"/></code></para></entry>

              <entry><code><xref endterm="org.osgi.service.component-version" linkend="service.component"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.event" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.event"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.event-version" linkend="service.event"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.blueprint" xrefstyle="template:%n %t"/></entry>

              <entry><para><code><xref linkend="org.osgi.service.blueprint.container"/></code></para><para><code><xref linkend="org.osgi.service.blueprint.reflect"/></code></para></entry>

              <entry><code><xref endterm="org.osgi.service.blueprint.container-version" linkend="service.blueprint"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.remoteserviceadmin" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.remoteserviceadmin"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.remoteserviceadmin-version" linkend="service.remoteserviceadmin"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.jta" xrefstyle="template:%n %t"/></entry>

              <entry><code>-</code></entry>

              <entry><code><xref endterm="service.jta-version" linkend="service.jta"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.jmx" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.jmx"/></code><superscript>1</superscript></entry>

              <entry><code><xref endterm="org.osgi.jmx-version" linkend="service.jmx"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.jdbc" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.jdbc"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.jdbc-version" linkend="service.jdbc"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.jndi" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.jndi"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.jndi-version" linkend="service.jndi"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.jpa" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.jpa"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.jpa-version" linkend="service.jpa"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.war" xrefstyle="template:%n %t"/></entry>

              <entry><code>-</code></entry>

              <entry><code><xref endterm="service.war-version" linkend="service.war"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.coordinator" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.coordinator"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.coordinator-version" linkend="service.coordinator"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.repository" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.repository"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.repository-version" linkend="service.repository"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.loader" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.serviceloader"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.serviceloader-version" linkend="service.loader"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.subsystem" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.subsystem"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.subsystem-version" linkend="service.subsystem"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.namespaces" xrefstyle="template:%n %t"/></entry>

              <entry><para><code><xref linkend="org.osgi.namespace.contract"/></code></para><para><code><xref linkend="org.osgi.namespace.extender"/></code></para><para><code><xref linkend="org.osgi.namespace.implementation"/></code></para><para><code><xref linkend="org.osgi.namespace.service"/></code></para></entry>

              <entry><code><xref endterm="service.namespaces-version" linkend="service.namespaces"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.resolver" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.service.resolver"/></code></entry>

              <entry><code><xref endterm="org.osgi.service.resolver-version" linkend="service.resolver"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.rest" xrefstyle="template:%n %t"/></entry>

              <entry><para><code><xref linkend="org.osgi.service.rest"/></code></para><para><code><xref linkend="org.osgi.service.rest.client"/></code></para></entry>

              <entry><code><xref endterm="org.osgi.service.rest-version" linkend="service.rest"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.async" xrefstyle="template:%n %t"/></entry>

              <entry><para><code><xref linkend="org.osgi.service.async"/></code></para><para><code><xref linkend="org.osgi.service.async.delegate"/></code></para></entry>

              <entry><code><xref endterm="org.osgi.service.async-version" linkend="service.async"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="service.http.whiteboard" xrefstyle="template:%n %t"/></entry>

              <entry><para><code><xref linkend="org.osgi.service.http.whiteboard"/></code></para><para><code><xref linkend="org.osgi.service.http.context"/></code></para><para><code><xref linkend="org.osgi.service.http.runtime"/></code></para><para><code><xref linkend="org.osgi.service.http.runtime.dto"/></code></para></entry>

              <entry><code><xref endterm="org.osgi.service.http.whiteboard-version" linkend="service.http.whiteboard"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="util.xml" xrefstyle="template:%n %t"/></entry>

              <entry><code><xref linkend="org.osgi.util.xml"/></code></entry>

              <entry><code><xref endterm="org.osgi.util.xml-version" linkend="util.xml"/></code></entry>
            </row>

            <row>
              <entry><xref linkend="util.promise" xrefstyle="template:%n %t"/></entry>

              <entry><para><code><xref linkend="org.osgi.util.promise"/></code></para><para><code><xref linkend="org.osgi.util.function"/></code></para></entry>

              <entry><code><xref endterm="org.osgi.util.promise-version" linkend="util.promise"/></code></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>When a component is represented in a bundle, a
      <code>version</code> attribute is needed in the declaration of the
      Import-Package or Export-Package manifest headers.</para>
    </section>

    <section>
      <title>Note</title>

      <orderedlist>
        <listitem>
          <para>The <code>org.osgi.jmx</code> sub-packages are individually
          versioned to be aligned with the service they manage.</para>
        </listitem>
      </orderedlist>
    </section>
  </section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="enterprise.intro-whiteboard.pattern.ref"><title>Whiteboard
      Pattern</title>http://www.osgi.org/wiki/uploads/Links/whiteboard.pdf</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="100" revision="$Id: ee983de18ea9cc5da27201d84878e35809cf31b7 $" version="5" xml:id="service.remoteservices" xml:base="../100/service.remoteservices.xml">
  <title>Remote Services</title>

  <info>
    <releaseinfo xml:id="service.remoteservices-version">Version
    1.0</releaseinfo>
  </info>

  <para>The OSGi framework provides a <emphasis>local</emphasis> service
  registry for bundles to communicate through service objects, where a service
  is an object that one bundle registers and another bundle gets. A
  <emphasis>distribution provider</emphasis> can use this loose coupling
  between bundles to <emphasis>export</emphasis> a registered service by
  creating an<emphasis> endpoint</emphasis>. Vice versa, the distribution
  provider can create a <emphasis>proxy</emphasis> that accesses an endpoint
  and then registers this proxy as an <emphasis>imported</emphasis> service. A
  Framework can contain multiple distribution providers simultaneously, each
  independently importing and exporting services.</para>

  <para>An endpoint is a communications access mechanisms to a service in
  another framework, a (web) service, another process, or a queue or topic
  destination, etc., requiring some protocol for communications. The
  constellation of the mapping between services and endpoints as well as their
  communication characteristics is called the <emphasis>topology</emphasis>. A
  common case for distribution providers is to be present on multiple
  frameworks importing and exporting services; effectively distributing the
  service registry.</para>

  <para>The local architecture for remote services is depicted in <xref linkend="i1691895" xrefstyle="template:Figure %n on page %p"/>.</para>

  <figure pgwide="1" xml:id="i1691895">
    <title>Architecture</title>

    <mediaobject>
      <imageobject>
        <imagedata align="center" contentdepth="2.275in" contentwidth="7.000in" fileref="architecture.svg"/>
      </imageobject>
    </mediaobject>
  </figure>

  <para>Local services imply in-VM call semantics. Many of these semantics
  cannot be supported over a communications connection, or require special
  configuration of the communications connection. It is therefore necessary to
  define a mechanism for bundles to convey their assumptions and requirements
  to the distribution provider. This chapter defines a number of service
  properties that a distribution provider can use to establish a topology
  while adhering to the given constraints.</para>

  <section>
    <title>The Fallacies</title>

    <para>General abstractions for distributed systems have been tried before
    and often failed. Well known are the fallacies described in <xref linkend="i1661227"/>:</para>

    <itemizedlist>
      <listitem>
        <para>The network is reliable</para>
      </listitem>

      <listitem>
        <para>Latency is zero</para>
      </listitem>

      <listitem>
        <para>Bandwidth is infinite</para>
      </listitem>

      <listitem>
        <para>The network is secure</para>
      </listitem>

      <listitem>
        <para>Topology doesn't change</para>
      </listitem>

      <listitem>
        <para>There is one administrator</para>
      </listitem>

      <listitem>
        <para>Transport cost is zero</para>
      </listitem>

      <listitem>
        <para>The network is homogeneous</para>
      </listitem>
    </itemizedlist>

    <para>Most fallacies represent non-functional trade-offs that should be
    considered by administrators, their decisions can then be reflected in the
    topology. For example, in certain cases limited bandwidth is acceptable
    and the latency in a datacenter is near zero. However, the reliability
    fallacy is the hardest because it intrudes into the application code. If a
    communication channel is lost, the application code needs to take specific
    actions to recover from this failure.</para>

    <para>This reliability aspect is also addressed with OSGi services because
    services are dynamic. Failures in the communications layer can be mapped
    to the unregistration of the imported service. OSGi bundles are already
    well aware of these dynamics, and a number of programming models have been
    developed to minimize the complexity of writing these dynamic
    applications.</para>
  </section>

  <section xml:id="i1710847">
    <title>Remote Service Properties</title>

    <para>This section introduces a number of properties that participating
    bundles can use to convey information to the distribution provider
    according to this Remote Service specification.</para>

    <para>The following table lists the properties that must be listed by a
    distribution provider.</para>

    <table>
      <title>Remote Service Properties registered by the Distribution
      Provider</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="2.2*"/>

        <colspec colnum="2" colwidth="0.8*"/>

        <colspec colnum="3" colwidth="3.5*"/>

        <thead>
          <row>
            <entry>Service Property Name</entry>

            <entry>Type</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>remote.configs.supported</code></entry>

            <entry><code>String+</code></entry>

            <entry><para>Registered by the distribution provider on one of its
            services to indicate the supported configuration types. See <xref linkend="i1698916"/> and <xref linkend="i1708968"/>.</para></entry>
          </row>

          <row>
            <entry><code>remote.intents.supported</code></entry>

            <entry><code>String+</code></entry>

            <entry><para>Registered by the distribution provider on one of its
            services to indicate the vocabulary of implemented intents. See
            <xref linkend="i1708968"/>.</para></entry>
          </row>

          <row>
            <entry><code>service.imported</code></entry>

            <entry><code>*</code></entry>

            <entry><para>Must be set by a distribution provider to any value
            when it registers the endpoint proxy as an imported service. A
            bundle can use this property to filter out imported
            services.</para></entry>
          </row>

          <row>
            <entry><code>service.imported.configs</code></entry>

            <entry><code>String+</code></entry>

            <entry><para>The configuration information used to import this
            service, as described in <code>service.exported.configs</code>.
            Any associated properties for this configuration types must be
            properly mapped to the importing system. For example, a URL in
            these properties must point to a valid resource when used in the
            importing framework.</para><para>If multiple configuration types
            are listed in this property, then they must be synonyms for
            exactly the same remote endpoint that is used to export this
            service.</para></entry>
          </row>

          <row>
            <entry><code>service.intents</code></entry>

            <entry><code>String+</code></entry>

            <entry><para>A distribution provider must use this property to
            convey the combined intents of:</para><itemizedlist>
                <listitem>
                  <para>The exporting service, and</para>
                </listitem>

                <listitem>
                  <para>The intents that the exporting distribution provider
                  adds.</para>
                </listitem>

                <listitem>
                  <para>The intents that the importing distribution provider
                  adds.</para>
                </listitem>
              </itemizedlist></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The properties for bundles providing services to be exported or
    require services to be imported are listed alphabetically in the following
    table. The scenarios that these properties are used in are discussed in
    later sections.</para>

    <table>
      <title>Remote Service Properties registered by Exporting bundles</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="2.2*"/>

        <colspec colnum="2" colwidth="0.8*"/>

        <colspec colnum="3" colwidth="3.5*"/>

        <thead>
          <row>
            <entry>Service Property Name</entry>

            <entry>Type</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>service.exported.configs</code></entry>

            <entry><code>String+</code></entry>

            <entry><para>A list of configuration types that should be used to
            export the service. Each configuration type represents the
            configuration parameters for one or more Endpoints. A distribution
            provider should create endpoints for each configuration type that
            it supports. See <xref linkend="i1698916"/> for more details. If
            this property is not set or empty a distribution provider is free
            to choose a default configuration type for the
            service.</para></entry>
          </row>

          <row>
            <entry><code>service.exported.intents</code></entry>

            <entry><code>String+</code></entry>

            <entry><para>A list of <emphasis>intents</emphasis> that the
            distribution provider must implement to distribute the service.
            Intents listed in this property are reserved for intents that are
            critical for the code to function correctly, for example, ordering
            of messages. These intents should not be configurable. For more
            information about intents, see <xref linkend="i1693415"/>. This
            property is optional.</para></entry>
          </row>

          <row>
            <entry><code>service.exported.intents.extra</code></entry>

            <entry><code>String+</code></entry>

            <entry><para>This property is merged with the
            <code>service.exported.intents</code> property before the
            distribution provider interprets the listed intents; it has
            therefore the same semantics but the property should be
            configurable so the administrator can choose the intents based on
            the topology. Bundles should therefore make this property
            configurable, for example through the Configuration Admin service.
            See <xref linkend="i1693415"/>. This property is optional. If
            absent or empty no specific intents are required.</para></entry>
          </row>

          <row>
            <entry><code>service.exported.interfaces</code></entry>

            <entry><code>String+</code></entry>

            <entry><para>Setting this property marks this service for export.
            It defines the interfaces under which this service can be
            exported. This list must be a subset of the types listed in the
            <code>objectClass</code> service property. The single value of an
            asterisk (<code>'*' \u002A</code>) indicates all interfaces in the
            registration's <code>objectClass</code> property and ignore the
            classes. It is strongly recommended to only export interfaces and
            not concrete classes due to the complexity of creating proxies for
            some type of concrete classes. See <xref linkend="i1709051"/>.</para></entry>
          </row>

          <row>
            <entry><code>service.intents</code></entry>

            <entry><code>String+</code></entry>

            <entry><para>A list of intents that this service implements. A
            distribution provider must use this property to convey the
            combined intents of:</para><itemizedlist>
                <listitem>
                  <para>The exporting service, and</para>
                </listitem>

                <listitem>
                  <para>The intents that the exporting distribution provider
                  adds.</para>
                </listitem>

                <listitem>
                  <para>The intents that the importing distribution provider
                  adds.</para>
                </listitem>
              </itemizedlist><para>To export a service, a distribution
            provider must expand any qualified intents to include those
            supported by the endpoint. This can be a subset of all known
            qualified intents. See <xref linkend="i1693415"/>. This property
            is optional for registering bundles.</para></entry>
          </row>

          <row>
            <entry><code>service.pid</code></entry>

            <entry><code>String+</code></entry>

            <entry><para>Services that are exported should have a
            <code>service.pid</code> property. The <code>service.pid</code>
            (PID) is a unique persistent identity for the service, the PID is
            defined in <emphasis>Persistent Identifier (PID)</emphasis> of
            <xref linkend="intro.core.release" xrefstyle="template:%t"/>. This
            property enables a distribution provider to associate persistent
            proprietary data with a service registration.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The properties and their treatment by the distribution provider is
    depicted in <xref linkend="i1698927"/>.</para>

    <figure pgwide="1" xml:id="i1698927">
      <title>Distribution Service Properties</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.668in" contentwidth="4.909in" fileref="distribution-properties.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <section xml:id="i1709051">
      <title>Registering a Service for Export</title>

      <para>A distribution provider should create one or more endpoints for an
      exported service when the following conditions are met:</para>

      <itemizedlist>
        <listitem>
          <para>The service has the service property
          <code>service.exported.interfaces</code> set.</para>
        </listitem>

        <listitem>
          <para>All intents listed in <code>service.exported.intents</code>,
          <code>service.exported.intents.extra</code> and
          <code>service.intents</code> are part of the distributed provider's
          vocabulary</para>
        </listitem>

        <listitem>
          <para>None of the intents are mutually exclusive.</para>
        </listitem>

        <listitem>
          <para>The distribution provider can use the configuration types in
          <code>service.exported.configs</code> to create one or more
          endpoints.</para>
        </listitem>
      </itemizedlist>

      <para>The endpoint must at least implement all the intents that are
      listed in the <code>service.exported.intents</code> and
      <code>service.exported.intents.extra</code> properties.</para>

      <para>The configuration types listed in the <code>
      service.exported.configs</code> can contain
      <emphasis>alternatives</emphasis> and/or <emphasis>synonyms</emphasis>.
      Alternatives describe different endpoints for the same service while a
      synonym describes a different configuration type for the same
      endpoint.</para>

      <para>A distribution provider should create endpoints for each of the
      configuration types it supports; these configuration types should be
      alternatives. Synonyms are allowed.</para>

      <para>If no configuration types are recognized, the distribution
      provider should create an endpoint with a default configuration type
      except when one of the listed configuration types is
      <code>&lt;&lt;nodefault&gt;&gt;</code>.</para>

      <para>For more information about the configuration types, see further
      <xref linkend="i1698916"/>.</para>
    </section>

    <section>
      <title>Getting an Imported Service</title>

      <para>An imported service must be a normal service, there are therefore
      no special rules for getting it. An imported service has a number of
      additional properties that must be set by the distribution
      provider.</para>

      <para>If the endpoint for an exported service is imported as an OSGi
      service in another framework, then the following properties must be
      treated as special.</para>

      <itemizedlist>
        <listitem>
          <para><code>service.imported</code> - Must be set to some
          value.</para>
        </listitem>

        <listitem>
          <para><code>service.intents</code> - This must be the combination of
          the following:</para>

          <itemizedlist>
            <listitem>
              <para>The <code>service.intents</code> property on the exported
              service</para>
            </listitem>

            <listitem>
              <para>The <code>service.exported.intents</code> and
              <code>service.exported.intents.extra</code> properties on the
              exported service</para>
            </listitem>

            <listitem>
              <para>Any additional intents implemented by the distribution
              providers on both sides.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para><code>service.imported.configs</code> - Contains the
          configuration types that can be used to import this service. The
          types listed in this property must be
          <emphasis>synonymous</emphasis>, that is, they must refer to exactly
          the same endpoint that is exporting the service. See <xref linkend="i1698916"/>.</para>
        </listitem>

        <listitem>
          <para><code>service.exported.*</code> - Properties starting with
          <code>service.exported.</code> must not be set on the imported
          service.</para>
        </listitem>

        <listitem>
          <para><code>service.exported.interfaces</code> - This property must
          not be set, its content is reflected in the <code>objectClass</code>
          property.</para>
        </listitem>
      </itemizedlist>

      <para>All other <emphasis>public</emphasis> service properties (not
      starting with a full stop (<code>'.' \u002E</code>)) must be listed on
      the imported service if they use the basic service property types. If
      the service property cannot be communicated because, for example, it
      uses a type that can not be marshaled by the distribution provider then
      the distribution provider must ignore this property.</para>

      <para>The <code>service.imported</code> property indicates that a
      service is an imported service. If this service property is set to any
      value, then the imported service is a proxy for an endpoint. If a bundle
      wants to filter out imported services, then it can add the following
      filter:</para>

      <programlisting>(&amp;(!(service.imported=*)) &lt;previousfilter&gt;)</programlisting>

      <para>Distribution providers can also use the <emphasis>Service Hook
      Service Specification</emphasis> of <xref linkend="intro.core.release" xrefstyle="template:%t"/> to hide services from specific bundles.</para>
    </section>

    <section xml:id="i1699559">
      <title>On Demand Import</title>

      <para>The Service Hooks Service Specification of <xref linkend="intro.core.release" xrefstyle="template:%t"/>, allows a
      distribution provider to detect when a bundle is listening for specific
      services. Bundles can request imported services with specific intents by
      building an appropriate filter. The distribution provider can use this
      information to import a service on demand.</para>

      <para>The following example creates a Service Tracker that is interested
      in an imported service.</para>

      <programlisting>Filter f = context.createFilter(
        "(&amp;(objectClasss=com.acme.Foo)"
    +   "(service.intents=confidentiality))"
);
ServiceTracker tracker =
    new ServiceTracker(context, f, null );
tracker.open();</programlisting>

      <para>Such a Service Tracker will inform the Listener Hook and will give
      it the filter expression. If the distribution provider has registered
      such a hook, it will be informed about the need for an imported
      <code>com.acme.Foo</code> service that has a
      <code>confidentiality</code> intent. It can then use some proprietary
      means to find a service to import that matches the given object class
      and intent.</para>

      <para>How the distribution provider finds an appropriate endpoint is out
      of scope for this specification.</para>
    </section>
  </section>

  <section xml:id="i1693415">
    <title>Intents</title>

    <para>An intent is a name for an abstract distribution capability. An
    intent can be <emphasis>implemented</emphasis> by a service; this can then
    be reflected in the <code>service.intents</code> property. An intent can
    also <emphasis>constrain</emphasis> the possible communication mechanisms
    that a distribution provider can choose to distribute a service. This is
    reflected in the <code>service.export.intents</code> and
    <code>service.exported.intents.extra</code> properties.</para>

    <para>The purpose of the intents is to have a
    <emphasis>vocabulary</emphasis> that is shared between distribution aware
    bundles and the distribution provider. This vocabulary allows the bundles
    to express constraints on the export of their services as well as
    providing information on what intents are implemented by a service.</para>

    <para>Intents have the following syntax</para>

    <programlisting>intent  ::= token ( '.' token )?</programlisting>

    <para><emphasis>Qualified intents</emphasis> use a full stop (<code>'.'
    \u002E</code>) to separate the intent from the qualifier. A qualifier
    provides additional details, however, it implies its prefix. For
    example:</para>

    <programlisting>confidentiality.message</programlisting>

    <para>This example, can be <emphasis>expanded</emphasis> into
    <code>confidentiality</code> and <code>confidentiality.message</code>.
    Qualified intents can be used to provide additional details how an intent
    is achieved. However, a Distribution Provider must expand any qualified
    intents to include those supported by the endpoint. This can be a subset
    of all known qualified intents.</para>

    <para>The concept of intents is derived from the <xref linkend="i1674930"/>. When designing a vocabulary for a distribution
    provider it is recommended to closely follow the vocabulary of intents
    defined in the SCA Policy Framework.</para>
  </section>

  <section>
    <title>General Usage</title>

    <section>
      <title>Call by Value</title>

      <para>Normal service semantics are call-by-reference. An object passed
      as an argument in a service call is a direct reference to that object.
      Any changes to this object will be shared on both sides of the service
      registry.</para>

      <para>Distributed services are different. Arguments are normally passed
      by value, which means that a copy is sent to the remote system, changes
      to this value are not reflected in the originating framework. When using
      distributed services, call-by-value should always be assumed by all
      participants in the distribution chain.</para>
    </section>

    <section>
      <title>Data Fencing</title>

      <para>Services are syntactically defined by their Java interfaces. When
      exposing a service over a remote protocol, typically such an interface
      is mapped to a protocol-specific interface definition. For example, in
      CORBA the Java interfaces would be converted to a corresponding IDL
      definition. This mapping does not always result in a complete
      solution.</para>

      <para>Therefore, for many practical distributed applications it will be
      necessary to constrain the possible usage of data types in service
      interfaces. A distribution provider must at least support interfaces
      (not classes) that only use the basic types as defined for the service
      properties. These are the primitive types and their wrappers as well as
      arrays and collections. See <emphasis>Filter Syntax</emphasis> of <xref linkend="intro.core.release" xrefstyle="template:%t"/> for a list of
      service property types.</para>

      <para>Distribution providers will in general provide a richer set of
      types that can be distributed.</para>
    </section>

    <section>
      <title>Remote Services Life Cycle</title>

      <para>A distributed service must closely track any modifications on the
      corresponding service registration. If service properties are modified,
      these modifications should be propagated to the distributed service and
      associated service proxies. If the exported service is unregistered, the
      endpoint must be withdrawn as soon as possible and any imported service
      proxies unregistered.</para>
    </section>

    <section>
      <title>Runtime</title>

      <para>An imported service is just like any other service and can be used
      as such. However, certain non-functional characteristics of this service
      can differ significantly from what is normal for an in-VM object call.
      Many of these characteristics can be mapped to the normal service
      operations. That is, if the connection fails in any way, the service can
      be unregistered. According to the standard OSGi contract, this means
      that the users of that service must perform the appropriate cleanup to
      prevent stale references.</para>
    </section>

    <section>
      <title>Exceptions</title>

      <para>It is impossible to guarantee that a service is not used when it
      is no longer valid. Even with the synchronous callbacks from the Service
      Listeners, there is always a finite window where a service can be used
      while the underlying implementation has failed. In a distributed
      environment, this window can actually be quite large for an imported
      service.</para>

      <para>Such failure situations must be exposed to the application code
      that uses a failing imported service. In these occasions, the
      distribution provider must notify the application by throwing a Service
      Exception, or subclass thereof, with the reason <code>REMOTE</code>. The
      Service Exception is a Runtime Exception, it can be handled higher up in
      the call chain. The cause of this Service Exception must be the
      Exception that caused the problem.</para>

      <para>A distribution provider should log any problems with the
      communications layer to the Log Service, if available.</para>
    </section>
  </section>

  <section xml:id="i1698916">
    <title>Configuration Types</title>

    <para>An exported service can have a <code>service.exported.configs</code>
    service property. This property lists configuration types for endpoints
    that are provided for this service. Each type provides a specification
    that defines how the configuration data for one or more endpoints is
    provided. For example, a hypothetical configuration type could use a
    service property to hold a URL for the RMI naming registry.</para>

    <para>Configuration types that are not defined by the OSGi Alliance should
    use a name that follows the reverse <code>capabilities</code> domain name
    scheme defined in <xref linkend="i1721171"/> for Java packages. For
    example, <code>com.acme.wsdl</code> would be the proprietary way for the
    ACME company to specify a WSDL configuration type.</para>

    <section>
      <title>Configuration Type Properties</title>

      <para>The <code>service.exported.configs</code> and
      <code>service.imported.configs</code> use the configuration types in
      very different ways. That is, the <code>service.imported.configs</code>
      property is not a copy of the <code>service.exported.configs</code> as
      the name might seem to imply.</para>

      <para xml:id="i1713887">An exporting service can list its desired
      configuration types in the <code>service.exported.configs</code>
      property. This property is potentially seen and interpreted by multiple
      distribution providers. Each of these providers can independently create
      endpoints from the configuration types. In principle, the
      <code>service.exported.configs</code> lists
      <emphasis>alternatives</emphasis> for a single distribution provider and
      can list <emphasis>synonyms</emphasis> to support alternative
      distribution providers. If only one of the synonyms is useful, there is
      an implicit assumption that when the service is exported, only one of
      the synonyms should be supported by the installed distribution
      providers. If it is detected that this assumption is violated, then an
      error should be logged and the conflicting configuration is further
      ignored.</para>

      <para>The interplay of synonyms and alternatives is depicted in <xref linkend="service.remoteservices-synonyms"/>. In this table, the first
      columns on the left list different combinations of the configuration
      types in the <code>service.exported.configs</code> property. The next
      two columns list two distribution providers that each support an
      overlapping set of configuration types. The <code>x</code>'s in this
      table indicate if a configuration type or distribution provider is
      active in a line. The description then outlines the issues, if any. It
      is assumed in this table that hypothetical configuration types
      <code>net.rmi</code> and <code>com.rmix</code> map to an identical
      endpoint, just like <code>net.soap</code> and
      <code>net.soapx</code>.</para>

      <table xml:id="service.remoteservices-synonyms">
        <title>Synonyms and Alternatives in Exported Configurations</title>

        <tgroup cols="8">
          <colspec colname="col1" colnum="1" colwidth="1.25*"/>

          <colspec colname="col2" colnum="2" colwidth="1.25*"/>

          <colspec colname="col3" colnum="3" colwidth="1.25*"/>

          <colspec colname="col4" colnum="4" colwidth="1.25*"/>

          <colspec colname="col5" colnum="5" colwidth="1.25*"/>

          <colspec colname="col6" colnum="6" colwidth="4*"/>

          <colspec colnum="7" colwidth="4*"/>

          <colspec colnum="8" colwidth="16*"/>

          <thead>
            <row>
              <entry nameend="col5" namest="col1">service.exported.
              configs</entry>

              <entry colname="col6">Distribution Provider A</entry>

              <entry>Distribution Provider B</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <?dbfo rotated-width="0.8in"?>

              <entry rotate="1"><?dbfo orientation="90"?><code>net.rmi</code></entry>

              <entry rotate="1"><?dbfo orientation="90"?><code>com.rmix</code></entry>

              <entry rotate="1"><?dbfo orientation="90"?><code>net.soap</code></entry>

              <entry rotate="1"><?dbfo orientation="90"?><code>com.soapx</code></entry>

              <entry rotate="1"><?dbfo orientation="90"?>&lt;&lt;no
              default&gt;&gt;</entry>

              <entry><para>Supports:</para><para><code>net.rmi</code></para><para><code>com.rmix</code></para><para><code>com.soapx</code></para></entry>

              <entry><para>Supports:</para><para><code>net.rmi</code></para><para><code>net.soap</code></para></entry>

              <entry/>
            </row>

            <row>
              <entry align="center"><para><code>x</code></para></entry>

              <entry><para/></entry>

              <entry align="center"><para><code>x</code></para></entry>

              <entry><para/></entry>

              <entry><para/></entry>

              <entry><para><code>x</code></para></entry>

              <entry><para/></entry>

              <entry><para><emphasis>Ok</emphasis>, A will create an endpoint
              for the RMI and SOAP alternatives.</para></entry>
            </row>

            <row>
              <entry align="center"><para><code>x</code></para></entry>

              <entry><para/></entry>

              <entry><para/></entry>

              <entry><para/></entry>

              <entry><para/></entry>

              <entry><para><code>x</code></para></entry>

              <entry><para><code>x</code></para></entry>

              <entry><para><emphasis>Configuration error</emphasis>. There is
              a clash for <code>net.rmi</code> because A and B can both create
              an endpoint for the same configuration. It is likely that one
              will fail.</para></entry>
            </row>

            <row>
              <entry><para/></entry>

              <entry><para/></entry>

              <entry align="center"><para><code>x</code></para></entry>

              <entry align="center"><para><code>x</code></para></entry>

              <entry><para/></entry>

              <entry><para><code>x</code></para></entry>

              <entry><para/></entry>

              <entry><para><emphasis>Ok</emphasis>, exported on com.soapx by
              A, the net.soap is ignored.</para></entry>
            </row>

            <row>
              <entry><para/></entry>

              <entry><para/></entry>

              <entry align="center"><para><code>x</code></para></entry>

              <entry align="center"><para><code>x</code></para></entry>

              <entry><para/></entry>

              <entry><para><code>x</code></para></entry>

              <entry><para><code>x</code></para></entry>

              <entry><para><emphasis>Synonym error</emphasis> because A and B
              export to same SOAP endpoint, it is likely that one will
              fail.</para></entry>
            </row>

            <row>
              <entry><para/></entry>

              <entry align="center"><para><code>x</code></para></entry>

              <entry align="center"><para><code>x</code></para></entry>

              <entry><para/></entry>

              <entry><para/></entry>

              <entry><para><code>x</code></para></entry>

              <entry><para><code>x</code></para></entry>

              <entry><para><emphasis>Ok</emphasis>, two alternative endpoints
              over RMI (by A) and SOAP (by B) are created. This is a typical
              use case.</para></entry>
            </row>

            <row>
              <entry><para/></entry>

              <entry><para/></entry>

              <entry align="center"><para><code>x</code></para></entry>

              <entry align="center"><para><code>x</code></para></entry>

              <entry><para/></entry>

              <entry><para><code>x</code></para></entry>

              <entry><para/></entry>

              <entry><para><emphasis>Ok</emphasis>. Synonyms are used to allow
              frameworks that have either A or B installed. In this case A
              exports over SOAP.</para></entry>
            </row>

            <row>
              <entry><para/></entry>

              <entry><para/></entry>

              <entry align="center"><para><code>x</code></para></entry>

              <entry align="center"><para><code>x</code></para></entry>

              <entry><para/></entry>

              <entry><para/></entry>

              <entry><para><code>x</code></para></entry>

              <entry><para><emphasis>Ok</emphasis>. Synonyms are used to allow
              frameworks that have either A or B installed. In this case B
              exports.</para></entry>
            </row>

            <row>
              <entry><para/></entry>

              <entry><para/></entry>

              <entry><para/></entry>

              <entry><para/></entry>

              <entry><para/></entry>

              <entry><para><code>x</code></para></entry>

              <entry><para/></entry>

              <entry><para><emphasis>Ok</emphasis>. A creates an endpoint with
              default configuration type.</para></entry>
            </row>

            <row>
              <entry><para/></entry>

              <entry><para/></entry>

              <entry><para/></entry>

              <entry><para/></entry>

              <entry><para/></entry>

              <entry><para><code>x</code></para></entry>

              <entry><para><code>x</code></para></entry>

              <entry><para><emphasis>Ok</emphasis>. Both A and B each create
              an endpoint with their default configuration
              type.</para></entry>
            </row>

            <row>
              <entry><para/></entry>

              <entry><para/></entry>

              <entry><para/></entry>

              <entry><para/></entry>

              <entry align="center"><para><code>x</code></para></entry>

              <entry><para><code>x</code></para></entry>

              <entry><para/></entry>

              <entry><para><emphasis>Ok</emphasis>. No endpoint is
              created.</para></entry>
            </row>

            <row>
              <entry><para/></entry>

              <entry align="center"><para>x</para></entry>

              <entry><para/></entry>

              <entry align="center"><para>x</para></entry>

              <entry><para/></entry>

              <entry><para/></entry>

              <entry><para>x</para></entry>

              <entry><para>Provider B does not recognize the configuration
              types it should therefore use a default configuration
              type.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>To summarize, the following rules apply for a single distribution
      provider:</para>

      <itemizedlist>
        <listitem>
          <para>Only configuration types that are supported by this
          distribution provider must be used. All other configuration types
          must be ignored.</para>
        </listitem>

        <listitem>
          <para>All of the supported configuration types must be
          <emphasis>alternatives</emphasis>, that is, they must map to
          different endpoints. Synonyms for the same distribution provider
          should be logged as errors.</para>
        </listitem>

        <listitem>
          <para>If a configuration type results in an endpoint that is already
          in use, then an error should be logged. It is likely then that
          another distribution provider already had created that
          endpoint.</para>
        </listitem>
      </itemizedlist>

      <para>An export of a service can therefore result in multiple endpoints
      being created. For example, a service can be exported over RMI as well
      as SOAP. Creating an endpoint can fail, in that case the distribution
      provider must log this information in the Log Service, if available, and
      not export the service to that endpoint. Such a failure can, for
      example, occur when two configuration types are synonym and multiple
      distribution providers are installed that supporting this type.</para>

      <para>On the importing side, the <code>service.imported.configs</code>
      property lists configuration types that must refer to the same endpoint.
      That is, it can list alternative configuration types for this endpoint
      but all configuration types must result in the same endpoint.</para>

      <para>For example, there are two distribution providers installed at the
      exporting and importing frameworks. Distribution provider A supports the
      hypothetical configuration type <code>net.rmi</code> and
      <code>net.soap</code>. Distribution provider B supports the hypothetical
      configuration type <code>net.smart</code>. A service is registered that
      list all three of those configuration types.</para>

      <para>Distribution provider A will create two endpoints, one for RMI and
      one for SOAP. Distribution provider B will create one endpoint for the
      smart protocol. The distribution provider A knows how to create the
      configuration data for the <code>com.acme.rmi</code> configuration type
      as well and can therefore create a synonymous description of the
      endpoint in that configuration type. It will therefore set the imported
      configuration type for the RMI endpoint to:</para>

      <programlisting>service.imported.configs = net.rmi, com.acme.rmi
net.rmi.url = rmi://172.25.25.109:1099/service-id/24
com.acme.rmi.address = 172.25.25.109
com.acme.rmi.port = 1099
com.acme.rmi.path = service-id/24</programlisting>

      <figure>
        <title>Relation between imported and exported configuration
        types</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.062in" contentwidth="4.920in" fileref="impexp-config-types.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section xml:id="i1708968">
      <title>Dependencies</title>

      <para>A bundle that uses a configuration type has an implicit dependency
      on the distribution provider. To make this dependency explicit, the
      distribution provider must register a service with the following
      properties:</para>

      <itemizedlist>
        <listitem>
          <para><code>remote.intents.supported</code> - (<code>String+</code>)
          The vocabulary of the given distribution provider.</para>
        </listitem>

        <listitem>
          <para><code>remote.configs.supported</code> - (<code>String+</code>)
          The configuration types that are implemented by the distribution
          provider.</para>
        </listitem>
      </itemizedlist>

      <para>A bundle that depends on the availability of specific intents or
      configuration types can create a service dependency on an anonymous
      service with the given properties. The following filter is an example of
      depending on a hypothetical <code>net.rmi</code> configuration
      type:</para>

      <programlisting>(<code>remote.configs.supported=net.rmi)</code></programlisting>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>The distribution provider will be required to invoke methods on any
    exported service. This implies that it must have the combined set of
    permissions of all methods it can call. It also implies that the
    distribution provider is responsible for ensuring that a bundle that calls
    an imported service is not granted additional permissions through the fact
    that the distribution provider will call the exported service, not the
    original invoker.</para>

    <para>The actual mechanism to ensure that bundles can get additional
    permissions through the distribution is out of scope for this
    specification. However, distribution providers should provide mechanisms
    to limit the set of available permissions for a remote invocation,
    preferably on a small granularity basis.</para>

    <para>One possible means is to use the
    <code>getAccessControlContext</code> method on the Conditional Permission
    Admin service to get an Access Control Context that is used in a
    <code>doPrivileged</code> block where the invocation takes place. The
    <code>getAccessControlContext</code> method takes a list of signers which
    could represent the remote bundles that cause an invocation. How these are
    authenticated is up to the distribution provider.</para>

    <para>A distribution provider is a potential attack point for intruders.
    Great care should be taken to properly setup the permissions or topology
    in an environment that requires security.</para>

    <section>
      <title>Limiting Exports and Imports</title>

      <para>Service registration and getting services is controlled through
      the <code>ServicePermission</code> class. This permission supports a
      filter based constructor that can assert service properties. This
      facility can be used to limit bundles from being able to register
      exported services or get imported services if they are combined with
      Conditional Permission Admin's <code>ALLOW</code> facility. The
      following example shows how all bundles except from
      <code>www.acme.com</code> are denied the registration and getting of
      distributed services.</para>

      <programlisting>DENY {
   [...BundleLocationCondition("http://www.acme.com/*" "!")]
   (...ServicePermission "(service.imported=*)" "GET" )
   (...ServicePermission "(service.exported.interfaces=*)"
                                "REGISTER" )
}</programlisting>
    </section>
  </section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i1661227"><title>The Fallacies of Distributed
      Computing
      Explained</title>http://www.rgoarchitects.com/Files/fallacies.pdf</bibliomixed>

      <bibliomixed xml:id="i1663801"><title>Service Component Architecture
      (SCA)</title>http://www.oasis-opencsa.org/</bibliomixed>

      <bibliomixed xml:id="i1674930"><title>SCA Policy Framework
      specification</title>http://www.oasis-open.org/committees/sca-policy/</bibliomixed>

      <bibliomixed xml:id="i1721171"><title>Java Language
      Specification</title>http://docs.oracle.com/javase/specs/</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="101" revision="$Id: d938b01c5db41c3b9b67febbfce090bf52dc3025 $" version="5" xml:id="service.log" xml:base="../101/service.log.xml">
  <title>Log Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.log-version" linkend="org.osgi.service.log"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para xml:id="i1492311">The Log Service provides a general purpose message
    logger for the OSGi framework. It consists of two services, one for
    logging information and another for retrieving current or previously
    recorded log information.</para>

    <para>This specification defines the methods and semantics of interfaces
    which bundle developers can use to log entries and to retrieve log
    entries.</para>

    <para xml:id="i1294527">Bundles can use the Log Service to log information
    for the Operator. Other bundles, oriented toward management of the
    environment, can use the Log Reader Service to retrieve Log Entry objects
    that were recorded recently or to receive Log Entry objects as they are
    logged by other bundles.</para>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>LogService</emphasis> - The service interface that
          allows a bundle to log information, including a message, a level, an
          exception, a <code>ServiceReference</code> object, and a
          <code>Bundle</code> object.</para>
        </listitem>

        <listitem>
          <para><emphasis>LogEntry</emphasis> - An interface that allows
          access to a log entry in the log. It includes all the information
          that can be logged through the Log Service and a time stamp.</para>
        </listitem>

        <listitem>
          <para><emphasis>LogReaderService</emphasis> - A service interface
          that allows access to a list of recent <code>LogEntry</code>
          objects, and allows the registration of a <code>LogListener</code>
          object that receives <code>LogEntry</code> objects as they are
          created.</para>
        </listitem>

        <listitem>
          <para><emphasis>LogListener</emphasis> - The interface for the
          listener to <code>LogEntry</code> objects. Must be registered with
          the Log Reader Service.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>Log Service Class Diagram org.osgi.service.log package</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.944in" contentwidth="7.000in" fileref="logservice-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>The Log Service Interface</title>

    <para>The <code>LogService</code> interface allows bundle developers to
    log messages that can be distributed to other bundles, which in turn can
    forward the logged entries to a file system, remote system, or some other
    destination.</para>

    <para>The <code>LogService</code> interface allows the bundle developer
    to:</para>

    <itemizedlist xml:id="i1294532">
      <listitem>
        <para>Specify a message and/or exception to be logged.</para>
      </listitem>

      <listitem xml:id="i1294533">
        <para>Supply a log level representing the severity of the message
        being logged. This should be one of the levels defined in the
        <code>LogService</code> interface but it may be any integer that is
        interpreted in a user-defined way.</para>
      </listitem>

      <listitem>
        <para>Specify the Service associated with the log requests.</para>
      </listitem>
    </itemizedlist>

    <para xml:id="i1294534">By obtaining a <code>LogService</code> object from
    the Framework service registry, a bundle can start logging messages to the
    LogService object by calling one of the <code>LogService</code> methods. A
    Log Service object can log any message, but it is primarily intended for
    reporting events and error conditions.</para>

    <para>The <code>LogService</code> interface defines these methods for
    logging messages:</para>

    <itemizedlist>
      <listitem>
        <para><code>log(int, String)</code> - This method logs a simple
        message at a given log level.</para>
      </listitem>

      <listitem>
        <para><code>log(int, String, Throwable)</code> - This method logs a
        message with an exception at a given log level.</para>
      </listitem>

      <listitem>
        <para><code>log(ServiceReference, int, String)</code> - This method
        logs a message associated with a specific service.</para>
      </listitem>

      <listitem>
        <para><code>log(ServiceReference, int, String, Throwable)</code> -
        This method logs a message with an exception associated with a
        specific service.</para>
      </listitem>
    </itemizedlist>

    <para xml:id="i1294535">While it is possible for a bundle to call one of
    the <code>log</code> methods without providing a
    <code>ServiceReference</code> object, it is recommended that the caller
    supply the <code>ServiceReference</code> argument whenever appropriate,
    because it provides important context information to the operator in the
    event of problems.</para>

    <para>The following example demonstrates the use of a <code>log</code>
    method to write a message into the log.</para>

    <programlisting>logService.log(
    myServiceReference,
    LogService.LOG_INFO, 
    "myService is up and running"
);</programlisting>

    <para>In the example, the <code>myServiceReference</code> parameter
    identifies the service associated with the log request. The specified
    level, <code>LogService.LOG_INFO</code>, indicates that this message is
    informational.</para>

    <para>The following example code records error conditions as log
    messages.</para>

    <programlisting>try {
    FileInputStream fis = new FileInputStream("myFile");
    int b;
    while ( (b = fis.read()) != -1 ) {
      ...
    }
    fis.close();
}
catch ( IOException exception ) {
    logService.log(
        myServiceReference, 
        LogService.LOG_ERROR, 
        "Cannot access file", 
        exception );
}</programlisting>

    <para xml:id="i1294536">Notice that in addition to the error message, the
    exception itself is also logged. Providing this information can
    significantly simplify problem determination by the Operator.</para>
  </section>

  <section>
    <title>Log Level and Error Severity</title>

    <para>The <code>log</code> methods expect a log level indicating error
    severity, which can be used to filter log messages when they are
    retrieved. The severity levels are defined in the <code>LogService</code>
    interface.</para>

    <para>Callers must supply the log levels that they deem appropriate when
    making log requests.</para>

    <para>The following table lists the log levels.</para>

    <table>
      <title>Log Levels</title>

      <tgroup cols="2">
        <colspec colnum="1" colwidth="1.2*"/>

        <colspec colnum="2" colwidth="5*"/>

        <thead>
          <row>
            <entry>Level</entry>

            <entry>Descriptions</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><para><code>LOG_DEBUG</code></para></entry>

            <entry><para>Used for problem determination and may be irrelevant
            to anyone but the bundle developer.</para></entry>
          </row>

          <row>
            <entry><para><code>LOG_ERROR</code></para></entry>

            <entry><para>Indicates the bundle or service may not be
            functional. Action should be taken to correct this
            situation.</para></entry>
          </row>

          <row>
            <entry><para><code>LOG_INFO</code></para></entry>

            <entry><para>May be the result of any change in the bundle or
            service and does not indicate a problem.</para></entry>
          </row>

          <row>
            <entry><para><code>LOG_WARNING</code></para></entry>

            <entry><para>Indicates a bundle or service is still functioning
            but may experience problems in the future because of the warning
            condition.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section xml:id="i1210758">
    <title>Log Reader Service</title>

    <para>The Log Reader Service maintains a list of <code>LogEntry</code>
    objects called the <emphasis>log</emphasis>. The Log Reader Service is a
    service that bundle developers can use to retrieve information contained
    in this log, and receive notifications about <code>LogEntry</code> objects
    when they are created through the Log Service.</para>

    <para>The size of the log is implementation-specific, and it determines
    how far into the past the log entries go. Additionally, some log entries
    may not be recorded in the log in order to save space. In particular,
    <code>LOG_DEBUG</code> log entries may not be recorded. Note that this
    rule is implementation-dependent. Some implementations may allow a
    configurable policy to ignore certain <code>LogEntry</code> object
    types.</para>

    <para>The <code>LogReaderService</code> interface defines these methods
    for retrieving log entries.</para>

    <itemizedlist>
      <listitem>
        <para><code>getLog()</code> - This method retrieves past log entries
        as an enumeration with the most recent entry first.</para>
      </listitem>

      <listitem>
        <para><code>addLogListener(LogListener)</code> - This method is used
        to subscribe to the Log Reader Service in order to receive log
        messages as they occur. Unlike the previously recorded log entries,
        all log messages must be sent to subscribers of the Log Reader Service
        as they are recorded.</para>

        <para>A subscriber to the Log Reader Service must implement the
        <code>LogListener</code> interface.</para>

        <para>After a subscription to the Log Reader Service has been started,
        the subscriber's <code>LogListener.logged</code> method must be called
        with a <code>Log-Entry</code> object for the message each time a
        message is logged.</para>
      </listitem>
    </itemizedlist>

    <para>The <code>LogListener</code> interface defines the following
    method:</para>

    <itemizedlist>
      <listitem>
        <para><code>logged(LogEntry)</code> - This method is called for each
        <code>Log-Entry</code> object created. A Log Reader Service
        implementation must not filter entries to the <code>LogListener</code>
        interface as it is allowed to do for its log. A
        <code>LogListener</code> object should see all <code>LogEntry</code>
        objects that are created.</para>
      </listitem>
    </itemizedlist>

    <para>The delivery of <code>LogEntry</code> objects to the
    <code>LogListener</code> object should be done asynchronously.</para>
  </section>

  <section xml:id="i1231250">
    <title>Log Entry Interface</title>

    <para>The <code>LogEntry</code> interface abstracts a log entry. It is a
    record of the information that was passed when an event was logged, and
    consists of a superset of information which can be passed through the
    <code>LogService</code> methods. The <code>LogEntry</code> interface
    defines these methods to retrieve information related to
    <code>Log-Entry</code> objects:</para>

    <itemizedlist>
      <listitem>
        <para><code>getBundle()</code> - This method returns the Bundle object
        related to a <code>Log-Entry</code> object.</para>
      </listitem>

      <listitem>
        <para><code>getException()</code> - This method returns the exception
        related to a <code>Log-Entry</code> object. In some implementations,
        the returned exception may not be the original exception. To avoid
        references to a bundle defined exception class, thus preventing an
        uninstalled bundle from being garbage collected, the Log Service may
        return an exception object of an implementation defined Throwable
        subclass. This object will attempt to return as much information as
        possible, such as the message and stack trace, from the original
        exception object .</para>
      </listitem>

      <listitem>
        <para><code>getLevel()</code> - This method returns the severity level
        related to a <code>Log-Entry</code> object.</para>
      </listitem>

      <listitem>
        <para><code>getMessage()</code> - This method returns the message
        related to a <code>Log-Entry</code> object.</para>
      </listitem>

      <listitem>
        <para><code>getServiceReference()</code> - This method returns the
        <code>ServiceReference</code> object of the service related to a
        <code>Log-Entry</code> object.</para>
      </listitem>

      <listitem>
        <para><code>getTime()</code> - This method returns the time that the
        log entry was created.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Mapping of Events</title>

    <para>Implementations of a Log Service must log Framework-generated events
    and map the information to <code>LogEntry</code> objects in a consistent
    way. Framework events must be treated exactly the same as other logged
    events and distributed to all <code>LogListener</code> objects that are
    associated with the Log Reader Service. The following sections define the
    mapping for the three different event types: Bundle, Service, and
    Framework.</para>

    <section>
      <title>Bundle Events Mapping</title>

      <para>A Bundle Event is mapped to a <code>LogEntry</code> object
      according to the following table.</para>

      <table>
        <title>Mapping of Bundle Events to Log Entries</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>Log Entry method</entry>

              <entry>Information about Bundle Event</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>getLevel()</code></entry>

              <entry><para><code>LOG_INFO</code></para></entry>
            </row>

            <row>
              <entry><code>getBundle()</code></entry>

              <entry><para>Identifies the bundle to which the event happened.
              In other words, it identifies the bundle that was installed,
              started, stopped, updated, or uninstalled. This identification
              is obtained by calling <code>getBundle()</code> on the
              <code>BundleEvent</code> object.</para></entry>
            </row>

            <row>
              <entry><code>getException()</code></entry>

              <entry><para><code>null</code></para></entry>
            </row>

            <row>
              <entry><code>getServiceReference()</code></entry>

              <entry><para><code>null</code></para></entry>
            </row>

            <row>
              <entry><code>getMessage()</code></entry>

              <entry><para>The message depends on the event
              type:</para><itemizedlist>
                  <listitem>
                    <para><code>INSTALLED</code> - "BundleEvent
                    INSTALLED"</para>
                  </listitem>

                  <listitem>
                    <para><code>STARTED</code> - "BundleEvent STARTED"</para>
                  </listitem>

                  <listitem>
                    <para><code>STOPPED</code> - "BundleEvent STOPPED"</para>
                  </listitem>

                  <listitem>
                    <para><code>UPDATED</code> - "BundleEvent UPDATED"</para>
                  </listitem>

                  <listitem>
                    <para><code>UNINSTALLED</code> - "BundleEvent
                    UNINSTALLED"</para>
                  </listitem>

                  <listitem>
                    <para><code>RESOLVED</code> - "BundleEvent
                    RESOLVED"</para>
                  </listitem>

                  <listitem>
                    <para><code>UNRESOLVED</code> - "BundleEvent
                    UNRESOLVED"</para>
                  </listitem>
                </itemizedlist></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Service Events Mapping</title>

      <para>A Service Event is mapped to a <code>LogEntry</code> object
      according to the following table.</para>

      <table>
        <title>Mapping of Service Events to Log Entries</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>Log Entry method</entry>

              <entry>Information about Service Event</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>getLevel()</code></entry>

              <entry><para><code>LOG_INFO</code>, except for the
              <code>ServiceEvent.MODIFIED</code> event. This event can happen
              frequently and contains relatively little information. It must
              be logged with a level of <code>LOG_DEBUG</code>.</para></entry>
            </row>

            <row>
              <entry><code>getBundle()</code></entry>

              <entry><para>Identifies the bundle that registered the service
              associated with this event. It is obtained by calling
              <code>getServiceReference().getBundle()</code> on the
              <code>ServiceEvent</code> object.</para></entry>
            </row>

            <row>
              <entry><code>getException()</code></entry>

              <entry><para><code>null</code></para></entry>
            </row>

            <row>
              <entry><code>getServiceReference()</code></entry>

              <entry><para>Identifies a reference to the service associated
              with the event. It is obtained by calling
              <code>getServiceReference()</code> on the
              <code>ServiceEvent</code> object.</para></entry>
            </row>

            <row>
              <entry><code>getMessage()</code></entry>

              <entry><para>This message depends on the actual event type. The
              messages are mapped as follows:</para><itemizedlist>
                  <listitem>
                    <para><code>REGISTERED</code> - "ServiceEvent
                    REGISTERED"</para>
                  </listitem>

                  <listitem>
                    <para><code>MODIFIED</code> - "ServiceEvent
                    MODIFIED"</para>
                  </listitem>

                  <listitem>
                    <para><code>UNREGISTERING</code> - "ServiceEvent
                    UNREGISTERING"</para>
                  </listitem>
                </itemizedlist></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Framework Events Mapping</title>

      <para>A Framework Event is mapped to a LogEntry object according to the
      following table.</para>

      <table>
        <title>Mapping of Framework Event to Log Entries</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>Log Entry method</entry>

              <entry>Information about Framework Event</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>getLevel()</code></entry>

              <entry><para><code>LOG_INFO</code>, except for the
              FrameworkEvent<code>.ERROR</code> event. This event represents
              an error and is logged with a level of
              <code>LOG_ERROR</code>.</para></entry>
            </row>

            <row>
              <entry><code>getBundle()</code></entry>

              <entry><para>Identifies the bundle associated with the event.
              This may be the system bundle. It is obtained by calling
              <code>getBundle()</code> on the <code>FrameworkEvent</code>
              object.</para></entry>
            </row>

            <row>
              <entry><code>getException()</code></entry>

              <entry><para>Identifies the exception associated with the error.
              This will be null for event types other than ERROR. It is
              obtained by calling <code>getThrowable()</code> on the
              <code>FrameworkEvent</code> object.</para></entry>
            </row>

            <row>
              <entry><code>getServiceReference()</code></entry>

              <entry><para><code>null</code></para></entry>
            </row>

            <row>
              <entry><code>getMessage()</code></entry>

              <entry><para>This message depends on the actual event type. The
              messages are mapped as follows:</para><itemizedlist>
                  <listitem>
                    <para><code>STARTED</code> - "FrameworkEvent
                    STARTED"</para>
                  </listitem>

                  <listitem>
                    <para><code>ERROR</code> - "FrameworkEvent ERROR"</para>
                  </listitem>

                  <listitem>
                    <para><code>PACKAGES_REFRESHED</code> - "FrameworkEvent
                    PACKAGES REFRESHED"</para>
                  </listitem>

                  <listitem>
                    <para><code>STARTLEVEL_CHANGED</code> - "FrameworkEvent
                    STARTLEVEL CHANGED"</para>
                  </listitem>

                  <listitem>
                    <para><code>WARNING</code> - "FrameworkEvent
                    WARNING"</para>
                  </listitem>

                  <listitem>
                    <para><code>INFO</code> - "FrameworkEvent INFO"</para>
                  </listitem>
                </itemizedlist></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="i1479168">
      <title>Log Events</title>

      <para>Log events must be delivered by the Log Service implementation to
      the Event Admin service (if present) asynchronously under the
      topic:</para>

      <programlisting>org/osgi/service/log/LogEntry/&lt;event type&gt;</programlisting>

      <para>The logging level is used as event type:</para>

      <programlisting>LOG_ERROR
LOG_WARNING
LOG_INFO
LOG_DEBUG
LOG_OTHER  (when event is not recognized)</programlisting>

      <para>The properties of a log event are:</para>

      <itemizedlist>
        <listitem>
          <para><code>bundle.id</code> - (Long) The source bundle's id.</para>
        </listitem>

        <listitem>
          <para><code>bundle.symbolicName</code> - (<code>String</code>) The
          source bundle's symbolic name. Only set if not
          <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><code>bundle</code> - (<code>Bundle</code>) The source
          bundle.</para>
        </listitem>

        <listitem>
          <para><code>log.level</code> - (<code>Integer</code>) The log
          level.</para>
        </listitem>

        <listitem>
          <para><code>message</code> - (<code>String</code>) The log
          message.</para>
        </listitem>

        <listitem>
          <para><code>timestamp</code> - (<code>Long</code>) The log entry's
          timestamp.</para>
        </listitem>

        <listitem>
          <para>log.entry - (<code>LogEntry</code>) The LogEntry
          object.</para>
        </listitem>
      </itemizedlist>

      <para>If the log entry has an associated Exception:</para>

      <itemizedlist>
        <listitem>
          <para><code>exception.class</code> - (<code>String</code>) The
          fully-qualified class name of the attached exception. Only set if
          the <code>getException</code>method returns a non-<code>null</code>
          value.</para>
        </listitem>

        <listitem>
          <para><code>exception.message</code> - (<code>String</code>) The
          message of the attached Exception. Only set if the Exception message
          is not <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><code>exception</code> - (<code>Throwable</code>) The
          Exception returned by the <code>getException</code> method.</para>
        </listitem>
      </itemizedlist>

      <para>If the <code>getServiceReference</code> method returns a non-
      <code>null</code> value:</para>

      <itemizedlist>
        <listitem>
          <para><code>service</code> - (<code>ServiceReference</code>) The
          result of the <code>getServiceReference</code> method.</para>
        </listitem>

        <listitem>
          <para><code>service.id</code> - (<code>Long</code>) The id of the
          service.</para>
        </listitem>

        <listitem>
          <para><code>service.pid</code> - (<code>String</code>) The service's
          persistent identity. Only set if the <code>service.pid</code>
          service property is not <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><code>service.objectClass</code> - (<code>String[]</code>) The
          object class of the service object.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>The Log Service should only be implemented by trusted bundles. This
    bundle requires <code>ServicePermission[LogService|LogReaderService,
    REGISTER]</code>. Virtually all bundles should get
    <code>ServicePermission[LogService, GET]</code>. The
    <code>ServicePermission[LogReaderService, GET]</code> should only be
    assigned to trusted bundles.</para>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.log" xml:id="org.osgi.service.log" xml:base="../../generated/javadoc/docbook/org.osgi.service.log.xml">
   <title>org.osgi.service.log</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.log-version">Version 1.3</releaseinfo>
      <edition xml:id="org.osgi.service.log-version.number">1.3</edition>
   </info>
   <para>
Log Service Package Version 1.3.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.log; version="[1.3,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.log; version="[1.3,1.4)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.LogEntry">
                  <code>LogEntry</code>
               </link> - 
Provides methods to access the information contained in an individual Log
 Service log entry.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.LogListener">
                  <code>LogListener</code>
               </link> - 
Subscribes to <code>LogEntry</code> objects from the <code>LogReaderService</code>.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.LogReaderService">
                  <code>LogReaderService</code>
               </link> - 
Provides methods to retrieve <code>LogEntry</code> objects from the log.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.LogService">
                  <code>LogService</code>
               </link> - 
Provides methods for bundles to write messages to the log.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="LogEntry" xml:id="org.osgi.service.log.LogEntry">
      <title>public interface LogEntry</title>
      <para>
Provides methods to access the information contained in an individual Log
 Service log entry.
 
 </para>
      <para>
 A <code>LogEntry</code> object may be acquired from the
 <code>LogReaderService.getLog</code> method or by registering a
 <code>LogListener</code> object.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.log.LogReaderService.getLog--">LogReaderService.getLog</link>, <link linkend="org.osgi.service.log.LogListener">LogListener</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>No Implement</title>
         <para>Consumers of this API must not implement this interface</para>
      </formalpara>
      <section role="method" xreflabel="getBundle()" xml:id="org.osgi.service.log.LogEntry.getBundle--">
         <title>public Bundle getBundle()</title>
         <para role="description">
Returns the bundle that created this <code>LogEntry</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The bundle that created this <code>LogEntry</code> object;
         <code>null</code> if no bundle is associated with this
         <code>LogEntry</code> object.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getException()" xml:id="org.osgi.service.log.LogEntry.getException--">
         <title>public Throwable getException()</title>
         <para role="description">
Returns the exception object associated with this <code>LogEntry</code>
 object.
 
 </para>
         <para>
 In some implementations, the returned exception may not be the original
 exception. To avoid references to a bundle defined exception class, thus
 preventing an uninstalled bundle from being garbage collected, the Log
 Service may return an exception object of an implementation defined
 Throwable subclass. The returned object will attempt to provide as much
 information as possible from the original exception object such as the
 message and stack trace.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>Throwable</code> object of the exception associated with this
         <code>LogEntry</code>;<code>null</code> if no exception is associated with
         this <code>LogEntry</code> object.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getLevel()" xml:id="org.osgi.service.log.LogEntry.getLevel--">
         <title>public int getLevel()</title>
         <para role="description">
Returns the severity level of this <code>LogEntry</code> object.
 
 </para>
         <para>
 This is one of the severity levels defined by the <code>LogService</code>
 interface.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Severity level of this <code>LogEntry</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.log.LogService.LOG_ERROR">LogService.LOG_ERROR</link>, <link linkend="org.osgi.service.log.LogService.LOG_WARNING">LogService.LOG_WARNING</link>, <link linkend="org.osgi.service.log.LogService.LOG_INFO">LogService.LOG_INFO</link>, <link linkend="org.osgi.service.log.LogService.LOG_DEBUG">LogService.LOG_DEBUG</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMessage()" xml:id="org.osgi.service.log.LogEntry.getMessage--">
         <title>public String getMessage()</title>
         <para role="description">
Returns the human readable message associated with this <code>LogEntry</code>
 object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>String</code> containing the message associated with this
         <code>LogEntry</code> object.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getServiceReference()" xml:id="org.osgi.service.log.LogEntry.getServiceReference--">
         <title>public ServiceReference getServiceReference()</title>
         <para role="description">
Returns the <code>ServiceReference</code> object for the service associated
 with this <code>LogEntry</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>ServiceReference</code> object for the service associated with
         this <code>LogEntry</code> object; <code>null</code> if no
         <code>ServiceReference</code> object was provided.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getTime()" xml:id="org.osgi.service.log.LogEntry.getTime--">
         <title>public long getTime()</title>
         <para role="description">
Returns the value of <code>currentTimeMillis()</code> at the time this
 <code>LogEntry</code> object was created.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The system time in milliseconds when this <code>LogEntry</code> object
         was created.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>System.currentTimeMillis()</code>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="LogListener" xml:id="org.osgi.service.log.LogListener">
      <title>public interface LogListener<?line-break?> extends EventListener</title>
      <para>
Subscribes to <code>LogEntry</code> objects from the <code>LogReaderService</code>.
 
 </para>
      <para>
 A <code>LogListener</code> object may be registered with the Log Reader Service
 using the <code>LogReaderService.addLogListener</code> method. After the listener
 is registered, the <code>logged</code> method will be called for each
 <code>LogEntry</code> object created. The <code>LogListener</code> object may be
 unregistered by calling the <code>LogReaderService.removeLogListener</code>
 method.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.log.LogReaderService">LogReaderService</link>, <link linkend="org.osgi.service.log.LogEntry">LogEntry</link>, <link linkend="org.osgi.service.log.LogReaderService.addLogListener-LogListener-">LogReaderService.addLogListener(LogListener)</link>, <link linkend="org.osgi.service.log.LogReaderService.removeLogListener-LogListener-">LogReaderService.removeLogListener(LogListener)</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="logged(LogEntry)" xml:id="org.osgi.service.log.LogListener.logged-LogEntry-">
         <title>public void logged(LogEntry entry)</title>
         <formalpara role="parameter">
            <title>entry</title>
            <para>A <code>LogEntry</code> object containing log information.</para>
         </formalpara>
         <para role="description">
Listener method called for each LogEntry object created.
 
 </para>
         <para>
 As with all event listeners, this method should return to its caller as
 soon as possible.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.log.LogEntry">LogEntry</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="LogReaderService" xml:id="org.osgi.service.log.LogReaderService">
      <title>public interface LogReaderService</title>
      <para>
Provides methods to retrieve <code>LogEntry</code> objects from the log.
 </para>
      <para>
 There are two ways to retrieve <code>LogEntry</code> objects:
 </para>
      <itemizedlist>
         <listitem>
            <para>The primary way to retrieve <code>LogEntry</code> objects is to register a
 <code>LogListener</code> object whose <code>LogListener.logged</code> method will be
 called for each entry added to the log.</para>
         </listitem>
         <listitem>
            <para>To retrieve past <code>LogEntry</code> objects, the <code>getLog</code> method can
 be called which will return an <code>Enumeration</code> of all <code>LogEntry</code>
 objects in the log.</para>
         </listitem>
      </itemizedlist>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.log.LogEntry">LogEntry</link>, <link linkend="org.osgi.service.log.LogListener">LogListener</link>, <link linkend="org.osgi.service.log.LogListener.logged-LogEntry-">LogListener.logged(LogEntry)</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="addLogListener(LogListener)" xml:id="org.osgi.service.log.LogReaderService.addLogListener-LogListener-">
         <title>public void addLogListener(LogListener listener)</title>
         <formalpara role="parameter">
            <title>listener</title>
            <para>A <code>LogListener</code> object to register; the
        <code>LogListener</code> object is used to receive <code>LogEntry</code>
        objects.</para>
         </formalpara>
         <para role="description">
Subscribes to <code>LogEntry</code> objects.
 
 </para>
         <para>
 This method registers a <code>LogListener</code> object with the Log Reader
 Service. The <code>LogListener.logged(LogEntry)</code> method will be called
 for each <code>LogEntry</code> object placed into the log.
 
 </para>
         <para>
 When a bundle which registers a <code>LogListener</code> object is stopped or
 otherwise releases the Log Reader Service, the Log Reader Service must
 remove all of the bundle's listeners.
 
 </para>
         <para>
 If this Log Reader Service's list of listeners already contains a
 listener <code>l</code> such that <code>(l==listener)</code>, this method does
 nothing.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.log.LogListener">LogListener</link>, <link linkend="org.osgi.service.log.LogEntry">LogEntry</link>, <link linkend="org.osgi.service.log.LogListener.logged-LogEntry-">LogListener.logged(LogEntry)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getLog()" xml:id="org.osgi.service.log.LogReaderService.getLog--">
         <title>public Enumeration getLog()</title>
         <para role="description">
Returns an <code>Enumeration</code> of all <code>LogEntry</code> objects in the
 log.
 
 </para>
         <para>
 Each element of the enumeration is a <code>LogEntry</code> object, ordered
 with the most recent entry first. Whether the enumeration is of all
 <code>LogEntry</code> objects since the Log Service was started or some recent
 past is implementation-specific. Also implementation-specific is whether
 informational and debug <code>LogEntry</code> objects are included in the
 enumeration.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An <code>Enumeration</code> of all <code>LogEntry</code> objects in the
         log.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="removeLogListener(LogListener)" xml:id="org.osgi.service.log.LogReaderService.removeLogListener-LogListener-">
         <title>public void removeLogListener(LogListener listener)</title>
         <formalpara role="parameter">
            <title>listener</title>
            <para>A <code>LogListener</code> object to unregister.</para>
         </formalpara>
         <para role="description">
Unsubscribes to <code>LogEntry</code> objects.
 
 </para>
         <para>
 This method unregisters a <code>LogListener</code> object from the Log Reader
 Service.
 
 </para>
         <para>
 If <code>listener</code> is not contained in this Log Reader Service's list of
 listeners, this method does nothing.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.log.LogListener">LogListener</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="LogService" xml:id="org.osgi.service.log.LogService">
      <title>public interface LogService</title>
      <para>
Provides methods for bundles to write messages to the log.
 
 </para>
      <para>
         <code>LogService</code> methods are provided to log messages; optionally with a
 <code>ServiceReference</code> object or an exception.
 
 </para>
      <para>
 Bundles must log messages in the OSGi environment with a severity level
 according to the following hierarchy:
 </para>
      <orderedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.LogService.LOG_ERROR">LOG_ERROR</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.LogService.LOG_WARNING">LOG_WARNING</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.LogService.LOG_INFO">LOG_INFO</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.LogService.LOG_DEBUG">LOG_DEBUG</link>
            </para>
         </listitem>
      </orderedlist>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>No Implement</title>
         <para>Consumers of this API must not implement this interface</para>
      </formalpara>
      <section role="field" xreflabel="LOG_DEBUG" xml:id="org.osgi.service.log.LogService.LOG_DEBUG">
         <title>public static final int LOG_DEBUG = 4</title>
         <para>
A debugging message (Value 4).
 
 </para>
         <para>
 This log entry is used for problem determination and may be irrelevant to
 anyone but the bundle developer.</para>
      </section>
      <section role="field" xreflabel="LOG_ERROR" xml:id="org.osgi.service.log.LogService.LOG_ERROR">
         <title>public static final int LOG_ERROR = 1</title>
         <para>
An error message (Value 1).
 
 </para>
         <para>
 This log entry indicates the bundle or service may not be functional.</para>
      </section>
      <section role="field" xreflabel="LOG_INFO" xml:id="org.osgi.service.log.LogService.LOG_INFO">
         <title>public static final int LOG_INFO = 3</title>
         <para>
An informational message (Value 3).
 
 </para>
         <para>
 This log entry may be the result of any change in the bundle or service
 and does not indicate a problem.</para>
      </section>
      <section role="field" xreflabel="LOG_WARNING" xml:id="org.osgi.service.log.LogService.LOG_WARNING">
         <title>public static final int LOG_WARNING = 2</title>
         <para>
A warning message (Value 2).
 
 </para>
         <para>
 This log entry indicates a bundle or service is still functioning but may
 experience problems in the future because of the warning condition.</para>
      </section>
      <section role="method" xreflabel="log(int,String)" xml:id="org.osgi.service.log.LogService.log-int-String-">
         <title>public void log(int level,String message)</title>
         <formalpara role="parameter">
            <title>level</title>
            <para>The severity of the message. This should be one of the
        defined log levels but may be any integer that is interpreted in a
        user defined way.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>message</title>
            <para>Human readable string describing the condition or
        <code>null</code>.</para>
         </formalpara>
         <para role="description">
Logs a message.
 
 </para>
         <para>
 The <code>ServiceReference</code> field and the <code>Throwable</code> field of the
 <code>LogEntry</code> object will be set to <code>null</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.log.LogService.LOG_ERROR">LOG_ERROR</link>, <link linkend="org.osgi.service.log.LogService.LOG_WARNING">LOG_WARNING</link>, <link linkend="org.osgi.service.log.LogService.LOG_INFO">LOG_INFO</link>, <link linkend="org.osgi.service.log.LogService.LOG_DEBUG">LOG_DEBUG</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="log(int,String,Throwable)" xml:id="org.osgi.service.log.LogService.log-int-String-Throwable-">
         <title>public void log(int level,String message,Throwable exception)</title>
         <formalpara role="parameter">
            <title>level</title>
            <para>The severity of the message. This should be one of the
        defined log levels but may be any integer that is interpreted in a
        user defined way.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>message</title>
            <para>The human readable string describing the condition or
        <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>exception</title>
            <para>The exception that reflects the condition or
        <code>null</code>.</para>
         </formalpara>
         <para role="description">
Logs a message with an exception.
 
 </para>
         <para>
 The <code>ServiceReference</code> field of the <code>LogEntry</code> object will be
 set to <code>null</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.log.LogService.LOG_ERROR">LOG_ERROR</link>, <link linkend="org.osgi.service.log.LogService.LOG_WARNING">LOG_WARNING</link>, <link linkend="org.osgi.service.log.LogService.LOG_INFO">LOG_INFO</link>, <link linkend="org.osgi.service.log.LogService.LOG_DEBUG">LOG_DEBUG</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="log(ServiceReference,int,String)" xml:id="org.osgi.service.log.LogService.log-ServiceReference-int-String-">
         <title>public void log(ServiceReference sr,int level,String message)</title>
         <formalpara role="parameter">
            <title>sr</title>
            <para>The <code>ServiceReference</code> object of the service that this
        message is associated with or <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>level</title>
            <para>The severity of the message. This should be one of the
        defined log levels but may be any integer that is interpreted in a
        user defined way.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>message</title>
            <para>Human readable string describing the condition or
        <code>null</code>.</para>
         </formalpara>
         <para role="description">
Logs a message associated with a specific <code>ServiceReference</code>
 object.
 
 </para>
         <para>
 The <code>Throwable</code> field of the <code>LogEntry</code> will be set to
 <code>null</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.log.LogService.LOG_ERROR">LOG_ERROR</link>, <link linkend="org.osgi.service.log.LogService.LOG_WARNING">LOG_WARNING</link>, <link linkend="org.osgi.service.log.LogService.LOG_INFO">LOG_INFO</link>, <link linkend="org.osgi.service.log.LogService.LOG_DEBUG">LOG_DEBUG</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="log(ServiceReference,int,String,Throwable)" xml:id="org.osgi.service.log.LogService.log-ServiceReference-int-String-Throwable-">
         <title>public void log(ServiceReference sr,int level,String message,Throwable exception)</title>
         <formalpara role="parameter">
            <title>sr</title>
            <para>The <code>ServiceReference</code> object of the service that this
        message is associated with.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>level</title>
            <para>The severity of the message. This should be one of the
        defined log levels but may be any integer that is interpreted in a
        user defined way.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>message</title>
            <para>Human readable string describing the condition or
        <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>exception</title>
            <para>The exception that reflects the condition or
        <code>null</code>.</para>
         </formalpara>
         <para role="description">
Logs a message with an exception associated and a
 <code>ServiceReference</code> object.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.log.LogService.LOG_ERROR">LOG_ERROR</link>, <link linkend="org.osgi.service.log.LogService.LOG_WARNING">LOG_WARNING</link>, <link linkend="org.osgi.service.log.LogService.LOG_INFO">LOG_INFO</link>, <link linkend="org.osgi.service.log.LogService.LOG_DEBUG">LOG_DEBUG</link>
            </para>
         </formalpara>
      </section>
   </section>
</section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="102" revision="$Id: c9efc6920adff43078e90227bbd10891a14c1c1b $" version="5" xml:id="service.http" xml:base="../102/service.http.xml">
  <title>Http Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.http-version" linkend="org.osgi.service.http"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>An OSGi framework normally provides users with access to services on
    the Internet and other networks. This access allows users to remotely
    retrieve information from, and send control to, services in an OSGi
    framework using a standard web browser.</para>

    <para>Bundle developers typically need to develop communication and user
    interface solutions for standard technologies such as HTTP, HTML, XML, and
    servlets.</para>

    <para>The Http Service supports two standard techniques for this
    purpose:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Registering servlets</emphasis> - A servlet is a Java
        object which implements the Java Servlet API. Registering a servlet in
        the Framework gives it control over some part of the Http Service URI
        name-space.</para>
      </listitem>

      <listitem>
        <para><emphasis>Registering resources</emphasis> - Registering a
        resource allows HTML files, image files, and other static resources to
        be made visible in the Http Service URI name-space by the requesting
        bundle.</para>
      </listitem>
    </itemizedlist>

    <para>Implementations of the Http Service can be based on:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="i1231452"/></para>
      </listitem>

      <listitem>
        <para><xref linkend="i1215926"/></para>
      </listitem>
    </itemizedlist>

    <para>Alternatively, implementations of this service can support other
    protocols if these protocols can conform to the semantics of the
    <code>javax.servlet</code> API. This additional support is necessary
    because the Http Service is closely related to <xref linkend="i1217577"/>.
    Http Service implementations must support at least version 2.1 of the Java
    Servlet API.</para>

    <section>
      <title>Entities</title>

      <para>This specification defines the following interfaces which a bundle
      developer can implement collectively as an Http Service or use
      individually:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis><xref linkend="org.osgi.service.http.HttpContext" xrefstyle="hyperlink"/></emphasis> - Allows bundles to provide
          information for a servlet or resource registration.</para>
        </listitem>

        <listitem>
          <para><emphasis><xref linkend="org.osgi.service.http.HttpService" xrefstyle="hyperlink"/></emphasis> - Allows other bundles in the
          Framework to dynamically register and unregister resources and
          servlets into the Http Service URI name-space.</para>
        </listitem>

        <listitem>
          <para><emphasis><xref linkend="org.osgi.service.http.NamespaceException" xrefstyle="hyperlink"/></emphasis> - Is thrown to indicate an error
          with the caller's request to register a servlet or resource into the
          Http Service URI name-space.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>Http Service Overview Diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.313in" contentwidth="6.496in" fileref="httpservice-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section xml:id="i1223311">
    <title>Registering Servlets</title>

    <para><code>javax.servlet.Servlet</code> objects can be registered with
    the Http Service by using the <code>HttpService</code> interface. For this
    purpose, the <code>HttpService</code> interface defines the method <xref linkend="org.osgi.service.http.HttpService.registerServlet-String-javax.servlet.Servlet-Dictionary-HttpContext-" xrefstyle="hyperlink"/>.</para>

    <para>For example, if the Http Service implementation is listening to port
    80 on the machine <code>www.acme.com</code> and the <code>Servlet</code>
    object is registered with the name <code>"/servlet"</code>, then the
    <code>Servlet</code> object's <code>service</code> method is called when
    the following URL is used from a web browser:</para>

    <programlisting>http://www.acme.com/servlet?name=bugs</programlisting>

    <para>All <code>Servlet</code> objects and resource registrations share
    the same name-space. If an attempt is made to register a resource or
    <code>Servlet</code> object under the same name as a currently registered
    resource or <code>Servlet</code> object, a <code>NamespaceException</code>
    is thrown. See <xref linkend="i1208280"/> for more information about the
    handling of the Http Service name-space.</para>

    <para>Each <code>Servlet</code> registration must be accompanied with an
    <code>HttpContext</code> object. This object provides the handling of
    resources, media typing, and a method to handle authentication of remote
    requests. See <xref linkend="service.http.authentication"/>.</para>

    <para>For convenience, a default <code>HttpContext</code> object is
    provided by the Http Service and can be obtained with <xref linkend="org.osgi.service.http.HttpService.createDefaultHttpContext--" xrefstyle="hyperlink"/>. Passing a <code>null</code> parameter to the
    registration method achieves the same effect.</para>

    <para><code>Servlet</code> objects require a <code>ServletContext</code>
    object. This object provides a number of functions to access the Http
    Service Java Servlet environment. It is created by the implementation of
    the Http Service for each unique <code>HttpContext</code> object with
    which a <code>Servlet</code> object is registered. Thus,
    <code>Servlet</code> objects registered with the same
    <code>HttpContext</code> object must also share the same
    <code>ServletContext</code> object.</para>

    <para><code>Servlet</code> objects are initialized by the Http Service
    when they are registered and bound to that specific Http Service. The
    initialization is done by calling the <code>Servlet</code> object's
    <code>Servlet.init(ServletConfig)</code> method. The
    <code>ServletConfig</code> parameter provides access to the initialization
    parameters specified when the <code>Servlet</code> object was
    registered.</para>

    <para>Therefore, the same <code>Servlet</code> instance must not be reused
    for registration with another Http Service, nor can it be registered under
    multiple names. Unique instances are required for each
    registration.</para>

    <para>The following example code demonstrates the use of the
    <code>registerServlet</code> method:</para>

    <programlisting xml:id="i1223332">Hashtable initparams = new Hashtable();
initparams.put( "name", "value" );

Servlet myServlet = new HttpServlet() {
    String name = "&lt;not set&gt;";

    public void init( ServletConfig config ) {
        this.name = (String)
            config.getInitParameter( "name" );
    }

    public void doGet( 
        HttpServletRequest req,
        HttpServletResponse rsp 
    ) throws IOException {
        rsp.setContentType( "text/plain" );
        req.getWriter().println( this.name );
    }
};

getHttpService().registerServlet(
    "/servletAlias", 
    myServlet, 
    initparams, 
    null // use default context
);
// myServlet has been registered 
// and its init method has been called. Remote
// requests are now handled and forwarded to 
// the servlet.
...
getHttpService().unregister("/servletAlias");
// myServlet has been unregistered and its 
// destroy method has been called
</programlisting>

    <para>This example registers the servlet, <code>myServlet</code>, at
    alias: <code>/servletAlias</code>. Future requests for
    <code>http://www.acme.com/servletAlias</code> maps to the servlet,
    <code>myServlet</code>, whose <code>service</code> method is called to
    process the request. (The <code>service</code> method is called in the
    <code>HttpServlet</code> base class and dispatched to a
    <code>doGet</code>, <code>doPut</code>, <code>doPost</code>,
    <code>doOptions</code>, <code>doTrace</code>, or <code>doDelete</code>
    call depending on the HTTP request method used.)</para>
  </section>

  <section>
    <title>Registering Resources</title>

    <para>A resource is a file containing images, static HTML pages, sounds,
    movies, applets, etc. Resources do not require any handling from the
    bundle. They are transferred directly from their source - usually the JAR
    file that contains the code for the bundle - to the requester using
    HTTP.</para>

    <para>Resources could be handled by Servlet objects as explained in <xref linkend="i1223311"/>. Transferring a resource over HTTP, however, would
    require very similar <code>Servlet</code> objects for each bundle. To
    prevent this redundancy, resources can be registered directly with the
    Http Service via the <xref linkend="org.osgi.service.http.HttpService" xrefstyle="hyperlink"/> interface. This <code>HttpService</code> interface
    defines the
    <code>registerResources(String,String,HttpContext)</code>method for
    registering a resource into the Http Service URI name-space.</para>

    <para>The first parameter is the external alias under which the resource
    is registered with the Http Service. The second parameter is an internal
    prefix to map this resource to the bundle's name-space. When a request is
    received, the <code>HttpService</code> object must remove the external
    alias from the URI, replace it with the internal prefix, and call the
    <code>getResource(String)</code> method with this new name on the
    associated <code>HttpContext</code> object. The <code>HttpContext</code>
    object is further used to get the MIME type of the resource and to
    authenticate the request.</para>

    <para>Resources are returned as a <code>java.net.URL</code> object. The
    Http Service must read from this <code>URL</code> object and transfer the
    content to the initiator of the HTTP request.</para>

    <para>This return type was chosen because it matches the return type of
    the <code>java.lang.Class.getResource(String resource)</code> method. This
    method can retrieve resources directly from the same place as the one from
    which the class was loaded - often a package directory in the JAR file of
    the bundle. This method makes it very convenient to retrieve resources
    from the bundle that are contained in the package.</para>

    <para>The following example code demonstrates the use of the
    <code>register Resources</code> method:</para>

    <programlisting>package com.acme;
...
HttpContext context = new HttpContext() {
    public boolean handleSecurity(
        HttpServletRequest request,
        HttpServletResponse response
    ) throws IOException {
        return true;
    }

    public URL getResource(String name) {
        return getClass().getResource(name);
    }

    public String getMimeType(String name) {
        return null;
    }
};

getHttpService().registerResources (
    "/files", 
    "www", 
    context
);
...
getHttpService().unregister("/files");
</programlisting>

    <para>This example registers the alias /files on the Http Service.
    Requests for resources below this name-space are transferred to the
    <code>HttpContext</code> object with an internal name of
    <code>www/&lt;name&gt;</code>. This example uses the <code>Class.get
    Resource(String)</code> method. Because the internal name does not start
    with a "/", it must map to a resource in the "<code>com/acme/www</code>"
    directory of the JAR file. If the internal name did start with a "/", the
    package name would not have to be prefixed and the JAR file would be
    searched from the root. Consult the
    <code>java.lang.Class.getResource(String)</code> method for more
    information.</para>

    <para>In the example, a request for
    <code>http://www.acme.com/files/myfile.html</code> must map to the name
    "<code>com/acme/www/myfile.html"</code> which is in the bundle's JAR
    file.</para>

    <para>More sophisticated implementations of the
    <code>getResource(String</code>) method could filter the input name,
    restricting the resources that may be returned or map the input name onto
    the file system (if the security implications of this action are
    acceptable).</para>

    <para>Alternatively, the resource registration could have used a default
    <code>HttpContext</code> object, as demonstrated in the following call to
    <code>registerResources</code>:</para>

    <programlisting>getHttpService().registerResources(
    "/files", 
    "/com/acme/www", 
    null
);</programlisting>

    <para>In this case, the Http Service implementation would call the <xref linkend="org.osgi.service.http.HttpService.createDefaultHttpContext--" xrefstyle="hyperlink"/> method and use its return value as the
    <code>HttpContext</code> argument for the <code>registerResources</code>
    method. The default implementation must map the resource request to the
    bundle's resource, using <code>Bundle.getResource(String)</code>. In the
    case of the previous example, however, the internal name must now specify
    the full path to the directory containing the resource files in the JAR
    file. No automatic prefixing of the package name is done.</para>

    <para>The <code>getMimeType(String)</code> implementation of the default
    <code>HttpContext</code> object should rely on the default mapping
    provided by the Http Service by returning <code>null</code>. Its
    <code>handleSecurity(HttpServletRequest,HttpServletResponse)</code> may
    implement an authentication mechanism that is
    implementation-dependent.</para>
  </section>

  <section xml:id="i1208280">
    <title>Mapping HTTP Requests to Servlet and Resource Registrations</title>

    <para>When an HTTP request comes in from a client, the Http Service checks
    to see if the requested URI matches any registered aliases. A URI matches
    only if the path part of the URI is exactly the same string. Matching is
    case sensitive.</para>

    <para>If it does match, a matching registration takes place, which is
    processed as follows:</para>

    <orderedlist>
      <listitem>
        <para>If the registration corresponds to a servlet, the authorization
        is verified by calling the <code>handleSecurity</code> method of the
        associated <code>HttpContext</code> object. See <xref linkend="service.http.authentication"/>. If the request is authorized,
        the servlet must be called by its <code>service</code> method to
        complete the HTTP request.</para>
      </listitem>

      <listitem>
        <para>If the registration corresponds to a resource, the authorization
        is verified by calling the <code>handleSecurity</code> method of the
        associated <code>HttpContext</code> object. See <xref linkend="service.http.authentication"/>. If the request is authorized,
        a target resource name is constructed from the requested URI by
        substituting the alias from the registration with the internal name
        from the registration if the alias is not "/". If the alias is "/",
        then the target resource name is constructed by prefixing the
        requested URI with the internal name. An internal name of "/" is
        considered to have the value of the empty string ("") during this
        process.</para>
      </listitem>

      <listitem>
        <para>The target resource name must be passed to the
        <code>getResource</code> method of the associated
        <code>HttpContext</code> object.</para>
      </listitem>

      <listitem>
        <para>If the returned <code>URL</code> object is not
        <code>null</code>, the Http Service must return the contents of the
        <code>URL</code> to the client completing the HTTP request. The
        translated target name, as opposed to the original requested URI, must
        also be used as the argument to
        <code>HttpContext.getMimeType</code>.</para>
      </listitem>

      <listitem>
        <para>If the returned <code>URL</code> object is <code>null</code>,
        the Http Service continues as if there was no match.</para>
      </listitem>

      <listitem>
        <para>If there is no match, the Http Service must attempt to match
        sub-strings of the requested URI to registered aliases. The
        sub-strings of the requested URI are selected by removing the last
        <code>"/"</code> and everything to the right of the last "/".</para>
      </listitem>
    </orderedlist>

    <para>The Http Service must repeat this process until either a match is
    found or the sub-string is an empty string. If the sub-string is empty and
    the alias <code>"/"</code> is registered, the request is considered to
    match the alias <code>"/"</code>. Otherwise, the Http Service must return
    <code>HttpServletResponse.SC_NOT_FOUND(404)</code> to the client.</para>

    <para>For example, an HTTP request comes in with a request URI of
    <code>"/fudd/bugs/foo.txt"</code>, and the only registered alias is
    <code>"/fudd"</code>. A search for <code>"/fudd/bugs/foo.txt"</code> will
    not match an alias. Therefore, the Http Service will search for the alias
    "<code>/fudd/bugs"</code> and the alias "<code>/fudd"</code>. The latter
    search will result in a match and the matched alias registration must be
    used.</para>

    <para>Registrations for identical aliases are not allowed. If a bundle
    registers the alias "<code>/fudd"</code>, and another bundle tries to
    register the exactly the same alias, the second caller must receive a
    <code>NamespaceException</code> and its resource or servlet must
    <emphasis>not</emphasis> be registered. It could, however, register a
    similar alias - for example, "<code>/fudd/bugs"</code>, as long as no
    other registration for this alias already exists.</para>

    <para>The following table shows some examples of the usage of the
    name-space.</para>

    <table>
      <title>Examples of Name-space Mapping</title>

      <tgroup cols="4">
        <thead>
          <row>
            <entry>Alias</entry>

            <entry>Internal Name</entry>

            <entry>URI</entry>

            <entry>getResource Parameter</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>/</code></entry>

            <entry><code>(empty string)</code></entry>

            <entry><code>/fudd/bugs</code></entry>

            <entry><code>/fudd/bugs</code></entry>
          </row>

          <row>
            <entry><code>/</code></entry>

            <entry><code>/</code></entry>

            <entry><code>/fudd/bugs</code></entry>

            <entry><code>/fudd/bugs</code></entry>
          </row>

          <row>
            <entry><code>/</code></entry>

            <entry><code>/tmp</code></entry>

            <entry><code>/fudd/bugs</code></entry>

            <entry><code>/tmp/fudd/bugs</code></entry>
          </row>

          <row>
            <entry><code>/fudd</code></entry>

            <entry><code>(empty string)</code></entry>

            <entry><code>/fudd/bugs</code></entry>

            <entry><code>/bugs</code></entry>
          </row>

          <row>
            <entry><code>/fudd</code></entry>

            <entry><code>/</code></entry>

            <entry><code>/fudd/bugs</code></entry>

            <entry><code>/bugs</code></entry>
          </row>

          <row>
            <entry><code>/fudd</code></entry>

            <entry><code>/tmp</code></entry>

            <entry><code>/fudd/bugs</code></entry>

            <entry><code>/tmp/bugs</code></entry>
          </row>

          <row>
            <entry><code>/fudd</code></entry>

            <entry><code>tmp</code></entry>

            <entry><code>/fudd/bugs/x.gif</code></entry>

            <entry><code>tmp/bugs/x.gif</code></entry>
          </row>

          <row>
            <entry><code>/fudd/bugs/x.gif</code></entry>

            <entry><code>tmp/y.gif</code></entry>

            <entry><code>/fudd/bugs/x.gif</code></entry>

            <entry><code>tmp/y.gif</code></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section>
    <title>The Default Http Context Object</title>

    <para>The <code>HttpContext</code> object in the first example
    demonstrates simple implementations of the <xref linkend="org.osgi.service.http.HttpContext" xrefstyle="hyperlink"/>
    interface methods. Alternatively, the example could have used a default
    <code>HttpContext</code> object, as demonstrated in the following call to
    <code>registerServlet</code>:</para>

    <programlisting>getHttpService().registerServlet(
    "/servletAlias", 
    myServlet,
    initparams, 
    null
); </programlisting>

    <para>In this case, the Http Service implementation must call
    <code>createDefault HttpContext</code> and use the return value as the
    <code>HttpContext</code> argument.</para>

    <para>If the default <code>HttpContext</code> object, and thus the
    <code>ServletContext</code> object, is to be shared by multiple servlet
    registrations, the previous servlet registration example code needs to be
    changed to use the same default <code>HttpContext</code> object. This
    change is demonstrated in the next example:</para>

    <programlisting>HttpContext defaultContext =
    getHttpService().createDefaultHttpContext();

getHttpService().registerServlet(   
    "/servletAlias", 
    myServlet, 
    initparams, 
    defaultContext
);

// defaultContext can be reused 
// for further servlet registrations</programlisting>
  </section>

  <section xml:id="i1243471">
    <title>Multipurpose Internet Mail Extension (MIME) Types</title>

    <para>MIME defines an extensive set of headers and procedures to encode
    binary messages in US-ASCII mails. For an overview of all the related
    RFCs, consult <xref linkend="i1219807"/>.</para>

    <para>An important aspect of this extension is the type (file format)
    mechanism of the binary messages. The type is defined by a string
    containing a general category (text, application, image, audio and video,
    multipart, and message) followed by a "/" and a specific media type, as in
    the example, <code>"text/html"</code> for HTML formatted text files. A
    MIME type string can be followed by additional specifiers by separating
    <code>key=value</code> pairs with a semicolon (<code>';' \u003B</code>).
    These specifiers can be used, for example, to define character sets as
    follows:</para>

    <programlisting>text/plain ; charset=iso-8859-1</programlisting>

    <para>The Internet Assigned Number Authority (IANA) maintains a set of
    defined MIME media types. This list can be found at <xref linkend="i1220020"/>. MIME media types are extendable, and when any part
    of the type starts with the prefix <code>"x-"</code>, it is assumed to be
    vendor-specific and can be used for testing. New types can be registered
    as described in <xref linkend="i1220024"/>.</para>

    <para>HTTP bases its media typing on the MIME RFCs. The "Content-Type"
    header should contain a MIME media type so that the browser can recognize
    the type and format the content correctly.</para>

    <para>The source of the data must define the MIME media type for each
    transfer. Most operating systems do not support types for files, but use
    conventions based on file names, such as the last part of the file name
    after the last ".". This extension is then mapped to a media type.</para>

    <para>Implementations of the Http Service should have a reasonable default
    of mapping common extensions to media types based on file
    extensions.</para>

    <table>
      <title>Sample Extension to MIME Media Mapping</title>

      <tgroup cols="3">
        <colspec colnum="1"/>

        <colspec colnum="2" colwidth="2*"/>

        <colspec colnum="3" colwidth="4*"/>

        <thead>
          <row>
            <entry>Extension</entry>

            <entry>MIME media type</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><para><code>.jpg .jpeg</code></para></entry>

            <entry><para><code>image/jpeg</code></para></entry>

            <entry><para>JPEG Files</para></entry>
          </row>

          <row>
            <entry><para><code>.gif</code></para></entry>

            <entry><para><code>image/gif</code></para></entry>

            <entry><para>GIF Files</para></entry>
          </row>

          <row>
            <entry><para><code>.css</code></para></entry>

            <entry><para><code>text/css</code></para></entry>

            <entry><para>Cascading Style Sheet Files</para></entry>
          </row>

          <row>
            <entry><para><code>.txt</code></para></entry>

            <entry><para><code>text/plain</code></para></entry>

            <entry><para>Text Files</para></entry>
          </row>

          <row>
            <entry><para><code>.wml</code></para></entry>

            <entry><para><code>text/vnd.wap.wml</code></para></entry>

            <entry><para>Wireless Access Protocol (WAP) Mark
            Language</para></entry>
          </row>

          <row>
            <entry><para><code>.htm .html</code></para></entry>

            <entry><para><code>text/html</code></para></entry>

            <entry><para>Hyper Text Markup Language</para></entry>
          </row>

          <row>
            <entry><para><code>.wbmp</code></para></entry>

            <entry><para><code>image/vnd.wap.wbmp</code></para></entry>

            <entry><para>Bitmaps for WAP</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Only the bundle developer, however, knows exactly which files have
    what media type. The <code>HttpContext</code> interface can therefore be
    used to map this knowledge to the media type. The <code>HttpContext</code>
    class has the following method for this:
    <code>getMimeType(String)</code>.</para>

    <para>The implementation of this method should inspect the file name and
    use its internal knowledge to map this name to a MIME media type.</para>

    <para>Simple implementations can extract the extension and look up this
    extension in a table.</para>

    <para>Returning <code>null</code> from this method allows the Http Service
    implementation to use its default mapping mechanism.</para>
  </section>

  <section xml:id="service.http.authentication">
    <title>Authentication</title>

    <para>The Http Service has separated the authentication and authorization
    of a request from the execution of the request. This separation allows
    bundles to use available <code>Servlet</code> sub-classes while still
    providing bundle specific authentication and authorization of the
    requests.</para>

    <para>Prior to servicing each incoming request, the Http Service calls the
    <xref linkend="org.osgi.service.http.HttpContext.handleSecurity-javax.servlet.http.HttpServletRequest-javax.servlet.http.HttpServletResponse-" xrefstyle="hyperlink"/> method on the <code>HttpContext</code> object that
    is associated with the request URI. This method controls whether the
    request is processed in the normal manner or an authentication error is
    returned.</para>

    <para>If an implementation wants to authenticate the request, it can use
    the authentication mechanisms of HTTP. See <xref linkend="i1220308"/>.
    These mechanisms normally interpret the headers and decide if the user
    identity is available, and if it is, whether that user has authenticated
    itself correctly.</para>

    <para>There are many different ways of authenticating users, and the
    <code>handleSecurity</code> method on the <code>HttpContext</code> object
    can use whatever method it requires. If the method returns
    <code>true</code>, the request must continue to be processed using the
    potentially modified <code>HttpServletRequest</code> and
    <code>HttpServletResponse</code> objects. If the method returns
    <code>false</code>, the request must <emphasis>not</emphasis> be
    processed.</para>

    <para>A common standard for HTTP is the basic authentication scheme that
    is not secure when used with HTTP. Basic authentication passes the
    password in base 64 encoded strings that are trivial to decode into clear
    text. Secure transport protocols like HTTPS use SSL to hide this
    information. With these protocols basic authentication is secure.</para>

    <para>Using basic authentication requires the following steps:</para>

    <orderedlist>
      <listitem>
        <para>If no <code>Authorization</code> header is set in the request,
        the method should set the <code>WWW-Authenticate</code> header in the
        response. This header indicates the desired authentication mechanism
        and the realm. For example, <code>WWW-Authenticate: Basic
        realm="ACME"</code>.</para>

        <para>The header should be set with the response object that is given
        as a parameter to the <code>handleSecurity</code> method. The
        <code>handleSecurity</code> method should set the status to
        <code>HttpServletResponse.SC_UNAUTHORIZED (401)</code> and return
        <code>false</code>.</para>
      </listitem>

      <listitem>
        <para>Secure connections can be verified with the
        <code>ServletRequest.getScheme()</code> method. This method returns,
        for example, "<code>https</code>" for an SSL connection; the
        <code>handleSecurity</code> method can use this and other information
        to decide if the connection's security level is acceptable. If not,
        the <code>handleSecurity</code> method should set the status to
        <code>HttpServletResponse.SC_FORBIDDEN</code> (403) and return
        <code>false</code>.</para>
      </listitem>

      <listitem>
        <para>Next, the request must be authenticated. When basic
        authentication is used, the <code>Authorization</code> header is
        available in the request and should be parsed to find the user and
        password. See <xref linkend="i1220308"/> for more information.</para>

        <para>If the user cannot be authenticated, the status of the response
        object should be set to <code>HttpServletResponse.SC_UNAUTHORIZED
        (401)</code> and return <code>false</code>.</para>
      </listitem>

      <listitem>
        <para>The authentication mechanism that is actually used and the
        identity of the authenticated user can be of interest to the
        <code>Servlet</code> object. Therefore, the implementation of the
        <code>handleSecurity</code> method should set this information in the
        request object using the <code>ServletRequest.setAttribute</code>
        method. This specification has defined a number of OSGi-specific
        attribute names for this purpose:</para>

        <itemizedlist>
          <listitem>
            <para><xref linkend="org.osgi.service.http.HttpContext.AUTHENTICATION_TYPE" xrefstyle="hyperlink"/> - Specifies the scheme used in
            authentication. A Servlet may retrieve the value of this attribute
            by calling the <code>HttpServletRequest.getAuthType</code> method.
            This attribute name is
            <code>org.osgi.service.http.authentication.type</code>.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.http.HttpContext.REMOTE_USER" xrefstyle="hyperlink"/> - Specifies the name of the authenticated
            user. A Servlet may retrieve the value of this attribute by
            calling the <code>HttpServletRequest.getRemoteUser</code> method.
            This attribute name is
            <code>org.osgi.service.http.authentication.remote.user</code>.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.http.HttpContext.AUTHORIZATION" xrefstyle="hyperlink"/> - If a User Admin service is available in
            the environment, then the <code>handleSecurity</code> method
            should set this attribute with the <code>Authorization</code>
            object obtained from the User Admin service. Such an object
            encapsulates the authentication of its remote user. A Servlet may
            retrieve the value of this attribute by calling
            <code>ServletRequest.getAttribute(HttpContext.AUTHORIZATION)</code>.
            This header name is
            <code>org.osgi.service.useradmin.authorization</code>.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Once the request is authenticated and any attributes are set,
        the <code>handleSecurity</code> method should return
        <code>true</code>. This return indicates to the Http Service that the
        request is authorized and processing may continue. If the request is
        for a Servlet, the Http Service must then call the
        <code>service</code> method on the <code>Servlet</code> object.</para>
      </listitem>
    </orderedlist>
  </section>

  <section>
    <title>Security</title>

    <para>This section only applies when executing in an OSGi environment
    which is enforcing Java permissions.</para>

    <section>
      <title>Accessing Resources with the Default Http Context</title>

      <para>The Http Service must be granted
      <code>AdminPermission[*,RESOURCE]</code> so that bundles may use a
      default <code>HttpContext</code> object. This is necessary because the
      implementation of the default <code>HttpContext</code> object must call
      <code>Bundle.getResource</code> to access the resources of a bundle and
      this method requires the caller to have
      <code>AdminPermission[bundle,RESOURCE]</code>.</para>

      <para>Any bundle may access resources in its own bundle by calling
      <code>Class.getResource</code>. This operation is privileged. The
      resulting <code>URL</code> object may then be passed to the Http Service
      as the result of a <code>HttpContext.getResource</code> call. No further
      permission checks are performed when accessing bundle resource
      <code>URL</code> objects, so the Http Service does not need to be
      granted any additional permissions.</para>
    </section>

    <section>
      <title>Accessing Other Types of Resources</title>

      <para>In order to access resources that were not registered using the
      default <code>HttpContext</code> object, the Http Service must be
      granted sufficient privileges to access these resources. For example, if
      the <code>getResource</code> method of the registered
      <code>HttpContext</code> object returns a file URL, the Http Service
      requires the corresponding <code>FilePermission</code> to read the file.
      Similarly, if the <code>getResource</code> method of the registered
      <code>HttpContext</code> object returns an HTTP URL, the Http Service
      requires the corresponding <code>SocketPermission</code> to connect to
      the resource.</para>

      <para>Therefore, in most cases, the Http Service should be a privileged
      service that is granted sufficient permission to serve any bundle's
      resources, no matter where these resources are located. Therefore, the
      Http Service must capture the <code>AccessControlContext</code> object
      of the bundle registering resources or a servlet, and then use the
      captured <code>AccessControlContext</code> object when accessing
      resources returned by the registered <code>HttpContext</code> object.
      This situation prevents a bundle from registering resources that it does
      not have permission to access.</para>

      <para>Therefore, the Http Service should follow a scheme like the
      following example. When a resource or servlet is registered, it should
      capture the context.</para>

      <programlisting>AccessControlContext acc = 
        AccessController.getContext();</programlisting>

      <para>When a URL returned by the <code>getResource</code> method of the
      associated <code>HttpContext</code> object is called, the Http Service
      must call the <code>getResource</code> method in a
      <code>doPrivileged</code> construct using the
      <code>AccessControlContext</code> object of the registering
      bundle:</para>

      <programlisting>AccessController.doPrivileged(
    new PrivilegedExceptionAction() {
        public Object run() throws Exception {
        ...
        }
    }, acc);</programlisting>

      <para>The Http Service must only use the captured
      <code>AccessControlContext</code> when accessing resource
      <code>URL</code> objects.</para>
    </section>

    <section>
      <title>Servlet and HttpContext objects</title>

      <para>This specification does not require that the Http Service is
      granted All Permission or wraps calls to the Servlet and Http Context
      objects in a <code>doPrivileged</code> block. Therefore, it is the
      responsibility of the Servlet and Http Context implementations to use a
      <code>doPrivileged</code> block when performing privileged
      operations.</para>
    </section>
  </section>

  <section>
    <title>Configuration Properties</title>

    <para>If the Http Service does not have its port values configured through
    some other means, the Http Service implementation should use the following
    properties to determine the port values upon which to listen.</para>

    <para>The following OSGi environment properties are used to specify
    default HTTP ports:</para>

    <itemizedlist>
      <listitem>
        <para><code>org.osgi.service.http.port</code> - This property
        specifies the port used for servlets and resources accessible via
        HTTP. The default value for this property is 80.</para>
      </listitem>

      <listitem>
        <para><code>org.osgi.service.http.port.secure</code> - This property
        specifies the port used for servlets and resources accessible via
        HTTPS. The default value for this property is 443.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.http" xml:id="org.osgi.service.http" xml:base="../../generated/javadoc/docbook/org.osgi.service.http.xml">
   <title>org.osgi.service.http</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.http-version">Version 1.2</releaseinfo>
      <edition xml:id="org.osgi.service.http-version.number">1.2</edition>
   </info>
   <para>
Http Service Package Version 1.2.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.http; version="[1.2,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.http; version="[1.2,1.3)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.HttpContext">
                  <code>HttpContext</code>
               </link> - 
Context for HTTP Requests.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.HttpService">
                  <code>HttpService</code>
               </link> - 
The Http Service allows other bundles in the OSGi environment to dynamically
 register resources and servlets into the URI namespace of Http Service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.NamespaceException">
                  <code>NamespaceException</code>
               </link> - 
A NamespaceException is thrown to indicate an error with the caller's request
 to register a servlet or resources into the URI namespace of the Http
 Service.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="HttpContext" xml:id="org.osgi.service.http.HttpContext">
      <title>public interface HttpContext</title>
      <para>
Context for HTTP Requests.
 
 </para>
      <para>
 This service defines methods that the Http Service may call to get
 information for a request.
 
 </para>
      <para>
 Servlets may be associated with an <code>HttpContext</code> service. Servlets that
 are associated using the same <code>HttpContext</code> object will share the same
 <code>ServletContext</code> object.
 
 </para>
      <para>
 If no <code>HttpContext</code> service is associated, a default
 <code>HttpContext</code> is used. The behavior of the methods on the default
 <code>HttpContext</code> is defined as follows:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <code>getMimeType</code> - Does not define any customized MIME types for the
 <code>Content-Type</code> header in the response, and always returns <code>null</code>.
 </para>
         </listitem>
         <listitem>
            <para>
               <code>handleSecurity</code> - Performs implementation-defined authentication
 on the request.</para>
         </listitem>
         <listitem>
            <para>
               <code>getResource</code> - Assumes the named resource is in the bundle of the
 servlet service. This method calls the servlet bundle's
 <code>Bundle.getResource</code> method, and returns the appropriate URL to access
 the resource. On a Java runtime environment that supports permissions, the
 Http Service needs to be granted
 <code>org.osgi.framework.AdminPermission[*,RESOURCE]</code>.</para>
         </listitem>
      </itemizedlist>
      <section role="field" xreflabel="AUTHENTICATION_TYPE" xml:id="org.osgi.service.http.HttpContext.AUTHENTICATION_TYPE">
         <title>public static final String AUTHENTICATION_TYPE = "org.osgi.service.http.authentication.type"</title>
         <para>
            <code>HttpServletRequest</code> attribute specifying the scheme used in
 authentication. The value of the attribute can be retrieved by
 <code>HttpServletRequest.getAuthType</code>. This attribute name is
 <code>org.osgi.service.http.authentication.type</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="AUTHORIZATION" xml:id="org.osgi.service.http.HttpContext.AUTHORIZATION">
         <title>public static final String AUTHORIZATION = "org.osgi.service.useradmin.authorization"</title>
         <para>
            <code>HttpServletRequest</code> attribute specifying the <code>Authorization</code>
 object obtained from the <code>org.osgi.service.useradmin.UserAdmin</code>
 service. The value of the attribute can be retrieved by
 <code>HttpServletRequest.getAttribute(HttpContext.AUTHORIZATION)</code>. This
 attribute name is <code>org.osgi.service.useradmin.authorization</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="REMOTE_USER" xml:id="org.osgi.service.http.HttpContext.REMOTE_USER">
         <title>public static final String REMOTE_USER = "org.osgi.service.http.authentication.remote.user"</title>
         <para>
            <code>HttpServletRequest</code> attribute specifying the name of the
 authenticated user. The value of the attribute can be retrieved by
 <code>HttpServletRequest.getRemoteUser</code>. This attribute name is
 <code>org.osgi.service.http.authentication.remote.user</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMimeType(String)" xml:id="org.osgi.service.http.HttpContext.getMimeType-String-">
         <title>public String getMimeType(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name for which to determine the MIME type.</para>
         </formalpara>
         <para role="description">
Maps a name to a MIME type.
 
 </para>
         <para>
 Called by the Http Service to determine the MIME type for the specified
 name. For servlets, the Http Service will call this method to support the
 <code>ServletContext</code> method <code>getMimeType</code>. For resources, the
 Http Service will call this method to determine the MIME type for the
 <code>Content-Type</code> header in the response.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The MIME type (e.g. text/html) of the specified name or
         <code>null</code> to indicate that the Http Service should determine
         the MIME type itself.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getResource(String)" xml:id="org.osgi.service.http.HttpContext.getResource-String-">
         <title>public URL getResource(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>the name of the requested resource</para>
         </formalpara>
         <para role="description">
Maps a resource name to a URL.
 
 </para>
         <para>
 Called by the Http Service to map a resource name to a URL. For servlet
 registrations, Http Service will call this method to support the
 <code>ServletContext</code> methods <code>getResource</code> and
 <code>getResourceAsStream</code>. For resource registrations, Http Service
 will call this method to locate the named resource. The context can
 control from where resources come. For example, the resource can be
 mapped to a file in the bundle's persistent storage area via
 <code>bundleContext.getDataFile(name).toURL()</code> or to a resource in the
 context's bundle via <code>getClass().getResource(name)</code>
         </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>URL that Http Service can use to read the resource or
         <code>null</code> if the resource does not exist.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="handleSecurity(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" xml:id="org.osgi.service.http.HttpContext.handleSecurity-javax.servlet.http.HttpServletRequest-javax.servlet.http.HttpServletResponse-">
         <title>public boolean handleSecurity(HttpServletRequest request,HttpServletResponse response) throws IOException</title>
         <formalpara role="parameter">
            <title>request</title>
            <para>The HTTP request.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>response</title>
            <para>The HTTP response.</para>
         </formalpara>
         <para role="description">
Handles security for the specified request.
 
 </para>
         <para>
 The Http Service calls this method prior to servicing the specified
 request. This method controls whether the request is processed in the
 normal manner or an error is returned.
 
 </para>
         <para>
 If the request requires authentication and the Authorization header in
 the request is missing or not acceptable, then this method should set the
 WWW-Authenticate header in the response object, set the status in the
 response object to Unauthorized(401) and return <code>false</code>. See also
 RFC 2617: <emphasis>HTTP Authentication: Basic and Digest Access Authentication
 </emphasis> (available at http://www.ietf.org/rfc/rfc2617.txt).
 
 </para>
         <para>
 If the request requires a secure connection and the <code>getScheme</code>
 method in the request does not return 'https' or some other acceptable
 secure protocol, then this method should set the status in the response
 object to Forbidden(403) and return <code>false</code>.
 
 </para>
         <para>
 When this method returns <code>false</code>, the Http Service will send the
 response back to the client, thereby completing the request. When this
 method returns <code>true</code>, the Http Service will proceed with servicing
 the request.
 
 </para>
         <para>
 If the specified request has been authenticated, this method must set the
 <link linkend="org.osgi.service.http.HttpContext.AUTHENTICATION_TYPE">AUTHENTICATION_TYPE</link> request attribute to the type of
 authentication used, and the <link linkend="org.osgi.service.http.HttpContext.REMOTE_USER">REMOTE_USER</link> request attribute to
 the remote user (request attributes are set using the
 <code>setAttribute</code> method on the request). If this method does not
 perform any authentication, it must not set these attributes.
 
 </para>
         <para>
 If the authenticated user is also authorized to access certain resources,
 this method must set the <link linkend="org.osgi.service.http.HttpContext.AUTHORIZATION">AUTHORIZATION</link> request attribute to the
 <code>Authorization</code> object obtained from the
 <code>org.osgi.service.useradmin.UserAdmin</code> service.
 
 </para>
         <para>
 The servlet responsible for servicing the specified request determines
 the authentication type and remote user by calling the
 <code>getAuthType</code> and <code>getRemoteUser</code> methods, respectively, on
 the request.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the request should be serviced, <code>false</code> if
         the request should not be serviced and Http Service will send the
         response back to the client.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– may be thrown by this method. If this occurs,
         the Http Service will terminate the request and close the socket.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="HttpService" xml:id="org.osgi.service.http.HttpService">
      <title>public interface HttpService</title>
      <para>
The Http Service allows other bundles in the OSGi environment to dynamically
 register resources and servlets into the URI namespace of Http Service. A
 bundle may later unregister its resources or servlets.
   </para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.http.HttpContext">HttpContext</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>No Implement</title>
         <para>Consumers of this API must not implement this interface</para>
      </formalpara>
      <section role="method" xreflabel="createDefaultHttpContext()" xml:id="org.osgi.service.http.HttpService.createDefaultHttpContext--">
         <title>public HttpContext createDefaultHttpContext()</title>
         <para role="description">
Creates a default <code>HttpContext</code> for registering servlets or
 resources with the HttpService, a new <code>HttpContext</code> object is
 created each time this method is called.
 
 </para>
         <para>
 The behavior of the methods on the default <code>HttpContext</code> is defined
 as follows:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>getMimeType</code> - Does not define any customized MIME types for
 the Content-Type header in the response, and always returns <code>null</code>.
 </para>
            </listitem>
            <listitem>
               <para>
                  <code>handleSecurity</code> - Performs implementation-defined
 authentication on the request.</para>
            </listitem>
            <listitem>
               <para>
                  <code>getResource</code> - Assumes the named resource is in the context
 bundle; this method calls the context bundle's <code>Bundle.getResource</code>
 method, and returns the appropriate URL to access the resource. On a Java
 runtime environment that supports permissions, the Http Service needs to
 be granted <code>org.osgi.framework.AdminPermission[*,RESOURCE]</code>.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a default <code>HttpContext</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="registerResources(String,String,HttpContext)" xml:id="org.osgi.service.http.HttpService.registerResources-String-String-HttpContext-">
         <title>public void registerResources(String alias,String name,HttpContext context) throws NamespaceException</title>
         <formalpara role="parameter">
            <title>alias</title>
            <para>name in the URI namespace at which the resources are
        registered</para>
         </formalpara>
         <formalpara role="parameter">
            <title>name</title>
            <para>the base name of the resources that will be registered</para>
         </formalpara>
         <formalpara role="parameter">
            <title>context</title>
            <para>the <code>HttpContext</code> object for the registered
        resources, or <code>null</code> if a default <code>HttpContext</code> is to
        be created and used.</para>
         </formalpara>
         <para role="description">
Registers resources into the URI namespace.
 
 </para>
         <para>
 The alias is the name in the URI namespace of the Http Service at which
 the registration will be mapped. An alias must begin with slash ('/') and
 must not end with slash ('/'), with the exception that an alias of the
 form "/" is used to denote the root alias. The name parameter
 must also not end with slash ('/') with the exception that a name of the
 form "/" is used to denote the root of the bundle. See the
 specification text for details on how HTTP requests are mapped to servlet
 and resource registrations.
 </para>
         <para>
 For example, suppose the resource name /tmp is registered to the alias
 /files. A request for /files/foo.txt will map to the resource name
 /tmp/foo.txt.
 
 </para>
         <programlisting> httpservice.registerResources("/files", "/tmp", context);</programlisting>
         <para>
 
 The Http Service will call the <code>HttpContext</code> argument to map
 resource names to URLs and MIME types and to handle security for
 requests. If the <code>HttpContext</code> argument is <code>null</code>, a default
 <code>HttpContext</code> is used (see <link linkend="org.osgi.service.http.HttpService.createDefaultHttpContext--">createDefaultHttpContext()</link>).
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NamespaceException</code>– if the registration fails because the alias is
         already in use.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if any of the parameters are
         invalid   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="registerServlet(String,javax.servlet.Servlet,Dictionary,HttpContext)" xml:id="org.osgi.service.http.HttpService.registerServlet-String-javax.servlet.Servlet-Dictionary-HttpContext-">
         <title>public void registerServlet(String alias,Servlet servlet,Dictionary initparams,HttpContext context) throws ServletException, NamespaceException</title>
         <formalpara role="parameter">
            <title>alias</title>
            <para>name in the URI namespace at which the servlet is registered</para>
         </formalpara>
         <formalpara role="parameter">
            <title>servlet</title>
            <para>the servlet object to register</para>
         </formalpara>
         <formalpara role="parameter">
            <title>initparams</title>
            <para>initialization arguments for the servlet or
        <code>null</code> if there are none. This argument is used by the
        servlet's <code>ServletConfig</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>context</title>
            <para>the <code>HttpContext</code> object for the registered servlet,
        or <code>null</code> if a default <code>HttpContext</code> is to be created
        and used.</para>
         </formalpara>
         <para role="description">
Registers a servlet into the URI namespace.
 
 </para>
         <para>
 The alias is the name in the URI namespace of the Http Service at which
 the registration will be mapped.
 
 </para>
         <para>
 An alias must begin with slash ('/') and must not end with slash ('/'),
 with the exception that an alias of the form "/" is used to
 denote the root alias. See the specification text for details on how HTTP
 requests are mapped to servlet and resource registrations.
 
 </para>
         <para>
 The Http Service will call the servlet's <code>init</code> method before
 returning.
 
 </para>
         <programlisting> httpService.registerServlet("/myservlet", servlet, initparams, context);</programlisting>
         <para>
 Servlets registered with the same <code>HttpContext</code> object will share
 the same <code>ServletContext</code>. The Http Service will call the
 <code>context</code> argument to support the <code>ServletContext</code> methods
 <code>getResource</code>,<code>getResourceAsStream</code> and <code>getMimeType</code>,
 and to handle security for requests. If the <code>context</code> argument is
 <code>null</code>, a default <code>HttpContext</code> object is used (see
 <link linkend="org.osgi.service.http.HttpService.createDefaultHttpContext--">createDefaultHttpContext()</link>).</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NamespaceException</code>– if the registration fails because the alias is
         already in use.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>javax.servlet.ServletException</code>– if the servlet's <code>init</code>
         method throws an exception, or the given servlet object has
         already been registered at a different alias.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if any of the arguments are
         invalid   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="unregister(String)" xml:id="org.osgi.service.http.HttpService.unregister-String-">
         <title>public void unregister(String alias)</title>
         <formalpara role="parameter">
            <title>alias</title>
            <para>name in the URI name-space of the registration to unregister</para>
         </formalpara>
         <para role="description">
Unregisters a previous registration done by <code>registerServlet</code> or
 <code>registerResources</code> methods.
 
 </para>
         <para>
 After this call, the registered alias in the URI name-space will no
 longer be available. If the registration was for a servlet, the Http
 Service must call the <code>destroy</code> method of the servlet before
 returning.
 </para>
         <para>
 If the bundle which performed the registration is stopped or otherwise
 "unget"s the Http Service without calling <link linkend="org.osgi.service.http.HttpService.unregister-String-">unregister(String)</link>
 then Http Service must automatically unregister the registration.
 However, if the registration was for a servlet, the <code>destroy</code>
 method of the servlet will not be called in this case since the bundle
 may be stopped. <link linkend="org.osgi.service.http.HttpService.unregister-String-">unregister(String)</link> must be explicitly called to
 cause the <code>destroy</code> method of the servlet to be called. This can be
 done in the <code>BundleActivator.stop</code> method of the bundle registering
 the servlet.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if there is no registration
         for the alias or the calling bundle was not the bundle which
         registered the alias.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="NamespaceException" xml:id="org.osgi.service.http.NamespaceException">
      <title>public class NamespaceException<?line-break?> extends Exception</title>
      <para>
A NamespaceException is thrown to indicate an error with the caller's request
 to register a servlet or resources into the URI namespace of the Http
 Service. This exception indicates that the requested alias already is in use.
   </para>
      <section role="method" xreflabel="NamespaceException(String)" xml:id="org.osgi.service.http.NamespaceException.NamespaceException-String-">
         <title>public  NamespaceException(String message)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>the detail message</para>
         </formalpara>
         <para role="description">
Construct a <code>NamespaceException</code> object with a detail message.
   </para>
      </section>
      <section role="method" xreflabel="NamespaceException(String,Throwable)" xml:id="org.osgi.service.http.NamespaceException.NamespaceException-String-Throwable-">
         <title>public  NamespaceException(String message,Throwable cause)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The detail message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The nested exception.</para>
         </formalpara>
         <para role="description">
Construct a <code>NamespaceException</code> object with a detail message and a
 nested exception.
   </para>
      </section>
      <section role="method" xreflabel="getCause()" xml:id="org.osgi.service.http.NamespaceException.getCause--">
         <title>public Throwable getCause()</title>
         <para role="description">
Returns the cause of this exception or <code>null</code> if no cause was set.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The cause of this exception or <code>null</code> if no cause was set.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getException()" xml:id="org.osgi.service.http.NamespaceException.getException--">
         <title>public Throwable getException()</title>
         <para role="description">
Returns the nested exception.
 
 </para>
         <para>
 This method predates the general purpose exception chaining mechanism.
 The <code>getCause()</code> method is now the preferred means of obtaining
 this information.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The result of calling <code>getCause()</code>.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="initCause(Throwable)" xml:id="org.osgi.service.http.NamespaceException.initCause-Throwable-">
         <title>public Throwable initCause(Throwable cause)</title>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception.</para>
         </formalpara>
         <para role="description">
Initializes the cause of this exception to the specified value.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>This exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified cause is this
         exception.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the cause of this exception has already
         been set.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i1231452"><title>HTTP 1.0 Specification
      RFC-1945</title>http://www.ietf.org/rfc/rfc1945.txt, May
      1996</bibliomixed>

      <bibliomixed xml:id="i1215926"><title>HTTP 1.1 Specification
      RFC-2616</title>http://www.ietf.org/rfc/rfc2616.txt, June
      1999</bibliomixed>

      <bibliomixed xml:id="i1217577"><title>Java Servlet
      Technology</title>http://www.oracle.com/technetwork/java/javaee/servlet/index.html</bibliomixed>

      <bibliomixed xml:id="i1219807"><title>MIME Multipurpose Internet Mail
      Extension</title>http://www.mhonarc.org/~ehood/MIME/MIME.html</bibliomixed>

      <bibliomixed xml:id="i1220020"><title>Assigned MIME Media
      Types</title>http://www.iana.org/assignments/media-types</bibliomixed>

      <bibliomixed xml:id="i1220024"><title>Registration Procedures for new
      MIME media
      types</title>http://www.ietf.org/rfc/rfc2048.txt</bibliomixed>

      <bibliomixed xml:id="i1220308"><title>RFC 2617: HTTP Authentication:
      Basic and Digest Access
      Authentication</title>http://www.ietf.org/rfc/rfc2617.txt</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="104" revision="$Id: 5d9342abbb7bcdfccda5d7b35d027ce8ab2169b9 $" version="5" xml:id="service.cm" xml:base="../104/service.cm.xml">
  <title>Configuration Admin Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.cm-version" linkend="org.osgi.service.cm"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The Configuration Admin service is an important aspect of the
    deployment of an OSGi framework. It allows an Operator to configure
    deployed bundles. Configuring is the process of defining the configuration
    data for bundles and assuring that those bundles receive that data when
    they are active in the OSGi framework.</para>

    <figure>
      <title>Configuration Admin Service Overview</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.049in" contentwidth="4.917in" fileref="cm-classes.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <section>
      <title>Essentials</title>

      <para>The following requirements and patterns are associated with the
      Configuration Admin service specification:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Local Configuration</emphasis> - The Configuration
          Admin service must support bundles that have their own user
          interface to change their configurations.</para>
        </listitem>

        <listitem>
          <para><emphasis>Reflection</emphasis> - The Configuration Admin
          service must be able to deduce the names and types of the needed
          configuration data.</para>
        </listitem>

        <listitem>
          <para><emphasis>Legacy</emphasis> - The Configuration Admin service
          must support configuration data of existing entities (such as
          devices).</para>
        </listitem>

        <listitem>
          <para><emphasis>Object Oriented</emphasis> - The Configuration Admin
          service must support the creation and deletion of instances of
          configuration information so that a bundle can create the
          appropriate number of services under the control of the
          Configuration Admin service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Embedded Devices</emphasis> - The Configuration
          Admin service must be deployable on a wide range of platforms. This
          requirement means that the interface should not assume file storage
          on the platform. The choice to use file storage should be left to
          the implementation of the Configuration Admin service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Remote versus Local Management</emphasis> - The
          Configuration Admin service must allow for a remotely managed OSGi
          framework, and must not assume that con-figuration information is
          stored locally. Nor should it assume that the Configuration Admin
          service is always done remotely. Both implementation approaches
          should be viable.</para>
        </listitem>

        <listitem>
          <para><emphasis>Availability</emphasis> - The OSGi environment is a
          dynamic environment that must run continuously (24/7/365).
          Configuration updates must happen dynamically and should not require
          restarting of the system or bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Immediate Response</emphasis> - Changes in
          configuration should be reflected immediately.</para>
        </listitem>

        <listitem>
          <para><emphasis>Execution Environment</emphasis> - The Configuration
          Admin service will not require more than an environment that
          fulfills the minimal execution requirements.</para>
        </listitem>

        <listitem>
          <para><emphasis>Communications</emphasis> - The Configuration Admin
          service should not assume "always-on" connectivity, so the API is
          also applicable for mobile applications in cars, phones, or
          boats.</para>
        </listitem>

        <listitem>
          <para><emphasis>Extendability</emphasis> - The Configuration Admin
          service should expose the process of configuration to other bundles.
          This exposure should at a minimum encompass initiating an update,
          removing certain configuration properties, adding properties, and
          modifying the value of properties potentially based on existing
          property or service values.</para>
        </listitem>

        <listitem>
          <para><emphasis>Complexity Trade-offs</emphasis> - Bundles in need
          of configuration data should have a simple way of obtaining it. Most
          bundles have this need and the code to accept this data.
          Additionally, updates should be simple from the perspective of the
          receiver.</para>

          <para>Trade-offs in simplicity should be made at the expense of the
          bundle implementing the Configuration Admin service and in favor of
          bundles that need configuration information. The reason for this
          choice is that normal bundles will outnumber Configuration Admin
          bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Regions</emphasis> - It should be possible to create
          groups of bundles and a manager in a single system that share
          configuration data that is not accessible outside the region.</para>
        </listitem>

        <listitem>
          <para><emphasis>Shared Information</emphasis> - It should be
          possible to share configuration data between bundles.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Configuration information</emphasis> - The
          information needed by a bundle before it can provide its intended
          functionality.</para>
        </listitem>

        <listitem>
          <para><emphasis>Configuration dictionary</emphasis> - The
          configuration information when it is passed to the target service.
          It consists of a <code>Dictionary</code> object with a number of
          properties and identifiers.</para>
        </listitem>

        <listitem>
          <para><emphasis>Configuring Bundle</emphasis> - A bundle that
          modifies the configuration information through the Configuration
          Admin service. This bundle is either a management bundle or the
          bundle for which the configuration information is intended.</para>
        </listitem>

        <listitem>
          <para><emphasis>Configuration Target</emphasis> - The target service
          that will receive the configuration information. For services, there
          are two types of targets: <code>ManagedServiceFactory</code> or
          <code>ManagedService</code> objects.</para>
        </listitem>

        <listitem>
          <para><emphasis>Configuration Admin Service</emphasis> - This
          service is responsible for supplying configuration target bundles
          with their configuration information. It maintains a database with
          configuration information, keyed on the <code>service.pid</code> of
          configuration target services. These services receive their
          configuration dictionary/dictionaries when they are registered with
          the Framework. Configurations can be modified or extended using
          Configuration Plugin services before they reach the target
          bundle.</para>
        </listitem>

        <listitem>
          <para><emphasis>Managed Service</emphasis> - A Managed Service
          represents a client of the Configuration Admin service, and is thus
          a configuration target. Bundles should register a Managed Service to
          receive the configuration data from the Configuration Admin service.
          A Managed Service adds one or more unique <code>service.pid</code>
          service properties as a primary key for the configuration
          information.</para>
        </listitem>

        <listitem>
          <para><emphasis>Managed Service Factory</emphasis> - A Managed
          Service Factory can receive a number of configuration dictionaries
          from the Configuration Admin service, and is thus also a
          configuration target service. It should register with one or more
          <code>service.pid</code> strings and receives zero or more
          configuration dictionaries. Each dictionary has its own PID that is
          distinct from the factory PID.</para>
        </listitem>

        <listitem>
          <para><emphasis>Configuration Object</emphasis> - Implements the
          <code>Configuration</code> interface and contains the configuration
          dictionary for a Managed Service or one of the configuration
          dictionaries for a Managed Service Factory. These objects are
          manipulated by configuring bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Configuration Plugin Services</emphasis> -
          Configuration Plugin services are called before the configuration
          dictionary is given to the configuration targets. The plug-in can
          modify the configuration dictionary, which is passed to the
          Configuration Target.</para>
        </listitem>
      </itemizedlist>

      <figure xml:id="i1817860">
        <title>Overall Service Diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.962in" contentwidth="6.230in" fileref="overall.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Synopsis</title>

      <para>This specification is based on the concept of a Configuration
      Admin service that manages the configuration of an OSGi framework. It
      maintains a database of <code>Configuration</code> objects, locally or
      remotely. This service monitors the service registry and provides
      configuration information to services that are registered with a
      <code>service.pid</code> property, the Persistent IDentity (PID), and
      implement one of the following interfaces:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Managed Service</emphasis> - A service registered
          with this interface receives its <emphasis>configuration
          dictionary</emphasis> from the database or receives
          <code>null</code> when no such configuration exists.</para>
        </listitem>

        <listitem>
          <para><emphasis>Managed Service Factory</emphasis> - Services
          registered with this interface can receive several configuration
          dictionaries when registered. The database contains zero or more
          configuration dictionaries for this service. Each configuration
          dictionary is given sequentially to the service.</para>
        </listitem>
      </itemizedlist>

      <para>The database can be manipulated either by the Management Agent or
      bundles that configure themselves. Other parties can provide
      Configuration Plugin services. Such services participate in the
      configuration process. They can inspect the configuration dictionary and
      modify it before it reaches the target service.</para>
    </section>
  </section>

  <section xml:id="i1358725">
    <title>Configuration Targets</title>

    <para>One of the more complicated aspects of this specification is the
    subtle distinction between the <code>ManagedService</code> and
    <code>ManagedServiceFactory</code> classes. Both receive configuration
    information from the Configuration Admin service and are treated similarly
    in most respects. Therefore, this specification refers to
    <emphasis>configuration targets</emphasis> or simply
    <emphasis>targets</emphasis> when the distinction is irrelevant.</para>

    <para>The difference between these types is related to the cardinality of
    the configuration dictionary. A Managed Service is used when an existing
    entity needs a configuration dictionary. Thus, a one-to-one relationship
    always exists between the configuration dictionary and the configurable
    entity in the Managed Service. There can be multiple Managed Service
    targets registered with the same PID but a Managed Service can only
    configure a single entity in each given Managed Service.</para>

    <para>A Managed Service Factory is used when part of the configuration is
    to define <emphasis>how many instances are required</emphasis> for a given
    Managed Service Factory. A management bundle can create, modify, and
    delete any number of instances for a Managed Service Factory through the
    Configuration Admin service. Each instance is configured by a single
    <code>Configuration</code> object. Therefore, a Managed Service Factory
    can have multiple associated <code>Configuration</code> objects.</para>

    <figure>
      <title>Differentiation of ManagedService and ManagedServiceFactory
      Classes</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.205in" contentwidth="4.917in" fileref="ms-v-msf.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>A Configuration target updates the target when the underlying
    Configuration object is created, updated, or deleted. However, it is not
    called back when the Configuration Admin service is shutdown or the
    service is ungotten.</para>

    <para>To summarize:</para>

    <itemizedlist>
      <listitem>
        <para>A <emphasis>Managed Service</emphasis> must receive a single
        configuration dictionary when it is registered or when its
        configuration is modified.</para>
      </listitem>

      <listitem>
        <para>A <emphasis>Managed Service Factory</emphasis> must receive from
        zero to <emphasis>n</emphasis> configuration dictionaries when it
        registers, depending on the current configuration. The Managed Service
        Factory is informed of configuration dictionary changes:
        modifications, creations, and deletions.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="i1233800">
    <title>The Persistent Identity</title>

    <para>A crucial concept in the Configuration Admin service specification
    is the Persistent IDentity (PID) as defined in the Framework's service
    layer. Its purpose is to act as a primary key for objects that need a
    configuration dictionary. The name of the service property for PID is
    defined in the Framework in
    <code>org.osgi.framework.Constants.SERVICE_PID</code>.</para>

    <para>The Configuration Admin service requires the use of one or more PIDs
    with Managed Service and Managed Service Factory registrations because it
    associates its configuration data with PIDs.</para>

    <para>A service can register with multiple PIDs and PIDs can be shared
    between multiple targets (both Managed Service and Managed Service Factory
    targets) to receive the same information. If PIDs are to be shared between
    Bundles then the location of the Configuration must be a multi-location,
    see <xref linkend="service.cm-location.binding"/>.</para>

    <para>The Configuration Admin must track the configuration targets on
    their actual PID. That is, if the <code>service.pid</code> service
    property is modified then the Configuration Admin must treat it as if the
    service was unregistered and then re-registered with the new PID.</para>

    <section>
      <title>PID Syntax</title>

      <para>PIDs are intended for use by other bundles, not by people, but
      sometimes the user is confronted with a PID. For example, when
      installing an alarm system, the user needs to identify the different
      components to a wiring application. This type of application exposes the
      PID to end users.</para>

      <para>PIDs should follow the symbolic-name syntax, which uses a very
      restricted character set. The following sections define some schemes for
      common cases. These schemes are not required, but bundle developers are
      urged to use them to achieve consistency.</para>

      <section>
        <title>Local Bundle PIDs</title>

        <para>As a convention, descriptions starting with the bundle identity
        and a full stop (<code>'.' \u002E</code>) are reserved for a bundle.
        As an example, a PID of <code>"65.536"</code> would belong to the
        bundle with a bundle identity of 65.</para>
      </section>

      <section>
        <title>Software PIDs</title>

        <para>Configuration target services that are singletons can use a Java
        package name they own as the PID (the reverse domain name scheme) as
        long as they do not use characters outside the basic ASCII set. As an
        example, the PID named <code>com.acme.watchdog</code> would represent
        a Watchdog service from the ACME company.</para>
      </section>

      <section>
        <title>Devices</title>

        <para>Devices are usually organized on buses or networks. The identity
        of a device, such as a unique serial number or an address, is a good
        component of a PID. The format of the serial number should be the same
        as that printed on the housing or box, to aid in recognition.</para>

        <table pgwide="1">
          <title>Schemes for Device-Oriented PID Names</title>

          <tgroup cols="4">
            <colspec colnum="1" colwidth="1*"/>

            <colspec colnum="2" colwidth="3*"/>

            <colspec colnum="3" colwidth="4*"/>

            <colspec colnum="4" colwidth="4*"/>

            <thead>
              <row>
                <entry>Bus</entry>

                <entry>Example</entry>

                <entry>Format</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><code>USB</code></entry>

                <entry><code>USB.0123-0002-9909873</code></entry>

                <entry><para>idVendor (hex 4)</para> <para>idProduct (hex
                4)</para> <para>iSerialNumber (decimal)</para></entry>

                <entry><para>Universal Serial Bus. Use the standard device
                descriptor.</para></entry>
              </row>

              <row>
                <entry><code>IP</code></entry>

                <entry><code>IP.172.16.28.21</code></entry>

                <entry><para>IP nr (dotted decimal)</para></entry>

                <entry><para>Internet Protocol</para></entry>
              </row>

              <row>
                <entry><code>802</code></entry>

                <entry><code>802-00:60:97:00:9A:56</code></entry>

                <entry><para>MAC address with : separators</para></entry>

                <entry><para>IEEE 802 MAC address (Token Ring,
                Ethernet,...)</para></entry>
              </row>

              <row>
                <entry><code>ONE</code></entry>

                <entry><code>ONE.06-00000021E461</code></entry>

                <entry><para>Family (hex 2) and serial number including CRC
                (hex 6)</para></entry>

                <entry><para>1-wire bus of Dallas Semiconductor</para></entry>
              </row>

              <row>
                <entry><code>COM</code></entry>

                <entry><code>COM.krups-brewer-12323</code></entry>

                <entry><para>serial number or type name of
                device</para></entry>

                <entry><para>Serial ports</para></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
    </section>

    <section xml:id="service.cm-targeted.pids">
      <title>Targeted PIDs</title>

      <para>PIDs are defined as primary keys for the configuration object; any
      target that uses the PID in its service registration (and has the proper
      permissions if security is on) will receive the configuration associated
      with it, regardless of the bundle that registered the target service.
      Though in general the PID is designed to ignore the bundle, there are a
      number of cases where the bundle becomes relevant. The most typical case
      is where a bundle is available in different versions. Each version will
      request the same PID and will get therefore configured
      identically.</para>

      <para><emphasis>Targeted PIDs</emphasis> are specially formatted PIDs
      that are interpreted by the Configuration Admin service. Targeted PIDs
      work both as a normal Managed Service PID and as a Managed Service
      Factory PID. In the case of factories, the targeted PID is the Factory
      PID since the other PID is chosen by CM for each instance.</para>

      <para>The target PID scopes the applicability of the PID to a limited
      set of target bundles. The syntax of a target pid is:</para>

      <programlisting>target-pid  ::=  PID 
    ( '|' symbolic-name ( '|' version ( '|' location )? )? )?</programlisting>

      <para>Targets never register with a target PID, target PIDs should only
      be used when creating, getting, or deleting a Configuration through the
      Configuration Admin service. The target PID is still the primary key of
      the Configuration and is thus in itself a PID. The distinction is only
      made when the Configuration Admin must update a target service. Instead
      of using the non-target PID as the primary key it must first search if
      there exists a target PID in the Configuration store that matches the
      requested target PID.</para>

      <para>When a target registers and needs to be updated the Configuration
      Admin must first find the Configuration with the <emphasis>best
      matching</emphasis> PID. It must logically take the requested PID,
      append it with the bundle symbolic name, the bundle version, and the
      bundle location. The version must be formatted canonically, that is,
      according to the <code>toString()</code> method of the
      <code>Version</code> class. The rules for best matching are then as
      follows:</para>

      <para>Look for a Configuration, in the given order, with a key
      of:</para>

      <programlisting>    &lt;pid&gt;|&lt;bsn&gt;|&lt;version&gt;|&lt;location&gt;
    &lt;pid&gt;|&lt;bsn&gt;|&lt;version&gt;
    &lt;pid&gt;|&lt;bsn&gt;
    &lt;pid&gt;</programlisting>

      <para>For example:</para>

      <programlisting>    com.example.web.WebConf|com.acme.example|3.2.0|http://www.xyz.com/acme.jar
    com.example.web.WebConf|com.acme.example|3.2.0
    com.example.web.WebConf|com.acme.example
    com.example.web.WebConf</programlisting>

      <para>If a registered target service has a PID that contains a vertical
      line (<code>'|' \u007c</code>) | then the value must be taken as is and
      must not be interpreted as a targeted PID.</para>

      <para>The <code>service.pid</code> configuration property for a targeted
      PID configuration must always be set to the targeted PID. That is, if
      the PID is <code>com.example.web.WebConf</code> and the targeted PID
      <code>com.example.web.WebConf|com.acme.example|3.2.0</code> then the
      property in the Configuration dictionary must be the targeted
      PID.</para>

      <para>If a Configuration with a targeted PID is deleted or a
      Configuration with a new targeted PID is added then all targets that
      would be stale must be reevaluated against the new situation and updated
      accordingly if they are no longer bound against the best matching target
      PID.</para>
    </section>

    <section xml:id="service.cm-extenders.targeted.pids">
      <title>Extenders and Targeted PIDs</title>

      <para>Extenders like Declarative Services use Configurations but bypass
      the general Managed Service or Managed Service Factory method. It is the
      responsibility of these extenders to access the Configurations using the
      targeted PIDs.</para>

      <para>Since getting a Configuration tends to create that Configuration
      it is necessary for these extenders to use the <xref linkend="org.osgi.service.cm.ConfigurationAdmin.listConfigurations-String-" xrefstyle="hyperlink"/> method to find out if a more targeted
      Configuration exists. There are many ways the extender can find the most
      targeted PID. For example, the following code gets the most targeted PID
      for a given bundle.</para>

      <programlisting>String mostTargeted(String key, String pid, Bundle bundle) throws Exception {
    String bsn = bundle.getSymbolicName();
    Version version = bundle.getVersion();
    String location = bundle.getLocation();
    String f = String.format("(|(%1$s=%2$s)(%1$s=%2$s|%3$s)" +
        "(%1$s=%2$s|%3$s|%4$s)(%1$s=%2$s|%3$s|%4$s|%5$s))",
        key, pid, bsn, version, location );

    Configuration[] configurations = cm.listConfigurations(f);
    if (configurations == null)
        return null;

    String largest = null;
    for (Configuration c : configurations) {
        String s = (String) c.getProperties().get(key);
        if ((largest == null) || (largest.length() &lt; s.length()))
            largest = s;
    }
    return largest;
}</programlisting>
    </section>
  </section>

  <section>
    <title>The Configuration Object</title>

    <para>A <code>Configuration</code> object contains the configuration
    dictionary, which is a set of properties that configure an aspect of a
    bundle. A bundle can receive <code>Configuration</code> objects by
    registering a configuration target service with a PID service property.
    See <xref linkend="i1233800"/> for more information about PIDs.</para>

    <para>During registration, the Configuration Admin service must detect
    these configuration target services and hand over their configuration
    dictionary via a callback. If this configuration dictionary is
    subsequently modified, the modified dictionary is handed over to the
    configuration target with the same callback.</para>

    <para>The <code>Configuration</code> object is primarily a set of
    properties that can be updated by a Management Agent, user interfaces on
    the OSGi framework, or other applications. Configuration changes are first
    made persistent, and then passed to the target service via a call to the
    <code>updated</code> method in the <code>ManagedServiceFactory</code> or
    <code>ManagedService</code> class.</para>

    <para>A Configuration object must be uniquely bound to a Managed Service
    or Managed Service Factory. This implies that a bundle must not register a
    Managed Service Factory with a PID that is the same as the PID given to a
    Managed Service.</para>

    <section xml:id="service.cm-location.binding">
      <title>Location Binding</title>

      <para>When a <xref linkend="org.osgi.service.cm.Configuration" xrefstyle="hyperlink"/> object is created with either <xref linkend="org.osgi.service.cm.ConfigurationAdmin.getConfiguration-String-" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.cm.ConfigurationAdmin.createFactoryConfiguration-String-" xrefstyle="hyperlink"/>, it becomes <emphasis>bound</emphasis> to the
      location of the calling bundle. This location is obtained with the <xref linkend="org.osgi.service.cm.Configuration.getBundleLocation--" xrefstyle="hyperlink"/> method.</para>

      <para>Location binding is a security feature that assures that only
      management bundles can modify configuration data, and other bundles can
      only modify their own configuration data. A Security Exception is thrown
      if a bundle does not have <code>ConfigurationPermission[location,
      CONFIGURE]</code>.</para>

      <para>The two argument versions of <xref linkend="org.osgi.service.cm.ConfigurationAdmin.getConfiguration-String-String-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.cm.ConfigurationAdmin.createFactoryConfiguration-String-String-" xrefstyle="hyperlink"/> take a location <code>String</code> as their
      second argument. These methods require the correct permission, and they
      create <xref linkend="org.osgi.service.cm.Configuration" xrefstyle="hyperlink"/> objects bound to the specified location.</para>

      <para>Locations can be specified for a specific Bundle or use
      <emphasis>multi-locations</emphasis>. For a specific location the
      Configuration location must exactly match the location of the target's
      Bundle. A multi-location is any location that has the following
      syntax:</para>

      <programlisting>multi-location ::= '?' symbolic-name?</programlisting>

      <para>For example</para>

      <programlisting>?com.acme</programlisting>

      <para>The path after the question mark is the <emphasis>multi-location
      name</emphasis>, the multi-location name can be empty if only a question
      mark is specified. Configurations with a multi-location are dispatched
      to any target that has <emphasis>visibility</emphasis> to the
      Configuration. The visibility for a given Configuration <code>c</code>
      depends on the following rules:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Single-Location</emphasis> - If
          <code>c.location</code> is not a multi-location then a Bundle only
          has visibility if the Bundle's location exactly matches
          <code>c.location</code>. In this case there is never a security
          check.</para>
        </listitem>

        <listitem>
          <para><emphasis>Multi-Location</emphasis> - If
          <code>c.location</code> is a multi-location (that is, starts with a
          question mark):</para>

          <itemizedlist>
            <listitem>
              <para><emphasis>Security Off</emphasis> - The Bundle always has
              visibility</para>
            </listitem>

            <listitem>
              <para><emphasis>Security On</emphasis> - The target's Bundle
              must have <code>ConfigurationPermission[ c.location,</code>
              <xref linkend="org.osgi.service.cm.ConfigurationPermission.TARGET" xrefstyle="hyperlink"/> <code> ]</code> as defined by the
              Bundle's <code>hasPermission</code> method. The resource name of
              the permission must include the question mark.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <para>The permission matches on the whole name, including any leading
      <code>?</code>. The <xref linkend="org.osgi.service.cm.ConfigurationPermission.TARGET" xrefstyle="hyperlink"/> action is only applicable in the multi-location
      scenario since the security is not checked for a single-location. There
      is therefore no point in granting a Bundle a permission with <xref linkend="org.osgi.service.cm.ConfigurationPermission.TARGET" xrefstyle="hyperlink"/> action for anything but a multi-location
      (starting with a <code>?</code>).</para>

      <para>It is therefore possible to register services with the same PID
      from different bundles. If a multi-location is used then each bundle
      will be evaluated for a corresponding configuration update. If the
      bundle has visibility then it is updated, otherwise it is not.</para>

      <para>If multiple targets must be updated then the order of updating is
      the ranking order of their services.</para>

      <para>If a target loses visibility because the Configuration's location
      changes then it must immediately be deleted from the perspective of that
      target. That is, the target must see a deletion (Managed Service
      Factory) or an update with <code>null</code> (Managed Service). If a
      configuration target gains visibility then the target must see a new
      update with the proper configuration dictionary. However, the associated
      events must not be sent as the underlying Configuration is not actually
      deleted nor modified.</para>

      <para>Changes in the permissions must not initiate a recalculation of
      the visibility. If the permissions are changed this will not become
      visible until one of the other events happen that cause a recalculation
      of the visibility.</para>

      <para>If the location is changed then the Configuration Admin must send
      a <xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_LOCATION_CHANGED" xrefstyle="hyperlink"/> event to signal that the location has changed.
      It is up to the Configuration Listeners to update their state
      appropriately.</para>
    </section>

    <section>
      <title>Dynamic Binding</title>

      <para>Dynamic binding is available for backward compatibility with
      earlier versions. It is recommended that management agents explicitly
      set the location to a <code>?</code> (a multi-location) to allow
      multiple bundles to share PIDs and not use the dynamic binding facility.
      If a management agent uses ?, it must at least have
      <code>ConfigurationPermission[ ?,</code> <xref linkend="org.osgi.service.cm.ConfigurationPermission.CONFIGURE" xrefstyle="hyperlink"/> <code> ]</code> when security is on, it is also
      possible to use <code>ConfigurationPermission[ ?*,</code> <xref linkend="org.osgi.service.cm.ConfigurationPermission.CONFIGURE" xrefstyle="hyperlink"/> <code> ]</code> to not limit the management
      agent. See <xref linkend="service.cm-regions"/> for some examples of
      using the locations in isolation scenarios.</para>

      <para>A <code>null</code> location parameter can be used to create
      <code>Configuration</code> objects that are not yet bound. In this case,
      the Configuration becomes bound to a specific location the first time
      that it is compared to a Bundle's location. If a bundle becomes
      dynamically bound to a Configuration then a <xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_LOCATION_CHANGED" xrefstyle="hyperlink"/> event must be dispatched.</para>

      <para>When this <emphasis>dynamically bound</emphasis> Bundle is
      subsequently uninstalled, configurations that are bound to this bundle
      must be released. That means that for such <code>Configuration</code>
      object's the bundle location must be set to <code>null</code> again so
      it can be bound again to another bundle.</para>
    </section>

    <section xml:id="service.cm.configuration.properties">
      <title>Configuration Properties</title>

      <para>A configuration dictionary contains a set of properties in a
      <code>Dictionary</code> object. The value of the property must be the
      same type as the set of Primary Property Types specified in <xref linkend="intro.core.release" xrefstyle="template:%t"/> Filter
      Syntax.</para>

      <para>The name or key of a property must always be a <code>String</code>
      object, and is not case-sensitive during look up, but must preserve the
      original case. The format of a property name should be:</para>

      <programlisting>property-name ::= public | private
public        ::= symbolic-name // See General Syntax in Core Framework
private       ::= '.' symbolic-name</programlisting>

      <para>Properties can be used in other subsystems that have restrictions
      on the character set that can be used. The <code>symbolic-name</code>
      production uses a very minimal character set.</para>

      <para>Bundles must not use nested lists or arrays, nor must they use
      mixed types. Using mixed types or nesting makes it impossible to use the
      meta typing specification. See <xref linkend="service.metatype"/>.</para>

      <para>Property values that are collections may have an ordering that
      must be preserved when persisting the configuration so that later access
      to the property value will see the preserved ordering of the
      collection.</para>
    </section>

    <section xml:id="service.cm.propertypropagation">
      <title>Property Propagation</title>

      <para>A configuration target should copy the public configuration
      properties (properties whose name does not start with a <code>'.'</code>
      or <code>\u002E</code>) of the <code>Dictionary</code> object argument
      in <code>updated(Dictionary)</code> into the service properties on any
      resulting service registration.</para>

      <para>This propagation allows the development of applications that
      leverage the Framework service registry more extensively, so compliance
      with this mechanism is advised.</para>

      <para>A configuration target may ignore any configuration properties it
      does not recognize, or it may change the values of the configuration
      properties before these properties are registered as service properties.
      Configuration properties in the Framework service registry are not
      strictly related to the configuration information.</para>

      <para>Bundles that follow this recommendation to propagate public
      configuration properties can participate in horizontal applications. For
      example, an application that maintains physical location information in
      the Framework service registry could find out where a particular device
      is located in the house or car. This service could use a property
      dedicated to the physical location and provide functions that leverage
      this property, such as a graphic user interface that displays these
      locations.</para>

      <para>Bundles performing service registrations on behalf of other
      bundles (e.g. OSGi Declarative Services) should propagate all public
      configuration properties and not propagate private configuration
      properties.</para>
    </section>

    <section xml:id="i1374751">
      <title>Automatic Properties</title>

      <para>The Configuration Admin service must automatically add a number of
      properties to the configuration dictionary. If these properties are also
      set by a configuring bundle or a plug-in, they must always be overridden
      before they are given to the target service, see <xref linkend="i1459884"/>. Therefore, the receiving bundle or plug-in can
      assume that the following properties are defined by the Configuration
      Admin service and not by the configuring bundle:</para>

      <itemizedlist>
        <listitem>
          <para><code>service.pid</code> - Set to the PID of the associated
          <code>Configuration</code> object. This is the full the targeted PID
          if a targeted PID is used, see <xref linkend="service.cm-targeted.pids"/>.</para>
        </listitem>

        <listitem>
          <para><code>service.factoryPid</code> - Only set for a Managed
          Service Factory. It is then set to the PID of the associated Managed
          Service Factory. This is the full the targeted PID if a targeted PID
          is used.</para>
        </listitem>

        <listitem>
          <para><code>service.bundleLocation</code> - Set to the location of
          the <code>Configuration</code> object. This property can only be
          used for searching, it may not appear in the configuration
          dictionary returned from the <code>getProperties</code> method due
          to security reasons, nor may it be used when the target is
          updated.</para>
        </listitem>
      </itemizedlist>

      <para>Constants for some of these properties can be found in
      <code>org.osgi.framework.Constants</code> and the <xref linkend="org.osgi.service.cm.ConfigurationAdmin" xrefstyle="hyperlink"/>
      interface. These service properties are all of type
      <code>String</code>.</para>
    </section>

    <section xml:id="i1488808">
      <title>Equality</title>

      <para>Two different <code>Configuration</code> objects can actually
      represent the same underlying configuration. This means that a
      <code>Configuration</code> object must implement the <code>equals</code>
      and <code>hashCode</code> methods in such a way that two
      <code>Configuration</code> objects are equal when their PID is
      equal.</para>
    </section>
  </section>

  <section>
    <title>Managed Service</title>

    <para>A Managed Service is used by a bundle that needs one or more
    configuration dictionaries. It therefore registers the Managed Service
    with one or more PIDs and is thus associated with one
    <code>Configuration</code> object in the Configuration Admin service for
    each registered PID. A bundle can register any number of
    <code>ManagedService</code> objects, but each must be identified with its
    own PID or PIDs.</para>

    <para>A bundle should use a Managed Service when it needs configuration
    information for the following:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>A Singleton</emphasis> - A single entity in the bundle
        that needs to be configured.</para>
      </listitem>

      <listitem>
        <para><emphasis>Externally Detected Devices</emphasis> - Each device
        that is detected causes a registration of an associated
        <code>ManagedService</code> object. The PID of this object is related
        to the identity of the device, such as the address or serial
        number.</para>
      </listitem>
    </itemizedlist>

    <para>A Managed Service may be registered with more than one PID and
    therefore be associated with multiple Configuration objects, one for each
    PID. Using multiple PIDs for a Managed Service is not recommended. For
    example, when a configuration is deleted for a Managed Service there is no
    way to identify which PID is associated with the deleted
    configuration.</para>

    <section>
      <title>Singletons</title>

      <para>When an object must be instantiated only once, it is called a
      <emphasis>singleton</emphasis>. A singleton requires a single
      configuration dictionary. Bundles may implement several different types
      of singletons if necessary.</para>

      <para>For example, a Watchdog service could watch the registry for the
      status and presence of services in the Framework service registry. Only
      one instance of a Watchdog service is needed, so only a single
      configuration dictionary is required that contains the polling time and
      the list of services to watch.</para>
    </section>

    <section>
      <title>Networks</title>

      <para>When a device in the external world needs to be represented in the
      OSGi Environment, it must be detected in some manner. The Configuration
      Admin service cannot know the identity and the number of instances of
      the device without assistance. When a device is detected, it still needs
      configuration information in order to play a useful role.</para>

      <para>For example, a 1-Wire network can automatically detect devices
      that are attached and removed. When it detects a temperature sensor, it
      could register a Sensor service with the Framework service registry.
      This Sensor service needs configuration information specifically for
      that sensor, such as which lamps should be turned on, at what
      temperature the sensor is triggered, what timer should be started, in
      what zone it resides, and so on. One bundle could potentially have
      hundreds of these sensors and actuators, and each needs its own
      configuration information.</para>

      <para>Each of these Sensor services should be registered as a Managed
      Service with a PID related to the physical sensor (such as the address)
      to receive configuration information.</para>

      <para>Other examples are services discovered on networks with protocols
      like Jini, UPnP, and Salutation. They can usually be represented in the
      Framework service registry. A network printer, for example, could be
      detected via UPnP. Once in the service registry, these services usually
      require local configuration information. A Printer service needs to be
      configured for its local role: location, access list, and so on.</para>

      <para>This information needs to be available in the Framework service
      registry whenever that particular Printer service is registered.
      Therefore, the Configuration Admin service must remember the
      configuration information for this Printer service.</para>

      <para>This type of service should register with the Framework as a
      Managed Service in order to receive appropriate configuration
      information.</para>
    </section>

    <section xml:id="i1233865">
      <title>Configuring Managed Services</title>

      <para>A bundle that needs configuration information should register one
      or more <code>ManagedService</code> objects with a PID service property.
      If it has a default set of properties for its configuration, it may
      include them as service properties of the Managed Service. These
      properties may be used as a configuration template when a
      <code>Configuration</code> object is created for the first time. A
      Managed Service optionally implements the <code>MetaTypeProvider</code>
      interface to provide information about the property types. See <xref linkend="i1288153"/>.</para>

      <para>When this registration is detected by the Configuration Admin
      service, the following steps must occur:</para>

      <itemizedlist>
        <listitem>
          <para>The configuration stored for the registered PID must be
          retrieved. If there is a <code>Configuration</code> object for this
          PID and the configuration is visible for the associated bundle then
          it is sent to the Managed Service with <xref linkend="org.osgi.service.cm.ManagedService.updated-Dictionary-" xrefstyle="hyperlink"/>.</para>
        </listitem>

        <listitem>
          <para>If a Managed Service is registered and no configuration
          information is available or the configuration is not visible then
          the Configuration Admin service must call
          <code>updated(Dictionary)</code> with a <code>null</code>
          parameter.</para>
        </listitem>

        <listitem>
          <para>If the Configuration Admin service starts
          <emphasis>after</emphasis> a Managed Service is registered, it must
          call <xref linkend="org.osgi.service.cm.ManagedService.updated-Dictionary-" xrefstyle="hyperlink"/> on this service as soon as possible
          according to the prior rules. For this reason, a Managed Service
          must always get a callback when it registers
          <emphasis>and</emphasis> the Configuration Admin service is
          started.</para>
        </listitem>
      </itemizedlist>

      <para>Multiple Managed Services can register with the same PID, they are
      all updated as long as they have visibility to the configuration as
      defined by the location, see <xref linkend="service.cm-location.binding"/>.</para>

      <para>If the Managed Service is registered with more than one PID and
      more than one PID has no configuration information available, then
      <code>updated(Dictionary)</code> will be called multiple times with a
      <code>null</code> parameter.</para>

      <para>The <xref linkend="org.osgi.service.cm.ManagedService.updated-Dictionary-" xrefstyle="hyperlink"/> callback from the Configuration Admin service to
      the Managed Service must take place asynchronously. This requirement
      allows the Managed Service to finish its initialization in a
      synchronized method without interference from the Configuration Admin
      service callback. Care should be taken not to cause deadlocks by calling
      the Framework within a synchronized method.</para>

      <figure pgwide="1">
        <title>Managed Service Configuration Action Diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.028in" contentwidth="4.917in" fileref="ms-config-action.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The <code>updated</code> method may throw a <xref linkend="org.osgi.service.cm.ConfigurationException" xrefstyle="hyperlink"/>. This object must describe the problem and what
      property caused the exception.</para>
    </section>

    <section>
      <title>Race Conditions</title>

      <para>When a Managed Service is registered, the default properties may
      be visible in the service registry for a short period before they are
      replaced by the properties of the actual configuration dictionary. Care
      should be taken that this visibility does not cause race conditions for
      other bundles.</para>

      <para>In cases where race conditions could be harmful, the Managed
      Service must be split into two pieces: an object performing the actual
      service and a Managed Service. First, the Managed Service is registered,
      the configuration is received, and the actual service object is
      registered. In such cases, the use of a Managed Service Factory that
      performs this function should be considered.</para>
    </section>

    <section>
      <title>Examples of Managed Service</title>

      <para><xref linkend="i1379376"/> shows a Managed Service configuration
      example. Two services are registered under the
      <code>ManagedService</code> interface, each with a different PID.</para>

      <figure xml:id="i1379376">
        <title>PIDs and External Associations</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.111in" contentwidth="4.917in" fileref="pids-external-associations.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The Configuration Admin service has a database containing a
      configuration record for each PID. When the Managed Service with
      <code>service.pid = com.acme</code> is registered, the Configuration
      Admin service will retrieve the properties <code>name=Elmer</code> and
      <code>size=42</code> from its database. The properties are stored in a
      <code>Dictionary</code> object and then given to the Managed Service
      with the <code>updated(Dictionary)</code> method.</para>

      <section>
        <title>Configuring A Console Bundle</title>

        <para>In this example, a bundle can run a single debugging console
        over a Telnet connection. It is a singleton, so it uses a
        <code>ManagedService</code> object to get its configuration
        information: the port and the network name on which it should
        register.</para>

        <programlisting>class SampleManagedService implements ManagedService{
    Dictionary          properties;
    ServiceRegistration registration;
    Console             console;

    public void start( 
        BundleContext context ) throws Exception {
        properties = new Hashtable();
        properties.put( Constants.SERVICE_PID,
            "com.acme.console" );

        registration = context.registerService(
            ManagedService.class.getName(), 
            this,
            properties
        );
    }

    public synchronized void updated( Dictionary np ) {
        if ( np != null ) {
            properties = np;
            properties.put(
                Constants.SERVICE_PID, "com.acme.console" );
        }

        if (console == null)
            console = new Console();

        int port = ((Integer)properties.get("port"))
            .intValue();

        String network = (String) properties.get("network");
        console.setPort(port, network);
        registration.setProperties(properties);
    }
    ... further methods
}</programlisting>
      </section>
    </section>

    <section>
      <title>Deletion</title>

      <para>When a <code>Configuration</code> object for a Managed Service is
      deleted, the Configuration Admin service must call
      <code>updated(Dictionary)</code> with a <code>null</code> argument on a
      thread that is different from that on which the
      <code>Configuration.delete</code> was executed. This deletion must send
      out a Configuration Event <xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_DELETED" xrefstyle="hyperlink"/> asynchronously to any registered Configuration
      Listener services after the <code>updated</code> method is called with a
      <code>null</code>.</para>
    </section>
  </section>

  <section xml:id="i1299227">
    <title>Managed Service Factory</title>

    <para>A Managed Service Factory is used when configuration information is
    needed for a service that can be instantiated multiple times. When a
    Managed Service Factory is registered with the Framework, the
    Configuration Admin service consults its database and calls <xref linkend="org.osgi.service.cm.ManagedServiceFactory.updated-String-Dictionary-" xrefstyle="hyperlink"/> for each associated and visible
    <code>Configuration</code> object that matches the PIDs on the
    registration. It passes the identifier of the Configuration instance,
    which can be used as a PID, as well as a <code>Dictionary</code> object
    with the configuration properties.</para>

    <para>A Managed Service Factory is useful when the bundle can provide
    functionality a number of times, each time with different configuration
    dictionaries. In this situation, the Managed Service Factory acts like a
    <emphasis>class</emphasis> and the Configuration Admin service can use
    this Managed Service Factory to <emphasis>instantiate instances</emphasis>
    for that <emphasis>class</emphasis>.</para>

    <para>In the next section, the word <emphasis>factory</emphasis> refers to
    this concept of creating <emphasis>instances</emphasis> of a function
    defined by a bundle that registers a Managed Service Factory.</para>

    <section>
      <title>When to Use a Managed Service Factory</title>

      <para>A Managed Service Factory should be used when a bundle does not
      have an internal or external entity associated with the configuration
      information but can potentially be instantiated multiple times.</para>

      <section>
        <title>Example Email Fetcher</title>

        <para>An email fetcher program displays the number of emails that a
        user has - a function likely to be required for different users. This
        function could be viewed as a <emphasis>class</emphasis> that needs to
        be <emphasis>instantiated</emphasis> for each user. Each instance
        requires different parameters, including password, host, protocol,
        user id, and so on.</para>

        <para>An implementation of the Email Fetcher service should register a
        <code>ManagedServiceFactory</code> object. In this way, the
        Configuration Admin service can define the configuration information
        for each user separately. The Email Fetcher service will only receive
        a configuration dictionary for each required instance (user).</para>
      </section>

      <section>
        <title>Example Temperature Conversion Service</title>

        <para>Assume a bundle has the code to implement a conversion service
        that receives a temperature and, depending on settings, can turn an
        actuator on and off. This service would need to be instantiated many
        times depending on where it is needed. Each instance would require its
        own configuration information for the following:</para>

        <itemizedlist>
          <listitem>
            <para>Upper value</para>
          </listitem>

          <listitem>
            <para>Lower value</para>
          </listitem>

          <listitem>
            <para>Switch Identification</para>
          </listitem>

          <listitem>
            <para>...</para>
          </listitem>
        </itemizedlist>

        <para>Such a conversion service should register a service object under
        a <code>ManagedServiceFactory</code> interface. A configuration
        program can then use this Managed Service Factory to create instances
        as needed. For example, this program could use a Graphic User
        Interface (GUI) to create such a component and configure it.</para>
      </section>

      <section>
        <title>Serial Ports</title>

        <para>Serial ports cannot always be used by the OSGi Device Access
        specification implementations. Some environments have no means to
        identify available serial ports, and a device on a serial port cannot
        always provide information about its type.</para>

        <para>Therefore, each serial port requires a description of the device
        that is connected. The bundle managing the serial ports would need to
        instantiate a number of serial ports under the control of the
        Configuration Admin service, with the appropriate
        <code>DEVICE_CATEGORY</code> property to allow it to participate in
        the Device Access implementation.</para>

        <para>If the bundle cannot detect the available serial ports
        automatically, it should register a Managed Service Factory. The
        Configuration Admin service can then, with the help of a configuration
        program, define configuration information for each available serial
        port.</para>
      </section>
    </section>

    <section>
      <title>Registration</title>

      <para>Similar to the Managed Service configuration dictionary, the
      configuration dictionary for a Managed Service Factory is identified by
      a PID. The Managed Service Factory, however, also has a
      <emphasis>factory </emphasis>PID, which is the PID of the associated
      Managed Service Factory. It is used to group all Managed Service Factory
      configuration dictionaries together.</para>

      <para>When a <code>Configuration</code> object for a Managed Service
      Factory is created (<code>ConfigurationAdmin.</code><xref linkend="org.osgi.service.cm.ConfigurationAdmin.createFactoryConfiguration-String-String-" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.cm.ConfigurationAdmin.createFactoryConfiguration-String-" xrefstyle="hyperlink"/> ), a new unique PID is created for this object
      by the Configuration Admin service. The scheme used for this PID is
      defined by the Configuration Admin service and is unrelated to the
      factory PID, which is chosen by the registering bundle.</para>

      <para>When the Configuration Admin service detects the registration of a
      Managed Service Factory, it must find all visible configuration
      dictionaries for this factory and must then sequentially call
      <code>ManagedServiceFactory.</code><xref linkend="org.osgi.service.cm.ManagedServiceFactory.updated-String-Dictionary-" xrefstyle="hyperlink"/> for each configuration dictionary. The first
      argument is the PID of the <code>Configuration</code> object (the one
      created by the Configuration Admin service) and the second argument
      contains the configuration properties.</para>

      <para>The Managed Service Factory should then create any artifacts
      associated with that factory. Using the PID given in the
      <code>Configuration</code> object, the bundle may register new services
      (other than a Managed Service) with the Framework, but this is not
      required. This may be necessary when the PID is useful in contexts other
      than the Configuration Admin service.</para>

      <para>The receiver must <emphasis>not</emphasis> register a Managed
      Service with this PID because this would force two Configuration objects
      to have the same PID. If a bundle attempts to do this, the Configuration
      Admin service should log an error and must ignore the registration of
      the Managed Service.</para>

      <para>The Configuration Admin service must guarantee that no race
      conditions exist between initialization, updates, and deletions.</para>

      <figure pgwide="1">
        <title>Managed Service Factory Action Diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.910in" contentwidth="4.917in" fileref="msf-config-action.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>A Managed Service Factory has only one update method: <xref linkend="org.osgi.service.cm.ManagedServiceFactory.updated-String-Dictionary-" xrefstyle="hyperlink"/>. This method can be called any number of times
      as Configuration objects are created or updated.</para>

      <para>The Managed Service Factory must detect whether a PID is being
      used for the first time, in which case it should create a new
      <emphasis>instance</emphasis>, or a subsequent time, in which case it
      should update an existing instance.</para>

      <para>The Configuration Admin service must call
      <code>updated(String,Dictionary)</code> on a thread that is different
      from the one that executed the registration. This requirement allows an
      implementation of a Managed Service Factory to use a synchronized method
      to assure that the callbacks do not interfere with the Managed Service
      Factory registration.</para>

      <para>The <xref linkend="org.osgi.service.cm.ManagedServiceFactory.updated-String-Dictionary-" xrefstyle="hyperlink"/> method may throw a <xref linkend="org.osgi.service.cm.ConfigurationException" xrefstyle="hyperlink"/> object. This object describes the problem and
      what property caused the problem. These exceptions should be logged by a
      Configuration Admin service.</para>

      <para>Multiple Managed Service Factory services can be registered with
      the same PID. Each of those services that have visibility to the
      corresponding configuration will be updated in service ranking
      order.</para>
    </section>

    <section>
      <title>Deletion</title>

      <para>If a configuring bundle deletes an instance of a Managed Service
      Factory, the <xref linkend="org.osgi.service.cm.ManagedServiceFactory.deleted-String-" xrefstyle="hyperlink"/> method is called. The argument is the PID for
      this instance. The implementation of the Managed Service Factory must
      remove all information and stop any behavior associated with that PID.
      If a service was registered for this PID, it should be
      unregistered.</para>

      <para>Deletion will asynchronously send out a Configuration Event <xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_DELETED" xrefstyle="hyperlink"/> to all registered Configuration Listener
      services.</para>
    </section>

    <section>
      <title>Managed Service Factory Example</title>

      <para><xref linkend="i1318247"/> highlights the differences between a
      Managed Service and a Managed Service Factory. It shows how a Managed
      Service Factory implementation receives configuration information that
      was created before it was registered.</para>

      <itemizedlist>
        <listitem>
          <para>A bundle implements an EMail Fetcher service. It registers a
          <code>ManagedServiceFactory</code> object with
          PID=<code>com.acme.email</code>.</para>
        </listitem>

        <listitem>
          <para>The Configuration Admin service notices the registration and
          consults its database. It finds three <code>Configuration</code>
          objects for which the factory PID is equal to
          <code>com.acme.email</code>. It must call
          <code>updated(String,Dictionary)</code> for each of these
          <code>Configuration</code> objects on the newly registered
          <code>ManagedServiceFactory</code> object.</para>
        </listitem>

        <listitem>
          <para>For each configuration dictionary received, the factory should
          create a new instance of a <code>EMailFetcher</code> object, one for
          <code>erica</code> (PID=16.1), one for <code>anna</code> (PID=16.3),
          and one for <code>elmer</code> (PID=16.2).</para>
        </listitem>

        <listitem>
          <para>The <code>EMailFetcher</code> objects are registered under the
          <code>Topic</code> interface so their results can be viewed by an
          online display.</para>

          <para>If the E<code>MailFetcher</code> object is registered, it may
          safely use the PID of the <code>Configuration</code> object because
          the Configuration Admin service must guarantee its suitability for
          this purpose.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1" xml:id="i1318247">
        <title>Managed Service Factory Example</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.778in" contentwidth="4.940in" fileref="msf-example.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Multiple Consoles Example</title>

      <para>This example illustrates how multiple consoles, each of which has
      its own port and interface can run simultaneously. This approach is very
      similar to the example for the Managed Service, but highlights the
      difference by allowing multiple consoles to be created.</para>

      <programlisting>class ExampleFactory implements ManagedServiceFactory{
    Hashtable        consoles = new Hashtable();
    BundleContext    context;
    public void start( BundleContext context ) 
        throws Exception {
        this.context = context;
        Hashtable local = new Hashtable();
        local.put(Constants.SERVICE_PID,"com.acme.console");
        context.registerService(
            ManagedServiceFactory.class.getName(),
            this, 
            local );
    }

    public void updated( String pid, Dictionary config ){
        Console console = (Console) consoles.get(pid);
        if (console == null) {
            console = new Console(context);
            consoles.put(pid, console);
        }

        int port = getInt(config, "port", 2011);
        String network = getString(
            config, 
            "network",
            null /*all*/ 
        );
        console.setPort(port, network);
    }

    public void deleted(String pid) {
        Console console = (Console) consoles.get(pid);
        if (console != null) {
            consoles.remove(pid);
            console.close();
        }
    }
}</programlisting>
    </section>
  </section>

  <section>
    <title>Configuration Admin Service</title>

    <para>The <xref linkend="org.osgi.service.cm.ConfigurationAdmin" xrefstyle="hyperlink"/> interface provides methods to maintain
    configuration data in an OSGi environment. This configuration information
    is defined by a number of <code>Configuration</code> objects associated
    with specific configuration targets. <code>Configuration</code> objects
    can be created, listed, modified, and deleted through this interface.
    Either a remote management system or the bundles configuring their own
    configuration information may perform these operations.</para>

    <para>The <code>ConfigurationAdmin</code> interface has methods for
    creating and accessing <code>Configuration</code> objects for a Managed
    Service, as well as methods for managing new <code>Configuration</code>
    objects for a Managed Service Factory.</para>

    <section xml:id="i1374750">
      <title>Creating a Managed Service Configuration Object</title>

      <para>A bundle can create a new Managed Service
      <code>Configuration</code> object with
      <code>ConfigurationAdmin.getConfiguration</code>. No create method is
      offered because doing so could introduce race conditions between
      different bundles trying to create a <code>Configuration</code> object
      for the same Managed Service. The <code>getConfiguration</code> method
      must atomically create and persistently store an object if it does not
      yet exist.</para>

      <para>Two variants of this method are:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.cm.ConfigurationAdmin.getConfiguration-String-" xrefstyle="hyperlink"/> - This method is used by a bundle with a
          given location to configure its <emphasis>own</emphasis>
          <code>ManagedService</code> objects. The argument specifies the PID
          of the targeted service.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.cm.ConfigurationAdmin.getConfiguration-String-String-" xrefstyle="hyperlink"/> - This method is used by a management bundle
          to configure <emphasis>another</emphasis> bundle. Therefore, this
          management bundle needs the right permission. The first argument is
          the PID and the second argument is the location identifier of the
          targeted <code>ManagedService</code> object.</para>
        </listitem>
      </itemizedlist>

      <para>All <code>Configuration</code> objects have a method, <xref linkend="org.osgi.service.cm.Configuration.getFactoryPid--" xrefstyle="hyperlink"/>, which in this case must return
      <code>null</code> because the <code>Configuration</code> object is
      associated with a Managed Service.</para>

      <para>Creating a new Configuration object must <emphasis>not</emphasis>
      initiate a callback to the Managed Service <code>updated</code> method
      until the properties are set in the Configuration with the
      <code>update</code> method.</para>
    </section>

    <section xml:id="i1761778">
      <title>Creating a Managed Service Factory Configuration Object</title>

      <para>The <code>ConfigurationAdmin</code> class provides two methods to
      create a new instance of a Managed Service Factory:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.cm.ConfigurationAdmin.createFactoryConfiguration-String-" xrefstyle="hyperlink"/> - This method is used by a bundle with a
          given location to configure its own
          <code>ManagedServiceFactory</code> objects. The argument specifies
          the PID of the targeted <code>ManagedServiceFactory</code> object.
          This <emphasis>factory PID</emphasis> can be obtained from the
          returned <code>Configuration</code> object with the
          <code>getFactoryPid()</code> method.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.cm.ConfigurationAdmin.createFactoryConfiguration-String-String-" xrefstyle="hyperlink"/> - This method is used by a management bundle
          to configure another bundle's <code>ManagedServiceFactory</code>
          object. The first argument is the PID and the second is the location
          identifier of the targeted <code>ManagedServiceFactory</code>
          object. The <emphasis>factory PID</emphasis> can be obtained from
          the returned <code>Configuration</code> object with
          <code>getFactoryPid</code> method.</para>
        </listitem>
      </itemizedlist>

      <para>Creating a new factory configuration must <emphasis>not</emphasis>
      initiate a callback to the Managed Service Factory <code>updated</code>
      method until the properties are set in the <code>Configuration</code>
      object with the <code>update</code> method.</para>
    </section>

    <section>
      <title>Accessing Existing Configurations</title>

      <para>The existing set of <code>Configuration</code> objects can be
      listed with <xref linkend="org.osgi.service.cm.ConfigurationAdmin.listConfigurations-String-" xrefstyle="hyperlink"/>. The argument is a <code>String</code> object
      with a filter expression. This filter expression has the same syntax as
      the Framework <code>Filter</code> class. For example:</para>

      <programlisting>(&amp;(size=42)(service.factoryPid=*osgi*))</programlisting>

      <para>The Configuration Admin service must only return Configurations
      that are visible to the calling bundle, see <xref linkend="service.cm-location.binding"/>.</para>

      <para>A single <code>Configuration</code> object is identified with a
      PID, and can be obtained with <xref linkend="org.osgi.service.cm.ConfigurationAdmin.listConfigurations-String-" xrefstyle="hyperlink"/> if it is visible. <code>null</code> is returned
      in both cases when there are no visible <code>Configuration</code>
      objects.</para>

      <para>The PIDs that are filtered on can be targeted PIDs, see <xref linkend="service.cm-targeted.pids"/>.</para>
    </section>

    <section>
      <title>Updating a Configuration</title>

      <para>The process of updating a <code>Configuration</code> object is the
      same for Managed Services and Managed Service Factories. First, <xref linkend="org.osgi.service.cm.ConfigurationAdmin.listConfigurations-String-" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.cm.ConfigurationAdmin.getConfiguration-String-" xrefstyle="hyperlink"/> should be used to get a
      <code>Configuration</code> object. The properties can be obtained with
      <code>Configuration.getProperties</code>. When no update has occurred
      since this object was created, <code>getProperties</code> returns
      <code>null</code>.</para>

      <para>New properties can be set by calling
      <code>Configuration.update</code>. The Configuration Admin service must
      first store the configuration information and then call all
      configuration targets that have visibility with the <code>updated</code>
      method: either the <code>ManagedService.</code><xref linkend="org.osgi.service.cm.ManagedService.updated-Dictionary-" xrefstyle="hyperlink"/> or <code>ManagedServiceFactory.</code><xref linkend="org.osgi.service.cm.ManagedServiceFactory.updated-String-Dictionary-" xrefstyle="hyperlink"/> method. If a target service is not registered,
      the fresh configuration information must be given to the target when the
      configuration target service registers and it has visibility. Each
      update of the Configuration properties must update a counter in the
      Configuration object after the data has been persisted but before the
      target(s) have been updated and any events are sent out. This counter is
      available from the <xref linkend="org.osgi.service.cm.Configuration.getChangeCount--" xrefstyle="hyperlink"/> method.</para>

      <para>The <code>update</code> method calls in <code>Configuration</code>
      objects are not executed synchronously with the related target services
      <code>updated</code> method. The <code>updated</code> method must be
      called asynchronously. The Configuration Admin service, however, must
      have updated the persistent storage before the <code>update</code>
      method returns.</para>

      <para>The update method must also asynchronously send out a
      Configuration Event <xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_UPDATED" xrefstyle="hyperlink"/> to all registered Configuration
      Listeners.</para>
    </section>

    <section xml:id="service.cm-multi.locations">
      <title>Using Multi-Locations</title>

      <para>Sharing configuration between different bundles can be done using
      multi-locations, see <xref linkend="service.cm-location.binding"/>. A
      multi-location for a Configuration enables this Configuration to be
      delivered to any bundle that has visibility to that configuration. It is
      also possible that Bundles are interested in multiple PIDs for one
      target service, for this reason they can register multiple PIDs for one
      service.</para>

      <para>For example, a number of bundles require access to the URL of a
      remote host, associated with the PID <code>com.acme.host</code>. A
      manager, aware that this PID is used by different bundles, would need to
      specify a location for the Configuration that allows delivery to any
      bundle. A multi-location, any location starting with a question mark
      achieves this. The part after the question mark has only use if the
      system runs with security, it allows the implementation of regions, see
      <xref linkend="service.cm-regions"/>. In this example a single question
      mark is used because any Bundle can receive this Configuration. The
      manager's code could look like:</para>

      <programlisting>Configuration c = admin.getConfiguration("com.acme.host", "?" );
Hashtable ht = new Hashtable();
ht.put( "host", hostURL);
c.update(ht);</programlisting>

      <para>A Bundle interested in the host configuration would register a
      Managed Service with the following properties:</para>

      <programlisting>service.pid = [ "com.acme.host", "com.acme.system"]</programlisting>

      <para>The Bundle would be called back for both the com.acme.host and
      com.acme.system PID and must therefore discriminate between these two
      cases. This Managed Service therefore would have a callback like:</para>

      <programlisting>volatile URL url;
public void updated( Dictionary d ) {
  if ( d.get("service.pid").equals("com.acme.host"))
      this.url = new URL( d.get("host"));
  if ( d.get("service.pid").equals("com.acme.system"))
        ....
}</programlisting>
    </section>

    <section xml:id="service.cm-regions">
      <title>Regions</title>

      <para>In certain cases it is necessary to isolate bundles from each
      other. This will require that the configuration can be separated in
      <emphasis>regions</emphasis>. Each region can then be configured by a
      separate manager that is only allowed to manage bundles in its own
      region. Bundles can then only see configurations from their own region.
      Such a region based system can only be achieved with Java security as
      this is the only way to place bundles in a sandbox. This section
      describes how the Configuration's location binding can be used to
      implement regions if Java security is active.</para>

      <para>Regions are groups of bundles that share location information
      among each other but are not willing to share this information with
      others. Using the multi-locations, see <xref linkend="service.cm-location.binding"/>, and security it is possible to
      limit access to a Configuration by using a location name. A Bundle can
      only receive a Configuration when it has <xref linkend="org.osgi.service.cm.ConfigurationPermission" xrefstyle="hyperlink"/> <code>[location name,</code> <xref linkend="org.osgi.service.cm.ConfigurationPermission.TARGET" xrefstyle="hyperlink"/> <code>]</code>. It is therefore possible to
      create region by choosing a region name for the location. A management
      agent then requires <xref linkend="org.osgi.service.cm.ConfigurationPermission" xrefstyle="hyperlink"/> <code>[?region-name,</code> <xref linkend="org.osgi.service.cm.ConfigurationPermission.CONFIGURE" xrefstyle="hyperlink"/> <code>]</code> and a Bundle in the region
      requires <xref linkend="org.osgi.service.cm.ConfigurationPermission" xrefstyle="hyperlink"/> <code>[?region-name,</code> <xref linkend="org.osgi.service.cm.ConfigurationPermission.TARGET" xrefstyle="hyperlink"/> <code>]</code>.</para>

      <para>To implement regions, the management agent is required to use
      multi-locations; without the question mark a Configuration is only
      visible to a Bundle that has the exact location of the Configuration.
      With a multi-location, the Configuration is delivered to any bundle that
      has the appropriate permission. Therefore, if regions are used, no
      manager should have <code>ConfigurationPermission[*, <xref linkend="org.osgi.service.cm.ConfigurationPermission.CONFIGURE" xrefstyle="hyperlink"/> ]</code> because it would be able to configure
      anybody. This permission would enable the manager to set the location to
      any region or set the location to <code>null</code>. All managers must
      be restricted to a permission like
      <code>ConfigurationPermission[?com.acme.region.*,CONFIGURE]</code>. The
      resource name for a Configuration Permission uses substring matching as
      in the OSGi Filter, this facility can be used to simplify the
      administrative setup and implement more complex sharing schemes.</para>

      <para>For example, a management agent works for the region
      <code>com.acme</code>. It has the following permission:</para>

      <programlisting><xref linkend="org.osgi.service.cm.ConfigurationPermission" xrefstyle="hyperlink"/>[?com.acme.*,<xref linkend="org.osgi.service.cm.ConfigurationPermission.CONFIGURE" xrefstyle="hyperlink"/>]</programlisting>

      <para>The manager requires multi-location updates for
      <code>com.acme.*</code> (the last full stop is required in this
      wildcarding). For the <xref linkend="org.osgi.service.cm.ConfigurationPermission.CONFIGURE" xrefstyle="hyperlink"/> action the question mark must be specified in
      the resource name. The bundles in the region have the permission:</para>

      <programlisting><xref linkend="org.osgi.service.cm.ConfigurationPermission" xrefstyle="hyperlink"/>["?com.acme.alpha",<xref linkend="org.osgi.service.cm.ConfigurationPermission.TARGET" xrefstyle="hyperlink"/>]</programlisting>

      <para>The question mark must be specified for the <xref linkend="org.osgi.service.cm.ConfigurationPermission.TARGET" xrefstyle="hyperlink"/> permission. A management agent that needs to
      configure Bundles in a region must then do this as follows:</para>

      <programlisting>Configuration c = admin.getConfiguration("com.acme.host", "?com.acme.alpha" );
Hashtable ht = new Hashtable();
ht.put( "host", hostURL);
c.update(ht);</programlisting>

      <para>Another, similar, example with two regions:</para>

      <itemizedlist>
        <listitem>
          <para><code>system</code></para>
        </listitem>

        <listitem>
          <para><code>application</code></para>
        </listitem>
      </itemizedlist>

      <para>There is only one manager that manages all bundles. Its
      permissions look like:</para>

      <programlisting>ConfigurationPermission[?system,<xref linkend="org.osgi.service.cm.ConfigurationPermission.CONFIGURE" xrefstyle="hyperlink"/>]
ConfigurationPermission[?application,<xref linkend="org.osgi.service.cm.ConfigurationPermission.CONFIGURE" xrefstyle="hyperlink"/>]</programlisting>

      <para>A Bundle in the <code>application</code> region can have the
      following permissions:</para>

      <programlisting>ConfigurationPermission[?application,<xref linkend="org.osgi.service.cm.ConfigurationPermission.TARGET" xrefstyle="hyperlink"/>]</programlisting>

      <para>This managed bundle therefore has only visibility to
      configurations in the <code>application</code> region.</para>
    </section>

    <section>
      <title>Deletion</title>

      <para>A <code>Configuration</code> object that is no longer needed can
      be deleted with <code>Configuration.delete</code>, which removes the
      <code>Configuration</code> object from the database. The database must
      be updated before the target service's <code>updated</code> or
      <code>deleted</code> method is called. Only services that have received
      the configuration dictionary before must be called.</para>

      <para>If the target service is a Managed Service Factory, the factory is
      informed of the deleted <code>Configuration</code> object by a call to
      <code>ManagedServiceFactory.</code><xref linkend="org.osgi.service.cm.ManagedServiceFactory.deleted-String-" xrefstyle="hyperlink"/> method. It should then remove the associated
      <emphasis>instance</emphasis>. The
      <code>ManagedServiceFactory.</code><xref linkend="org.osgi.service.cm.ManagedServiceFactory.deleted-String-" xrefstyle="hyperlink"/> call must be done asynchronously with respect to
      <code>Configuration.</code><xref linkend="org.osgi.service.cm.Configuration.delete--" xrefstyle="hyperlink"/>.</para>

      <para>When a <code>Configuration</code> object of a Managed Service is
      deleted, <code>ManagedService.updated</code> is called with
      <code>null</code> for the <code>properties</code> argument. This method
      may be used for clean-up, to revert to default values, or to unregister
      a service. This method is called asynchronously from the
      <code>delete</code> method.</para>

      <para>The update method must also asynchronously send out a
      Configuration Event <xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_DELETED" xrefstyle="hyperlink"/> to all registered Configuration
      Listeners.</para>
    </section>

    <section>
      <title>Updating a Bundle's Own Configuration</title>

      <para>The Configuration Admin service specification does not distinguish
      between updates via a Management Agent and a bundle updating its own
      configuration information (as defined by its location). Even if a bundle
      updates its own configuration information, the Configuration Admin
      service must callback the associated target service's
      <code>updated</code> method.</para>

      <para>As a rule, to update its own configuration, a bundle's user
      interface should <emphasis>only</emphasis> update the configuration
      information and never its internal structures directly. This rule has
      the advantage that the events, from the bundle implementation's
      perspective, appear similar for internal updates, remote management
      updates, and initialization.</para>
    </section>
  </section>

  <section xml:id="i1693263">
    <title>Configuration Events</title>

    <para>Configuration Admin can update interested parties of changes in its
    repository. The model is based on the white board pattern where
    Configuration Listener services are registered with the service
    registry.</para>

    <para>There are two types of Configuration Listener services:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.cm.ConfigurationListener" xrefstyle="hyperlink"/> - The default Configuration Listener receives
        events asynchronously from the method that initiated the event and on
        another thread.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.cm.SynchronousConfigurationListener" xrefstyle="hyperlink"/> - A Synchronous Configuration Listener is
        guaranteed to be called on the same thread as the method call that
        initiated the event.</para>
      </listitem>
    </itemizedlist>

    <para>The Configuration Listener service will receive <xref linkend="org.osgi.service.cm.ConfigurationEvent" xrefstyle="hyperlink"/>
    objects if important changes take place. The Configuration Admin service
    must call the <xref linkend="org.osgi.service.cm.ConfigurationListener.configurationEvent-ConfigurationEvent-" xrefstyle="hyperlink"/> method with such an event. Configuration Events
    must be delivered in order for each listener as they are generated. The
    way events must be delivered is the same as described in
    <emphasis>Delivering Events</emphasis> of <xref linkend="intro.core.release" xrefstyle="template:%t"/>.</para>

    <para>The <code>ConfigurationEvent</code> object carries a factory PID (
    <xref linkend="org.osgi.service.cm.ConfigurationEvent.getFactoryPid--" xrefstyle="hyperlink"/> ) and a PID ( <xref linkend="org.osgi.service.cm.ConfigurationEvent.getPid--" xrefstyle="hyperlink"/> ). If the factory PID is <code>null</code>, the
    event is related to a Managed Service <code>Configuration</code> object,
    else the event is related to a Managed Service <code>Factory
    Configuration</code> object.</para>

    <para>The <code>ConfigurationEvent</code> object can deliver the following
    events from the <xref linkend="org.osgi.service.cm.ConfigurationEvent.getType--" xrefstyle="hyperlink"/> method:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_DELETED" xrefstyle="hyperlink"/> - The <code>Configuration</code> object is
        deleted.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_UPDATED" xrefstyle="hyperlink"/> - The <code>Configuration</code> object is
        updated.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_LOCATION_CHANGED" xrefstyle="hyperlink"/> - The location of the
        <code>Configuration</code> object changed.</para>
      </listitem>
    </itemizedlist>

    <para>The Configuration Event also carries the
    <code>ServiceReference</code> object of the Configuration Admin service
    that generated the event.</para>

    <section>
      <title>Event Admin Service and Configuration Change Events</title>

      <para>Configuration events must be delivered asynchronously by the
      Configuration Admin implementation, if present. The topic of a
      configuration event must be:</para>

      <programlisting>org/osgi/service/cm/ConfigurationEvent/&lt;eventtype&gt;</programlisting>

      <para>The &lt;event type&gt; can be any of the following:</para>

      <programlisting><xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_DELETED" xrefstyle="hyperlink"/>
<xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_UPDATED" xrefstyle="hyperlink"/>
<xref linkend="org.osgi.service.cm.ConfigurationEvent.CM_LOCATION_CHANGED" xrefstyle="hyperlink"/></programlisting>

      <para>The properties of a configuration event are:</para>

      <itemizedlist>
        <listitem>
          <para><code>cm.factoryPid</code> - (<code>String</code>) The factory
          PID of the associated <code>Configuration</code> object, if the
          target is a Managed Service Factory. Otherwise not set.</para>
        </listitem>

        <listitem>
          <para><code>cm.pid</code> - (<code>String</code>) The PID of the
          associated <code>Configuration</code> object.</para>
        </listitem>

        <listitem>
          <para><code>service</code> - (<code>ServiceReference</code>) The
          Service Reference of the Configuration Admin service.</para>
        </listitem>

        <listitem>
          <para><code>service.id</code> - (<code>Long</code>) The
          Configuration Admin service's ID.</para>
        </listitem>

        <listitem>
          <para><code>service.objectClass</code> - (<code>String[]</code>) The
          Configuration Admin service's object class (which must include
          <code>org.osgi.service.cm.ConfigurationAdmin</code>)</para>
        </listitem>

        <listitem>
          <para><code>service.pid</code> - (<code>String</code>) The
          Configuration Admin service's persistent identity, if set.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="i1459884">
    <title>Configuration Plugin</title>

    <para>The Configuration Admin service allows third-party applications to
    participate in the configuration process. Bundles that register a service
    object under a <code>ConfigurationPlugin</code> interface can process the
    configuration dictionary just before it reaches the configuration target
    service.</para>

    <para xml:id="i1490844">Plug-ins allow sufficiently privileged bundles to
    intercept configuration dictionaries just <emphasis>before</emphasis> they
    must be passed to the intended Managed Service or Managed Service Factory
    but <emphasis>after</emphasis> the properties are stored. The changes the
    plug-in makes are dynamic and must not be stored. The plug-in must only be
    called when an update takes place while it is registered and there is a
    valid dictionary. The plugin is not called when a configuration is
    deleted.</para>

    <para>The <code>ConfigurationPlugin</code> interface has only one method:
    <xref linkend="org.osgi.service.cm.ConfigurationPlugin.modifyConfiguration-ServiceReference-Dictionary-" xrefstyle="hyperlink"/>. This method inspects or modifies configuration
    data.</para>

    <para xml:id="i1490848">All plug-ins in the service registry must be
    traversed and called before the properties are passed to the configuration
    target service. Each Configuration Plugin object gets a chance to inspect
    the existing data, look at the target object, which can be a
    <code>ManagedService</code> object or a <code>ManagedServiceFactory</code>
    object, and modify the properties of the configuration dictionary. The
    changes made by a plug-in must be visible to plugins that are called
    later.</para>

    <para><code>ConfigurationPlugin</code> objects should not modify
    properties that belong to the configuration properties of the target
    service unless the implications are understood. This functionality is
    mainly intended to provide functions that leverage the Framework service
    registry. The changes made by the plugin should normally not be validated.
    However, the Configuration Admin must ignore changes to the automatic
    properties as described in <xref linkend="i1374751"/>.</para>

    <para>For example, a Configuration Plugin service may add a physical
    location property to a service. This property can be leveraged by
    applications that want to know where a service is physically located. This
    scenario could be carried out without any further support of the service
    itself, except for the general requirement that the service should
    propagate the public properties it receives from the Configuration Admin
    service to the service registry.</para>

    <figure>
      <title>Order of Configuration Plugin Services</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.722in" contentwidth="7.000in" fileref="config-plugin-order.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <section xml:id="i1490850">
      <title>Limiting The Targets</title>

      <para xml:id="i1490849">A <code>ConfigurationPlugin</code> object may
      optionally specify a <code>cm.target</code> registration property. This
      value is the PID of the configuration target whose configuration updates
      the <code>ConfigurationPlugin</code> object wants to intercept.</para>

      <para>The <code>ConfigurationPlugin</code> object must then only be
      called with updates for the configuration target service with the
      specified PID. For a factory target service, the factory PID is used and
      the plugin will see all instances of the factory. Omitting the
      <code>cm.target</code> registration property means that it is called for
      <emphasis>all</emphasis> configuration updates.</para>
    </section>

    <section>
      <title>Example of Property Expansion</title>

      <para>Consider a Managed Service that has a configuration property
      <code>service.to</code> with the value
      <code>(objectclass=com.acme.Alarm</code>). When the Configuration Admin
      service sets this property on the target service, a
      <code>ConfigurationPlugin</code> object may replace the
      <code>(objectclass=com.acme.Alarm)</code> filter with an array of
      existing alarm systems' PIDs as follows:</para>

      <programlisting>ID "service.to=[32434,232,12421,1212]"</programlisting>

      <para>A new Alarm Service with <code>service.pid=343</code> is
      registered, requiring that the list of the target service be updated.
      The bundle which registered the Configuration Plugin service, therefore,
      wants to set the <code>service.to</code> registration property on the
      target service. It does <emphasis>not</emphasis> do this by calling
      <code>ManagedService.updated</code> directly for several reasons:</para>

      <itemizedlist>
        <listitem>
          <para>In a securely configured system, it should not have the
          permission to make this call or even obtain the target
          service.</para>
        </listitem>

        <listitem>
          <para>It could get into race conditions with the Configuration Admin
          service if it had the permissions in the previous bullet. Both
          services would compete for access simultaneously.</para>
        </listitem>
      </itemizedlist>

      <para>Instead, it must get the <code>Configuration</code> object from
      the Configuration Admin service and call the <code>update</code> method
      on it.</para>

      <para>The Configuration Admin service must schedule a new update cycle
      on another thread, and sometime in the future must call
      <code>ConfigurationPlugin.modifyProperties</code>. The
      <code>ConfigurationPlugin</code> object could then set the
      <code>service.to</code> property to <code>[32434,232,12421,1212,
      343]</code>. After that, the Configuration Admin service must call
      <code>updated</code> on the target service with the new
      <code>service.to</code> list.</para>
    </section>

    <section xml:id="i1490867">
      <title>Configuration Data Modifications</title>

      <para>Modifications to the configuration dictionary are still under the
      control of the Configuration Admin service, which must determine whether
      to accept the changes, hide critical variables, or deny the changes for
      other reasons.</para>

      <para>The <code>ConfigurationPlugin</code> interface must also allow
      plugins to detect configuration updates to the service via the callback.
      This ability allows them to synchronize the configuration updates with
      transient information.</para>
    </section>

    <section>
      <title>Forcing a Callback</title>

      <para>If a bundle needs to force a Configuration Plugin service to be
      called again, it must fetch the appropriate <code>Configuration</code>
      object from the Configuration Admin service and call the
      <code>update()</code> method (the no parameter version) on this object.
      This call forces an update with the current configuration dictionary so
      that all applicable plug-ins get called again.</para>
    </section>

    <section>
      <title>Calling Order</title>

      <para>The order in which the <code>ConfigurationPlugin</code> objects
      are called must depend on the <code>service.cmRanking</code>
      configuration property of the <code>ConfigurationPlugin</code> object.
      <xref linkend="i1624384"/> shows the usage of the
      <code>service.cmRanking</code> property for the order of calling the
      Configuration Plugin services.</para>

      <table xml:id="i1624384">
        <title><code>service.cmRanking</code> Usage For Ordering</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>service.cmRanking value</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>&lt; 0</code></entry>

              <entry><para>The Configuration Plugin service should not modify
              properties and must be called before any modifications are
              made.</para></entry>
            </row>

            <row>
              <entry><code>&gt;= 0 &amp;&amp; &lt;= 1000</code></entry>

              <entry><para xml:id="i1624378">The Configuration Plugin service
              modifies the configuration data. The calling order should be
              based on the value of the <code>service.cmRanking</code>
              property.</para></entry>
            </row>

            <row>
              <entry><code>&gt; 1000</code></entry>

              <entry><para>The Configuration Plugin service should not modify
              data and is called after all modifications are
              made.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>

  <section xml:id="i1288153">
    <title>Meta Typing</title>

    <para>This section discusses how the Metatype specification is used in the
    context of a Configuration Admin service.</para>

    <para>When a Managed Service or Managed Service Factory is registered, the
    service object may also implement the <code>MetaTypeProvider</code>
    interface.</para>

    <para>If the Managed Service or Managed Service Factory object implements
    the <code>MetaTypeProvider</code> interface, a management bundle may
    assume that the associated <code>ObjectClassDefinition</code> object can
    be used to configure the service.</para>

    <para>The <code>ObjectClassDefinition</code> and
    <code>AttributeDefinition</code> objects contain sufficient information to
    automatically build simple user interfaces. They can also be used to
    augment dedicated interfaces with accurate validations.</para>

    <para>When the Metatype specification is used, care should be taken to
    match the capabilities of the metatype package to the capabilities of the
    Configuration Admin service specification. Specifically:</para>

    <itemizedlist>
      <listitem>
        <para>The metatype specification cannot describe nested arrays and
        lists or arrays/lists of mixed type.</para>
      </listitem>
    </itemizedlist>

    <para>This specification does not address how the metatype is made
    available to a management system due to the many open issues regarding
    remote management.</para>
  </section>

  <section>
    <title>Security</title>

    <section xml:id="i1693439">
      <title>Configuration Permission</title>

      <para>Every bundle has the implicit right to receive and configure
      configurations with a location that exactly matches the Bundle's
      location or that is <code>null</code>. For all other situations the
      Configuration Admin must verify that the configuring and to be updated
      bundles have a Configuration Permission that matches the Configuration's
      location.</para>

      <para>The resource name of this permission maps to the location of the
      Configuration, the location can control the visibility of a
      Configuration for a bundle. The resource name is compared with the
      actual configuration location using the OSGi Filter sub-string matching.
      The question mark for multi-locations is part of the given resource
      name. The Configure Permission has the following actions:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.cm.ConfigurationPermission.CONFIGURE" xrefstyle="hyperlink"/> - Can manage matching configurations</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.cm.ConfigurationPermission.TARGET" xrefstyle="hyperlink"/> - Can be updated with a matching
          configuration</para>
        </listitem>
      </itemizedlist>

      <para>To be able to set the location to <code>null</code> requires a
      <code>ConfigurationPermission[*,</code> <xref linkend="org.osgi.service.cm.ConfigurationPermission.CONFIGURE" xrefstyle="hyperlink"/> <code>]</code>.</para>

      <para>It is possible to deny bundles the use of multi-locations by using
      Conditional Permission Admin's deny model.</para>
    </section>

    <section>
      <title>Permissions Summary</title>

      <para>Configuration Admin service security is implemented using Service
      Permission and Configuration Permission. The following table summarizes
      the permissions needed by the Configuration Admin bundle itself, as well
      as the typical permissions needed by the bundles with which it
      interacts.</para>

      <para>Configuration Admin:</para>

      <programlisting>ServicePermission[ ..ConfigurationAdmin, REGISTER]
ServicePermission[ ..ManagedService, GET ]
ServicePermission[ ..ManagedServiceFactory, GET ]
ServicePermission[ ..ConfigurationPlugin, GET ]
ConfigurationPermission[ *, CONFIGURE ]
AdminPermission[ *, METADATA ]</programlisting>

      <para>Managed Service:</para>

      <programlisting>ServicePermission[ ..ConfigurationAdmin, GET]
ServicePermission[ ..ManagedService, REGISTER ]
ConfigurationPermission[ ... , TARGET ]</programlisting>

      <para>Managed Service Factory:</para>

      <programlisting>ServicePermission[ ..ConfigurationAdmin, GET]
ServicePermission[ ..ManagedServiceFactory, REGISTER ]
ConfigurationPermission[ ... , TARGET ]</programlisting>

      <para>Configuration Plugin:</para>

      <programlisting>ServicePermission[ ..ConfigurationPlugin,REGISTER ]</programlisting>

      <para>Configuration Listener:</para>

      <programlisting>ServicePermission[ ..ConfigurationListener,REGISTER ]</programlisting>

      <para>The Configuration Admin service must have <code>ServicePermission[
      ConfigurationAdmin, REGISTER]</code>. It will also be the only bundle
      that needs the <code>ServicePermission[ManagedService |
      ManagedServiceFactory | ConfigurationPlugin, GET]</code>. No other
      bundle should be allowed to have <code>GET</code> permission for these
      interfaces. The Configuration Admin bundle must also hold
      <code>ConfigurationPermission[*,CONFIGURE]</code>.</para>

      <para>Bundles that can be configured must have the
      <code>ServicePermission[ManagedService | ManagedServiceFactory,
      REGISTER]</code>. Bundles registering <code>ConfigurationPlugin</code>
      objects must have <code>ServicePermission[ConfigurationPlugin,
      REGISTER]</code>. The Configuration Admin service must trust all
      services registered with the <code>ConfigurationPlugin</code> interface.
      Only the Configuration Admin service should have
      <code>ServicePermission[ ConfigurationPlugin, GET]</code>.</para>

      <para>If a Managed Service or Managed Service Factory is implemented by
      an object that is also registered under another interface, it is
      possible, although inappropriate, for a bundle other than the
      Configuration Admin service implementation to call the
      <code>updated</code> method. Security-aware bundles can avoid this
      problem by having their updated methods check that the caller has
      <code>ConfigurationPermission[*,CONFIGURE]</code>.</para>

      <para>Bundles that want to change their own configuration need
      <code>ServicePermission[ConfigurationAdmin, GET]</code>. A bundle with
      <code>ConfigurationPermission[*,CONFIGURE]</code>is allowed to access
      and modify any <code>Configuration</code> object.</para>

      <para>Pre-configuration of bundles requires
      <code>ConfigurationPermission[location,CONFIGURE]</code> (location can
      use the sub-string matching rules of the Filter) because the methods
      that specify a location require this permission.</para>
    </section>

    <section>
      <title>Configuration and Permission Administration</title>

      <para>Configuration information has a direct influence on the
      permissions needed by a bundle. For example, when the Configuration
      Admin Bundle orders a bundle to use port 2011 for a console, that bundle
      also needs permission for listening to incoming connections on that
      port.</para>

      <para>Both a simple and a complex solution exist for this
      situation.</para>

      <para>The simple solution for this situation provides the bundle with a
      set of permissions that do not define specific values but allow a range
      of values. For example, a bundle could listen to ports above 1024
      freely. All these ports could then be used for configuration.</para>

      <para>The other solution is more complicated. In an environment where
      there is very strong security, the bundle would only be allowed access
      to a specific port. This situation requires an atomic update of both the
      configuration data and the permissions. If this update was not atomic, a
      potential security hole would exist during the period of time that the
      set of permissions did not match the configuration.</para>

      <para>The following scenario can be used to update a configuration and
      the security permissions:</para>

      <orderedlist>
        <listitem>
          <para>Stop the bundle.</para>
        </listitem>

        <listitem>
          <para>Update the appropriate <code>Configuration</code> object via
          the Configuration Admin service.</para>
        </listitem>

        <listitem>
          <para>Update the permissions in the Framework.</para>
        </listitem>

        <listitem>
          <para>Start the bundle.</para>
        </listitem>
      </orderedlist>

      <para>This scenario would achieve atomicity from the point of view of
      the bundle.</para>
    </section>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.cm" xml:id="org.osgi.service.cm" xml:base="../../generated/javadoc/docbook/org.osgi.service.cm.xml">
   <title>org.osgi.service.cm</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.cm-version">Version 1.5</releaseinfo>
      <edition xml:id="org.osgi.service.cm-version.number">1.5</edition>
   </info>
   <para>
Configuration Admin Package Version 1.5.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.cm; version="[1.5,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.cm; version="[1.5,1.6)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.Configuration">
                  <code>Configuration</code>
               </link> - 
The configuration information for a <code>ManagedService</code> or
 <code>ManagedServiceFactory</code> object.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.ConfigurationAdmin">
                  <code>ConfigurationAdmin</code>
               </link> - 
Service for administering configuration data.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.ConfigurationEvent">
                  <code>ConfigurationEvent</code>
               </link> - 
A Configuration Event.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.ConfigurationException">
                  <code>ConfigurationException</code>
               </link> - 
An <code>Exception</code> class to inform the Configuration Admin service of
 problems with configuration data.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.ConfigurationListener">
                  <code>ConfigurationListener</code>
               </link> - 
Listener for Configuration Events.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.ConfigurationPermission">
                  <code>ConfigurationPermission</code>
               </link> - 
Indicates a bundle's authority to configure bundles or be updated by
 Configuration Admin.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.ConfigurationPlugin">
                  <code>ConfigurationPlugin</code>
               </link> - 
A service interface for processing configuration dictionary before the
 update.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.ManagedService">
                  <code>ManagedService</code>
               </link> - 
A service that can receive configuration data from a Configuration Admin
 service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.ManagedServiceFactory">
                  <code>ManagedServiceFactory</code>
               </link> - 
Manage multiple service instances.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.SynchronousConfigurationListener">
                  <code>SynchronousConfigurationListener</code>
               </link> - 
Synchronous Listener for Configuration Events.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section>
      <title>Permissions</title>
      <section>
         <title>
            <link linkend="org.osgi.service.cm.Configuration">Configuration</link>
         </title>
         <itemizedlist>
            <listitem>
               <para>
                  <code>
                     <link linkend="org.osgi.service.cm.Configuration.setBundleLocation-String-">setBundleLocation(String)</link>
                  </code>
               </para>
               <itemizedlist>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission[this.location,CONFIGURE]</code> -  if            this.location is not <code>null</code>
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission[location,CONFIGURE]</code> -  if location is not            <code>null</code>
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission["*",CONFIGURE]</code> -  if this.location is            <code>null</code> or if location is <code>null</code>
                     </para>
                  </listitem>
               </itemizedlist>
            </listitem>
            <listitem>
               <para>
                  <code>
                     <link linkend="org.osgi.service.cm.Configuration.getBundleLocation--">getBundleLocation()</link>
                  </code>
               </para>
               <itemizedlist>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission[this.location,CONFIGURE]</code> -  if            this.location is not <code>null</code>
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission["*",CONFIGURE]</code> -  if this.location is            <code>null</code>
                     </para>
                  </listitem>
               </itemizedlist>
            </listitem>
         </itemizedlist>
      </section>
      <section>
         <title>
            <link linkend="org.osgi.service.cm.ConfigurationAdmin">ConfigurationAdmin</link>
         </title>
         <itemizedlist>
            <listitem>
               <para>
                  <code>
                     <link linkend="org.osgi.service.cm.ConfigurationAdmin.createFactoryConfiguration-String-String-">createFactoryConfiguration(String,String)</link>
                  </code>
               </para>
               <itemizedlist>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission[location,CONFIGURE]</code> -  if location is not            <code>null</code>
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission["*",CONFIGURE]</code> -  if location is            <code>null</code>
                     </para>
                  </listitem>
               </itemizedlist>
            </listitem>
            <listitem>
               <para>
                  <code>
                     <link linkend="org.osgi.service.cm.ConfigurationAdmin.getConfiguration-String-String-">getConfiguration(String,String)</link>
                  </code>
               </para>
               <itemizedlist>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission[*,CONFIGURE]</code> -  if location is            <code>null</code> or if the returned configuration <code>c</code> already            exists and c.location is <code>null</code>
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission[location,CONFIGURE]</code> -  if location is not            <code>null</code>
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission[c.location,CONFIGURE]</code> -  if the returned            configuration <code>c</code> already exists and c.location is not            <code>null</code>
                     </para>
                  </listitem>
               </itemizedlist>
            </listitem>
            <listitem>
               <para>
                  <code>
                     <link linkend="org.osgi.service.cm.ConfigurationAdmin.getConfiguration-String-">getConfiguration(String)</link>
                  </code>
               </para>
               <itemizedlist>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission[c.location,CONFIGURE]</code> -  If the            configuration <code>c</code> already exists and c.location is not            <code>null</code>
                     </para>
                  </listitem>
               </itemizedlist>
            </listitem>
            <listitem>
               <para>
                  <code>
                     <link linkend="org.osgi.service.cm.ConfigurationAdmin.listConfigurations-String-">listConfigurations(String)</link>
                  </code>
               </para>
               <itemizedlist>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission[c.location,CONFIGURE]</code> -  Only            configurations <code>c</code> are returned for which the caller has            this permission</para>
                  </listitem>
               </itemizedlist>
            </listitem>
         </itemizedlist>
      </section>
      <section>
         <title>
            <link linkend="org.osgi.service.cm.ManagedService">ManagedService</link>
         </title>
         <itemizedlist>
            <listitem>
               <para>
                  <code>
                     <link linkend="org.osgi.service.cm.ManagedService.updated-Dictionary-">updated(Dictionary)</link>
                  </code>
               </para>
               <itemizedlist>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission[c.location,TARGET]</code> -  Required by the            bundle that registered this service</para>
                  </listitem>
               </itemizedlist>
            </listitem>
         </itemizedlist>
      </section>
      <section>
         <title>
            <link linkend="org.osgi.service.cm.ManagedServiceFactory">ManagedServiceFactory</link>
         </title>
         <itemizedlist>
            <listitem>
               <para>
                  <code>
                     <link linkend="org.osgi.service.cm.ManagedServiceFactory.updated-String-Dictionary-">updated(String,Dictionary)</link>
                  </code>
               </para>
               <itemizedlist>
                  <listitem>
                     <para>
                        <code>ConfigurationPermission[c.location,TARGET]</code> -  Required by the            bundle that registered this service</para>
                  </listitem>
               </itemizedlist>
            </listitem>
         </itemizedlist>
      </section>
   </section>
   <section role="class" xreflabel="Configuration" xml:id="org.osgi.service.cm.Configuration">
      <title>public interface Configuration</title>
      <para>
The configuration information for a <code>ManagedService</code> or
 <code>ManagedServiceFactory</code> object.
 
 The Configuration Admin service uses this interface to represent the
 configuration information for a <code>ManagedService</code> or for a service
 instance of a <code>ManagedServiceFactory</code>.
 
 </para>
      <para>
 A <code>Configuration</code> object contains a configuration dictionary and allows
 the properties to be updated via this object. Bundles wishing to receive
 configuration dictionaries do not need to use this class - they register a
 <code>ManagedService</code> or <code>ManagedServiceFactory</code>. Only administrative
 bundles, and bundles wishing to update their own configurations need to use
 this class.
 
 </para>
      <para>
 The properties handled in this configuration have case insensitive
 <code>String</code> objects as keys. However, case must be preserved from the last
 set key/value.
 </para>
      <para>
 A configuration can be <emphasis>bound</emphasis> to a specific bundle or to a region of
 bundles using the <emphasis>location</emphasis>. In its simplest form the location is the
 location of the target bundle that registered a Managed Service or a Managed
 Service Factory. However, if the location starts with <code>?</code> then the
 location indicates multiple delivery. In such a case the configuration must
 be delivered to all targets.
 
 If security is on, the Configuration Permission can be used to restrict the
 targets that receive updates. The Configuration Admin must only update a
 target when the configuration location matches the location of the target's
 bundle or the target bundle has a Configuration Permission with the action
 <link linkend="org.osgi.service.cm.ConfigurationPermission.TARGET">ConfigurationPermission.TARGET</link> and a name that matches the
 configuration location. The name in the permission may contain wildcards (
 <code>'*'</code>) to match the location using the same substring matching rules as
 <link linkend="org.osgi.framework.Filter">Filter</link>.
 
 Bundles can always create, manipulate, and be updated from configurations
 that have a location that matches their bundle location.
 
 </para>
      <para>
 If a configuration's location is <code>null</code>, it is not yet bound to a
 location. It will become bound to the location of the first bundle that
 registers a <code>ManagedService</code> or <code>ManagedServiceFactory</code> object
 with the corresponding PID.
 </para>
      <para>
 The same <code>Configuration</code> object is used for configuring both a Managed
 Service Factory and a Managed Service. When it is important to differentiate
 between these two the term "factory configuration" is used.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="delete()" xml:id="org.osgi.service.cm.Configuration.delete--">
         <title>public void delete() throws IOException</title>
         <para role="description">
Delete this <code>Configuration</code> object.
 
 Removes this configuration object from the persistent store. Notify
 asynchronously the corresponding Managed Service or Managed Service
 Factory. A <link linkend="org.osgi.service.cm.ManagedService">ManagedService</link> object is notified by a call to its
 <code>updated</code> method with a <code>null</code> properties argument. A
 <link linkend="org.osgi.service.cm.ManagedServiceFactory">ManagedServiceFactory</link> object is notified by a call to its
 <code>deleted</code> method.
 
 </para>
         <para>
 Also notifies all Configuration Listeners with a
 <link linkend="org.osgi.service.cm.ConfigurationEvent.CM_DELETED">ConfigurationEvent.CM_DELETED</link> event.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– If delete fails.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this configuration has been deleted.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.cm.Configuration.equals-Object-">
         <title>public boolean equals(Object other)</title>
         <formalpara role="parameter">
            <title>other</title>
            <para>
               <code>Configuration</code> object to compare against</para>
         </formalpara>
         <para role="description">
Equality is defined to have equal PIDs
 
 Two Configuration objects are equal when their PIDs are equal.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if equal, <code>false</code> if not a
         <code>Configuration</code> object or one with a different PID.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getBundleLocation()" xml:id="org.osgi.service.cm.Configuration.getBundleLocation--">
         <title>public String getBundleLocation()</title>
         <para role="description">
Get the bundle location.
 
 Returns the bundle location or region to which this configuration is
 bound, or <code>null</code> if it is not yet bound to a bundle location or
 region. If the location starts with <code>?</code> then the configuration is
 delivered to all targets and not restricted to a single bundle.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>location to which this configuration is bound, or <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this configuration has been deleted.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– when the required permissions are not available   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Security</title>
            <para>
               <code>ConfigurationPermission[this.location,CONFIGURE]]
          </code>–  if            this.location is not <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title/>
            <para>
               <code>ConfigurationPermission["*",CONFIGURE]]
          </code>–  if this.location is            <code>null</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getChangeCount()" xml:id="org.osgi.service.cm.Configuration.getChangeCount--">
         <title>public long getChangeCount()</title>
         <para role="description">
Get the change count.
 
 Each Configuration must maintain a change counter that is incremented
 with a positive value every time the configuration is updated and its
 properties are stored. The counter must be incremented before the targets
 are updated and events are sent out.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A monotonically increasing value reflecting changes in this
         Configuration.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this configuration has been deleted.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFactoryPid()" xml:id="org.osgi.service.cm.Configuration.getFactoryPid--">
         <title>public String getFactoryPid()</title>
         <para role="description">
For a factory configuration return the PID of the corresponding Managed
 Service Factory, else return <code>null</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>factory PID or <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this configuration has been deleted.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getPid()" xml:id="org.osgi.service.cm.Configuration.getPid--">
         <title>public String getPid()</title>
         <para role="description">
Get the PID for this <code>Configuration</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the PID for this <code>Configuration</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– if this configuration has been deleted   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getProperties()" xml:id="org.osgi.service.cm.Configuration.getProperties--">
         <title>public Dictionary&lt;String,Object&gt; getProperties()</title>
         <para role="description">
Return the properties of this <code>Configuration</code> object.
 
 The <code>Dictionary</code> object returned is a private copy for the caller
 and may be changed without influencing the stored configuration. The keys
 in the returned dictionary are case insensitive and are always of type
 <code>String</code>.
 
 </para>
         <para>
 If called just after the configuration is created and before update has
 been called, this method returns <code>null</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A private copy of the properties for the caller or <code>null</code>.
         These properties must not contain the "service.bundleLocation"
         property. The value of this property may be obtained from the
         <link linkend="org.osgi.service.cm.Configuration.getBundleLocation--">getBundleLocation()</link> method.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this configuration has been deleted.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.cm.Configuration.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Hash code is based on PID.
 
 The hash code for two Configuration objects must be the same when the
 Configuration PID's are the same.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>hash code for this Configuration object</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setBundleLocation(String)" xml:id="org.osgi.service.cm.Configuration.setBundleLocation-String-">
         <title>public void setBundleLocation(String location)</title>
         <formalpara role="parameter">
            <title>location</title>
            <para>a location, region, or <code>null</code>
            </para>
         </formalpara>
         <para role="description">
Bind this <code>Configuration</code> object to the specified location.
 
 If the location parameter is <code>null</code> then the <code>Configuration</code>
 object will not be bound to a location/region. It will be set to the
 bundle's location before the first time a Managed Service/Managed Service
 Factory receives this <code>Configuration</code> object via the updated method
 and before any plugins are called. The bundle location or region will be
 set persistently.
 
 </para>
         <para>
 If the location starts with <code>?</code> then all targets registered with
 the given PID must be updated.
 
 </para>
         <para>
 If the location is changed then existing targets must be informed. If
 they can no longer see this configuration, the configuration must be
 deleted or updated with <code>null</code>. If this configuration becomes
 visible then they must be updated with this configuration.
 
 </para>
         <para>
 Also notifies all Configuration Listeners with a
 <link linkend="org.osgi.service.cm.ConfigurationEvent.CM_LOCATION_CHANGED">ConfigurationEvent.CM_LOCATION_CHANGED</link> event.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this configuration has been deleted.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– when the required permissions are not available   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– when the required permissions are not available   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Security</title>
            <para>
               <code>ConfigurationPermission[this.location,CONFIGURE]]
          </code>–  if            this.location is not <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title/>
            <para>
               <code>ConfigurationPermission[location,CONFIGURE]]
          </code>–  if location is not            <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title/>
            <para>
               <code>ConfigurationPermission["*",CONFIGURE]]
          </code>–  if this.location is            <code>null</code> or if location is <code>null</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="update(Dictionary)" xml:id="org.osgi.service.cm.Configuration.update-Dictionary-">
         <title>public void update(Dictionary&lt;String,?&gt; properties) throws IOException</title>
         <formalpara role="parameter">
            <title>properties</title>
            <para>the new set of properties for this configuration</para>
         </formalpara>
         <para role="description">
Update the properties of this <code>Configuration</code> object.
 
 Stores the properties in persistent storage after adding or overwriting
 the following properties:
 </para>
         <itemizedlist>
            <listitem>
               <para>"service.pid" : is set to be the PID of this configuration.</para>
            </listitem>
            <listitem>
               <para>"service.factoryPid" : if this is a factory configuration it is set
 to the factory PID else it is not set.</para>
            </listitem>
         </itemizedlist>
         <para>
 These system properties are all of type <code>String</code>.
 
 </para>
         <para>
 If the corresponding Managed Service/Managed Service Factory is
 registered, its updated method must be called asynchronously. Else, this
 callback is delayed until aforementioned registration occurs.
 
 </para>
         <para>
 Also notifies all Configuration Listeners with a
 <link linkend="org.osgi.service.cm.ConfigurationEvent.CM_UPDATED">ConfigurationEvent.CM_UPDATED</link> event.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if update cannot be made persistent   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the <code>Dictionary</code> object
         contains invalid configuration types or contains case variants of
         the same key name.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this configuration has been deleted.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="update()" xml:id="org.osgi.service.cm.Configuration.update--">
         <title>public void update() throws IOException</title>
         <para role="description">
Update the <code>Configuration</code> object with the current properties.
 
 Initiate the <code>updated</code> callback to the Managed Service or Managed
 Service Factory with the current properties asynchronously.
 
 </para>
         <para>
 This is the only way for a bundle that uses a Configuration Plugin
 service to initiate a callback. For example, when that bundle detects a
 change that requires an update of the Managed Service or Managed Service
 Factory via its <code>ConfigurationPlugin</code> object.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if update cannot access the properties in persistent
         storage   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this configuration has been deleted.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.cm.ConfigurationPlugin">ConfigurationPlugin</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ConfigurationAdmin" xml:id="org.osgi.service.cm.ConfigurationAdmin">
      <title>public interface ConfigurationAdmin</title>
      <para>
Service for administering configuration data.
 
 </para>
      <para>
 The main purpose of this interface is to store bundle configuration data
 persistently. This information is represented in <code>Configuration</code>
 objects. The actual configuration data is a <code>Dictionary</code> of properties
 inside a <code>Configuration</code> object.
 
 </para>
      <para>
 There are two principally different ways to manage configurations. First
 there is the concept of a Managed Service, where configuration data is
 uniquely associated with an object registered with the service registry.
 
 </para>
      <para>
 Next, there is the concept of a factory where the Configuration Admin service
 will maintain 0 or more <code>Configuration</code> objects for a Managed Service
 Factory that is registered with the Framework.
 
 </para>
      <para>
 The first concept is intended for configuration data about "things/services"
 whose existence is defined externally, e.g. a specific printer. Factories are
 intended for "things/services" that can be created any number of times, e.g.
 a configuration for a DHCP server for different networks.
 
 </para>
      <para>
 Bundles that require configuration should register a Managed Service or a
 Managed Service Factory in the service registry. A registration property
 named <code>service.pid</code> (persistent identifier or PID) must be used to
 identify this Managed Service or Managed Service Factory to the Configuration
 Admin service.
 
 </para>
      <para>
 When the ConfigurationAdmin detects the registration of a Managed Service, it
 checks its persistent storage for a configuration object whose
 <code>service.pid</code> property matches the PID service property (
 <code>service.pid</code>) of the Managed Service. If found, it calls
 <link linkend="org.osgi.service.cm.ManagedService.updated-Dictionary-">ManagedService.updated(Dictionary)</link> method with the new properties.
 The implementation of a Configuration Admin service must run these call-backs
 asynchronously to allow proper synchronization.
 
 </para>
      <para>
 When the Configuration Admin service detects a Managed Service Factory
 registration, it checks its storage for configuration objects whose
 <code>service.factoryPid</code> property matches the PID service property of the
 Managed Service Factory. For each such <code>Configuration</code> objects, it
 calls the <code>ManagedServiceFactory.updated</code> method asynchronously with
 the new properties. The calls to the <code>updated</code> method of a
 <code>ManagedServiceFactory</code> must be executed sequentially and not overlap
 in time.
 
 </para>
      <para>
 In general, bundles having permission to use the Configuration Admin service
 can only access and modify their own configuration information. Accessing or
 modifying the configuration of other bundles requires
 <code>ConfigurationPermission[location,CONFIGURE]</code>, where location is the
 configuration location.
 
 </para>
      <para>
         <code>Configuration</code> objects can be <emphasis>bound</emphasis> to a specified bundle
 location or to a region (configuration location starts with <code>?</code>). If a
 location is not set, it will be learned the first time a target is
 registered. If the location is learned this way, the Configuration Admin
 service must detect if the bundle corresponding to the location is
 uninstalled. If this occurs, the <code>Configuration</code> object must be
 unbound, that is its location field is set back to <code>null</code>.
 
 </para>
      <para>
 If target's bundle location matches the configuration location it is always
 updated.
 
 </para>
      <para>
 If the configuration location starts with <code>?</code>, that is, the location is
 a region, then the configuration must be delivered to all targets registered
 with the given PID. If security is on, the target bundle must have
 Configuration Permission[location,TARGET], where location matches given the
 configuration location with wildcards as in the Filter substring match. The
 security must be verified using the
 <link linkend="org.osgi.framework.Bundle.hasPermission-Object-">org.osgi.framework.Bundle.hasPermission(Object)</link> method on the target
 bundle.
 
 </para>
      <para>
 If a target cannot be updated because the location does not match or it has
 no permission and security is active then the Configuration Admin service
 must not do the normal callback.
 
 </para>
      <para>
 The method descriptions of this class refer to a concept of "the calling
 bundle". This is a loose way of referring to the bundle which obtained the
 Configuration Admin service from the service registry. Implementations of
 <code>ConfigurationAdmin</code> must use a
 <link linkend="org.osgi.framework.ServiceFactory">org.osgi.framework.ServiceFactory</link> to support this concept.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="field" xreflabel="SERVICE_BUNDLELOCATION" xml:id="org.osgi.service.cm.ConfigurationAdmin.SERVICE_BUNDLELOCATION">
         <title>public static final String SERVICE_BUNDLELOCATION = "service.bundleLocation"</title>
         <para>
Configuration property naming the location of the bundle that is
 associated with a <code>Configuration</code> object. This property can be
 searched for but must not appear in the configuration dictionary for
 security reason. The property's value is of type <code>String</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SERVICE_FACTORYPID" xml:id="org.osgi.service.cm.ConfigurationAdmin.SERVICE_FACTORYPID">
         <title>public static final String SERVICE_FACTORYPID = "service.factoryPid"</title>
         <para>
Configuration property naming the Factory PID in the configuration
 dictionary. The property's value is of type <code>String</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="createFactoryConfiguration(String)" xml:id="org.osgi.service.cm.ConfigurationAdmin.createFactoryConfiguration-String-">
         <title>public Configuration createFactoryConfiguration(String factoryPid) throws IOException</title>
         <formalpara role="parameter">
            <title>factoryPid</title>
            <para>PID of factory (not <code>null</code>).</para>
         </formalpara>
         <para role="description">
Create a new factory <code>Configuration</code> object with a new PID.
 
 The properties of the new <code>Configuration</code> object are <code>null</code>
 until the first time that its <link linkend="org.osgi.service.cm.Configuration.update-Dictionary-">Configuration.update(Dictionary)</link>
 method is called.
 
 </para>
         <para>
 It is not required that the <code>factoryPid</code> maps to a registered
 Managed Service Factory.
 
 </para>
         <para>
 The <code>Configuration</code> object is bound to the location of the calling
 bundle. It is possible that the same factoryPid has associated
 configurations that are bound to different bundles. Bundles should only
 see the factory configurations that they are bound to or have the proper
 permission.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new <code>Configuration</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if access to persistent storage fails.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="createFactoryConfiguration(String,String)" xml:id="org.osgi.service.cm.ConfigurationAdmin.createFactoryConfiguration-String-String-">
         <title>public Configuration createFactoryConfiguration(String factoryPid,String location) throws IOException</title>
         <formalpara role="parameter">
            <title>factoryPid</title>
            <para>PID of factory (not <code>null</code>).</para>
         </formalpara>
         <formalpara role="parameter">
            <title>location</title>
            <para>A bundle location string, or <code>null</code>.</para>
         </formalpara>
         <para role="description">
Create a new factory <code>Configuration</code> object with a new PID.
 
 The properties of the new <code>Configuration</code> object are <code>null</code>
 until the first time that its <link linkend="org.osgi.service.cm.Configuration.update-Dictionary-">Configuration.update(Dictionary)</link>
 method is called.
 
 </para>
         <para>
 It is not required that the <code>factoryPid</code> maps to a registered
 Managed Service Factory.
 
 </para>
         <para>
 The <code>Configuration</code> is bound to the location specified. If this
 location is <code>null</code> it will be bound to the location of the first
 bundle that registers a Managed Service Factory with a corresponding PID.
 It is possible that the same factoryPid has associated configurations
 that are bound to different bundles. Bundles should only see the factory
 configurations that they are bound to or have the proper permission.
 
 </para>
         <para>
 If the location starts with <code>?</code> then the configuration must be
 delivered to all targets with the corresponding PID.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a new <code>Configuration</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if access to persistent storage fails.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– when the require permissions are not available   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Security</title>
            <para>
               <code>ConfigurationPermission[location,CONFIGURE]]
          </code>–  if location is not            <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title/>
            <para>
               <code>ConfigurationPermission["*",CONFIGURE]]
          </code>–  if location is            <code>null</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getConfiguration(String,String)" xml:id="org.osgi.service.cm.ConfigurationAdmin.getConfiguration-String-String-">
         <title>public Configuration getConfiguration(String pid,String location) throws IOException</title>
         <formalpara role="parameter">
            <title>pid</title>
            <para>Persistent identifier.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>location</title>
            <para>The bundle location string, or <code>null</code>.</para>
         </formalpara>
         <para role="description">
Get an existing <code>Configuration</code> object from the persistent store,
 or create a new <code>Configuration</code> object.
 
 </para>
         <para>
 If a <code>Configuration</code> with this PID already exists in Configuration
 Admin service return it. The location parameter is ignored in this case
 though it is still used for a security check.
 
 </para>
         <para>
 Else, return a new <code>Configuration</code> object. This new object is bound
 to the location and the properties are set to <code>null</code>. If the
 location parameter is <code>null</code>, it will be set when a Managed Service
 with the corresponding PID is registered for the first time. If the
 location starts with <code>?</code> then the configuration is bound to all
 targets that are registered with the corresponding PID.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An existing or new <code>Configuration</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if access to persistent storage fails.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– when the require permissions are not available   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Security</title>
            <para>
               <code>ConfigurationPermission[*,CONFIGURE]]
          </code>–  if location is            <code>null</code> or if the returned configuration <code>c</code> already            exists and c.location is <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title/>
            <para>
               <code>ConfigurationPermission[location,CONFIGURE]]
          </code>–  if location is not            <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title/>
            <para>
               <code>ConfigurationPermission[c.location,CONFIGURE]]
          </code>–  if the returned            configuration <code>c</code> already exists and c.location is not            <code>null</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getConfiguration(String)" xml:id="org.osgi.service.cm.ConfigurationAdmin.getConfiguration-String-">
         <title>public Configuration getConfiguration(String pid) throws IOException</title>
         <formalpara role="parameter">
            <title>pid</title>
            <para>persistent identifier.</para>
         </formalpara>
         <para role="description">
Get an existing or new <code>Configuration</code> object from the persistent
 store.
 
 If the <code>Configuration</code> object for this PID does not exist, create a
 new <code>Configuration</code> object for that PID, where properties are
 <code>null</code>. Bind its location to the calling bundle's location.
 
 </para>
         <para>
 Otherwise, if the location of the existing <code>Configuration</code> object
 is <code>null</code>, set it to the calling bundle's location.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>an existing or new <code>Configuration</code> matching the PID.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if access to persistent storage fails.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– when the required permission is not available   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Security</title>
            <para>
               <code>ConfigurationPermission[c.location,CONFIGURE]]
          </code>–  If the            configuration <code>c</code> already exists and c.location is not            <code>null</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="listConfigurations(String)" xml:id="org.osgi.service.cm.ConfigurationAdmin.listConfigurations-String-">
         <title>public Configuration[] listConfigurations(String filter) throws IOException, InvalidSyntaxException</title>
         <formalpara role="parameter">
            <title>filter</title>
            <para>A filter string, or <code>null</code> to retrieve all
        <code>Configuration</code> objects.</para>
         </formalpara>
         <para role="description">
List the current <code>Configuration</code> objects which match the filter.
 
 </para>
         <para>
 Only <code>Configuration</code> objects with non- <code>null</code> properties are
 considered current. That is, <code>Configuration.getProperties()</code> is
 guaranteed not to return <code>null</code> for each of the returned
 <code>Configuration</code> objects.
 
 </para>
         <para>
 When there is no security on then all configurations can be returned. If
 security is on, the caller must have
 ConfigurationPermission[location,CONFIGURE].
 
 </para>
         <para>
 The syntax of the filter string is as defined in the <link linkend="org.osgi.framework.Filter">Filter</link>
 class. The filter can test any configuration properties including the
 following:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>service.pid</code> - the persistent identity</para>
            </listitem>
            <listitem>
               <para>
                  <code>service.factoryPid</code> - the factory PID, if applicable</para>
            </listitem>
            <listitem>
               <para>
                  <code>service.bundleLocation</code> - the bundle location</para>
            </listitem>
         </itemizedlist>
         <para>
 The filter can also be <code>null</code>, meaning that all
 <code>Configuration</code> objects should be returned.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>All matching <code>Configuration</code> objects, or <code>null</code> if
         there aren't any.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if access to persistent storage fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>InvalidSyntaxException</code>– if the filter string is invalid   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Security</title>
            <para>
               <code>ConfigurationPermission[c.location,CONFIGURE]]
          </code>–  Only            configurations <code>c</code> are returned for which the caller has            this permission</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ConfigurationEvent" xml:id="org.osgi.service.cm.ConfigurationEvent">
      <title>public class ConfigurationEvent</title>
      <para>
A Configuration Event.
 
 </para>
      <para>
         <code>ConfigurationEvent</code> objects are delivered to all registered
 <code>ConfigurationListener</code> service objects. ConfigurationEvents must be
 delivered in chronological order with respect to each listener.
 
 </para>
      <para>
 A type code is used to identify the type of event. The following event types
 are defined:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.ConfigurationEvent.CM_UPDATED">CM_UPDATED</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.ConfigurationEvent.CM_DELETED">CM_DELETED</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.cm.ConfigurationEvent.CM_LOCATION_CHANGED">CM_LOCATION_CHANGED</link>
            </para>
         </listitem>
      </itemizedlist>
      <para>
 Additional event types may be defined in the future.
 
 </para>
      <para>
 Security Considerations. <code>ConfigurationEvent</code> objects do not provide
 <code>Configuration</code> objects, so no sensitive configuration information is
 available from the event. If the listener wants to locate the
 <code>Configuration</code> object for the specified pid, it must use
 <code>ConfigurationAdmin</code>.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.cm.ConfigurationListener">ConfigurationListener</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.2</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="CM_DELETED" xml:id="org.osgi.service.cm.ConfigurationEvent.CM_DELETED">
         <title>public static final int CM_DELETED = 2</title>
         <para>
A <code>Configuration</code> has been deleted.
 
 </para>
         <para>
 This <code>ConfigurationEvent</code> type that indicates that a
 <code>Configuration</code> object has been deleted.
 
 An event is fired when a call to <link linkend="org.osgi.service.cm.Configuration.delete--">Configuration.delete()</link>
 successfully deletes a configuration.</para>
      </section>
      <section role="field" xreflabel="CM_LOCATION_CHANGED" xml:id="org.osgi.service.cm.ConfigurationEvent.CM_LOCATION_CHANGED">
         <title>public static final int CM_LOCATION_CHANGED = 3</title>
         <para>
The location of a <code>Configuration</code> has been changed.
 
 </para>
         <para>
 This <code>ConfigurationEvent</code> type that indicates that the location of
 a <code>Configuration</code> object has been changed.
 
 An event is fired when a call to
 <link linkend="org.osgi.service.cm.Configuration.setBundleLocation-String-">Configuration.setBundleLocation(String)</link> successfully changes the
 location.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.4</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="CM_UPDATED" xml:id="org.osgi.service.cm.ConfigurationEvent.CM_UPDATED">
         <title>public static final int CM_UPDATED = 1</title>
         <para>
A <code>Configuration</code> has been updated.
 
 </para>
         <para>
 This <code>ConfigurationEvent</code> type that indicates that a
 <code>Configuration</code> object has been updated with new properties.
 
 An event is fired when a call to <link linkend="org.osgi.service.cm.Configuration.update-Dictionary-">Configuration.update(Dictionary)</link>
 successfully changes a configuration.</para>
      </section>
      <section role="method" xreflabel="ConfigurationEvent(ServiceReference,int,String,String)" xml:id="org.osgi.service.cm.ConfigurationEvent.ConfigurationEvent-ServiceReference-int-String-String-">
         <title>public  ConfigurationEvent(ServiceReference&lt;ConfigurationAdmin&gt; reference,int type,String factoryPid,String pid)</title>
         <formalpara role="parameter">
            <title>reference</title>
            <para>The <code>ServiceReference</code> object of the Configuration
        Admin service that created this event.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>The event type. See <link linkend="org.osgi.service.cm.ConfigurationEvent.getType--">getType()</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>factoryPid</title>
            <para>The factory pid of the associated configuration if the
        target of the configuration is a ManagedServiceFactory. Otherwise
        <code>null</code> if the target of the configuration is a
        ManagedService.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>pid</title>
            <para>The pid of the associated configuration.</para>
         </formalpara>
         <para role="description">
Constructs a <code>ConfigurationEvent</code> object from the given
 <code>ServiceReference</code> object, event type, and pids.
   </para>
      </section>
      <section role="method" xreflabel="getFactoryPid()" xml:id="org.osgi.service.cm.ConfigurationEvent.getFactoryPid--">
         <title>public String getFactoryPid()</title>
         <para role="description">
Returns the factory pid of the associated configuration.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns the factory pid of the associated configuration if the
         target of the configuration is a ManagedServiceFactory. Otherwise
         <code>null</code> if the target of the configuration is a
         ManagedService.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getPid()" xml:id="org.osgi.service.cm.ConfigurationEvent.getPid--">
         <title>public String getPid()</title>
         <para role="description">
Returns the pid of the associated configuration.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns the pid of the associated configuration.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getReference()" xml:id="org.osgi.service.cm.ConfigurationEvent.getReference--">
         <title>public ServiceReference&lt;ConfigurationAdmin&gt; getReference()</title>
         <para role="description">
Return the <code>ServiceReference</code> object of the Configuration Admin
 service that created this event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <code>ServiceReference</code> object for the Configuration Admin
         service that created this event.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.cm.ConfigurationEvent.getType--">
         <title>public int getType()</title>
         <para role="description">
Return the type of this event.
 </para>
         <para>
 The type values are:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.cm.ConfigurationEvent.CM_UPDATED">CM_UPDATED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.cm.ConfigurationEvent.CM_DELETED">CM_DELETED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.cm.ConfigurationEvent.CM_LOCATION_CHANGED">CM_LOCATION_CHANGED</link>
               </para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The type of this event.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ConfigurationException" xml:id="org.osgi.service.cm.ConfigurationException">
      <title>public class ConfigurationException<?line-break?> extends Exception</title>
      <para>
An <code>Exception</code> class to inform the Configuration Admin service of
 problems with configuration data.
   </para>
      <section role="method" xreflabel="ConfigurationException(String,String)" xml:id="org.osgi.service.cm.ConfigurationException.ConfigurationException-String-String-">
         <title>public  ConfigurationException(String property,String reason)</title>
         <formalpara role="parameter">
            <title>property</title>
            <para>name of the property that caused the problem,
        <code>null</code> if no specific property was the cause</para>
         </formalpara>
         <formalpara role="parameter">
            <title>reason</title>
            <para>reason for failure</para>
         </formalpara>
         <para role="description">
Create a <code>ConfigurationException</code> object.
   </para>
      </section>
      <section role="method" xreflabel="ConfigurationException(String,String,Throwable)" xml:id="org.osgi.service.cm.ConfigurationException.ConfigurationException-String-String-Throwable-">
         <title>public  ConfigurationException(String property,String reason,Throwable cause)</title>
         <formalpara role="parameter">
            <title>property</title>
            <para>name of the property that caused the problem,
        <code>null</code> if no specific property was the cause</para>
         </formalpara>
         <formalpara role="parameter">
            <title>reason</title>
            <para>reason for failure</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception.</para>
         </formalpara>
         <para role="description">
Create a <code>ConfigurationException</code> object.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getCause()" xml:id="org.osgi.service.cm.ConfigurationException.getCause--">
         <title>public Throwable getCause()</title>
         <para role="description">
Returns the cause of this exception or <code>null</code> if no cause was set.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The cause of this exception or <code>null</code> if no cause was set.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getProperty()" xml:id="org.osgi.service.cm.ConfigurationException.getProperty--">
         <title>public String getProperty()</title>
         <para role="description">
Return the property name that caused the failure or null.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>name of property or null if no specific property caused the
         problem</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getReason()" xml:id="org.osgi.service.cm.ConfigurationException.getReason--">
         <title>public String getReason()</title>
         <para role="description">
Return the reason for this exception.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>reason of the failure</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="initCause(Throwable)" xml:id="org.osgi.service.cm.ConfigurationException.initCause-Throwable-">
         <title>public Throwable initCause(Throwable cause)</title>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception.</para>
         </formalpara>
         <para role="description">
Initializes the cause of this exception to the specified value.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>This exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified cause is this
         exception.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the cause of this exception has already
         been set.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="ConfigurationListener" xml:id="org.osgi.service.cm.ConfigurationListener">
      <title>public interface ConfigurationListener</title>
      <para>
Listener for Configuration Events. When a <code>ConfigurationEvent</code> is
 fired, it is asynchronously delivered to all <code>ConfigurationListener</code>s.
 
 </para>
      <para>
         <code>ConfigurationListener</code> objects are registered with the Framework
 service registry and are notified with a <code>ConfigurationEvent</code> object
 when an event is fired.
 </para>
      <para>
         <code>ConfigurationListener</code> objects can inspect the received
 <code>ConfigurationEvent</code> object to determine its type, the pid of the
 <code>Configuration</code> object with which it is associated, and the
 Configuration Admin service that fired the event.
 
 </para>
      <para>
 Security Considerations. Bundles wishing to monitor configuration events will
 require <code>ServicePermission[ConfigurationListener,REGISTER]</code> to register
 a <code>ConfigurationListener</code> service.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.2</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="configurationEvent(ConfigurationEvent)" xml:id="org.osgi.service.cm.ConfigurationListener.configurationEvent-ConfigurationEvent-">
         <title>public void configurationEvent(ConfigurationEvent event)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>The <code>ConfigurationEvent</code>.</para>
         </formalpara>
         <para role="description">
Receives notification of a Configuration that has changed.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="ConfigurationPermission" xml:id="org.osgi.service.cm.ConfigurationPermission">
      <title>public final class ConfigurationPermission<?line-break?> extends BasicPermission</title>
      <para>
Indicates a bundle's authority to configure bundles or be updated by
 Configuration Admin.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.2</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="CONFIGURE" xml:id="org.osgi.service.cm.ConfigurationPermission.CONFIGURE">
         <title>public static final String CONFIGURE = "configure"</title>
         <para>
Provides permission to create new configurations for other bundles as
 well as manipulate them. The action string "configure".
   </para>
      </section>
      <section role="field" xreflabel="TARGET" xml:id="org.osgi.service.cm.ConfigurationPermission.TARGET">
         <title>public static final String TARGET = "target"</title>
         <para>
The permission to be updated, that is, act as a Managed Service or
 Managed Service Factory. The action string "target".
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.4</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="ConfigurationPermission(String,String)" xml:id="org.osgi.service.cm.ConfigurationPermission.ConfigurationPermission-String-String-">
         <title>public  ConfigurationPermission(String name,String actions)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>Name of the permission. Wildcards (<code>'*'</code>) are allowed
        in the name. During <link linkend="org.osgi.service.cm.ConfigurationPermission.implies-Permission-">implies(Permission)</link>, the name is
        matched to the requested permission using the substring matching
        rules used by <link linkend="org.osgi.framework.Filter">Filter</link>s.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>Comma separated list of <link linkend="org.osgi.service.cm.ConfigurationPermission.CONFIGURE">CONFIGURE</link>,
        <link linkend="org.osgi.service.cm.ConfigurationPermission.TARGET">TARGET</link> (case insensitive).</para>
         </formalpara>
         <para role="description">
Create a new ConfigurationPermission.
   </para>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.cm.ConfigurationPermission.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>The object being compared for equality with this object.</para>
         </formalpara>
         <para role="description">
Determines the equality of two <code>ConfigurationPermission</code> objects.
 </para>
         <para>
 Two <code>ConfigurationPermission</code> objects are equal.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if <code>obj</code> is equivalent to this
         <code>ConfigurationPermission</code>; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getActions()" xml:id="org.osgi.service.cm.ConfigurationPermission.getActions--">
         <title>public String getActions()</title>
         <para role="description">
Returns the canonical string representation of the
 <code>ConfigurationPermission</code> actions.
 
 </para>
         <para>
 Always returns present <code>ConfigurationPermission</code> actions in the
 following order: "configure", "target"</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Canonical string representation of the
         <code>ConfigurationPermission</code> actions.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.cm.ConfigurationPermission.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code value for this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Hash code value for this object.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="implies(Permission)" xml:id="org.osgi.service.cm.ConfigurationPermission.implies-Permission-">
         <title>public boolean implies(Permission p)</title>
         <formalpara role="parameter">
            <title>p</title>
            <para>The target permission to check.</para>
         </formalpara>
         <para role="description">
Determines if a <code>ConfigurationPermission</code> object "implies" the
 specified permission.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the specified permission is implied by this
         object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="newPermissionCollection()" xml:id="org.osgi.service.cm.ConfigurationPermission.newPermissionCollection--">
         <title>public PermissionCollection newPermissionCollection()</title>
         <para role="description">
Returns a new <code>PermissionCollection</code> object suitable for storing
 <code>ConfigurationPermission</code>s.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new <code>PermissionCollection</code> object.</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="ConfigurationPlugin" xml:id="org.osgi.service.cm.ConfigurationPlugin">
      <title>public interface ConfigurationPlugin</title>
      <para>
A service interface for processing configuration dictionary before the
 update.
 
 </para>
      <para>
 A bundle registers a <code>ConfigurationPlugin</code> object in order to process
 configuration updates before they reach the Managed Service or Managed
 Service Factory. The Configuration Admin service will detect registrations of
 Configuration Plugin services and must call these services every time before
 it calls the <code>ManagedService</code> or <code>ManagedServiceFactory</code>
         <code>updated</code> method. The Configuration Plugin service thus has the
 opportunity to view and modify the properties before they are passed to the
 Managed Service or Managed Service Factory.
 
 </para>
      <para>
 Configuration Plugin (plugin) services have full read/write access to all
 configuration information that passes through them.
 
 </para>
      <para>
 The <code>Integer</code>
         <code>service.cmRanking</code> registration property may be
 specified. Not specifying this registration property, or setting it to
 something other than an <code>Integer</code>, is the same as setting it to the
 <code>Integer</code> zero. The <code>service.cmRanking</code> property determines the
 order in which plugins are invoked. Lower ranked plugins are called before
 higher ranked ones. In the event of more than one plugin having the same
 value of <code>service.cmRanking</code>, then the Configuration Admin service
 arbitrarily chooses the order in which they are called.
 
 </para>
      <para>
 By convention, plugins with <code>service.cmRanking &lt; 0</code> or
 <code>service.cmRanking &gt; 1000</code> should not make modifications to the
 properties.
 
 </para>
      <para>
 The Configuration Admin service has the right to hide properties from
 plugins, or to ignore some or all the changes that they make. This might be
 done for security reasons. Any such behavior is entirely implementation
 defined.
 
 </para>
      <para>
 A plugin may optionally specify a <code>cm.target</code> registration property
 whose value is the PID of the Managed Service or Managed Service Factory
 whose configuration updates the plugin is intended to intercept. The plugin
 will then only be called with configuration updates that are targeted at the
 Managed Service or Managed Service Factory with the specified PID. Omitting
 the <code>cm.target</code> registration property means that the plugin is called
 for all configuration updates.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="CM_RANKING" xml:id="org.osgi.service.cm.ConfigurationPlugin.CM_RANKING">
         <title>public static final String CM_RANKING = "service.cmRanking"</title>
         <para>
A service property to specify the order in which plugins are invoked.
 
 This property contains an <code>Integer</code> ranking of the plugin. Not
 specifying this registration property, or setting it to something other
 than an <code>Integer</code>, is the same as setting it to the <code>Integer</code>
 zero. This property determines the order in which plugins are invoked.
 Lower ranked plugins are called before higher ranked ones.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="CM_TARGET" xml:id="org.osgi.service.cm.ConfigurationPlugin.CM_TARGET">
         <title>public static final String CM_TARGET = "cm.target"</title>
         <para>
A service property to limit the Managed Service or Managed Service
 Factory configuration dictionaries a Configuration Plugin service
 receives.
 
 This property contains a <code>String[]</code> of PIDs. A Configuration Admin
 service must call a Configuration Plugin service only when this property
 is not set, or the target service's PID is listed in this property.
   </para>
      </section>
      <section role="method" xreflabel="modifyConfiguration(ServiceReference,Dictionary)" xml:id="org.osgi.service.cm.ConfigurationPlugin.modifyConfiguration-ServiceReference-Dictionary-">
         <title>public void modifyConfiguration(ServiceReference&lt;?&gt; reference,Dictionary&lt;String,Object&gt; properties)</title>
         <formalpara role="parameter">
            <title>reference</title>
            <para>reference to the Managed Service or Managed Service
        Factory</para>
         </formalpara>
         <formalpara role="parameter">
            <title>properties</title>
            <para>The configuration properties. This argument must not
        contain the "service.bundleLocation" property. The value of this
        property may be obtained from the
        <code>Configuration.getBundleLocation</code> method.</para>
         </formalpara>
         <para role="description">
View and possibly modify the a set of configuration properties before
 they are sent to the Managed Service or the Managed Service Factory. The
 Configuration Plugin services are called in increasing order of their
 <code>service.cmRanking</code> property. If this property is undefined or is a
 non- <code>Integer</code> type, 0 is used.
 
 </para>
         <para>
 This method should not modify the properties unless the
 <code>service.cmRanking</code> of this plugin is in the range
 <code>0 &lt;= service.cmRanking &lt;= 1000</code>.
 </para>
         <para>
 If this method throws any <code>Exception</code>, the Configuration Admin
 service must catch it and should log it.
 
 </para>
         <para>
 A Configuration Plugin will only be called for properties from
 configurations that have a location for which the Configuration Plugin
 has permission when security is active. When security is not active, no
 filtering is done.</para>
      </section>
   </section>
   <section role="class" xreflabel="ManagedService" xml:id="org.osgi.service.cm.ManagedService">
      <title>public interface ManagedService</title>
      <para>
A service that can receive configuration data from a Configuration Admin
 service.
 
 </para>
      <para>
 A Managed Service is a service that needs configuration data. Such an object
 should be registered with the Framework registry with the <code>service.pid</code>
 property set to some unique identifier called a PID.
 
 </para>
      <para>
 If the Configuration Admin service has a <code>Configuration</code> object
 corresponding to this PID, it will callback the <code>updated()</code> method of
 the <code>ManagedService</code> object, passing the properties of that
 <code>Configuration</code> object.
 
 </para>
      <para>
 If it has no such <code>Configuration</code> object, then it calls back with a
 <code>null</code> properties argument. Registering a Managed Service will always
 result in a callback to the <code>updated()</code> method provided the
 Configuration Admin service is, or becomes active. This callback must always
 be done asynchronously.
 
 </para>
      <para>
 Else, every time that either of the <code>updated()</code> methods is called on
 that <code>Configuration</code> object, the <code>ManagedService.updated()</code>
 method with the new properties is called. If the <code>delete()</code> method is
 called on that <code>Configuration</code> object, <code>ManagedService.updated()</code>
 is called with a <code>null</code> for the properties parameter. All these
 callbacks must be done asynchronously.
 
 </para>
      <para>
 The following example shows the code of a serial port that will create a port
 depending on configuration information.
 
 </para>
      <programlisting> 
   class SerialPort implements ManagedService {
  
     ServiceRegistration registration;
     Hashtable configuration;
     CommPortIdentifier id;
  
     synchronized void open(CommPortIdentifier id,
     BundleContext context) {
       this.id = id;
       registration = context.registerService(
         ManagedService.class.getName(),
         this,
         getDefaults()
       );
     }
  
     Hashtable getDefaults() {
       Hashtable defaults = new Hashtable();
       defaults.put( "port", id.getName() );
       defaults.put( "product", "unknown" );
       defaults.put( "baud", "9600" );
       defaults.put( Constants.SERVICE_PID,
         "com.acme.serialport." + id.getName() );
       return defaults;
     }
  
     public synchronized void updated(
       Dictionary configuration  ) {
       if ( configuration == null )
         registration.setProperties( getDefaults() );
       else {
         setSpeed( configuration.get("baud") );
         registration.setProperties( configuration );
       }
     }
     ...
   }</programlisting>
      <para>
 As a convention, it is recommended that when a Managed Service is updated, it
 should copy all the properties it does not recognize into the service
 registration properties. This will allow the Configuration Admin service to
 set properties on services which can then be used by other applications.
 
 </para>
      <para>
 Normally, a single Managed Service for a given PID is given the configuration
 dictionary, this is the configuration that is bound to the location of the
 registering bundle. However, when security is on, a Managed Service can have
 Configuration Permission to also be updated for other locations.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="updated(Dictionary)" xml:id="org.osgi.service.cm.ManagedService.updated-Dictionary-">
         <title>public void updated(Dictionary&lt;String,?&gt; properties) throws ConfigurationException</title>
         <formalpara role="parameter">
            <title>properties</title>
            <para>A copy of the Configuration properties, or <code>null</code>
        . This argument must not contain the "service.bundleLocation"
        property. The value of this property may be obtained from the
        <code>Configuration.getBundleLocation</code> method.</para>
         </formalpara>
         <para role="description">
Update the configuration for a Managed Service.
 
 </para>
         <para>
 When the implementation of <code>updated(Dictionary)</code> detects any kind
 of error in the configuration properties, it should create a new
 <code>ConfigurationException</code> which describes the problem. This can
 allow a management system to provide useful information to a human
 administrator.
 
 </para>
         <para>
 If this method throws any other <code>Exception</code>, the Configuration
 Admin service must catch it and should log it.
 </para>
         <para>
 The Configuration Admin service must call this method asynchronously with
 the method that initiated the callback. This implies that implementors of
 Managed Service can be assured that the callback will not take place
 during registration when they execute the registration in a synchronized
 method.
 
 </para>
         <para>
 If the location allows multiple managed services to be called back for a
 single configuration then the callbacks must occur in service ranking
 order. Changes in the location must be reflected by deleting the
 configuration if the configuration is no longer visible and updating when
 it becomes visible.
 
 </para>
         <para>
 If no configuration exists for the corresponding PID, or the bundle has
 no access to the configuration, then the bundle must be called back with
 a <code>null</code> to signal that CM is active but there is no data.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ConfigurationException</code>– when the update fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Security</title>
            <para>
               <code>ConfigurationPermission[c.location,TARGET]]
          </code>–  Required by the            bundle that registered this service</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ManagedServiceFactory" xml:id="org.osgi.service.cm.ManagedServiceFactory">
      <title>public interface ManagedServiceFactory</title>
      <para>
Manage multiple service instances.
 
 Bundles registering this interface are giving the Configuration Admin service
 the ability to create and configure a number of instances of a service that
 the implementing bundle can provide. For example, a bundle implementing a
 DHCP server could be instantiated multiple times for different interfaces
 using a factory.
 
 </para>
      <para>
 Each of these <emphasis>service instances </emphasis> is represented, in the persistent
 storage of the Configuration Admin service, by a factory
 <code>Configuration</code> object that has a PID. When such a
 <code>Configuration</code> is updated, the Configuration Admin service calls the
 <code>ManagedServiceFactory</code> updated method with the new properties. When
 <code>updated</code> is called with a new PID, the Managed Service Factory should
 create a new factory instance based on these configuration properties. When
 called with a PID that it has seen before, it should update that existing
 service instance with the new configuration information.
 
 </para>
      <para>
 In general it is expected that the implementation of this interface will
 maintain a data structure that maps PIDs to the factory instances that it has
 created. The semantics of a factory instance are defined by the Managed
 Service Factory. However, if the factory instance is registered as a service
 object with the service registry, its PID should match the PID of the
 corresponding <code>Configuration</code> object (but it should <emphasis role="strong">not </emphasis> be
 registered as a Managed Service!).
 
 </para>
      <para>
 An example that demonstrates the use of a factory. It will create serial
 ports under command of the Configuration Admin service.
 
 </para>
      <programlisting> 
   class SerialPortFactory
     implements ManagedServiceFactory {
     ServiceRegistration registration;
     Hashtable ports;
     void start(BundleContext context) {
       Hashtable properties = new Hashtable();
       properties.put( Constants.SERVICE_PID,
         "com.acme.serialportfactory" );
       registration = context.registerService(
         ManagedServiceFactory.class.getName(),
         this,
         properties
       );
     }
     public void updated( String pid,
       Dictionary properties  ) {
       String portName = (String) properties.get("port");
       SerialPortService port =
         (SerialPort) ports.get( pid );
       if ( port == null ) {
         port = new SerialPortService();
         ports.put( pid, port );
         port.open();
       }
       if ( port.getPortName().equals(portName) )
         return;
       port.setPortName( portName );
     }
     public void deleted( String pid ) {
       SerialPortService port =
         (SerialPort) ports.get( pid );
       port.close();
       ports.remove( pid );
     }
     ...
   }</programlisting>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="deleted(String)" xml:id="org.osgi.service.cm.ManagedServiceFactory.deleted-String-">
         <title>public void deleted(String pid)</title>
         <formalpara role="parameter">
            <title>pid</title>
            <para>the PID of the service to be removed</para>
         </formalpara>
         <para role="description">
Remove a factory instance.
 
 Remove the factory instance associated with the PID. If the instance was
 registered with the service registry, it should be unregistered. The
 Configuration Admin must call deleted for each instance it received in
 <link linkend="org.osgi.service.cm.ManagedServiceFactory.updated-String-Dictionary-">updated(String, Dictionary)</link>.
 
 </para>
         <para>
 If this method throws any <code>Exception</code>, the Configuration Admin
 service must catch it and should log it.
 </para>
         <para>
 The Configuration Admin service must call this method asynchronously.</para>
      </section>
      <section role="method" xreflabel="getName()" xml:id="org.osgi.service.cm.ManagedServiceFactory.getName--">
         <title>public String getName()</title>
         <para role="description">
Return a descriptive name of this factory.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the name for the factory, which might be localized</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="updated(String,Dictionary)" xml:id="org.osgi.service.cm.ManagedServiceFactory.updated-String-Dictionary-">
         <title>public void updated(String pid,Dictionary&lt;String,?&gt; properties) throws ConfigurationException</title>
         <formalpara role="parameter">
            <title>pid</title>
            <para>The PID for this configuration.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>properties</title>
            <para>A copy of the configuration properties. This argument
        must not contain the service.bundleLocation" property. The value
        of this property may be obtained from the
        <code>Configuration.getBundleLocation</code> method.</para>
         </formalpara>
         <para role="description">
Create a new instance, or update the configuration of an existing
 instance.
 
 If the PID of the <code>Configuration</code> object is new for the Managed
 Service Factory, then create a new factory instance, using the
 configuration <code>properties</code> provided. Else, update the service
 instance with the provided <code>properties</code>.
 
 </para>
         <para>
 If the factory instance is registered with the Framework, then the
 configuration <code>properties</code> should be copied to its registry
 properties. This is not mandatory and security sensitive properties
 should obviously not be copied.
 
 </para>
         <para>
 If this method throws any <code>Exception</code>, the Configuration Admin
 service must catch it and should log it.
 
 </para>
         <para>
 When the implementation of updated detects any kind of error in the
 configuration properties, it should create a new
 <link linkend="org.osgi.service.cm.ConfigurationException">ConfigurationException</link> which describes the problem.
 
 </para>
         <para>
 The Configuration Admin service must call this method asynchronously.
 This implies that implementors of the <code>ManagedServiceFactory</code> class
 can be assured that the callback will not take place during registration
 when they execute the registration in a synchronized method.
 
 </para>
         <para>
 If the security allows multiple managed service factories to be called
 back for a single configuration then the callbacks must occur in service
 ranking order.
 
 </para>
         <para>
 It is valid to create multiple factory instances that are bound to
 different locations. Managed Service Factory services must only be
 updated with configurations that are bound to their location or that
 start with the <code>?</code> prefix and for which they have permission.
 Changes in the location must be reflected by deleting the corresponding
 configuration if the configuration is no longer visible or updating when
 it becomes visible.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ConfigurationException</code>– when the configuration properties are
         invalid.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Security</title>
            <para>
               <code>ConfigurationPermission[c.location,TARGET]]
          </code>–  Required by the            bundle that registered this service</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="SynchronousConfigurationListener" xml:id="org.osgi.service.cm.SynchronousConfigurationListener">
      <title>public interface SynchronousConfigurationListener<?line-break?> extends ConfigurationListener</title>
      <para>
Synchronous Listener for Configuration Events. When a
 <code>ConfigurationEvent</code> is fired, it is synchronously delivered to all
 <code>SynchronousConfigurationListener</code>s.
 
 </para>
      <para>
         <code>SynchronousConfigurationListener</code> objects are registered with the
 Framework service registry and are synchronously notified with a
 <code>ConfigurationEvent</code> object when an event is fired.
 </para>
      <para>
         <code>SynchronousConfigurationListener</code> objects can inspect the received
 <code>ConfigurationEvent</code> object to determine its type, the PID of the
 <code>Configuration</code> object with which it is associated, and the
 Configuration Admin service that fired the event.
 
 </para>
      <para>
 Security Considerations. Bundles wishing to synchronously monitor
 configuration events will require
 <code>ServicePermission[SynchronousConfigurationListener,REGISTER]</code> to
 register a <code>SynchronousConfigurationListener</code> service.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.5</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
   </section>
</section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="105" revision="$Id: eaa505902a8a3387dcf3dec89d3421587fe458f5 $" version="5" xml:id="service.metatype" xml:base="../105/service.metatype.xml">
  <title>Metatype Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.metatype-version" linkend="org.osgi.service.metatype"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The Metatype specification defines interfaces that allow bundle
    developers to describe attribute types in a computer readable form using
    so-called <emphasis>metadata</emphasis>.</para>

    <para>The purpose of this specification is to allow services to specify
    the type information of data that they can use as arguments. The data is
    based on <emphasis>attributes</emphasis>, which are key/value pairs like
    properties.</para>

    <para>A designer in a type-safe language like Java is often confronted
    with the choice of using the language constructs to exchange data or using
    a technique based on attributes/properties that are based on key/value
    pairs. Attributes provide an escape from the rigid type-safety
    requirements of modern programming languages.</para>

    <para>Type-safety works very well for software development environments in
    which multiple programmers work together on large applications or systems,
    but often lacks the flexibility needed to receive structured data from the
    outside world.</para>

    <para>The attribute paradigm has several characteristics that make this
    approach suitable when data needs to be communicated between different
    entities which "speak" different languages. Attributes are uncomplicated,
    resilient to change, and allow the receiver to dynamically adapt to
    different types of data.</para>

    <para>As an example, the OSGi framework Specifications define several
    attribute types which are used in a Framework implementation, but which
    are also used and referenced by other OSGi specifications such as the
    <xref linkend="service.cm"/>. A Configuration Admin service implementation
    deploys attributes (key/value pairs) as configuration properties.</para>

    <para>The Meta Type Service provides a unified access point to the Meta
    Type information that is associated with bundles. This Meta Type
    information can be defined by an XML resource in a bundle
    (<code>OSGI-INF/metatype</code> directories must be scanned for any XML
    resources), it can come from the Meta Type Provider service, or it can be
    obtained from Managed Service or Managed Service Factory services.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Conceptual model</emphasis> - The specification must
          have a conceptual model for how classes and attributes are
          organized.</para>
        </listitem>

        <listitem>
          <para><emphasis>Standards</emphasis> - The specification should be
          aligned with appropriate standards, and explained in situations
          where the specification is not aligned with, or cannot be mapped to,
          standards.</para>
        </listitem>

        <listitem>
          <para><emphasis>Remote Management</emphasis> - Remote management
          should be taken into account.</para>
        </listitem>

        <listitem>
          <para><emphasis>Size</emphasis> - Minimal overhead in size for a
          bundle using this specification is required.</para>
        </listitem>

        <listitem>
          <para><emphasis>Localization</emphasis> - It must be possible to use
          this specification with different languages at the same time. This
          ability allows servlets to serve information in the language
          selected in the browser.</para>
        </listitem>

        <listitem>
          <para><emphasis>Type information</emphasis> - The definition of an
          attribute should contain the name (if it is required), the
          cardinality, a label, a description, labels for enumerated values,
          and the Java class that should be used for the values.</para>
        </listitem>

        <listitem>
          <para><emphasis>Validation</emphasis> - It should be possible to
          validate the values of the attributes.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i1504332">
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Meta Type Service</emphasis> - A service that
          provides a unified access point for meta type information.</para>
        </listitem>

        <listitem>
          <para><emphasis>Attribute</emphasis> - A key/value pair.</para>
        </listitem>

        <listitem>
          <para><emphasis>PID</emphasis> - A unique persistent ID, defined in
          configuration management.</para>
        </listitem>

        <listitem>
          <para><emphasis>Attribute Definition</emphasis> - Defines a
          description, name, help text, and type information of an
          attribute.</para>
        </listitem>

        <listitem>
          <para><emphasis>Object Class Definition</emphasis> - Defines the
          type of a datum. It contains a description and name of the type plus
          a set of <code>AttributeDefinition</code> objects.</para>
        </listitem>

        <listitem>
          <para><emphasis>Meta Type Provider</emphasis> - Provides access to
          the object classes that are available for this object. Access uses
          the PID and a locale to find the best
          <code>ObjectClassDefinition</code> object.</para>
        </listitem>

        <listitem>
          <para><emphasis>Meta Type Information</emphasis> - Provides meta
          type information for a bundle.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>Class Diagram Meta Type Service,
        org.osgi.service.metatype</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.800in" contentwidth="6.500in" fileref="metatype-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Operation</title>

      <para>The Meta Type service defines a rich dynamic typing system for
      properties. The purpose of the type system is to allow reasonable User
      Interfaces to be constructed dynamically.</para>

      <para>The type information is normally carried by the bundles
      themselves. Either by implementing the <code>MetaTypeProvider</code>
      interface on the Managed Service or Managed Service Factory, by carrying
      one or more XML resources that define a number of Meta Types in the
      <code>OSGI-INF/metatype</code> directories, or registering a Meta Type
      Provider as a service. Additionally, a Meta Type service could have
      other sources that are not defined in this specification.</para>

      <para>The Meta Type Service provides unified access to Meta Types that
      are carried by the resident bundles. The Meta Type Service collects this
      information from the bundles and provides uniform access to it. A client
      can requests the Meta Type Information associated with a particular
      bundle. The <code>MetaTypeInformation</code> object provides a list of
      <code>ObjectClassDefinition</code> objects for a bundle. These objects
      define all the information for a specific <emphasis>object
      class</emphasis>. An object class is a some descriptive information and
      a set of named attributes (which are key/value pairs).</para>

      <para>Access to Object Class Definitions is qualified by a locale and a
      Persistent IDentity (PID). This specification does not specify what the
      PID means. One application is OSGi Configuration Management where a PID
      is used by the Managed Service and Managed Service Factory services. In
      general, a PID should be regarded as the name of a variable where an
      Object Class Definition defines its type.</para>
    </section>
  </section>

  <section>
    <title>Attributes Model</title>

    <para xml:id="i1279629">The Framework uses the LDAP filter syntax for
    searching the Framework registry. The usage of the attributes in this
    specification and the Framework specification closely resemble the LDAP
    attribute model. Therefore, the names used in this specification have been
    aligned with LDAP. Consequently, the interfaces which are defined by this
    Specification are:</para>

    <itemizedlist>
      <listitem>
        <para><code>AttributeDefinition</code></para>
      </listitem>

      <listitem>
        <para><code>ObjectClassDefinition</code></para>
      </listitem>

      <listitem>
        <para><code>MetaTypeProvider</code></para>
      </listitem>
    </itemizedlist>

    <para>These names correspond to the LDAP attribute model. For further
    information on ASN.1-defined attributes and X.500 object classes and
    attributes, see <xref linkend="i1215870"/>.</para>

    <para>The LDAP attribute model assumes a global name-space for attributes,
    and object classes consist of a number of attributes. So, if an object
    class inherits the same attribute from different parents, only one copy of
    the attribute must become part of the object class definition. This
    name-space implies that a given attribute, for example <code>cn</code>,
    should <emphasis>always</emphasis> be the common name and the type must
    always be a <code>String</code>. An attribute <code>cn</code> cannot be an
    <code>Integer</code> in another object class definition. In this respect,
    the OSGi approach towards attribute definitions is comparable with the
    LDAP attribute model.</para>
  </section>

  <section>
    <title>Object Class Definition</title>

    <para>The <code>ObjectClassDefinition</code> interface is used to group
    the attributes which are defined in <code>AttributeDefinition</code>
    objects.</para>

    <para xml:id="i1279638">An <code>ObjectClassDefinition</code> object
    contains the information about the overall set of attributes and has the
    following elements:</para>

    <itemizedlist>
      <listitem>
        <para>A name which can be returned in different locales.</para>
      </listitem>

      <listitem>
        <para>A global name-space in the registry, which is the same condition
        as LDAP/X.500 object classes. In these standards the OSI Object
        Identifier (OID) is used to uniquely identify object classes. If such
        an OID exists, (which can be requested at several standard
        organizations, and many companies already have a node in the tree) it
        can be returned here. Otherwise, a unique id should be returned. This
        id can be a Java class name (reverse domain name) or can be generated
        with a GUID algorithm. All LDAP-defined object classes already have an
        associated OID. It is strongly advised to define the object classes
        from existing LDAP schemes which provide many preexisting OIDs. Many
        such schemes exist ranging from postal addresses to DHCP
        parameters.</para>
      </listitem>

      <listitem>
        <para>A human-readable description of the class.</para>
      </listitem>

      <listitem>
        <para>A list of attribute definitions which can be filtered as
        required, or optional. Note that in X.500 the mandatory or required
        status of an attribute is part of the object class definition and not
        of the attribute definition.</para>
      </listitem>

      <listitem>
        <para>An icon, in different sizes.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="i1504333">
    <title>Attribute Definition</title>

    <para>The <code>AttributeDefinition</code> interface provides the means to
    describe the data type of attributes.</para>

    <para>The <code>AttributeDefinition</code> interface defines the following
    elements:</para>

    <itemizedlist>
      <listitem>
        <para>Defined names (final ints) for the data types as restricted in
        the Framework for the attributes, called the syntax in OSI terms,
        which can be obtained with the <code>getType()</code> method.</para>
      </listitem>

      <listitem>
        <para><code>AttributeDefinition</code> objects should use an ID that
        is similar to the OID as described in the ID field for
        <code>ObjectClassDefinition</code>.</para>
      </listitem>

      <listitem>
        <para>A localized name intended to be used in user interfaces.</para>
      </listitem>

      <listitem>
        <para>A localized description that defines the semantics of the
        attribute and possible constraints, which should be usable for
        tooltips.</para>
      </listitem>

      <listitem>
        <para>An indication if this attribute should be stored as a unique
        value, a <code>List</code>, or an array of values, as well as the
        maximum cardinality of the type.</para>
      </listitem>

      <listitem>
        <para>The data type, as limited by the Framework service registry
        attribute types.</para>
      </listitem>

      <listitem>
        <para>A validation function to verify if a possible value is
        correct.</para>
      </listitem>

      <listitem>
        <para>A list of values and a list of localized labels. Intended for
        popup menus in GUIs, allowing the user to choose from a set.</para>
      </listitem>

      <listitem>
        <para>A default value (String[]). The return depends on the following
        cases:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>not specified</emphasis> - Return
            <code>null</code> if this attribute is not specified.</para>
          </listitem>

          <listitem>
            <para><emphasis>cardinality = 0</emphasis> - Return an array with
            one element.</para>
          </listitem>

          <listitem>
            <para><emphasis>otherwise</emphasis> - Return an array with less
            or equal than the absolute value of cardinality, possibly empty if
            the value is an empty string.</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="i1450077">
    <title>Meta Type Service</title>

    <para>The Meta Type Service provides unified access to Meta Type
    information that is associated with a Bundle. It can get this information
    through the following means:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Meta Type Resource</emphasis> - A bundle can provide
        one or more XML resources that are contained in its JAR file. These
        resources contain an XML definition of meta types as well as to what
        PIDs these Meta Types apply. These XML resources must reside in the
        <code>OSGI-INF/metatype</code> directories of the bundle (including
        any fragments).</para>
      </listitem>

      <listitem>
        <para><emphasis>Managed Service [Factory] objects</emphasis> - As
        defined in the configuration management specification,
        <code>ManagedService</code> and <code>ManagedServiceFactory</code>
        service objects can optionally implement the
        <code>MetaTypeProvider</code> interface. The Meta Type Service will
        only search for <code>ManagedService</code> and
        <code>ManagedServiceFactory</code> service objects that implement
        <code>MetaTypeProvider</code> if no meta type resources are found in
        the bundle.</para>
      </listitem>

      <listitem>
        <para><emphasis>Meta Type Provider service</emphasis> - Bundles can
        register Meta Type Provider services to dynamically provide meta types
        for PIDs and factory PIDs.</para>
      </listitem>
    </itemizedlist>

    <figure pgwide="1" xml:id="i1386202">
      <title>Sources for Meta Types</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.619in" contentwidth="5.470in" fileref="metatype-sources.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>This model is depicted in <xref linkend="i1386202"/>.</para>

    <para>The Meta Type Service can therefore be used to retrieve meta type
    information for bundles which contain Meta Type resources or which provide
    <code>MetaTypeProvider</code> objects and/or services. If multiple sources
    define the same Object Class Definition, the Meta Type service must select
    which source to use. Meta Type Provider services must take precedence over
    Managed Service [Factory] objects implementing
    <code>MetaTypeProvider</code> or Meta Type Resources.</para>

    <para>The <code>MetaTypeService</code> interface has a single
    method:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.metatype.MetaTypeService.getMetaTypeInformation-Bundle-" xrefstyle="hyperlink"/> - Given a bundle, it must return the Meta Type
        Information for that bundle, even if there is no meta type information
        available at the moment of the call.</para>
      </listitem>
    </itemizedlist>

    <para>The returned <code>MetaTypeInformation</code> object maintains a map
    of PID to <code>ObjectClassDefinition</code> objects. The map is keyed by
    locale and PID. The list of maintained PIDs is available from the
    <code>MetaTypeInformation</code> object with the following methods:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.metatype.MetaTypeInformation.getPids--" xrefstyle="hyperlink"/> - PIDs for which Meta Types are
        available.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.metatype.MetaTypeInformation.getFactoryPids--" xrefstyle="hyperlink"/> - PIDs associated with Managed Service Factory
        services.</para>
      </listitem>
    </itemizedlist>

    <para>These methods and their interaction with the Meta Type resource are
    described in <xref linkend="i1492258"/>.</para>

    <para>The <code>MetaTypeInformation</code> interface extends the
    <code>MetaTypeProvider</code> interface. The <code>MetaTypeProvider</code>
    interface is used to access meta type information. It supports locale
    dependent information so that the text used in
    <code>AttributeDefinition</code> and <code>ObjectClassDefinition</code>
    objects can be adapted to different locales.</para>

    <para>Which locales are supported by the <code>MetaTypeProvider</code>
    object are defined by the implementer or the meta type resources. The list
    of available locales can be obtained from the
    <code>MetaTypeProvider</code> object.</para>

    <para>The MetaTypeProvider interface provides the following
    methods:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.metatype.MetaTypeProvider.getObjectClassDefinition-String-String-" xrefstyle="hyperlink"/> - Get access to an ObjectClassDefinition
        object for the given PID. The second parameter defines the
        locale.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.metatype.MetaTypeProvider.getLocales--" xrefstyle="hyperlink"/> - List the locales that are available.</para>
      </listitem>
    </itemizedlist>

    <para>Locale objects are represented in <code>String</code> objects
    because not all profiles support Locale. The <code>String</code> holds the
    standard Locale presentation of:</para>

    <programlisting>locale = language ( '_' country ( '_' variation))
language ::= &lt; defined by ISO 3166 &gt;
country  ::= &lt; defined by ISO 639 &gt;</programlisting>

    <para>For example, <code>en</code>, <code>nl_BE</code>,
    <code>en_CA_posix</code> are valid locales. The use of <code>null</code>
    for locale indicates that <code>java.util.Locale.getDefault()</code> must
    be used.</para>

    <para>The Meta Type Service implementation class is the main class. It
    registers the <code>org.osgi.service.metatype.MetaTypeService</code>
    service and has a method to get a <code>MetaTypeInformation</code> object
    for a bundle.</para>

    <para>Following is some sample code demonstrating how to print out all the
    Object Class Definitions and Attribute Definitions contained in a
    bundle:</para>

    <programlisting>void printMetaTypes( MetaTypeService mts,Bundle b ) {
    MetaTypeInformation mti = 
        mts.getMetaTypeInformation(b);
    String [] pids = mti.getPids();
    String [] locales = mti.getLocales();

    for ( int locale = 0; locale&lt;locales.length; locale++) {
        System.out.println("Locale " + locales[locale] );
        for (int i=0; i&lt; pids.length; i++) {
            ObjectClassDefinition ocd = 
                mti.getObjectClassDefinition(pids[i], null);
            AttributeDefinition[] ads = 
                ocd.getAttributeDefinitions(
                    ObjectClassDefinition.ALL);
            for (int j=0; j&lt; ads.length; j++) {
                System.out.println("OCD="+ocd.getName()
                    + "AD="+ads[j].getName());
            }
        }
    }
}</programlisting>
  </section>

  <section xml:id="i1550143">
    <title>Meta Type Provider Service</title>

    <para>A Meta Type Provider service allows third party contributions to the
    internal Object Class Definition repository. A Meta Type Provider can
    contribute multiple PIDs, both factory and singleton PIDs. A Meta Type
    Provider service must register with both or one of the following service
    properties:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.metatype.MetaTypeProvider.METATYPE_PID" xrefstyle="hyperlink"/> - (<code>String+</code>) Provides a list of
        PIDs that this Meta Type Provider can provide Object Class Definitions
        for. The listed PIDs are intended to be used as normal singleton PIDs
        used by Managed Services.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.metatype.MetaTypeProvider.METATYPE_FACTORY_PID" xrefstyle="hyperlink"/> - (<code>String+</code>) Provides a list of
        factory PIDs that this Meta Type Provider can provide Object Class
        Definitions for. The listed PIDs are intended to be used as factory
        PIDs used by Managed Service Factories.</para>
      </listitem>
    </itemizedlist>

    <para>The Object Class Definitions must originate from the bundle that
    registered the Meta Type Provider service. Third party extenders should
    therefore use the bundle of their extendee. A Meta Type Service must
    report these Object Class Definitions on the Meta Type Information of the
    registering bundle, merged with any other information from that
    bundle.</para>

    <para>The Meta Type Service must track these Meta Type Provider services
    and make their Meta Types available as if they were provided on the
    Managed Service (Factory) services. The Meta Types must become unavailable
    when the Meta Type Provider service is unregistered.</para>
  </section>

  <section xml:id="i1504250">
    <title>Using the Meta Type Resources</title>

    <para>A bundle that wants to provide meta type resources must place these
    resources in the <code>OSGI-INF/metatype</code> directory. The name of the
    resource must be a valid bundle entry path. All resources in that
    directory must be meta type documents. Fragments can contain additional
    meta type resources in the same directory and they must be taken into
    account when the meta type resources are searched. A meta type resource
    must be encoded in UTF-8.</para>

    <para>The MetaType Service must support localization of the</para>

    <itemizedlist>
      <listitem>
        <para>name</para>
      </listitem>

      <listitem>
        <para>icon</para>
      </listitem>

      <listitem>
        <para>description</para>
      </listitem>

      <listitem>
        <para>label attributes</para>
      </listitem>
    </itemizedlist>

    <para>The localization mechanism must be identical using the same
    mechanism as described in the Core module layer, see
    <emphasis>Localization</emphasis>, using the same property resource.
    However, it is possible to override the property resource in the meta type
    definition resources with the <code>localization</code> attribute of the
    <code>MetaData</code> element.</para>

    <para>The Meta Type Service must examine the bundle and its fragments to
    locate all localization resources for the localization base name. From
    that list, the Meta Type Service derives the list of locales which are
    available for the meta type information. This list can then be returned by
    <code>MetaTypeInformation.getLocales</code> method. This list can change
    at any time because the bundle could be refreshed. Clients should be
    prepared that this list changes after they received it.</para>

    <section>
      <title>XML Schema of a Meta Type Resource</title>

      <para>This section describes the schema of the meta type resource. This
      schema is not intended to be used during runtime for validating meta
      type resources. The schema is intended to be used by tools and external
      management systems.</para>

      <para>The XML namespace for meta type documents must be:</para>

      <programlisting>http://www.osgi.org/xmlns/metatype/v1.3.0</programlisting>

      <para>The namespace abbreviation should be <code>metatype</code>. That
      is, the following header should be:</para>

      <programlisting>&lt;metatype:MetaData 
    xmlns:metatype="http://www.osgi.org/xmlns/metatype/v1.3.0"&gt;</programlisting>

      <para>The file can be found in the osgi.jar file that can be downloaded
      from the www.osgi.org web site.</para>

      <figure>
        <title>XML Schema Instance Structure (Type name = Element
        name)</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.357in" contentwidth="4.280in" fileref="schema-structure.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The element structure of the XML file is:</para>

      <programlisting>MetaData    ::= OCD* Designate*

OCD         ::= AD*  Icon*
AD          ::= Option*

Designate   ::= Object
Object      ::= Attribute*

Attribute   ::= Value*</programlisting>

      <para>The different elements are described in <xref linkend="service.metatype-xml.schema"/>.</para>

      <table xml:id="service.metatype-xml.schema">
        <title>XML Schema for Meta Type resources</title>

        <tgroup cols="6">
          <colspec colname="col1" colnum="1" colwidth="0.2*"/>

          <colspec colname="col2" colnum="2" colwidth="1.5*"/>

          <colspec colname="col3" colnum="3" colwidth="1*"/>

          <colspec colname="col4" colnum="4" colwidth="1*"/>

          <colspec colname="col5" colnum="5" colwidth="2*"/>

          <colspec colname="col6" colnum="6" colwidth="4*"/>

          <spanspec nameend="col5" namest="col1" spanname="element"/>

          <thead>
            <row>
              <entry><para/></entry>

              <entry><para>Attribute</para></entry>

              <entry><para>Deflt</para></entry>

              <entry><para>Type</para></entry>

              <entry><para>Method</para></entry>

              <entry><para>Description</para></entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry spanname="element"><code>MetaData</code></entry>

              <entry colname="col6"><para>Top Element</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>localization</code></entry>

              <entry/>

              <entry><code>string</code></entry>

              <entry><para/></entry>

              <entry><para>Points to the Properties file that can localize
              this XML. See <emphasis>Localization</emphasis> in <xref linkend="intro.core.release" xrefstyle="template:%t"/>.</para></entry>
            </row>

            <row>
              <entry spanname="element"><code>OCD</code></entry>

              <entry colname="col6"><para>Object Class
              Definition</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>name</code></entry>

              <entry><code>&lt;&gt;</code></entry>

              <entry><code>string</code></entry>

              <entry><para><xref linkend="org.osgi.service.metatype.ObjectClassDefinition.getName--" xrefstyle="hyperlink"/></para></entry>

              <entry><para> A human readable name that can be
              localized.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>description</code></entry>

              <entry/>

              <entry/>

              <entry><para><xref linkend="org.osgi.service.metatype.ObjectClassDefinition.getDescription--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>A human readable description of the Object Class
              Definition that can be localized.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>id</code></entry>

              <entry><code>&lt;&gt;</code></entry>

              <entry/>

              <entry><para><xref linkend="org.osgi.service.metatype.ObjectClassDefinition.getID--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>A unique id, cannot be localized.</para></entry>
            </row>

            <row>
              <entry spanname="element"><code>Designate</code></entry>

              <entry colname="col6"><para>An association between one PID and
              an Object Class Definition. This element
              <emphasis>designates</emphasis> a PID to be of a certain
              <emphasis>type</emphasis>.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>pid</code></entry>

              <entry><code>&lt;&gt;</code></entry>

              <entry><code>string</code></entry>

              <entry><para/></entry>

              <entry><para>The PID that is associated with an
              <code>OCD</code>. This can be a reference to a factory or
              singleton configuration object. The PID can be a Targeted PID,
              if <code>factoryPid</code> is not set or empty. Either
              <code>pid</code> or <code>factoryPid</code> must be specified.
              See <xref linkend="i1492258"/>.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>factoryPid</code></entry>

              <entry/>

              <entry><code>string</code></entry>

              <entry><para/></entry>

              <entry><para>If the <code>factoryPid</code> attribute is set,
              this Designate element defines a factory configuration for the
              given factory. If it is not set or empty, it designates a
              singleton configuration. The PID can be a Targeted PID. Either
              <code>pid</code> or <code>factoryPid</code> must be specified.
              See <xref linkend="i1492258"/>.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>bundle</code></entry>

              <entry/>

              <entry><code>string</code></entry>

              <entry><para/></entry>

              <entry><para>The value is used to set the location of any
              configuration created using this Meta Type resource. This may
              contain a bundle location or a multi-location. In a Meta Type
              resource, using the wildcard value (<code>'*' \u002A</code>)
              indicates the bundle location of the bundle containing the
              resource must be used as the location. See <xref linkend="service.cm-location.binding"/></para><para>This is an
              optional attribute but can be mandatory in certain usage
              schemes, for example the Autoconf Resource
              Processor.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>optional</code></entry>

              <entry><code>false</code></entry>

              <entry><code>boolean</code></entry>

              <entry><para/></entry>

              <entry><para>If <code>true</code>, then this Designate element
              is optional, errors during processing must be
              ignored.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>merge</code></entry>

              <entry><code>false</code></entry>

              <entry><code>boolean</code></entry>

              <entry><para/></entry>

              <entry><para>If the PID refers to an existing configuration,
              then merge the properties with the existing properties if this
              attribute is <code>true</code>. Otherwise, replace the
              properties.</para></entry>
            </row>

            <row>
              <entry spanname="element"><code>AD</code></entry>

              <entry colname="col6"><para>Attribute Definition</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>name</code></entry>

              <entry/>

              <entry><code>string</code></entry>

              <entry><para><xref linkend="org.osgi.service.metatype.AttributeDefinition.getName--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>A localizable name for the Attribute Definition.
              <code>description</code></para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>description</code></entry>

              <entry/>

              <entry><code>string</code></entry>

              <entry><para><xref linkend="org.osgi.service.metatype.AttributeDefinition.getDescription--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>A localizable description for the Attribute
              Definition.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>id</code></entry>

              <entry/>

              <entry/>

              <entry><para><xref linkend="org.osgi.service.metatype.AttributeDefinition.getID--" xrefstyle="hyperlink"/></para></entry>

              <entry><para> The unique ID of the Attribute
              Definition.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>type</code></entry>

              <entry/>

              <entry><code>string</code></entry>

              <entry><para><xref linkend="org.osgi.service.metatype.AttributeDefinition.getType--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The type of an attribute is an enumeration of the
              different scalar types. The string is mapped to one of the
              constants on the AttributeDefinition interface. Valid values,
              which are defined in the <code>Scalar</code> type,
              are:</para><programlisting>String   <phrase role="symbol">↔</phrase> <xref linkend="org.osgi.service.metatype.AttributeDefinition.STRING" xrefstyle="hyperlink"/>
Long     <phrase role="symbol">↔</phrase> <xref linkend="org.osgi.service.metatype.AttributeDefinition.LONG" xrefstyle="hyperlink"/>
Double   <phrase role="symbol">↔</phrase> <xref linkend="org.osgi.service.metatype.AttributeDefinition.DOUBLE" xrefstyle="hyperlink"/>
Float    <phrase role="symbol">↔</phrase> <xref linkend="org.osgi.service.metatype.AttributeDefinition.FLOAT" xrefstyle="hyperlink"/>
Integer  <phrase role="symbol">↔</phrase> <xref linkend="org.osgi.service.metatype.AttributeDefinition.INTEGER" xrefstyle="hyperlink"/>
Byte     <phrase role="symbol">↔</phrase> <xref linkend="org.osgi.service.metatype.AttributeDefinition.BYTE" xrefstyle="hyperlink"/>
Char     <phrase role="symbol">↔</phrase> <xref linkend="org.osgi.service.metatype.AttributeDefinition.CHARACTER" xrefstyle="hyperlink"/>
Boolean  <phrase role="symbol">↔</phrase> <xref linkend="org.osgi.service.metatype.AttributeDefinition.BOOLEAN" xrefstyle="hyperlink"/>
Short    <phrase role="symbol">↔</phrase> <xref linkend="org.osgi.service.metatype.AttributeDefinition.SHORT" xrefstyle="hyperlink"/>
Password <phrase role="symbol">↔</phrase> <xref linkend="org.osgi.service.metatype.AttributeDefinition.PASSWORD" xrefstyle="hyperlink"/></programlisting></entry>
            </row>

            <row>
              <entry/>

              <entry><code>cardinality</code></entry>

              <entry><code>0</code></entry>

              <entry/>

              <entry><para><xref linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The number of elements an instance can take.
              Positive numbers describe an array (<code>[]</code>) and
              negative numbers describe a <code>List</code>
              object.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>min</code></entry>

              <entry/>

              <entry><code>string</code></entry>

              <entry><para><xref linkend="org.osgi.service.metatype.AttributeDefinition.validate-String-" xrefstyle="hyperlink"/></para></entry>

              <entry><para> A validation value. This value is not directly
              available from the <code>AttributeDefinition</code> interface.
              However, the <xref linkend="org.osgi.service.metatype.AttributeDefinition.validate-String-" xrefstyle="hyperlink"/> method must verify this. The semantics
              of this field depend on the type of this Attribute
              Definition.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>max</code></entry>

              <entry/>

              <entry><code>string</code></entry>

              <entry><para><xref linkend="org.osgi.service.metatype.AttributeDefinition.validate-String-" xrefstyle="hyperlink"/></para></entry>

              <entry><para>A validation value. Similar to the <code>min</code>
              field. When <code>min</code> or <code>max</code> are numbers,
              attribute values with a numeric data type are valid if <code>min
              &lt;= value &lt;= max</code>. Attribute values with a string (or
              equivalent) data type are valid if <code>min &lt;=
              value.length() &lt;= max</code>.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><para xml:id="i1366390"><code>default</code></para></entry>

              <entry/>

              <entry><code>string</code></entry>

              <entry><para><xref linkend="org.osgi.service.metatype.AttributeDefinition.getDefaultValue--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The default value. A default is an array of
              <code>String</code> objects. The XML attribute must contain a
              comma delimited list. The default value is trimmed and escaped
              in the same way as described in the <xref linkend="org.osgi.service.metatype.AttributeDefinition.validate-String-" xrefstyle="hyperlink"/> method. The empty string is significant
              and must be seen as an empty <code>List</code> or array if
              specified as the default for an attribute with a cardinality
              that is not equal to zero. Default values must be valid or
              otherwise ignored.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>required</code></entry>

              <entry><code>true</code></entry>

              <entry><code>boolean</code></entry>

              <entry><para/></entry>

              <entry><para>Required attribute. The <code>required</code>
              attribute indicates whether or not the attribute key must appear
              within the configuration dictionary to be valid.</para></entry>
            </row>

            <row>
              <entry spanname="element"><code>Option</code></entry>

              <entry colname="col6"><para>One option label/value for the
              options in an <code>AD</code>. Options are exclusive. The <xref linkend="org.osgi.service.metatype.AttributeDefinition.validate-String-" xrefstyle="hyperlink"/> method must verify that an attribute
              value matches one of the option values when
              present.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>label</code></entry>

              <entry><code>&lt;&gt;</code></entry>

              <entry><code>string</code></entry>

              <entry><para><xref linkend="org.osgi.service.metatype.AttributeDefinition.getOptionLabels--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The label</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>value</code></entry>

              <entry><code>&lt;&gt;</code></entry>

              <entry><code>string</code></entry>

              <entry><para><xref linkend="org.osgi.service.metatype.AttributeDefinition.getOptionValues--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The value</para></entry>
            </row>

            <row>
              <entry spanname="element"><code>Icon</code></entry>

              <entry colname="col6"><para>An icon definition.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>resource</code></entry>

              <entry><code>&lt;&gt;</code></entry>

              <entry><code>string</code></entry>

              <entry><para><xref linkend="org.osgi.service.metatype.ObjectClassDefinition.getIcon-int-" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The resource is a URL. The base URL is assumed to
              be the root of the bundle containing the XML file. That is, this
              URL can reference another resource in the bundle using a
              relative URL.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>size</code></entry>

              <entry><code>&lt;&gt;</code></entry>

              <entry><code>string</code></entry>

              <entry><para><xref linkend="org.osgi.service.metatype.ObjectClassDefinition.getIcon-int-" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The number of pixels of the icon, maps to the size
              parameter of the <xref linkend="org.osgi.service.metatype.ObjectClassDefinition.getIcon-int-" xrefstyle="hyperlink"/> method.</para></entry>
            </row>

            <row>
              <entry spanname="element"><code>Object</code></entry>

              <entry colname="col6"><para>A definition of an
              instance.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>ocdref</code></entry>

              <entry><code>&lt;&gt;</code></entry>

              <entry><code>string</code></entry>

              <entry><para/></entry>

              <entry><para>A reference to the id attribute of an OCD element.
              That is, this attribute defines the OCD type of this
              object.</para></entry>
            </row>

            <row>
              <entry spanname="element"><code>Attribute</code></entry>

              <entry colname="col6"><para>A value for an attribute of an
              object.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>adref</code></entry>

              <entry><code>&lt;&gt;</code></entry>

              <entry><code>string</code></entry>

              <entry><para/></entry>

              <entry><para>A reference to the id of the <code>AD</code> in the
              <code>OCD</code> as referenced by the parent
              <code>Object</code>.</para></entry>
            </row>

            <row>
              <entry/>

              <entry><code>content</code></entry>

              <entry/>

              <entry><code>string</code></entry>

              <entry><para/></entry>

              <entry><para>The content of the attributes. If this is an array,
              the content must be separated by commas (<code>','
              \u002C</code>). Commas must be escaped as described at the <link endterm="i1366390" linkend="i1366390"/> attribute of the
              <code>AD</code> element.</para></entry>
            </row>

            <row>
              <entry spanname="element"><code>Value</code></entry>

              <entry colname="col6"><para>Holds a single value. This element
              can be repeated multiple times under an Attribute
              </para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="i1492258">
      <title>Designate Element</title>

      <para>For the MetaType Service, the <code>Designate</code> definition is
      used to declare the available PIDs and factory PIDs; the Attribute
      elements are never used by the MetaType service.</para>

      <para>The <xref linkend="org.osgi.service.metatype.MetaTypeInformation.getPids--" xrefstyle="hyperlink"/> method returns an array of PIDs that were
      specified in the <code>pid</code> attribute of the Object elements. The
      <xref linkend="org.osgi.service.metatype.MetaTypeInformation.getFactoryPids--" xrefstyle="hyperlink"/> method returns an array of the
      <code>factoryPid</code> attributes. For factories, the related
      <code>pid</code> attribute is ignored because all instances of a factory
      must share the same meta type.</para>

      <para>The following example shows a metatype reference to a singleton
      configuration and a factory configuration.</para>

      <programlisting>    &lt;Designate pid="com.acme.designate.1"&gt;
        &lt;Object ocdref="com.acme.designate"/&gt;
    &lt;/Designate&gt;
    &lt;Designate factoryPid="com.acme.designate.factory"
        bundle="*"&gt;
        &lt;Object ocdref="com.acme.designate"/&gt;
    &lt;/Designate&gt;</programlisting>

      <para>Other schemes can embed the <code>Object</code> element in the
      <code>Designate</code> element to define actual instances for the
      Configuration Admin service. In that case the <code>pid</code> attribute
      must be used together with the <code>factoryPid</code> attribute.
      However, in that case an aliasing model is required because the
      Configuration Admin service does not allow the creator to choose the
      <code>Configuration</code> object's PID.</para>
    </section>

    <section xml:id="i1504251">
      <title>Example Metadata File</title>

      <para>This example defines a meta type file for a Person record, based
      on ISO attribute types. The ids that are used are derived from ISO
      attributes.</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;MetaData 
    xmlns="http://www.osgi.org/xmlns/metatype/v1.3.0" 
    localization="person"&gt;
  &lt;OCD name="%person" id="2.5.6.6"
        description="%person record"&gt;
    &lt;AD name="%sex" id="2.5.4.12" type="Integer"&gt;
       &lt;Option label="%male" value="1"/&gt;
       &lt;Option label="%female" value="0"/&gt;
    &lt;/AD&gt;
    &lt;AD name="%sn" id="2.5.4.4" type="String"/&gt;
    &lt;AD name="%cn" id="2.5.4.3" type="String"/&gt;
    &lt;AD name="%seeAlso" id="2.5.4.34" type="String"
        cardinality="8"
        default="http://www.google.com,http://www.yahoo.com"/&gt;
    &lt;AD name="%telNumber" id="2.5.4.20" type="String"/&gt;
  &lt;/OCD&gt;

  &lt;Designate pid="com.acme.addressbook"&gt;
    &lt;Object ocdref="2.5.6.6"/&gt;
  &lt;/Designate&gt;
&lt;/MetaData&gt;</programlisting>

      <para>Translations for this file, as indicated by the localization
      attribute must be stored in the root directory (e.g.
      <code>person_du_NL.properties</code>). The default localization base
      name for the properties is <code>OSGI-INF/l10n/bundle</code>, but can be
      overridden by the manifest Bundle-Localization header and the
      <code>localization</code> attribute of the Meta Data element. The
      property files have the base name of <code>person</code>. The Dutch,
      French and English translations could look like:</para>

      <para><code>person_du_NL.properties</code>:</para>

      <programlisting>person=Persoon
person\ record=Persoons beschrijving
cn=Naam
sn=Voornaam
seeAlso=Zie ook
telNumber=Tel. Nummer
sex=Geslacht
male=Mannelijk
female=Vrouwelijk</programlisting>

      <para><code>person_fr.properties</code>:</para>

      <programlisting>person=Personne
person\ record=Description de la personne
cn=Nom
sn=Surnom
seeAlso=Reference
telNumber=Tel.
sex=Sexe
male=Homme
female=Femme</programlisting>

      <para><code>person_en_US.properties</code>:</para>

      <programlisting>person=Person
person\ record=Person Record
cn=Name
sn=Sur Name
seeAlso=See Also
telNumber=Tel.
sex=Sex
male=Male
female=Female</programlisting>
    </section>

    <section>
      <title>Object Element</title>

      <para>The <code>OCD</code> element can be used to describe the possible
      contents of a <code>Dictionary</code> object. In this case, the
      attribute name is the key. The <code>Object</code> element can be used
      to assign a value to a Dictionary object.</para>

      <para>For example:</para>

      <programlisting>&lt;Designate pid="com.acme.b"&gt;
  &lt;Object ocdref="b"&gt;
    &lt;Attribute adref="foo" content="Zaphod Beeblebrox"/&gt;
    &lt;Attribute adref="bar"&gt;
      &lt;Value&gt;1&lt;/Value&gt;
      &lt;Value&gt;2&lt;/Value&gt;
      &lt;Value&gt;3&lt;/Value&gt;
      &lt;Value&gt;4&lt;/Value&gt;
      &lt;Value&gt;5&lt;/Value&gt;
    &lt;/Attribute&gt;
  &lt;/Object&gt;
&lt;/Designate&gt;</programlisting>
    </section>
  </section>

  <section xml:id="i1502383">
    <title>Meta Type Resource XML Schema</title>

    <programlisting role="pgwide">&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"
    xmlns:metatype="http://www.osgi.org/xmlns/metatype/v1.3.0"
    targetNamespace="http://www.osgi.org/xmlns/metatype/v1.3.0"
    version="1.3.0"&gt;

    &lt;element name="MetaData" type="metatype:Tmetadata" /&gt;

    &lt;complexType name="Tmetadata"&gt;
        &lt;choice minOccurs="0" maxOccurs="unbounded"&gt;
            &lt;element name="OCD" type="metatype:Tocd" /&gt;
            &lt;element name="Designate" type="metatype:Tdesignate" /&gt;
            &lt;!-- It is non-deterministic, per W3C XML Schema 1.0: http://www.w3.org/TR/xmlschema-1/#cos-nonambig
                to use namespace="##any" below. --&gt;
            &lt;any namespace="##other" processContents="lax" /&gt;
        &lt;/choice&gt;
        &lt;attribute name="localization" type="string" use="optional" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;

    &lt;complexType name="Tocd"&gt;
        &lt;choice minOccurs="0" maxOccurs="unbounded"&gt;
            &lt;element name="AD" type="metatype:Tad" /&gt;
            &lt;element name="Icon" type="metatype:Ticon" /&gt;
            &lt;!-- It is non-deterministic, per W3C XML Schema 1.0: http://www.w3.org/TR/xmlschema-1/#cos-nonambig
                to use namespace="##any" below. --&gt;
            &lt;any namespace="##other" processContents="lax" /&gt;
        &lt;/choice&gt;
        &lt;attribute name="name" type="string" use="required" /&gt;
        &lt;attribute name="description" type="string" use="optional" /&gt;
        &lt;attribute name="id" type="string" use="required" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;

    &lt;complexType name="Tad"&gt;
        &lt;choice minOccurs="0" maxOccurs="unbounded"&gt;
            &lt;element name="Option" type="metatype:Toption" /&gt;
            &lt;!-- It is non-deterministic, per W3C XML Schema 1.0: http://www.w3.org/TR/xmlschema-1/#cos-nonambig
                to use namespace="##any" below. --&gt;
            &lt;any namespace="##other" processContents="lax"  /&gt;
        &lt;/choice&gt;
        &lt;attribute name="name" type="string" use="optional" /&gt;
        &lt;attribute name="description" type="string" use="optional" /&gt;
        &lt;attribute name="id" type="string" use="required" /&gt;
        &lt;attribute name="type" type="metatype:Tscalar" use="required" /&gt;
        &lt;attribute name="cardinality" type="int" use="optional"
            default="0" /&gt;
        &lt;attribute name="min" type="string" use="optional" /&gt;
        &lt;attribute name="max" type="string" use="optional" /&gt;
        &lt;attribute name="default" type="string" use="optional" /&gt;
        &lt;attribute name="required" type="boolean" use="optional"
            default="true" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;

    &lt;complexType name="Tobject"&gt;
        &lt;choice minOccurs="0" maxOccurs="unbounded"&gt;
            &lt;element name="Attribute" type="metatype:Tattribute" /&gt;
            &lt;!-- It is non-deterministic, per W3C XML Schema 1.0: http://www.w3.org/TR/xmlschema-1/#cos-nonambig
                to use namespace="##any" below. --&gt;
            &lt;any namespace="##other" processContents="lax" /&gt;
        &lt;/choice&gt;
        &lt;attribute name="ocdref" type="string" use="required" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;

    &lt;complexType name="Tattribute"&gt;
        &lt;choice minOccurs="0" maxOccurs="unbounded"&gt;
            &lt;element name="Value" type="string" /&gt;
            &lt;!-- It is non-deterministic, per W3C XML Schema 1.0: http://www.w3.org/TR/xmlschema-1/#cos-nonambig
                to use namespace="##any" below. --&gt;
            &lt;any namespace="##other" processContents="lax" /&gt;
        &lt;/choice&gt;
        &lt;attribute name="adref" type="string" use="required" /&gt;
        &lt;attribute name="content" type="string" use="optional" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;

    &lt;complexType name="Tdesignate"&gt;
        &lt;sequence&gt;
            &lt;element name="Object" type="metatype:Tobject" minOccurs="1"
                maxOccurs="1" /&gt;
            &lt;any namespace="##any" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;attribute name="pid" type="string" use="optional" /&gt;
        &lt;attribute name="factoryPid" type="string" use="optional" /&gt;
        &lt;attribute name="bundle" type="string" use="optional" /&gt;
        &lt;attribute name="optional" type="boolean" default="false"
            use="optional" /&gt;
        &lt;attribute name="merge" type="boolean" default="false"
            use="optional" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;

    &lt;simpleType name="Tscalar"&gt;
        &lt;restriction base="string"&gt;
            &lt;enumeration value="String" /&gt;
            &lt;enumeration value="Long" /&gt;
            &lt;enumeration value="Double" /&gt;
            &lt;enumeration value="Float" /&gt;
            &lt;enumeration value="Integer" /&gt;
            &lt;enumeration value="Byte" /&gt;
            &lt;enumeration value="Character" /&gt;
            &lt;enumeration value="Boolean" /&gt;
            &lt;enumeration value="Short" /&gt;
            &lt;enumeration value="Password" /&gt;
        &lt;/restriction&gt;
    &lt;/simpleType&gt;

    &lt;complexType name="Toption"&gt;
        &lt;sequence&gt;
            &lt;any namespace="##any" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;attribute name="label" type="string" use="required" /&gt;
        &lt;attribute name="value" type="string" use="required" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;

    &lt;complexType name="Ticon"&gt;
        &lt;sequence&gt;
            &lt;any namespace="##any" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;attribute name="resource" type="string" use="required" /&gt;
        &lt;attribute name="size" type="positiveInteger" use="required" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;

    &lt;attribute name="must-understand" type="boolean"&gt;
        &lt;annotation&gt;
            &lt;documentation xml:lang="en"&gt;
                This attribute should be used by extensions to documents
                to require that the document consumer understand the
                extension.
            &lt;/documentation&gt;
        &lt;/annotation&gt;
    &lt;/attribute&gt;
&lt;/schema&gt;
</programlisting>
  </section>

  <section xml:id="service.metatype-metatype.annotations">
    <title>Meta Type Annotations</title>

    <para>A developer can use Meta Type Annotations on a Component Property
    Type, see <xref linkend="service.component-component.property.types"/>, or
    an interface to define an Object Class Definition in a type safe manner.
    The Meta Type Annotations are <code>CLASS</code> retention annotations
    intended to be used during build time to generate Meta Type Resources from
    the Java class files providing a convenient way to create the Meta Type
    Resource XML documents.</para>

    <para>Tools processing these annotations must always generate valid Meta
    Type Resource XML documents. If the Meta Type Annotations are used in a
    way that is not supported or in error, then the tool must report the error
    to enable the developer to take corrective action.</para>

    <section>
      <title>ObjectClassDefinition Annotation</title>

      <para>The <xref linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition" xrefstyle="hyperlink"/> annotation can be applied to a Component
      Property Type or an interface. From that type, tooling can generate an
      <code>OCD</code> element. When applied to an interface, all the methods
      inherited from supertypes are include as Attribute Definitions. The tool
      processing the annotations must be able to examine all the types in the
      hierarchy of the annotated type to generate the Meta Type Resource. It
      is an error if the tool cannot examine a type in the hierarchy.</para>

      <para>It is an error to apply the <xref linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition" xrefstyle="hyperlink"/> annotation to concrete and abstract class types.
      It is also an error to apply it to an interface if any of the methods of
      the interface take arguments.</para>

      <para>The <xref linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition" xrefstyle="hyperlink"/> annotation can be applied without defining any
      element values as default values for the <xref linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition" xrefstyle="hyperlink"/> annotation elements can be generated from the
      annotated type. For example:</para>

      <programlisting>@ObjectClassDefinition
@interface Config {
  boolean enabled();
  String[] names();
  String topic();
}</programlisting>

      <para>In the following larger example, the <xref linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition" xrefstyle="hyperlink"/> annotation defines the description and name of
      the <code>OCD</code> which are to be localized using the specified
      resource as well as an icon resource. Also, <xref linkend="org.osgi.service.metatype.annotations.AttributeDefinition" xrefstyle="hyperlink"/> annotations are applied to the methods to supply
      some non-default values for the generated <code>AD</code>
      elements.</para>

      <programlisting>@ObjectClassDefinition(localization = "OSGI-INF/l10n/member",
    description = "%member.description",
    name = "%member.name"
    icon = @Icon(resource = "icon/member-32.png", size = 32))
@interface Member {
  @AttributeDefinition(type = AttributeType.PASSWORD,
    description = "%member.password.description",
    name = "%member.password.name")
  public String _password();

  @AttributeDefinition(options = {
    @Option(label = "%strategic", value = "strategic"),
    @Option(label = "%principal", value = "principal"),
    @Option(label = "%contributing", value = "contributing")
    },
    defaultValue = "contributing",
    description = "%member.membertype.description",
    name = "%member.membertype.name")
  public String type();
}</programlisting>
    </section>

    <section>
      <title>AttributeDefinition Annotation</title>

      <para>The <xref linkend="org.osgi.service.metatype.annotations.AttributeDefinition" xrefstyle="hyperlink"/> annotation is an optional annotation which can
      applied to the methods in a type annotated by <xref linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition" xrefstyle="hyperlink"/>. Each method of the type annotated by <xref linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition" xrefstyle="hyperlink"/> is mapped to an <code>AD</code> child element of
      the <code>OCD</code> element in the generated Meta Type Resource XML
      document. The <xref linkend="org.osgi.service.metatype.annotations.AttributeDefinition" xrefstyle="hyperlink"/> annotation only needs to be applied to a method
      if values other than the defaults are desired.</para>

      <para>The id of the Attribute Definition is generated from the method
      name as follows:</para>

      <itemizedlist>
        <listitem>
          <para>A single dollar sign (<code>'$' \u0024</code>) is removed
          unless it is followed by another dollar sign in which case the two
          consecutive dollar signs (<code>"$$"</code>) are converted to a
          single dollar sign.</para>
        </listitem>

        <listitem>
          <para>A single low line (<code>'_' \u005F</code>) is converted into
          a full stop (<code>'.' \u002E</code>) unless is it followed by
          another low line in which case the two consecutive low lines
          (<code>"__"</code>) are converted to a single low line.</para>
        </listitem>

        <listitem>
          <para>All other characters are unchanged.</para>
        </listitem>
      </itemizedlist>

      <para>The generated id becomes the value of the <code>id</code>
      attribute of the <code>AD</code> element in the generated Meta Type
      Resource XML document.</para>
    </section>

    <section>
      <title>Designate Annotation</title>

      <para>The <xref linkend="org.osgi.service.metatype.annotations.Designate" xrefstyle="hyperlink"/> annotation can be applied to a Declarative
      Services component class to make the connection between the pid of the
      component and an Object Class Definition. This annotation must be used
      on a type that is also annotated with the Declarative Services <xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> annotation. The component must only have a
      single PID which is used for the generated <code>Designate</code>
      element.</para>

      <para>In the following example, the <xref linkend="org.osgi.service.metatype.annotations.Designate" xrefstyle="hyperlink"/> annotation is applied to a Declarative Services
      component and references the Object Class Definition type.</para>

      <programlisting>@ObjectClassDefinition(id="my.config.ocd")
@interface Config {
  boolean enabled() default true;
  String[] names() default {"a", "b"};
  String topic() default "default/topic";
}

@Component(configurationPid="my.component.pid")
@Designate(ocd = Config.class)
public class MyComponent {
    static final String DEFAULT_TOPIC_PREFIX = "topic.prefix";
    protected void activate(Config configuration) {
        String t = configuration.topic();
    }
}</programlisting>

      <para>Tools processing these annotations will generate a
      <code>Designate</code> element in the generated Meta Type Resource XML
      document using the PID of the component and the id of the Object Class
      Definition. For example:</para>

      <programlisting>&lt;Designate pid="my.component.pid"&gt;
    &lt;Object ocdref="my.config.ocd"/&gt;
&lt;/Designate&gt;</programlisting>
    </section>
  </section>

  <section>
    <title>Limitations</title>

    <para>The OSGi MetaType specification is intended to be used for simple
    applications. It does not, therefore, support recursive data types, mixed
    types in arrays/lists, or nested arrays/lists.</para>
  </section>

  <section>
    <title>Related Standards</title>

    <para>One of the primary goals of this specification is to make metatype
    information available at run-time with minimal overhead. Many related
    standards are applicable to metatypes; except for Java beans, however, all
    other metatype standards are based on document formats (e.g. XML). In the
    OSGi framework, document format standards are deemed unsuitable due to the
    overhead required in the execution environment (they require a parser
    during run-time).</para>

    <para>Another consideration is the applicability of these standards. Most
    of these standards were developed for management systems on platforms
    where resources are not necessarily a concern. In this case, a metatype
    standard is normally used to describe the data structures needed to
    control some other computer via a network. This other computer, however,
    does not require the metatype information as it is
    <emphasis>implementing</emphasis> this information.</para>

    <para>In some traditional cases, a management system uses the metatype
    information to control objects in an OSGi framework. Therefore, the
    concepts and the syntax of the metatype information must be mappable to
    these popular standards. Clearly, then, these standards must be able to
    describe objects in an OSGi framework. This ability is usually not a
    problem, because the metatype languages used by current management systems
    are very powerful.</para>
  </section>

  <section xml:id="service.metatype-capabilities">
    <title>Capabilities</title>

    <para>Implementations of the Metatype Service specification must provide
    the following capabilities.</para>

    <itemizedlist>
      <listitem>
        <para>A capability in the <link linkend="service.namespaces-osgi.implementation.namespace"><code>osgi.implementation</code></link>
        namespace declaring a specification implementation with the name <xref linkend="org.osgi.service.metatype.MetaTypeService.METATYPE_CAPABILITY_NAME" xrefstyle="hyperlink"/>. This capability must also declare a uses
        constraint for the <code>org.osgi.service.metatype</code> package. For
        example:</para>

        <programlisting>Provide-Capability: osgi.implementation;
    osgi.implementation="osgi.metatype";
    version:Version="1.3";
    uses:="org.osgi.service.metatype"</programlisting>

        <para>This capability must follow the rules defined for the <xref linkend="service.namespaces-osgi.implementation.namespace"/>.</para>
      </listitem>

      <listitem>
        <para>A capability in the <link linkend="service.namespaces-osgi.extender.namespace"><code>osgi.extender</code></link>
        namespace declaring an extender with the name <xref linkend="org.osgi.service.metatype.MetaTypeService.METATYPE_CAPABILITY_NAME" xrefstyle="hyperlink"/>. This capability must also declare a uses
        constraint for the <code>org.osgi.service.metatype</code> package. For
        example:</para>

        <programlisting>Provide-Capability: osgi.extender;
    osgi.extender="osgi.metatype";
    version:Version="1.3";
    uses:="org.osgi.service.metatype"</programlisting>

        <para>This capability must follow the rules defined for the <xref linkend="service.namespaces-osgi.extender.namespace"/>.</para>
      </listitem>

      <listitem>
        <para>A capability in the <link linkend="service.namespaces-osgi.service.namespace"><code>osgi.service</code></link>
        namespace representing the <xref linkend="org.osgi.service.metatype.MetaTypeService" xrefstyle="hyperlink"/> service. This capability must also declare a
        uses constraint for the <code>org.osgi.service.metatype</code>
        package. For example:</para>

        <programlisting>Provide-Capability: osgi.service;
    objectClass:List&lt;String&gt;="org.osgi.service.metatype.MetaTypeService";
    uses:="org.osgi.service.metatype"</programlisting>

        <para>This capability must follow the rules defined for the <xref linkend="service.namespaces-osgi.service.namespace"/>.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Security Considerations</title>

    <para>Special security issues are not applicable for this
    specification.</para>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.metatype" xml:id="org.osgi.service.metatype" xml:base="../../generated/javadoc/docbook/org.osgi.service.metatype.xml">
   <title>org.osgi.service.metatype</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.metatype-version">Version 1.3</releaseinfo>
      <edition xml:id="org.osgi.service.metatype-version.number">1.3</edition>
   </info>
   <para>
Metatype Package Version 1.3.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.metatype; version="[1.3,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.metatype; version="[1.3,1.4)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.metatype.AttributeDefinition">
                  <code>AttributeDefinition</code>
               </link> - 
An interface to describe an attribute.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.metatype.MetaTypeInformation">
                  <code>MetaTypeInformation</code>
               </link> - 
A MetaType Information object is created by the MetaTypeService to return
 meta type information for a specific bundle.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.metatype.MetaTypeProvider">
                  <code>MetaTypeProvider</code>
               </link> - 
Provides access to metatypes.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.metatype.MetaTypeService">
                  <code>MetaTypeService</code>
               </link> - 
The MetaType Service can be used to obtain meta type information for a
 bundle.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.metatype.ObjectClassDefinition">
                  <code>ObjectClassDefinition</code>
               </link> - 
Description for the data type information of an objectclass.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="AttributeDefinition" xml:id="org.osgi.service.metatype.AttributeDefinition">
      <title>public interface AttributeDefinition</title>
      <para>
An interface to describe an attribute.
 
 </para>
      <para>
 An <code>AttributeDefinition</code> object defines a description of the data type
 of a property/attribute.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="BIGDECIMAL" xml:id="org.osgi.service.metatype.AttributeDefinition.BIGDECIMAL">
         <title>public static final int BIGDECIMAL = 10</title>
         <para>
The <code>BIGDECIMAL</code> type.
 
 Attributes of this type should be stored as <code>BigDecimal</code>,
 <code>List&lt;BigDecimal&gt;</code> or <code>BigDecimal[]</code> objects depending on
 <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link>.
   </para>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of 1.1.</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="BIGINTEGER" xml:id="org.osgi.service.metatype.AttributeDefinition.BIGINTEGER">
         <title>public static final int BIGINTEGER = 9</title>
         <para>
The <code>BIGINTEGER</code> type.
 
 Attributes of this type should be stored as <code>BigInteger</code>,
 <code>List&lt;BigInteger&gt;</code> or <code>BigInteger[]</code> objects, depending on
 the <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link> value.
   </para>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of 1.1.</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="BOOLEAN" xml:id="org.osgi.service.metatype.AttributeDefinition.BOOLEAN">
         <title>public static final int BOOLEAN = 11</title>
         <para>
The <code>BOOLEAN</code> type.
 
 Attributes of this type should be stored as <code>Boolean</code>,
 <code>List&lt;Boolean&gt;</code> or <code>boolean[]</code> objects depending on
 <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link>.
   </para>
      </section>
      <section role="field" xreflabel="BYTE" xml:id="org.osgi.service.metatype.AttributeDefinition.BYTE">
         <title>public static final int BYTE = 6</title>
         <para>
The <code>BYTE</code> type.
 
 Attributes of this type should be stored as <code>Byte</code>,
 <code>List&lt;Byte&gt;</code> or <code>byte[]</code> objects, depending on the
 <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link> value.
   </para>
      </section>
      <section role="field" xreflabel="CHARACTER" xml:id="org.osgi.service.metatype.AttributeDefinition.CHARACTER">
         <title>public static final int CHARACTER = 5</title>
         <para>
The <code>CHARACTER</code> type.
 
 Attributes of this type should be stored as <code>Character</code>,
 <code>List&lt;Character&gt;</code> or <code>char[]</code> objects, depending on the
 <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link> value.
   </para>
      </section>
      <section role="field" xreflabel="DOUBLE" xml:id="org.osgi.service.metatype.AttributeDefinition.DOUBLE">
         <title>public static final int DOUBLE = 7</title>
         <para>
The <code>DOUBLE</code> type.
 
 Attributes of this type should be stored as <code>Double</code>,
 <code>List&lt;Double&gt;</code> or <code>double[]</code> objects, depending on the
 <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link> value.
   </para>
      </section>
      <section role="field" xreflabel="FLOAT" xml:id="org.osgi.service.metatype.AttributeDefinition.FLOAT">
         <title>public static final int FLOAT = 8</title>
         <para>
The <code>FLOAT</code> type.
 
 Attributes of this type should be stored as <code>Float</code>,
 <code>List&lt;Float&gt;</code> or <code>float[]</code> objects, depending on the
 <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link> value.
   </para>
      </section>
      <section role="field" xreflabel="INTEGER" xml:id="org.osgi.service.metatype.AttributeDefinition.INTEGER">
         <title>public static final int INTEGER = 3</title>
         <para>
The <code>INTEGER</code> type.
 
 Attributes of this type should be stored as <code>Integer</code>,
 <code>List&lt;Integer&gt;</code> or <code>int[]</code> objects, depending on the
 <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link> value.
   </para>
      </section>
      <section role="field" xreflabel="LONG" xml:id="org.osgi.service.metatype.AttributeDefinition.LONG">
         <title>public static final int LONG = 2</title>
         <para>
The <code>LONG</code> type.
 
 Attributes of this type should be stored as <code>Long</code>,
 <code>List&lt;Long&gt;</code> or <code>long[]</code> objects, depending on the
 <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link> value.
   </para>
      </section>
      <section role="field" xreflabel="PASSWORD" xml:id="org.osgi.service.metatype.AttributeDefinition.PASSWORD">
         <title>public static final int PASSWORD = 12</title>
         <para>
The <code>PASSWORD</code> type.
 
 Attributes of this type must be stored as <code>String</code>,
 <code>List&lt;String&gt;</code> or <code>String[]</code> objects depending on
 <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link>. A <code>PASSWORD</code> must be treated as a string
 but the type can be used to disguise the information when displayed to a
 user to prevent others from seeing it.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SHORT" xml:id="org.osgi.service.metatype.AttributeDefinition.SHORT">
         <title>public static final int SHORT = 4</title>
         <para>
The <code>SHORT</code> type.
 
 Attributes of this type should be stored as <code>Short</code>,
 <code>List&lt;Short&gt;</code> or <code>short[]</code> objects, depending on the
 <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link> value.
   </para>
      </section>
      <section role="field" xreflabel="STRING" xml:id="org.osgi.service.metatype.AttributeDefinition.STRING">
         <title>public static final int STRING = 1</title>
         <para>
The <code>STRING</code> type.
 
 </para>
         <para>
 Attributes of this type should be stored as <code>String</code>,
 <code>List&lt;String&gt;</code> or <code>String[]</code> objects, depending on the
 <link linkend="org.osgi.service.metatype.AttributeDefinition.getCardinality--">getCardinality()</link> value.</para>
      </section>
      <section role="method" xreflabel="getCardinality()" xml:id="org.osgi.service.metatype.AttributeDefinition.getCardinality--">
         <title>public int getCardinality()</title>
         <para role="description">
Return the cardinality of this attribute.
 
 The OSGi environment handles multi valued attributes in arrays ([]) or in
 <code>List</code> objects. The return value is defined as follows:
 
 </para>
         <programlisting> 
    x = Integer.MIN_VALUE    no limit, but use List
    x &lt; 0                    -x = max occurrences, store in List
    x &gt; 0                     x = max occurrences, store in array []
    x = Integer.MAX_VALUE    no limit, but use array []
    x = 0                     1 occurrence required</programlisting>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The cardinality of this attribute.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getDefaultValue()" xml:id="org.osgi.service.metatype.AttributeDefinition.getDefaultValue--">
         <title>public String[] getDefaultValue()</title>
         <para role="description">
Return a default for this attribute.
 
 The object must be of the appropriate type as defined by the cardinality
 and <code>getType()</code>. The return type is a list of <code>String</code>
 objects that can be converted to the appropriate type. The cardinality of
 the return array must follow the absolute cardinality of this type. For
 example, if the cardinality = 0, the array must contain 1 element. If the
 cardinality is 1, it must contain 0 or 1 elements. If it is -5, it must
 contain from 0 to max 5 elements. Note that the special case of a 0
 cardinality, meaning a single value, does not allow arrays or lists of 0
 elements.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Return a default value or <code>null</code> if no default exists.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getDescription()" xml:id="org.osgi.service.metatype.AttributeDefinition.getDescription--">
         <title>public String getDescription()</title>
         <para role="description">
Return a description of this attribute.
 
 The description may be localized and must describe the semantics of this
 type and any constraints.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The localized description of the definition.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getID()" xml:id="org.osgi.service.metatype.AttributeDefinition.getID--">
         <title>public String getID()</title>
         <para role="description">
Unique identity for this attribute.
 
 Attributes share a global namespace in the registry. For example, an
 attribute <code>cn</code> or <code>commonName</code> must always be a
 <code>String</code> and the semantics are always a name of some object. They
 share this aspect with LDAP/X.500 attributes. In these standards the OSI
 Object Identifier (OID) is used to uniquely identify an attribute. If
 such an OID exists, (which can be requested at several standard
 organizations and many companies already have a node in the tree) it can
 be returned here. Otherwise, a unique id should be returned which can be
 a Java class name (reverse domain name) or generated with a GUID
 algorithm. Note that all LDAP defined attributes already have an OID. It
 is strongly advised to define the attributes from existing LDAP schemes
 which will give the OID. Many such schemes exist ranging from postal
 addresses to DHCP parameters.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The id or oid</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getName()" xml:id="org.osgi.service.metatype.AttributeDefinition.getName--">
         <title>public String getName()</title>
         <para role="description">
Get the name of the attribute. This name may be localized.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The localized name of the definition.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getOptionLabels()" xml:id="org.osgi.service.metatype.AttributeDefinition.getOptionLabels--">
         <title>public String[] getOptionLabels()</title>
         <para role="description">
Return a list of labels of option values.
 
 </para>
         <para>
 The purpose of this method is to allow menus with localized labels. It is
 associated with <code>getOptionValues</code>. The labels returned here are
 ordered in the same way as the values in that method.
 
 </para>
         <para>
 If the function returns <code>null</code>, there are no option labels
 available.
 </para>
         <para>
 This list must be in the same sequence as the <code>getOptionValues()</code>
 method. That is, for each index i in <code>getOptionLabels</code>, i in
 <code>getOptionValues()</code> should be the associated value.
 
 </para>
         <para>
 For example, if an attribute can have the value male, female, unknown,
 this list can return (for dutch)
 <code>new String[] { "Man", "Vrouw", "Onbekend" }</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A list values</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getOptionValues()" xml:id="org.osgi.service.metatype.AttributeDefinition.getOptionValues--">
         <title>public String[] getOptionValues()</title>
         <para role="description">
Return a list of option values that this attribute can take.
 
 </para>
         <para>
 If the function returns <code>null</code>, there are no option values
 available.
 
 </para>
         <para>
 Each value must be acceptable to validate() (return "") and must be a
 <code>String</code> object that can be converted to the data type defined by
 getType() for this attribute.
 
 </para>
         <para>
 This list must be in the same sequence as <code>getOptionLabels()</code>. That
 is, for each index i in <code>getOptionValues</code>, i in
 <code>getOptionLabels()</code> should be the label.
 
 </para>
         <para>
 For example, if an attribute can have the value male, female, unknown,
 this list can return
 <code>new String[] { "male", "female", "unknown" }</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A list values</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.metatype.AttributeDefinition.getType--">
         <title>public int getType()</title>
         <para role="description">
Return the type for this attribute.
 
 </para>
         <para>
 Defined in the following constants which map to the appropriate Java
 type. <link linkend="org.osgi.service.metatype.AttributeDefinition.STRING">STRING</link>,<link linkend="org.osgi.service.metatype.AttributeDefinition.LONG">LONG</link>,<link linkend="org.osgi.service.metatype.AttributeDefinition.INTEGER">INTEGER</link>, <link linkend="org.osgi.service.metatype.AttributeDefinition.SHORT">SHORT</link>,
 <link linkend="org.osgi.service.metatype.AttributeDefinition.CHARACTER">CHARACTER</link>, <link linkend="org.osgi.service.metatype.AttributeDefinition.BYTE">BYTE</link>,<link linkend="org.osgi.service.metatype.AttributeDefinition.DOUBLE">DOUBLE</link>,<link linkend="org.osgi.service.metatype.AttributeDefinition.FLOAT">FLOAT</link>,
 <link linkend="org.osgi.service.metatype.AttributeDefinition.BOOLEAN">BOOLEAN</link>, <link linkend="org.osgi.service.metatype.AttributeDefinition.PASSWORD">PASSWORD</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The type for this attribute.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="validate(String)" xml:id="org.osgi.service.metatype.AttributeDefinition.validate-String-">
         <title>public String validate(String value)</title>
         <formalpara role="parameter">
            <title>value</title>
            <para>The value before turning it into the basic data type. If the
        cardinality indicates a multi-valued attribute then the given
        string must be escaped.</para>
         </formalpara>
         <para role="description">
Validate an attribute in <code>String</code> form.
 
 An attribute might be further constrained in value. This method will
 attempt to validate the attribute according to these constraints. It can
 return three different values:
 
 </para>
         <programlisting>  null           No validation present
  ""             No problems detected
  "..."          A localized description of why the value is wrong</programlisting>
         <para>
 
 If the cardinality of this attribute is multi-valued then this string
 must be interpreted as a comma delimited string. The complete value must
 be trimmed from white space as well as spaces around commas. Commas (
 <code>','</code> \u002C) and spaces (<code>' '</code> \u0020) and
 backslashes (<code>'\'</code> \u005C) can be escaped with another
 backslash. Escaped spaces must not be trimmed. For example:
 
 </para>
         <programlisting> value="  a\,b,b\,c,\ c\\,d   " =&gt; [ "a,b", "b,c", " c\", "d" ]</programlisting>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>null</code>, "", or another string</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="MetaTypeInformation" xml:id="org.osgi.service.metatype.MetaTypeInformation">
      <title>public interface MetaTypeInformation<?line-break?> extends MetaTypeProvider</title>
      <para>
A MetaType Information object is created by the MetaTypeService to return
 meta type information for a specific bundle.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="getBundle()" xml:id="org.osgi.service.metatype.MetaTypeInformation.getBundle--">
         <title>public Bundle getBundle()</title>
         <para role="description">
Return the bundle for which this object provides meta type information.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Bundle for which this object provides meta type information.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFactoryPids()" xml:id="org.osgi.service.metatype.MetaTypeInformation.getFactoryPids--">
         <title>public String[] getFactoryPids()</title>
         <para role="description">
Return the Factory PIDs (for ManagedServiceFactories) for which
 ObjectClassDefinition information is available.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Array of Factory PIDs.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getPids()" xml:id="org.osgi.service.metatype.MetaTypeInformation.getPids--">
         <title>public String[] getPids()</title>
         <para role="description">
Return the PIDs (for ManagedServices) for which ObjectClassDefinition
 information is available.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Array of PIDs.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="MetaTypeProvider" xml:id="org.osgi.service.metatype.MetaTypeProvider">
      <title>public interface MetaTypeProvider</title>
      <para>
Provides access to metatypes. This interface can be implemented on a Managed
 Service or Managed Service Factory as well as registered as a service. When
 registered as a service, it must be registered with a
 <link linkend="org.osgi.service.metatype.MetaTypeProvider.METATYPE_FACTORY_PID">METATYPE_FACTORY_PID</link> or <link linkend="org.osgi.service.metatype.MetaTypeProvider.METATYPE_PID">METATYPE_PID</link> service property (or
 both). Any PID mentioned in either of these factories must be a valid
 argument to the <link linkend="org.osgi.service.metatype.MetaTypeProvider.getObjectClassDefinition-String-String-">getObjectClassDefinition(String, String)</link> method.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="METATYPE_FACTORY_PID" xml:id="org.osgi.service.metatype.MetaTypeProvider.METATYPE_FACTORY_PID">
         <title>public static final String METATYPE_FACTORY_PID = "metatype.factory.pid"</title>
         <para>
Service property to signal that this service has
 <link linkend="org.osgi.service.metatype.ObjectClassDefinition">ObjectClassDefinition</link> objects for the given factory PIDs. The
 type of this service property is <code>String+</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="METATYPE_PID" xml:id="org.osgi.service.metatype.MetaTypeProvider.METATYPE_PID">
         <title>public static final String METATYPE_PID = "metatype.pid"</title>
         <para>
Service property to signal that this service has
 <link linkend="org.osgi.service.metatype.ObjectClassDefinition">ObjectClassDefinition</link> objects for the given PIDs. The type of
 this service property is <code>String+</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getLocales()" xml:id="org.osgi.service.metatype.MetaTypeProvider.getLocales--">
         <title>public String[] getLocales()</title>
         <para role="description">
Return a list of available locales.
 
 The results must be names that consists of language [ _ country [ _
 variation ]] as is customary in the <code>Locale</code> class.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An array of locale strings or <code>null</code> if there is no locale
         specific localization can be found.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getObjectClassDefinition(String,String)" xml:id="org.osgi.service.metatype.MetaTypeProvider.getObjectClassDefinition-String-String-">
         <title>public ObjectClassDefinition getObjectClassDefinition(String id,String locale)</title>
         <formalpara role="parameter">
            <title>id</title>
            <para>The ID of the requested object class. This can be a pid or
        factory pid returned by getPids or getFactoryPids.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>locale</title>
            <para>The locale of the definition or <code>null</code> for default
        locale.</para>
         </formalpara>
         <para role="description">
Returns an object class definition for the specified id localized to the
 specified locale.
 
 </para>
         <para>
 The locale parameter must be a name that consists of <code>language</code>[
 "_" <code>country</code>[ "_" <code>variation</code>] ] as is customary in the
 <code>Locale</code> class. This <code>Locale</code> class is not used because
 certain profiles do not contain it.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>ObjectClassDefinition</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the id or locale arguments are not
         valid   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="MetaTypeService" xml:id="org.osgi.service.metatype.MetaTypeService">
      <title>public interface MetaTypeService</title>
      <para>
The MetaType Service can be used to obtain meta type information for a
 bundle. The MetaType Service will examine the specified bundle for meta type
 documents to create the returned <code>MetaTypeInformation</code> object.
 
 </para>
      <para>
 If the specified bundle does not contain any meta type documents, then a
 <code>MetaTypeInformation</code> object will be returned that wrappers any
 <code>ManagedService</code> or <code>ManagedServiceFactory</code> services registered
 by the specified bundle that implement <code>MetaTypeProvider</code>. Thus the
 MetaType Service can be used to retrieve meta type information for bundles
 which contain a meta type documents or which provide their own
 <code>MetaTypeProvider</code> objects.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="field" xreflabel="METATYPE_CAPABILITY_NAME" xml:id="org.osgi.service.metatype.MetaTypeService.METATYPE_CAPABILITY_NAME">
         <title>public static final String METATYPE_CAPABILITY_NAME = "osgi.metatype"</title>
         <para>
Capability name for meta type document processors.
 
 </para>
         <para>
 Used in <code>Provide-Capability</code> and <code>Require-Capability</code>
 manifest headers with the <code>osgi.extender</code> namespace. For example:
 
 </para>
         <programlisting> Require-Capability: osgi.extender;
  filter:="(&amp;(osgi.extender=osgi.metatype)(version&gt;=1.3)(!(version&gt;=2.0)))"</programlisting>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="METATYPE_DOCUMENTS_LOCATION" xml:id="org.osgi.service.metatype.MetaTypeService.METATYPE_DOCUMENTS_LOCATION">
         <title>public static final String METATYPE_DOCUMENTS_LOCATION = "OSGI-INF/metatype"</title>
         <para>
Location of meta type documents. The MetaType Service will process each
 entry in the meta type documents directory.
   </para>
      </section>
      <section role="method" xreflabel="getMetaTypeInformation(Bundle)" xml:id="org.osgi.service.metatype.MetaTypeService.getMetaTypeInformation-Bundle-">
         <title>public MetaTypeInformation getMetaTypeInformation(Bundle bundle)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The bundle for which meta type information is requested.</para>
         </formalpara>
         <para role="description">
Return the MetaType information for the specified bundle.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A MetaTypeInformation object for the specified bundle.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ObjectClassDefinition" xml:id="org.osgi.service.metatype.ObjectClassDefinition">
      <title>public interface ObjectClassDefinition</title>
      <para>
Description for the data type information of an objectclass.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="ALL" xml:id="org.osgi.service.metatype.ObjectClassDefinition.ALL">
         <title>public static final int ALL = -1</title>
         <para>
Argument for <code>getAttributeDefinitions(int)</code>.
 </para>
         <para>
            <code>ALL</code> indicates that all the definitions are returned. The value is
 -1.</para>
      </section>
      <section role="field" xreflabel="OPTIONAL" xml:id="org.osgi.service.metatype.ObjectClassDefinition.OPTIONAL">
         <title>public static final int OPTIONAL = 2</title>
         <para>
Argument for <code>getAttributeDefinitions(int)</code>.
 </para>
         <para>
            <code>OPTIONAL</code> indicates that only the optional definitions are
 returned. The value is 2.</para>
      </section>
      <section role="field" xreflabel="REQUIRED" xml:id="org.osgi.service.metatype.ObjectClassDefinition.REQUIRED">
         <title>public static final int REQUIRED = 1</title>
         <para>
Argument for <code>getAttributeDefinitions(int)</code>.
 </para>
         <para>
            <code>REQUIRED</code> indicates that only the required definitions are
 returned. The value is 1.</para>
      </section>
      <section role="method" xreflabel="getAttributeDefinitions(int)" xml:id="org.osgi.service.metatype.ObjectClassDefinition.getAttributeDefinitions-int-">
         <title>public AttributeDefinition[] getAttributeDefinitions(int filter)</title>
         <formalpara role="parameter">
            <title>filter</title>
            <para>
               <code>ALL</code>,<code>REQUIRED</code>,<code>OPTIONAL</code>
            </para>
         </formalpara>
         <para role="description">
Return the attribute definitions for this object class.
 
 </para>
         <para>
 Return a set of attributes. The filter parameter can distinguish between
 <code>ALL</code>,<code>REQUIRED</code> or the <code>OPTIONAL</code> attributes.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An array of attribute definitions or <code>null</code> if no
         attributes are selected</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getDescription()" xml:id="org.osgi.service.metatype.ObjectClassDefinition.getDescription--">
         <title>public String getDescription()</title>
         <para role="description">
Return a description of this object class.
 
 The description may be localized.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The description of this object class.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getIcon(int)" xml:id="org.osgi.service.metatype.ObjectClassDefinition.getIcon-int-">
         <title>public InputStream getIcon(int size) throws IOException</title>
         <formalpara role="parameter">
            <title>size</title>
            <para>Requested size of an icon. For example, a 16x16 pixel icon
        has a size of 16</para>
         </formalpara>
         <para role="description">
Return an <code>InputStream</code> object that can be used to create an icon
 from.
 
 </para>
         <para>
 Indicate the size and return an <code>InputStream</code> object containing an
 icon. The returned icon maybe larger or smaller than the indicated size.
 
 </para>
         <para>
 The icon may depend on the localization.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An InputStream representing an icon or <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– If the <code>InputStream</code> cannot be returned.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getID()" xml:id="org.osgi.service.metatype.ObjectClassDefinition.getID--">
         <title>public String getID()</title>
         <para role="description">
Return the id of this object class.
 
 </para>
         <para>
            <code>ObjectDefintion</code> objects share a global namespace in the registry.
 They share this aspect with LDAP/X.500 attributes. In these standards the
 OSI Object Identifier (OID) is used to uniquely identify object classes.
 If such an OID exists, (which can be requested at several standard
 organizations and many companies already have a node in the tree) it can
 be returned here. Otherwise, a unique id should be returned which can be
 a java class name (reverse domain name) or generated with a GUID
 algorithm. Note that all LDAP defined object classes already have an OID
 associated. It is strongly advised to define the object classes from
 existing LDAP schemes which will give the OID for free. Many such schemes
 exist ranging from postal addresses to DHCP parameters.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The id of this object class.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getName()" xml:id="org.osgi.service.metatype.ObjectClassDefinition.getName--">
         <title>public String getName()</title>
         <para role="description">
Return the name of this object class.
 
 The name may be localized.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of this object class.</para>
         </formalpara>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.service.metatype.annotations" xml:id="org.osgi.service.metatype.annotations" xml:base="../../generated/javadoc/docbook/org.osgi.service.metatype.annotations.xml">
   <title>org.osgi.service.metatype.annotations</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.metatype.annotations-version">Version 1.3</releaseinfo>
      <edition xml:id="org.osgi.service.metatype.annotations-version.number">1.3</edition>
   </info>
   <para>
Metatype Annotations Package Version 1.3.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.metatype.annotations; version="[1.3,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.metatype.annotations; version="[1.3,1.4)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.metatype.annotations.AttributeDefinition">
                  <code>AttributeDefinition</code>
               </link> - <code>AttributeDefinition</code> information for the annotated method.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.metatype.annotations.AttributeType">
                  <code>AttributeType</code>
               </link> - 
Attribute types for the <link linkend="org.osgi.service.metatype.annotations.AttributeDefinition">AttributeDefinition</link> annotation.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.metatype.annotations.Designate">
                  <code>Designate</code>
               </link> - 
Generate a <code>Designate</code> element in the Meta Type Resource for an
 <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition">ObjectClassDefinition</link> using the annotated Declarative Services
 component.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.metatype.annotations.Icon">
                  <code>Icon</code>
               </link> - <code>Icon</code> information for an <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition">ObjectClassDefinition</link>.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition">
                  <code>ObjectClassDefinition</code>
               </link> - 
Generate a Meta Type Resource using the annotated type.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.metatype.annotations.Option">
                  <code>Option</code>
               </link> - <code>Option</code> information for an <link linkend="org.osgi.service.metatype.annotations.AttributeDefinition">AttributeDefinition</link>.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="AttributeDefinition" xml:id="org.osgi.service.metatype.annotations.AttributeDefinition">
      <title>@AttributeDefinition</title>
      <para>
         <code>AttributeDefinition</code> information for the annotated method.
 
 </para>
      <para>
 Each method of a type annotated by <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition">ObjectClassDefinition</link> has an
 implied AttributeDefinition annotation. This annotation is only used to
 specify non-default AttributeDefinition information.
 
 </para>
      <para>
 The <code>id</code> of this AttributeDefinition is generated from the name of the
 annotated method. The annotated method name is processed from left to right
 changing each character as follows:
 </para>
      <itemizedlist>
         <listitem>
            <para>A dollar sign (<code>'$'</code> \u0024) is removed unless it is followed
 by another dollar sign in which case the two consecutive dollar signs (
 <code>'$$'</code>) are changed to a single dollar sign.</para>
         </listitem>
         <listitem>
            <para>A low line (<code>'_'</code> \u005F) is changed to a full stop (
 <code>'.'</code> \u002E) unless is it followed by another low line in which
 case the two consecutive low lines (<code>'__'</code>) are changed to a single low
 line.</para>
         </listitem>
         <listitem>
            <para>All other characters are unchanged.</para>
         </listitem>
      </itemizedlist>
      <para>
 This id is the value of the id attribute of the generate AD element and is
 used as the name of the corresponding configuration property.
 
 </para>
      <para>
 This annotation is not processed at runtime. It must be processed by tools
 and used to contribute to a Meta Type Resource document for the bundle.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <code>The AD element of a Meta Type Resource.</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>METHOD</code>
         </para>
      </formalpara>
      <section role="method" xreflabel="name" xml:id="org.osgi.service.metatype.annotations.AttributeDefinition.name--">
         <title>String name default ""</title>
         <para role="description">
The human readable name of this AttributeDefinition.
 
 </para>
         <para>
 If not specified, the name of this AttributeDefinition is derived from
 the name of the annotated method. For example, low line (<code>'_'</code>
 \u005F) and dollar sign (<code>'$'</code> \u0024) are replaced with
 space (<code>' '</code> \u0020) and space is inserted between camel case
 words.
 
 </para>
         <para>
 If the name begins with the percent sign (<code>'%'</code> \u0025), the
 name can be <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.localization--">localized</link>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The name attribute of the AD element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="description" xml:id="org.osgi.service.metatype.annotations.AttributeDefinition.description--">
         <title>String description default ""</title>
         <para role="description">
The human readable description of this AttributeDefinition.
 
 </para>
         <para>
 If not specified, the description of this AttributeDefinition is the
 empty string.
 
 </para>
         <para>
 If the description begins with the percent sign (<code>'%'</code> \u0025),
 the description can be <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.localization--">localized</link>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The description attribute of the AD element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="type" xml:id="org.osgi.service.metatype.annotations.AttributeDefinition.type--">
         <title>AttributeType type default STRING</title>
         <para role="description">
The type of this AttributeDefinition.
 
 </para>
         <para>
 This must be one of the defined <link linkend="org.osgi.service.metatype.annotations.AttributeType">attributes types</link>.
 
 </para>
         <para>
 If not specified, the type is derived from the return type of the
 annotated method. Return types of <code>Class</code> and <code>Enum</code> are
 mapped to <link linkend="org.osgi.service.metatype.annotations.AttributeType.STRING">STRING</link>. If the return type is
 <code>List</code>, <code>Set</code>, <code>Collection</code>, <code>Iterable</code> or some
 type which can be determined at annotation processing time to
 </para>
         <orderedlist>
            <listitem>
               <para>be a subtype of <code>Collection</code> and</para>
            </listitem>
            <listitem>
               <para>have a public no argument constructor,</para>
            </listitem>
         </orderedlist>
         <para>
 then the type is derived from the generic type. For example, a return
 type of <code>List&lt;String&gt;</code> will be mapped to
 <link linkend="org.osgi.service.metatype.annotations.AttributeType.STRING">STRING</link>. A return type of a single
 dimensional array is supported and the type is the component type of the
 array. Multi dimensional arrays are not supported. Annotation return
 types are not supported. Any unrecognized type is mapped to
 <link linkend="org.osgi.service.metatype.annotations.AttributeType.STRING">STRING</link>. A tool processing the annotation
 should declare an error for unsupported return types.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The type attribute of the AD element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="cardinality" xml:id="org.osgi.service.metatype.annotations.AttributeDefinition.cardinality--">
         <title>int cardinality default 0</title>
         <para role="description">
The cardinality of this AttributeDefinition.
 
 </para>
         <para>
 If not specified, the cardinality is derived from the return type of the
 annotated method. For an array return type, the cardinality is a large
 positive value. If the return type is <code>List</code>, <code>Set</code>,
 <code>Collection</code>, <code>Iterable</code> or some type which can be determined
 at annotation processing time to
 </para>
         <orderedlist>
            <listitem>
               <para>be a subtype of <code>Collection</code> and</para>
            </listitem>
            <listitem>
               <para>have a public no argument constructor,</para>
            </listitem>
         </orderedlist>
         <para>
 the cardinality is a large negative value. Otherwise, the cardinality is
 0.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The cardinality attribute of the AD element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="min" xml:id="org.osgi.service.metatype.annotations.AttributeDefinition.min--">
         <title>String min default ""</title>
         <para role="description">
The minimum value for this AttributeDefinition.
 
 </para>
         <para>
 If not specified, there is no minimum value.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The min attribute of the AD element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="max" xml:id="org.osgi.service.metatype.annotations.AttributeDefinition.max--">
         <title>String max default ""</title>
         <para role="description">
The maximum value for this AttributeDefinition.
 
 </para>
         <para>
 If not specified, there is no maximum value.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The max attribute of the AD element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="defaultValue" xml:id="org.osgi.service.metatype.annotations.AttributeDefinition.defaultValue--">
         <title>String[] defaultValue default {}</title>
         <para role="description">
The default value for this AttributeDefinition.
 
 </para>
         <para>
 The specified values are concatenated into a comma delimited list to
 become the value of the <code>default</code> attribute of the generated
 <code>AD</code> element.
 
 </para>
         <para>
 If not specified and the annotated method is an annotation element that
 has a <code>default</code> value, then the value of this element is the
 <code>default</code> value of the annotated element. Otherwise, there is no
 default value.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The default attribute of the AD element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="required" xml:id="org.osgi.service.metatype.annotations.AttributeDefinition.required--">
         <title>boolean required default true</title>
         <para role="description">
The required value for this AttributeDefinition.
 
 </para>
         <para>
 If not specified, the value is <code>true</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The required attribute of the AD element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="options" xml:id="org.osgi.service.metatype.annotations.AttributeDefinition.options--">
         <title>Option[] options default {}</title>
         <para role="description">
The option information for this AttributeDefinition.
 
 </para>
         <para>
 For each specified <link linkend="org.osgi.service.metatype.annotations.Option">Option</link>, an <code>Option</code> element is generated
 for this AttributeDefinition.

 </para>
         <para>
 If not specified, the option information is derived from the return type
 of the annotated method. If the return type is an <code>enum</code>, a single
 dimensional array of an <code>enum</code>, or a <code>List</code>, <code>Set</code>,
 <code>Collection</code>, <code>Iterable</code> or some type which can be determined
 at annotation processing time to
 </para>
         <orderedlist>
            <listitem>
               <para>be a subtype of <code>Collection</code> and</para>
            </listitem>
            <listitem>
               <para>have a public no argument constructor,</para>
            </listitem>
         </orderedlist>
         <para>
 with a generic type of an <code>enum</code>, then the value of this element
 has an <link linkend="org.osgi.service.metatype.annotations.Option">Option</link> for each value of the <code>enum</code>. The label and
 value of each <link linkend="org.osgi.service.metatype.annotations.Option">Option</link> are set to the name of the corresponding
 <code>enum</code> value. Otherwise, no <code>Option</code> elements will be
 generated.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The Option element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="AttributeType" xml:id="org.osgi.service.metatype.annotations.AttributeType">
      <title>enum AttributeType</title>
      <para>
Attribute types for the <link linkend="org.osgi.service.metatype.annotations.AttributeDefinition">AttributeDefinition</link> annotation.
   </para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.metatype.annotations.AttributeDefinition.type--">AttributeDefinition.type()</link>
         </para>
      </formalpara>
      <section role="field" xreflabel="STRING" xml:id="org.osgi.service.metatype.annotations.AttributeType.STRING">
         <title>STRING</title>
         <para>
The <code>String</code> type.
 
 </para>
         <para>
 Attributes of this type should be stored as <code>String</code>,
 <code>List&lt;String&gt;</code> or <code>String[]</code> objects, depending on the
 <link linkend="org.osgi.service.metatype.annotations.AttributeDefinition.cardinality--">cardinality</link> value.</para>
      </section>
      <section role="field" xreflabel="LONG" xml:id="org.osgi.service.metatype.annotations.AttributeType.LONG">
         <title>LONG</title>
         <para>
The <code>Long</code> type.
 
 </para>
         <para>
 Attributes of this type should be stored as <code>Long</code>,
 <code>List&lt;Long&gt;</code> or <code>long[]</code> objects, depending on the
 <code>AttributeDefinition#cardinality() cardinality</code> value.</para>
      </section>
      <section role="field" xreflabel="INTEGER" xml:id="org.osgi.service.metatype.annotations.AttributeType.INTEGER">
         <title>INTEGER</title>
         <para>
The <code>Integer</code> type.
 
 </para>
         <para>
 Attributes of this type should be stored as <code>Integer</code>,
 <code>List&lt;Integer&gt;</code> or <code>int[]</code> objects, depending on the
 <code>AttributeDefinition#cardinality() cardinality</code> value.</para>
      </section>
      <section role="field" xreflabel="SHORT" xml:id="org.osgi.service.metatype.annotations.AttributeType.SHORT">
         <title>SHORT</title>
         <para>
The <code>Short</code> type.
 
 </para>
         <para>
 Attributes of this type should be stored as <code>Short</code>,
 <code>List&lt;Short&gt;</code> or <code>short[]</code> objects, depending on the
 <code>AttributeDefinition#cardinality() cardinality</code> value.</para>
      </section>
      <section role="field" xreflabel="CHARACTER" xml:id="org.osgi.service.metatype.annotations.AttributeType.CHARACTER">
         <title>CHARACTER</title>
         <para>
The <code>Character</code> type.
 
 </para>
         <para>
 Attributes of this type should be stored as <code>Character</code>,
 <code>List&lt;Character&gt;</code> or <code>char[]</code> objects, depending on the
 <code>AttributeDefinition#cardinality() cardinality</code> value.</para>
      </section>
      <section role="field" xreflabel="BYTE" xml:id="org.osgi.service.metatype.annotations.AttributeType.BYTE">
         <title>BYTE</title>
         <para>
The <code>Byte</code> type.
 
 </para>
         <para>
 Attributes of this type should be stored as <code>Byte</code>,
 <code>List&lt;Byte&gt;</code> or <code>byte[]</code> objects, depending on the
 <code>AttributeDefinition#cardinality() cardinality</code> value.</para>
      </section>
      <section role="field" xreflabel="DOUBLE" xml:id="org.osgi.service.metatype.annotations.AttributeType.DOUBLE">
         <title>DOUBLE</title>
         <para>
The <code>Double</code> type.
 
 </para>
         <para>
 Attributes of this type should be stored as <code>Double</code>,
 <code>List&lt;Double&gt;</code> or <code>double[]</code> objects, depending on the
 <code>AttributeDefinition#cardinality() cardinality</code> value.</para>
      </section>
      <section role="field" xreflabel="FLOAT" xml:id="org.osgi.service.metatype.annotations.AttributeType.FLOAT">
         <title>FLOAT</title>
         <para>
The <code>Float</code> type.
 
 </para>
         <para>
 Attributes of this type should be stored as <code>Float</code>,
 <code>List&lt;Float&gt;</code> or <code>float[]</code> objects, depending on the
 <code>AttributeDefinition#cardinality() cardinality</code> value.</para>
      </section>
      <section role="field" xreflabel="BOOLEAN" xml:id="org.osgi.service.metatype.annotations.AttributeType.BOOLEAN">
         <title>BOOLEAN</title>
         <para>
The <code>Boolean</code> type.
 
 </para>
         <para>
 Attributes of this type should be stored as <code>Boolean</code>,
 <code>List&lt;Boolean&gt;</code> or <code>boolean[]</code> objects depending on
 <code>AttributeDefinition#cardinality() cardinality</code>.</para>
      </section>
      <section role="field" xreflabel="PASSWORD" xml:id="org.osgi.service.metatype.annotations.AttributeType.PASSWORD">
         <title>PASSWORD</title>
         <para>
The <code>Password</code> type.
 
 </para>
         <para>
 Attributes of this type must be stored as <code>String</code>,
 <code>List&lt;String&gt;</code> or <code>String[]</code> objects depending on
 <link linkend="org.osgi.service.metatype.annotations.AttributeDefinition.cardinality--">cardinality</link>.
 
 </para>
         <para>
 A <code>Password</code> must be treated as a <code>String</code> but the type can
 be used to disguise the information when displayed to a user to prevent
 it from being seen.</para>
      </section>
   </section>
   <section role="class" xreflabel="Designate" xml:id="org.osgi.service.metatype.annotations.Designate">
      <title>@Designate</title>
      <para>
Generate a <code>Designate</code> element in the Meta Type Resource for an
 <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition">ObjectClassDefinition</link> using the annotated Declarative Services
 component.
 
 </para>
      <para>
 This annotation must be used on a type that is also annotated with the
 Declarative Services <link linkend="org.osgi.service.component.annotations.Component">Component</link> annotation. The component must only have a single PID which is
 used for the generated <code>Designate</code> element.
 
 </para>
      <para>
 This annotation is not processed at runtime. It must be processed by tools
 and used to contribute to a Meta Type Resource document for the bundle.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <code>The Designate element of a Meta Type Resource.</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>TYPE</code>
         </para>
      </formalpara>
      <section role="method" xreflabel="ocd" xml:id="org.osgi.service.metatype.annotations.Designate.ocd--">
         <title>Class&lt;?&gt; ocd</title>
         <para role="description">
The type of the <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition">ObjectClassDefinition</link> for this Designate.
 
 </para>
         <para>
 The specified type must be annotated with <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition">ObjectClassDefinition</link>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The ocdref attribute of the Designate element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="factory" xml:id="org.osgi.service.metatype.annotations.Designate.factory--">
         <title>boolean factory default false</title>
         <para role="description">
Specifies whether this Designate is for a factory PID.
 
 </para>
         <para>
 If <code>false</code>, then the PID value from the annotated component will be
 used in the <code>pid</code> attribute of the generated <code>Designate</code>
 element. If <code>true</code>, then the PID value from the annotated component
 will be used in the <code>factoryPid</code> attribute of the generated
 <code>Designate</code> element.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The pid and factoryPid attributes of the Designate element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Icon" xml:id="org.osgi.service.metatype.annotations.Icon">
      <title>@Icon</title>
      <para>
         <code>Icon</code> information for an <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition">ObjectClassDefinition</link>.
   </para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.icon--">ObjectClassDefinition.icon()</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code/>
         </para>
      </formalpara>
      <section role="method" xreflabel="resource" xml:id="org.osgi.service.metatype.annotations.Icon.resource--">
         <title>String resource</title>
         <para role="description">
The resource name for this Icon.
 
 </para>
         <para>
 The resource is a URL. The resource URL can be relative to the root of
 the bundle containing the Meta Type Resource.
 
 </para>
         <para>
 If the resource begins with the percent sign (<code>'%'</code> \u0025),
 the resource can be <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.localization--">localized</link>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The resource attribute of the Icon element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="size" xml:id="org.osgi.service.metatype.annotations.Icon.size--">
         <title>int size</title>
         <para role="description">
The pixel size of this Icon.
 
 </para>
         <para>
 For example, 32 represents a 32x32 icon.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The size attribute of the Icon element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ObjectClassDefinition" xml:id="org.osgi.service.metatype.annotations.ObjectClassDefinition">
      <title>@ObjectClassDefinition</title>
      <para>
Generate a Meta Type Resource using the annotated type.
 
 </para>
      <para>
 This annotation can be used without defining any element values since
 defaults can be generated from the annotated type. Each method of the
 annotated type has an implied <link linkend="org.osgi.service.metatype.annotations.AttributeDefinition">AttributeDefinition</link> annotation if not
 explicitly annotated.
 
 </para>
      <para>
 This annotation may only be used on annotation types and interface types. Use
 on concrete or abstract class types is unsupported. If applied to an
 interface then all methods inherited from super types are included as
 attributes.
 
 </para>
      <para>
 This annotation is not processed at runtime. It must be processed by tools
 and used to generate a Meta Type Resource document for the bundle.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <code>The OCD element of a Meta Type Resource.</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>TYPE</code>
         </para>
      </formalpara>
      <section role="method" xreflabel="id" xml:id="org.osgi.service.metatype.annotations.ObjectClassDefinition.id--">
         <title>String id default ""</title>
         <para role="description">
The id of this ObjectClassDefinition.
 
 </para>
         <para>
 If not specified, the id of this ObjectClassDefinition is the fully
 qualified name of the annotated type using the dollar sign (<code>'$'</code>
 \u0024) to separate nested class names from the name of their
 enclosing class. The id is not to be confused with a PID which can be
 specified by the <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.pid--">pid()</link> or <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.factoryPid--">factoryPid()</link> element.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The id attribute of the OCD element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="name" xml:id="org.osgi.service.metatype.annotations.ObjectClassDefinition.name--">
         <title>String name default ""</title>
         <para role="description">
The human readable name of this ObjectClassDefinition.
 
 </para>
         <para>
 If not specified, the name of this ObjectClassDefinition is derived from
 the <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.id--">id()</link>. For example, low line (<code>'_'</code> \u005F) and
 dollar sign (<code>'$'</code> \u0024) are replaced with space (<code>' '</code>
 \u0020) and space is inserted between camel case words.
 
 </para>
         <para>
 If the name begins with the percent sign (<code>'%'</code> \u0025), the
 name can be <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.localization--">localized</link>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The name attribute of the OCD element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="description" xml:id="org.osgi.service.metatype.annotations.ObjectClassDefinition.description--">
         <title>String description default ""</title>
         <para role="description">
The human readable description of this ObjectClassDefinition.
 
 </para>
         <para>
 If not specified, the description of this ObjectClassDefinition is the
 empty string.
 
 </para>
         <para>
 If the description begins with the percent sign (<code>'%'</code> \u0025),
 the description can be <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.localization--">localized</link>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The description attribute of the OCD element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="localization" xml:id="org.osgi.service.metatype.annotations.ObjectClassDefinition.localization--">
         <title>String localization default ""</title>
         <para role="description">
The localization resource of this ObjectClassDefinition.
 
 </para>
         <para>
 This refers to a resource property entry in the bundle that can be
 augmented with locale information. If not specified, the localization
 resource for this ObjectClassDefinition is the string
 "OSGI-INF/l10n/" followed by the <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.id--">id()</link>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The localization attribute of the MetaData element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="pid" xml:id="org.osgi.service.metatype.annotations.ObjectClassDefinition.pid--">
         <title>String[] pid default {}</title>
         <para role="description">
The PIDs associated with this ObjectClassDefinition.
 
 </para>
         <para>
 For each specified PID, a <code>Designate</code> element with a pid attribute
 is generated that <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.id--">references</link> this ObjectClassDefinition.
 
 </para>
         <para>
 The <link linkend="org.osgi.service.metatype.annotations.Designate">Designate</link> annotation can also be used to associate a
 Declarative Services component with an ObjectClassDefinition and generate
 a <code>Designate</code> element.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The pid attribute of the Designate element of a Meta Type Resource.</code>, <link linkend="org.osgi.service.metatype.annotations.Designate">Designate</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="factoryPid" xml:id="org.osgi.service.metatype.annotations.ObjectClassDefinition.factoryPid--">
         <title>String[] factoryPid default {}</title>
         <para role="description">
The factory PIDs associated with this ObjectClassDefinition.
 
 </para>
         <para>
 For each specified factory PID, a <code>Designate</code> element with a
 factoryPid attribute is generated that <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.id--">references</link> this
 ObjectClassDefinition.
 
 </para>
         <para>
 The <link linkend="org.osgi.service.metatype.annotations.Designate">Designate</link> annotation can also be used to associate a
 Declarative Services component with an ObjectClassDefinition and generate
 a <code>Designate</code> element.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The factoryPid attribute of the Designate element of a Meta Type Resource.</code>, <link linkend="org.osgi.service.metatype.annotations.Designate">Designate</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="icon" xml:id="org.osgi.service.metatype.annotations.ObjectClassDefinition.icon--">
         <title>Icon[] icon default {}</title>
         <para role="description">
The icon resources associated with this ObjectClassDefinition.
 
 </para>
         <para>
 For each specified <link linkend="org.osgi.service.metatype.annotations.Icon">Icon</link>, an <code>Icon</code> element is generated for
 this ObjectClassDefinition. If not specified, no <code>Icon</code> elements
 will be generated.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The Icon element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Option" xml:id="org.osgi.service.metatype.annotations.Option">
      <title>@Option</title>
      <para>
         <code>Option</code> information for an <link linkend="org.osgi.service.metatype.annotations.AttributeDefinition">AttributeDefinition</link>.
   </para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.metatype.annotations.AttributeDefinition.options--">AttributeDefinition.options()</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code/>
         </para>
      </formalpara>
      <section role="method" xreflabel="label" xml:id="org.osgi.service.metatype.annotations.Option.label--">
         <title>String label default ""</title>
         <para role="description">
The human readable label of this Option.
 
 </para>
         <para>
 If not specified, the label of this Option is the empty string.
 
 </para>
         <para>
 If the label begins with the percent sign (<code>'%'</code> \u0025), the
 label can be <link linkend="org.osgi.service.metatype.annotations.ObjectClassDefinition.localization--">localized</link>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The label attribute of the Option element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="value" xml:id="org.osgi.service.metatype.annotations.Option.value--">
         <title>String value</title>
         <para role="description">
The value of this Option.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The value attribute of the Option element of a Meta Type Resource.</code>
            </para>
         </formalpara>
      </section>
   </section>
</section>

  <section xml:id="i1215848">
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i1215866"><title>LDAP.</title>http://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol</bibliomixed>

      <bibliomixed xml:id="i1215870"><title>Understanding and Deploying LDAP
      Directory services</title>Timothy Howes, et al. ISBN 1-57870-070-1,
      MacMillan Technical publishing.</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="107" revision="$Id: 75fb0224e764248a6341fa026ed0d8927294b06b $" version="5" xml:id="service.useradmin" xml:base="../107/service.useradmin.xml">
  <title>User Admin Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.useradmin-version" linkend="org.osgi.service.useradmin"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>OSGi frameworks are often used in places where end users or devices
    initiate actions. These kinds of actions inevitably create a need for
    authenticating the initiator. Authenticating can be done in many different
    ways, including with passwords, one-time token cards, biometrics, and
    certificates.</para>

    <para>Once the initiator is authenticated, it is necessary to verify that
    this principal is authorized to perform the requested action. This
    authorization can only be decided by the operator of the OSGi environment,
    and thus requires administration.</para>

    <para>The User Admin service provides this type of functionality. Bundles
    can use the User Admin service to authenticate an initiator and represent
    this authentication as an <code>Authorization</code> object. Bundles that
    execute actions on behalf of this user can use the
    <code>Authorization</code> object to verify if that user is
    authorized.</para>

    <para>The User Admin service provides authorization based on who runs the
    code, instead of using the Java code-based permission model. See <xref linkend="i1307817"/>. It performs a role similar to <xref linkend="i1307810"/>.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Authentication</emphasis> - A large number of
          authentication schemes already exist, and more will be developed.
          The User Admin service must be flexible enough to adapt to the many
          different authentication schemes that can be run on a computer
          system.</para>
        </listitem>

        <listitem>
          <para><emphasis>Authorization</emphasis> - All bundles should use
          the User Admin service to authenticate users and to find out if
          those users are authorized. It is therefore paramount that a bundle
          can find out authorization information with little effort.</para>
        </listitem>

        <listitem>
          <para><emphasis>Security</emphasis> - Detailed security, based on
          the Framework security model, is needed to provide safe access to
          the User Admin service. It should allow limited access to the
          credentials and other properties.</para>
        </listitem>

        <listitem>
          <para><emphasis>Extensibility</emphasis> - Other bundles should be
          able to build on the User Admin service. It should be possible to
          examine the information from this service and get real-time
          notifications of changes.</para>
        </listitem>

        <listitem>
          <para><emphasis>Properties</emphasis> - The User Admin service must
          maintain a persistent database of users. It must be possible to use
          this database to hold more information about this user.</para>
        </listitem>

        <listitem>
          <para><emphasis>Administration</emphasis> - Administering
          authorizations for each possible action and initiator is
          time-consuming and error-prone. It is therefore necessary to have
          mechanisms to group end users and make it simple to assign
          authorizations to all members of a group at one time.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <para>This Specification defines the following User Admin service
      entities:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>User Admin</emphasis> - This interface manages a
          database of named roles which can be used for authorization and
          authentication purposes.</para>
        </listitem>

        <listitem>
          <para><emphasis>Role</emphasis> - This interface exposes the
          characteristics shared by all roles: a name, a type, and a set of
          properties.</para>
        </listitem>

        <listitem>
          <para><emphasis>User</emphasis> - This interface (which extends
          <code>Role</code>) is used to represent any entity which may have
          credentials associated with it. These credentials can be used to
          authenticate an initiator.</para>
        </listitem>

        <listitem>
          <para><emphasis>Group</emphasis> - This interface (which extends
          <code>User</code>) is used to contain an aggregation of named
          <code>Role</code> objects (<code>Group</code> or <code>User</code>
          objects).</para>
        </listitem>

        <listitem>
          <para><emphasis>Authorization</emphasis> - This interface
          encapsulates an authorization context on which bundles can base
          authorization decisions.</para>
        </listitem>

        <listitem>
          <para><emphasis>User Admin Event</emphasis> - This class is used to
          represent a role change event.</para>
        </listitem>

        <listitem>
          <para><emphasis>User Admin Listener</emphasis> - This interface
          provides a listener for events of type <code>UserAdminEvent</code>
          that can be registered as a service.</para>
        </listitem>

        <listitem>
          <para><emphasis>User Admin Permission</emphasis> - This permission
          is needed to configure and access the roles managed by a User Admin
          service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Role.USER_ANYONE</emphasis> - This is a special User
          object that represents <emphasis>any</emphasis> user, it implies all
          other User objects. It is also used when a Group is used with only
          basic members. The <code>Role.USER_ANYONE</code> is then the only
          required member.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>User Admin Service, org.osgi.service.useradmin</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="4.681in" contentwidth="6.500in" fileref="useradmin-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Operation</title>

      <para>An Operator uses the User Admin service to define OSGi framework
      users and configure them with properties, credentials, and
      <emphasis>roles</emphasis>.</para>

      <para>A <code>Role</code> object represents the initiator of a request
      (human or otherwise). This specification defines two types of
      roles:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>User</emphasis> - A <code>User</code> object can be
          configured with credentials, such as a password, and properties,
          such as address, telephone number, and so on.</para>
        </listitem>

        <listitem>
          <para><emphasis>Group</emphasis> - A <code>Group</code> object is an
          aggregation of <emphasis>basic</emphasis> and
          <emphasis>required</emphasis> roles. Basic and required roles are
          used in the authorization phase.</para>
        </listitem>
      </itemizedlist>

      <para>An OSGi framework can have several entry points, each of which
      will be responsible for authenticating incoming requests. An example of
      an entry point is the Http Service, which delegates authentication of
      incoming requests to the <code>handleSecurity</code> method of the
      <code>HttpContext</code> object that was specified when the target
      servlet or resource of the request was registered.</para>

      <para>The OSGi framework entry points should use the information in the
      User Admin service to authenticate incoming requests, such as a password
      stored in the private credentials or the use of a certificate.</para>

      <para>A bundle can determine if a request for an action is authorized by
      looking for a <code>Role</code> object that has the name of the
      requested action.</para>

      <para>The bundle may execute the action if the <code>Role</code> object
      representing the initiator <emphasis>implies</emphasis> the
      <code>Role</code> object representing the requested action.</para>

      <para>For example, an initiator <code>Role</code> object
      <emphasis>X</emphasis> implies an action <code>Group</code> object
      <emphasis>A</emphasis> if:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>X</emphasis> implies at least one of
          <emphasis>A</emphasis>'s basic members, and</para>
        </listitem>

        <listitem>
          <para><emphasis>X</emphasis> implies all of <emphasis>A</emphasis>'s
          required members.</para>
        </listitem>
      </itemizedlist>

      <para>An initiator <code>Role</code> object <emphasis>X</emphasis>
      implies an action <code>User</code> object <emphasis>A</emphasis>
      if:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>A</emphasis> and<emphasis> X</emphasis> are
          equal.</para>
        </listitem>
      </itemizedlist>

      <para>The <code>Authorization</code> class handles this non-trivial
      logic. The User Admin service can capture the privileges of an
      authenticated <code>User</code> object into an
      <code>Authorization</code> object. The
      <code>Authorization.hasRole</code> method checks if the authenticate
      <code>User</code> object has (or implies) a specified action
      <code>Role</code> object.</para>

      <para>For example, in the case of the Http Service, the
      <code>HttpContext</code> object can authenticate the initiator and place
      an <code>Authorization</code> object in the request header. The servlet
      calls the <code>hasRole</code> method on this <code>Authorization</code>
      object to verify that the initiator has the authority to perform a
      certain action. See <xref linkend="service.http.authentication"/>.</para>
    </section>
  </section>

  <section>
    <title>Authentication</title>

    <para>The authentication phase determines if the initiator is actually the
    one it says it is. Mechanisms to authenticate always need some information
    related to the user or the OSGi framework to authenticate an external
    user. This information can consist of the following:</para>

    <itemizedlist>
      <listitem>
        <para>A secret known only to the initiator.</para>
      </listitem>

      <listitem>
        <para>Knowledge about cards that can generate a unique token.</para>
      </listitem>

      <listitem>
        <para>Public information like certificates of trusted signers.</para>
      </listitem>

      <listitem>
        <para>Information about the user that can be measured in a trusted
        way.</para>
      </listitem>

      <listitem>
        <para>Other specific information.</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Repository</title>

      <para>The User Admin service offers a repository of <code>Role</code>
      objects. Each <code>Role</code> object has a unique name and a set of
      properties that are readable by anyone, and are changeable when the
      changer has the <code>UserAdminPermission</code>. Additionally,
      <code>User</code> objects, a sub-interface of <code>Role</code>, also
      have a set of private protected properties called credentials.
      Credentials are an extra set of properties that are used to authenticate
      users and that are protected by <code>UserAdminPermission</code>.</para>

      <para>Properties are accessed with the <code>Role.getProperties()</code>
      method and credentials with the
      <code>User.getCredentials()</code>method. Both methods return a
      <code>Dictionary</code> object containing key/value pairs. The keys are
      <code>String</code> objects and the values of the
      <code>Dictionary</code> object are limited to <code>String</code> or
      <code>byte[ ]</code> objects.</para>

      <para>This specification does not define any standard keys for the
      properties or credentials. The keys depend on the implementation of the
      authentication mechanism and are not formally defined by OSGi
      specifications.</para>

      <para>The repository can be searched for objects that have a unique
      property (key/value pair) with the method
      <code>UserAdmin.getUser(String,String)</code>. This makes it easy to
      find a specific user related to a specific authentication mechanism. For
      example, a secure card mechanism that generates unique tokens could have
      a serial number identifying the user. The owner of the card could be
      found with the method</para>

      <programlisting>User owner = useradmin.getUser(
    "secure-card-serial", "132456712-1212" );</programlisting>

      <para>If multiple <code>User</code> objects have the same property (key
      <emphasis>and</emphasis> value), a <code>null</code> is returned.</para>

      <para>There is a convenience method to verify that a user has a
      credential without actually getting the credential. This is the
      <code>User.hasCredential(String,Object)</code> method.</para>

      <para>Access to credentials is protected on a name basis by
      <code>UserAdminPermission</code>. Because properties can be read by
      anyone with access to a <code>User</code> object,
      <code>UserAdminPermission</code> only protects change access to
      properties.</para>
    </section>

    <section>
      <title>Basic Authentication</title>

      <para>The following example shows a very simple authentication algorithm
      based on passwords.</para>

      <para>The vendor of the authentication bundle uses the property
      <code>"com.acme.basic-id"</code> to contain the name of a user as it
      logs in. This property is used to locate the <code>User</code> object in
      the repository. Next, the credential <code>"com.acme.password"</code>
      contains the password and is compared to the entered password. If the
      password is correct, the <code>User</code> object is returned. In all
      other cases a <code>SecurityException</code> is thrown.</para>

      <programlisting>public User authenticate(
        UserAdmin ua, String name, String pwd )
    throws SecurityException {
    User user = ua.getUser("com.acme.basicid",
        username);
    if (user == null)
        throw new SecurityException( "No such user" );

    if (!user.hasCredential("com.acme.password", pwd))
        throw new SecurityException( 
            "Invalid password" );
    return user;
}</programlisting>
    </section>

    <section>
      <title>Certificates</title>

      <para>Authentication based on certificates does not require a shared
      secret. Instead, a certificate contains a name, a public key, and the
      signature of one or more signers.</para>

      <para>The name in the certificate can be used to locate a
      <code>User</code> object in the repository. Locating a <code>User</code>
      object, however, only identifies the initiator and does not authenticate
      it.</para>

      <orderedlist>
        <listitem>
          <para>The first step to authenticate the initiator is to verify that
          it has the private key of the certificate.</para>
        </listitem>

        <listitem>
          <para>Next, the User Admin service must verify that it has a
          <code>User</code> object with the right property, for example
          <code>"com.acme.certificate"="Fudd"</code>.</para>
        </listitem>

        <listitem>
          <para>The next step is to see if the certificate is signed by a
          trusted source. The bundle could use a central list of trusted
          signers and only accept certificates signed by those sources.
          Alternatively, it could require that the certificate itself is
          already stored in the repository under a unique key as a
          <code>byte[]</code> in the credentials.</para>
        </listitem>

        <listitem>
          <para>In any case, once the certificate is verified, the associated
          <code>User</code> object is authenticated.</para>
        </listitem>
      </orderedlist>
    </section>
  </section>

  <section>
    <title>Authorization</title>

    <para>The User Admin service authorization architecture is a
    <emphasis>role-based model</emphasis>. In this model, every action that
    can be performed by a bundle is associated with a
    <emphasis>role</emphasis>. Such a role is a <code>Group</code> object
    (called group from now on) from the User Admin service repository. For
    example, if a servlet could be used to activate the alarm system, there
    should be a group named <code>AlarmSystemActivation</code>.</para>

    <para>The operator can administrate authorizations by populating the group
    with <code>User</code> objects (users) and other groups. Groups are used
    to minimize the amount of administration required. For example, it is
    easier to create one <code>Administrators</code> group and add
    administrative roles to it rather than individually administer all users
    for each role. Such a group requires only one action to remove or add a
    user as an administrator.</para>

    <para>The authorization decision can now be made in two fundamentally
    different ways:</para>

    <para>An initiator could be allowed to carry out an action (represented by
    a <code>Group</code> object) if it implied any of the <code>Group</code>
    object's members. For example, the <code>AlarmSystemActivation
    Group</code> object contains an <code>Administrators</code> and a
    <code>Family Group</code> object:</para>

    <programlisting>    Administrators        = { Elmer, Pepe,Bugs }
    Family                = { Elmer, Pepe, Daffy }

    AlarmSystemActivation = { Administrators, Family}</programlisting>

    <para>Any of the four members <code>Elmer</code>, <code>Pepe</code>,
    <code>Daffy</code>, or <code>Bugs</code> can activate the alarm
    system.</para>

    <para>Alternatively, an initiator could be allowed to perform an action
    (represented by a <code>Group</code> object) if it implied
    <emphasis>all</emphasis> the <code>Group</code> object's members. In this
    case, using the same <code>AlarmSystemActivation</code> group, only
    <code>Elmer</code> and <code>Pepe</code> would be authorized to activate
    the alarm system, since <code>Daffy</code> and <code>Bugs</code> are
    <emphasis>not</emphasis> members of <emphasis>both</emphasis> the
    <code>Administrators</code> and <code>Family Group</code> objects.</para>

    <para>The User Admin service supports a combination of both strategies by
    defining both a set of <emphasis>basic members</emphasis> (any) and a set
    of <emphasis>required members</emphasis> (all).</para>

    <programlisting>Administrators            = { Elmer, Pepe, Bugs}
Family                    = { Elmer, Pepe, Daffy }

AlarmSystemActivation 
    required              = { Administrators }
    basic                 = { Family }</programlisting>

    <para>The difference is made when <code>Role</code> objects are added to
    the <code>Group</code> object. To add a basic member, use the
    <code>Group.addMember(Role)</code> method. To add a required member, use
    the <code>Group.addRequiredMember(Role)</code> method.</para>

    <para>Basic members define the set of members that can get access and
    required members reduce this set by requiring the initiator to
    <emphasis>imply</emphasis> each required member.</para>

    <para>A <code>User</code> object implies a <code>Group</code> object if it
    implies the following:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>All</emphasis> of the Group's required members,
        and</para>
      </listitem>

      <listitem>
        <para>At <emphasis>least</emphasis> one of the Group's basic
        members</para>
      </listitem>
    </itemizedlist>

    <para>A <code>User</code> object always implies itself.</para>

    <para>If only required members are used to qualify the implication, then
    the standard user <code>Role.</code><xref linkend="org.osgi.service.useradmin.Role.USER_ANYONE" xrefstyle="hyperlink"/> can be obtained from the User Admin service and
    added to the <code>Group</code> object. This <code>Role</code> object is
    implied by anybody and therefore does not affect the required
    members.</para>

    <section>
      <title>The Authorization Object</title>

      <para>The complexity of authorization is hidden in an
      <code>Authorization</code> class. Normally, the authenticator should
      retrieve an <code>Authorization</code> object from the User Admin
      service by passing the authenticated <code>User</code> object as an
      argument. This <code>Authorization</code> object is then passed to the
      bundle that performs the action. This bundle checks the authorization
      with the <code>Authorization.hasRole(String)</code> method. The
      performing bundle must pass the name of the action as an argument. The
      <code>Authorization</code> object checks whether the authenticated user
      implies the <code>Role</code> object, specifically a <code>Group</code>
      object, with the given name. This is shown in the following
      example.</para>

      <programlisting>public void activateAlarm(Authorization auth) {
    if ( auth.hasRole( "AlarmSystemActivation" ) ) {
        // activate the alarm
        ...
    }
    else throw new SecurityException( 
        "Not authorized to activate alarm" );
}</programlisting>
    </section>

    <section>
      <title>Authorization Example</title>

      <para>This section demonstrates a possible use of the User Admin
      service. The service has a flexible model and many other schemes are
      possible.</para>

      <para>Assume an Operator installs an OSGi framework. Bundles in this
      environment have defined the following action groups:</para>

      <programlisting>AlarmSystemControl
InternetAccess
TemperatureControl
PhotoAlbumEdit
PhotoAlbumView
PortForwarding</programlisting>

      <para>Installing and uninstalling bundles could potentially extend this
      set. Therefore, the Operator also defines a number of groups that can be
      used to contain the different types of system users.</para>

      <programlisting>Administrators
Buddies
Children
Adults
Residents</programlisting>

      <para>In a particular instance, the Operator installs it in a household
      with the following residents and buddies:</para>

      <programlisting>Residents:      Elmer, Fudd, Marvin, Pepe
Buddies:        Daffy, Foghorn</programlisting>

      <para>First, the residents and buddies are assigned to the system user
      groups. Second, the user groups need to be assigned to the action
      groups.</para>

      <para>The following tables show how the groups could be assigned.</para>

      <table>
        <title>Example Groups with Basic and Required Members</title>

        <tgroup cols="7">
          <colspec colnum="1" colwidth="1.5*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="1*"/>

          <colspec colnum="4" colwidth="1*"/>

          <colspec colnum="5" colwidth="1*"/>

          <colspec colnum="6" colwidth="1*"/>

          <colspec colnum="7" colwidth="1*"/>

          <thead>
            <row>
              <entry>Groups</entry>

              <entry>Elmer</entry>

              <entry>Fudd</entry>

              <entry>Marvin</entry>

              <entry>Pepe</entry>

              <entry>Daffy</entry>

              <entry>Foghorn</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>Residents</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>
            </row>

            <row>
              <entry><code>Buddies</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>Basic</code></entry>
            </row>

            <row>
              <entry><code>Children</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>
            </row>

            <row>
              <entry><code>Adults</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>
            </row>

            <row>
              <entry><code>Administrators</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <table>
        <title>Example Action Groups with their Basic and Required
        Members</title>

        <tgroup cols="6">
          <colspec colnum="1" colwidth="2*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="1*"/>

          <colspec colnum="4" colwidth="1*"/>

          <colspec colnum="5" colwidth="1*"/>

          <colspec colnum="6" colwidth="1*"/>

          <thead>
            <row>
              <entry>Groups</entry>

              <entry>Residents</entry>

              <entry>Buddies</entry>

              <entry>Children</entry>

              <entry>Adults</entry>

              <entry>Admin</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>AlarmSystemControl</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>Required</code></entry>
            </row>

            <row>
              <entry><code>InternetAccess</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>Required</code></entry>

              <entry><code>-</code></entry>
            </row>

            <row>
              <entry><code>TemperatureControl</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>Required</code></entry>

              <entry><code>-</code></entry>
            </row>

            <row>
              <entry><code>PhotoAlbumEdit</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>-</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>-</code></entry>
            </row>

            <row>
              <entry><code>PhotoAlbumView</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>
            </row>

            <row>
              <entry><code>PortForwarding</code></entry>

              <entry><code>Basic</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>Required</code></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>

  <section>
    <title>Repository Maintenance</title>

    <para>The <code>UserAdmin</code> interface is a straightforward API to
    maintain a repository of <code>User</code> and <code>Group</code> objects.
    It contains methods to create new <code>Group</code> and <code>User</code>
    objects with the <code>createRole(String,int)</code> method. The method is
    prepared so that the same signature can be used to create new types of
    roles in the future. The interface also contains a method to remove a
    <code>Role</code> object.</para>

    <para>The existing configuration can be obtained with methods that list
    all <code>Role</code> objects using a filter argument. This filter, which
    has the same syntax as the Framework filter, must only return the
    <code>Role</code> objects for which the filter matches the
    properties.</para>

    <para>Several utility methods simplify getting <code>User</code> objects
    depending on their properties.</para>
  </section>

  <section xml:id="i1529238">
    <title>User Admin Events</title>

    <para>Changes in the User Admin service can be determined in real time.
    Each User Admin service implementation must send a
    <code>UserAdminEvent</code> object to any service in the Framework service
    registry that is registered under the <code>UserAdminListener</code>
    interface. This event must be send asynchronously from the cause of the
    event. The way events must be delivered is the same as described in
    <emphasis>Delivering Events</emphasis> of <xref linkend="intro.core.release" xrefstyle="template:%t"/>.</para>

    <para>This procedure is demonstrated in the following code sample.</para>

    <programlisting>class Listener implements UserAdminListener{
    public void roleChanged( UserAdminEvent event ) {
        ...
    }
}
public class MyActivator 
    implements BundleActivator {
    public void start( BundleContext context ) {
        context.registerService( 
            UserAdminListener.class.getName(),
            new Listener(), null );
    }
    public void stop( BundleContext context ) {}
}</programlisting>

    <para>It is not necessary to unregister the listener object when the
    bundle is stopped because the Framework automatically unregisters it. Once
    registered, the <code>UserAdminListener</code> object must be notified of
    all changes to the role repository.</para>

    <section>
      <title>Event Admin and User Admin Change Events</title>

      <para>User Admin events must be delivered asynchronously to the Event
      Admin service by the implementation, if present. The topic of a User
      Admin Event is:</para>

      <programlisting>org/osgi/service/useradmin/UserAdmin/&lt;eventtype&gt;</programlisting>

      <para>The following event types are supported:</para>

      <programlisting>ROLE_CREATED
ROLE_CHANGED
ROLE_REMOVED</programlisting>

      <para>All User Admin Events must have the following properties:</para>

      <itemizedlist>
        <listitem>
          <para><code>event</code> - (<code>UserAdminEvent</code>) The event
          that was broadcast by the User Admin service.</para>
        </listitem>

        <listitem>
          <para><code>role</code> - (<code>Role</code>) The <code>Role</code>
          object that was created, modified or removed.</para>
        </listitem>

        <listitem>
          <para><code>role.name</code> - (<code>String</code>) The name of the
          role.</para>
        </listitem>

        <listitem>
          <para><code>role.type</code> - (<code>Integer</code>) One of
          <code>ROLE, USER</code> or <code>GROUP</code>.</para>
        </listitem>

        <listitem>
          <para><code>service</code> - (<code>ServiceReference</code>) The
          Service Reference of the User Admin service.</para>
        </listitem>

        <listitem>
          <para><code>service.id</code> - (<code>Long</code>) The User Admin
          service's ID.</para>
        </listitem>

        <listitem>
          <para><code>service.objectClass</code> - (<code>String[]</code>) The
          User Admin service's object class (which must include
          <code>org.osgi.service.useradmin.UserAdmin</code>)</para>
        </listitem>

        <listitem>
          <para><code>service.pid</code> - (<code>String)</code> The User
          Admin service's persistent identity</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>The User Admin service is related to the security model of the OSGi
    framework, but is complementary to the <xref linkend="i1307817"/>. The
    final permission of most code should be the intersection of the Java 2
    Permissions, which are based on the code that is executing, and the User
    Admin service authorization, which is based on the user for whom the code
    runs.</para>

    <section>
      <title>User Admin Permission</title>

      <para>The User Admin service defines the
      <code>UserAdminPermission</code> class that can be used to restrict
      bundles in accessing credentials. This permission class has the
      following actions:</para>

      <itemizedlist>
        <listitem>
          <para><code>changeProperty</code> - This permission is required to
          modify properties. The name of the permission is the prefix of the
          property name.</para>
        </listitem>

        <listitem>
          <para><code>changeCredential</code> - This action permits changing
          credentials. The name of the permission is the prefix of the name of
          the credential.</para>
        </listitem>

        <listitem>
          <para><code>getCredential</code> - This action permits getting
          credentials. The name of the permission is the prefix of the
          credential.</para>
        </listitem>
      </itemizedlist>

      <para>If the name of the permission is <code>"admin"</code>, it allows
      the owner to administer the repository. No action is associated with the
      permission in that case.</para>

      <para>Otherwise, the permission name is used to match the property name.
      This name may end with a <code>".*"</code> string to indicate a
      wildcard. For example, <code>com.acme.*</code> matches
      <code>com.acme.fudd.elmer</code> and <code>com.acme.bugs</code>.</para>
    </section>
  </section>

  <section>
    <title>Relation to JAAS</title>

    <para>At a glance, the Java Authorization and Authentication Service
    (JAAS) seems to be a very suitable model for user administration. The OSGi
    organization, however, decided to develop an independent User Admin
    service because JAAS was not deemed applicable. The reasons for this
    include dependency on Java SE version 1.3 ("JDK 1.3") and existing
    mechanisms in the previous OSGi Service Gateway 1.0 specification.</para>

    <section>
      <title>JDK 1.3 Dependencies</title>

      <para>The authorization component of JAAS relies on the
      <code>java.security.DomainCombiner</code> interface, which provides a
      means to dynamically update the <code>ProtectionDomain</code> objects
      affiliated with an <code>AccessControlContext</code> object.</para>

      <para>This interface was added in JDK 1.3. In the context of JAAS, the
      <code>SubjectDomainCombiner</code> object, which implements the
      <code>DomainCombiner</code> interface, is used to update
      <code>ProtectionDomain</code> objects. The permissions of
      <code>ProtectionDomain</code> objects depend on where code came from and
      who signed it, with permissions based on who is running the code.</para>

      <para>Leveraging JAAS would have resulted in user-based access control
      on the OSGi framework being available only with JDK 1.3, which was not
      deemed acceptable.</para>
    </section>

    <section>
      <title>Existing OSGi Mechanism</title>

      <para>JAAS provides a pluggable authentication architecture, which
      enables applications and their underlying authentication services to
      remain independent from each other.</para>

      <para>The Http Service already provides a similar feature by allowing
      servlet and resource registrations to be supported by an
      <code>HttpContext</code> object, which uses a callback mechanism to
      perform any required authentication checks before granting access to the
      servlet or resource. This way, the registering bundle has complete
      control on a per-servlet and per-resource basis over which
      authentication protocol to use, how the credentials presented by the
      remote requester are to be validated, and who should be granted access
      to the servlet or resource.</para>
    </section>

    <section>
      <title>Future Road Map</title>

      <para>In the future, the main barrier of 1.3 compatibility will be
      removed. JAAS could then be implemented in an OSGi environment. At that
      time, the User Admin service will still be needed and will provide
      complementary services in the following ways:</para>

      <itemizedlist>
        <listitem>
          <para>The authorization component relies on group membership
          information to be stored and managed outside JAAS. JAAS does not
          manage persistent information, so the User Admin service can be a
          provider of group information when principals are assigned to a
          <code>Subject</code> object.</para>
        </listitem>

        <listitem>
          <para>The authorization component allows for credentials to be
          collected and verified, but a repository is needed to actually
          validate the credentials.</para>
        </listitem>
      </itemizedlist>

      <para>In the future, the User Admin service can act as the back-end
      database to JAAS. The only aspect JAAS will remove from the User Admin
      service is the need for the <code>Authorization</code> interface.</para>
    </section>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.useradmin" xml:id="org.osgi.service.useradmin" xml:base="../../generated/javadoc/docbook/org.osgi.service.useradmin.xml">
   <title>org.osgi.service.useradmin</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.useradmin-version">Version 1.1</releaseinfo>
      <edition xml:id="org.osgi.service.useradmin-version.number">1.1</edition>
   </info>
   <para>
User Admin Package Version 1.1.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.useradmin; version="[1.1,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.useradmin; version="[1.1,1.2)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.useradmin.Authorization">
                  <code>Authorization</code>
               </link> - 
The <code>Authorization</code> interface encapsulates an authorization context on
 which bundles can base authorization decisions, where appropriate.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.useradmin.Group">
                  <code>Group</code>
               </link> - 
A named grouping of roles (<code>Role</code> objects).
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.useradmin.Role">
                  <code>Role</code>
               </link> - 
The base interface for <code>Role</code> objects managed by the User Admin
 service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.useradmin.User">
                  <code>User</code>
               </link> - 
A <code>User</code> role managed by a User Admin service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.useradmin.UserAdmin">
                  <code>UserAdmin</code>
               </link> - 
This interface is used to manage a database of named <code>Role</code> objects,
 which can be used for authentication and authorization purposes.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.useradmin.UserAdminEvent">
                  <code>UserAdminEvent</code>
               </link> - <code>Role</code> change event.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.useradmin.UserAdminListener">
                  <code>UserAdminListener</code>
               </link> - 
Listener for UserAdminEvents.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.useradmin.UserAdminPermission">
                  <code>UserAdminPermission</code>
               </link> - 
Permission to configure and access the <link linkend="org.osgi.service.useradmin.Role">Role</link> objects managed by a User
 Admin service.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="Authorization" xml:id="org.osgi.service.useradmin.Authorization">
      <title>public interface Authorization</title>
      <para>
The <code>Authorization</code> interface encapsulates an authorization context on
 which bundles can base authorization decisions, where appropriate.
 </para>
      <para>
 Bundles associate the privilege to access restricted resources or operations
 with roles. Before granting access to a restricted resource or operation, a
 bundle will check if the <code>Authorization</code> object passed to it possess
 the required role, by calling its <code>hasRole</code> method.
 </para>
      <para>
 Authorization contexts are instantiated by calling the
 <link linkend="org.osgi.service.useradmin.UserAdmin.getAuthorization-User-">UserAdmin.getAuthorization(User)</link> method.
 
 </para>
      <para>
         <emphasis>Trusting Authorization objects </emphasis>
      </para>
      <para>
 There are no restrictions regarding the creation of <code>Authorization</code>
 objects. Hence, a service must only accept <code>Authorization</code> objects from
 bundles that has been authorized to use the service using code based (or Java
 2) permissions.
 
 </para>
      <para>
 In some cases it is useful to use <code>ServicePermission</code> to do the code
 based access control. A service basing user access control on
 <code>Authorization</code> objects passed to it, will then require that a calling
 bundle has the <code>ServicePermission</code> to get the service in question. This
 is the most convenient way. The OSGi environment will do the code based
 permission check when the calling bundle attempts to get the service from the
 service registry.
 </para>
      <para>
 Example: A servlet using a service on a user's behalf. The bundle with the
 servlet must be given the <code>ServicePermission</code> to get the Http Service.
 </para>
      <para>
 However, in some cases the code based permission checks need to be more
 fine-grained. A service might allow all bundles to get it, but require
 certain code based permissions for some of its methods.
 </para>
      <para>
 Example: A servlet using a service on a user's behalf, where some service
 functionality is open to anyone, and some is restricted by code based
 permissions. When a restricted method is called (e.g., one handing over an
 <code>Authorization</code> object), the service explicitly checks that the calling
 bundle has permission to make the call.</para>
      <formalpara role="parameter">
         <title>No Implement</title>
         <para>Consumers of this API must not implement this interface</para>
      </formalpara>
      <section role="method" xreflabel="getName()" xml:id="org.osgi.service.useradmin.Authorization.getName--">
         <title>public String getName()</title>
         <para role="description">
Gets the name of the <link linkend="org.osgi.service.useradmin.User">User</link> that this <code>Authorization</code> context
 was created for.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of the <link linkend="org.osgi.service.useradmin.User">User</link> object that this
         <code>Authorization</code> context was created for, or <code>null</code> if
         no user was specified when this <code>Authorization</code> context was
         created.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRoles()" xml:id="org.osgi.service.useradmin.Authorization.getRoles--">
         <title>public String[] getRoles()</title>
         <para role="description">
Gets the names of all roles implied by this <code>Authorization</code>
 context.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The names of all roles implied by this <code>Authorization</code>
         context, or <code>null</code> if no roles are in the context. The
         predefined role <code>user.anyone</code> will not be included in this
         list.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hasRole(String)" xml:id="org.osgi.service.useradmin.Authorization.hasRole-String-">
         <title>public boolean hasRole(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the role to check for.</para>
         </formalpara>
         <para role="description">
Checks if the role with the specified name is implied by this
 <code>Authorization</code> context.
 </para>
         <para>
 
 Bundles must define globally unique role names that are associated with
 the privilege of accessing restricted resources or operations. Operators
 will grant users access to these resources, by creating a <link linkend="org.osgi.service.useradmin.Group">Group</link>
 object for each role and adding <link linkend="org.osgi.service.useradmin.User">User</link> objects to it.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this <code>Authorization</code> context implies the
         specified role, otherwise <code>false</code>.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Group" xml:id="org.osgi.service.useradmin.Group">
      <title>public interface Group<?line-break?> extends User</title>
      <para>
A named grouping of roles (<code>Role</code> objects).
 </para>
      <para>
 Whether or not a given <code>Authorization</code> context implies a <code>Group</code>
 object depends on the members of that <code>Group</code> object.
 </para>
      <para>
 A <code>Group</code> object can have two kinds of members: <emphasis>basic </emphasis> and
 <emphasis>required </emphasis>. A <code>Group</code> object is implied by an
 <code>Authorization</code> context if all of its required members are implied and
 at least one of its basic members is implied.
 </para>
      <para>
 A <code>Group</code> object must contain at least one basic member in order to be
 implied. In other words, a <code>Group</code> object without any basic member
 roles is never implied by any <code>Authorization</code> context.
 </para>
      <para>
 A <code>User</code> object always implies itself.
 </para>
      <para>
 No loop detection is performed when adding members to <code>Group</code> objects,
 which means that it is possible to create circular implications. Loop
 detection is instead done when roles are checked. The semantics is that if a
 role depends on itself (i.e., there is an implication loop), the role is not
 implied.
 </para>
      <para>
 The rule that a <code>Group</code> object must have at least one basic member to
 be implied is motivated by the following example:
 
 </para>
      <programlisting> 
  group foo
    required members: marketing
    basic members: alice, bob</programlisting>
      <para>
 
 Privileged operations that require membership in "foo" can be performed only
 by "alice" and "bob", who are in marketing.
 </para>
      <para>
 If "alice" and "bob" ever transfer to a different department, anybody in
 marketing will be able to assume the "foo" role, which certainly must be
 prevented. Requiring that "foo" (or any <code>Group</code> object for that matter)
 must have at least one basic member accomplishes that.
 </para>
      <para>
 However, this would make it impossible for a <code>Group</code> object to be
 implied by just its required members. An example where this implication might
 be useful is the following declaration: "Any citizen who is an adult is
 allowed to vote." An intuitive configuration of "voter" would be:
 
 </para>
      <programlisting> 
  group voter
    required members: citizen, adult
       basic members:</programlisting>
      <para>
 
 However, according to the above rule, the "voter" role could never be assumed
 by anybody, since it lacks any basic members. In order to address this issue
 a predefined role named "user.anyone" can be specified, which is always
 implied. The desired implication of the "voter" group can then be achieved by
 specifying "user.anyone" as its basic member, as follows:
 
 </para>
      <programlisting> 
  group voter
    required members: citizen, adult
       basic members: user.anyone</programlisting>
      <formalpara role="parameter">
         <title>No Implement</title>
         <para>Consumers of this API must not implement this interface</para>
      </formalpara>
      <section role="method" xreflabel="addMember(Role)" xml:id="org.osgi.service.useradmin.Group.addMember-Role-">
         <title>public boolean addMember(Role role)</title>
         <formalpara role="parameter">
            <title>role</title>
            <para>The role to add as a basic member.</para>
         </formalpara>
         <para role="description">
Adds the specified <code>Role</code> object as a basic member to this
 <code>Group</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the given role could be added as a basic member,
         and <code>false</code> if this <code>Group</code> object already contains a
         <code>Role</code> object whose name matches that of the specified
         role.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If a security manager exists and the caller
         does not have the <code>UserAdminPermission</code> with name
         <code>admin</code>.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="addRequiredMember(Role)" xml:id="org.osgi.service.useradmin.Group.addRequiredMember-Role-">
         <title>public boolean addRequiredMember(Role role)</title>
         <formalpara role="parameter">
            <title>role</title>
            <para>The <code>Role</code> object to add as a required member.</para>
         </formalpara>
         <para role="description">
Adds the specified <code>Role</code> object as a required member to this
 <code>Group</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the given <code>Role</code> object could be added as a
         required member, and <code>false</code> if this <code>Group</code> object
         already contains a <code>Role</code> object whose name matches that of
         the specified role.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If a security manager exists and the caller
         does not have the <code>UserAdminPermission</code> with name
         <code>admin</code>.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMembers()" xml:id="org.osgi.service.useradmin.Group.getMembers--">
         <title>public Role[] getMembers()</title>
         <para role="description">
Gets the basic members of this <code>Group</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The basic members of this <code>Group</code> object, or <code>null</code>
         if this <code>Group</code> object does not contain any basic members.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRequiredMembers()" xml:id="org.osgi.service.useradmin.Group.getRequiredMembers--">
         <title>public Role[] getRequiredMembers()</title>
         <para role="description">
Gets the required members of this <code>Group</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The required members of this <code>Group</code> object, or
         <code>null</code> if this <code>Group</code> object does not contain any
         required members.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="removeMember(Role)" xml:id="org.osgi.service.useradmin.Group.removeMember-Role-">
         <title>public boolean removeMember(Role role)</title>
         <formalpara role="parameter">
            <title>role</title>
            <para>The <code>Role</code> object to remove from this <code>Group</code>
        object.</para>
         </formalpara>
         <para role="description">
Removes the specified <code>Role</code> object from this <code>Group</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the <code>Role</code> object could be removed,
         otherwise <code>false</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If a security manager exists and the caller
         does not have the <code>UserAdminPermission</code> with name
         <code>admin</code>.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Role" xml:id="org.osgi.service.useradmin.Role">
      <title>public interface Role</title>
      <para>
The base interface for <code>Role</code> objects managed by the User Admin
 service.
 
 </para>
      <para>
 This interface exposes the characteristics shared by all <code>Role</code>
 classes: a name, a type, and a set of properties.
 </para>
      <para>
 Properties represent public information about the <code>Role</code> object that
 can be read by anyone. Specific <link linkend="org.osgi.service.useradmin.UserAdminPermission">UserAdminPermission</link> objects are
 required to change a <code>Role</code> object's properties.
 </para>
      <para>
         <code>Role</code> object properties are <code>Dictionary</code> objects. Changes to
 these objects are propagated to the User Admin service and made persistent.
 </para>
      <para>
 Every User Admin service contains a set of predefined <code>Role</code> objects
 that are always present and cannot be removed. All predefined <code>Role</code>
 objects are of type <code>ROLE</code>. This version of the
 <code>org.osgi.service.useradmin</code> package defines a single predefined role
 named "user.anyone", which is inherited by any other role. Other
 predefined roles may be added in the future. Since "user.anyone" is
 a <code>Role</code> object that has properties associated with it that can be read
 and modified. Access to these properties and their use is application
 specific and is controlled using <code>UserAdminPermission</code> in the same way
 that properties for other <code>Role</code> objects are.</para>
      <formalpara role="parameter">
         <title>No Implement</title>
         <para>Consumers of this API must not implement this interface</para>
      </formalpara>
      <section role="field" xreflabel="GROUP" xml:id="org.osgi.service.useradmin.Role.GROUP">
         <title>public static final int GROUP = 2</title>
         <para>
The type of a <link linkend="org.osgi.service.useradmin.Group">Group</link> role.
 
 </para>
         <para>
 The value of <code>GROUP</code> is 2.</para>
      </section>
      <section role="field" xreflabel="ROLE" xml:id="org.osgi.service.useradmin.Role.ROLE">
         <title>public static final int ROLE = 0</title>
         <para>
The type of a predefined role.
 
 </para>
         <para>
 The value of <code>ROLE</code> is 0.</para>
      </section>
      <section role="field" xreflabel="USER" xml:id="org.osgi.service.useradmin.Role.USER">
         <title>public static final int USER = 1</title>
         <para>
The type of a <link linkend="org.osgi.service.useradmin.User">User</link> role.
 
 </para>
         <para>
 The value of <code>USER</code> is 1.</para>
      </section>
      <section role="field" xreflabel="USER_ANYONE" xml:id="org.osgi.service.useradmin.Role.USER_ANYONE">
         <title>public static final String USER_ANYONE = "user.anyone"</title>
         <para>
The name of the predefined role, user.anyone, that all users and groups
 belong to.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getName()" xml:id="org.osgi.service.useradmin.Role.getName--">
         <title>public String getName()</title>
         <para role="description">
Returns the name of this role.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The role's name.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getProperties()" xml:id="org.osgi.service.useradmin.Role.getProperties--">
         <title>public Dictionary getProperties()</title>
         <para role="description">
Returns a <code>Dictionary</code> of the (public) properties of this
 <code>Role</code> object. Any changes to the returned <code>Dictionary</code> will
 change the properties of this <code>Role</code> object. This will cause a
 <code>UserAdminEvent</code> object of type <link linkend="org.osgi.service.useradmin.UserAdminEvent.ROLE_CHANGED">UserAdminEvent.ROLE_CHANGED</link>
 to be broadcast to any <code>UserAdminListener</code> objects.
 
 </para>
         <para>
 Only objects of type <code>String</code> may be used as property keys, and
 only objects of type <code>String</code> or <code>byte[]</code> may be used as
 property values. Any other types will cause an exception of type
 <code>IllegalArgumentException</code> to be raised.
 
 </para>
         <para>
 In order to add, change, or remove a property in the returned
 <code>Dictionary</code>, a <link linkend="org.osgi.service.useradmin.UserAdminPermission">UserAdminPermission</link> named after the
 property name (or a prefix of it) with action <code>changeProperty</code> is
 required.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>Dictionary</code> containing the properties of this <code>Role</code>
         object.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.useradmin.Role.getType--">
         <title>public int getType()</title>
         <para role="description">
Returns the type of this role.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The role's type.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="User" xml:id="org.osgi.service.useradmin.User">
      <title>public interface User<?line-break?> extends Role</title>
      <para>
A <code>User</code> role managed by a User Admin service.
 
 </para>
      <para>
 In this context, the term "user" is not limited to just human
 beings. Instead, it refers to any entity that may have any number of
 credentials associated with it that it may use to authenticate itself.
 </para>
      <para>
 In general, <code>User</code> objects are associated with a specific User Admin
 service (namely the one that created them), and cannot be used with other
 User Admin services.
 </para>
      <para>
 A <code>User</code> object may have credentials (and properties, inherited from
 the <link linkend="org.osgi.service.useradmin.Role">Role</link> class) associated with it. Specific
 <link linkend="org.osgi.service.useradmin.UserAdminPermission">UserAdminPermission</link> objects are required to read or change a
 <code>User</code> object's credentials.
 </para>
      <para>
 Credentials are <code>Dictionary</code> objects and have semantics that are
 similar to the properties in the <code>Role</code> class.</para>
      <formalpara role="parameter">
         <title>No Implement</title>
         <para>Consumers of this API must not implement this interface</para>
      </formalpara>
      <section role="method" xreflabel="getCredentials()" xml:id="org.osgi.service.useradmin.User.getCredentials--">
         <title>public Dictionary getCredentials()</title>
         <para role="description">
Returns a <code>Dictionary</code> of the credentials of this <code>User</code>
 object. Any changes to the returned <code>Dictionary</code> object will change
 the credentials of this <code>User</code> object. This will cause a
 <code>UserAdminEvent</code> object of type <link linkend="org.osgi.service.useradmin.UserAdminEvent.ROLE_CHANGED">UserAdminEvent.ROLE_CHANGED</link>
 to be broadcast to any <code>UserAdminListeners</code> objects.
 
 </para>
         <para>
 Only objects of type <code>String</code> may be used as credential keys, and
 only objects of type <code>String</code> or of type <code>byte[]</code> may be used
 as credential values. Any other types will cause an exception of type
 <code>IllegalArgumentException</code> to be raised.
 
 </para>
         <para>
 In order to retrieve a credential from the returned <code>Dictionary</code>
 object, a <link linkend="org.osgi.service.useradmin.UserAdminPermission">UserAdminPermission</link> named after the credential name (or
 a prefix of it) with action <code>getCredential</code> is required.
 </para>
         <para>
 In order to add or remove a credential from the returned
 <code>Dictionary</code> object, a <link linkend="org.osgi.service.useradmin.UserAdminPermission">UserAdminPermission</link> named after the
 credential name (or a prefix of it) with action <code>changeCredential</code>
 is required.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>Dictionary</code> object containing the credentials of this
         <code>User</code> object.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hasCredential(String,Object)" xml:id="org.osgi.service.useradmin.User.hasCredential-String-Object-">
         <title>public boolean hasCredential(String key,Object value)</title>
         <formalpara role="parameter">
            <title>key</title>
            <para>The credential <code>key</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>value</title>
            <para>The credential <code>value</code>.</para>
         </formalpara>
         <para role="description">
Checks to see if this <code>User</code> object has a credential with the
 specified <code>key</code> set to the specified <code>value</code>.
 
 </para>
         <para>
 If the specified credential <code>value</code> is not of type <code>String</code>
 or <code>byte[]</code>, it is ignored, that is, <code>false</code> is returned (as
 opposed to an <code>IllegalArgumentException</code> being raised).</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this user has the specified credential;
         <code>false</code> otherwise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If a security manager exists and the caller
         does not have the <code>UserAdminPermission</code> named after the
         credential key (or a prefix of it) with action
         <code>getCredential</code>.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="UserAdmin" xml:id="org.osgi.service.useradmin.UserAdmin">
      <title>public interface UserAdmin</title>
      <para>
This interface is used to manage a database of named <code>Role</code> objects,
 which can be used for authentication and authorization purposes.
 
 </para>
      <para>
 This version of the User Admin service defines two types of <code>Role</code>
 objects: "User" and "Group". Each type of role is represented by an
 <code>int</code> constant and an interface. The range of positive integers is
 reserved for new types of roles that may be added in the future. When
 defining proprietary role types, negative constant values must be used.
 
 </para>
      <para>
 Every role has a name and a type.
 
 </para>
      <para>
 A <link linkend="org.osgi.service.useradmin.User">User</link> object can be configured with credentials (e.g., a password)
 and properties (e.g., a street address, phone number, etc.).
 </para>
      <para>
 A <link linkend="org.osgi.service.useradmin.Group">Group</link> object represents an aggregation of <link linkend="org.osgi.service.useradmin.User">User</link> and
 <link linkend="org.osgi.service.useradmin.Group">Group</link> objects. In other words, the members of a <code>Group</code> object
 are roles themselves.
 </para>
      <para>
 Every User Admin service manages and maintains its own namespace of
 <code>Role</code> objects, in which each <code>Role</code> object has a unique name.</para>
      <formalpara role="parameter">
         <title>No Implement</title>
         <para>Consumers of this API must not implement this interface</para>
      </formalpara>
      <section role="method" xreflabel="createRole(String,int)" xml:id="org.osgi.service.useradmin.UserAdmin.createRole-String-int-">
         <title>public Role createRole(String name,int type)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The <code>name</code> of the <code>Role</code> object to create.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>The type of the <code>Role</code> object to create. Must be either
        a <link linkend="org.osgi.service.useradmin.Role.USER">Role.USER</link> type or <link linkend="org.osgi.service.useradmin.Role.GROUP">Role.GROUP</link> type.</para>
         </formalpara>
         <para role="description">
Creates a <code>Role</code> object with the given name and of the given type.
 
 </para>
         <para>
 If a <code>Role</code> object was created, a <code>UserAdminEvent</code> object of
 type <link linkend="org.osgi.service.useradmin.UserAdminEvent.ROLE_CREATED">UserAdminEvent.ROLE_CREATED</link> is broadcast to any
 <code>UserAdminListener</code> object.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The newly created <code>Role</code> object, or <code>null</code> if a role
         with the given name already exists.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if <code>type</code> is invalid.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If a security manager exists and the caller
         does not have the <code>UserAdminPermission</code> with name
         <code>admin</code>.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getAuthorization(User)" xml:id="org.osgi.service.useradmin.UserAdmin.getAuthorization-User-">
         <title>public Authorization getAuthorization(User user)</title>
         <formalpara role="parameter">
            <title>user</title>
            <para>The <code>User</code> object to create an <code>Authorization</code>
        object for, or <code>null</code> for the anonymous user.</para>
         </formalpara>
         <para role="description">
Creates an <code>Authorization</code> object that encapsulates the specified
 <code>User</code> object and the <code>Role</code> objects it possesses. The
 <code>null</code> user is interpreted as the anonymous user. The anonymous
 user represents a user that has not been authenticated. An
 <code>Authorization</code> object for an anonymous user will be unnamed, and
 will only imply groups that user.anyone implies.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the <code>Authorization</code> object for the specified <code>User</code>
         object.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRole(String)" xml:id="org.osgi.service.useradmin.UserAdmin.getRole-String-">
         <title>public Role getRole(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the <code>Role</code> object to get.</para>
         </formalpara>
         <para role="description">
Gets the <code>Role</code> object with the given <code>name</code> from this User
 Admin service.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The requested <code>Role</code> object, or <code>null</code> if this User
         Admin service does not have a <code>Role</code> object with the given
         <code>name</code>.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRoles(String)" xml:id="org.osgi.service.useradmin.UserAdmin.getRoles-String-">
         <title>public Role[] getRoles(String filter) throws InvalidSyntaxException</title>
         <formalpara role="parameter">
            <title>filter</title>
            <para>The filter criteria to match.</para>
         </formalpara>
         <para role="description">
Gets the <code>Role</code> objects managed by this User Admin service that
 have properties matching the specified LDAP filter criteria. See
 <code>org.osgi.framework.Filter</code> for a description of the filter syntax.
 If a <code>null</code> filter is specified, all Role objects managed by this
 User Admin service are returned.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <code>Role</code> objects managed by this User Admin service whose
         properties match the specified filter criteria, or all
         <code>Role</code> objects if a <code>null</code> filter is specified. If no
         roles match the filter, <code>null</code> will be returned.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>InvalidSyntaxException</code>– If the filter is not well formed.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getUser(String,String)" xml:id="org.osgi.service.useradmin.UserAdmin.getUser-String-String-">
         <title>public User getUser(String key,String value)</title>
         <formalpara role="parameter">
            <title>key</title>
            <para>The property key to look for.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>value</title>
            <para>The property value to compare with.</para>
         </formalpara>
         <para role="description">
Gets the user with the given property <code>key</code>-<code>value</code> pair from
 the User Admin service database. This is a convenience method for
 retrieving a <code>User</code> object based on a property for which every
 <code>User</code> object is supposed to have a unique value (within the scope
 of this User Admin service), such as for example a X.500 distinguished
 name.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A matching user, if <emphasis>exactly</emphasis> one is found. If zero or
         more than one matching users are found, <code>null</code> is returned.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="removeRole(String)" xml:id="org.osgi.service.useradmin.UserAdmin.removeRole-String-">
         <title>public boolean removeRole(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the <code>Role</code> object to remove.</para>
         </formalpara>
         <para role="description">
Removes the <code>Role</code> object with the given name from this User Admin
 service and all groups it is a member of.
 
 </para>
         <para>
 If the <code>Role</code> object was removed, a <code>UserAdminEvent</code> object
 of type <link linkend="org.osgi.service.useradmin.UserAdminEvent.ROLE_REMOVED">UserAdminEvent.ROLE_REMOVED</link> is broadcast to any
 <code>UserAdminListener</code> object.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> If a <code>Role</code> object with the given name is
         present in this User Admin service and could be removed,
         otherwise <code>false</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If a security manager exists and the caller
         does not have the <code>UserAdminPermission</code> with name
         <code>admin</code>.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="UserAdminEvent" xml:id="org.osgi.service.useradmin.UserAdminEvent">
      <title>public class UserAdminEvent</title>
      <para>
         <code>Role</code> change event.
 </para>
      <para>
         <code>UserAdminEvent</code> objects are delivered asynchronously to any
 <code>UserAdminListener</code> objects when a change occurs in any of the
 <code>Role</code> objects managed by a User Admin service.
 
 </para>
      <para>
 A type code is used to identify the event. The following event types are
 defined: <link linkend="org.osgi.service.useradmin.UserAdminEvent.ROLE_CREATED">ROLE_CREATED</link> type, <link linkend="org.osgi.service.useradmin.UserAdminEvent.ROLE_CHANGED">ROLE_CHANGED</link> type, and
 <link linkend="org.osgi.service.useradmin.UserAdminEvent.ROLE_REMOVED">ROLE_REMOVED</link> type. Additional event types may be defined in the
 future.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.useradmin.UserAdmin">UserAdmin</link>, <link linkend="org.osgi.service.useradmin.UserAdminListener">UserAdminListener</link>
         </para>
      </formalpara>
      <section role="field" xreflabel="ROLE_CHANGED" xml:id="org.osgi.service.useradmin.UserAdminEvent.ROLE_CHANGED">
         <title>public static final int ROLE_CHANGED = 2</title>
         <para>
A <code>Role</code> object has been modified.
 
 </para>
         <para>
 The value of <code>ROLE_CHANGED</code> is 0x00000002.</para>
      </section>
      <section role="field" xreflabel="ROLE_CREATED" xml:id="org.osgi.service.useradmin.UserAdminEvent.ROLE_CREATED">
         <title>public static final int ROLE_CREATED = 1</title>
         <para>
A <code>Role</code> object has been created.
 
 </para>
         <para>
 The value of <code>ROLE_CREATED</code> is 0x00000001.</para>
      </section>
      <section role="field" xreflabel="ROLE_REMOVED" xml:id="org.osgi.service.useradmin.UserAdminEvent.ROLE_REMOVED">
         <title>public static final int ROLE_REMOVED = 4</title>
         <para>
A <code>Role</code> object has been removed.
 
 </para>
         <para>
 The value of <code>ROLE_REMOVED</code> is 0x00000004.</para>
      </section>
      <section role="method" xreflabel="UserAdminEvent(ServiceReference,int,Role)" xml:id="org.osgi.service.useradmin.UserAdminEvent.UserAdminEvent-ServiceReference-int-Role-">
         <title>public  UserAdminEvent(ServiceReference ref,int type,Role role)</title>
         <formalpara role="parameter">
            <title>ref</title>
            <para>The <code>ServiceReference</code> object of the User Admin service
        that generated this event.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>The event type.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>role</title>
            <para>The <code>Role</code> object on which this event occurred.</para>
         </formalpara>
         <para role="description">
Constructs a <code>UserAdminEvent</code> object from the given
 <code>ServiceReference</code> object, event type, and <code>Role</code> object.
   </para>
      </section>
      <section role="method" xreflabel="getRole()" xml:id="org.osgi.service.useradmin.UserAdminEvent.getRole--">
         <title>public Role getRole()</title>
         <para role="description">
Gets the <code>Role</code> object this event was generated for.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <code>Role</code> object this event was generated for.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getServiceReference()" xml:id="org.osgi.service.useradmin.UserAdminEvent.getServiceReference--">
         <title>public ServiceReference getServiceReference()</title>
         <para role="description">
Gets the <code>ServiceReference</code> object of the User Admin service that
 generated this event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The User Admin service's <code>ServiceReference</code> object.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.useradmin.UserAdminEvent.getType--">
         <title>public int getType()</title>
         <para role="description">
Returns the type of this event.
 
 </para>
         <para>
 The type values are <link linkend="org.osgi.service.useradmin.UserAdminEvent.ROLE_CREATED">ROLE_CREATED</link> type, <link linkend="org.osgi.service.useradmin.UserAdminEvent.ROLE_CHANGED">ROLE_CHANGED</link>
 type, and <link linkend="org.osgi.service.useradmin.UserAdminEvent.ROLE_REMOVED">ROLE_REMOVED</link> type.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The event type.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="UserAdminListener" xml:id="org.osgi.service.useradmin.UserAdminListener">
      <title>public interface UserAdminListener</title>
      <para>
Listener for UserAdminEvents.
 
 </para>
      <para>
         <code>UserAdminListener</code> objects are registered with the Framework service
 registry and notified with a <code>UserAdminEvent</code> object when a
 <code>Role</code> object has been created, removed, or modified.
 </para>
      <para>
         <code>UserAdminListener</code> objects can further inspect the received
 <code>UserAdminEvent</code> object to determine its type, the <code>Role</code> object
 it occurred on, and the User Admin service that generated it.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.useradmin.UserAdmin">UserAdmin</link>, <link linkend="org.osgi.service.useradmin.UserAdminEvent">UserAdminEvent</link>
         </para>
      </formalpara>
      <section role="method" xreflabel="roleChanged(UserAdminEvent)" xml:id="org.osgi.service.useradmin.UserAdminListener.roleChanged-UserAdminEvent-">
         <title>public void roleChanged(UserAdminEvent event)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>The <code>UserAdminEvent</code> object.</para>
         </formalpara>
         <para role="description">
Receives notification that a <code>Role</code> object has been created,
 removed, or modified.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="UserAdminPermission" xml:id="org.osgi.service.useradmin.UserAdminPermission">
      <title>public final class UserAdminPermission<?line-break?> extends BasicPermission</title>
      <para>
Permission to configure and access the <link linkend="org.osgi.service.useradmin.Role">Role</link> objects managed by a User
 Admin service.
 
 </para>
      <para>
 This class represents access to the <code>Role</code> objects managed by a User
 Admin service and their properties and credentials (in the case of
 <link linkend="org.osgi.service.useradmin.User">User</link> objects).
 </para>
      <para>
 The permission name is the name (or name prefix) of a property or credential.
 The naming convention follows the hierarchical property naming convention.
 Also, an asterisk may appear at the end of the name, following a
 ".", or by itself, to signify a wildcard match. For example:
 "org.osgi.security.protocol.*" or "*" is valid, but
 "*protocol" or "a*b" are not valid.
 
 </para>
      <para>
 The <code>UserAdminPermission</code> with the reserved name "admin"
 represents the permission required for creating and removing <code>Role</code>
 objects in the User Admin service, as well as adding and removing members in
 a <code>Group</code> object. This <code>UserAdminPermission</code> does not have any
 actions associated with it.
 
 </para>
      <para>
 The actions to be granted are passed to the constructor in a string
 containing a list of one or more comma-separated keywords. The possible
 keywords are: <code>changeProperty</code>,<code>changeCredential</code>, and
 <code>getCredential</code>. Their meaning is defined as follows:
 
 </para>
      <programlisting>  action
  changeProperty    Permission to change (i.e., add and remove)
                    Role object properties whose names start with
                    the name argument specified in the constructor.
  changeCredential  Permission to change (i.e., add and remove)
                    User object credentials whose names start
                    with the name argument specified in the constructor.
  getCredential     Permission to retrieve and check for the
                    existence of User object credentials whose names
                    start with the name argument specified in the
                    constructor.</programlisting>
      <para>
 
 The action string is converted to lowercase before processing.
 
 </para>
      <para>
 Following is a PermissionInfo style policy entry which grants a user
 administration bundle a number of <code>UserAdminPermission</code> object:
 
 </para>
      <programlisting>  (org.osgi.service.useradmin.UserAdminPermission "admin")
  (org.osgi.service.useradmin.UserAdminPermission "com.foo.*"
                "changeProperty,getCredential,changeCredential")
  (org.osgi.service.useradmin.UserAdminPermission "user.*"
                              "changeProperty,changeCredential")</programlisting>
      <para>
 
 The first permission statement grants the bundle the permission to perform
 any User Admin service operations of type "admin", that is, create and remove
 roles and configure <code>Group</code> objects.
 
 </para>
      <para>
 The second permission statement grants the bundle the permission to change
 any properties as well as get and change any credentials whose names start
 with <code>com.foo.</code>.
 
 </para>
      <para>
 The third permission statement grants the bundle the permission to change any
 properties and credentials whose names start with <code>user.</code>. This means
 that the bundle is allowed to change, but not retrieve any credentials with
 the given prefix.
 
 </para>
      <para>
 The following policy entry empowers the Http Service bundle to perform user
 authentication:
 
 </para>
      <programlisting>  grant codeBase "${jars}http.jar" {
    permission org.osgi.service.useradmin.UserAdminPermission
      "user.password", "getCredential";
  };</programlisting>
      <para>
 The permission statement grants the Http Service bundle the permission to
 validate any password credentials (for authentication purposes), but the
 bundle is not allowed to change any properties or credentials.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="ADMIN" xml:id="org.osgi.service.useradmin.UserAdminPermission.ADMIN">
         <title>public static final String ADMIN = "admin"</title>
         <para>
The permission name "admin".
   </para>
      </section>
      <section role="field" xreflabel="CHANGE_CREDENTIAL" xml:id="org.osgi.service.useradmin.UserAdminPermission.CHANGE_CREDENTIAL">
         <title>public static final String CHANGE_CREDENTIAL = "changeCredential"</title>
         <para>
The action string "changeCredential".
   </para>
      </section>
      <section role="field" xreflabel="CHANGE_PROPERTY" xml:id="org.osgi.service.useradmin.UserAdminPermission.CHANGE_PROPERTY">
         <title>public static final String CHANGE_PROPERTY = "changeProperty"</title>
         <para>
The action string "changeProperty".
   </para>
      </section>
      <section role="field" xreflabel="GET_CREDENTIAL" xml:id="org.osgi.service.useradmin.UserAdminPermission.GET_CREDENTIAL">
         <title>public static final String GET_CREDENTIAL = "getCredential"</title>
         <para>
The action string "getCredential".
   </para>
      </section>
      <section role="method" xreflabel="UserAdminPermission(String,String)" xml:id="org.osgi.service.useradmin.UserAdminPermission.UserAdminPermission-String-String-">
         <title>public  UserAdminPermission(String name,String actions)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>the name of this <code>UserAdminPermission</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>the action string.</para>
         </formalpara>
         <para role="description">
Creates a new <code>UserAdminPermission</code> with the specified name and
 actions. <code>name</code> is either the reserved string "admin" or
 the name of a credential or property, and <code>actions</code> contains a
 comma-separated list of the actions granted on the specified name. Valid
 actions are <code>changeProperty</code>,<code>changeCredential</code>, and
 getCredential.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If <code>name</code> equals "admin"
         and <code>actions</code> are specified.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.useradmin.UserAdminPermission.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>the object to be compared for equality with this object.</para>
         </formalpara>
         <para role="description">
Checks two <code>UserAdminPermission</code> objects for equality. Checks that
 <code>obj</code> is a <code>UserAdminPermission</code>, and has the same name and
 actions as this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if <code>obj</code> is a <code>UserAdminPermission</code>
         object, and has the same name and actions as this
         <code>UserAdminPermission</code> object.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getActions()" xml:id="org.osgi.service.useradmin.UserAdminPermission.getActions--">
         <title>public String getActions()</title>
         <para role="description">
Returns the canonical string representation of the actions, separated by
 comma.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the canonical string representation of the actions.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.useradmin.UserAdminPermission.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code value for this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A hash code value for this object.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="implies(Permission)" xml:id="org.osgi.service.useradmin.UserAdminPermission.implies-Permission-">
         <title>public boolean implies(Permission p)</title>
         <formalpara role="parameter">
            <title>p</title>
            <para>the permission to check against.</para>
         </formalpara>
         <para role="description">
Checks if this <code>UserAdminPermission</code> object "implies" the
 specified permission.
 </para>
         <para>
 More specifically, this method returns <code>true</code> if:
 </para>
         <para/>
         <itemizedlist>
            <listitem>
               <para>
                  <emphasis>p</emphasis> is an instanceof <code>UserAdminPermission</code>,</para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>p</emphasis>'s actions are a proper subset of this object's actions, and</para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>p</emphasis>'s name is implied by this object's name. For example,
 "java.*" implies "java.home".</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the specified permission is implied by this
         object; <code>false</code> otherwise.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="newPermissionCollection()" xml:id="org.osgi.service.useradmin.UserAdminPermission.newPermissionCollection--">
         <title>public PermissionCollection newPermissionCollection()</title>
         <para role="description">
Returns a new <code>PermissionCollection</code> object for storing
 <code>UserAdminPermission</code> objects.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a new <code>PermissionCollection</code> object suitable for storing
         <code>UserAdminPermission</code> objects.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="toString()" xml:id="org.osgi.service.useradmin.UserAdminPermission.toString--">
         <title>public String toString()</title>
         <para role="description">
Returns a string describing this <code>UserAdminPermission</code> object. This
 string must be in <code>PermissionInfo</code> encoded format.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <code>PermissionInfo</code> encoded string for this
         <code>UserAdminPermission</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>org.osgi.service.permissionadmin.PermissionInfo.getEncoded()</code>
            </para>
         </formalpara>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i1307817"><title>The Java Security Architecture for
      JDK 1.2</title>Version 1.0, Sun Microsystems, October 1998</bibliomixed>

      <bibliomixed xml:id="i1307810"><title>Java Authentication and
      Authorization
      Service</title>http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="110" revision="$Id: e034afe9fa2c8adea7ac878fb31c75354e341963 $" version="5" xml:id="service.provisioning" xml:base="../110/service.provisioning.xml">
  <title>Initial Provisioning Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.provisioning-version" linkend="org.osgi.service.provisioning"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>To allow freedom regarding the choice of management protocol, the
    OSGi Specifications assumes an architecture to remotely manage a OSGi
    framework with a Management Agent. The Management Agent is implemented
    with a Management Bundle that can communicate with an unspecified
    management protocol.</para>

    <para>This specification defines how the Management Agent can make its way
    to the OSGi framework, and gives a structured view of the problems and
    their corresponding resolution methods.</para>

    <para>The purpose of this specification is to enable the management of a
    OSGi framework by an Operator, and (optionally) to hand over the
    management of the OSGi framework later to another Operator. This approach
    is in accordance with the OSGi remote management reference
    architecture.</para>

    <para>This bootstrapping process requires the installation of a Management
    Agent, with appropriate configuration data, in the OSGi framework.</para>

    <para>This specification consists of a prologue, in which the principles
    of the Initial Provisioning are outlined, and a number of mappings to
    different mechanisms.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Policy Free</emphasis> - The proposed solution must
          be business model agnostic; none of the affected parties (Operators,
          SPS Manufacturers, etc.) should be forced into any particular
          business model.</para>
        </listitem>

        <listitem>
          <para><emphasis>Inter-operability</emphasis> - The Initial
          Provisioning must permit arbitrary inter-operability between
          management systems and OSGi frameworks. Any compliant Remote Manager
          should be able to manage any compliant OSGi framework, even in the
          absence of a prior business relationship. Adhering to this
          requirement allows a particular Operator to manage a variety of
          makes and models of OSGi framework Servers using a single management
          system of the Operator's choice. This rule also gives the consumer
          the greatest choice when selecting an Operator.</para>
        </listitem>

        <listitem>
          <para><emphasis>Flexible</emphasis> - The management process should
          be as open as possible, to allow innovation and specialization while
          still achieving interoperability.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Provisioning Service</emphasis> - A service
          registered with the Framework that provides information about the
          initial provisioning to the Management Agent.</para>
        </listitem>

        <listitem>
          <para><emphasis>Provisioning Dictionary</emphasis> - A
          <code>Dictionary</code> object that is filled with information from
          the ZIP files that are loaded during initial setup.</para>
        </listitem>

        <listitem>
          <para><emphasis>RSH Protocol</emphasis> - An OSGi specific secure
          protocol based on HTTP.</para>
        </listitem>

        <listitem>
          <para><emphasis>Management Agent</emphasis> - A bundle that is
          responsible for managing a OSGi framework under control of a Remote
          Manager.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>Initial Provisioning</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.964in" contentwidth="4.937in" fileref="ip-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section xml:id="i1365233">
    <title>Procedure</title>

    <para>The following procedure should be executed by an OSGi Framework
    implementation that supports this Initial Provisioning
    specification.</para>

    <para>When the OSGi framework is first brought under management control,
    it must be provided with an initial request URL in order to be
    provisioned. Either the end user or the manufacturer may provide the
    initial request URL. How the initial request URL is transferred to the
    Framework is not specified, but a mechanism might, for example, be a
    command line parameter when the framework is started.</para>

    <para>When asked to start the Initial Provisioning, the OSGi framework
    will send a request to the management system. This request is encoded in a
    URL, for example:</para>

    <programlisting>http://osgi.acme.com/remote-manager</programlisting>

    <para>This URL may use any protocol that is available on the OSGi
    framework Server. Many standard protocols exist, but it is also possible
    to use a proprietary protocol. For example, software could be present
    which can communicate with a smart card and could handle, for example,
    this URL:</para>

    <programlisting>smart-card://com1:0/7F20/6F38</programlisting>

    <para>Before the request URL is executed, the OSGi framework information
    is appended to the URL. This information includes at least the OSGi
    framework Identifier, but may also contain proprietary information, as
    long as the keys for this information do not conflict. Different URL
    schemes may use different methods of appending parameters; these details
    are specified in the mappings of this specification to concrete
    protocols.</para>

    <para>The result of the request must be a ZIP file. (The content type
    should be <code>application/zip</code>). It is the responsibility of the
    underlying protocol to guarantee the integrity and authenticity of this
    ZIP file.</para>

    <para>This ZIP file is unpacked and its entries (except
    <code>bundle</code> and <code>bundle-url</code> entries, described in
    <xref linkend="service.provisioning-rsh.headers"/> ) are placed in a
    <code>Dictionary</code> object. This <code>Dictionary</code> object is
    called the <emphasis>Provisioning Dictionary</emphasis>. It must be made
    available from the Provisioning Service in the service registry. The names
    of the entries in the ZIP file must not start with a solidus (<code>'/'
    \u002F</code>).</para>

    <para>The ZIP file may contain only four types of dictionary entries:
    <code>text</code>, <code>binary</code>, <code>bundle</code>, or
    <code>bundle-url</code>. The type of an entry can be specified in
    different ways. An Initial Provisioning service must look in the following
    places to find the information about an entry's (MIME) type (in the given
    order):</para>

    <orderedlist>
      <listitem>
        <para>The manifest header InitialProvisioning-Entries of the given ZIP
        file. This header is defined in <xref linkend="i1442770"/>. If this
        header is present, but a given entry's path is not named then try the
        next step.</para>
      </listitem>

      <listitem>
        <para>The extension of the entry path name if one of
        <code>.txt</code>, <code>.jar</code>, <code>.url</code> extensions.
        See <xref linkend="service.provisioning-content.types" xrefstyle="template:Table %n on page %p"/> for the mapping of types,
        MIME types, and extensions.</para>
      </listitem>

      <listitem>
        <para>The entry is assumed to be a binary type</para>
      </listitem>
    </orderedlist>

    <para>The types can optionally be specified as a MIME type as defined in
    <xref linkend="i1296602"/>. The <code>text</code> and
    <code>bundle-url</code> entries are translated into a <code>String</code>
    object from an <code>UTF-8</code> encoded byte array. All other entries
    must be stored as a <code>byte[]</code>.</para>

    <table xml:id="service.provisioning-content.types">
      <title>Content types of provisioning ZIP file</title>

      <tgroup cols="4">
        <colspec colnum="1" colwidth="1.5*"/>

        <colspec colnum="2" colwidth="3*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="4.5*"/>

        <thead>
          <row>
            <entry>Type</entry>

            <entry>MIME Type</entry>

            <entry>Ext</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>text</code></entry>

            <entry><para><xref linkend="org.osgi.service.provisioning.ProvisioningService.MIME_STRING" xrefstyle="hyperlink"/></para><para><code>text/plain;charset=utf-8</code></para></entry>

            <entry><code>.txt</code></entry>

            <entry><para>Must be represented as a String object</para></entry>
          </row>

          <row>
            <entry><code>binary</code></entry>

            <entry><para><xref linkend="org.osgi.service.provisioning.ProvisioningService.MIME_BYTE_ARRAY" xrefstyle="hyperlink"/></para><para><code>application/octet-stream</code></para></entry>

            <entry><para>not <code>txt</code>, <code>.url</code>, or
            <code>.jar</code></para></entry>

            <entry><para>Must be represented as a byte array
            (<code>byte[]</code>).</para></entry>
          </row>

          <row>
            <entry><code>bundle</code></entry>

            <entry><para><xref linkend="org.osgi.service.provisioning.ProvisioningService.MIME_BUNDLE" xrefstyle="hyperlink"/></para><para><code>application/vnd.osgi.bundle</code>
            </para><para><code>MIME_BUNDLE_ALT</code></para><para><code>application/x-osgi-bundle</code></para></entry>

            <entry><code>.jar</code></entry>

            <entry><para>Entries must be installed using
            <code>BundleContext.installBundle(String, InputStream)</code>,
            with the <code>InputStream</code> object constructed from the
            contents of the ZIP entry. The location must be the name of the
            ZIP entry without leading solidus (<code>'/' \u002F</code>). This
            entry must not be stored in the Provisioning
            Dictionary.</para><para>If a bundle with this location name is
            already installed in this system, then this bundle must be updated
            instead of installed.</para><para>The <code>MIME_BUNDLE_ALT</code>
            version is intended for backward compatibility, it specifies the
            original MIME type for bundles before there was an official IANA
            MIME type.</para></entry>
          </row>

          <row>
            <entry><code>bundle-url</code></entry>

            <entry><para><xref linkend="org.osgi.service.provisioning.ProvisioningService.MIME_BUNDLE_URL" xrefstyle="hyperlink"/></para><para><code>text/x-osgi-bundle-url;
            charset=utf-8</code></para></entry>

            <entry><code>.url</code></entry>

            <entry><para>The content of this entry is a string coded in
            <code>utf-8</code>. Entries must be installed using
            <code>BundleContext.installBundle(String, InputStream)</code>,
            with the <code>InputStream</code> object created from the given
            URL. The location must be the name of the ZIP entry without
            leading solidus (<code>'/' \u002F</code>). This entry must not be
            stored in the Provisioning Dictionary.</para><para>If a bundle
            with this location URL is already installed in this system, then
            this bundle must be updated instead of installed.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The Provisioning Service must install (but not start) all entries in
    the ZIP file that are typed with <code>bundle</code> or
    <code>bundle-url</code>.</para>

    <para>If an entry named <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_START_BUNDLE" xrefstyle="hyperlink"/> is present in the Provisioning Dictionary, then
    its content type must be text as defined in <xref linkend="service.provisioning-content.types"/>. The content of this entry
    must match the bundle location of a previously loaded bundle. This
    designated bundle must be given <code>AllPermission</code> and
    started.</para>

    <para>If no <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_START_BUNDLE" xrefstyle="hyperlink"/> entry is present in the Provisioning Dictionary,
    the Provisioning Dictionary should contain a reference to another ZIP file
    under the <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE" xrefstyle="hyperlink"/> key. If both keys are absent, no further action
    must take place.</para>

    <para>If this <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE" xrefstyle="hyperlink"/> key is present and holds a <code>String</code>
    object that can be mapped to a valid URL, then a new ZIP file must be
    retrieved from this URL. The <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE" xrefstyle="hyperlink"/> link may be repeated multiple times in
    successively loaded ZIP files.</para>

    <para>Referring to a new ZIP file with such a URL allows a manufacturer to
    place a fixed reference inside the OSGi framework Server (in a file or
    smart card) that will provide some platform identifying information and
    then also immediately load the information from the management system. The
    <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE" xrefstyle="hyperlink"/> link may be repeated multiple times in
    successively loaded ZIP files. The entry <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_UPDATE_COUNT" xrefstyle="hyperlink"/> must be an <code>Integer</code> object that must
    be incremented on every iteration.</para>

    <para>Information retrieved while loading subsequent <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE" xrefstyle="hyperlink"/> URLs may replace previous key/values in the
    Provisioning Dictionary, but must not erase unrecognized key/values. For
    example, if an assignment has assigned the key <code>proprietary-x</code>,
    with a value '3', then later assignments must not override this value,
    unless the later loaded ZIP file contains an entry with that name. All
    these updates to the Provisioning Dictionary must be stored persistently.
    At the same time, each entry of type <code>bundle</code> or
    <code>bundle-url</code> (see <xref linkend="service.provisioning-content.types"/> ) must be installed and not
    started.</para>

    <para>Once the Management Agent has been started, the Initial Provisioning
    service has become operational. In this state, the Initial Provisioning
    service must react when the Provisioning Dictionary is updated with a new
    <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE" xrefstyle="hyperlink"/> property. If this key is set, it should start the
    cycle again. For example, if the control of a OSGi framework needs to be
    transferred to another Remote Manager, the Management Agent should set the
    <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE" xrefstyle="hyperlink"/> to the location of this new Remote Manager's
    Initial Provisioning ZIP file. This process is called
    <emphasis>re-provisioning</emphasis>.</para>

    <para>If errors occur during this process, the Initial Provisioning
    service should try to notify the Service User of the problem.</para>

    <para>The previous description is depicted in <xref linkend="i1302126"/>
    as a flow chart.</para>

    <figure xml:id="i1302126">
      <title>Flow chart installation Management Agent bundle</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="3.357in" contentwidth="4.917in" fileref="installation-flow.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The Management Agent may require configuration data that is specific
    to the OSGi framework instance. If this data is available outside the
    Management Agent bundle, the merging of this data with the Management
    Agent may take place in the OSGi framework. Transferring the data
    separately will make it possible to simplify the implementation on the
    server side, as it is not necessary to create
    <emphasis>personalized</emphasis> OSGi framework bundles. The <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_AGENT_CONFIG" xrefstyle="hyperlink"/> key is reserved for this purpose, but the
    Management Agent may use another key or mechanisms if so desired.</para>

    <para>The <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_SPID" xrefstyle="hyperlink"/> key must contain the OSGi framework
    Identifier.</para>

    <section xml:id="i1442770">
      <title>InitialProvisioning-Entries Manifest Header</title>

      <para>The InitialProvisioning-Entries manifest header optionally
      specifies the type of the entries in the ZIP file. The syntax for this
      header is:</para>

      <programlisting>InitialProvisioning-Entries ::= ip-entry (',' ip-entry ) *
ip-entry                    ::= path ( ';' parameter ) *</programlisting>

      <para>The entry is the path name of a resource in the ZIP file. This
      InitialProvisioning-Entries header recognizes the following
      attribute:</para>

      <itemizedlist>
        <listitem>
          <para><code>type</code> - Gives the type of the dictionary entry.
          The type can have one of the following values: <code>text</code>,
          <code>binary</code>, <code>bundle</code>, or
          <code>bundle-url</code></para>
        </listitem>
      </itemizedlist>

      <para>If the type parameter entry is not specified for an entry, then
      the type will be inferred from the extension of the entry, as defined in
      table <xref linkend="service.provisioning-content.types" xrefstyle="template:Table %n on page %p"/>.</para>
    </section>
  </section>

  <section>
    <title>Special Configurations</title>

    <para>The next section shows some examples of specially configured types
    of OSGi framework Servers and how they are treated with the respect to the
    specifications in this document.</para>

    <section>
      <title>Branded OSGi framework Server</title>

      <para>If a OSGi framework Operator is selling OSGi framework Servers
      branded exclusively for use with their service, the provisioning will
      most likely be performed prior to shipping the OSGi framework Server to
      the User. Typically the OSGi framework is configured with the
      <code>Dictionary</code> entry <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE" xrefstyle="hyperlink"/> pointing at a location controlled by the
      Operator.</para>

      <para>Up-to-date bundles and additional configuration data must be
      loaded from that location at activation time. The OSGi framework is
      probably equipped with necessary security entities, like certificates,
      to enable secure downloads from the Operator's URL over open networks,
      if necessary.</para>
    </section>

    <section>
      <title>Non-connected OSGi framework</title>

      <para>Circumstances might exist in which the OSGi framework Server has
      no WAN connectivity, or prefers not to depend on it for the purposes not
      covered by this specification.</para>

      <para>The non-connected case can be implemented by specifying a
      <code>file://</code> URL for the initial ZIP file ( <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE" xrefstyle="hyperlink"/> ). That <code>file://</code> URL would name a
      local file containing the response that would otherwise be received from
      a remote server.</para>

      <para>The value for the Management Agent <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE" xrefstyle="hyperlink"/> found in that file will be used as input to the
      load process. The <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE" xrefstyle="hyperlink"/> may point to a bundle file stored either locally
      or remotely. No code changes are necessary for the non-connected
      scenario. The <code>file://</code> URLs must be specified, and the
      appropriate files must be created on the OSGi framework.</para>
    </section>
  </section>

  <section>
    <title>The Provisioning Service</title>

    <para>Provisioning information is conveyed between bundles using the
    Provisioning Service, as defined in the <xref linkend="org.osgi.service.provisioning.ProvisioningService" xrefstyle="hyperlink"/> interface. The Provisioning Dictionary is
    retrieved from the <code>ProvisioningService</code> object using the <xref linkend="org.osgi.service.provisioning.ProvisioningService.getInformation--" xrefstyle="hyperlink"/> method. This is a read-only
    <code>Dictionary</code> object, any changes to this
    <code>Dictionary</code> object must throw an
    <code>UnsupportedOperationException</code>.</para>

    <para>The Provisioning Service provides a number of methods to update the
    Provisioning Dictionary.</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.provisioning.ProvisioningService.addInformation-Dictionary-" xrefstyle="hyperlink"/> - Add all key/value pairs in the given
        <code>Dictionary</code> object to the Provisioning Dictionary.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.provisioning.ProvisioningService.addInformation-ZipInputStream-" xrefstyle="hyperlink"/> - It is also possible to add a ZIP file to the
        Provisioning Service immediately. This will unpack the ZIP file and
        add the entries to the Provisioning Dictionary. This method must
        install the bundles contained in the ZIP file as described in <xref linkend="i1365233"/>.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.provisioning.ProvisioningService.setInformation-Dictionary-" xrefstyle="hyperlink"/> - Set a new Provisioning Dictionary. This will
        remove all existing entries.</para>
      </listitem>
    </itemizedlist>

    <para>Each of these method will increment the <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_UPDATE_COUNT" xrefstyle="hyperlink"/> entry.</para>
  </section>

  <section>
    <title>Management Agent Environment</title>

    <para>The Management Agent should be written with great care to minimize
    dependencies on other packages and services, as <emphasis>all</emphasis>
    services in OSGi are optional. Some OSGi frameworks may have other bundles
    pre-installed, so it is possible that there may be exported packages and
    services available. Mechanisms outside the current specification, however,
    must be used to discover these packages and services before the Management
    Agent is installed.</para>

    <para>The Provisioning Service must ensure that the Management Agent is
    running with <code>AllPermission</code>. The Management Agent should check
    to see if the Permission Admin service is available, and establish the
    initial permissions as soon as possible to insure the security of the
    device when later bundles are installed. As the
    <code>PermissionAdmin</code> interfaces may not be present (it is an
    optional service), the Management Agent should export the
    <code>PermissionAdmin</code> interfaces to ensure they can be
    resolved.</para>

    <para>Once started, the Management Agent may retrieve its configuration
    data from the Provisioning Service by getting the <code>byte[]</code>
    object that corresponds to the <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_AGENT_CONFIG" xrefstyle="hyperlink"/> key in the Provisioning Dictionary. The structure
    of the configuration data is implementation specific.</para>

    <para>The scope of this specification is to provide a mechanism to
    transmit the raw configuration data to the Management Agent. The
    Management Agent bundle may alternatively be packaged with its
    configuration data in the bundle, so it may not be necessary for the
    Management Agent bundle to use the Provisioning Service at all.</para>

    <para>Most likely, the Management Agent bundle will install other bundles
    to provision the OSGi framework. Installing other bundles might even
    involve downloading a more full featured Management Agent to replace the
    initial Management Agent.</para>
  </section>

  <section>
    <title>Mapping To File Scheme</title>

    <para>The <code>file:</code> scheme is the simplest and most completely
    supported scheme which can be used by the Initial Provisioning
    specification. It can be used to store the configuration data and
    Management Agent bundle on the OSGi framework Server, and avoids any
    outside communication.</para>

    <para>If the initial request URL has a <code>file</code> scheme, no
    parameters should be appended, because the <code>file:</code> scheme does
    not accept parameters.</para>

    <section>
      <title>Example With File Scheme</title>

      <para>The manufacturer should prepare a ZIP file containing only one
      entry named <xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_START_BUNDLE" xrefstyle="hyperlink"/> that contains a location string of an entry of
      type <code>bundle</code> or <code>bundle-url</code>. For example, the
      following ZIP file demonstrates this:</para>

      <programlisting>provisioning.start.bundle  text        agent
agent                      bundle      C0AF0E9B2AB..</programlisting>

      <para>The bundle may also be specified with a URL:</para>

      <programlisting>provisioning.start.bundle  text        http://acme.com/a.jar
agent                      bundle-url  http://acme.com/a.jar</programlisting>

      <para>Upon startup, the framework is provided with the URL with the
      <code>file:</code> scheme that points to this ZIP file:</para>

      <programlisting>file:/opt/osgi/ma.zip</programlisting>
    </section>
  </section>

  <section>
    <title>Mapping To HTTP(S) Scheme</title>

    <para>This section defines how HTTP and HTTPS URLs must be used with the
    Initial Provisioning specification.</para>

    <itemizedlist>
      <listitem>
        <para>HTTP - May be used when the data exchange takes place over
        networks that are secured by other means, such as a Virtual Private
        Network (VPN) or a physically isolated network. Otherwise, HTTP is not
        a valid scheme because no authentication takes place.</para>
      </listitem>

      <listitem>
        <para>HTTPS - May be used if the OSGi framework is equipped with
        appropriate certificates.</para>
      </listitem>
    </itemizedlist>

    <para>HTTP and HTTPS share the following qualities:</para>

    <itemizedlist>
      <listitem>
        <para>Both are well known and widely used</para>
      </listitem>

      <listitem>
        <para>Numerous implementations of the protocols exist</para>
      </listitem>

      <listitem>
        <para>Caching of the Management Agent will be desired in many
        implementations where limited bandwidth is an issue. Both HTTP and
        HTTPS already contain an accepted protocol for caching.</para>
      </listitem>
    </itemizedlist>

    <para>Both HTTP and HTTPS must be used with the GET method. The response
    is a ZIP file, implying that the response header <code>Content-Type</code>
    header must contain <code>application/zip</code>.</para>

    <section>
      <title>HTTPS Certificates</title>

      <para>In order to use HTTPS, certificates must be in place. These
      certificates, that are used to establish trust towards the Operator, may
      be made available to the OSGi framework using the Provisioning Service.
      The root certificate should be assigned to the Provisioning Dictionary
      before the HTTPS provider is used. Additionally, the OSGi framework
      should be equipped with a OSGi framework certificate that allows the
      OSGi framework to properly authenticate itself towards the Operator.
      This specification does not state how this certificate gets installed
      into the OSGi framework.</para>

      <para>The root certificate is stored in the Provisioning Dictionary
      under the key:</para>

      <programlisting><xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_ROOTX509" xrefstyle="hyperlink"/></programlisting>

      <para>The Root X.509 Certificate holds certificates used to represent a
      handle to a common base for establishing trust. The certificates are
      typically used when authenticating a Remote Manager to the OSGi
      framework. In this case, a Root X.509 certificate must be part of a
      certificate chain for the Operator's certificate. The format of the
      certificate is defined in <xref linkend="i1287116"/>.</para>
    </section>

    <section xml:id="i1287116">
      <title>Certificate Encoding</title>

      <para>Root certificates are X.509 certificates. Each individual
      certificate is stored as a <code>byte[]</code> object. This
      <code>byte[]</code> object is encoded in the default Java manner, as
      follows:</para>

      <itemizedlist>
        <listitem>
          <para>The original, binary certificate data is DER encoded</para>
        </listitem>

        <listitem>
          <para>The DER encoded data is encoded into base64 to make it
          text.</para>
        </listitem>

        <listitem>
          <para>The base64 encoded data is prefixed with</para>

          <para><programlisting>-----BEGIN CERTIFICATE-----</programlisting></para>

          <para>and suffixed with:</para>

          <para><programlisting>-----END CERTIFICATE-----</programlisting></para>
        </listitem>

        <listitem>
          <para>If a record contains more than one certificate, they are
          simply appended one after the other, each with a delimiting prefix
          and suffix.</para>
        </listitem>
      </itemizedlist>

      <para xml:id="i1323445">The decoding of such a certificate may be done
      with the <code>java.security.cert.CertificateFactory</code>
      class:</para>

      <programlisting>InputStream bis = new ByteArrayInputStream(x509);// byte[]
CertificateFactory cf = 
    CertificateFactory.getInstance("X.509");
Collection c = cf.generateCertificates(bis); 
Iterator i = c.iterator(); 
while (i.hasNext()) { 
    Certificate cert = (Certificate)i.next();
    System.out.println(cert); 
} </programlisting>
    </section>

    <section xml:id="i1297554">
      <title>URL Encoding</title>

      <para>The URL must contain the OSGi framework Identity, and may contain
      more parameters. These parameters are encoded in the URL according to
      the HTTP(S) URL scheme. A base URL may be set by an end user but the
      Provisioning Service must add the OSGi framework Identifier.</para>

      <para>If the request URL already contains HTTP parameters (if there is a
      '?' in the request), the <code>service_platform_id</code> is appended to
      this URL as an additional parameter. If, on the other hand, the request
      URL does not contain any HTTP parameters, the
      <code>service_platform_id</code> will be appended to the URL after a
      '?', becoming the first HTTP parameter. The following two examples show
      these two variants:</para>

      <programlisting>http://server.operator.com/service-x? «
    foo=bar&amp;service_platform_id=VIN:123456789

http://server.operator.com/service-x? «
    service_platform_id=VIN:123456789</programlisting>

      <para>Proper URL encoding must be applied when the URL contains
      characters that are not allowed. See <xref linkend="i1297476"/>.</para>
    </section>
  </section>

  <section>
    <title>Mapping To RSH Scheme</title>

    <para>The RSH protocol is an OSGi-specific protocol, and is included in
    this specification because it is optimized for Initial Provisioning. It
    requires a shared secret between the management system and the OSGi
    framework that is small enough to be entered by the Service User.</para>

    <para>RSH bases authentication and encryption on Message Authentication
    Codes (MACs) that have been derived from a secret that is shared between
    the OSGi framework and the Operator prior to the start of the protocol
    execution.</para>

    <para>The protocol is based on an ordinary HTTP GET request/response, in
    which the request must be <emphasis>signed</emphasis> and the response
    must be <emphasis>encrypted</emphasis> and
    <emphasis>authenticated</emphasis>. Both the
    <emphasis>signature</emphasis> and <emphasis>encryption key</emphasis> are
    derived from the shared secret using Hashed Message Access Codes (HMAC)
    functions.</para>

    <para>As additional input to the HMAC calculations, one client-generated
    nonce and one server-generated nonce are used to prevent replay attacks.
    The nonces are fairly large random numbers that must be generated in
    relation to each invocation of the protocol, in order to guarantee
    freshness. These nonces are called <code>clientfg</code> (client-generated
    freshness guarantee) and <code>serverfg</code> (server-generated freshness
    guarantee).</para>

    <para>In order to separate the HMAC calculations for authentication and
    encryption, each is based on a different constant value. These constants
    are called the <emphasis>authentication constant</emphasis> and the
    <emphasis>encryption constant</emphasis>.</para>

    <para>From an abstract perspective, the protocol may be described as
    follows.</para>

    <itemizedlist>
      <listitem>
        <para><phrase role="symbol">δ</phrase> - Shared secret, 160 bits or
        more</para>
      </listitem>

      <listitem>
        <para><emphasis>s</emphasis> - Server nonce, called
        <code>servercfg</code>, 128 bits</para>
      </listitem>

      <listitem>
        <para><emphasis>c</emphasis> - Client nonce, called
        <code>clientfg</code>, 128 bits</para>
      </listitem>

      <listitem>
        <para><emphasis>K</emphasis><subscript>a</subscript> - Authentication
        key, 160 bits</para>
      </listitem>

      <listitem>
        <para><emphasis>K</emphasis><subscript>e</subscript> - Encryption key,
        192 bits</para>
      </listitem>

      <listitem>
        <para><emphasis>r</emphasis> - Response data</para>
      </listitem>

      <listitem>
        <para><emphasis>e</emphasis> - Encrypted data</para>
      </listitem>

      <listitem>
        <para><emphasis>E</emphasis> - Encryption constant, a
        <code>byte[]</code> of 05, 36, 54, 70, 00 (hex)</para>
      </listitem>

      <listitem>
        <para><emphasis>A</emphasis> - Authentication constant, a
        <code>byte[]</code> of 00, 4f, 53, 47, 49 (hex)</para>
      </listitem>

      <listitem>
        <para><emphasis>M</emphasis> - Message material, used for
        K<subscript>e</subscript> calculation.</para>
      </listitem>

      <listitem>
        <para><emphasis>m</emphasis> - The calculated message authentication
        code.</para>
      </listitem>

      <listitem>
        <para><emphasis>3DES</emphasis> - Triple DES, encryption function, see
        <xref linkend="i1326320"/>. The bytes of the key must be set to odd
        parity. CBC mode must be used where the padding method is defined in
        <xref linkend="i1371344"/>. In <xref linkend="i1371440"/> this is
        addressed as <code>PKCS5Padding</code>.</para>
      </listitem>

      <listitem>
        <para><emphasis>IV</emphasis> - Initialization vector for 3DES.</para>
      </listitem>

      <listitem>
        <para><emphasis>SHA1</emphasis> - Secure Hash Algorithm to generate
        the Hashed Message Authentication Code, see <xref linkend="i1371220"/>. The function takes a single parameter, the block
        to be worked upon.</para>
      </listitem>

      <listitem>
        <para><emphasis>HMAC</emphasis> - The function that calculates a
        message authentication code, which must HMAC-SHA1. HMAC-SHA1 is
        defined in <xref linkend="i1327494"/>. The HMAC function takes a key
        and a block to be worked upon as arguments. Note that the lower 16
        bytes of the result must be used.</para>
      </listitem>

      <listitem>
        <para><emphasis>{}</emphasis> - Concatenates its arguments</para>
      </listitem>

      <listitem>
        <para><emphasis>[]</emphasis> - Indicates access to a sub-part of a
        variable, in bytes. Index starts at one, not zero.</para>
      </listitem>
    </itemizedlist>

    <para>In each step, the emphasized server or client indicates the context
    of the calculation. If both are used at the same time, each variable will
    have server or client as a subscript.</para>

    <orderedlist>
      <listitem>
        <para>The <emphasis>client</emphasis> generates a random nonce, stores
        it and denotes it <code>clientfg</code></para>

        <para><emphasis>c = nonce</emphasis></para>
      </listitem>

      <listitem>
        <para>The client sends the request with the <code>clientfg</code> to
        the server.</para>

        <para><emphasis>c</emphasis><subscript>server</subscript> <phrase role="symbol">⇐</phrase>
        <emphasis>c</emphasis><subscript>client</subscript></para>
      </listitem>

      <listitem>
        <para>The <emphasis>server</emphasis> generates a nonce and denotes it
        <code>serverfg</code>.</para>

        <para><emphasis>s = nonce</emphasis></para>
      </listitem>

      <listitem>
        <para>The <emphasis>server</emphasis> calculates an authentication key
        based on the SHA1 function, the shared secret, the received
        <code>clientfg</code>, the <code>serverfg</code> and the
        authentication constant.</para>

        <para><emphasis>K</emphasis><subscript>a</subscript> <phrase role="symbol">←</phrase> <emphasis>SHA1</emphasis>({<phrase role="symbol">δ</phrase>, <emphasis>c</emphasis>,
        <emphasis>s</emphasis>, <emphasis>A</emphasis>})</para>
      </listitem>

      <listitem xml:id="i1325557">
        <para>The <emphasis>server</emphasis> calculates an encryption key
        using an SHA-1 function, the shared secret, the received
        <code>clientfg</code>, the <code>serverfg</code> and the encryption
        constant. It must first calculate the <emphasis>key
        material</emphasis> M.</para>

        <para><emphasis>M</emphasis>[1, 20] <phrase role="symbol">←</phrase>
        <emphasis>SHA1</emphasis>({ <phrase role="symbol">δ</phrase>,
        <emphasis>c</emphasis>, <emphasis>s</emphasis>,
        <emphasis>E</emphasis>})</para>

        <para><emphasis>M</emphasis>[21, 40] <phrase role="symbol">←</phrase>
        <emphasis>SHA1</emphasis>({ <phrase role="symbol">δ</phrase>,
        <emphasis>M</emphasis>[1, 20], <emphasis>c</emphasis>,
        <emphasis>s</emphasis>, <emphasis>E</emphasis>})</para>
      </listitem>

      <listitem xml:id="i1325580">
        <para>The key for DES consists K<subscript>e</subscript> and
        IV.</para>

        <para><emphasis>K</emphasis><subscript>e</subscript> <phrase role="symbol">←</phrase> <emphasis>M</emphasis>[1, 24]</para>

        <para><emphasis>IV</emphasis> <phrase role="symbol">←</phrase>
        <emphasis>M</emphasis>[25, 32]</para>

        <para>The <emphasis>server</emphasis> encrypts the response data using
        the encryption key derived in step <xref linkend="i1325557"/>. The
        encryption algorithm that must be used to encrypt/decrypt the response
        data is 3DES. 24 bytes (192 bits) from M are used to generate
        K<subscript>e</subscript>, but the low order bit of each byte must be
        used as an odd parity bit. This means that before using
        K<subscript>e</subscript>, each byte must be processed to set the low
        order bit so that the byte has odd parity.</para>

        <para>The encryption/decryption key used is specified by the
        following:</para>

        <para><emphasis>e</emphasis> <phrase role="symbol">←</phrase>
        <emphasis>3DES</emphasis>(
        <emphasis>K</emphasis><subscript>e</subscript>,
        <emphasis>IV</emphasis>, <emphasis>r</emphasis>)</para>
      </listitem>

      <listitem>
        <para>The <emphasis>server</emphasis> calculates a MAC
        <emphasis>m</emphasis> using the HMAC function, the encrypted response
        data and the authentication key derived in 4.</para>

        <para><emphasis>m</emphasis> <phrase role="symbol">←</phrase>
        <emphasis>HMAC</emphasis>(
        <emphasis>K</emphasis><subscript>a</subscript>,
        <emphasis>e</emphasis>)</para>
      </listitem>

      <listitem>
        <para>The <emphasis>server</emphasis> sends a response to the
        <emphasis>client</emphasis> containing the <code>serverfg</code>, the
        MAC <emphasis>m</emphasis> and the encrypted response data</para>

        <para><emphasis>s</emphasis><subscript>client</subscript> <phrase role="symbol">⇐</phrase>
        <emphasis>s</emphasis><subscript>server</subscript></para>

        <para><emphasis>m</emphasis><subscript>client</subscript> <phrase role="symbol">⇐</phrase>
        <emphasis>m</emphasis><subscript>server</subscript></para>

        <para><emphasis>e</emphasis><subscript>client</subscript> <phrase role="symbol">⇐</phrase>
        <emphasis>e</emphasis><subscript>server</subscript></para>

        <para>The <emphasis>client</emphasis> calculates the encryption key
        K<subscript>e</subscript> the same way the server did in steps <xref linkend="i1325557"/> and <xref linkend="i1325580"/>, and uses this to
        decrypt the encrypted response data. The <code>serverfg</code> value
        received in the response is used in the calculation.</para>

        <para><emphasis>r</emphasis> <phrase role="symbol">←</phrase>
        <emphasis>3DES</emphasis>(
        <emphasis>K</emphasis><subscript>e</subscript>,
        <emphasis>IV</emphasis>, <emphasis>e</emphasis>)</para>
      </listitem>

      <listitem>
        <para>The <emphasis>client</emphasis> performs the calculation of the
        MAC <emphasis>m'</emphasis> in the same way the server did, and checks
        that the results match the received MAC <emphasis>m</emphasis>. If
        they do not match, further processing is discarded. The
        <code>serverfg</code> value received in the response is used in the
        calculation.</para>

        <para><emphasis>K</emphasis><subscript>a</subscript> <phrase role="symbol">←</phrase> <emphasis>SHA1</emphasis>({<phrase role="symbol">δ</phrase>, <emphasis>c</emphasis>,
        <emphasis>s</emphasis>, <emphasis>A</emphasis>})</para>

        <para><emphasis>m'</emphasis> <phrase role="symbol">←</phrase>
        <emphasis>HMAC</emphasis>(
        <emphasis>K</emphasis><subscript>a</subscript>,
        <emphasis>e</emphasis>)</para>

        <para><emphasis>m' = m</emphasis></para>
      </listitem>
    </orderedlist>

    <figure>
      <title>Action Diagram for RSH</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.166in" contentwidth="4.941in" fileref="rsh-action.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <section>
      <title>Shared Secret</title>

      <para>The <emphasis>shared secret</emphasis> should be a key of length
      160 bits (20 bytes) or more. The length is selected to match the output
      of the selected hash algorithm <xref linkend="i1278847"/>.</para>

      <para>In some scenarios, the shared secret is generated by the Operator
      and communicated to the User, who inserts the secret into the OSGi
      framework through some unspecified means.</para>

      <para>The opposite is also possible: the shared secret can be stored
      within the OSGi framework, extracted from it, and then communicated to
      the Operator. In this scenario, the source of the shared secret could be
      either the OSGi framework or the Operator.</para>

      <para>In order for the server to calculate the authentication and
      encryption keys, it requires the proper shared secret. The server must
      have access to many different shared secrets, one for each OSGi
      framework it is to support. To be able to resolve this issue, the server
      must typically also have access to the OSGi framework Identifier of the
      OSGi framework. The normal way for the server to know the OSGi framework
      Identifier is through the application protocol, as this value is part of
      the URL encoded parameters of the HTTP, HTTPS, or RSH mapping of the
      Initial Provisioning.</para>

      <para>In order to be able to switch Operators, a new shared secret must
      be used. The new secret may be generated by the new Operator and then
      inserted into the OSGi framework device using a mechanism not covered by
      this specification. Or the device itself may generate the new secret and
      convey it to the owner of the device using a display device or read-out,
      which is then communicated to the new operator out-of-band.
      Additionally, the generation of the new secret may be triggered by some
      external event, like holding down a button for a specified amount of
      time.</para>
    </section>

    <section>
      <title>Request Coding</title>

      <para>RSH is mapped to HTTP or HTTPS. Thus, the request parameters are
      URL encoded as discussed in <xref linkend="i1297554"/>. RSH requires an
      additional parameter in the URL: the <code>clientfg</code> parameter.
      This parameter is a nonce that is used to counter replay attacks. See
      also <xref linkend="i1364615"/>.</para>
    </section>

    <section>
      <title>Response Coding</title>

      <para>The server's response to the client is composed of three
      parts:</para>

      <itemizedlist>
        <listitem>
          <para>A header containing the protocol version and the
          <code>serverfg</code></para>
        </listitem>

        <listitem>
          <para>The MAC</para>
        </listitem>

        <listitem>
          <para>The encrypted response</para>
        </listitem>
      </itemizedlist>

      <para>These three items are packaged into a binary container according
      to <xref linkend="service.provisioning-rsh.headers"/>.</para>

      <table xml:id="service.provisioning-rsh.headers">
        <title>RSH Header description</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="4*"/>

          <colspec colnum="3" colwidth="1*"/>

          <thead>
            <row>
              <entry>Bytes</entry>

              <entry>Description</entry>

              <entry>Value hex</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><para>4</para></entry>

              <entry><para>Number of bytes in header</para></entry>

              <entry><para>2E</para></entry>
            </row>

            <row>
              <entry><para>1</para></entry>

              <entry><para>Major version number</para></entry>

              <entry><para>01</para></entry>
            </row>

            <row>
              <entry><para>1</para></entry>

              <entry><para>Minor version number</para></entry>

              <entry><para>00</para></entry>
            </row>

            <row>
              <entry><para>16</para></entry>

              <entry><para><code>serverfg</code></para></entry>

              <entry><para>...</para></entry>
            </row>

            <row>
              <entry><para>4</para></entry>

              <entry><para>Number of bytes in MAC</para></entry>

              <entry><para>10</para></entry>
            </row>

            <row>
              <entry><para>16</para></entry>

              <entry><para>Message Authentication Code</para></entry>

              <entry><para>MAC</para></entry>
            </row>

            <row>
              <entry><para>4</para></entry>

              <entry><para>Number of bytes of encrypted ZIP
              file</para></entry>

              <entry><para>N</para></entry>
            </row>

            <row>
              <entry><para>N</para></entry>

              <entry><para>Encrypted ZIP file</para></entry>

              <entry><para>...</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The response content type is an RSH-specific encrypted ZIP file,
      implying that the response header <code>Content-Type</code> must be
      <code>application/x-rsh</code> for the HTTP request. When the content
      file is decrypted, the content must be a ZIP file.</para>
    </section>

    <section>
      <title>RSH URL</title>

      <para>The RSH URL must be used internally within the OSGi framework to
      indicate the usage of RSH for initial provisioning. The RSH URL format
      is identical to the HTTP URL format, except that the scheme is
      <code>rsh:</code> instead of <code>http:</code>. For example (
      <code>«</code> means line continues on next line):</para>

      <programlisting>rsh://server.operator.com/service-x</programlisting>
    </section>

    <section>
      <title>Extensions to the Provisioning Service Dictionary</title>

      <para>RSH specifies one additional entry for the Provisioning
      Dictionary:</para>

      <programlisting><xref linkend="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_RSH_SECRET" xrefstyle="hyperlink"/></programlisting>

      <para>The value of this entry is a <code>byte[]</code> containing the
      shared secret used by the RSH protocol.</para>
    </section>

    <section xml:id="i1364615">
      <title>RSH Transport</title>

      <para>RSH is mapped to HTTP or HTTPS and follows the same URL encoding
      rules, except that the <code>clientfg</code> is additionally appended to
      the URL. The key in the URL must be <code>clientfg</code> and the value
      must be encoded in base 64 format:</para>

      <para>The <code>clientfg</code> parameter is transported as an HTTP
      parameter that is appended after the <code>service_platform_id</code>
      parameter. The second example above would then be:</para>

      <programlisting>rsh://server.operator.com/service-x</programlisting>

      <para>Which, when mapped to HTTP, must become:</para>

      <programlisting>http://server.operator.com/service-x «
    service_platform_id=VIN:123456789&amp; «
    clientfg=AHPmWcw%2FsiWYC37xZNdKvQ%3D%3D</programlisting>
    </section>
  </section>

  <section>
    <title>Exception Handling</title>

    <para>The Initial Provisioning process is a sensitive process that must
    run without user supervision. There is therefore a need to handle
    exceptional cases in a well defined way to simplify trouble
    shooting.</para>

    <para>There are only 2 types of problems that halt the provisioning
    process. They are:</para>

    <itemizedlist>
      <listitem>
        <para>IO Exception when reading or writing provisioning
        information.</para>
      </listitem>

      <listitem>
        <para>IO Exception when retrieving or processing a provisioning zip
        file.</para>
      </listitem>
    </itemizedlist>

    <para>Other exceptions can occur and the Provisioning Service must do any
    attempt to log these events.</para>

    <para>In the cases that the provisioning process stops, it is important
    that the clients of the provisioning service have a way to find out that
    the process is stopped. The mechanism that is used for this is a special
    entry in the provisioning dictionary. The name of the entry must be
    <code>provisioning.error</code>. The value is a String object with the
    following format:</para>

    <itemizedlist>
      <listitem>
        <para>Numeric error code</para>
      </listitem>

      <listitem>
        <para>Space</para>
      </listitem>

      <listitem>
        <para>A human readable string describing the error.</para>
      </listitem>
    </itemizedlist>

    <para>Permitted error codes are:</para>

    <itemizedlist>
      <listitem>
        <para>0 - Unknown error</para>
      </listitem>

      <listitem>
        <para>1 - Couldn't load or save provisioning information</para>
      </listitem>

      <listitem>
        <para>2 - Malformed URL Exception</para>
      </listitem>

      <listitem>
        <para>3 - IO Exception when retrieving document of a URL</para>
      </listitem>

      <listitem>
        <para>4 - Corrupted Zip Input Stream</para>
      </listitem>
    </itemizedlist>

    <para>The provisioning.update.count will be incremented as normal when a
    <code>provisioning.error</code> entry is added to the provisioning
    information. After, the provisioning service will take no further
    action.</para>

    <para>Some examples:</para>

    <programlisting>0 SIM card removed
2 "http://www.acme.com/secure/blib/ifa.zip"</programlisting>
  </section>

  <section>
    <title>Security</title>

    <para>The security model for the OSGi framework is based on the integrity
    of the Management Agent deployment. If any of the mechanisms used during
    the deployment of management agents are weak, or can be compromised, the
    whole security model becomes weak.</para>

    <para>From a security perspective, one attractive means of information
    exchange would be a smart card. This approach enables all relevant
    information to be stored in a single place. The Operator could then
    provide the information to the OSGi framework by inserting the smart card
    into the OSGi framework.</para>

    <section>
      <title>Concerns</title>

      <para>The major security concerns related to the deployment of the
      Management Agent are:</para>

      <itemizedlist>
        <listitem>
          <para>The OSGi framework is controlled by the intended
          Operator</para>
        </listitem>

        <listitem>
          <para>The Operator controls the intended OSGi framework(s)</para>
        </listitem>

        <listitem>
          <para>The integrity and confidentiality of the information exchange
          that takes place during these processes must be considered</para>
        </listitem>
      </itemizedlist>

      <para>In order to address these concerns, an implementation of the OSGi
      Remote Management Architecture must assure that:</para>

      <itemizedlist>
        <listitem>
          <para>The Operator authenticates itself to the OSGi framework</para>
        </listitem>

        <listitem>
          <para>The OSGi framework authenticates itself to the Operator</para>
        </listitem>

        <listitem>
          <para>The integrity and confidentiality of the Management Agent,
          certificates, and configuration data are fully protected if they are
          transported over public transports.</para>
        </listitem>
      </itemizedlist>

      <para>Each mapping of the Initial Provisioning specification to a
      concrete implementation must describe how these goals are met.</para>
    </section>

    <section>
      <title>OSGi framework Long-Term Security</title>

      <para>Secrets for long-term use may be exchanged during the Initial
      Provisioning procedures. This way, one or more secrets may be shared
      securely, assuming that the Provisioning Dictionary assignments used are
      implemented with the proper security characteristics.</para>
    </section>

    <section>
      <title>Permissions</title>

      <para>The provisioning information may contain sensitive information.
      Also, the ability to modify provisioning information can have drastic
      consequences. Thus, only trusted bundles should be allowed to register,
      or get the Provisioning Service. This restriction can be enforced using
      <code>ServicePermission[ ProvisioningService, GET]</code>.</para>

      <para>No <code>Permission</code> classes guard reading or modification
      of the Provisioning Dictionary, so care must be taken not to leak the
      <code>Dictionary</code> object received from the Provisioning Service to
      bundles that are not trusted.</para>

      <para>Whether message-based or connection-based, the communications used
      for Initial Provisioning must support mutual authentication and message
      integrity checking, at a minimum.</para>

      <para>By using both server and client authentication in HTTPS, the
      problem of establishing identity is solved. In addition, HTTPS will
      encrypt the transmitted data. HTTPS requires a Public Key Infrastructure
      implementation in order to retrieve the required certificates.</para>

      <para>When RSH is used, it is vital that the shared secret is shared
      only between the Operator and the OSGi framework, and no one
      else.</para>
    </section>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.provisioning" xml:id="org.osgi.service.provisioning" xml:base="../../generated/javadoc/docbook/org.osgi.service.provisioning.xml">
   <title>org.osgi.service.provisioning</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.provisioning-version">Version 1.2</releaseinfo>
      <edition xml:id="org.osgi.service.provisioning-version.number">1.2</edition>
   </info>
   <para>
Provisioning Package Version 1.2.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.provisioning; version="[1.2,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.provisioning; version="[1.2,1.3)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.provisioning.ProvisioningService">
                  <code>ProvisioningService</code>
               </link> - 
Service for managing the initial provisioning information.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="ProvisioningService" xml:id="org.osgi.service.provisioning.ProvisioningService">
      <title>public interface ProvisioningService</title>
      <para>
Service for managing the initial provisioning information.
 </para>
      <para>
 Initial provisioning of an OSGi device is a multi step process that
 culminates with the installation and execution of the initial management
 agent. At each step of the process, information is collected for the next
 step. Multiple bundles may be involved and this service provides a means for
 these bundles to exchange information. It also provides a means for the
 initial Management Bundle to get its initial configuration information.
 </para>
      <para>
 The provisioning information is collected in a <code>Dictionary</code> object,
 called the Provisioning Dictionary. Any bundle that can access the service
 can get a reference to this object and read and update provisioning
 information. The key of the dictionary is a <code>String</code> object and the
 value is a <code>String</code> or <code>byte[]</code> object. The single exception is
 the PROVISIONING_UPDATE_COUNT value which is an Integer. The
 <code>provisioning</code> prefix is reserved for keys defined by OSGi, other key
 names may be used for implementation dependent provisioning systems.
 </para>
      <para>
 Any changes to the provisioning information will be reflected immediately in
 all the dictionary objects obtained from the Provisioning Service.
 </para>
      <para>
 Because of the specific application of the Provisioning Service, there should
 be only one Provisioning Service registered. This restriction will not be
 enforced by the Framework. Gateway operators or manufactures should ensure
 that a Provisioning Service bundle is not installed on a device that already
 has a bundle providing the Provisioning Service.
 </para>
      <para>
 The provisioning information has the potential to contain sensitive
 information. Also, the ability to modify provisioning information can have
 drastic consequences. Thus, only trusted bundles should be allowed to
 register and get the Provisioning Service. The <code>ServicePermission</code> is
 used to limit the bundles that can gain access to the Provisioning Service.
 There is no check of <code>Permission</code> objects to read or modify the
 provisioning information, so care must be taken not to leak the Provisioning
 Dictionary received from <code>getInformation</code> method.</para>
      <formalpara role="parameter">
         <title>No Implement</title>
         <para>Consumers of this API must not implement this interface</para>
      </formalpara>
      <section role="field" xreflabel="INITIALPROVISIONING_ENTRIES" xml:id="org.osgi.service.provisioning.ProvisioningService.INITIALPROVISIONING_ENTRIES">
         <title>public static final String INITIALPROVISIONING_ENTRIES = "InitialProvisioning-Entries"</title>
         <para>
Name of the header that specifies the type information for the ZIP file
 entries.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="MIME_BUNDLE" xml:id="org.osgi.service.provisioning.ProvisioningService.MIME_BUNDLE">
         <title>public static final String MIME_BUNDLE = "application/vnd.osgi.bundle"</title>
         <para>
MIME type to be stored in the extra field of a <code>ZipEntry</code> object
 for an installable bundle file. Zip entries of this type will be
 installed in the framework, but not started. The entry will also not be
 put into the information dictionary.
   </para>
      </section>
      <section role="field" xreflabel="MIME_BUNDLE_ALT" xml:id="org.osgi.service.provisioning.ProvisioningService.MIME_BUNDLE_ALT">
         <title>public static final String MIME_BUNDLE_ALT = "application/x-osgi-bundle"</title>
         <para>
Alternative MIME type to be stored in the extra field of a
 <code>ZipEntry</code> object for an installable bundle file. Zip entries of
 this type will be installed in the framework, but not started. The entry
 will also not be put into the information dictionary. This alternative
 entry is only for backward compatibility, new applications are
 recommended to use <code>MIME_BUNDLE</code>, which is an official IANA MIME
 type.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="MIME_BUNDLE_URL" xml:id="org.osgi.service.provisioning.ProvisioningService.MIME_BUNDLE_URL">
         <title>public static final String MIME_BUNDLE_URL = "text/x-osgi-bundle-url"</title>
         <para>
MIME type to be stored in the extra field of a ZipEntry for a String that
 represents a URL for a bundle. Zip entries of this type will be used to
 install (but not start) a bundle from the URL. The entry will not be put
 into the information dictionary.
   </para>
      </section>
      <section role="field" xreflabel="MIME_BYTE_ARRAY" xml:id="org.osgi.service.provisioning.ProvisioningService.MIME_BYTE_ARRAY">
         <title>public static final String MIME_BYTE_ARRAY = "application/octet-stream"</title>
         <para>
MIME type to be stored in the extra field of a <code>ZipEntry</code> object
 for <code>byte[]</code> data.
   </para>
      </section>
      <section role="field" xreflabel="MIME_STRING" xml:id="org.osgi.service.provisioning.ProvisioningService.MIME_STRING">
         <title>public static final String MIME_STRING = "text/plain;charset=utf-8"</title>
         <para>
MIME type to be stored in the extra field of a <code>ZipEntry</code> object
 for String data.
   </para>
      </section>
      <section role="field" xreflabel="PROVISIONING_AGENT_CONFIG" xml:id="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_AGENT_CONFIG">
         <title>public static final String PROVISIONING_AGENT_CONFIG = "provisioning.agent.config"</title>
         <para>
The key to the provisioning information that contains the initial
 configuration information of the initial Management Agent. The value will
 be of type <code>byte[]</code>.
   </para>
      </section>
      <section role="field" xreflabel="PROVISIONING_REFERENCE" xml:id="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE">
         <title>public static final String PROVISIONING_REFERENCE = "provisioning.reference"</title>
         <para>
The key to the provisioning information that contains the location of the
 provision data provider. The value must be of type <code>String</code>.
   </para>
      </section>
      <section role="field" xreflabel="PROVISIONING_ROOTX509" xml:id="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_ROOTX509">
         <title>public static final String PROVISIONING_ROOTX509 = "provisioning.rootx509"</title>
         <para>
The key to the provisioning information that contains the root X509
 certificate used to establish trust with operator when using HTTPS.
   </para>
      </section>
      <section role="field" xreflabel="PROVISIONING_RSH_SECRET" xml:id="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_RSH_SECRET">
         <title>public static final String PROVISIONING_RSH_SECRET = "provisioning.rsh.secret"</title>
         <para>
The key to the provisioning information that contains the shared secret
 used in conjunction with the RSH protocol.
   </para>
      </section>
      <section role="field" xreflabel="PROVISIONING_SPID" xml:id="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_SPID">
         <title>public static final String PROVISIONING_SPID = "provisioning.spid"</title>
         <para>
The key to the provisioning information that uniquely identifies the
 Service Platform. The value must be of type <code>String</code>.
   </para>
      </section>
      <section role="field" xreflabel="PROVISIONING_START_BUNDLE" xml:id="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_START_BUNDLE">
         <title>public static final String PROVISIONING_START_BUNDLE = "provisioning.start.bundle"</title>
         <para>
The key to the provisioning information that contains the location of the
 bundle to start with <code>AllPermission</code>. The bundle must have be
 previously installed for this entry to have any effect.
   </para>
      </section>
      <section role="field" xreflabel="PROVISIONING_UPDATE_COUNT" xml:id="org.osgi.service.provisioning.ProvisioningService.PROVISIONING_UPDATE_COUNT">
         <title>public static final String PROVISIONING_UPDATE_COUNT = "provisioning.update.count"</title>
         <para>
The key to the provisioning information that contains the update count of
 the info data. Each set of changes to the provisioning information must
 end with this value being incremented. The value must be of type
 <code>Integer</code>. This key/value pair is also reflected in the properties
 of the ProvisioningService in the service registry.
   </para>
      </section>
      <section role="method" xreflabel="addInformation(Dictionary)" xml:id="org.osgi.service.provisioning.ProvisioningService.addInformation-Dictionary-">
         <title>public void addInformation(Dictionary info)</title>
         <formalpara role="parameter">
            <title>info</title>
            <para>the set of Provisioning Information key/value pairs to add to
        the Provisioning Information dictionary. Any keys are values that
        are of an invalid type will be silently ignored.</para>
         </formalpara>
         <para role="description">
Adds the key/value pairs contained in <code>info</code> to the Provisioning
 Information dictionary. This method causes the
 <code>PROVISIONING_UPDATE_COUNT</code> to be incremented.
   </para>
      </section>
      <section role="method" xreflabel="addInformation(ZipInputStream)" xml:id="org.osgi.service.provisioning.ProvisioningService.addInformation-ZipInputStream-">
         <title>public void addInformation(ZipInputStream zis) throws IOException</title>
         <formalpara role="parameter">
            <title>zis</title>
            <para>the <code>ZipInputStream</code> that will be used to add key/value
        pairs to the Provisioning Information dictionary and install and
        start bundles. If a <code>ZipEntry</code> does not have an
        <code>Extra</code> field that corresponds to one of the four defined
        MIME types (<code>MIME_STRING</code>, <code>MIME_BYTE_ARRAY</code>,
        <code>MIME_BUNDLE</code>, and <code>MIME_BUNDLE_URL</code>) in will be
        silently ignored.</para>
         </formalpara>
         <para role="description">
Processes the <code>ZipInputStream</code> and extracts information to add to
 the Provisioning Information dictionary, as well as, install/update and
 start bundles. This method causes the <code>PROVISIONING_UPDATE_COUNT</code>
 to be incremented.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if an error occurs while processing the
         ZipInputStream. No additions will be made to the Provisioning
         Information dictionary and no bundles must be started or
         installed.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getInformation()" xml:id="org.osgi.service.provisioning.ProvisioningService.getInformation--">
         <title>public Dictionary getInformation()</title>
         <para role="description">
Returns a reference to the Provisioning Dictionary. Any change operations
 (put and remove) to the dictionary will cause an
 <code>UnsupportedOperationException</code> to be thrown. Changes must be done
 using the <code>setInformation</code> and <code>addInformation</code> methods of
 this service.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A reference to the Provisioning Dictionary.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setInformation(Dictionary)" xml:id="org.osgi.service.provisioning.ProvisioningService.setInformation-Dictionary-">
         <title>public void setInformation(Dictionary info)</title>
         <formalpara role="parameter">
            <title>info</title>
            <para>the new set of Provisioning Information key/value pairs. Any
        keys are values that are of an invalid type will be silently
        ignored.</para>
         </formalpara>
         <para role="description">
Replaces the Provisioning Information dictionary with the key/value pairs
 contained in <code>info</code>. Any key/value pairs not in <code>info</code> will
 be removed from the Provisioning Information dictionary. This method
 causes the <code>PROVISIONING_UPDATE_COUNT</code> to be incremented.
   </para>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i1327494"><title>HMAC: Keyed-Hashing for Message
      Authentication</title>http://www.ietf.org/rfc/rfc2104.txt Krawczyk ,et.
      al. 1997.</bibliomixed>

      <bibliomixed xml:id="i1278847"><title>NIST, FIPS PUB 180-1: Secure Hash
      Standard, April 1995.</title></bibliomixed>

      <bibliomixed><title>Hypertext Transfer Protocol -
      HTTP/1.1</title>http://www.ietf.org/rfc/rfc2616.txt Fielding, R., et.
      al.</bibliomixed>

      <bibliomixed><title>Rescorla, E., HTTP over TLS, IETF RFC 2818, May
      2000</title>http://www.ietf.org/rfc/rfc2818.txt.</bibliomixed>

      <bibliomixed xml:id="i1287017"><title>ZIP Archive
      format</title>http://www.pkware.com/support/zip-app-note/archives</bibliomixed>

      <bibliomixed xml:id="i1297476"><title>RFC 2396 - Uniform Resource
      Identifier
      (URI)</title>http://www.ietf.org/rfc/rfc2396.txt</bibliomixed>

      <bibliomixed xml:id="i1296602"><title>MIME
      Types</title>http://www.ietf.org/rfc/rfc2046.txt<?line-break?>http://www.iana.org/assignments/media-types</bibliomixed>

      <bibliomixed xml:id="i1326320"><title>3DES</title>W/ Tuchman, "Hellman
      Presents No Shortcut Solution to DES," IEEE Spectrum, v. 16, n. 7 July
      1979, pp40-41.</bibliomixed>

      <bibliomixed xml:id="i1371344"><title>RFC 1423 Part III: Algorithms,
      Modes, and
      Identifiers</title>http://www.ietf.org/rfc/rfc1423.txt</bibliomixed>

      <bibliomixed><title>PKCS
      5</title>ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-5v2</bibliomixed>

      <bibliomixed xml:id="i1371440"><title>Java Cryptography API (part of
      Java
      1.4)</title>http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html/</bibliomixed>

      <bibliomixed xml:id="i1371220"><title>SHA-1</title>U.S. Government,
      Proposed Federal Information Processing Standard for Secure Hash
      Standard, January 1992</bibliomixed>

      <bibliomixed><title>Transport Layer
      Security</title>http://www.ietf.org/rfc/rfc2246.txt, January 1999, The
      TLS Protocol Version 1.0, T. Dierks &amp; C. Allen.</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="112" revision="$Id: b18e1b93333ab90607511d726aedd0cd5a140810 $" version="5" xml:id="service.component" xml:base="../112/service.component.xml">
  <title>Declarative Services Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.component-version" linkend="org.osgi.service.component"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The OSGi Framework contains a procedural service model which
    provides a publish/find/bind model for using
    <emphasis>services</emphasis>. This model is elegant and powerful, it
    enables the building of applications out of bundles that communicate and
    collaborate using these services.</para>

    <para>This specification addresses some of the complications that arise
    when the OSGi service model is used for larger systems and wider
    deployments, such as:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Startup Time</emphasis> - The procedural service model
        requires a bundle to actively register and acquire its services. This
        is normally done at startup time, requiring all present bundles to be
        initialized with a Bundle Activator. In larger systems, this quickly
        results in unacceptably long startup times.</para>
      </listitem>

      <listitem>
        <para><emphasis>Memory Footprint</emphasis> - A service registered
        with the Framework implies that the implementation, and related
        classes and objects, are loaded in memory. If the service is never
        used, this memory is unnecessarily occupied. The creation of a class
        loader may therefore cause significant overhead.</para>
      </listitem>

      <listitem>
        <para><emphasis>Complexity</emphasis> - Service can come and go at any
        time. This dynamic behavior makes the service programming model more
        complex than more traditional models. This complexity negatively
        influences the adoption of the OSGi service model as well as the
        robustness and reliability of applications because these applications
        do not always handle the dynamicity correctly.</para>
      </listitem>
    </itemizedlist>

    <para>The <emphasis>service component</emphasis> model uses a declarative
    model for publishing, finding and binding to OSGi services. This model
    simplifies the task of authoring OSGi services by performing the work of
    registering the service and handling service dependencies. This minimizes
    the amount of code a programmer has to write; it also allows service
    components to be loaded only when they are needed. As a result, bundles
    need not provide a <code>BundleActivator</code> class to collaborate with
    others through the service registry.</para>

    <para>From a system perspective, the service component model means reduced
    startup time and potentially a reduction of the memory footprint. From a
    programmer's point of view the service component model provides a
    simplified programming model.</para>

    <para>The Service Component model makes use of concepts described in <xref linkend="i1550732"/>.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Backward Compatibility</emphasis> - The service
          component model must operate seamlessly with the existing service
          model.</para>
        </listitem>

        <listitem>
          <para><emphasis>Size Constraints</emphasis> - The service component
          model must not require memory and performance intensive subsystems.
          The model must also be applicable on resource constrained
          devices.</para>
        </listitem>

        <listitem>
          <para><emphasis>Delayed Activation</emphasis> - The service
          component model must allow delayed activation of a service
          component. Delayed activation allows for delayed class loading and
          object creation until needed, thereby reducing the overall memory
          footprint.</para>
        </listitem>

        <listitem>
          <para><emphasis>Simplicity</emphasis> - The programming model for
          using declarative services must be very simple and not require the
          programmer to learn a complicated API or XML sub-language.</para>
        </listitem>

        <listitem>
          <para><emphasis>Reactive</emphasis> - It must be possible to react
          to changes in the external dependencies with different
          policies.</para>
        </listitem>

        <listitem>
          <para><emphasis>Annotations</emphasis> - Annotations must be
          provided that can leverage the type information to create the XML
          descriptor.</para>
        </listitem>

        <listitem>
          <para><emphasis>Introspection</emphasis> - It must be possible to
          introspect the service components.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Service Component</emphasis> - A service component
          contains a description that is interpreted at run time to create and
          dispose objects depending on the availability of other services, the
          need for such an object, and available configuration data. Such
          objects can optionally provide a service. This specification also
          uses the generic term <emphasis>component</emphasis> to refer to a
          service component.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service Component Runtime (SCR)</emphasis> - The
          actor that manages the components and their life cycle and allows
          introspection of the components.</para>
        </listitem>

        <listitem>
          <para><emphasis>Component Description</emphasis> - The declaration
          of a service component. It is contained within an XML document in a
          bundle.</para>
        </listitem>

        <listitem>
          <para><emphasis>Component Properties</emphasis> - A set of
          properties which can be specified by the component description,
          Configuration Admin service and from the component factory.</para>
        </listitem>

        <listitem>
          <para><emphasis>Component Property Type</emphasis> - A user defined
          annotation type which defines component properties and is
          implemented by SCR to provide type safe access to the defined
          component properties.</para>
        </listitem>

        <listitem>
          <para><emphasis>Component Configuration</emphasis> - A component
          configuration represents a component description parameterized by
          component properties. It is the entity that tracks the component
          dependencies and manages a component instance. An activated
          component configuration has a component context.</para>
        </listitem>

        <listitem>
          <para><emphasis>Component Instance</emphasis> - An instance of the
          component implementation class. A component instance is created when
          a component configuration is activated and discarded when the
          component configuration is deactivated. A component instance is
          associated with exactly one component configuration.</para>
        </listitem>

        <listitem>
          <para><emphasis>Delayed Component</emphasis> - A component whose
          component configurations are activated when their service is
          requested.</para>
        </listitem>

        <listitem>
          <para><emphasis>Immediate Component</emphasis> - A component whose
          component configurations are activated immediately upon becoming
          satisfied.</para>
        </listitem>

        <listitem>
          <para><emphasis>Factory Component</emphasis> - A component whose
          component configurations are created and activated through the
          component's component factory.</para>
        </listitem>

        <listitem>
          <para><emphasis>Reference</emphasis> - A specified dependency of a
          component on a set of target services.</para>
        </listitem>

        <listitem>
          <para><emphasis>Target Services</emphasis> - The set of services
          that is defined by the reference interface and target property
          filter.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bound Services</emphasis> - The set of target
          services that are bound to a component configuration.</para>
        </listitem>

        <listitem>
          <para><emphasis>Event methods</emphasis> - The bind, updated, and
          unbind methods associated with a Reference.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>Service Component Runtime, org.osgi.service.component
        package</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.876in" contentwidth="7.000in" fileref="component-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Synopsis</title>

      <para>The Service Component Runtime reads component descriptions from
      started bundles. These descriptions are in the form of XML documents
      which define a set of components for a bundle. A component can refer to
      a number of services that must be available before a component
      configuration becomes satisfied. These dependencies are defined in the
      descriptions and the specific target services can be influenced by
      configuration information in the Configuration Admin service. After a
      component configuration becomes satisfied, a number of different
      scenarios can take place depending on the component type:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Immediate Component</emphasis> - The component
          configuration of an immediate component must be activated
          immediately after becoming satisfied. Immediate components may
          provide a service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Delayed Component</emphasis> - When a component
          configuration of a delayed component becomes satisfied, SCR will
          register the service specified by the <code>service</code> element
          without activating the component configuration. If this service is
          requested, SCR must activate the component configuration creating an
          instance of the component implementation class that will be returned
          as the service object. If the <code>scope</code> attribute of the
          <code>service</code> element is <code>bundle</code>, then, for each
          distinct bundle that requests the service object, a different
          component configuration is created and activated and a new instance
          of the component implementation class is returned as the service
          object. If the <code>scope</code> attribute of the
          <code>service</code> element is <code>prototype</code>, then, for
          each distinct request for the service object, such as via
          <code>ServiceObjects</code>, a different component configuration is
          created and activated and a new instance of the component
          implementation class is returned as the service object.</para>
        </listitem>

        <listitem>
          <para><emphasis>Factory Component</emphasis> - If a component's
          description specifies the <code>factory</code> attribute of the
          <code>component</code> element, SCR will register a Component
          Factory service. This service allows client bundles to create and
          activate multiple component configurations and dispose of them. If
          the component's description also specifies a <code>service</code>
          element, then as each component configuration is activated, SCR will
          register it as a service.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Readers</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Architects</emphasis> - The chapter, <xref linkend="i1479629"/>, gives a comprehensive introduction to the
          capabilities of the component model. It explains the model with a
          number of examples. The section about <xref linkend="i1545305"/>
          provides some deeper insight in the life cycle of components.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service Programmers</emphasis> - Service programmers
          should read <xref linkend="i1479629"/>. This chapter should suffice
          for the most common cases. For the more advanced possibilities, they
          should consult <xref linkend="i1524140"/> for the details of the XML
          grammar for component descriptions.</para>
        </listitem>

        <listitem>
          <para><emphasis>Deployers</emphasis> - Deployers should consult
          <xref linkend="service.component-deployment"/>.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="i1479629">
    <title>Components</title>

    <para>A component is a normal Java class contained within a bundle. The
    distinguishing aspect of a component is that it is
    <emphasis>declared</emphasis> in an XML document. Component configurations
    are activated and deactivated under the full control of SCR. SCR bases its
    decisions on the information in the component's description. This
    information consists of basic component information like the name and
    type, optional services that are implemented by the component, and
    <emphasis>references</emphasis>. References are dependencies that the
    component has on other services.</para>

    <para>SCR must <emphasis>activate</emphasis> a component configuration
    when the component is enabled and the component configuration is satisfied
    and a component configuration is needed. During the life time of a
    component configuration, SCR can notify the component of changes in its
    bound references.</para>

    <para>SCR will <emphasis>deactivate </emphasis>a previously activated
    component configuration when the component becomes disabled, the component
    configuration becomes unsatisfied, or the component configuration is no
    longer needed.</para>

    <para>If an activated component configuration's configuration properties
    change, SCR must either notify the component configuration of the change,
    if the component description specifies a method to be notified of such
    changes, or deactivate the component configuration and then attempt to
    reactivate the component configuration using the new configuration
    information.</para>

    <section>
      <title>Declaring a Component</title>

      <para>A component requires the following artifacts in the bundle:</para>

      <itemizedlist>
        <listitem>
          <para>An XML document that contains the component
          description.</para>
        </listitem>

        <listitem>
          <para>The <code>Service-Component</code> manifest header which names
          the XML documents that contain the component descriptions.</para>
        </listitem>

        <listitem>
          <para>An implementation class that is specified in the component
          description.</para>
        </listitem>
      </itemizedlist>

      <para>The elements in the component's description are defined in <xref linkend="i1524140"/>. The XML grammar for the component declaration is
      defined by the XML Schema, see <xref linkend="i1523991"/>.</para>
    </section>

    <section>
      <title>Immediate Component</title>

      <para>An <emphasis>immediate component</emphasis> is activated as soon
      as its dependencies are satisfied. If an immediate component has no
      dependencies, it is activated immediately. A component is an immediate
      component if it is not a factory component and either does not specify a
      service or specifies a service and the <code>immediate</code> attribute
      of the <code>component</code> element set to <code>true</code>. If an
      immediate component configuration is satisfied and specifies a service,
      SCR must register the component configuration as a service in the
      service registry and then activate the component configuration.</para>

      <para>For example, the bundle entry <code>/OSGI-INF/activator.xml</code>
      contains:</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;scr:component name="example.activator"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
    &lt;implementation class="com.acme.impl.Activator"/&gt;
&lt;/scr:component&gt;</programlisting>

      <para>The manifest header <code>Service-Component</code> must also be
      specified in the bundle manifest. For example:</para>

      <programlisting>Service-Component: OSGI-INF/activator.xml</programlisting>

      <para>An example class for this component could look like:</para>

      <programlisting>public class Activator {
    public Activator() {...}
    private void activate(BundleContext context) {...}
    private void deactivate() {...}  
}</programlisting>

      <para>This example component is virtually identical to a Bundle
      Activator. It has no references to other services so it will be
      satisfied immediately. It publishes no service so SCR will activate a
      component configuration immediately.</para>

      <para>The <code>activate</code> method is called when SCR activates the
      component configuration and the <code>deactivate</code> method is called
      when SCR deactivates the component configuration. If the
      <code>activate</code> method throws an Exception, then the component
      configuration is not activated and will be discarded.</para>
    </section>

    <section xml:id="i1613408">
      <title>Delayed Component</title>

      <para>A <emphasis>delayed component</emphasis> specifies a service, is
      not specified to be a factory component and does not have the
      <code>immediate</code> attribute of the <code>component</code> element
      set to <code>true</code>. If a delayed component configuration is
      satisfied, SCR must register the component configuration as a service in
      the service registry but the activation of the component configuration
      is delayed until the registered service is requested. The registered
      service of a delayed component looks like a normal registered service
      but does not incur the overhead of an ordinarily registered service that
      require a service's bundle to be initialized to register the
      service.</para>

      <para>For example, a bundle needs to see events of a specific topic. The
      Event Admin uses the white board pattern, receiving the events is
      therefore as simple as registering a Event Handler service. The example
      XML for the delayed component looks like:</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;scr:component name="example.handler"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
    &lt;implementation class="com.acme.impl.HandlerImpl"/&gt;
    &lt;property name="event.topics"&gt;some/topic&lt;/property&gt;
    &lt;service&gt; 
        &lt;provide interface="org.osgi.service.event.EventHandler"/&gt; 
    &lt;/service&gt;
&lt;/scr:component&gt;</programlisting>

      <para>The associated component class looks like:</para>

      <programlisting>public class HandlerImpl implements EventHandler{
    public void handleEvent(Event evt ) {
        ...
  }
}</programlisting>

      <para>The component configuration will only be activated once the Event
      Admin service requires the service because it has an event to deliver on
      the topic to which the component subscribed.</para>
    </section>

    <section xml:id="i1461154">
      <title>Factory Component</title>

      <para>Certain software patterns require the creation of component
      configurations on demand. For example, a component could represent an
      application that can be launched multiple times and each application
      instance can then quit independently. Such a pattern requires a factory
      that creates the instances. This pattern is supported with a
      <emphasis>factory component</emphasis>. A factory component is used if
      the <code>factory</code> attribute of the <code>component</code> element
      is set to a <emphasis>factory identifier</emphasis>. This identifier can
      be used by a bundle to associate the factory with externally defined
      information.</para>

      <para>SCR must register a Component Factory service on behalf of the
      component as soon as the component factory is satisfied. The service
      properties must be:</para>

      <itemizedlist>
        <listitem>
          <para><code>component.name</code> - The name of the
          component.</para>
        </listitem>

        <listitem>
          <para><code>component.factory</code> - The factory
          identifier.</para>
        </listitem>
      </itemizedlist>

      <para>The service properties of the Component Factory service must not
      include the component properties.</para>

      <para>New configurations of the component can be created and activated
      by calling the <code>newInstance</code> method on this Component Factory
      service. The <xref linkend="org.osgi.service.component.ComponentFactory.newInstance-Dictionary-" xrefstyle="hyperlink"/> method has a <code>Dictionary</code> object as
      argument. This Dictionary object is merged with the component properties
      as described in <xref linkend="service.component-component.properties"/>. If the component
      specifies a service, then the service is registered after the created
      component configuration is satisfied with the component properties. Then
      the component configuration is activated.</para>

      <para>For example, a component can provide a connection to a USB device.
      Such a connection should normally not be shared and should be created
      each time such a service is needed. The component description to
      implement this pattern looks like:</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;scr:component name="example.factory"
    factory="usb.connection"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
    &lt;implementation class="com.acme.impl.USBConnectionImpl"/&gt;
&lt;/scr:component&gt;</programlisting>

      <para>The component class looks like:</para>

      <programlisting>public class USBConnectionImpl implements USBConnection {
    private void activate(Map&lt;String, ?&gt; properties) {
     ...
    }
}</programlisting>

      <para>A factory component can be associated with a service. In that
      case, such a service is registered for each component configuration. For
      example, the previous example could provide a USB Connection
      service.</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;scr:component name="example.factory"    
    factory="usb.connection"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
    &lt;implementation class="com.acme.impl.USBConnectionImpl"/&gt;
    <emphasis role="underline">&lt;service&gt;</emphasis>
        &lt;provide interface="com.acme.usb.USBConnection"/&gt;
    &lt;/service&gt;
&lt;/scr:component&gt;</programlisting>

      <para>The associated component class looks like:</para>

      <programlisting>public class USBConnectionImpl implements USBConnection {
    private void activate(Map&lt;String, ?&gt; properties) {...}
    public void connect() { ... }
    ...
    public void close() { ... }
}</programlisting>

      <para>A new service will be registered each time a new component
      configuration is created and activated with the <code>newInstance</code>
      method. This allows a bundle other than the one creating the component
      configuration to utilize the service. If the component configuration is
      deactivated, the service must be unregistered.</para>
    </section>
  </section>

  <section>
    <title>References to Services</title>

    <para>Most bundles will require access to other services from the service
    registry. The dynamics of the service registry require care and attention
    of the programmer because referenced services, once acquired, could be
    unregistered at any moment. The component model simplifies the handling of
    these service dependencies significantly.</para>

    <para>The services that are selected by a reference are called the
    <emphasis>target services</emphasis>. These are the services selected by
    the <code>BundleContext.getServiceReferences</code> method where the first
    argument is the reference's interface and the second argument is the
    reference's target property, which must be a valid filter.</para>

    <para>A component configuration becomes <emphasis>satisfied</emphasis>
    when each specified reference is satisfied. A reference is
    <emphasis>satisfied</emphasis> if it specifies optional cardinality or
    when the number of target services is equal to or more than the minimum
    cardinality of the reference. An activated component configuration that
    becomes <emphasis>unsatisfied</emphasis> must be deactivated.</para>

    <para>During the activation of a component configuration, SCR must bind
    some or all of the target services of a reference to the component
    configuration. Any target service that is bound to the component
    configuration is called a <emphasis>bound</emphasis> service. See <xref linkend="i1536739"/>.</para>

    <section xml:id="i1548427">
      <title>Accessing Services</title>

      <para>A component instance must be able to use the services that are
      referenced by the component configuration, that is, the bound services
      of the references. The following strategies are available for a
      component instance to acquire these bound services:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Event strategy</emphasis> - SCR calls a method on
          the component instance when a service becomes bound, when a service
          becomes unbound, or when its properties are updated. These methods
          are the bind, updated, and unbind methods specified by the
          reference. The event strategy is useful if the component needs to be
          notified of changes to the bound services for a dynamic
          reference.</para>
        </listitem>

        <listitem>
          <para><emphasis>Field strategy</emphasis> - SCR modifies a field in
          the component instance when a service becomes bound, when a service
          becomes unbound, or when its properties are updated.</para>
        </listitem>

        <listitem>
          <para><emphasis>Lookup strategy</emphasis> - The component instance
          can use one of the <code>locateService</code> methods of <xref linkend="org.osgi.service.component.ComponentContext" xrefstyle="hyperlink"/> to locate a bound service. These methods
          take the <code>name</code> of the reference as a parameter. If the
          reference has a dynamic policy, it is important to not store
          returned service objects but look them up every time they are
          needed.</para>
        </listitem>
      </itemizedlist>

      <para>A component may use multiple strategies to access the bound
      services of a reference.</para>
    </section>

    <section xml:id="service.component-event.methods">
      <title>Event Methods</title>

      <para>When using the event strategy, SCR must callback the component
      instance at the appropriate time. SCR must callback on the following
      events:</para>

      <itemizedlist>
        <listitem>
          <para><code>bind</code> - The bind method, if specified, is called
          to bind a new service to the component that matches the selection
          criteria. If the <code>policy</code> is <code>dynamic</code> then
          the bind method of a replacement service can be called before its
          corresponding unbind method.</para>
        </listitem>

        <listitem>
          <para><code>updated</code> - The updated method, if specified, is
          called when the service properties of a bound services are modified
          and the resulting properties do not cause the service to become
          unbound because it is no longer selected by the target
          property.</para>
        </listitem>

        <listitem>
          <para><code>unbind</code> - The unbind method, if specified, is
          called when SCR needs to unbind the service.</para>
        </listitem>
      </itemizedlist>

      <para>Each event is associated with an <emphasis>event
      method</emphasis>. The prototype of the event methods is:</para>

      <programlisting>void &lt;method-name&gt;(&lt;arguments&gt;);</programlisting>

      <para>An event method can take one or more arguments. Each argument must
      be of one of the following types:</para>

      <itemizedlist>
        <listitem>
          <para><code>&lt;service-type&gt;</code> - The bound service
          object.</para>
        </listitem>

        <listitem>
          <para><code>ServiceReference</code> - A Service Reference for the
          bound service. This Service Reference may later be passed to the
          <xref linkend="org.osgi.service.component.ComponentContext.locateService-String-ServiceReference-" xrefstyle="hyperlink"/> method to obtain the actual service object.
          This approach is useful when the service properties need to be
          examined before accessing the service object. It also allows for the
          delayed activation of bound services when using the event
          strategy.</para>
        </listitem>

        <listitem>
          <para><code>ComponentServiceObjects</code> - A Component Service
          Objects for the bound service. This Component Service Objects can be
          used to obtain the actual service object or objects. This approach
          is useful when the referenced service has prototype service scope
          and the component instance needs multiple service objects for the
          service.</para>
        </listitem>

        <listitem>
          <para><code>Map</code> - An unmodifiable Map containing the service
          properties of the bound service. This Map must additionally
          implement <code>Comparable</code> with the <code>compareTo</code>
          method comparing service property maps using the same ordering as
          <code>ServiceReference.compareTo</code> based upon service ranking
          and service id.</para>
        </listitem>
      </itemizedlist>

      <para>A suitable method is selected using the following priority:</para>

      <orderedlist>
        <listitem>
          <para>The method takes a single argument and the type of the
          argument is <code>org.osgi.framework.ServiceReference</code>. This
          method will receive a Service Reference for the bound
          service.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is <xref linkend="org.osgi.service.component.ComponentServiceObjects" xrefstyle="hyperlink"/>. This method will receive a Component
          Service Objects for the bound service.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is the type specified by the reference's
          <code>interface</code> attribute. This method will receive the bound
          service object.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is assignable from the type specified by the reference's
          <code>interface</code> attribute. If multiple methods match this
          rule, this implies the method name is overloaded and SCR may choose
          any of the methods to call. This method will receive the bound
          service object.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is <code>java.util.Map</code>. This method will receive an
          unmodifiable Map containing the service properties of the bound
          service.</para>
        </listitem>

        <listitem>
          <para>The method takes two or more arguments and the types of the
          arguments must be one of: the type specified by the reference's
          <code>interface</code> attribute, a type assignable from the type
          specified by the reference's <code>interface</code> attribute,
          <code>org.osgi.framework.ServiceReference</code>, <xref linkend="org.osgi.service.component.ComponentServiceObjects" xrefstyle="hyperlink"/>, or <code>java.util.Map</code>. If multiple
          methods match this rule, this implies the method name is overloaded
          and SCR may choose any of the methods to call. In the case where the
          type specified by the reference's <code>interface</code> attribute
          is <code>org.osgi.framework.ServiceReference</code>, <xref linkend="org.osgi.service.component.ComponentServiceObjects" xrefstyle="hyperlink"/>, or <code>java.util.Map</code>, the first
          argument of that type will receive the bound service object. If
          selected event method has more than one argument of that type, the
          remaining arguments of that type will receive a Service Reference
          for the bound service, a Service Objects for the bound service, or
          an unmodifiable Map containing the service properties of the bound
          service.</para>
        </listitem>
      </orderedlist>

      <para>When searching for an event method to call, SCR must locate a
      suitable method as specified in <xref linkend="i1641644"/>. If no
      suitable method is located, SCR must log an error message with the Log
      Service, if present, and there will be no bind, updated, or unbind
      notification.</para>

      <para>The bind and unbind methods must be called once for each bound
      service. This implies that if the reference has multiple cardinality,
      then the methods may be called multiple times. The updated method can be
      called multiple times per service.</para>

      <para>In the following examples, a component requires the Log Service.
      The first example uses the lookup strategy. The reference is declared
      without any bind, updated, and unbind methods:</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;scr:component name="example.listen"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
    &lt;implementation class="com.acme.impl.LogLookupImpl"/&gt;
    &lt;reference name="LOG"
        interface="org.osgi.service.log.LogService"/&gt;
&lt;/scr:component&gt;</programlisting>

      <para>The component implementation class must now lookup the service.
      This looks like:</para>

      <programlisting>public class LogLookupImpl {
    private void activate(ComponentContext ctxt) {
        LogService log = (LogService)
            ctxt.locateService("LOG");
        log.log(LogService.LOG_INFO, "Hello Components!"));
    }
}</programlisting>

      <para>Alternatively, the component could use the event strategy and ask
      to be notified with the Log Service by declaring bind, updated, and
      unbind methods.</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;scr:component name="example.listen"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
    &lt;implementation class="com.acme.impl.LogEventImpl"/&gt;
    &lt;reference name="LOG"
        interface="org.osgi.service.log.LogService"
        bind="setLog"
        updated="updatedLog"
        unbind="unsetLog"
    /&gt;
&lt;/scr:component&gt;</programlisting>

      <para>The component implementation class looks like:</para>

      <programlisting>public class LogEventImpl {
    LogService log;
    Integer    level;
    void setLog( LogService l, Map&lt;String,?&gt; ref ) {
        log = l;
        updatedLog(ref);
    }
    void updatedLog( LogService l, Map&lt;String,?&gt; ref) {
        level = (Integer) ref.get("level");
    }
    void unsetLog( LogService l ) { log = null; }

    private void activate() {
        log.log(LogService.LOG_INFO, "Hello Components!"));
    }
}</programlisting>

      <para>Event methods can be declared private in the component class but
      are only looked up in the inheritance chain when they are protected,
      public, or have default access. See <xref linkend="i1641644"/>.</para>
    </section>

    <section xml:id="service.component-field.strategy">
      <title>Field Strategy</title>

      <para>When using the field strategy, SCR must modify fields in the
      component instance at the appropriate time. SCR must modify the fields
      on the following events:</para>

      <itemizedlist>
        <listitem>
          <para><code>bind</code> - The field is modified to bind a new
          service to the component that matches the selection criteria.</para>
        </listitem>

        <listitem>
          <para><code>updated</code> - For certain field types, the field is
          modified when the service properties of a bound services are
          modified and the resulting properties do not cause the service to
          become unbound because it is no longer selected by the target
          property.</para>
        </listitem>

        <listitem>
          <para><code>unbind</code> - The field is modified when SCR needs to
          unbind the service.</para>
        </listitem>
      </itemizedlist>

      <para>For a reference with unary cardinality, a field must be of one of
      the following types:</para>

      <itemizedlist>
        <listitem>
          <para><code>&lt;service-type&gt;</code> - The bound service object.
          The type of the field can be the actual service type or it can be a
          type that is assignable from the actual service type.</para>
        </listitem>

        <listitem>
          <para><code>ServiceReference</code> - A Service Reference for the
          bound service. This Service Reference may later be passed to the
          <xref linkend="org.osgi.service.component.ComponentContext.locateService-String-ServiceReference-" xrefstyle="hyperlink"/> method to obtain the actual service object.
          This approach is useful when the service properties need to be
          examined before accessing the service object. It also allows for the
          delayed activation of bound services when using field
          strategy.</para>
        </listitem>

        <listitem>
          <para><code>ComponentServiceObjects</code> - A Component Service
          Objects for the bound service. This Component Service Objects can be
          used to obtain the actual service object or objects. This approach
          is useful when the referenced service has prototype service scope
          and the component instance needs multiple service objects for the
          service.</para>
        </listitem>

        <listitem>
          <para><code>Map</code> - An unmodifiable Map containing the service
          properties of the bound service. This Map must additionally
          implement <code>Comparable</code> with the <code>compareTo</code>
          method comparing service property maps using the same ordering as
          <code>ServiceReference.compareTo</code> based upon service ranking
          and service id.</para>
        </listitem>

        <listitem>
          <para><code>Map.Entry</code> - An unmodifiable Map.Entry whose key
          is an unmodifiable Map containing the service properties of the
          bound service, as above, and whose value is the bound service
          object. This Map.Entry must additionally implement
          <code>Comparable</code> with the <code>compareTo</code> method
          comparing the service property map key using the same ordering as
          <code>ServiceReference.compareTo</code> based upon service ranking
          and service id.</para>
        </listitem>
      </itemizedlist>

      <para>If the actual service type is one of
      <code>ServiceReference</code>, <code>ComponentServiceObjects</code>,
      <code>Map</code>, or <code>Map.Entry</code>, the field will be set to
      the service object rather than the object about the service.</para>

      <para>For a reference with multiple cardinality, a field must be a
      collection of one of the following types:</para>

      <itemizedlist>
        <listitem>
          <para><code>Collection</code></para>
        </listitem>

        <listitem>
          <para><code>List</code></para>
        </listitem>

        <listitem>
          <para>A subtype of <code>Collection</code> - This type can only be
          used for dynamic references using the <code>update</code> reference
          field option. The component instance must initialize the field to a
          collection object in its constructor.</para>
        </listitem>
      </itemizedlist>

      <para>The type of objects set in the collection are specified by the
      <code>field-collection-type</code> attribute in the component
      description:</para>

      <itemizedlist>
        <listitem>
          <para><code>service</code> - The bound service object. This is the
          default field collection type.</para>
        </listitem>

        <listitem>
          <para><code>reference</code> - A Service Reference for the bound
          service.</para>
        </listitem>

        <listitem>
          <para><code>serviceobjects</code> - A Component Service Objects for
          the bound service.</para>
        </listitem>

        <listitem>
          <para><code>properties</code> - An unmodifiable Map containing the
          service properties of the bound service. This Map must implement
          <code>Comparable</code>, as above.</para>
        </listitem>

        <listitem>
          <para><code>tuple</code> - An unmodifiable Map.Entry whose key is an
          unmodifiable Map containing the service properties of the bound
          service, as above, and whose value is the bound service object. This
          Map.Entry must implement <code>Comparable</code>, as above.</para>
        </listitem>
      </itemizedlist>

      <para>Only instance fields of the field types above are supported. If a
      referenced field is declared with the <code>static</code> modifier or
      has a type other than one of the above, SCR must log an error message
      with the Log Service, if present, and the field must not be
      modified.</para>

      <para>Care must be taken by the component implementation regarding the
      field. SCR has no way to know if the component implementation itself may
      alter the field value. The component implementation should not alter the
      field value and allow SCR to manage it. SCR must treat the field as if
      the component implementation does not alter the field value so SCR may
      retain its own copy of the value set in the field.</para>

      <para>In the following examples, a component requires the Log
      Service.</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;scr:component name="example.listen"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
    &lt;implementation class="com.acme.impl.LogEventImpl"/&gt;
    &lt;reference name="LOG"
        interface="org.osgi.service.log.LogService"
        field="log"
    /&gt;
&lt;/scr:component&gt;</programlisting>

      <para>The component implementation class looks like:</para>

      <programlisting>public class LogEventImpl {
    LogService log;
    private void activate() {
        log.log(LogService.LOG_INFO, "Hello Components!"));
    }
}</programlisting>

      <para>Fields can be declared private in the component class but are only
      looked up in the inheritance chain when they are protected, public, or
      have default access. See <xref linkend="i1641644"/>.</para>
    </section>

    <section xml:id="service.component-reference.cardinality">
      <title>Reference Cardinality</title>

      <para>A component implementation is always written with a certain
      <emphasis>cardinality</emphasis> for each reference in mind. The
      cardinality represents two important concepts:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Multiplicity</emphasis> - Does the component
          implementation assume a single service or does it explicitly handle
          multiple services? For example, when a component uses the Log
          Service, it only needs to bind to one Log Service to function
          correctly. Alternatively, when the Configuration Admin uses the
          Configuration Listener services it needs to bind to all target
          services present in the service registry to dispatch its events
          correctly.</para>
        </listitem>

        <listitem>
          <para><emphasis>Optionality</emphasis> - Can the component function
          without any bound service present? Some components can still perform
          useful tasks even when no service is available; other components
          must bind to at least one service before they can be useful. For
          example, the Configuration Admin in the previous example must still
          provide its functionality even if there are no Configuration
          Listener services present. Alternatively, an application that
          registers a Servlet with the Http Service has little to do when the
          Http Service is not present, it should therefore use a reference
          with a mandatory cardinality.</para>
        </listitem>
      </itemizedlist>

      <para>The cardinality is expressed with the following syntax:</para>

      <programlisting>cardinality  ::= optionality '..' multiplicity
optionality  ::= '0' | '1'
multiplicity ::= '1' | 'n'</programlisting>

      <para>The cardinality for a reference can be specified as one of four
      choices:</para>

      <itemizedlist>
        <listitem>
          <para><code>0..1</code> - Optional and unary.</para>
        </listitem>

        <listitem>
          <para><code>1..1</code> - Mandatory and unary (Default) .</para>
        </listitem>

        <listitem>
          <para><code>0..n</code> - Optional and multiple.</para>
        </listitem>

        <listitem>
          <para><code>1..n</code> - Mandatory and multiple.</para>
        </listitem>
      </itemizedlist>

      <para>The <emphasis>minimum cardinality</emphasis> is specified by the
      optionality part of the cardinality. This is either <code>0</code> or
      <code>1</code>. A minimum cardinality property can be used to raise the
      minimum cardinality of a reference from this initial value. For example,
      a <code>0..n</code> cardinality in the component description can be
      raised into a <code>3..n</code> cardinality at runtime by setting the
      minimum cardinality property for the reference to <code>3</code>. This
      would typically be done by a deployer setting the minimum cardinality
      property in a configuration for the component. The minimum cardinality
      for a unary cardinality cannot exceed <code>1</code>. See <xref linkend="service.component-minimum.cardinality.property"/> for more
      information.</para>

      <para>A reference is <emphasis>satisfied</emphasis> if the number of
      target services is equal to or more than the minimum cardinality. The
      <code>multiplicity</code> is irrelevant for the satisfaction of the
      reference. The <code>multiplicity</code> only specifies if the component
      implementation is written to handle being bound to multiple services
      (<code>n</code>) or requires SCR to select and bind to a single service
      (<code>1</code>).</para>

      <para>When a satisfied component configuration is activated, there must
      be at most one bound service for each reference with a unary cardinality
      and at least as many bound services as the minimum cardinality for each
      reference. If the cardinality constraints cannot be maintained after a
      component configuration is activated, that is the reference becomes
      unsatisfied, the component configuration must be deactivated. If the
      reference has a unary cardinality and there is more than one target
      service for the reference, then the bound service must be the target
      service with the highest service ranking as specified by the
      <code>service.ranking</code> property. If there are multiple target
      services with the same service ranking, then the bound service must be
      the target service with the highest service ranking and the lowest
      service id as specified by the <code>service.id</code> property.</para>

      <para>In the following example, a component wants to register a resource
      with all Http Services that are available. Such a scenario has the
      cardinality of <code>0..n</code>. The code must be prepared to handle
      multiple calls to the bind method for each Http Service in such a case.
      In this example, the code uses the <code>registerResources</code> method
      to register a directory for external access.</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;scr:component name="example.listen"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
    &lt;implementation class="com.acme.impl.HttpResourceImpl"/&gt;
    &lt;reference name="HTTP"
        interface="org.osgi.service.http.HttpService"
        cardinality="0..n"
        bind="setPage"
        unbind="unsetPage"
    /&gt;
&lt;/scr:component&gt;

public class HttpResourceImpl {
    private void setPage(HttpService http) {
        http.registerResources("/scr", "scr", null );
    }
    private void unsetPage(HttpService http) {
        http.unregister("/scr");
    }
}</programlisting>
    </section>

    <section xml:id="service.component-reference.scope">
      <title>Reference Scope</title>

      <para>A component implementation must be written to understand the
      service scope of referenced services. The <emphasis>reference
      scope</emphasis> defines whether the component expects the bundle to be
      exposed to a single service object for a bound service or to potentially
      multiple services objects. The following reference scopes are
      available:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>bundle</emphasis> - For all references to a given
          bound service, all activated component instances within a bundle
          must use the same service object. That is, for a given bound
          service, all component instances within a bundle will be using the
          same service object. This is the default reference scope.</para>
        </listitem>

        <listitem>
          <para><emphasis>prototype</emphasis> - For all references to a given
          bound service, each activated component instance may use a single,
          distinct service object. That is, for a given bound service, each
          component instance may use a distinct service object but within a
          component instance all references to the bound service will use the
          same service object.</para>
        </listitem>

        <listitem>
          <para><emphasis>prototype_required</emphasis> - For all references
          to a given bound service, each activated component instance must use
          a single, distinct service object. That is, for a given bound
          service, each component instance will use a distinct service object
          but within a component instance all references to the bound service
          will use the same service object.</para>
        </listitem>
      </itemizedlist>

      <para>For a bound service of a reference with bundle reference scope,
      SCR must get the service object from the OSGi Framework's service
      registry using the <code>getService</code> method on the component's
      Bundle Context. If the service object for a bound service has been
      obtained and the service becomes unbound, SCR must unget the service
      object using the <code>ungetService</code> method on the component's
      Bundle Context and discard all references to the service object. This
      ensures that the bundle will only be exposed to a single instance of the
      service object at any given time.</para>

      <para>For a bound service of a reference with prototype or prototype
      required reference scope, SCR must use a Service Objects object obtained
      from the OSGi Framework's service registry using the component's Bundle
      Context to get any service objects. If service objects for a bound
      service have been obtained and the service becomes unbound, SCR must
      unget any unreleased service objects using the Service Objects object
      obtained from the OSGi Framework's service registry using the
      component's Bundle Context. This means that if a component instance used
      a Component Service Objects object to obtain service objects, SCR must
      track those service objects so that when the service becomes unbound,
      SCR can unget any unreleased service objects.</para>

      <para>Additionally, for a bound service of a reference with prototype
      required reference scope, only services registered with prototype
      service scope can be considered as target services. This ensures that
      each component instance can be exposed to a single, distinct instance of
      the service object. Using prototype required reference scope effectively
      adds <code>service.scope=prototype</code> to the target property for the
      reference. A service that does not use prototype service scope cannot be
      used as a bound service for a reference with prototype required
      reference scope since the service cannot provide a distinct service
      object for each component instance.</para>
    </section>

    <section xml:id="i1440474">
      <title>Reference Policy</title>

      <para>Once all the references of a component are satisfied, a component
      configuration can be activated and therefore bound to target services.
      However, the dynamic nature of the OSGi service registry makes it likely
      that services are registered, modified and unregistered after target
      services are bound. These changes in the service registry could make one
      or more bound services no longer a target service thereby making
      obsolete any object references that the component has to these service
      objects. Components therefore must specify a <emphasis>policy
      </emphasis>how to handle these changes in the set of bound services. A
      <emphasis>policy-option</emphasis> can further refine how changes affect
      bound services.</para>

      <section>
        <title>Static Reference Policy</title>

        <para>The <emphasis>static policy</emphasis> is the most simple policy
        and is the default policy. A reference with a static policy is called
        a <emphasis>static reference</emphasis>. A component instance never
        sees any of the dynamics of the static reference. The bind method is
        called and/or the field is set before the component instance is
        activated. Component configurations are deactivated before any bound
        service for the static reference becomes unavailable. If a target
        service is available to replace the bound service which became
        unavailable, the component configuration must be reactivated and the
        replacement service is bound to the new component instance.</para>

        <para>If the <code>policy-option</code> is <code>reluctant</code> then
        the registration of an additional target service for a reference must
        not result in deactivating and reactivating a component configuration.
        If the <code>policy-option</code> is <code>greedy</code> then the
        component configuration must be reactivated when new applicable
        services become available. See <xref linkend="service.component-policy.option.action" xrefstyle="template:Table %n on page %p"/>.</para>

        <para>If a static reference specifies an updated method and the bound
        service's properties change, SCR must call the updated method.</para>

        <para>The static policy can be very expensive if it depends on
        services that frequently unregister and re-register or if the cost of
        activating and deactivating a component configuration is high. Static
        policy is usually also not applicable if the cardinality specifies
        multiple bound services.</para>
      </section>

      <section>
        <title>Dynamic Reference Policy</title>

        <para>The <emphasis>dynamic policy</emphasis> is slightly more complex
        since the component implementation must properly handle changes in the
        set of bound services that can occur on any thread at any time after
        the component instance is created. A reference with a dynamic policy
        is called a <emphasis>dynamic reference</emphasis>. With the dynamic
        policy, SCR can change the set of bound services without deactivating
        a component configuration. If the component uses the event strategy to
        access services, then the component instance will be notified of
        changes in the set of bound services by calls to the bind, updated,
        and unbind methods.</para>

        <para>If the <code>policy-option</code> is <code>reluctant</code> then
        a bound reference is not rebound even if a more suitable service
        becomes available for a 1..1 or 0..1 reference. If the
        <code>policy-option</code> is <code>greedy</code> then the component
        must be unbound and rebound for that reference. See <xref linkend="service.component-policy.option.action" xrefstyle="template:Table %n on page %p"/>.</para>

        <para>The previous example with the registering of a resource
        directory used a static policy. This implied that the component
        configurations are deactivated when there is a change in the bound set
        of Http Services. The code in the example can be seen to easily handle
        the dynamics of Http Services that come and go. The component
        description can therefore be updated to:</para>

        <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;scr:component name="example.listen"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
    &lt;implementation class="com.acme.impl.HttpResourceImpl"/&gt;
    &lt;reference name="HTTP"
        interface="org.osgi.service.http.HttpService"
        cardinality="0..n"
        <emphasis role="underline">policy="dynamic"</emphasis>
        bind="setPage"
        unbind="unsetPage"
    /&gt;
&lt;/scr:component&gt;</programlisting>

        <para>The code is identical to the previous example.</para>
      </section>
    </section>

    <section>
      <title>Reference Policy Option</title>

      <para>The reference policy option defines how eager the reference is to
      rebind when a new, potentially a higher ranking, target service becomes
      available. The reference policy option can have the following
      values:</para>

      <itemizedlist>
        <listitem>
          <para><code>reluctant</code> - Minimize rebinding and reactivating.
          This is the default reference policy option.</para>
        </listitem>

        <listitem>
          <para><code>greedy</code> - Maximize the use of the best service by
          deactivating static references or rebinding dynamic
          references.</para>
        </listitem>
      </itemizedlist>

      <para><xref linkend="service.component-policy.option.action"/> defines
      the actions that are taken when a <emphasis>better</emphasis> target
      service becomes available. In this context, better is when the reference
      is not bound or when the new target service has a higher ranking than
      the bound service.</para>

      <table pgwide="1" xml:id="service.component-policy.option.action">
        <title>Action taken for policy-option when a new or higher ranking
        service becomes available</title>

        <tgroup cols="5">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3" colwidth="2*"/>

          <colspec colnum="4" colwidth="2*"/>

          <colspec colnum="5" colwidth="2*"/>

          <thead>
            <row>
              <entry>Cardinality</entry>

              <entry>static reluctant</entry>

              <entry>static greedy</entry>

              <entry>dynamic reluctant</entry>

              <entry>dynamic greedy</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>0..1</code></entry>

              <entry><para>Ignore</para></entry>

              <entry><para>Reactivate to bind the better target
              service.</para></entry>

              <entry><para>If no service is bound, bind to new target service.
              Otherwise, ignore new target service.</para></entry>

              <entry><para>If no service is bound, bind to better target
              service. Otherwise, unbind the bound service and bind the better
              target service.</para></entry>
            </row>

            <row>
              <entry><code>1..1</code></entry>

              <entry><para>Ignore</para></entry>

              <entry><para>Reactivate to bind the better target
              service.</para></entry>

              <entry><para>Ignore</para></entry>

              <entry><para>Unbind the bound service, then bind the new
              service.</para></entry>
            </row>

            <row>
              <entry><code>0..n</code></entry>

              <entry><para>Ignore</para></entry>

              <entry><para>Reactivate</para></entry>

              <entry><para>Bind new target service</para></entry>

              <entry><para>Bind new target service</para></entry>
            </row>

            <row>
              <entry><code>1..n</code></entry>

              <entry><para>Ignore</para></entry>

              <entry><para>Reactivate</para></entry>

              <entry><para>Bind new target service</para></entry>

              <entry><para>Bind new target service</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="service.component-reference.field.option">
      <title>Reference Field Option</title>

      <para>For a reference using field strategy, the reference field option
      defines how SCR must manage the field value. The reference field option
      can have the following values:</para>

      <itemizedlist>
        <listitem>
          <para><code>replace</code> - SCR must set the field value. Any field
          value set by the constructor of the component instance is
          overwritten. This is the default reference field option.</para>
        </listitem>

        <listitem>
          <para><code>update</code> - SCR must update the collection set in
          the field. This collection can be set by the constructor of the
          component instance. This reference field option can only be used for
          a dynamic reference with multiple cardinality.</para>
        </listitem>
      </itemizedlist>

      <para>For a static reference, the replace option must be used.</para>

      <para>For a dynamic reference, the choice of reference field option is
      influenced by the cardinality of the reference. For unary cardinality,
      the replace option must be used. For multiple cardinality, either the
      replace or update option can be used.</para>

      <para>If the update option is used when not permitted, SCR must log an
      error message with the Log Service, if present, and the field must not
      be modified.</para>

      <section>
        <title>Replace Field Option</title>

        <para>If the field is declared with the <code>final</code> modifier,
        SCR must log an error message with the Log Service, if present, and
        the field must not be modified.</para>

        <para>For a static reference, SCR must set the value of the field
        before the component instance is activated and must not change the
        field while the component is active. This means there is a
        <emphasis>happens-before</emphasis> relationship between setting the
        field and activating the component instance, so the active component
        can safely read the field.</para>

        <para>For a dynamic reference, the field must be declared with the
        <code>volatile</code> modifier so that field value changes made by SCR
        are visible to other threads. If the field is not declared with the
        <code>volatile</code> modifier, SCR must log an error message with the
        Log Service, if present, and the field must not be modified.</para>

        <para>For a dynamic reference with unary cardinality, SCR must set the
        field with initial bound service, if any, before the component
        instance is activated. When there is a new bound service or the
        service properties of the bound service are modified and the field
        holds service properties, SCR must replace the field value. If the
        reference has optional cardinality and there is no bound service, SCR
        must set the field value to <code>null</code>.</para>

        <para>For a dynamic reference with multiple cardinality, the type of
        the field must be <code>Collection</code> or <code>List</code>. If the
        field has a different type, SCR must log an error message with the Log
        Service, if present, and the field must not be modified. Before the
        component instance is activated, SCR must set the field with a new
        mutable collection that must contain the initial set of bound services
        sorted using the same ordering as
        <code>ServiceReference.compareTo</code> based upon service ranking and
        service id. The new collection may be empty if the reference has
        optional cardinality and there are no bound services. When there is a
        change in the set of bound services or the service properties of a
        bound service are modified and the collection holds service
        properties, SCR must replace the field value with a new mutable
        collection that must contain the updated set of bound services sorted
        using the same ordering as <code>ServiceReference.compareTo</code>
        based upon service ranking and service id. The new collection may be
        empty if the reference has optional cardinality and there are no bound
        services.</para>
      </section>

      <section>
        <title>Update Field Option</title>

        <para>The update option can only be used for a dynamic reference with
        multiple cardinality. The component's constructor can set the field
        with its choice of collection implementation. In this case, the field
        can be declared with the <code>final</code> modifier. The collection
        implementation used by the component should use identity rather than
        <code>equals</code> or <code>hashCode</code> to manage the elements of
        the collection. The collection implementation should also be
        thread-safe since SCR may update the collection from threads different
        than those used by the component instance.</para>

        <para>After constructing the component instance, if the field value is
        <code>null</code>:</para>

        <itemizedlist>
          <listitem>
            <para>If the type of the field is <code>Collection</code> or
            <code>List</code>, SCR will set the field to a new mutable empty
            collection or list object, respectively. If the field is declared
            with the <code>final</code> modifier, SCR must log an error
            message with the Log Service, if present, and the field must not
            be modified.</para>
          </listitem>

          <listitem>
            <para>Otherwise, SCR must log an error message with the Log
            Service, if present, and the field must not be modified.</para>
          </listitem>
        </itemizedlist>

        <para>SCR must not change the field value while the component is
        active and only update the contents of the collection. SCR must update
        the collection before the component instance is activated by calling
        <code>Collection.add</code> for each bound service. When there is a
        change to the set of bound services:</para>

        <itemizedlist>
          <listitem>
            <para>SCR must call <code>Collection.add</code> for a newly bound
            service.</para>
          </listitem>

          <listitem>
            <para>SCR must call <code>Collection.remove</code> for an unbound
            service.</para>
          </listitem>

          <listitem>
            <para>If the service properties of a bound service are modified
            and the collection holds service properties, SCR must call
            <code>Collection.add</code> for the replacement element followed
            by <code>Collection.remove</code> for the old element.</para>
          </listitem>
        </itemizedlist>

        <para>The collection may be empty if the reference has optional
        cardinality and there are no bound services.</para>
      </section>
    </section>

    <section xml:id="service.component-selecting.target.services">
      <title>Selecting Target Services</title>

      <para>The target services for a reference are constrained by the
      reference's interface name and target property. By specifying a filter
      in the target property, the programmer and deployer can constrain the
      set of services that should be part of the target services.</para>

      <para>For example, a component wants to track all Component Factory
      services that have a factory identification of
      <code>acme.application</code>. The following component description shows
      how this can be done.</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;scr:component name="example.listen"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
    &lt;implementation class="com.acme.impl.FactoryTracker"/&gt;
    &lt;reference name="FACTORY"
        interface=
            "org.osgi.service.component.ComponentFactory"
        target="(component.factory=acme.application)"
    /&gt;
&lt;/scr:component&gt;</programlisting>

      <para>The filter is manifested as a component property called the
      <emphasis>target property</emphasis>. The target property can also be
      set by <code>property</code> and <code>properties</code> elements, see
      <xref linkend="service.component-property.properties.elements"/>. The
      deployer can also set the target property by establishing a
      configuration for the component which sets the value of the target
      property. This allows the deployer to override the target property in
      the component description. See <xref linkend="service.component-target.property"/> for more
      information.</para>
    </section>

    <section xml:id="i1540789">
      <title>Circular References</title>

      <para>It is possible for a set of component descriptions to create a
      circular dependency. For example, if component <code>A</code> references
      a service provided by component <code>B</code> and component
      <code>B</code> references a service provided by component <code>A</code>
      then a component configuration of one component cannot be satisfied
      without accessing a partially activated component instance of the other
      component. SCR must ensure that a component instance is never accessible
      to another component instance or as a service until it has been fully
      activated, that is it has returned from its <code>activate</code> method
      if it has one.</para>

      <para>Circular references must be detected by SCR when it attempts to
      satisfy component configurations and SCR must fail to satisfy the
      references involved in the cycle and log an error message with the Log
      Service, if present. However, if one of the references in the cycle has
      optional cardinality SCR must break the cycle. The reference with the
      optional cardinality can be satisfied and bound to zero target services.
      Therefore the cycle is broken and the other references may be
      satisfied.</para>
    </section>
  </section>

  <section xml:id="i1524140">
    <title>Component Description</title>

    <para>Component descriptions are defined in XML documents contained in a
    bundle and any attached fragments.</para>

    <para>If SCR detects an error when processing a component description, it
    must log an error message with the Log Service, if present, and ignore the
    component description. Errors can include XML parsing errors and
    ill-formed component descriptions.</para>

    <section>
      <title>Annotations</title>

      <para>A number of <code>CLASS</code> retention annotations have been
      provided to allow tools to construct the component description XML from
      the Java class files. These annotations will be discussed with the
      appropriate elements and attributes. Since the naming rules between XML
      and Java differ, some name changes are necessary.</para>

      <para>Multi-word element and attribute names that use a minus sign
      (<code>'-' \u002D</code>) are changed to camel case. For example, the
      <code>configuration-pid</code> attribute in the <code>component</code>
      element is the <code>configurationPid</code> member in the
      <code>@Component</code> annotation. The annotation class that
      corresponds to an element starts with an upper case letter. For example
      the <code>component</code> element is represented by the
      <code>@Component</code> annotation.</para>

      <para>Some elements do not have a corresponding annotation since the
      annotations can be parameterized by the type information in the Java
      class. For example, the <code>@Component</code> annotation synthesizes
      the <code>implement</code> element's <code>class</code> attribute from
      the type it is applied to.</para>

      <para>See <xref linkend="service.component-component.annotations"/> for
      more information.</para>
    </section>

    <section>
      <title>Service Component Header</title>

      <para>XML documents containing component descriptions must be specified
      by the Service-Component header in the manifest. The value of the header
      is a comma separated list of paths to XML entries within the
      bundle.</para>

      <programlisting>Service-Component ::= header // See Common Header Syntax in Core</programlisting>

      <para>The Service-Component header has no architected directives or
      properties. The header can be left empty.</para>

      <para>The last component of each path in the Service-Component header
      may use wildcards so that <code>Bundle.findEntries</code> can be used to
      locate the XML document within the bundle and its fragments. For
      example:</para>

      <programlisting>Service-Component: OSGI-INF/*.xml</programlisting>

      <para>A Service-Component manifest header specified in a fragment is
      ignored by SCR. However, XML documents referenced by a bundle's
      Service-Component manifest header may be contained in attached
      fragments.</para>

      <para>SCR must process each XML document specified in this header. If an
      XML document specified by the header cannot be located in the bundle and
      its attached fragments, SCR must log an error message with the Log
      Service, if present, and continue.</para>
    </section>

    <section>
      <title>XML Document</title>

      <para>A component description must be in a well-formed XML document,
      <xref linkend="i1636361"/>, stored in a <code>UTF-8</code> encoded
      bundle entry. The namespace for component descriptions is:</para>

      <programlisting>http://www.osgi.org/xmlns/scr/v1.3.0</programlisting>

      <para>The recommended prefix for this namespace is <code>scr</code>.
      This prefix is used by examples in this specification. XML documents
      containing component descriptions may contain a single, root
      <code>component</code> element or one or more <code>component</code>
      elements embedded in a larger document. Use of the namespace for
      component descriptions is mandatory. The attributes and sub-elements of
      a <code>component</code> element are always unqualified.</para>

      <para>If an XML document contains a single, root <code>component</code>
      element which does not specify a namespace, then the
      <code>http://www.osgi.org/xmlns/scr/v1.0.0</code> namespace is assumed.
      Component descriptions using the
      <code>http://www.osgi.org/xmlns/scr/v1.0.0</code> namespace must be
      treated according to version 1.0 of this specification.</para>

      <para>SCR must parse all <code>component</code> elements in the
      namespace. Elements not in this namespace must be ignored. Ignoring
      elements that are not recognized allows component descriptions to be
      embedded in any XML document. For example, an entry can provide
      additional information about components. These additional elements are
      parsed by another sub-system.</para>

      <para>See <xref linkend="i1523991"/> for component description
      schema.</para>
    </section>

    <section xml:id="service.component-component.element">
      <title>Component Element</title>

      <para>The component element specifies the component description. The
      following text defines the structure of the XML grammar using a form
      that is similar to the normal grammar used in OSGi specifications. In
      this case the grammar should be mapped to XML elements:</para>

      <programlisting>&lt;component&gt; ::= (&lt;property&gt; | &lt;properties&gt;)*
                &lt;service&gt;?
                &lt;reference&gt;*
                &lt;implementation&gt;</programlisting>

      <para>SCR must not require component descriptions to specify the
      elements in the order listed above and as required by the XML schema.
      SCR must allow other orderings since arbitrary orderings of these
      elements do not affect the meaning of the component description. Only
      the relative ordering of <code>property</code> and
      <code>properties</code> elements and of <code>reference</code> elements
      have meaning.</para>

      <para>The <code>component</code> element has the attributes and
      <code>@Component</code> annotations defined in the following
      table.</para>

      <table pgwide="1">
        <title>Component Element and Annotations</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Annotation</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>name</code></entry>

              <entry><xref linkend="org.osgi.service.component.annotations.Component.name--" xrefstyle="hyperlink"/></entry>

              <entry><para>The <emphasis>name</emphasis> of a component must
              be unique within a bundle. The component name is used as a PID
              to retrieve component properties from the OSGi Configuration
              Admin service if present, unless a
              <code>configuration-pid</code> attribute has been defined. See
              <xref linkend="service.component-deployment"/> for more
              information. If the component name is used as a PID then it
              should be unique within the framework. The XML schema allows the
              use of component names which are not valid PIDs. Care must be
              taken to use a valid PID for a component name if the component
              should be configured by the Configuration Admin service. This
              attribute is optional. The default value of this attribute is
              the value of the <code>class</code> attribute of the nested
              <code>implementation</code> element. If multiple
              <code>component</code> elements in a bundle use the same value
              for the <code>class</code> attribute of their nested
              <code>implementation</code> element, then using the default
              value for this attribute will result in duplicate component
              names. In this case, this attribute must be specified with a
              unique value.</para></entry>
            </row>

            <row>
              <entry><code>enabled</code></entry>

              <entry><xref linkend="org.osgi.service.component.annotations.Component.enabled--" xrefstyle="hyperlink"/></entry>

              <entry><para>Controls whether the component is
              <emphasis>enabled</emphasis> when the bundle is started. The
              default value is <code>true</code>. If <code>enabled</code> is
              set to <code>false</code>, the component is disabled until the
              method <code>enableComponent</code> is called on the
              <code>ComponentContext</code> object. This allows some
              initialization to be performed by some other component in the
              bundle before this component can become satisfied. See <xref linkend="i1545307"/>.</para></entry>
            </row>

            <row>
              <entry><code>factory</code></entry>

              <entry><xref linkend="org.osgi.service.component.annotations.Component.factory--" xrefstyle="hyperlink"/></entry>

              <entry><para>If set to a non-empty string, it indicates that
              this component is a <emphasis>factory component</emphasis>. SCR
              must register a Component Factory service for each factory
              component. See <xref linkend="i1461154"/>.</para></entry>
            </row>

            <row>
              <entry><code>immediate</code></entry>

              <entry><xref linkend="org.osgi.service.component.annotations.Component.immediate--" xrefstyle="hyperlink"/></entry>

              <entry><para>Controls whether component configurations must be
              immediately activated after becoming satisfied or whether
              activation should be delayed. The default value is
              <code>false</code> if the <code>factory</code> attribute or if
              the <code>service</code> element is specified and
              <code>true</code> otherwise. If this attribute is specified, its
              value must be <code>false</code> if the <code>factory</code>
              attribute is also specified or must be <code>true</code> unless
              the <code>service</code> element is also
              specified.</para></entry>
            </row>

            <row>
              <entry><code>configuration-policy</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Component.configurationPolicy--" xrefstyle="hyperlink"/></para><para><xref linkend="org.osgi.service.component.annotations.ConfigurationPolicy.OPTIONAL" xrefstyle="hyperlink"/></para><para><xref linkend="org.osgi.service.component.annotations.ConfigurationPolicy.REQUIRE" xrefstyle="hyperlink"/></para><para><xref linkend="org.osgi.service.component.annotations.ConfigurationPolicy.IGNORE" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Controls whether component configurations must be
              satisfied depending on the presence of a corresponding
              <code>Configuration</code> object in the OSGi Configuration
              Admin service. A corresponding configuration is a
              <code>Configuration</code> object where the PID is the name of
              the component.</para><itemizedlist>
                  <listitem>
                    <para><code>optional</code> - (default) Use the
                    corresponding <code>Configuration</code> object if present
                    but allow the component to be satisfied even if the
                    corresponding <code>Configuration</code> object is not
                    present.</para>
                  </listitem>

                  <listitem>
                    <para><code>require</code> - There must be a corresponding
                    <code>Configuration</code> object for the component
                    configuration to become satisfied.</para>
                  </listitem>

                  <listitem>
                    <para><code>ignore</code> - Always allow the component
                    configuration to be satisfied and do not use the
                    corresponding <code>Configuration</code> object even if it
                    is present.</para>
                  </listitem>
                </itemizedlist></entry>
            </row>

            <row>
              <entry><code>configuration-pid</code></entry>

              <entry><xref linkend="org.osgi.service.component.annotations.Component.configurationPid--" xrefstyle="hyperlink"/></entry>

              <entry><para>The configuration PIDs to be used for the component
              in conjunction with Configuration Admin. Multiple configuration
              PIDs can be specified by using a whitespace separated list in
              the attribute. The default value for this attribute is the name
              of the component.</para><para>The annotation uses a
              <code>String[]</code> to specify multiple configuration PIDs.
              The order in which configuration PIDs are specified must be
              preserved in the generated component description. The annotation
              can also use the special configuration PID name <link linkend="org.osgi.service.component.annotations.Component.NAME" xrefstyle="hyperlink">"$"</link> to specify the name of the
              component. This special name must be replaced with the actual
              name of the component in the generated component
              description.</para></entry>
            </row>

            <row>
              <entry><code>activate</code></entry>

              <entry><xref linkend="org.osgi.service.component.annotations.Activate" xrefstyle="hyperlink"/></entry>

              <entry><para>Specifies the name of the method to call when a
              component configuration is activated. The default value of this
              attribute is <code>activate</code>. See <xref linkend="i1539155"/> for more information.</para><para>The
              annotation must be applied to the activate method and can only
              be used once.</para></entry>
            </row>

            <row>
              <entry><code>deactivate</code></entry>

              <entry><xref linkend="org.osgi.service.component.annotations.Deactivate" xrefstyle="hyperlink"/></entry>

              <entry><para>Specifies the name of the method to call when a
              component configuration is deactivated. The default value of
              this attribute is <code>deactivate</code>. See <xref linkend="i1576028"/> for more information.</para><para>The
              annotation must be applied to the deactivate method and can only
              be used once.</para></entry>
            </row>

            <row>
              <entry><code>modified</code></entry>

              <entry><xref linkend="org.osgi.service.component.annotations.Modified" xrefstyle="hyperlink"/></entry>

              <entry><para>Specifies the name of the method to call when the
              configuration properties for a component configuration is using
              a <code>Configuration</code> object from the Configuration Admin
              service and that <code>Configuration</code> object is modified
              without causing the component configuration to become
              unsatisfied. If this attribute is not specified, then the
              component configuration will become unsatisfied if its
              configuration properties use a <code>Configuration</code> object
              that is modified in any way. See <xref linkend="i1649781"/> for
              more information.</para><para>The annotation must be applied to
              the modified method and can only be used once.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Implementation Element</title>

      <para>The <code>implementation</code> element is required and defines
      the name of the component implementation class. The single attribute is
      defined in the following table.</para>

      <table pgwide="1">
        <title>Implementation Element and Annotations</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Annotation</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>class</code></entry>

              <entry><xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/></entry>

              <entry><para>The Java fully qualified name of the implementation
              class.</para><para>The component <xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> annotation will define the
              <code>implementation</code> element automatically from the type
              it is applied to.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The class is retrieved with the <code>loadClass</code> method of
      the component's bundle. The class must be public and have a public
      constructor without arguments (this is normally the default constructor)
      so component instances may be created by SCR with the
      <code>newInstance</code> method on <code>Class</code>.</para>

      <para>If the component description specifies a service, the class must
      implement all interfaces that are provided by the service.</para>
    </section>

    <section xml:id="service.component-property.properties.elements">
      <title>Property and Properties Elements</title>

      <para>A component description can define a number of properties. These
      can defined inline or from a resource in the bundle. The
      <code>property</code> and <code>properties</code> elements can occur
      multiple times and they can be interleaved. This interleaving is
      relevant because the properties are processed from top to bottom. Later
      properties override earlier properties that have the same name.</para>

      <para>Properties can also be overridden by a Configuration Admin
      service's <code>Configuration</code> object before they are exposed to
      the component or used as service properties. This is described in <xref linkend="service.component-component.properties"/> and <xref linkend="service.component-deployment"/>.</para>

      <para>The <code>property</code> element has the attributes and
      annotations defined in the following table.</para>

      <table pgwide="1">
        <title>Property Element and Annotations</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Annotation</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>name</code></entry>

              <entry><para><code><xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> <xref linkend="org.osgi.service.component.annotations.Component.property--" xrefstyle="hyperlink"/></code></para></entry>

              <entry><para>The name of the property.</para></entry>
            </row>

            <row>
              <entry><code>value</code></entry>

              <entry><para/></entry>

              <entry><para>The value of the property. This value is parsed
              according to the property type. If the value attribute is
              specified, the body of the element is ignored. If the type of
              the property is not <code>String</code>, parsing of the value is
              done by the static <code>valueOf(String)</code> method in the
              given type. For <code>Character</code> types, the conversion
              must be handled by <code>Integer.valueOf</code> method, a
              Character is always represented by its Unicode
              value.</para></entry>
            </row>

            <row>
              <entry><code>type</code></entry>

              <entry><para/></entry>

              <entry><para>The type of the property. Defines how to interpret
              the value. The type must be one of the following Java
              types:</para><itemizedlist>
                  <listitem>
                    <para><code>String</code> (default)</para>
                  </listitem>

                  <listitem>
                    <para><code>Long</code></para>
                  </listitem>

                  <listitem>
                    <para><code>Double</code></para>
                  </listitem>

                  <listitem>
                    <para><code>Float</code></para>
                  </listitem>

                  <listitem>
                    <para><code>Integer</code></para>
                  </listitem>

                  <listitem>
                    <para><code>Byte</code></para>
                  </listitem>

                  <listitem>
                    <para><code>Character</code></para>
                  </listitem>

                  <listitem>
                    <para><code>Boolean</code></para>
                  </listitem>

                  <listitem>
                    <para><code>Short</code></para>
                  </listitem>
                </itemizedlist></entry>
            </row>

            <row>
              <entry><code>&lt;body&gt;</code></entry>

              <entry><para/></entry>

              <entry><para> If the <code>value</code> attribute is not
              specified, the body of the property element must contain one or
              more values. The value of the property is then an array of the
              specified type. Except for <code>String</code> objects, the
              result will be translated to an array of primitive types. For
              example, if the type attribute specifies <code>Integer</code>,
              then the resulting array must be
              <code>int[]</code>.</para><para>Values must be placed one per
              line and blank lines are ignored. Parsing of the value is done
              by the <code>parse</code> methods in the class identified by the
              type, after trimming the line of any beginning and ending white
              space. <code>String</code> values are also trimmed of beginning
              and ending white space before being placed in the
              array.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>For example, a component that needs an array of hosts can use the
      following property definition:</para>

      <programlisting>&lt;property name="hosts"&gt;
        www.acme.com
        backup.acme.com
&lt;/property&gt;</programlisting>

      <para>This property declaration results in the property hosts, with a
      value of <code>String[] { "www.acme.com", "backup.acme.com"
      }</code>.</para>

      <para>A property can also be set with the <xref linkend="org.osgi.service.component.annotations.Component.property--" xrefstyle="hyperlink"/> annotation element of <code>Component</code>.
      This element is an array of strings that must follow the following
      syntax:</para>

      <programlisting>property ::= name ( ':' type )? '=' value</programlisting>

      <para>In this case <code>name</code>, <code>type</code>, and
      <code>value</code> parts map to the attributes of the
      <code>property</code> element. If multiple values must be specified then
      the same name can be repeated multiple times. For example:</para>

      <programlisting>@Component(property={"foo:Integer=1","foo:Integer=2","foo:Integer=3"})
public class FooImpl {
  ...
}</programlisting>

      <para>The <code>properties</code> element references an entry in the
      bundle whose contents conform to a standard <xref linkend="i1567926"/>.</para>

      <para>At runtime, SCR reads the entry to obtain the properties and their
      values. The properties element attributes are defined in the following
      table.</para>

      <table pgwide="1">
        <title>Properties Element and Annotations</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Annotation</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>entry</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> <xref linkend="org.osgi.service.component.annotations.Component.properties--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The entry path relative to the root of the
              bundle</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>For example, to include vendor identification properties that are
      stored in the OSGI-INF directory, the following definition could be
      used:</para>

      <programlisting>&lt;properties entry="OSGI-INF/vendor.properties"/&gt;</programlisting>

      <para>The <code><xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> <xref linkend="org.osgi.service.component.annotations.Component.properties--" xrefstyle="hyperlink"/></code> element can be used to provide the same
      information, this element consists of an array of strings where each
      string defines an entry. The order within the array is the order that
      must be used for the XML. However, the annotations do not support
      interleaving of the generated <code>property</code> and
      <code>properties</code> elements.</para>

      <para>For example:</para>

      <programlisting>@Component(properties="OSGI-INF/vendor.properties")</programlisting>

      <para>See <xref linkend="service.component-ordering.generated.properties"/> for more
      information on the ordering of generated properties when using
      annotations.</para>
    </section>

    <section xml:id="service.component-service.element">
      <title>Service Element</title>

      <para>The <code>service</code> element is optional. It describes the
      service information to be used when a component configuration is to be
      registered as a service.</para>

      <para>A service element has the following attribute defined in the
      following table.</para>

      <table pgwide="1">
        <title>Service Element and Annotations</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Annotation</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>scope</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> <xref linkend="org.osgi.service.component.annotations.Component.scope--" xrefstyle="hyperlink"/></para><para><xref linkend="org.osgi.service.component.annotations.ServiceScope.SINGLETON" xrefstyle="hyperlink"/></para><para><xref linkend="org.osgi.service.component.annotations.ServiceScope.BUNDLE" xrefstyle="hyperlink"/></para><para><xref linkend="org.osgi.service.component.annotations.ServiceScope.PROTOTYPE" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Controls the scope of the provided service. If set
              to <code>singleton</code>, when the component is registered as a
              service, it must be registered as a bundle scope service but
              only a single component configuration must be created and
              activated and a new instance of the component implementation
              class of the component must be used for all bundles using the
              service. If set to <code>bundle</code>, when the component is
              registered as a service, it must be registered as a bundle scope
              service and a different component configuration is created and
              activated and a new instance of the component implementation
              class must be created for each bundle using the service. If set
              to <code>prototype</code>, when the component is registered as a
              service, it must be registered as a prototype scope service and
              a different component configuration is created and activated and
              a new instance of the component implementation class must be
              created for each distinct request for the service, such as via
              <code>ServiceObjects</code>.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The <code>scope</code> attribute must be <code>singleton</code> if
      the component is a factory component or an immediate component. This is
      because SCR is not free to create component configurations as necessary
      to support non-singleton scoped services. A component description is
      ill-formed if it specifies that the component is a factory component or
      an immediate component and <code>scope</code> is not
      <code>singleton</code>.</para>

      <para>The <code>service</code> element must have one or more
      <code>provide</code> elements that define the service interfaces. The
      <code>provide</code> element has the attribute defined in the following
      table.</para>

      <table pgwide="1">
        <title>Provide Element and Annotations</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Annotation</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>interface</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> <xref linkend="org.osgi.service.component.annotations.Component.service--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The name of the interface that this service is
              registered under. This name must be the fully qualified name of
              a Java class. For example,
              <code>org.osgi.service.log.LogService</code>. The specified Java
              class should be an interface rather than a class, however
              specifying a class is supported. The component implementation
              class must implement all the specified service
              interfaces.</para><para>The Component annotation can specify the
              provided services, if this element is not specified all directly
              implemented interfaces on the component's type are defined as
              service interfaces. Specifying an empty array indicates that no
              service should be registered.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>For example, a component implements an Event Handler
      service.</para>

      <programlisting>&lt;service&gt;
    &lt;provide interface=
        "org.osgi.service.eventadmin.EventHandler"/&gt;
&lt;/service&gt;</programlisting>

      <para>This previous example can be generated with the following
      annotation:</para>

      <programlisting>@Component
public class Foo implements EventHandler { ... }</programlisting>
    </section>

    <section xml:id="service.component-reference.element">
      <title>Reference Element</title>

      <para>A <emphasis>reference</emphasis> declares a dependency that a
      component has on a<emphasis> </emphasis>set of target services. A
      component configuration is not satisfied, unless all its references are
      satisfied. A reference specifies target services by specifying their
      interface and an optional target property.</para>

      <para>A <code>reference</code> element has the attributes defined in the
      following table.</para>

      <table pgwide="1">
        <title>Reference Element and Annotations</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Annotation</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>name</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Reference.name--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The name of the reference. This name is local to
              the component and can be used to locate a bound service of this
              reference with one of the <code>locateService</code> methods of
              <xref linkend="org.osgi.service.component.ComponentContext" xrefstyle="hyperlink"/>. Each <code>reference</code> element
              within the component must have a unique name. This
              <code>name</code> attribute is optional. The default value of
              this attribute is the value of the <code>interface</code>
              attribute of this element. If multiple <code>reference</code>
              elements in the component use the same interface name, then
              using the default value for this attribute will result in
              duplicate reference names. In this case, this attribute must be
              specified with a unique name for the reference to avoid an
              error.</para><para>The <code>Reference</code> annotation will
              use the name of the annotated method or field as the default
              reference name. If the method name begins with
              <code>bind</code>, <code>set</code> or <code>add</code>, that
              prefix is removed.</para></entry>
            </row>

            <row>
              <entry><code>interface</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Reference.service--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Fully qualified name of the class that is used by
              the component to access the service. The service provided to the
              component must be type compatible with this class. That is, the
              component must be able to cast the service object to this class.
              A service must be registered under this name to be considered
              for the set of target services.</para><para>The
              <code>Reference</code> annotation will use the type of the first
              argument of the annotated method or the type of the annotated
              field to determine the <code>service</code>
              value.</para></entry>
            </row>

            <row>
              <entry><code>cardinality</code></entry>

              <entry><para> <xref linkend="org.osgi.service.component.annotations.Reference.cardinality--" xrefstyle="hyperlink"/></para><para> <xref linkend="org.osgi.service.component.annotations.ReferenceCardinality.MANDATORY" xrefstyle="hyperlink"/></para><para> <xref linkend="org.osgi.service.component.annotations.ReferenceCardinality.OPTIONAL" xrefstyle="hyperlink"/></para><para> <xref linkend="org.osgi.service.component.annotations.ReferenceCardinality.MULTIPLE" xrefstyle="hyperlink"/></para><para> <xref linkend="org.osgi.service.component.annotations.ReferenceCardinality.AT_LEAST_ONE" xrefstyle="hyperlink"/></para></entry>

              <entry><para> Specifies if the reference is optional and if the
              component implementation support a single bound service or
              multiple bound services. See <xref linkend="service.component-reference.cardinality"/>.</para></entry>
            </row>

            <row>
              <entry><code>policy</code></entry>

              <entry><para> <xref linkend="org.osgi.service.component.annotations.Reference.policy--" xrefstyle="hyperlink"/></para><para> <xref linkend="org.osgi.service.component.annotations.ReferencePolicy.STATIC" xrefstyle="hyperlink"/></para><para> <xref linkend="org.osgi.service.component.annotations.ReferencePolicy.DYNAMIC" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The policy declares the assumption of the component
              about dynamicity. See <xref linkend="i1440474"/>.</para></entry>
            </row>

            <row>
              <entry><code>policy-option</code></entry>

              <entry><para> <xref linkend="org.osgi.service.component.annotations.Reference.policyOption--" xrefstyle="hyperlink"/></para><para> <xref linkend="org.osgi.service.component.annotations.ReferencePolicyOption.RELUCTANT" xrefstyle="hyperlink"/></para><para> <xref linkend="org.osgi.service.component.annotations.ReferencePolicyOption.GREEDY" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Defines the policy when a better service becomes
              available. See <xref linkend="i1440474"/>.</para></entry>
            </row>

            <row>
              <entry><code>target</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Reference.target--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>An optional OSGi Framework filter expression that
              further constrains the set of target services. The default is no
              filter, limiting the set of matched services to all service
              registered under the given reference interface. The value of
              this attribute is used for the value of the target property of
              the reference. See <xref linkend="service.component-target.property"/>.</para></entry>
            </row>

            <row>
              <entry><code>scope</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Reference.scope--" xrefstyle="hyperlink"/></para><para><xref linkend="org.osgi.service.component.annotations.ReferenceScope.BUNDLE" xrefstyle="hyperlink"/></para><para><xref linkend="org.osgi.service.component.annotations.ReferenceScope.PROTOTYPE" xrefstyle="hyperlink"/></para><para><link linkend="org.osgi.service.component.annotations.ReferenceScope.PROTOTYPE_REQUIRED" xrefstyle="hyperlink">PROTOTYPE_</link></para><para> <link linkend="org.osgi.service.component.annotations.ReferenceScope.PROTOTYPE_REQUIRED" xrefstyle="hyperlink">REQUIRED</link></para></entry>

              <entry><para>The reference scope for this reference. See <xref linkend="service.component-reference.scope"/>.</para></entry>
            </row>

            <row>
              <entry><code>bind</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Reference" xrefstyle="hyperlink"/></para><para><xref linkend="org.osgi.service.component.annotations.Reference.bind--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The name of a method in the component
              implementation class that is used to notify that a service is
              bound to the component configuration. For static references,
              this method is only called before the <code>activate</code>
              method. For dynamic references, this method can also be called
              while the component configuration is active. See <xref linkend="i1548427"/>.</para><para>The <code>Reference</code>
              annotation will use the name of the method it is applied to as
              the bind method name.</para></entry>
            </row>

            <row>
              <entry><code>updated</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Reference.updated--" xrefstyle="hyperlink"/></para></entry>

              <entry><para> The name of a method in the component
              implementation class that is used to notify that a bound service
              has modified its properties.</para></entry>
            </row>

            <row>
              <entry><code>unbind</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Reference.unbind--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Same as bind, but is used to notify the component
              configuration that the service is unbound. For static
              references, the method is only called after the
              <code>deactivate</code> method. For dynamic references, this
              method can also be called while the component configuration is
              active. See <xref linkend="i1548427"/>.</para></entry>
            </row>

            <row>
              <entry><code>field</code></entry>

              <entry><para><xref linkend="org.osgi.service.component.annotations.Reference" xrefstyle="hyperlink"/></para><para><xref linkend="org.osgi.service.component.annotations.Reference.field--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The name of a field in the component implementation
              class that is used to hold service(s) that are bound to the
              component configuration. For static references, this field is
              only set before the <code>activate</code> method. For dynamic
              references, this field can modified while the component
              configuration is active. See <xref linkend="i1548427"/>.</para><para>The <code>Reference</code>
              annotation will use the name of the field it is applied to as
              the field name.</para></entry>
            </row>

            <row>
              <entry><code>field-option</code></entry>

              <entry><para> <xref linkend="org.osgi.service.component.annotations.Reference.fieldOption--" xrefstyle="hyperlink"/></para><para> <xref linkend="org.osgi.service.component.annotations.FieldOption.REPLACE" xrefstyle="hyperlink"/></para><para> <xref linkend="org.osgi.service.component.annotations.FieldOption.UPDATE" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Defines how the field value must be managed. This
              is ignored if the <code>field</code> attribute is not set. See
              <xref linkend="service.component-reference.field.option"/>.</para></entry>
            </row>

            <row>
              <entry><code>field-collection-type</code></entry>

              <entry/>

              <entry><para>Defines the types of elements in the collection
              referenced by the field value. This is ignored if the
              <code>field</code> attribute is not set or the cardinality is
              unary. See <xref linkend="service.component-field.strategy"/>
              for more information.</para><para>The <code>Reference</code>
              annotation can infer the value of the collection elements from
              the generic type information of the annotated
              field.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>In the generated component description, the reference elements
      must be ordered in ascending lexicographical order, using
      <code>String.compareTo</code>, of the <xref linkend="org.osgi.service.component.annotations.Reference.name--" xrefstyle="hyperlink"/>s of the references.</para>

      <para>The following code demonstrates the use of the <xref linkend="org.osgi.service.component.annotations.Reference" xrefstyle="hyperlink"/> annotation for the event strategy.</para>

      <programlisting>@Component
public class FooImpl implements Foo {
  @Reference( 
    policy = DYNAMIC, 
    policyOption = GREEDY,
    cardinality = MANDATORY )
  void setLog( LogService log ) { ... }
  void unsetLog( LogService log ) { ... }
  void updatedLog( Map&lt;String,?&gt; ref ) { ... }

  @Activate
  void open() { ... }
  @Deactivate
  void close() { ... }
}</programlisting>

      <para>The following code demonstrates the use of the <xref linkend="org.osgi.service.component.annotations.Reference" xrefstyle="hyperlink"/> annotation for the field strategy.</para>

      <programlisting>@Component
public class FooImpl implements Foo {
  @Reference( 
    policy = DYNAMIC, 
    policyOption = GREEDY,
    cardinality = MANDATORY )
  volatile LogService log;

  @Activate
  void open() { log.log(LOG_INFO, "activated"); }
  @Deactivate
  void close() { log.log(LOG_INFO, "deactivated"); }
}</programlisting>

      <para>For a reference to be used with the lookup strategy, there are no
      bind methods or fields to annotate with the <xref linkend="org.osgi.service.component.annotations.Reference" xrefstyle="hyperlink"/> annotation. Instead <xref linkend="org.osgi.service.component.annotations.Reference" xrefstyle="hyperlink"/> annotations can be specified in the <xref linkend="org.osgi.service.component.annotations.Component.reference--" xrefstyle="hyperlink"/> element of the <xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> annotation. When used in this way, the <xref linkend="org.osgi.service.component.annotations.Reference.name--" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.component.annotations.Reference.service--" xrefstyle="hyperlink"/> elements must be specified since there is no
      annotated member from which the name or service can be determined. The
      following code demonstrates the use of the <xref linkend="org.osgi.service.component.annotations.Reference" xrefstyle="hyperlink"/> annotation for the lookup strategy.</para>

      <programlisting>@Component( reference = 
  @Reference( name = "log", service = LogService.class )
)
public class FooImpl implements Foo {
  @Activate
  void open( ComponentContext context ) {
    LogService log = (LogService) context.locateService( "log" );
    ...
  }
  @Deactivate
  void close() { ... }
}</programlisting>
    </section>
  </section>

  <section xml:id="i1545305">
    <title>Component Life Cycle</title>

    <section xml:id="i1545307">
      <title>Enabled</title>

      <para>A component must first be <emphasis>enabled</emphasis> before it
      can be used. A component cannot be enabled unless the component's bundle
      is started. See <emphasis>Starting Bundles</emphasis> in <xref linkend="intro.core.release" xrefstyle="template:%t"/>. All components
      in a bundle become disabled when the bundle is stopped. So the life
      cycle of a component is contained within the life cycle of its
      bundle.</para>

      <para>Every component can be enabled or disabled. The initial enabled
      state of a component is specified in the component description via the
      <code>enabled</code> attribute of the <code>component</code> element.
      See <xref linkend="service.component-component.element"/>. Component
      configurations can be created, satisfied and activated only when the
      component is enabled.</para>

      <para>The enabled state of a component can be controlled with the
      Component Context <xref linkend="org.osgi.service.component.ComponentContext.enableComponent-String-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.component.ComponentContext.disableComponent-String-" xrefstyle="hyperlink"/> methods. The purpose of later enabling a
      component is to be able to decide programmatically when a component can
      become enabled. For example, an immediate component can perform some
      initialization work before other components in the bundle are enabled.
      The component descriptions of all other components in the bundle can be
      disabled by having <code>enabled</code> set to <code>false</code> in
      their component descriptions. After any necessary initialization work is
      complete, the immediate component can call <code>enableComponent</code>
      to enable the remaining components.</para>

      <para>The <code>enableComponent</code> and <code>disableComponent</code>
      methods must return after changing the enabled state of the named
      component. Any actions that result from this, such as activating or
      deactivating a component configuration, must occur asynchronously to the
      method call. Therefore a component can disable itself.</para>

      <para>All components in a bundle can be enabled by passing a
      <code>null</code> as the argument to
      <code>enableComponent</code>.</para>
    </section>

    <section>
      <title>Satisfied</title>

      <para>Component configurations can only be activated when the component
      configuration is <emphasis>satisfied</emphasis>. A component
      configuration becomes satisfied when the following conditions are all
      satisfied:</para>

      <itemizedlist>
        <listitem>
          <para>The component is <emphasis>enabled</emphasis>.</para>
        </listitem>

        <listitem>
          <para>If the component description specifies
          <code>configuration-policy=required</code>, then a
          <code>Configuration</code> object for the component is present in
          the Configuration Admin service.</para>
        </listitem>

        <listitem>
          <para>Using the component properties of the component configuration,
          all the component's references are satisfied. A reference is
          satisfied when the reference specifies optional cardinality or the
          number of target services is equal to or more than the minimum
          cardinality of the reference.</para>
        </listitem>
      </itemizedlist>

      <para>Once any of the listed conditions are no longer true, the
      component configuration becomes <emphasis>unsatisfied</emphasis>. An
      activated component configuration that becomes unsatisfied must be
      deactivated.</para>
    </section>

    <section>
      <title>Immediate Component</title>

      <para>A component is an immediate component when it must be activated as
      soon as its dependencies are satisfied. Once the component configuration
      becomes unsatisfied, the component configuration must be deactivated. If
      an immediate component configuration is satisfied and specifies a
      service, SCR must register the component configuration as a service in
      the service registry and then activate the component configuration. The
      service properties for this registration consist of the component
      properties as defined in <xref linkend="i1629621"/>.</para>

      <para>The state diagram is shown in <xref linkend="i1445265"/>.</para>

      <figure xml:id="i1445265">
        <title>Immediate Component Configuration</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.443in" contentwidth="7.000in" fileref="immediate-configuration.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Delayed Component</title>

      <para>A key attribute of a delayed component is the delaying of class
      loading and object creation. Therefore, the activation of a delayed
      component configuration does not occur until there is an actual request
      for a service object. A component is a delayed component when it
      specifies a service but it is not a factory component and does not have
      the <code>immediate</code> attribute of the <code>component</code>
      element set to <code>true</code>.</para>

      <para>SCR must register a service after the component configuration
      becomes satisfied. The registration of this service must look to
      observers of the service registry as if the component's bundle actually
      registered this service. This strategy makes it possible to register
      services without creating a class loader for the bundle and loading
      classes, thereby allowing reduction in initialization time and a delay
      in memory footprint.</para>

      <para>When SCR registers the service on behalf of a component
      configuration, it must avoid causing a class load to occur from the
      component's bundle. SCR can ensure this by registering a
      <code>ServiceFactory</code> object with the Framework for that service.
      By registering a <code>ServiceFactory</code> object, the actual service
      object is not needed until the <code>ServiceFactory</code> is called to
      provide the service object. The service properties for this registration
      consist of the component properties as defined in <xref linkend="i1629621"/>.</para>

      <para>The activation of a component configuration must be delayed until
      its service is requested. When the service is requested, if the service
      has the <code>scope</code> attribute set to <code>bundle</code>, SCR
      must create and activate a unique component configuration for each
      bundle requesting the service. If the service has the <code>scope</code>
      attribute set to <code>prototype</code>, SCR must create and activate a
      unique component configuration for each distinct request for the
      service. Otherwise, if the service has the <code>scope</code> attribute
      set to <code>singleton</code>, SCR must activate a single component
      configuration which is used by all requests for the service. A component
      instance can determine the bundle it was activated for by calling the
      <xref linkend="org.osgi.service.component.ComponentContext.getUsingBundle--" xrefstyle="hyperlink"/> method on the Component Context.</para>

      <para>The activation of delayed components is depicted in a state
      diagram in <xref linkend="i1462979"/>. Notice that multiple component
      configurations can be created from the <code>REGISTERED</code> state if
      a delayed component specifies a service <code>scope</code> set to a
      value other than <code>singleton</code>.</para>

      <para>If the service registered by a component configuration becomes
      unused because there are no more bundles using it, then SCR should
      deactivate that component configuration. This allows SCR implementations
      to eagerly reclaim activated component configurations.</para>

      <figure xml:id="i1462979">
        <title>Delayed Component Configuration</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.979in" contentwidth="7.000in" fileref="delayed-configuration.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Factory Component</title>

      <para>SCR must register a Component Factory service as soon as the
      <emphasis>component factory</emphasis> becomes satisfied. The component
      factory is satisfied when the following conditions are all
      satisfied:</para>

      <itemizedlist>
        <listitem>
          <para>The component is enabled.</para>
        </listitem>

        <listitem>
          <para>Using the component properties specified by the component
          description, all the component's references are satisfied. A
          reference is satisfied when the reference specifies optional
          cardinality or there is at least one target service for the
          reference</para>
        </listitem>
      </itemizedlist>

      <para>The component factory, however, does not use any of the target
      services and does not bind to them.</para>

      <para>Once any of the listed conditions are no longer true, the
      component factory becomes unsatisfied and the Component Factory service
      must be unregistered. Any component configurations activated via the
      component factory are unaffected by the unregistration of the Component
      Factory service, but may themselves become unsatisfied for the same
      reason.</para>

      <para>The Component Factory service must be registered under the name
      <code>org.osgi.service.component.ComponentFactory</code> with the
      following service properties:</para>

      <itemizedlist>
        <listitem>
          <para><code>component.name</code> - The name of the
          component.</para>
        </listitem>

        <listitem>
          <para><code>component.factory</code> - The value of the
          <code>factory</code> attribute.</para>
        </listitem>
      </itemizedlist>

      <para>The service properties of the Component Factory service must not
      include the component properties.</para>

      <para>New component configurations are created and activated when the
      <code>newInstance</code> method of the Component Factory service is
      called. If the component description specifies a service, the component
      configuration is registered as a service under the provided interfaces.
      The service properties for this registration consist of the component
      properties as defined in <xref linkend="i1629621"/>. The service
      registration must take place before the component configuration is
      activated. Service unregistration must take place before the component
      configuration is deactivated.</para>

      <figure>
        <title>Factory Component</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.929in" contentwidth="7.000in" fileref="factory-component.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>A Component Factory service has a single method: <xref linkend="org.osgi.service.component.ComponentFactory.newInstance-Dictionary-" xrefstyle="hyperlink"/>. This method must create, satisfy and activate a
      new component configuration and register its component instance as a
      service if the component description specifies a service. It must then
      return a <xref linkend="org.osgi.service.component.ComponentInstance" xrefstyle="hyperlink"/> object. This <xref linkend="org.osgi.service.component.ComponentInstance" xrefstyle="hyperlink"/> object can be used to get the component instance
      with the <xref linkend="org.osgi.service.component.ComponentInstance.getInstance--" xrefstyle="hyperlink"/> method.</para>

      <para>SCR must attempt to satisfy the component configuration created by
      <code>newInstance</code> before activating it. If SCR is unable to
      satisfy the component configuration given the component properties and
      the Dictionary argument to <code>newInstance</code>, the
      <code>newInstance</code> method must throw a
      <code>ComponentException</code>.</para>

      <para>The client of the Component Factory service can also deactivate a
      component configuration with the <xref linkend="org.osgi.service.component.ComponentInstance.dispose--" xrefstyle="hyperlink"/> method on the <xref linkend="org.osgi.service.component.ComponentInstance" xrefstyle="hyperlink"/> object. If the component configuration is
      already deactivated, or is being deactivated, then this method is
      ignored. Also, if the component configuration becomes unsatisfied for
      any reason, it must be deactivated by SCR.</para>

      <para>Once a component configuration created by the Component Factory
      has been deactivated, that component configuration will not be
      reactivated or used again.</para>
    </section>

    <section>
      <title>Activation</title>

      <para>Activating a component configuration consists of the following
      steps:</para>

      <orderedlist>
        <listitem>
          <para>Load the component implementation class.</para>
        </listitem>

        <listitem>
          <para>Create the component instance and component context.</para>
        </listitem>

        <listitem>
          <para>Bind the target services. See <xref linkend="i1536739"/>.</para>
        </listitem>

        <listitem>
          <para>Call the activate method, if present. See <xref linkend="i1539155"/>.</para>
        </listitem>
      </orderedlist>

      <para>Component instances must never be reused. Each time a component
      configuration is activated, SCR must create a new component instance to
      use with the activated component configuration. A component instance
      must complete activation before it can be deactivated. Once the
      component configuration is deactivated or fails to activate due to an
      exception, SCR must unbind all the component's bound services and
      discard all references to the component instance associated with the
      activation.</para>
    </section>

    <section xml:id="i1536739">
      <title>Binding Services</title>

      <para>When a component configuration's reference is satisfied, there is
      a set of zero or more target services for that reference. When the
      component configuration is activated, a subset of the target services
      for each reference are bound to the component configuration. The subset
      is chosen by the cardinality of the reference. See <xref linkend="service.component-reference.cardinality"/>.</para>

      <para>When binding services, the references are processed in the order
      in which they are specified in the component description. That is,
      target services from the first specified reference are bound before
      services from the next specified reference.</para>

      <para>Obtaining the service object for a bound service may result in
      activating a component configuration of the bound service which could
      result in an exception. If the loss of the bound service due to the
      exception causes the reference's cardinality constraint to be violated,
      then activation of this component configuration will fail. Otherwise the
      bound service which failed to activate will be considered
      unbound.</para>

      <para>If the reference uses the field strategy, the field must be set.
      Then, if the reference uses the event strategy, the bind method must be
      called for each bound service of that reference. If a bind method throws
      an exception, SCR must log an error message containing the exception
      with the Log Service, if present, but the activation of the component
      configuration does not fail.</para>
    </section>

    <section xml:id="i1539155">
      <title>Activate Method</title>

      <para>A component instance can have an activate method. The name of the
      activate method can be specified by the <code>activate</code> attribute.
      See <xref linkend="service.component-component.element"/>. If the
      <code>activate</code> attribute is not specified, the default method
      name of <code>activate</code> is used. The prototype of the activate
      method is:</para>

      <programlisting>void &lt;method-name&gt;(&lt;arguments&gt;);</programlisting>

      <para>The activate method can take zero or more arguments. Each argument
      must be of one of the following types:</para>

      <itemizedlist>
        <listitem>
          <para><code>ComponentContext</code> - The component instance will be
          passed the Component Context for the component configuration.</para>
        </listitem>

        <listitem>
          <para><code>BundleContext</code> - The component instance will be
          passed the Bundle Context of the component's bundle.</para>
        </listitem>

        <listitem>
          <para><code>Map</code> - The component instance will be passed an
          unmodifiable Map containing the component properties.</para>
        </listitem>

        <listitem>
          <para>A component property type - The component instance will be
          passed an instance of the component property type which allows type
          safe access to component properties defined by the component
          property type. See <xref linkend="service.component-component.property.types"/>.</para>
        </listitem>
      </itemizedlist>

      <para>A suitable method is selected using the following priority:</para>

      <orderedlist>
        <listitem>
          <para>The method takes a single argument and the type of the
          argument is
          <code>org.osgi.service.component.ComponentContext</code>.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is <code>org.osgi.framework.BundleContext</code>.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is a component property type.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is <code>java.util.Map</code>.</para>
        </listitem>

        <listitem>
          <para>The method takes two or more arguments and the type of each
          argument must be
          <code>org.osgi.service.component.ComponentContext</code>,
          <code>org.osgi.framework.BundleContext</code>, a component property
          type or <code>java.util.Map</code>. If multiple methods match this
          rule, this implies the method name is overloaded and SCR may choose
          any of the methods to call.</para>
        </listitem>

        <listitem>
          <para>The method takes zero arguments.</para>
        </listitem>
      </orderedlist>

      <para>When searching for the activate method to call, SCR must locate a
      suitable method as specified in <xref linkend="i1641644"/>. If the
      <code>activate</code> attribute is specified and no suitable method is
      located, SCR must log an error message with the Log Service, if present,
      and the component configuration is not activated.</para>

      <para>If an activate method is located, SCR must call this method to
      complete the activation of the component configuration. If the activate
      method throws an exception, SCR must log an error message containing the
      exception with the Log Service, if present, and the component
      configuration is not activated.</para>
    </section>

    <section>
      <title>Component Context</title>

      <para>The Component Context is made available to a component instance
      via the <code>activate</code> and <code>deactivate</code> methods. It
      provides the interface to the execution context of the component, much
      like the Bundle Context provides a bundle the interface to the
      Framework. A Component Context should therefore be regarded as a
      capability and not shared with other components or bundles.</para>

      <para>Each distinct component instance receives a unique Component
      Context. Component Contexts are not reused and must be discarded when
      the component configuration is deactivated.</para>
    </section>

    <section xml:id="i1651072">
      <title>Bound Service Replacement</title>

      <para>If an active component configuration has a dynamic reference with
      unary cardinality and the bound service is modified or unregistered and
      ceases to be a target service, or the <code>policy-option</code> is
      <code>greedy</code> and a better target service becomes available then
      SCR must attempt to replace the bound service with a new bound
      service.</para>

      <para>If the reference uses the field strategy, the field must be set
      for the replacement bound service. Then, if the reference uses the event
      strategy, SCR must first bind the new bound service and then unbind the
      outgoing service. This reversed order allows the component to not have
      to handle the inevitable gap between the unbind and bind methods.
      However, this means that in the unbind method care must be taken to not
      overwrite the newly bound service. For example, the following code
      handles the associated concurrency issues and simplify handling the
      reverse order.</para>

      <programlisting>final AtomicReference&lt;LogService&gt; log = new AtomicReference&lt;LogService&gt;();

void setLogService( LogService log ) {
    this.log.set(log);
}
void unsetLogService( LogService log ) {
    this.log.compareAndSet(log, null);
}</programlisting>

      <para>If the dynamic reference falls below the minimum cardinality, the
      component configuration must be deactivated because the cardinality
      constraints will be violated.</para>

      <para>If a component configuration has a static reference and a bound
      service is modified or unregistered and ceases to be a target service,
      or the <code>policy-option</code> is <code>greedy</code> and a better
      target service becomes available then SCR must deactivate the component
      configuration. Afterwards, SCR must attempt to activate the component
      configuration again if another target service can be used as a
      replacement for the outgoing service.</para>
    </section>

    <section>
      <title>Updated</title>

      <para>If an active component is bound to a service that modifies its
      service properties then the component can be updated. If the reference
      uses the field strategy and the field holds the service properties, the
      field must be set for the updated bound service. Then, if the reference
      uses the event strategy and specifies an updated method, the updated
      method must be called.</para>
    </section>

    <section xml:id="i1652198">
      <title>Modification</title>

      <para>Modifying a component configuration can occur if the component
      description specifies the <code>modified</code> attribute and the
      component properties of the component configuration use a
      <code>Configuration</code> object from the Configuration Admin service
      and that <code>Configuration</code> object is modified without causing
      the component configuration to become unsatisfied. If this occurs, the
      component instance will be notified of the change in the component
      properties.</para>

      <para>If the <code>modified</code> attribute is not specified, then the
      component configuration will become unsatisfied if its component
      properties use a <code>Configuration</code> object and that
      Configuration object is modified in any way.</para>

      <para>Modifying a component configuration consists of the following
      steps:</para>

      <orderedlist>
        <listitem>
          <para>Update the component context for the component configuration
          with the modified configuration properties.</para>
        </listitem>

        <listitem>
          <para>Call the modified method. See <xref linkend="i1649781"/>.</para>
        </listitem>

        <listitem>
          <para>Modify the bound services for the dynamic references if the
          set of target services changed due to changes in the target
          properties. See <xref linkend="i1651072"/>.</para>
        </listitem>

        <listitem>
          <para>If the component configuration is registered as a service,
          modify the service properties.</para>
        </listitem>
      </orderedlist>

      <para>A component instance must complete activation, or a previous
      modification, before it can be modified.</para>

      <para>See <xref linkend="i1649746"/> for more information.</para>
    </section>

    <section xml:id="i1649781">
      <title>Modified Method</title>

      <para>The name of the modified method is specified by the
      <code>modified</code> attribute. See <xref linkend="service.component-component.element"/>. The prototype and
      selection priority of the modified method is identical to that of the
      activate method. See <xref linkend="i1539155"/>.</para>

      <para>SCR must locate a suitable method as specified in <xref linkend="i1641644"/>. If the <code>modified</code> attribute is
      specified and no suitable method is located, SCR must log an error
      message with the Log Service, if present, and the component
      configuration becomes unsatisfied and is deactivated as if the
      <code>modified</code> attribute was not specified.</para>

      <para>If a modified method is located, SCR must call this method to
      notify the component configuration of changes to the component
      properties. If the modified method throws an exception, SCR must log an
      error message containing the exception with the Log Service, if present
      and continue processing the modification.</para>
    </section>

    <section xml:id="i1649517">
      <title>Deactivation</title>

      <para>Deactivating a component configuration consists of the following
      steps:</para>

      <orderedlist>
        <listitem>
          <para>Call the deactivate method, if present. See <xref linkend="i1576028"/>.</para>
        </listitem>

        <listitem>
          <para>Unbind any bound services. See <xref linkend="i1543088"/>.</para>
        </listitem>

        <listitem>
          <para>Release all references to the component instance and component
          context.</para>
        </listitem>
      </orderedlist>

      <para>A component instance must complete activation or modification
      before it can be deactivated. A component configuration can be
      deactivated for a variety of reasons. The deactivation reason can be
      received by the deactivate method. The following reason values are
      defined:</para>

      <itemizedlist>
        <listitem>
          <para>0 - Unspecified.</para>
        </listitem>

        <listitem>
          <para>1 - The component was disabled.</para>
        </listitem>

        <listitem>
          <para>2 - A reference became unsatisfied.</para>
        </listitem>

        <listitem>
          <para>3 - A configuration was changed.</para>
        </listitem>

        <listitem>
          <para>4 - A configuration was deleted.</para>
        </listitem>

        <listitem>
          <para>5 - The component was disposed.</para>
        </listitem>

        <listitem>
          <para>6 - The bundle was stopped.</para>
        </listitem>
      </itemizedlist>

      <para>Once the component configuration is deactivated, SCR must discard
      all references to the component instance and component context
      associated with the activation.</para>
    </section>

    <section xml:id="i1576028">
      <title>Deactivate Method</title>

      <para>A component instance can have a deactivate method. The name of the
      deactivate method can be specified by the <code>deactivate</code>
      attribute. See <xref linkend="service.component-component.element"/>. If
      the <code>deactivate</code> attribute is not specified, the default
      method name of <code>deactivate</code> is used. The prototype of the
      deactivate method is:</para>

      <programlisting>void &lt;method-name&gt;(&lt;arguments&gt;);</programlisting>

      <para>The deactivate method can take zero or more arguments. Each
      argument must be assignable from one of the following types:</para>

      <itemizedlist>
        <listitem>
          <para><code>ComponentContext</code> - The component instance will be
          passed the Component Context for the component.</para>
        </listitem>

        <listitem>
          <para><code>BundleContext</code> - The component instance will be
          passed the Bundle Context of the component's bundle.</para>
        </listitem>

        <listitem>
          <para><code>Map</code> - The component instance will be passed an
          unmodifiable Map containing the component properties.</para>
        </listitem>

        <listitem>
          <para>A component property type - The component instance will be
          passed an instance of the component property type which allows type
          safe access to component properties defined by the component
          property type. See <xref linkend="service.component-component.property.types"/>.</para>
        </listitem>

        <listitem>
          <para><code>int</code> or <code>Integer</code> - The component
          instance will be passed the reason the component configuration is
          being deactivated. See <xref linkend="i1649517"/>.</para>
        </listitem>
      </itemizedlist>

      <para>A suitable method is selected using the following priority:</para>

      <orderedlist>
        <listitem>
          <para>The method takes a single argument and the type of the
          argument is
          <code>org.osgi.service.component.ComponentContext</code>.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is <code>org.osgi.framework.BundleContext</code>.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is a component property type.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is <code>java.util.Map</code>.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is <code>int</code>.</para>
        </listitem>

        <listitem>
          <para>The method takes a single argument and the type of the
          argument is <code>java.lang.Integer</code>.</para>
        </listitem>

        <listitem>
          <para>The method takes two or more arguments and the type of each
          argument must be
          <code>org.osgi.service.component.ComponentContext</code>,
          <code>org.osgi.framework.BundleContext</code>, a component property
          type, <code>java.util.Map</code>, <code>int</code> or
          <code>java.lang.Integer</code>. If multiple methods match this rule,
          this implies the method name is overloaded and SCR may choose any of
          the methods to call.</para>
        </listitem>

        <listitem>
          <para>The method takes zero arguments.</para>
        </listitem>
      </orderedlist>

      <para>When searching for the deactivate method to call, SCR must locate
      a suitable method as specified in <xref linkend="i1641644"/>. If the
      <code>deactivate</code> attribute is specified and no suitable method is
      located, SCR must log an error message with the Log Service, if present,
      and the deactivation of the component configuration will
      continue.</para>

      <para>If a deactivate method is located, SCR must call this method to
      commence the deactivation of the component configuration. If the
      deactivate method throws an exception, SCR must log an error message
      containing the exception with the Log Service, if present, and the
      deactivation of the component configuration will continue.</para>
    </section>

    <section xml:id="i1543088">
      <title>Unbinding</title>

      <para>When a component configuration is deactivated, the bound services
      are unbound from the component configuration.</para>

      <para>When unbinding services, the references are processed in the
      reverse order in which they are specified in the component description.
      That is, target services from the last specified reference are unbound
      before services from the previous specified reference.</para>

      <para>If the reference uses the event strategy, the unbind method must
      be called for each bound service of that reference. If an unbind method
      throws an exception, SCR must log an error message containing the
      exception with the Log Service, if present, and the deactivation of the
      component configuration will continue. Then, if the reference uses the
      field strategy, the field must be set to <code>null</code>.</para>
    </section>

    <section>
      <title>Life Cycle Example</title>

      <para>A component could declare a dependency on the Http Service to
      register some resources.</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;scr:component name="example.binding"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
    &lt;implementation class="com.acme.impl.Binding"/&gt;
    &lt;reference name="LOG"
        interface="org.osgi.service.log.LogService"
        cardinality="1..1"
        policy="static"
    /&gt;   
    &lt;reference name="HTTP"
        interface="org.osgi.service.http.HttpService"
        cardinality="0..1"
        policy="dynamic"
        bind="setHttp"
        unbind="unsetHttp"
    /&gt;
&lt;/scr:component&gt;</programlisting>

      <para>The component implementation code looks like:</para>

      <programlisting>public class Binding {
    LogService  log;
    HttpService http;

    private void setHttp(HttpService h) {
        http = h;
        // register servlet
    }
    private void unsetHttp(HttpService h){
        if (http == h)
            http = null;
        // unregister servlet
    }
    private void activate(ComponentContext context ) {
        log = (LogService) context.locateService("LOG");
    }
    private void deactivate(ComponentContext context ) {...}
}</programlisting>

      <para>This example is depicted in a sequence diagram in <xref linkend="i1567615"/> with the following scenario:</para>

      <orderedlist>
        <listitem>
          <para>A bundle with the <code>example.Binding</code> component is
          started. At that time there is a Log Service <code>l1</code> and a
          Http Service <code>h1</code> registered.</para>
        </listitem>

        <listitem>
          <para>The Http Service <code>h1</code> is unregistered</para>
        </listitem>

        <listitem>
          <para>A new Http Service <code>h2</code> is registered</para>
        </listitem>

        <listitem>
          <para>The Log Service <code>h1</code> is unregistered.</para>
        </listitem>
      </orderedlist>

      <figure xml:id="i1567615">
        <title>Sequence Diagram for binding</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.062in" contentwidth="7.000in" fileref="binding-sequence.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section xml:id="service.component-component.properties">
    <title>Component Properties</title>

    <para>Each component configuration is associated with a set of component
    properties. The component properties are specified in the following
    <emphasis>configuration sources</emphasis> (in order of
    precedence):</para>

    <orderedlist>
      <listitem>
        <para>Properties specified in the argument of the
        <code>ComponentFactory.newInstance</code> method. This is only
        applicable for factory components.</para>
      </listitem>

      <listitem>
        <para>Properties retrieved from the OSGi Configuration Admin service
        in Configuration objects whose PID matches a <emphasis>configuration
        PID</emphasis>. The configuration PIDs are specified by the
        <code>configuration-pid</code> attribute of the <code>component</code>
        element. See <xref linkend="service.component-component.element"/>. If
        no <code>configuration-pid</code> attribute is specified, the
        component name is used as the default configuration PID. If multiple
        configuration PIDs are specified, the order of precedence follows the
        order the configuration PIDs are specified in the component
        description. That is, the precedence for the configuration for an
        earlier specified configuration PID is lower than the precedence for
        the configurations for a later specified configuration PID.</para>
      </listitem>

      <listitem>
        <para>Properties specified in the component description. Properties
        specified later in the component description override properties that
        have the same name specified earlier. Properties can be specified in
        the component description in the following ways:</para>

        <itemizedlist>
          <listitem>
            <para><code>target</code> attribute of <code>reference</code>
            elements - Sets the target property of the reference. See <xref linkend="service.component-target.property"/>. The value of the
            <code>target</code> attribute is used for the value of a target
            property.</para>
          </listitem>

          <listitem>
            <para><code>property</code> and <code>properties</code> elements -
            See <xref linkend="service.component-property.properties.elements"/>.</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </orderedlist>

    <para>The precedence behavior allows certain default values to be
    specified in the component description while allowing properties to be
    replaced and extended by:</para>

    <itemizedlist>
      <listitem>
        <para>A configuration in Configuration Admin</para>
      </listitem>

      <listitem>
        <para>The argument to the <code>ComponentFactory.newInstance</code>
        method</para>
      </listitem>
    </itemizedlist>

    <para>Normally, a property value from a higher precedence configuration
    source replace a property value from a lower precedence configuration
    source. However, the <code>service.pid</code> property values receive
    different treatment. For the <code>service.pid</code> property, if the
    property appears multiple times in the configuration sources, SCR must
    aggregate all the values found into a
    <code>Collection&lt;String&gt;</code> having an iteration order such that
    the first item in the iteration is the property value from the lowest
    precedence configuration source and the last item in the iteration is the
    property value from the highest precedence configuration source. If the
    component description specifies multiple configuration PIDs, then the
    order of the <code>service.pid</code> property values from the
    corresponding configurations matches the order the configuration PIDs are
    specified in the component description. The values of the
    <code>service.pid</code> component property are the values as they come
    from the configuration sources which, for Configuration objects, may be
    more detailed than the configuration PIDs specified in the component
    description.</para>

    <para>SCR always adds the following component properties, which cannot be
    overridden:</para>

    <itemizedlist>
      <listitem>
        <para><code>component.name</code> - The component name.</para>
      </listitem>

      <listitem>
        <para><code>component.id</code> - A unique value ( <code>Long</code>)
        that is larger than all previously assigned values. These values are
        not persistent across restarts of SCR.</para>
      </listitem>
    </itemizedlist>

    <section xml:id="i1629621">
      <title>Service Properties</title>

      <para>When SCR registers a service on behalf of a component
      configuration, SCR must follow the recommendations in <xref linkend="service.cm.propertypropagation"/> and must not propagate
      private configuration properties. That is, the service properties of the
      registered service must be all the component properties of the component
      configuration whose property names do not start with full stop
      (<code>'.' \u002E</code>).</para>

      <para>Component properties whose names start with full stop are
      available to the component instance but are not available as service
      properties of the registered service.</para>
    </section>

    <section>
      <title>Reference Properties</title>

      <para>This specification defines some component properties which are
      associated with specific component references. These are called
      <emphasis>reference properties</emphasis>. The name of a reference
      property for a reference is the name of the reference appended with a
      full stop (<code>'.' \u002E</code>) and a suffix unique to the reference
      property. Reference properties can be set wherever component properties
      can be set.</para>

      <para>All component property names starting with a reference name
      followed by a full stop (<code>'.' \u002E</code>) are reserved for use
      by this specification.</para>

      <para>Following are the reference properties defined by this
      specification.</para>

      <section xml:id="service.component-target.property">
        <title>Target Property</title>

        <para>The <emphasis>target property</emphasis> is a reference property
        which aids in the selection of target services for the reference. See
        <xref linkend="service.component-selecting.target.services"/>. The
        name of a target property is the name of a reference appended with
        <code>.target</code>. For example, the target property for a reference
        with the name <code>http</code> would have the name
        <code>http.target</code>. The value of a target property is a filter
        string used to select targets services for the reference.</para>

        <para>The target property for a reference can also be set by the
        <code>target</code> attribute of the <code>reference</code> element.
        See <xref linkend="service.component-reference.element"/>.</para>
      </section>

      <section xml:id="service.component-minimum.cardinality.property">
        <title>Minimum Cardinality Property</title>

        <para>The initial minimum cardinality of a reference is specified by
        the optionality: the first part of the cardinality. It is either
        <code>0</code> or <code>1</code>. The minimum cardinality of a
        reference cannot exceed the multiplicity: the second part of the
        cardinality. See <xref linkend="service.component-reference.cardinality"/> for more
        information on the cardinality of a reference.</para>

        <para>The <emphasis>minimum cardinality property</emphasis> is a
        reference property which can be used to raise the minimum cardinality
        of a reference from its initial value. That is, a <code>0..1</code>
        cardinality can be raised to a <code>1..1</code> cardinality by
        setting the reference's minimum cardinality property to
        <code>1</code>, and a <code>0..n</code> or <code>1..n</code>
        cardinality can be raised to a <code>m..n</code> cardinality by
        setting the reference's minimum cardinality property to <code>m</code>
        such that <code>m</code> is a positive integer. The minimum
        cardinality of a reference cannot be lowered. That is, a
        <code>1..1</code> or <code>1..n</code> cardinality can be lowered to a
        <code>0..1</code> or <code>0..n</code> cardinality because the
        component was coded to expect at least one bound service.</para>

        <para>The name of a minimum cardinality property is the name of a
        reference appended with <code>.cardinality.minimum</code>. For
        example, the minimum cardinality property for a reference with the
        name <code>http</code> would have the name
        <code>http.cardinality.minimum</code>. The value of a minimum
        cardinality property must be a positive integer or a value that can be
        coerced into a positive integer. See <xref linkend="service.component-component.property.value.coercion"/> for
        information on coercing property values. If the numerical value of the
        minimum cardinality property is not valid for the reference's
        cardinality or the minimum cardinality property value cannot be
        coerced into a numerical value, then the minimum cardinality property
        must be ignored.</para>

        <para>SCR must support the minimum cardinality property for all
        components even those with component descriptions in older
        namespaces.</para>
      </section>
    </section>
  </section>

  <section xml:id="service.component-deployment">
    <title>Deployment</title>

    <para>A component description contains default information to select
    target services for each reference. However, when a component is deployed,
    it is often necessary to influence the target service selection in a way
    that suits the needs of the deployer. Therefore, SCR uses
    <code>Configuration</code> objects from Configuration Admin to replace and
    extend the component properties for a component configuration. That is,
    through Configuration Admin, a deployer can configure component
    properties.</para>

    <para>A component's configuration PIDs are used as keys for obtaining
    additional component properties from Configuration Admin. When
    <emphasis>matching</emphasis> a configuration PID to a
    <code>Configuration</code> object, SCR must use the
    <code>Configuration</code> object with the best matching PID for the
    component's bundle. See <xref linkend="service.cm-targeted.pids"/> for
    more information on targeted PIDs and <xref linkend="service.cm-extenders.targeted.pids"/> for more information on
    selecting the <code>Configuration</code> object with the best matching
    PID.</para>

    <para>The following situations can arise when looking for
    <code>Configuration</code> objects:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>No Configuration</emphasis> - If the component's
        <code>configuration-policy</code> is set to <code>ignore</code> or
        there are no Configurations with a PID or factory PID matching any of
        the configuration PIDs, then component configurations will not obtain
        component properties from Configuration Admin. Only component
        properties specified in the component description or via the
        <code>ComponentFactory.newInstance</code> method will be used.</para>
      </listitem>

      <listitem>
        <para><emphasis>Not Satisfied</emphasis> - If the component's
        <code>configuration-policy</code> is set to <code>require</code> and,
        for each configuration PID, there is no Configuration with a matching
        PID or factory PID, then the component configuration is not satisfied
        and will not be activated.</para>
      </listitem>

      <listitem>
        <para><emphasis>Single Configuration</emphasis>s - If none of the
        configuration PIDs matches a factory PID, then component
        configurations will obtain additional component properties from
        Configuration Admin.</para>
      </listitem>

      <listitem>
        <para><emphasis>Factory Configuration</emphasis> - If one of the
        configuration PIDs matches a factory PID, with zero or more
        Configurations, then for each Configuration of the factory PID, a
        component configuration must be created that will obtain additional
        component properties from Configuration Admin.</para>

        <para>It is a configuration error if more than one of the
        configuration PIDs match a factory PID and SCR must log an error
        message with the Log Service, if present. If the
        <code>configuration-policy</code> is set to <code>optional</code>, the
        component configuration must be satisfied without the configurations
        PIDs which match a factory PID. If the
        <code>configuration-policy</code> is set to <code>require</code>, the
        component configuration is not satisfied and will not be
        activated.</para>

        <para>A factory configuration must not be used if the component is a
        factory component. This is because SCR is not free to create component
        configurations as necessary to support multiple Configurations. When
        SCR detects this condition, it must log an error message with the Log
        Service, if present, and ignore the component description.</para>
      </listitem>
    </itemizedlist>

    <para>SCR must obtain the <code>Configuration</code> objects from the
    Configuration Admin service using the Bundle Context of the bundle
    containing the component.</para>

    <para>For example, there is a component named <code>com.acme.client</code>
    with a reference named <code>HTTP</code> that requires an Http Service
    which must be bound to a component <code>com.acme.httpserver</code> which
    provides an Http Service. A deployer can establish the following
    configuration:</para>

    <programlisting>[PID=com.acme.client, factoryPID=null]
HTTP.target = (component.name=com.acme.httpserver)</programlisting>

    <section xml:id="i1649746">
      <title>Configuration Changes</title>

      <para>SCR must track changes in the <code>Configuration</code> objects
      matching the configuration PIDs of a component description. Changes
      include the creating, updating and deleting of
      <code>Configuration</code> objects matching the configuration PIDs. The
      actions SCR must take when a configuration change for a component
      configuration occurs are based upon how the
      <code>configuration-policy</code> and <code>modified</code> attributes
      are specified in the component description, whether a component
      configuration becomes satisfied, remains satisfied or becomes
      unsatisfied and the type and number of matching
      <code>Configuration</code> objects.</para>

      <para>With targeted PIDs, multiple <code>Configuration</code> objects
      can exist which can match a configuration PID. Creation of a
      <code>Configuration</code> object with a better matching PID than a
      <code>Configuration</code> object currently being used by a component
      configuration results in a configuration change for the component
      configuration with the new <code>Configuration</code> object replacing
      the currently used <code>Configuration</code> object. Deletion of a
      <code>Configuration</code> object currently being used by a component
      configuration when there is another <code>Configuration</code> object
      matching the configuration PID also results in a configuration change
      for the component configuration with the <code>Configuration</code>
      object having the best matching PID replacing the currently used, and
      now deleted, <code>Configuration</code> object.</para>

      <section>
        <title>Ignore Configuration Policy</title>

        <para>For <code>configuration-policy</code> of <code>ignore</code>,
        component configurations are unaffected by configuration changes since
        the component properties do not include properties from
        <code>Configuration</code> objects.</para>
      </section>

      <section>
        <title>Require Configuration Policy</title>

        <para>For <code>configuration-policy</code> of <code>require</code>,
        component configurations require a <code>Configuration</code> object
        for each specified configuration PID. With a factory configuration,
        there can be zero or more matching <code>Configuration</code> objects
        which will result in a component configuration for each
        <code>Configuration</code> object of the factory configuration. With a
        factory component, multiple component configurations can be created
        all using the matching <code>Configuration</code> objects.</para>

        <para>A configuration change can cause a component configuration to
        become unsatisfied if any of the following occur:</para>

        <itemizedlist>
          <listitem>
            <para>Each configuration PID of the component description does not
            have a matching <code>Configuration</code> object.</para>
          </listitem>

          <listitem>
            <para>A target property change results in a bound service of a
            static reference ceasing to be a target service.</para>
          </listitem>

          <listitem>
            <para>A target property change results in unbound target services
            for a static reference with the <code>greedy</code> policy
            option.</para>
          </listitem>

          <listitem>
            <para>A target property change or minimum cardinality property
            change results in a reference falling below the minimum
            cardinality.</para>
          </listitem>

          <listitem>
            <para>The component description does not specify the
            <code>modified</code> attribute.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Optional Configuration Policy</title>

        <para>For <code>configuration-policy</code> of <code>optional</code>,
        component configurations do not require <code>Configuration</code>
        objects. Since matching <code>Configuration</code> objects are
        optional, component configurations can be satisfied with zero or more
        matched configuration PIDs. If a <code>Configuration</code> object is
        then created which matches a configuration PID, this is a
        configuration change for the component configurations that are not
        using the created <code>Configuration</code> object. If a
        <code>Configuration</code> object is deleted which matches a
        configuration PID, this is a configuration change for the component
        configurations using the deleted <code>Configuration</code>
        object.</para>

        <para>Furthermore, with a factory configuration matching a
        configuration PID, the factory configuration can provide zero or more
        <code>Configuration</code> objects which will result in a component
        configuration for each <code>Configuration</code> object or a single
        component configuration when zero matching <code>Configuration</code>
        objects are provided. With a factory component, multiple component
        configurations can be created all using the <code>Configuration</code>
        objects matching the configuration PIDs.</para>

        <para>A configuration change can cause a component configuration to
        become unsatisfied if any of the following occur:</para>

        <itemizedlist>
          <listitem>
            <para>A target property change results in a bound service of a
            static reference ceasing to be a target service.</para>
          </listitem>

          <listitem>
            <para>A target property change results in unbound target services
            for a static reference with the <code>greedy</code> policy
            option.</para>
          </listitem>

          <listitem>
            <para>A target property change or minimum cardinality property
            change results in a reference falling below the minimum
            cardinality.</para>
          </listitem>

          <listitem>
            <para>The component description does not specify the
            <code>modified</code> attribute.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section xml:id="service.component-configuration.change.actions">
        <title>Configuration Change Actions</title>

        <para>If a component configuration becomes unsatisfied:</para>

        <itemizedlist>
          <listitem>
            <para>SCR must deactivate the component configuration.</para>
          </listitem>

          <listitem>
            <para>If the component configuration was not created from a
            factory component, SCR must attempt to satisfy the component
            configuration with the current configuration state.</para>
          </listitem>
        </itemizedlist>

        <para>If a component configuration remains satisfied:</para>

        <itemizedlist>
          <listitem>
            <para>If the component configuration has been activated, the
            modified method is called to provide the updated component
            properties. See <xref linkend="i1652198"/> for more
            information.</para>
          </listitem>

          <listitem>
            <para>If the component configuration is registered as a service,
            SCR must modify the service properties.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
  </section>

  <section xml:id="service.component-annotations">
    <title>Annotations</title>

    <para>A number of <code>CLASS</code> retention annotations have been
    provided to allow tools to construct the component description XML from
    the Java class files. The Component Annotations are intended to be used
    during build time to generate the component description XML.</para>

    <para>Component Property Types, which are user defined annotations, can be
    used to describe component properties in the component description XML and
    to access those component properties at runtime in a type safe
    manner.</para>

    <section xml:id="service.component-component.annotations">
      <title>Component Annotations</title>

      <para>The Component Annotations provide a convenient way to create the
      component description XML during build time. Since annotations are
      placed in the source file and can use types, fields, and methods, they
      can significantly simplify the use of Declarative Services.</para>

      <para>The Component Annotations are build time annotations because one
      of the key aspects of Declarative Services is its laziness. SCR can
      easily read the component description XML from the bundle, preprocess
      it, and cache the results between framework invocations. This way it is
      unnecessary to load a class from the bundle when the bundle is started
      and/or scan the classes for annotations. Component Annotations are not
      recognized by SCR at runtime.</para>

      <para>The Component Annotations are not inherited, they can only be used
      on a given class, annotations on its super class hierarchy or interfaces
      are not taken into account.</para>

      <para>The primary annotation is the <xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> annotation. It indicates that a class is a
      component. Its defaults create the easiest to use component:</para>

      <itemizedlist>
        <listitem>
          <para>Its name is the class name</para>
        </listitem>

        <listitem>
          <para>It registers all of the class's directly implemented
          interfaces as services</para>
        </listitem>

        <listitem>
          <para>The instance will be shared by all bundles</para>
        </listitem>

        <listitem>
          <para>It is enabled</para>
        </listitem>

        <listitem>
          <para>It is immediate if it has no services, otherwise it is
          delayed</para>
        </listitem>

        <listitem>
          <para>It has an optional configuration policy</para>
        </listitem>

        <listitem>
          <para>The configuration PID is the class name</para>
        </listitem>
      </itemizedlist>

      <para>For example, the following class registers a Speech service that
      can run on a Macintosh:</para>

      <programlisting>pubic interface Speech {
  void say(String what) throws Exception;
}

@Component
public class MacSpeech implements Speech {
    ScriptEngine engine = 
        new ScriptEngineManager().getEngineByName("AppleScript");
    
    public void say(String message) throws Exception {
        engine.eval("say \"" + message.replace('"','\'' + "\"");
    }
}</programlisting>

      <para>The previous example would be processed at build time into a
      component description similar to the following XML:</para>

      <programlisting>&lt;scr:component name="com.example.MacSpeech"
  xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"&gt;
  &lt;implementation class="com.acme.impl.MacSpeech"/&gt;
  &lt;service&gt;
    &lt;provide interface="com.acme.service.speech.Speech"/&gt;
  &lt;/service&gt;
&lt;/scr:component&gt;</programlisting>

      <para>It is possible to add activate and deactivate methods on the
      component with the <xref linkend="org.osgi.service.component.annotations.Activate" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.component.annotations.Deactivate" xrefstyle="hyperlink"/> annotations. If the component wants to be
      updated for changes in the configuration properties than it can also
      indicated the modified method with the <xref linkend="org.osgi.service.component.annotations.Modified" xrefstyle="hyperlink"/> annotation. For example:</para>

      <programlisting>@Activate
void open(Map&lt;String,?&gt; properties) { ... }

@Deactivate
void close() { ... }

@Modified
void modified(Map&lt;String,?&gt; properties) { ... }</programlisting>

      <para>If a component has dependencies on other services then they can be
      referenced with the <xref linkend="org.osgi.service.component.annotations.Reference" xrefstyle="hyperlink"/> annotation that can be applied to a bind method
      or a field. For a bind method, the defaults for the <xref linkend="org.osgi.service.component.annotations.Reference" xrefstyle="hyperlink"/> annotation are:</para>

      <itemizedlist>
        <listitem>
          <para>The name of the bind method or field is used for the name of
          the reference.</para>
        </listitem>

        <listitem>
          <para>1:1 cardinality.</para>
        </listitem>

        <listitem>
          <para>Static reluctant policy.</para>
        </listitem>

        <listitem>
          <para>The requested service is the type of the first argument of the
          bind method.</para>
        </listitem>

        <listitem>
          <para>It will infer a default unset method and updated method based
          on the name of the bind method.</para>
        </listitem>
      </itemizedlist>

      <para>For example:</para>

      <programlisting>@Reference(cardinality=MULTIPLE, policy=DYNAMIC)
void setLogService( LogService log, Map&lt;String,?&gt; props) { ... }
void unsetLogService( LogService log ) {  ... }
void updatedLogService( Map&lt;String,?&gt; map ) { ...}</programlisting>

      <para>For a field, the defaults for the <xref linkend="org.osgi.service.component.annotations.Reference" xrefstyle="hyperlink"/> annotation are:</para>

      <itemizedlist>
        <listitem>
          <para>The name of the bind method or field is used for the name of
          the reference.</para>
        </listitem>

        <listitem>
          <para>1:1 cardinality if the field is not a collection. 0..n
          cardinality if the field is a collection.</para>
        </listitem>

        <listitem>
          <para>Static reluctant policy if the field is not declared volatile.
          Dynamic reluctant policy if the field is declared volatile.</para>
        </listitem>

        <listitem>
          <para>The requested service is the type of the field.</para>
        </listitem>
      </itemizedlist>

      <para>For example:</para>

      <programlisting>@Reference
volatile Collection&lt;LogService&gt; log;</programlisting>
    </section>

    <section xml:id="service.component-component.property.types">
      <title>Component Property Types</title>

      <para>Component properties can be defined and accessed through a user
      defined annotation type, called a <emphasis>component property
      type</emphasis>, containing the property names, property types and
      default values. A component property type allows properties to be
      defined and accessed in a type safe manner. The following example shows
      the definition of a component property type called <code>Config</code>
      which defines three properties where the name of the property is the
      name of the method, the type of the property is the return type of the
      method and the default value for the property is the default value of
      the method.</para>

      <programlisting>@interface Config {
  boolean enabled() default true;
  String[] names() default {"a", "b"};
  String topic() default "default/topic";
}</programlisting>

      <para>Component property types can be referenced as argument types in
      the component's life cycle methods, activate, deactivate, and modified,
      and used in the method implementation to access component property
      values in a type safe manner. The following example shows the activate
      method taking the example <code>Config</code> component property type as
      an argument type and the method implementation accesses component
      property values by invoking methods on the component property type
      argument.</para>

      <programlisting>@Component
public class MyComponent {
  void activate(Config config) {
    if (config.enabled()) {
      // do something
    }
    for (String name:config.names()) {
      // do something with each name
    }
  }
}</programlisting>

      <para>If a component implementation needs to access component properties
      which are not represented by a component property type, it can use a
      life cycle method signature which also receives the properties map in
      addition to component property types. For example:</para>

      <programlisting>@Component
public class MyComponent {
  void activate(Config config, Map&lt;String, ?&gt; allProperties) {
    if (config.enabled()) {
      // do something
    }
    if (allProperties.get("other.prop") != null) {
      // do something
    }
  }
}</programlisting>

      <para>Component property types must be defined as annotation types even
      though they are not applied as annotations but are rather used as life
      cycle method argument types. This is done for two reasons. First, the
      limitations on annotation type definitions make them well suited for
      component property types. The methods must have no arguments and the
      return types supported are limited to a set which is well suited for
      component properties. Second, annotation types support default values
      which is useful for defining the default value of a component
      property.</para>

      <para>At build time, the component property types must be processed to
      potentially generate <code>property</code> elements in the component
      description. See <xref linkend="service.component-ordering.generated.properties"/>.</para>

      <para>At runtime, when SCR needs to call a lifecycle method on a
      component instance which takes an argument whose type is a component
      property type, SCR must construct an instance of the component property
      type whose methods are backed by the values of the component properties
      for the component instance. This object is then passed to the life cycle
      method which can use the object to obtain the property values in a type
      safe manner.</para>

      <section xml:id="service.component-component.property.mapping">
        <title>Component Property Mapping</title>

        <para>Each method of a configuration property type is mapped to a
        component property. The property name is derived from the method name.
        Certain common property name characters, such as full stop (<code>'.'
        \u002E</code>) are not valid in Java identifiers. So the name of a
        method must be converted to its corresponding property name as
        follows:<itemizedlist>
            <listitem>
              <para>A single dollar sign (<code>'$' \u0024</code>) is removed
              unless it is followed by another dollar sign in which case the
              two consecutive dollar signs (<code>"$$"</code>) are converted
              to a single dollar sign.</para>
            </listitem>

            <listitem>
              <para>A single low line (<code>'_' \u005F</code>) is converted
              into a full stop (<code>'.' \u002E</code>) unless is it followed
              by another low line in which case the two consecutive low lines
              (<code>"__"</code>) are converted to a single low line.</para>
            </listitem>

            <listitem>
              <para>All other characters are unchanged.</para>
            </listitem>
          </itemizedlist></para>

        <para><xref linkend="service.component-component.property.name.mapping"/> contains
        some name mapping examples.</para>

        <table xml:id="service.component-component.property.name.mapping">
          <title>Component Property Name Mapping Examples</title>

          <tgroup cols="2">
            <colspec colnum="1" colwidth="1*"/>

            <colspec colnum="2" colwidth="1*"/>

            <thead>
              <row>
                <entry>Component Property Type Method Name</entry>

                <entry>Component Property Name</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><code>myProperty143</code></entry>

                <entry><code>myProperty143</code></entry>
              </row>

              <row>
                <entry><code>$new</code></entry>

                <entry><code>new</code></entry>
              </row>

              <row>
                <entry><code>my$$prop</code></entry>

                <entry><code>my$prop</code></entry>
              </row>

              <row>
                <entry><code>dot_prop</code></entry>

                <entry><code>dot.prop</code></entry>
              </row>

              <row>
                <entry><code>_secret</code></entry>

                <entry><code>.secret</code></entry>
              </row>

              <row>
                <entry><code>another__prop</code></entry>

                <entry><code>another_prop</code></entry>
              </row>

              <row>
                <entry><code>three___prop</code></entry>

                <entry><code>three_.prop</code></entry>
              </row>

              <row>
                <entry><code>four_$__prop</code></entry>

                <entry><code>four._prop</code></entry>
              </row>

              <row>
                <entry><code>five_$_prop</code></entry>

                <entry><code>five..prop</code></entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>The property type can be directly derived from the type of the
        method. All types supported for annotation elements can be used except
        for annotation types. Method types of an annotation type or array
        thereof are not supported. A tool processing the component property
        types must declare an error during processing in this case.</para>

        <para>If the method type is <code>Class</code> or
        <code>Class[]</code>, then the property type must be
        <code>String</code> or <code>String[]</code>, respectively, whose
        values are fully qualified class names in the form returned by the
        <code>Class.getName()</code> method.</para>

        <para>If the method type is an enumeration type or an array thereof,
        then the property type must be <code>String</code> or
        <code>String[]</code>, respectively, whose values are the names of the
        enum constants in the form returned by the <code>Enum.name()</code>
        method.</para>
      </section>

      <section xml:id="service.component-component.property.value.coercion">
        <title>Coercing Component Property Values</title>

        <para>When a component property type is used as an argument for a life
        cycle method, SCR must create an object that implements the component
        property type and maps the methods of the component property type to
        component properties. The name of the method is converted to the
        property name as described in <xref linkend="service.component-component.property.mapping"/>. The property
        value may need to be coerced to the type of the method. In <xref linkend="service.component-coercion.table"/>, the columns are source
        types, that is, the type of the component property value, and the rows
        are target types, that is, the method types. The property value is
        <emphasis>v</emphasis>; <emphasis>number</emphasis> is a primitive
        numerical type and <emphasis>Number</emphasis> is a wrapper numerical
        type. An invalid coercion is represented by <code>throw</code>. Such a
        coercion attempt must result in throwing a Component Exception when
        the component property type method is called. Any other coercion
        error, such as parsing a non-numerical string to a number or the
        inability to coerce a string into a Class or enum object, must be
        wrapped in a Component Exception and thrown when the component
        property type method is called.</para>

        <table pgwide="1" rowheader="firstcol" xml:id="service.component-coercion.table">
          <title>Coercion From Property Value to Method Type</title>

          <tgroup cols="6">
            <colspec colname="col1" colnum="1" colwidth="1*"/>

            <colspec colname="col2" colnum="2" colwidth="1*"/>

            <colspec colname="col3" colnum="3" colwidth="1*"/>

            <colspec colname="col4" colnum="4" colwidth="1*"/>

            <colspec colname="col5" colnum="5" colwidth="1*"/>

            <colspec colname="col6" colnum="6" colwidth="2*"/>

            <thead>
              <row>
                <entry><subscript>target</subscript> \
                <superscript>source</superscript></entry>

                <entry>String</entry>

                <entry>Boolean</entry>

                <entry>Character</entry>

                <entry><emphasis>Number</emphasis></entry>

                <entry>Collection/array</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>String</entry>

                <entry><emphasis>v</emphasis></entry>

                <entry><emphasis>v</emphasis>. toString()</entry>

                <entry><emphasis>v</emphasis>. toString()</entry>

                <entry><emphasis>v</emphasis>. toString()</entry>

                <entry>If <emphasis>v</emphasis> has no elements,
                <code>null</code>; otherwise the first element of
                <emphasis>v</emphasis> is coerced.</entry>
              </row>

              <row>
                <entry>boolean</entry>

                <entry>Boolean. parseBoolean( <emphasis>v</emphasis> )</entry>

                <entry><emphasis>v</emphasis>. booleanValue()</entry>

                <entry><emphasis>v</emphasis>. charValue() != 0</entry>

                <entry><emphasis>v</emphasis>.
                <emphasis>number</emphasis>Value() != 0</entry>

                <entry>If <emphasis>v</emphasis> has no elements,
                <code>false</code>; otherwise the first element of
                <emphasis>v</emphasis> is coerced.</entry>
              </row>

              <row>
                <entry>char</entry>

                <entry><emphasis>v</emphasis>. length() &gt; 0 ?
                <emphasis>v</emphasis>. charAt(0) : 0</entry>

                <entry><emphasis>v</emphasis>. booleanValue() ? 1 : 0</entry>

                <entry><emphasis>v</emphasis>. charValue()</entry>

                <entry>(char) <emphasis>v</emphasis>.
                <emphasis>number</emphasis>Value()</entry>

                <entry>If <emphasis>v</emphasis> has no elements, 0; otherwise
                the first element of <emphasis>v</emphasis> is
                coerced.</entry>
              </row>

              <row>
                <entry><emphasis>number</emphasis></entry>

                <entry><emphasis>Number</emphasis>.
                parse<emphasis>Number</emphasis>( <emphasis>v</emphasis>
                )</entry>

                <entry><emphasis>v</emphasis>. booleanValue() ? 1 : 0</entry>

                <entry>(<emphasis>number</emphasis>) <emphasis>v</emphasis>.
                charValue()</entry>

                <entry><emphasis>v</emphasis>.
                <emphasis>number</emphasis>Value()</entry>

                <entry>If <emphasis>v</emphasis> has no elements, 0; otherwise
                the first element of <emphasis>v</emphasis> is
                coerced.</entry>
              </row>

              <row>
                <entry>Class</entry>

                <entry>Bundle. loadClass( <emphasis>v</emphasis> )</entry>

                <entry><code>throw</code></entry>

                <entry><code>throw</code></entry>

                <entry><code>throw</code></entry>

                <entry>If <emphasis>v</emphasis> has no elements,
                <code>null</code>; otherwise the first element of
                <emphasis>v</emphasis> is coerced.</entry>
              </row>

              <row>
                <entry><emphasis>EnumType</emphasis></entry>

                <entry><emphasis>EnumType</emphasis>. valueOf(
                <emphasis>v</emphasis> )</entry>

                <entry><code>throw</code></entry>

                <entry><code>throw</code></entry>

                <entry><code>throw</code></entry>

                <entry>If <emphasis>v</emphasis> has no elements,
                <code>null</code>; otherwise the first element of
                <emphasis>v</emphasis> is coerced.</entry>
              </row>

              <row>
                <entry>annotation type</entry>

                <entry><code>throw</code></entry>

                <entry><code>throw</code></entry>

                <entry><code>throw</code></entry>

                <entry><code>throw</code></entry>

                <entry><code>throw</code></entry>
              </row>

              <row>
                <entry>array</entry>

                <entry nameend="col5" namest="col2">A single element array is
                created and <emphasis>v</emphasis> is coerced into the single
                element of the new array.</entry>

                <entry colname="col6">An array the size of
                <emphasis>v</emphasis> is created and each element of
                <emphasis>v</emphasis> is coerced into the corresponding
                element of the new array.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>Component properties whose names do not map to component
        property type methods are ignored. If there is no corresponding
        component property for a component property type method, the component
        property type method must:</para>

        <itemizedlist>
          <listitem>
            <para>Return 0 for numerical and char method types.</para>
          </listitem>

          <listitem>
            <para>Return <code>false</code> for boolean method type.</para>
          </listitem>

          <listitem>
            <para>Return <code>null</code> for String, Class, enum and array
            method types.</para>
          </listitem>

          <listitem>
            <para>Throw a ComponentException for annotation method
            types.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section xml:id="service.component-ordering.generated.properties">
      <title>Ordering of Generated Properties</title>

      <para>The <xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> annotation contains two ways to define component
      properties via the <xref linkend="org.osgi.service.component.annotations.Component.property--" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.component.annotations.Component.properties--" xrefstyle="hyperlink"/> elements. See <xref linkend="service.component-property.properties.elements"/>. If Component
      Annotations are used to describe the component, then any component
      property types referenced in the signatures of the component's life
      cycle methods must also be processed since component property types can
      be used to define component property values as well. See <xref linkend="service.component-component.property.types"/>. A tool
      processing the Component Annotations and the component property types
      must write the defined component properties into the generated component
      description in the following order.</para>

      <orderedlist>
        <listitem>
          <para>Properties defined through component property types used in
          the signatures of the life cycle methods.</para>

          <para>If any of the referenced component property types have methods
          with defaults, then the generated component description must include
          a <code>property</code> element for each such method with the
          property name mapped from the method name, the property type mapped
          from the method type, and the property value set to the method's
          default value. See <xref linkend="service.component-component.property.mapping"/>. The
          generated <code>property</code> elements must be added to the
          component description by processing the component property types in
          the following order. First, the component property types used as
          arguments to the activate method, followed by the component property
          types used as arguments to the modified method and finally the
          component property types used as arguments to the deactivate method.
          If a method has more than one component property type argument, the
          component property types are processed in the order of the method
          arguments.</para>

          <para>For component property type methods without a default value, a
          <code>property</code> element must not be generated.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.component.annotations.Component.property--" xrefstyle="hyperlink"/> element of the <xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> annotation.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.component.annotations.Component.properties--" xrefstyle="hyperlink"/> element of the <xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> annotation.</para>
        </listitem>
      </orderedlist>

      <para>This means that the properties defined through component property
      types are declared first in the generated component description,
      followed by all properties defined through the <xref linkend="org.osgi.service.component.annotations.Component.property--" xrefstyle="hyperlink"/> element of the <xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> annotation and finally the properties entries
      defined through the <xref linkend="org.osgi.service.component.annotations.Component.properties--" xrefstyle="hyperlink"/> element of the <xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> annotation.</para>

      <para>Since property values defined later in the component description
      override property values defined earlier in the component description,
      this means that property values defined in <xref linkend="org.osgi.service.component.annotations.Component.properties--" xrefstyle="hyperlink"/> element of the <xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> annotation can override property values defined
      in <xref linkend="org.osgi.service.component.annotations.Component.property--" xrefstyle="hyperlink"/> element of the <xref linkend="org.osgi.service.component.annotations.Component" xrefstyle="hyperlink"/> annotation which can override values defined by
      default values in the component property types used in life cycle method
      signatures.</para>
    </section>
  </section>

  <section xml:id="i1578406">
    <title>Service Component Runtime</title>

    <para>Service Component Runtime (SCR) is the actor that manages the
    components and their life cycle and allows introspection of the
    components.</para>

    <section xml:id="i1616910">
      <title>Relationship to OSGi Framework</title>

      <para>SCR must have access to the Bundle Context of any bundle that
      contains a component. SCR needs access to the Bundle Context for the
      following reasons:</para>

      <itemizedlist>
        <listitem>
          <para>To be able to register and get services on behalf of a bundle
          with components.</para>
        </listitem>

        <listitem>
          <para>To interact with the Configuration Admin on behalf of a bundle
          with components.</para>
        </listitem>

        <listitem>
          <para>To provide a component its Bundle Context when the Component
          Context <code>getBundleContext</code> method is called.</para>
        </listitem>
      </itemizedlist>

      <para>SCR should use the <code>Bundle.getBundleContext()</code> method
      to obtain the Bundle Context reference.</para>
    </section>

    <section>
      <title>Starting and Stopping SCR</title>

      <para>When SCR is implemented as a bundle, any component configurations
      activated by SCR must be deactivated when the SCR bundle is stopped.
      When the SCR bundle is started, it must process any components that are
      declared in bundles that are started. This includes bundles which are
      started and are awaiting lazy activation.</para>
    </section>

    <section>
      <title>Logging Error Messages</title>

      <para>When SCR must log an error message to the Log Service, it must use
      a Log Service obtained using the component's Bundle Context so that the
      resulting Log Entry is associated with the component's bundle.</para>

      <para>If SCR is unable to obtain, or use, a Log Service using the
      component's Bundle Context, then SCR must log the error message to a Log
      Service obtained using SCR's bundle context to ensure the error message
      is logged.</para>
    </section>

    <section xml:id="i1641644">
      <title>Locating Component Methods and Fields</title>

      <para>SCR will need to locate activate, deactivate, modified, bind,
      updated, and unbind methods as well as fields in a component instance.
      These members will be located, and called or modified, using reflection.
      The declared members of each class in the component implementation
      class's hierarchy are examined for a suitable member. If a suitable
      member is found in a class, and it is accessible to the component
      implementation class, then that member must be used. If suitable members
      are found in a class but none of the suitable members are accessible by
      the component implementation class, then the search for suitable members
      terminates with no suitable member having been located. If no suitable
      members are found in a class, the search continues in the
      superclass.</para>

      <para>Only members that are accessible to the component implementation
      class will be used. If the member has the <code>public</code> or
      <code>protected</code> access modifier, then access is permitted.
      Otherwise, if the member has the <code>private</code> access modifier,
      then access is permitted only if the member is declared in the component
      implementation class. Otherwise, if the member has default access, also
      known as package private access, then access is permitted only if the
      member is declared in the component implementation class or if the
      member is declared in a superclass and all classes in the hierarchy from
      the component implementation class to the superclass, inclusive, are in
      the same package and loaded by the same class loader.</para>

      <para>It is recommended that these members should not be declared with
      the <code>public</code> access modifier so that they do not appear as
      public members on the component instance when it is used as a service
      object. Having these members declared <code>public</code> allows any
      code to call or access the members with reflection, even if a Security
      Manager is installed. These members are generally intended to only be
      called or modified by SCR.</para>
    </section>

    <section>
      <title>Bundle Activator Interaction</title>

      <para>A bundle containing components may also declare a Bundle
      Activator. Such a bundle may also be marked for lazy activation. Since
      components are activated by SCR and Bundle Activators are called by the
      OSGi Framework, a bundle using both components and a Bundle Activator
      must take care. The Bundle Activator's start method must not rely upon
      SCR having activated any of the bundle's components. However, the
      components can rely upon the Bundle Activator's start method having been
      called. That is, there is a <emphasis>happens-before</emphasis>
      relationship between the Bundle Activator's start method being run and
      the components being activated.</para>
    </section>

    <section xml:id="service.component-introspection">
      <title>Introspection</title>

      <para>SCR provides an introspection API for examining the runtime state
      of the components in bundles processed by SCR. SCR must register a <xref linkend="org.osgi.service.component.runtime.ServiceComponentRuntime" xrefstyle="hyperlink"/> service upon startup. The Service Component
      Runtime service provides methods to inspect the component descriptions
      and component configurations as well as inspect and modify the enabled
      state of components. The service uses <emphasis>Data Transfer Objects
      (DTO)</emphasis> as arguments and return values. The rules for Data
      Transfer Objects are specified in <xref linkend="intro.core.release" xrefstyle="template:%t"/>.</para>

      <para>The Service Component Runtime service provides the following
      methods.</para>

      <para><itemizedlist>
          <listitem>
            <para><xref linkend="org.osgi.service.component.runtime.ServiceComponentRuntime.getComponentDescriptionDTOs-Bundle...-" xrefstyle="hyperlink"/> - For each specified bundle, if the bundle
            is active and processed by SCR, the returned collection will
            contain a <xref linkend="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO" xrefstyle="hyperlink"/> for each valid component description in
            the bundle.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.component.runtime.ServiceComponentRuntime.getComponentDescriptionDTO-Bundle-String-" xrefstyle="hyperlink"/> - If the specified bundle is active and
            processed by SCR, and the specified bundle contains a valid
            component description with the specified name, the method will
            return a <xref linkend="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO" xrefstyle="hyperlink"/> for the component description.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.component.runtime.ServiceComponentRuntime.getComponentConfigurationDTOs-ComponentDescriptionDTO-" xrefstyle="hyperlink"/> - If the specified <xref linkend="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO" xrefstyle="hyperlink"/> represents a valid component description
            from an active bundle processed by SCR, the returned collection
            will contain a <xref linkend="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO" xrefstyle="hyperlink"/> for each component configuration of the
            component.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.component.runtime.ServiceComponentRuntime.isComponentEnabled-ComponentDescriptionDTO-" xrefstyle="hyperlink"/> - Returns <code>true</code> if the
            specified Component Description DTO represents a valid component
            description from an active bundle processed by SCR, and the
            component is enabled. Otherwise, the method returns
            <code>false</code>.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.component.runtime.ServiceComponentRuntime.enableComponent-ComponentDescriptionDTO-" xrefstyle="hyperlink"/> - If the specified Component Description
            DTO represents a valid component description from an active bundle
            processed by SCR, the component is enabled. This method must
            return after changing the enabled state of the specified
            component. Any actions that result from this, such as activating
            or deactivating a component configuration, must occur
            asynchronously to this method call. The method returns a <xref linkend="org.osgi.util.promise.Promise" xrefstyle="hyperlink"/>
            that will be resolved when the actions that result from changing
            the enabled state of the specified component have
            completed.</para>
          </listitem>

          <listitem>
            <para><xref linkend="org.osgi.service.component.runtime.ServiceComponentRuntime.disableComponent-ComponentDescriptionDTO-" xrefstyle="hyperlink"/> - If the specified Component Description
            DTO represents a valid component description from an active bundle
            processed by SCR, the component is disabled. This method must
            return after changing the enabled state of the specified
            component. Any actions that result from this, such as activating
            or deactivating a component configuration, must occur
            asynchronously to this method call. The method returns a <xref linkend="org.osgi.util.promise.Promise" xrefstyle="hyperlink"/>
            that will be resolved when the actions that result from changing
            the enabled state of the specified component have
            completed.</para>
          </listitem>
        </itemizedlist></para>

      <para>The runtime state of the components can change at any time. So any
      information returned by these methods only provides a snapshot of the
      state at the time of the method call.</para>

      <para>There are a number of DTOs available via the Service Component
      Runtime service.</para>

      <figure>
        <title>Service Component Runtime DTOs</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.500in" contentwidth="7.000in" fileref="dto-structure.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The two main DTOs are <xref linkend="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO" xrefstyle="hyperlink"/>, which represents a component description, and
      <xref linkend="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO" xrefstyle="hyperlink"/>, which represents a component configuration. The
      Component Description DTO contains an array of <xref linkend="org.osgi.service.component.runtime.dto.ReferenceDTO" xrefstyle="hyperlink"/> objects which represent each declared reference
      in the component description. The Component Configuration DTO contains
      an array of <xref linkend="org.osgi.service.component.runtime.dto.SatisfiedReferenceDTO" xrefstyle="hyperlink"/> objects and an array of <xref linkend="org.osgi.service.component.runtime.dto.UnsatisfiedReferenceDTO" xrefstyle="hyperlink"/> objects. A Satisfied Reference DTO represents a
      satisfied reference of the component configuration and an Unsatisfied
      Reference DTO represents an unsatisfied reference of the component
      configuration. The Component Configuration DTO for a satisfied component
      configuration must contain no Unsatisfied Reference DTOs. The Component
      Configuration DTO for an unsatisfied component configuration may contain
      some Satisfied Reference DTOs and some Unsatisfied Reference DTOs. This
      information can be used to diagnose why the component configuration is
      not satisfied.</para>
    </section>

    <section xml:id="service.component-capabilities">
      <title>Capabilities</title>

      <para>SCR must provide the following capabilities.</para>

      <itemizedlist>
        <listitem>
          <para>A capability in the <link linkend="service.namespaces-osgi.extender.namespace"><code>osgi.extender</code></link>
          namespace declaring an extender with the name <xref linkend="org.osgi.service.component.ComponentConstants.COMPONENT_CAPABILITY_NAME" xrefstyle="hyperlink"/>. This capability must also declare a uses
          constraint for the <code>org.osgi.service.component</code> package.
          For example:</para>

          <programlisting>Provide-Capability: osgi.extender;
    osgi.extender="osgi.component";
    version:Version="1.3";
    uses:="org.osgi.service.component"</programlisting>

          <para>This capability must follow the rules defined for the <xref linkend="service.namespaces-osgi.extender.namespace"/>.</para>

          <para>A bundle that contains service components should require the
          <code>osgi.extender</code> capability from SCR. This requirement
          will wire the bundle to the SCR implementation and ensure that SCR
          is using the same <code>org.osgi.service.component</code> package as
          the bundle if the bundle uses that package.</para>

          <programlisting>Require-Capability: osgi.extender;
  filter:="(&amp;(osgi.extender=osgi.component)(version&gt;=1.3)(!(version&gt;=2.0)))"</programlisting>

          <para>SCR must only process a bundle's service components if one of
          the following is true:</para>

          <itemizedlist>
            <listitem>
              <para>The bundle's wiring has a required wire for at least one
              <code>osgi.extender</code> capability with the name
              <code>osgi.component</code> and the first of these required
              wires is wired to SCR.</para>
            </listitem>

            <listitem>
              <para>The bundle's wiring has no required wire for an
              <code>osgi.extender</code> capability with the name
              <code>osgi.component</code>.</para>
            </listitem>
          </itemizedlist>

          <para>Otherwise, SCR must not process the bundle's service
          components.</para>
        </listitem>

        <listitem>
          <para>A capability in the <link linkend="service.namespaces-osgi.service.namespace"><code>osgi.service</code></link>
          namespace representing the <xref linkend="org.osgi.service.component.runtime.ServiceComponentRuntime" xrefstyle="hyperlink"/> service. This capability must also declare a
          uses constraint for the
          <code>org.osgi.service.component.runtime</code> package. For
          example:</para>

          <programlisting>Provide-Capability: osgi.service;
    objectClass:List&lt;String&gt;=
      "org.osgi.service.component.runtime.ServiceComponentRuntime";
    uses:="org.osgi.service.component.runtime"</programlisting>

          <para>This capability must follow the rules defined for the <xref linkend="service.namespaces-osgi.service.namespace"/>.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>When Java permissions are enabled, SCR must perform the following
    security procedures.</para>

    <section>
      <title>Service Permissions</title>

      <para>Declarative services are built upon the existing OSGi service
      infrastructure. This means that Service Permission applies regarding the
      ability to publish, find or bind services.</para>

      <para>If a component specifies a service, then component configurations
      for the component cannot be satisfied unless the component's bundle has
      <code>ServicePermission[&lt;provides&gt;, REGISTER]</code> for each
      provided interface specified for the service.</para>

      <para>If a component's reference does not specify optional cardinality,
      the reference cannot be satisfied unless the component's bundle has
      <code>ServicePermission[&lt;interface&gt;, GET]</code> for the specified
      interface in the reference. If the reference specifies optional
      cardinality but the component's bundle does not have
      <code>ServicePermission[&lt;interface&gt;, GET]</code> for the specified
      interface in the reference, no service must be bound for this
      reference.</para>

      <para>If a component is a factory component, then the above Service
      Permission checks still apply. But the component's bundle is not
      required to have <code>ServicePermission[ComponentFactory,
      REGISTER]</code> as the Component Factory service is registered by
      SCR.</para>

      <para>SCR must have <code>ServicePermission[ServiceComponentRuntime,
      REGISTER]</code> permission to register the <xref linkend="org.osgi.service.component.runtime.ServiceComponentRuntime" xrefstyle="hyperlink"/> service. Administrative bundles wishing to use
      the <xref linkend="org.osgi.service.component.runtime.ServiceComponentRuntime" xrefstyle="hyperlink"/> service must have
      <code>ServicePermission[ServiceComponentRuntime, GET]</code> permission.
      In general, this permission should only be granted to administrative
      bundles to limit access to the potentially intrusive methods provided by
      this service.</para>
    </section>

    <section xml:id="i1617328">
      <title>Required Admin Permission</title>

      <para>SCR requires <code>AdminPermission[*,CONTEXT]</code> because it
      needs access to the bundle's Bundle Context object with the
      <code>Bundle.getBundleContext()</code> method.</para>
    </section>

    <section>
      <title>Using hasPermission</title>

      <para>SCR does all publishing, finding and binding of services on behalf
      of the component using the Bundle Context of the component's bundle.
      This means that normal stack-based permission checks will check SCR and
      not the component's bundle. Since SCR is registering and getting
      services on behalf of a component's bundle, SCR must call the
      <code>Bundle.hasPermission</code> method to validate that a component's
      bundle has the necessary permission to register or get a service.</para>
    </section>

    <section xml:id="service.component-multi.location.regions">
      <title>Configuration Multi-Locations and Regions</title>

      <para>SCR must ensure a bundle has the proper
      <code>ConfigurationPermission</code> for a Configuration used by its
      components when the Configuration has a multi-location. See <xref linkend="service.cm-multi.locations"/> for more information on
      multi-locations and <xref linkend="service.cm-regions"/> for more
      information on regions. If a bundle does not have the necessary
      permission for a multi-location Configuration, then SCR must act as if
      the Configuration does not exist for the bundle.</para>
    </section>
  </section>

  <section xml:id="i1523991">
    <title>Component Description Schema</title>

    <para>This XML Schema defines the component description grammar.</para>

    <programlisting role="pgwide">&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"
    xmlns:scr="http://www.osgi.org/xmlns/scr/v1.3.0"
    targetNamespace="http://www.osgi.org/xmlns/scr/v1.3.0"
    elementFormDefault="unqualified"
    attributeFormDefault="unqualified"
    version="1.3.0"&gt;

    &lt;annotation&gt;
        &lt;documentation xml:lang="en"&gt;
            This is the XML Schema for component descriptions used by
            the Service Component Runtime (SCR). Component description
            documents may be embedded in other XML documents. SCR will
            process all XML documents listed in the Service-Component
            manifest header of a bundle. XML documents containing
            component descriptions may contain a single, root component
            element or one or more component elements embedded in a
            larger document. Use of the namespace for component 
            descriptions is mandatory. The attributes and subelements 
            of a component element are always unqualified.
        &lt;/documentation&gt;
    &lt;/annotation&gt;
    &lt;element name="component" type="scr:Tcomponent" /&gt;
    &lt;complexType name="Tcomponent"&gt;
        &lt;sequence&gt;
            &lt;annotation&gt;
                &lt;documentation xml:lang="en"&gt;
                    Implementations of SCR must not require component
                    descriptions to specify the subelements of the component
                    element in the order as required by the schema. SCR
                    implementations must allow other orderings since
                    arbitrary orderings do not affect the meaning of the
                    component description. Only the relative ordering of
                    property and properties element have meaning.
                &lt;/documentation&gt;
            &lt;/annotation&gt;
            &lt;choice minOccurs="0" maxOccurs="unbounded"&gt;
                &lt;element name="property" type="scr:Tproperty" /&gt;
                &lt;element name="properties" type="scr:Tproperties" /&gt;
            &lt;/choice&gt;
            &lt;element name="service" type="scr:Tservice" minOccurs="0"
                maxOccurs="1" /&gt;
            &lt;element name="reference" type="scr:Treference"
                minOccurs="0" maxOccurs="unbounded" /&gt;
            &lt;element name="implementation" type="scr:Timplementation" /&gt;
            &lt;any namespace="##any" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;attribute name="enabled" type="boolean" default="true"
            use="optional" /&gt;
        &lt;attribute name="name" type="token" use="optional"&gt;
            &lt;annotation&gt;
                &lt;documentation xml:lang="en"&gt;
                    The default value of this attribute is the value of
                    the class attribute of the nested implementation
                    element. If multiple component elements use the same 
                    value for the class attribute of their nested 
                    implementation element, then using the default value 
                    for this attribute will result in duplicate names. 
                    In this case, this attribute must be specified with 
                    a unique value.
                &lt;/documentation&gt;
            &lt;/annotation&gt;
        &lt;/attribute&gt;
        &lt;attribute name="factory" type="string" use="optional" /&gt;
        &lt;attribute name="immediate" type="boolean" use="optional" /&gt;
        &lt;attribute name="configuration-policy"
            type="scr:Tconfiguration-policy" default="optional" use="optional" /&gt;
        &lt;attribute name="activate" type="token" use="optional"
            default="activate" /&gt;
        &lt;attribute name="deactivate" type="token" use="optional"
            default="deactivate" /&gt;
        &lt;attribute name="modified" type="token" use="optional" /&gt;
        &lt;attribute name="configuration-pid" use="optional"&gt;
            &lt;annotation&gt;
                &lt;documentation xml:lang="en"&gt;
                    The default value of this attribute is the value of
                    the name attribute of this element.
                &lt;/documentation&gt;
            &lt;/annotation&gt;
            &lt;simpleType&gt;
                &lt;restriction&gt;
                    &lt;simpleType&gt;
                        &lt;list itemType="token" /&gt;
                    &lt;/simpleType&gt;
                    &lt;minLength value="1" /&gt;
                &lt;/restriction&gt;
            &lt;/simpleType&gt;
        &lt;/attribute&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;
    &lt;complexType name="Timplementation"&gt;
        &lt;sequence&gt;
            &lt;any namespace="##any" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;attribute name="class" type="token" use="required" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;
    &lt;complexType name="Tproperty"&gt;
        &lt;simpleContent&gt;
            &lt;extension base="string"&gt;
                &lt;attribute name="name" type="string" use="required" /&gt;
                &lt;attribute name="value" type="string" use="optional" /&gt;
                &lt;attribute name="type" type="scr:Tproperty_type"
                    default="String" use="optional" /&gt;
                &lt;anyAttribute processContents="lax" /&gt;
            &lt;/extension&gt;
        &lt;/simpleContent&gt;
    &lt;/complexType&gt;
    &lt;complexType name="Tproperties"&gt;
        &lt;sequence&gt;
            &lt;any namespace="##any" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;attribute name="entry" type="string" use="required" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;
    &lt;complexType name="Tservice"&gt;
        &lt;sequence&gt;
            &lt;element name="provide" type="scr:Tprovide" minOccurs="1"
                maxOccurs="unbounded" /&gt;
            &lt;!-- It is non-deterministic, per W3C XML Schema 1.0: 
            http://www.w3.org/TR/xmlschema-1/#cos-nonambig
            to use name space="##any" below. --&gt;
            &lt;any namespace="##other" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;attribute name="scope" type="scr:Tservice_scope" default="singleton"
            use="optional" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;
    &lt;complexType name="Tprovide"&gt;
        &lt;sequence&gt;
            &lt;any namespace="##any" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;attribute name="interface" type="token" use="required" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;
    &lt;complexType name="Treference"&gt;
        &lt;sequence&gt;
            &lt;any namespace="##any" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;attribute name="name" type="token" use="optional"&gt;
            &lt;annotation&gt;
                &lt;documentation xml:lang="en"&gt;
                    The default value of this attribute is the value of
                    the interface attribute of this element. If multiple 
                    instances of this element within a component element 
                    use the same value for the interface attribute, then 
                    using the default value for this attribute will result 
                    in duplicate names. In this case, this attribute 
                    must be specified with a unique value.
                &lt;/documentation&gt;
            &lt;/annotation&gt;
        &lt;/attribute&gt;
        &lt;attribute name="interface" type="token" use="required" /&gt;
        &lt;attribute name="cardinality" type="scr:Tcardinality"
            default="1..1" use="optional" /&gt;
        &lt;attribute name="policy" type="scr:Tpolicy" default="static"
            use="optional" /&gt;
        &lt;attribute name="policy-option" type="scr:Tpolicy-option" 
            default="reluctant" use="optional" /&gt;
        &lt;attribute name="target" type="string" use="optional" /&gt;
        &lt;attribute name="bind" type="token" use="optional" /&gt;
        &lt;attribute name="unbind" type="token" use="optional" /&gt;
        &lt;attribute name="updated" type="token" use="optional" /&gt;
        &lt;attribute name="scope" type="scr:Treference_scope" default="bundle"
            use="optional" /&gt;
        &lt;attribute name="field" type="token" use="optional" /&gt;
        &lt;attribute name="field-option" type="scr:Tfield-option" default="replace"
            use="optional" /&gt;
        &lt;attribute name="field-collection-type" type="scr:Tfield-collection-type"
            default="service" use="optional" /&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;
    &lt;simpleType name="Tproperty_type"&gt;
        &lt;restriction base="string"&gt;
            &lt;enumeration value="String" /&gt;
            &lt;enumeration value="Long" /&gt;
            &lt;enumeration value="Double" /&gt;
            &lt;enumeration value="Float" /&gt;
            &lt;enumeration value="Integer" /&gt;
            &lt;enumeration value="Byte" /&gt;
            &lt;enumeration value="Character" /&gt;
            &lt;enumeration value="Boolean" /&gt;
            &lt;enumeration value="Short" /&gt;
        &lt;/restriction&gt;
    &lt;/simpleType&gt;
    &lt;simpleType name="Tcardinality"&gt;
        &lt;restriction base="string"&gt;
            &lt;enumeration value="0..1" /&gt;
            &lt;enumeration value="0..n" /&gt;
            &lt;enumeration value="1..1" /&gt;
            &lt;enumeration value="1..n" /&gt;
        &lt;/restriction&gt;
    &lt;/simpleType&gt;
    &lt;simpleType name="Tpolicy"&gt;
        &lt;restriction base="string"&gt;
            &lt;enumeration value="static" /&gt;
            &lt;enumeration value="dynamic" /&gt;
        &lt;/restriction&gt;
    &lt;/simpleType&gt;
    &lt;simpleType name="Tpolicy-option"&gt;
        &lt;restriction base="string"&gt;
            &lt;enumeration value="reluctant" /&gt;
            &lt;enumeration value="greedy" /&gt;
        &lt;/restriction&gt;
    &lt;/simpleType&gt;
    &lt;simpleType name="Tconfiguration-policy"&gt;
        &lt;restriction base="string"&gt;
            &lt;enumeration value="optional" /&gt;
            &lt;enumeration value="require" /&gt;
            &lt;enumeration value="ignore" /&gt;
        &lt;/restriction&gt;
    &lt;/simpleType&gt;
    &lt;simpleType name="Tservice_scope"&gt;
        &lt;restriction base="string"&gt;
            &lt;enumeration value="singleton" /&gt;
            &lt;enumeration value="bundle" /&gt;
            &lt;enumeration value="prototype" /&gt;
        &lt;/restriction&gt;
    &lt;/simpleType&gt;
    &lt;simpleType name="Treference_scope"&gt;
        &lt;restriction base="string"&gt;
            &lt;enumeration value="bundle" /&gt;
            &lt;enumeration value="prototype" /&gt;
            &lt;enumeration value="prototype_required" /&gt;
        &lt;/restriction&gt;
    &lt;/simpleType&gt;
    &lt;simpleType name="Tfield-option"&gt;
        &lt;restriction base="string"&gt;
            &lt;enumeration value="replace" /&gt;
            &lt;enumeration value="update" /&gt;
        &lt;/restriction&gt;
    &lt;/simpleType&gt;
    &lt;simpleType name="Tfield-collection-type"&gt;
        &lt;restriction base="string"&gt;
            &lt;enumeration value="service" /&gt;
            &lt;enumeration value="properties" /&gt;
            &lt;enumeration value="reference" /&gt;
            &lt;enumeration value="serviceobjects" /&gt;
            &lt;enumeration value="tuple" /&gt;
        &lt;/restriction&gt;
    &lt;/simpleType&gt;
    &lt;attribute name="must-understand" type="boolean"&gt;
        &lt;annotation&gt;
            &lt;documentation xml:lang="en"&gt;
                This attribute should be used by extensions to documents
                to require that the document consumer understand the
                extension. This attribute must be qualified when used.
            &lt;/documentation&gt;
        &lt;/annotation&gt;
    &lt;/attribute&gt;
&lt;/schema&gt;
</programlisting>

    <para>SCR must not require component descriptions to specify the elements
    in the order required by the schema. SCR must allow other orderings since
    arbitrary orderings of these elements do not affect the meaning of the
    component description. Only the relative ordering of
    <code>property</code>, <code>properties</code> and <code>reference</code>
    elements have meaning for overriding previously set property
    values.</para>

    <para>The schema is also available in digital form from <xref linkend="i1655737"/>.</para>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.component" xml:id="org.osgi.service.component" xml:base="../../generated/javadoc/docbook/org.osgi.service.component.xml">
   <title>org.osgi.service.component</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.component-version">Version 1.3</releaseinfo>
      <edition xml:id="org.osgi.service.component-version.number">1.3</edition>
   </info>
   <para>
Service Component Package Version 1.3.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.component; version="[1.3,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.component; version="[1.3,1.4)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.ComponentConstants">
                  <code>ComponentConstants</code>
               </link> - 
Defines standard names for Service Component constants.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.ComponentContext">
                  <code>ComponentContext</code>
               </link> - 
A Component Context object is used by a component instance to interact with
 its execution context including locating services by reference name.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.ComponentException">
                  <code>ComponentException</code>
               </link> - 
Unchecked exception which may be thrown by Service Component Runtime.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.ComponentFactory">
                  <code>ComponentFactory</code>
               </link> - 
When a component is declared with the <code>factory</code> attribute on its
 <code>component</code> element, Service Component Runtime will register a
 Component Factory service to allow new component configurations to be created
 and activated rather than automatically creating and activating component
 configuration as necessary.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.ComponentInstance">
                  <code>ComponentInstance</code>
               </link> - 
A ComponentInstance encapsulates a component instance of an activated
 component configuration.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.ComponentServiceObjects">
                  <code>ComponentServiceObjects</code>
               </link> - 
Allows multiple service objects for a service to be obtained.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="ComponentConstants" xml:id="org.osgi.service.component.ComponentConstants">
      <title>public interface ComponentConstants</title>
      <para>
Defines standard names for Service Component constants.
   </para>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="field" xreflabel="COMPONENT_CAPABILITY_NAME" xml:id="org.osgi.service.component.ComponentConstants.COMPONENT_CAPABILITY_NAME">
         <title>public static final String COMPONENT_CAPABILITY_NAME = "osgi.component"</title>
         <para>
Capability name for Service Component Runtime.
 
 </para>
         <para>
 Used in <code>Provide-Capability</code> and <code>Require-Capability</code>
 manifest headers with the <code>osgi.extender</code> namespace. For example:
 
 </para>
         <programlisting> Require-Capability: osgi.extender;
  filter:="(&amp;(osgi.extender=osgi.component)(version&gt;=1.3)(!(version&gt;=2.0)))"</programlisting>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="COMPONENT_FACTORY" xml:id="org.osgi.service.component.ComponentConstants.COMPONENT_FACTORY">
         <title>public static final String COMPONENT_FACTORY = "component.factory"</title>
         <para>
A service registration property for a Component Factory that contains the
 value of the <code>factory</code> attribute. The value of this property must
 be of type <code>String</code>.
   </para>
      </section>
      <section role="field" xreflabel="COMPONENT_ID" xml:id="org.osgi.service.component.ComponentConstants.COMPONENT_ID">
         <title>public static final String COMPONENT_ID = "component.id"</title>
         <para>
A component property that contains the generated id for a component
 configuration. The value of this property must be of type <code>Long</code>.
 
 </para>
         <para>
 The value of this property is assigned by Service Component Runtime when
 a component configuration is created. Service Component Runtime assigns a
 unique value that is larger than all previously assigned values since
 Service Component Runtime was started. These values are NOT persistent
 across restarts of Service Component Runtime.</para>
      </section>
      <section role="field" xreflabel="COMPONENT_NAME" xml:id="org.osgi.service.component.ComponentConstants.COMPONENT_NAME">
         <title>public static final String COMPONENT_NAME = "component.name"</title>
         <para>
A component property for a component configuration that contains the name
 of the component as specified in the <code>name</code> attribute of the
 <code>component</code> element. The value of this property must be of type
 <code>String</code>.
   </para>
      </section>
      <section role="field" xreflabel="DEACTIVATION_REASON_BUNDLE_STOPPED" xml:id="org.osgi.service.component.ComponentConstants.DEACTIVATION_REASON_BUNDLE_STOPPED">
         <title>public static final int DEACTIVATION_REASON_BUNDLE_STOPPED = 6</title>
         <para>
The component configuration was deactivated because the bundle was
 stopped.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="DEACTIVATION_REASON_CONFIGURATION_DELETED" xml:id="org.osgi.service.component.ComponentConstants.DEACTIVATION_REASON_CONFIGURATION_DELETED">
         <title>public static final int DEACTIVATION_REASON_CONFIGURATION_DELETED = 4</title>
         <para>
The component configuration was deactivated because its configuration was
 deleted.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="DEACTIVATION_REASON_CONFIGURATION_MODIFIED" xml:id="org.osgi.service.component.ComponentConstants.DEACTIVATION_REASON_CONFIGURATION_MODIFIED">
         <title>public static final int DEACTIVATION_REASON_CONFIGURATION_MODIFIED = 3</title>
         <para>
The component configuration was deactivated because its configuration was
 changed.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="DEACTIVATION_REASON_DISABLED" xml:id="org.osgi.service.component.ComponentConstants.DEACTIVATION_REASON_DISABLED">
         <title>public static final int DEACTIVATION_REASON_DISABLED = 1</title>
         <para>
The component configuration was deactivated because the component was
 disabled.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="DEACTIVATION_REASON_DISPOSED" xml:id="org.osgi.service.component.ComponentConstants.DEACTIVATION_REASON_DISPOSED">
         <title>public static final int DEACTIVATION_REASON_DISPOSED = 5</title>
         <para>
The component configuration was deactivated because the component was
 disposed.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="DEACTIVATION_REASON_REFERENCE" xml:id="org.osgi.service.component.ComponentConstants.DEACTIVATION_REASON_REFERENCE">
         <title>public static final int DEACTIVATION_REASON_REFERENCE = 2</title>
         <para>
The component configuration was deactivated because a reference became
 unsatisfied.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="DEACTIVATION_REASON_UNSPECIFIED" xml:id="org.osgi.service.component.ComponentConstants.DEACTIVATION_REASON_UNSPECIFIED">
         <title>public static final int DEACTIVATION_REASON_UNSPECIFIED = 0</title>
         <para>
The reason the component configuration was deactivated is unspecified.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="REFERENCE_TARGET_SUFFIX" xml:id="org.osgi.service.component.ComponentConstants.REFERENCE_TARGET_SUFFIX">
         <title>public static final String REFERENCE_TARGET_SUFFIX = ".target"</title>
         <para>
The suffix for reference target properties. These properties contain the
 filter to select the target services for a reference. The value of this
 property must be of type <code>String</code>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_COMPONENT" xml:id="org.osgi.service.component.ComponentConstants.SERVICE_COMPONENT">
         <title>public static final String SERVICE_COMPONENT = "Service-Component"</title>
         <para>
Manifest header specifying the XML documents within a bundle that contain
 the bundle's Service Component descriptions.
 </para>
         <para>
 The attribute value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
      </section>
   </section>
   <section role="class" xreflabel="ComponentContext" xml:id="org.osgi.service.component.ComponentContext">
      <title>public interface ComponentContext</title>
      <para>
A Component Context object is used by a component instance to interact with
 its execution context including locating services by reference name. Each
 component instance has a unique Component Context.
 
 </para>
      <para>
 A component instance may obtain its Component Context object through its
 activate, modified, and deactivate methods.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="disableComponent(String)" xml:id="org.osgi.service.component.ComponentContext.disableComponent-String-">
         <title>public void disableComponent(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of a component.</para>
         </formalpara>
         <para role="description">
Disables the specified component name. The specified component name must
 be in the same bundle as this component.
 
 </para>
         <para>
 This method must return after changing the enabled state of the specified
 component name. Any actions that result from this, such as activating or
 deactivating a component configuration, must occur asynchronously to this
 method call.</para>
      </section>
      <section role="method" xreflabel="enableComponent(String)" xml:id="org.osgi.service.component.ComponentContext.enableComponent-String-">
         <title>public void enableComponent(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of a component or <code>null</code> to indicate all
        components in the bundle.</para>
         </formalpara>
         <para role="description">
Enables the specified component name. The specified component name must
 be in the same bundle as this component.
 
 </para>
         <para>
 This method must return after changing the enabled state of the specified
 component name. Any actions that result from this, such as activating or
 deactivating a component configuration, must occur asynchronously to this
 method call.</para>
      </section>
      <section role="method" xreflabel="getBundleContext()" xml:id="org.osgi.service.component.ComponentContext.getBundleContext--">
         <title>public BundleContext getBundleContext()</title>
         <para role="description">
Returns the <code>BundleContext</code> of the bundle which contains this
 component.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <code>BundleContext</code> of the bundle containing this
         component.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getComponentInstance()" xml:id="org.osgi.service.component.ComponentContext.getComponentInstance--">
         <title>public ComponentInstance getComponentInstance()</title>
         <para role="description">
Returns the Component Instance object for the component instance
 associated with this Component Context.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Component Instance object for the component instance.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getProperties()" xml:id="org.osgi.service.component.ComponentContext.getProperties--">
         <title>public Dictionary&lt;String,Object&gt; getProperties()</title>
         <para role="description">
Returns the component properties for this Component Context.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The properties for this Component Context. The Dictionary is read
         only and cannot be modified.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getServiceReference()" xml:id="org.osgi.service.component.ComponentContext.getServiceReference--">
         <title>public ServiceReference&lt;?&gt; getServiceReference()</title>
         <para role="description">
If the component instance is registered as a service using the
 <code>service</code> element, then this method returns the service reference
 of the service provided by this component instance.
 </para>
         <para>
 This method will return <code>null</code> if the component instance is not
 registered as a service.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <code>ServiceReference</code> object for the component instance or
         <code>null</code> if the component instance is not registered as a
         service.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getUsingBundle()" xml:id="org.osgi.service.component.ComponentContext.getUsingBundle--">
         <title>public Bundle getUsingBundle()</title>
         <para role="description">
If the component instance is registered as a service using the
 <code>servicescope="bundle"</code> or <code>servicescope="prototype"</code>
 attribute, then this method returns the bundle using the service provided
 by the component instance.
 </para>
         <para>
 This method will return <code>null</code> if:
 </para>
         <itemizedlist>
            <listitem>
               <para>The component instance is not a service, then no bundle can be using
 it as a service.</para>
            </listitem>
            <listitem>
               <para>The component instance is a service but did not specify the
 <code>servicescope="bundle"</code> or <code>servicescope="prototype"</code>
 attribute, then all bundles using the service provided by the component
 instance will share the same component instance.</para>
            </listitem>
            <listitem>
               <para>The service provided by the component instance is not currently being
 used by any bundle.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The bundle using the component instance as a service or
         <code>null</code>.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="locateService(String)" xml:id="org.osgi.service.component.ComponentContext.locateService-String-">
         <title>public Object locateService(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of a reference as specified in a <code>reference</code>
        element in this component's description.</para>
         </formalpara>
         <para role="description">
Returns the service object for the specified reference name.
 
 </para>
         <para>
 If the cardinality of the reference is <code>0..n</code> or <code>1..n</code> and
 multiple services are bound to the reference, the service with the
 highest ranking (as specified in its <code>Constants.SERVICE_RANKING</code>
 property) is returned. If there is a tie in ranking, the service with the
 lowest service id (as specified in its <code>Constants.SERVICE_ID</code>
 property); that is, the service that was registered first is returned.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A service object for the referenced service or <code>null</code> if
         the reference cardinality is <code>0..1</code> or <code>0..n</code> and no
         bound service is available.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ComponentException</code>– If Service Component Runtime catches an
         exception while activating the bound service.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="locateService(String,ServiceReference)" xml:id="org.osgi.service.component.ComponentContext.locateService-String-ServiceReference-">
         <title>public S locateService(String name,ServiceReference&lt;S&gt; reference)</title>
         <formalpara role="parameter">
            <title>Type Arguments</title>
            <para>
               <code>&lt;S&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;S&gt;</title>
            <para>Type of Service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of a reference as specified in a <code>reference</code>
        element in this component's description.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>reference</title>
            <para>The <code>ServiceReference</code> to a bound service. This
        must be a <code>ServiceReference</code> provided to the component via
        the bind or unbind method for the specified reference name.</para>
         </formalpara>
         <para role="description">
Returns the service object for the specified reference name and
 <code>ServiceReference</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A service object for the referenced service or <code>null</code> if
         the specified <code>ServiceReference</code> is not a bound service for
         the specified reference name.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ComponentException</code>– If Service Component Runtime catches an
         exception while activating the bound service.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="locateServices(String)" xml:id="org.osgi.service.component.ComponentContext.locateServices-String-">
         <title>public Object[] locateServices(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of a reference as specified in a <code>reference</code>
        element in this component's description.</para>
         </formalpara>
         <para role="description">
Returns the service objects for the specified reference name.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An array of service objects for the referenced service or
         <code>null</code> if the reference cardinality is <code>0..1</code> or
         <code>0..n</code> and no bound service is available. If the reference
         cardinality is <code>0..1</code> or <code>1..1</code> and a bound service
         is available, the array will have exactly one element.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ComponentException</code>– If Service Component Runtime catches an
         exception while activating a bound service.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ComponentException" xml:id="org.osgi.service.component.ComponentException">
      <title>public class ComponentException<?line-break?> extends RuntimeException</title>
      <para>
Unchecked exception which may be thrown by Service Component Runtime.
   </para>
      <section role="method" xreflabel="ComponentException(String,Throwable)" xml:id="org.osgi.service.component.ComponentException.ComponentException-String-Throwable-">
         <title>public  ComponentException(String message,Throwable cause)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The message for the exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of the exception. May be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Construct a new ComponentException with the specified message and cause.
   </para>
      </section>
      <section role="method" xreflabel="ComponentException(String)" xml:id="org.osgi.service.component.ComponentException.ComponentException-String-">
         <title>public  ComponentException(String message)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The message for the exception.</para>
         </formalpara>
         <para role="description">
Construct a new ComponentException with the specified message.
   </para>
      </section>
      <section role="method" xreflabel="ComponentException(Throwable)" xml:id="org.osgi.service.component.ComponentException.ComponentException-Throwable-">
         <title>public  ComponentException(Throwable cause)</title>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of the exception. May be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Construct a new ComponentException with the specified cause.
   </para>
      </section>
      <section role="method" xreflabel="getCause()" xml:id="org.osgi.service.component.ComponentException.getCause--">
         <title>public Throwable getCause()</title>
         <para role="description">
Returns the cause of this exception or <code>null</code> if no cause was set.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The cause of this exception or <code>null</code> if no cause was set.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="initCause(Throwable)" xml:id="org.osgi.service.component.ComponentException.initCause-Throwable-">
         <title>public Throwable initCause(Throwable cause)</title>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception.</para>
         </formalpara>
         <para role="description">
Initializes the cause of this exception to the specified value.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>This exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified cause is this
         exception.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the cause of this exception has already
         been set.   </para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="ComponentFactory" xml:id="org.osgi.service.component.ComponentFactory">
      <title>public interface ComponentFactory</title>
      <para>
When a component is declared with the <code>factory</code> attribute on its
 <code>component</code> element, Service Component Runtime will register a
 Component Factory service to allow new component configurations to be created
 and activated rather than automatically creating and activating component
 configuration as necessary.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="newInstance(Dictionary)" xml:id="org.osgi.service.component.ComponentFactory.newInstance-Dictionary-">
         <title>public ComponentInstance newInstance(Dictionary&lt;String,?&gt; properties)</title>
         <formalpara role="parameter">
            <title>properties</title>
            <para>Additional properties for the component configuration
        or <code>null</code> if there are no additional properties.</para>
         </formalpara>
         <para role="description">
Create and activate a new component configuration. Additional properties
 may be provided for the component configuration.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>ComponentInstance</code> object encapsulating the component
         instance of the component configuration. The component
         configuration has been activated and, if the component specifies
         a <code>service</code> element, the component instance has been
         registered as a service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ComponentException</code>– If Service Component Runtime is unable to
         activate the component configuration.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ComponentInstance" xml:id="org.osgi.service.component.ComponentInstance">
      <title>public interface ComponentInstance</title>
      <para>
A ComponentInstance encapsulates a component instance of an activated
 component configuration. ComponentInstances are created whenever a component
 configuration is activated.
 
 </para>
      <para>
 ComponentInstances are never reused. A new ComponentInstance object will be
 created when the component configuration is activated again.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="dispose()" xml:id="org.osgi.service.component.ComponentInstance.dispose--">
         <title>public void dispose()</title>
         <para role="description">
Dispose of the component configuration for this component instance. The
 component configuration will be deactivated. If the component
 configuration has already been deactivated, this method does nothing.
   </para>
      </section>
      <section role="method" xreflabel="getInstance()" xml:id="org.osgi.service.component.ComponentInstance.getInstance--">
         <title>public Object getInstance()</title>
         <para role="description">
Returns the component instance of the activated component configuration.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The component instance or <code>null</code> if the component
         configuration has been deactivated.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ComponentServiceObjects" xml:id="org.osgi.service.component.ComponentServiceObjects">
      <title>public interface ComponentServiceObjects&lt;S&gt;</title>
      <formalpara role="parameter">
         <title>&lt;S&gt;</title>
         <para>Type of Service</para>
      </formalpara>
      <para>
Allows multiple service objects for a service to be obtained.
 
 </para>
      <para>
 A component instance can receive a <code>ComponentServiceObjects</code> object via
 a reference that is typed <code>ComponentServiceObjects</code>.
 
 </para>
      <para>
 For services with <link linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE">prototype</link> scope, multiple
 service objects for the service can be obtained. For services with
 <link linkend="org.osgi.framework.Constants.SCOPE_SINGLETON">singleton</link> or <link linkend="org.osgi.framework.Constants.SCOPE_BUNDLE">bundle</link> scope, only one, use-counted service object is available.
 
 </para>
      <para>
 Any unreleased service objects obtained from this
 <code>ComponentServiceObjects</code> object are automatically released by Service
 Component Runtime when the service becomes unbound.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.framework.ServiceObjects">ServiceObjects</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="getService()" xml:id="org.osgi.service.component.ComponentServiceObjects.getService--">
         <title>public S getService()</title>
         <para role="description">
Returns a service object for the <link linkend="org.osgi.service.component.ComponentServiceObjects.getServiceReference--">associated</link> service.
 
 </para>
         <para>
 This method will always return <code>null</code> when the associated service
 has been become unbound.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A service object for the associated service or <code>null</code> if
         the service is unbound, the customized service object returned by
         a <code>ServiceFactory</code> does not implement the classes under
         which it was registered or the <code>ServiceFactory</code> threw an
         exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the associated service has been become
         unbound.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.component.ComponentServiceObjects.ungetService-S-">ungetService(Object)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getServiceReference()" xml:id="org.osgi.service.component.ComponentServiceObjects.getServiceReference--">
         <title>public ServiceReference&lt;S&gt; getServiceReference()</title>
         <para role="description">
Returns the <link linkend="org.osgi.framework.ServiceReference">ServiceReference</link> for the service associated with this
 <code>ComponentServiceObjects</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <link linkend="org.osgi.framework.ServiceReference">ServiceReference</link> for the service associated with this
         <code>ComponentServiceObjects</code> object.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="ungetService(S)" xml:id="org.osgi.service.component.ComponentServiceObjects.ungetService-S-">
         <title>public void ungetService(S service)</title>
         <formalpara role="parameter">
            <title>service</title>
            <para>A service object previously provided by this
        <code>ComponentServiceObjects</code> object.</para>
         </formalpara>
         <para role="description">
Releases a service object for the <link linkend="org.osgi.service.component.ComponentServiceObjects.getServiceReference--">associated</link> service.
 
 </para>
         <para>
 The specified service object must no longer be used and all references to
 it should be destroyed after calling this method.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the associated service has been become
         unbound.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified service object was not
         provided by this <code>ComponentServiceObjects</code> object.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.component.ComponentServiceObjects.getService--">getService()</link>
            </para>
         </formalpara>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.service.component.annotations" xml:id="org.osgi.service.component.annotations" xml:base="../../generated/javadoc/docbook/org.osgi.service.component.annotations.xml">
   <title>org.osgi.service.component.annotations</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.component.annotations-version">Version 1.3</releaseinfo>
      <edition xml:id="org.osgi.service.component.annotations-version.number">1.3</edition>
   </info>
   <para>
Service Component Annotations Package Version 1.3.

 </para>
   <para>
 This package is not used at runtime. Annotated classes are processed by
 tools to generate Component Descriptions which are used at runtime.</para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.Activate">
                  <code>Activate</code>
               </link> - 
Identify the annotated method as the <code>activate</code> method of a Service
 Component.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.Component">
                  <code>Component</code>
               </link> - 
Identify the annotated class as a Service Component.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.ConfigurationPolicy">
                  <code>ConfigurationPolicy</code>
               </link> - 
Configuration Policy for the <link linkend="org.osgi.service.component.annotations.Component">Component</link> annotation.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.Deactivate">
                  <code>Deactivate</code>
               </link> - 
Identify the annotated method as the <code>deactivate</code> method of a Service
 Component.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.FieldOption">
                  <code>FieldOption</code>
               </link> - 
Field options for the <link linkend="org.osgi.service.component.annotations.Reference">Reference</link> annotation.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.Modified">
                  <code>Modified</code>
               </link> - 
Identify the annotated method as the <code>modified</code> method of a Service
 Component.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.Reference">
                  <code>Reference</code>
               </link> - 
Identify the annotated member as a reference of a Service Component.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.ReferenceCardinality">
                  <code>ReferenceCardinality</code>
               </link> - 
Cardinality for the <link linkend="org.osgi.service.component.annotations.Reference">Reference</link> annotation.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.ReferencePolicy">
                  <code>ReferencePolicy</code>
               </link> - 
Policy for the <link linkend="org.osgi.service.component.annotations.Reference">Reference</link> annotation.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.ReferencePolicyOption">
                  <code>ReferencePolicyOption</code>
               </link> - 
Policy option for the <link linkend="org.osgi.service.component.annotations.Reference">Reference</link> annotation.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.ReferenceScope">
                  <code>ReferenceScope</code>
               </link> - 
Reference scope for the <link linkend="org.osgi.service.component.annotations.Reference">Reference</link> annotation.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.annotations.ServiceScope">
                  <code>ServiceScope</code>
               </link> - 
Service scope for the <link linkend="org.osgi.service.component.annotations.Component">Component</link> annotation.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="Activate" xml:id="org.osgi.service.component.annotations.Activate">
      <title>@Activate</title>
      <para>
Identify the annotated method as the <code>activate</code> method of a Service
 Component.
 
 </para>
      <para>
 The annotated method is the activate method of the Component.
 
 </para>
      <para>
 This annotation is not processed at runtime by Service Component Runtime. It
 must be processed by tools and used to add a Component Description to the
 bundle.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <code>The activate attribute of the component element of a Component Description.</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>METHOD</code>
         </para>
      </formalpara>
   </section>
   <section role="class" xreflabel="Component" xml:id="org.osgi.service.component.annotations.Component">
      <title>@Component</title>
      <para>
Identify the annotated class as a Service Component.
 
 </para>
      <para>
 The annotated class is the implementation class of the Component.
 
 </para>
      <para>
 This annotation is not processed at runtime by Service Component Runtime. It
 must be processed by tools and used to add a Component Description to the
 bundle.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <code>The component element of a Component Description.</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>TYPE</code>
         </para>
      </formalpara>
      <section role="method" xreflabel="name" xml:id="org.osgi.service.component.annotations.Component.name--">
         <title>String name default ""</title>
         <para role="description">
The name of this Component.
 
 </para>
         <para>
 If not specified, the name of this Component is the fully qualified type
 name of the class being annotated.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The name attribute of the component element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="service" xml:id="org.osgi.service.component.annotations.Component.service--">
         <title>Class&lt;?&gt;[] service default {}</title>
         <para role="description">
The types under which to register this Component as a service.
 
 </para>
         <para>
 If no service should be registered, the empty value
 <code>{}</code> must be specified.
 
 </para>
         <para>
 If not specified, the service types for this Component are all the
 <emphasis>directly</emphasis> implemented interfaces of the class being annotated.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The service element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="factory" xml:id="org.osgi.service.component.annotations.Component.factory--">
         <title>String factory default ""</title>
         <para role="description">
The factory identifier of this Component. Specifying a factory identifier
 makes this Component a Factory Component.
 
 </para>
         <para>
 If not specified, the default is that this Component is not a Factory
 Component.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The factory attribute of the component element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="servicefactory" xml:id="org.osgi.service.component.annotations.Component.servicefactory--">
         <title>boolean servicefactory default false</title>
         <para role="description">
Declares whether this Component uses the OSGi ServiceFactory concept and
 each bundle using this Component's service will receive a different
 component instance.
 
 </para>
         <para>
 This element is ignored when the <link linkend="org.osgi.service.component.annotations.Component.scope--">scope()</link> element does not have
 the default value. If <code>true</code>, this Component uses
 <link linkend="org.osgi.service.component.annotations.ServiceScope.BUNDLE">bundle</link> service scope. If <code>false</code> or not
 specified, this Component uses <link linkend="org.osgi.service.component.annotations.ServiceScope.SINGLETON">singleton</link>
 service scope. If the <link linkend="org.osgi.service.component.annotations.Component.factory--">factory()</link> element is specified or the
 <link linkend="org.osgi.service.component.annotations.Component.immediate--">immediate()</link> element is specified with <code>true</code>, this element
 can only be specified with <code>false</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The scope attribute of the service element of a Component Description.</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>Since 1.3. Replaced by <link linkend="org.osgi.service.component.annotations.Component.scope--">scope()</link>.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="enabled" xml:id="org.osgi.service.component.annotations.Component.enabled--">
         <title>boolean enabled default true</title>
         <para role="description">
Declares whether this Component is enabled when the bundle containing it
 is started.
 
 </para>
         <para>
 If <code>true</code> or not specified, this Component is enabled. If
 <code>false</code>, this Component is disabled.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The enabled attribute of the component element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="immediate" xml:id="org.osgi.service.component.annotations.Component.immediate--">
         <title>boolean immediate default false</title>
         <para role="description">
Declares whether this Component must be immediately activated upon
 becoming satisfied or whether activation should be delayed.
 
 </para>
         <para>
 If <code>true</code>, this Component must be immediately activated upon
 becoming satisfied. If <code>false</code>, activation of this Component is
 delayed. If this property is specified, its value must be <code>false</code>
 if the <link linkend="org.osgi.service.component.annotations.Component.factory--">factory()</link> property is also specified or must be
 <code>true</code> if the <link linkend="org.osgi.service.component.annotations.Component.service--">service()</link> property is specified with an
 empty value.
 
 </para>
         <para>
 If not specified, the default is <code>false</code> if the <link linkend="org.osgi.service.component.annotations.Component.factory--">factory()</link>
 property is specified or the <link linkend="org.osgi.service.component.annotations.Component.service--">service()</link> property is not specified
 or specified with a non-empty value and <code>true</code> otherwise.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The immediate attribute of the component element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="property" xml:id="org.osgi.service.component.annotations.Component.property--">
         <title>String[] property default {}</title>
         <para role="description">
Properties for this Component.
 
 </para>
         <para>
 Each property string is specified as <code>"name=value"</code>. The type of
 the property value can be specified in the name as
 <code>name:type=value</code>. The type must be one of the property types
 supported by the type attribute of the property element of a Component
 Description.
 
 </para>
         <para>
 To specify a property with multiple values, use multiple name, value
 pairs. For example, <code>"foo=bar", "foo=baz"</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The property element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="properties" xml:id="org.osgi.service.component.annotations.Component.properties--">
         <title>String[] properties default {}</title>
         <para role="description">
Property entries for this Component.
 
 </para>
         <para>
 Specifies the name of an entry in the bundle whose contents conform to a
 standard Java Properties File. The entry is read and processed to obtain
 the properties and their values.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The properties element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="xmlns" xml:id="org.osgi.service.component.annotations.Component.xmlns--">
         <title>String xmlns default ""</title>
         <para role="description">
The XML name space of the Component Description for this Component.
 
 </para>
         <para>
 If not specified, the XML name space of the Component Description for
 this Component should be the lowest Declarative Services XML name space
 which supports all the specification features used by this Component.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The XML name space specified for a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="configurationPolicy" xml:id="org.osgi.service.component.annotations.Component.configurationPolicy--">
         <title>ConfigurationPolicy configurationPolicy default OPTIONAL</title>
         <para role="description">
The configuration policy of this Component.
 
 </para>
         <para>
 Controls whether component configurations must be satisfied depending on
 the presence of a corresponding Configuration object in the OSGi
 Configuration Admin service. A corresponding configuration is a
 Configuration object where the PID equals the name of the component.
 
 </para>
         <para>
 If not specified, the configuration policy is based upon whether the
 component is also annotated with the Meta Type
 <link linkend="org.osgi.service.metatype.annotations.Designate">Designate</link>
 annotation.
 </para>
         <itemizedlist>
            <listitem>
               <para>Not annotated with <code>Designate</code> - The configuration policy is
 <link linkend="org.osgi.service.component.annotations.ConfigurationPolicy.OPTIONAL">OPTIONAL</link>.</para>
            </listitem>
            <listitem>
               <para>Annotated with <code>Designate(factory=false)</code> - The configuration
 policy is <link linkend="org.osgi.service.component.annotations.ConfigurationPolicy.OPTIONAL">OPTIONAL</link>.</para>
            </listitem>
            <listitem>
               <para>Annotated with <code>Designate(factory=true)</code> - The configuration
 policy is <link linkend="org.osgi.service.component.annotations.ConfigurationPolicy.REQUIRE">REQUIRE</link>.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The configuration-policy attribute of the component element of a Component Description.</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="configurationPid" xml:id="org.osgi.service.component.annotations.Component.configurationPid--">
         <title>String[] configurationPid default "$"</title>
         <para role="description">
The configuration PIDs for the configuration of this Component.
 
 </para>
         <para>
 Each value specifies a configuration PID for this Component.
 
 </para>
         <para>
 If no value is specified, the name of this Component is used as the
 configuration PID of this Component.
 
 </para>
         <para>
 A special string (<code>"$"</code>) can be used to specify the
 name of the component as a configuration PID. The <code>NAME</code> constant
 holds this special string. For example:
 
 </para>
         <programlisting> @Component(configurationPid={"com.acme.system", Component.NAME})</programlisting>
         <para>
 
 Tools creating a Component Description from this annotation must replace
 the special string with the actual name of this Component.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The configuration-pid attribute of the component element of a Component Description.</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="scope" xml:id="org.osgi.service.component.annotations.Component.scope--">
         <title>ServiceScope scope default DEFAULT</title>
         <para role="description">
The service scope for the service of this Component.
 
 </para>
         <para>
 If not specified (and the deprecated <link linkend="org.osgi.service.component.annotations.Component.servicefactory--">servicefactory()</link> element is
 not specified), the <link linkend="org.osgi.service.component.annotations.ServiceScope.SINGLETON">singleton</link> service
 scope is used. If the <link linkend="org.osgi.service.component.annotations.Component.factory--">factory()</link> element is specified or the
 <link linkend="org.osgi.service.component.annotations.Component.immediate--">immediate()</link> element is specified with <code>true</code>, this element
 can only be specified with the <link linkend="org.osgi.service.component.annotations.ServiceScope.SINGLETON">singleton</link>
 service scope.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The scope attribute of the service element of a Component Description.</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="reference" xml:id="org.osgi.service.component.annotations.Component.reference--">
         <title>Reference[] reference default {}</title>
         <para role="description">
The lookup strategy references of this Component.
 
 </para>
         <para>
 To access references using the lookup strategy, <link linkend="org.osgi.service.component.annotations.Reference">Reference</link>
 annotations are specified naming the reference and declaring the type of
 the referenced service. The referenced service can be accessed using one
 of the <code>locateService</code> methods of <code>ComponentContext</code>.
 
 </para>
         <para>
 To access references using the event strategy, bind methods are annotated
 with <link linkend="org.osgi.service.component.annotations.Reference">Reference</link>. To access references using the field strategy,
 fields are annotated with <link linkend="org.osgi.service.component.annotations.Reference">Reference</link>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The reference element of a Component Description.</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="NAME" xml:id="org.osgi.service.component.annotations.Component.NAME">
         <title>String NAME = "$"</title>
         <para>
Special string representing the name of this Component.
 
 </para>
         <para>
 This string can be used in <link linkend="org.osgi.service.component.annotations.Component.configurationPid--">configurationPid()</link> to specify the
 name of the component as a configuration PID. For example:
 
 </para>
         <programlisting> @Component(configurationPid={"com.acme.system", Component.NAME})</programlisting>
         <para>
 
 Tools creating a Component Description from this annotation must replace
 the special string with the actual name of this Component.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ConfigurationPolicy" xml:id="org.osgi.service.component.annotations.ConfigurationPolicy">
      <title>enum ConfigurationPolicy</title>
      <para>
Configuration Policy for the <link linkend="org.osgi.service.component.annotations.Component">Component</link> annotation.
 
 </para>
      <para>
 Controls whether component configurations must be satisfied depending on the
 presence of a corresponding Configuration object in the OSGi Configuration
 Admin service. A corresponding configuration is a Configuration object where
 the PID is the name of the component.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <section role="field" xreflabel="OPTIONAL" xml:id="org.osgi.service.component.annotations.ConfigurationPolicy.OPTIONAL">
         <title>OPTIONAL</title>
         <para>
Use the corresponding Configuration object if present but allow the
 component to be satisfied even if the corresponding Configuration object
 is not present.
   </para>
      </section>
      <section role="field" xreflabel="REQUIRE" xml:id="org.osgi.service.component.annotations.ConfigurationPolicy.REQUIRE">
         <title>REQUIRE</title>
         <para>
There must be a corresponding Configuration object for the component
 configuration to become satisfied.
   </para>
      </section>
      <section role="field" xreflabel="IGNORE" xml:id="org.osgi.service.component.annotations.ConfigurationPolicy.IGNORE">
         <title>IGNORE</title>
         <para>
Always allow the component configuration to be satisfied and do not use
 the corresponding Configuration object even if it is present.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="Deactivate" xml:id="org.osgi.service.component.annotations.Deactivate">
      <title>@Deactivate</title>
      <para>
Identify the annotated method as the <code>deactivate</code> method of a Service
 Component.
 
 </para>
      <para>
 The annotated method is the deactivate method of the Component.
 
 </para>
      <para>
 This annotation is not processed at runtime by Service Component Runtime. It
 must be processed by tools and used to add a Component Description to the
 bundle.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <code>The deactivate attribute of the component element of a Component Description.</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>METHOD</code>
         </para>
      </formalpara>
   </section>
   <section role="class" xreflabel="FieldOption" xml:id="org.osgi.service.component.annotations.FieldOption">
      <title>enum FieldOption</title>
      <para>
Field options for the <link linkend="org.osgi.service.component.annotations.Reference">Reference</link> annotation.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <section role="field" xreflabel="UPDATE" xml:id="org.osgi.service.component.annotations.FieldOption.UPDATE">
         <title>UPDATE</title>
         <para>
The update field option is used to update the collection referenced by
 the field when there are changes to the bound services.
 
 </para>
         <para>
 This field option can only be used when the field reference has dynamic
 policy and multiple cardinality.</para>
      </section>
      <section role="field" xreflabel="REPLACE" xml:id="org.osgi.service.component.annotations.FieldOption.REPLACE">
         <title>REPLACE</title>
         <para>
The replace field option is used to replace the field value with a new
 value when there are changes to the bound services.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="Modified" xml:id="org.osgi.service.component.annotations.Modified">
      <title>@Modified</title>
      <para>
Identify the annotated method as the <code>modified</code> method of a Service
 Component.
 
 </para>
      <para>
 The annotated method is the modified method of the Component.
 
 </para>
      <para>
 This annotation is not processed at runtime by Service Component Runtime. It
 must be processed by tools and used to add a Component Description to the
 bundle.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <code>The modified attribute of the component element of a Component Description.</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>METHOD</code>
         </para>
      </formalpara>
   </section>
   <section role="class" xreflabel="Reference" xml:id="org.osgi.service.component.annotations.Reference">
      <title>@Reference</title>
      <para>
Identify the annotated member as a reference of a Service Component.
 
 </para>
      <para>
 When the annotation is applied to a method, the method is the bind method of
 the reference. When the annotation is applied to a field, the field will
 contain the bound service(s) of the reference.
 
 </para>
      <para>
 This annotation is not processed at runtime by Service Component Runtime. It
 must be processed by tools and used to add a Component Description to the
 bundle.
 
 </para>
      <para>
 In the generated Component Description for a component, the references must
 be ordered in ascending lexicographical order (using <code>String.compareTo</code>
 ) of the reference <link linkend="org.osgi.service.component.annotations.Reference.name--">name</link>s.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <code>The reference element of a Component Description.</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>METHOD</code>, <code>FIELD</code>
         </para>
      </formalpara>
      <section role="method" xreflabel="name" xml:id="org.osgi.service.component.annotations.Reference.name--">
         <title>String name default ""</title>
         <para role="description">
The name of this reference.
 
 </para>
         <para>
 The name of this reference must be specified when using this annotation
 in the <link linkend="org.osgi.service.component.annotations.Component.reference--">Component.reference()</link> element since there is no annotated
 member from which the name can be determined.
 
 If not specified, the name of this reference is based upon how this
 annotation is used:
 </para>
         <itemizedlist>
            <listitem>
               <para>Annotated method - If the method name begins with <code>bind</code>,
 <code>set</code> or <code>add</code>, that prefix is removed to create the name of
 the reference. Otherwise, the name of the reference is the method name.</para>
            </listitem>
            <listitem>
               <para>Annotated field - The name of the reference is the field name.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The name attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="service" xml:id="org.osgi.service.component.annotations.Reference.service--">
         <title>Class&lt;?&gt; service default Object.class</title>
         <para role="description">
The type of the service for this reference.
 
 </para>
         <para>
 The type of the service for this reference must be specified when using
 this annotation in the <link linkend="org.osgi.service.component.annotations.Component.reference--">Component.reference()</link> element since there
 is no annotated member from which the type of the service can be
 determined.
 
 </para>
         <para>
 If not specified, the type of the service for this reference is based
 upon how this annotation is used:
 </para>
         <itemizedlist>
            <listitem>
               <para>Annotated method - The type of the service is the type of the first
 argument of the method.</para>
            </listitem>
            <listitem>
               <para>Annotated field - The type of the service is based upon the type of
 the field being annotated and the cardinality of the reference. If the
 cardinality is either <link linkend="org.osgi.service.component.annotations.ReferenceCardinality.MULTIPLE">0..n</link>, or
 <link linkend="org.osgi.service.component.annotations.ReferenceCardinality.AT_LEAST_ONE">1..n</link>, the type of the field
 must be one of <code>java.util.Collection</code>, <code>java.util.List</code>, or a
 subtype of <code>java.util.Collection</code> so the type of the service is the
 generic type of the collection. Otherwise, the type of the service is the
 type of the field.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The interface attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="cardinality" xml:id="org.osgi.service.component.annotations.Reference.cardinality--">
         <title>ReferenceCardinality cardinality default MANDATORY</title>
         <para role="description">
The cardinality of this reference.
 
 </para>
         <para>
 If not specified, the cardinality of this reference is based upon how
 this annotation is used:
 </para>
         <itemizedlist>
            <listitem>
               <para>Annotated method - The cardinality is
 <link linkend="org.osgi.service.component.annotations.ReferenceCardinality.MANDATORY">1..1</link>.</para>
            </listitem>
            <listitem>
               <para>Annotated field - The cardinality is based on the type of the field.
 If the type is either <code>java.util.Collection</code>,
 <code>java.util.List</code>, or a subtype of <code>java.util.Collection</code>, the
 cardinality is <link linkend="org.osgi.service.component.annotations.ReferenceCardinality.MULTIPLE">0..n</link>. Otherwise the
 cardinality is <link linkend="org.osgi.service.component.annotations.ReferenceCardinality.MANDATORY">1..1</link>.</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.component.annotations.Component.reference--">Component.reference()</link> element - The cardinality is
 <link linkend="org.osgi.service.component.annotations.ReferenceCardinality.MANDATORY">1..1</link>.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The cardinality attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="policy" xml:id="org.osgi.service.component.annotations.Reference.policy--">
         <title>ReferencePolicy policy default STATIC</title>
         <para role="description">
The policy for this reference.
 
 </para>
         <para>
 If not specified, the policy of this reference is based upon how this
 annotation is used:
 </para>
         <itemizedlist>
            <listitem>
               <para>Annotated method - The policy is <link linkend="org.osgi.service.component.annotations.ReferencePolicy.STATIC">STATIC</link>.</para>
            </listitem>
            <listitem>
               <para>Annotated field - The policy is based on the modifiers of the field.
 If the field is declared <code>volatile</code>, the policy is
 <link linkend="org.osgi.service.component.annotations.ReferencePolicy.DYNAMIC">ReferencePolicy.DYNAMIC</link>. Otherwise the policy is
 <link linkend="org.osgi.service.component.annotations.ReferencePolicy.STATIC">STATIC</link>.</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.component.annotations.Component.reference--">Component.reference()</link> element - The policy is
 <link linkend="org.osgi.service.component.annotations.ReferencePolicy.STATIC">STATIC</link>.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The policy attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="target" xml:id="org.osgi.service.component.annotations.Reference.target--">
         <title>String target default ""</title>
         <para role="description">
The target property for this reference.
 
 </para>
         <para>
 If not specified, no target property is set.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The target attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="policyOption" xml:id="org.osgi.service.component.annotations.Reference.policyOption--">
         <title>ReferencePolicyOption policyOption default RELUCTANT</title>
         <para role="description">
The policy option for this reference.
 
 </para>
         <para>
 If not specified, the <link linkend="org.osgi.service.component.annotations.ReferencePolicyOption.RELUCTANT">RELUCTANT</link>
 reference policy option is used.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The policy-option attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="scope" xml:id="org.osgi.service.component.annotations.Reference.scope--">
         <title>ReferenceScope scope default BUNDLE</title>
         <para role="description">
The reference scope for this reference.
 
 </para>
         <para>
 If not specified, the <link linkend="org.osgi.service.component.annotations.ReferenceScope.BUNDLE">bundle</link> reference
 scope is used.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The scope attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="bind" xml:id="org.osgi.service.component.annotations.Reference.bind--">
         <title>String bind default ""</title>
         <para role="description">
The name of the bind method for this reference.
 
 </para>
         <para>
 If specified and this reference annotates a method, the specified name
 must match the name of the annotated method.
 
 </para>
         <para>
 If not specified, the name of the bind method is based upon how this
 annotation is used:
 </para>
         <itemizedlist>
            <listitem>
               <para>Annotated method - The name of the annotated method is the name of
 the bind method.</para>
            </listitem>
            <listitem>
               <para>Annotated field - There is no bind method name.</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.component.annotations.Component.reference--">Component.reference()</link> element - There is no bind method name.
 </para>
            </listitem>
         </itemizedlist>
         <para>
 If there is a bind method name, the component must contain a method with
 that name.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The bind attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="updated" xml:id="org.osgi.service.component.annotations.Reference.updated--">
         <title>String updated default ""</title>
         <para role="description">
The name of the updated method for this reference.
 
 </para>
         <para>
 If not specified, the name of the updated method is based upon how this
 annotation is used:
 </para>
         <itemizedlist>
            <listitem>
               <para>Annotated method - The name of the updated method is created from the
 name of the annotated method. If the name of the annotated method begins
 with <code>bind</code>, <code>set</code> or <code>add</code>, that prefix is replaced
 with <code>updated</code> to create the name candidate for the updated method.
 Otherwise, <code>updated</code> is prefixed to the name of the annotated
 method to create the name candidate for the updated method. If the
 component type contains a method with the candidate name, the candidate
 name is used as the name of the updated method. To declare no updated
 method when the component type contains a method with the candidate name,
 the value <code>"-"</code> must be used.</para>
            </listitem>
            <listitem>
               <para>Annotated field - There is no updated method name.</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.component.annotations.Component.reference--">Component.reference()</link> element - There is no updated method
 name.</para>
            </listitem>
         </itemizedlist>
         <para>
 If there is an updated method name, the component must contain a method
 with that name.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The updated attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="unbind" xml:id="org.osgi.service.component.annotations.Reference.unbind--">
         <title>String unbind default ""</title>
         <para role="description">
The name of the unbind method for this reference.
 
 </para>
         <para>
 If not specified, the name of the unbind method is based upon how this
 annotation is used:
 </para>
         <itemizedlist>
            <listitem>
               <para>Annotated method - The name of the unbind method is created from the
 name of the annotated method. If the name of the annotated method begins
 with <code>bind</code>, <code>set</code> or <code>add</code>, that prefix is replaced
 with <code>unbind</code>, <code>unset</code> or <code>remove</code>, respectively, to
 create the name candidate for the unbind method. Otherwise, <code>un</code> is
 prefixed to the name of the annotated method to create the name candidate
 for the unbind method. If the component type contains a method with the
 candidate name, the candidate name is used as the name of the unbind
 method. To declare no unbind method when the component type contains a
 method with the candidate name, the value <code>"-"</code> must be used.</para>
            </listitem>
            <listitem>
               <para>Annotated field - There is no unbind method name.</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.component.annotations.Component.reference--">Component.reference()</link> element - There is no unbind method
 name.</para>
            </listitem>
         </itemizedlist>
         <para>
 If there is an unbind method name, the component must contain a method
 with that name.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The unbind attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="field" xml:id="org.osgi.service.component.annotations.Reference.field--">
         <title>String field default ""</title>
         <para role="description">
The name of the field for this reference.
 
 </para>
         <para>
 If specified and this reference annotates a field, the specified name
 must match the name of the annotated field.
 
 </para>
         <para>
 If not specified, the name of the field is based upon how this annotation
 is used:
 </para>
         <itemizedlist>
            <listitem>
               <para>Annotated method - There is no field name.</para>
            </listitem>
            <listitem>
               <para>Annotated field - The name of the annotated field is the name of the
 field.</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.component.annotations.Component.reference--">Component.reference()</link> element - There is no field name.</para>
            </listitem>
         </itemizedlist>
         <para>
 If there is a field name, the component must contain a field with that
 name.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The field attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="fieldOption" xml:id="org.osgi.service.component.annotations.Reference.fieldOption--">
         <title>FieldOption fieldOption default REPLACE</title>
         <para role="description">
The field option for this reference.
 
 </para>
         <para>
 If not specified, the field option is based upon how this annotation is
 used:
 </para>
         <itemizedlist>
            <listitem>
               <para>Annotated method - There is no field option.</para>
            </listitem>
            <listitem>
               <para>Annotated field - The field option is based upon the policy and
 cardinality of the reference and the modifiers of the field. If the
 policy is <link linkend="org.osgi.service.component.annotations.ReferencePolicy.DYNAMIC">ReferencePolicy.DYNAMIC</link>, the cardinality is
 <link linkend="org.osgi.service.component.annotations.ReferenceCardinality.MULTIPLE">0..n</link> or
 <link linkend="org.osgi.service.component.annotations.ReferenceCardinality.AT_LEAST_ONE">1..n</link>, and the field is declared
 <code>final</code>, the field option is <link linkend="org.osgi.service.component.annotations.FieldOption.UPDATE">FieldOption.UPDATE</link>. Otherwise,
 the field option is <link linkend="org.osgi.service.component.annotations.FieldOption.REPLACE">FieldOption.REPLACE</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.component.annotations.Component.reference--">Component.reference()</link> element - There is no field option.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The field-option attribute of the reference element of a Component Description.</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ReferenceCardinality" xml:id="org.osgi.service.component.annotations.ReferenceCardinality">
      <title>enum ReferenceCardinality</title>
      <para>
Cardinality for the <link linkend="org.osgi.service.component.annotations.Reference">Reference</link> annotation.
 
 </para>
      <para>
 Specifies if the reference is optional and if the component implementation
 support a single bound service or multiple bound services.</para>
      <section role="field" xreflabel="OPTIONAL" xml:id="org.osgi.service.component.annotations.ReferenceCardinality.OPTIONAL">
         <title>OPTIONAL</title>
         <para>
The reference is optional and unary. That is, the reference has a
 cardinality of <code>0..1</code>.
   </para>
      </section>
      <section role="field" xreflabel="MANDATORY" xml:id="org.osgi.service.component.annotations.ReferenceCardinality.MANDATORY">
         <title>MANDATORY</title>
         <para>
The reference is mandatory and unary. That is, the reference has a
 cardinality of <code>1..1</code>.
   </para>
      </section>
      <section role="field" xreflabel="MULTIPLE" xml:id="org.osgi.service.component.annotations.ReferenceCardinality.MULTIPLE">
         <title>MULTIPLE</title>
         <para>
The reference is optional and multiple. That is, the reference has a
 cardinality of <code>0..n</code>.
   </para>
      </section>
      <section role="field" xreflabel="AT_LEAST_ONE" xml:id="org.osgi.service.component.annotations.ReferenceCardinality.AT_LEAST_ONE">
         <title>AT_LEAST_ONE</title>
         <para>
The reference is mandatory and multiple. That is, the reference has a
 cardinality of <code>1..n</code>.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="ReferencePolicy" xml:id="org.osgi.service.component.annotations.ReferencePolicy">
      <title>enum ReferencePolicy</title>
      <para>
Policy for the <link linkend="org.osgi.service.component.annotations.Reference">Reference</link> annotation.
   </para>
      <section role="field" xreflabel="STATIC" xml:id="org.osgi.service.component.annotations.ReferencePolicy.STATIC">
         <title>STATIC</title>
         <para>
The static policy is the most simple policy and is the default policy. A
 component instance never sees any of the dynamics. Component
 configurations are deactivated before any bound service for a reference
 having a static policy becomes unavailable. If a target service is
 available to replace the bound service which became unavailable, the
 component configuration must be reactivated and bound to the replacement
 service.
   </para>
      </section>
      <section role="field" xreflabel="DYNAMIC" xml:id="org.osgi.service.component.annotations.ReferencePolicy.DYNAMIC">
         <title>DYNAMIC</title>
         <para>
The dynamic policy is slightly more complex since the component
 implementation must properly handle changes in the set of bound services.
 With the dynamic policy, SCR can change the set of bound services without
 deactivating a component configuration. If the component uses the event
 strategy to access services, then the component instance will be notified
 of changes in the set of bound services by calls to the bind and unbind
 methods.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="ReferencePolicyOption" xml:id="org.osgi.service.component.annotations.ReferencePolicyOption">
      <title>enum ReferencePolicyOption</title>
      <para>
Policy option for the <link linkend="org.osgi.service.component.annotations.Reference">Reference</link> annotation.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.2</para>
      </formalpara>
      <section role="field" xreflabel="RELUCTANT" xml:id="org.osgi.service.component.annotations.ReferencePolicyOption.RELUCTANT">
         <title>RELUCTANT</title>
         <para>
The reluctant policy option is the default policy option for both
 <link linkend="org.osgi.service.component.annotations.ReferencePolicy.STATIC">static</link> and <link linkend="org.osgi.service.component.annotations.ReferencePolicy.DYNAMIC">dynamic</link> reference policies. When a new target service for a reference
 becomes available, references having the reluctant policy option for the
 static policy or the dynamic policy with a unary cardinality will ignore
 the new target service. References having the dynamic policy with a
 multiple cardinality will bind the new target service.
   </para>
      </section>
      <section role="field" xreflabel="GREEDY" xml:id="org.osgi.service.component.annotations.ReferencePolicyOption.GREEDY">
         <title>GREEDY</title>
         <para>
The greedy policy option is a valid policy option for both
 <link linkend="org.osgi.service.component.annotations.ReferencePolicy.STATIC">static</link> and <link linkend="org.osgi.service.component.annotations.ReferencePolicy.DYNAMIC">dynamic</link> reference policies. When a new target service for a reference
 becomes available, references having the greedy policy option will bind
 the new target service.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="ReferenceScope" xml:id="org.osgi.service.component.annotations.ReferenceScope">
      <title>enum ReferenceScope</title>
      <para>
Reference scope for the <link linkend="org.osgi.service.component.annotations.Reference">Reference</link> annotation.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <section role="field" xreflabel="BUNDLE" xml:id="org.osgi.service.component.annotations.ReferenceScope.BUNDLE">
         <title>BUNDLE</title>
         <para>
A single service object is used for all references to the service in this
 bundle.
   </para>
      </section>
      <section role="field" xreflabel="PROTOTYPE" xml:id="org.osgi.service.component.annotations.ReferenceScope.PROTOTYPE">
         <title>PROTOTYPE</title>
         <para>
If the bound service has prototype service scope, then each instance of
 the component with this reference can receive a unique instance of the
 service. If the bound service does not have prototype service scope, then
 this reference scope behaves the same as <link linkend="org.osgi.service.component.annotations.ReferenceScope.BUNDLE">BUNDLE</link>.
   </para>
      </section>
      <section role="field" xreflabel="PROTOTYPE_REQUIRED" xml:id="org.osgi.service.component.annotations.ReferenceScope.PROTOTYPE_REQUIRED">
         <title>PROTOTYPE_REQUIRED</title>
         <para>
Bound services must have prototype service scope. Each instance of the
 component with this reference can receive a unique instance of the
 service.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="ServiceScope" xml:id="org.osgi.service.component.annotations.ServiceScope">
      <title>enum ServiceScope</title>
      <para>
Service scope for the <link linkend="org.osgi.service.component.annotations.Component">Component</link> annotation.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <section role="field" xreflabel="SINGLETON" xml:id="org.osgi.service.component.annotations.ServiceScope.SINGLETON">
         <title>SINGLETON</title>
         <para>
When the component is registered as a service, it must be registered as a
 bundle scope service but only a single instance of the component must be
 used for all bundles using the service.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE" xml:id="org.osgi.service.component.annotations.ServiceScope.BUNDLE">
         <title>BUNDLE</title>
         <para>
When the component is registered as a service, it must be registered as a
 bundle scope service and an instance of the component must be created for
 each bundle using the service.
   </para>
      </section>
      <section role="field" xreflabel="PROTOTYPE" xml:id="org.osgi.service.component.annotations.ServiceScope.PROTOTYPE">
         <title>PROTOTYPE</title>
         <para>
When the component is registered as a service, it must be registered as a
 prototype scope service and an instance of the component must be created
 for each distinct request for the service.
   </para>
      </section>
      <section role="field" xreflabel="DEFAULT" xml:id="org.osgi.service.component.annotations.ServiceScope.DEFAULT">
         <title>DEFAULT</title>
         <para>
Default element value for annotation. This is used to distinguish the
 default value for an element and should not otherwise be used.
   </para>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.service.component.runtime" xml:id="org.osgi.service.component.runtime" xml:base="../../generated/javadoc/docbook/org.osgi.service.component.runtime.xml">
   <title>org.osgi.service.component.runtime</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.component.runtime-version">Version 1.3</releaseinfo>
      <edition xml:id="org.osgi.service.component.runtime-version.number">1.3</edition>
   </info>
   <para>
Service Component Runtime Package Version 1.3.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.component.runtime; version="[1.3,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.component.runtime; version="[1.3,1.4)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.runtime.ServiceComponentRuntime">
                  <code>ServiceComponentRuntime</code>
               </link> - 
The <code>ServiceComponentRuntime</code> service represents the Declarative
 Services actor, known as Service Component Runtime (SCR), that manages the
 service components and their life cycle.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="ServiceComponentRuntime" xml:id="org.osgi.service.component.runtime.ServiceComponentRuntime">
      <title>public interface ServiceComponentRuntime</title>
      <para>
The <code>ServiceComponentRuntime</code> service represents the Declarative
 Services actor, known as Service Component Runtime (SCR), that manages the
 service components and their life cycle. The <code>ServiceComponentRuntime</code>
 service allows introspection of the components managed by Service Component
 Runtime.
 
 </para>
      <para>
 This service differentiates between a <link linkend="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO">ComponentDescriptionDTO</link> and a
 <link linkend="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO">ComponentConfigurationDTO</link>. A <link linkend="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO">ComponentDescriptionDTO</link> is a
 representation of a declared component description. A
 <link linkend="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO">ComponentConfigurationDTO</link> is a representation of an actual instance
 of a declared component description parameterized by component properties.
 </para>
      <para>
 
 Access to this service requires the
 <code>ServicePermission[ServiceComponentRuntime, GET]</code> permission. It is
 intended that only administrative bundles should be granted this permission
 to limit access to the potentially intrusive methods provided by this
 service.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="disableComponent(ComponentDescriptionDTO)" xml:id="org.osgi.service.component.runtime.ServiceComponentRuntime.disableComponent-ComponentDescriptionDTO-">
         <title>public Promise&lt;Void&gt; disableComponent(ComponentDescriptionDTO description)</title>
         <formalpara role="parameter">
            <title>description</title>
            <para>The component description to disable. Must not be
        <code>null</code>.</para>
         </formalpara>
         <para role="description">
Disables the specified component description.
 
 </para>
         <para>
 If the specified component description is currently disabled, this method
 has no effect.
 
 </para>
         <para>
 This method must return after changing the enabled state of the specified
 component description. Any actions that result from this, such as
 activating or deactivating a component configuration, must occur
 asynchronously to this method call.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A promise that will be resolved when the actions that result from
         changing the enabled state of the specified component have
         completed.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.component.runtime.ServiceComponentRuntime.isComponentEnabled-ComponentDescriptionDTO-">isComponentEnabled(ComponentDescriptionDTO)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="enableComponent(ComponentDescriptionDTO)" xml:id="org.osgi.service.component.runtime.ServiceComponentRuntime.enableComponent-ComponentDescriptionDTO-">
         <title>public Promise&lt;Void&gt; enableComponent(ComponentDescriptionDTO description)</title>
         <formalpara role="parameter">
            <title>description</title>
            <para>The component description to enable. Must not be
        <code>null</code>.</para>
         </formalpara>
         <para role="description">
Enables the specified component description.
 
 </para>
         <para>
 If the specified component description is currently enabled, this method
 has no effect.
 
 </para>
         <para>
 This method must return after changing the enabled state of the specified
 component description. Any actions that result from this, such as
 activating or deactivating a component configuration, must occur
 asynchronously to this method call.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A promise that will be resolved when the actions that result from
         changing the enabled state of the specified component have
         completed.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.component.runtime.ServiceComponentRuntime.isComponentEnabled-ComponentDescriptionDTO-">isComponentEnabled(ComponentDescriptionDTO)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getComponentConfigurationDTOs(ComponentDescriptionDTO)" xml:id="org.osgi.service.component.runtime.ServiceComponentRuntime.getComponentConfigurationDTOs-ComponentDescriptionDTO-">
         <title>public Collection&lt;ComponentConfigurationDTO&gt; getComponentConfigurationDTOs(ComponentDescriptionDTO description)</title>
         <formalpara role="parameter">
            <title>description</title>
            <para>The component description. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Returns the component configurations for the specified component
 description.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A collection containing a snapshot of the current component
         configurations for the specified component description. An empty
         collection is returned if there are none.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getComponentDescriptionDTO(Bundle,String)" xml:id="org.osgi.service.component.runtime.ServiceComponentRuntime.getComponentDescriptionDTO-Bundle-String-">
         <title>public ComponentDescriptionDTO getComponentDescriptionDTO(Bundle bundle,String name)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The bundle declaring the component description. Must not be
        <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the component description. Must not be
        <code>null</code>.</para>
         </formalpara>
         <para role="description">
Returns the <link linkend="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO">ComponentDescriptionDTO</link> declared with the specified name
 by the specified bundle.
 
 </para>
         <para>
 Only component descriptions from active bundles are returned.
 <code>null</code> if no such component is declared by the given <code>bundle</code>
 or the bundle is not active.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The declared component description or <code>null</code> if the
         specified bundle is not active or does not declare a component
         description with the specified name.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getComponentDescriptionDTOs(Bundle...)" xml:id="org.osgi.service.component.runtime.ServiceComponentRuntime.getComponentDescriptionDTOs-Bundle...-">
         <title>public Collection&lt;ComponentDescriptionDTO&gt; getComponentDescriptionDTOs(Bundle ... bundles)</title>
         <formalpara role="parameter">
            <title>bundles</title>
            <para>The bundles whose declared component descriptions are to
        be returned. Specifying no bundles, or the equivalent of an empty
        <code>Bundle</code> array, will return the declared component
        descriptions from all active bundles.</para>
         </formalpara>
         <para role="description">
Returns the component descriptions declared by the specified active
 bundles.
 
 </para>
         <para>
 Only component descriptions from active bundles are returned. If the
 specified bundles have no declared components or are not active, an empty
 collection is returned.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The declared component descriptions of the specified active
         <code>bundles</code>. An empty collection is returned if there are no
         component descriptions for the specified active bundles.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isComponentEnabled(ComponentDescriptionDTO)" xml:id="org.osgi.service.component.runtime.ServiceComponentRuntime.isComponentEnabled-ComponentDescriptionDTO-">
         <title>public boolean isComponentEnabled(ComponentDescriptionDTO description)</title>
         <formalpara role="parameter">
            <title>description</title>
            <para>The component description. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Returns whether the specified component description is currently enabled.
 
 </para>
         <para>
 The enabled state of a component description is initially set by the
 <link linkend="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.defaultEnabled">enabled</link> attribute of the
 component description.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the specified component description is currently
         enabled. Otherwise, <code>false</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.component.runtime.ServiceComponentRuntime.enableComponent-ComponentDescriptionDTO-">enableComponent(ComponentDescriptionDTO)</link>, <link linkend="org.osgi.service.component.runtime.ServiceComponentRuntime.disableComponent-ComponentDescriptionDTO-">disableComponent(ComponentDescriptionDTO)</link>, <link linkend="org.osgi.service.component.ComponentContext.disableComponent-String-">ComponentContext.disableComponent(String)</link>, <link linkend="org.osgi.service.component.ComponentContext.enableComponent-String-">ComponentContext.enableComponent(String)</link>
            </para>
         </formalpara>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.service.component.runtime.dto" xml:id="org.osgi.service.component.runtime.dto" xml:base="../../generated/javadoc/docbook/org.osgi.service.component.runtime.dto.xml">
   <title>org.osgi.service.component.runtime.dto</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.component.runtime.dto-version">Version 1.3</releaseinfo>
      <edition xml:id="org.osgi.service.component.runtime.dto-version.number">1.3</edition>
   </info>
   <para>
Service Component Runtime Data Transfer Objects Package Version 1.3.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.component.runtime.dto; version="[1.3,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.component.runtime.dto; version="[1.3,1.4)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO">
                  <code>ComponentConfigurationDTO</code>
               </link> - 
A representation of an actual instance of a declared component description
 parameterized by component properties.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO">
                  <code>ComponentDescriptionDTO</code>
               </link> - 
A representation of a declared component description.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.runtime.dto.ReferenceDTO">
                  <code>ReferenceDTO</code>
               </link> - 
A representation of a declared reference to a service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.runtime.dto.SatisfiedReferenceDTO">
                  <code>SatisfiedReferenceDTO</code>
               </link> - 
A representation of a satisfied reference.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.component.runtime.dto.UnsatisfiedReferenceDTO">
                  <code>UnsatisfiedReferenceDTO</code>
               </link> - 
A representation of an unsatisfied reference.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="ComponentConfigurationDTO" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO">
      <title>public class ComponentConfigurationDTO<?line-break?> extends DTO</title>
      <para>
A representation of an actual instance of a declared component description
 parameterized by component properties.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="ACTIVE" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.ACTIVE">
         <title>public static final int ACTIVE = 8</title>
         <para>
The component configuration is active.
 
 </para>
         <para>
 This is the normal operational state of a component configuration.</para>
      </section>
      <section role="field" xreflabel="description" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.description">
         <title>public ComponentDescriptionDTO description</title>
         <para>
The representation of the component configuration's component
 description.
   </para>
      </section>
      <section role="field" xreflabel="id" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.id">
         <title>public long id</title>
         <para>
The id of the component configuration.
 
 </para>
         <para>
 The id is a non-persistent, unique value assigned at runtime. The id is
 also available as the <code>component.id</code> component property. The value
 of this field is unspecified if the state of this component configuration
 is unsatisfied.</para>
      </section>
      <section role="field" xreflabel="properties" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.properties">
         <title>public Map&lt;String,Object&gt; properties</title>
         <para>
The component properties for the component configuration.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.component.ComponentContext.getProperties--">ComponentContext.getProperties()</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SATISFIED" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.SATISFIED">
         <title>public static final int SATISFIED = 4</title>
         <para>
The component configuration is satisfied.
 
 </para>
         <para>
 Any <link linkend="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.serviceInterfaces">services</link> declared
 by the component description are registered.</para>
      </section>
      <section role="field" xreflabel="satisfiedReferences" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.satisfiedReferences">
         <title>public SatisfiedReferenceDTO[] satisfiedReferences</title>
         <para>
The satisfied references.
 
 </para>
         <para>
 Each <link linkend="org.osgi.service.component.runtime.dto.SatisfiedReferenceDTO">SatisfiedReferenceDTO</link> in the array represents a satisfied
 reference of the component configuration. The array must be empty if the
 component configuration has no satisfied references.</para>
      </section>
      <section role="field" xreflabel="state" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.state">
         <title>public int state</title>
         <para>
The current state of the component configuration.
 
 </para>
         <para>
 This is one of <link linkend="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.UNSATISFIED_CONFIGURATION">UNSATISFIED_CONFIGURATION</link>,
 <link linkend="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.UNSATISFIED_REFERENCE">UNSATISFIED_REFERENCE</link>, <link linkend="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.SATISFIED">SATISFIED</link> or <link linkend="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.ACTIVE">ACTIVE</link>.</para>
      </section>
      <section role="field" xreflabel="UNSATISFIED_CONFIGURATION" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.UNSATISFIED_CONFIGURATION">
         <title>public static final int UNSATISFIED_CONFIGURATION = 1</title>
         <para>
The component configuration is unsatisfied due to a missing required
 configuration.
   </para>
      </section>
      <section role="field" xreflabel="UNSATISFIED_REFERENCE" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.UNSATISFIED_REFERENCE">
         <title>public static final int UNSATISFIED_REFERENCE = 2</title>
         <para>
The component configuration is unsatisfied due to an unsatisfied
 reference.
   </para>
      </section>
      <section role="field" xreflabel="unsatisfiedReferences" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.unsatisfiedReferences">
         <title>public UnsatisfiedReferenceDTO[] unsatisfiedReferences</title>
         <para>
The unsatisfied references.
 
 </para>
         <para>
 Each <link linkend="org.osgi.service.component.runtime.dto.UnsatisfiedReferenceDTO">UnsatisfiedReferenceDTO</link> in the array represents an
 unsatisfied reference of the component configuration. The array must be
 empty if the component configuration has no unsatisfied references.</para>
      </section>
      <section role="method" xreflabel="ComponentConfigurationDTO()" xml:id="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.ComponentConfigurationDTO--">
         <title>public  ComponentConfigurationDTO()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="ComponentDescriptionDTO" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO">
      <title>public class ComponentDescriptionDTO<?line-break?> extends DTO</title>
      <para>
A representation of a declared component description.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="activate" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.activate">
         <title>public String activate</title>
         <para>
The name of the activate method.
 
 </para>
         <para>
 This is declared in the <code>activate</code> attribute of the
 <code>component</code> element. This must be <code>null</code> if the component
 description does not declare an activate method name.</para>
      </section>
      <section role="field" xreflabel="bundle" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.bundle">
         <title>public BundleDTO bundle</title>
         <para>
The bundle declaring the component description.
   </para>
      </section>
      <section role="field" xreflabel="configurationPid" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.configurationPid">
         <title>public String[] configurationPid</title>
         <para>
The configuration pids.
 
 </para>
         <para>
 These are declared in the <code>configuration-pid</code> attribute of the
 <code>component</code> element. This must contain the default configuration
 pid if the component description does not declare a configuration pid.</para>
      </section>
      <section role="field" xreflabel="configurationPolicy" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.configurationPolicy">
         <title>public String configurationPolicy</title>
         <para>
The configuration policy.
 
 </para>
         <para>
 This is declared in the <code>configuration-policy</code> attribute of the
 <code>component</code> element. This must be the default configuration policy
 if the component description does not declare a configuration policy.</para>
      </section>
      <section role="field" xreflabel="deactivate" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.deactivate">
         <title>public String deactivate</title>
         <para>
The name of the deactivate method.
 
 </para>
         <para>
 This is declared in the <code>deactivate</code> attribute of the
 <code>component</code> element. This must be <code>null</code> if the component
 description does not declare a deactivate method name.</para>
      </section>
      <section role="field" xreflabel="defaultEnabled" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.defaultEnabled">
         <title>public boolean defaultEnabled</title>
         <para>
The initial enabled state.
 
 </para>
         <para>
 This is declared in the <code>enabled</code> attribute of the
 <code>component</code> element.</para>
      </section>
      <section role="field" xreflabel="factory" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.factory">
         <title>public String factory</title>
         <para>
The component factory name.
 
 </para>
         <para>
 This is declared in the <code>factory</code> attribute of the
 <code>component</code> element. This must be <code>null</code> if the component
 description is not declared as a component factory.</para>
      </section>
      <section role="field" xreflabel="immediate" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.immediate">
         <title>public boolean immediate</title>
         <para>
The immediate state.
 
 </para>
         <para>
 This is declared in the <code>immediate</code> attribute of the
 <code>component</code> element.</para>
      </section>
      <section role="field" xreflabel="implementationClass" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.implementationClass">
         <title>public String implementationClass</title>
         <para>
The fully qualified name of the implementation class.
 
 </para>
         <para>
 This is declared in the <code>class</code> attribute of the
 <code>implementation</code> element.</para>
      </section>
      <section role="field" xreflabel="modified" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.modified">
         <title>public String modified</title>
         <para>
The name of the modified method.
 
 </para>
         <para>
 This is declared in the <code>modified</code> attribute of the
 <code>component</code> element. This must be <code>null</code> if the component
 description does not declare a modified method name.</para>
      </section>
      <section role="field" xreflabel="name" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.name">
         <title>public String name</title>
         <para>
The name of the component.
 
 </para>
         <para>
 This is declared in the <code>name</code> attribute of the <code>component</code>
 element. This must be the default name if the component description does
 not declare a name.</para>
      </section>
      <section role="field" xreflabel="properties" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.properties">
         <title>public Map&lt;String,Object&gt; properties</title>
         <para>
The declared component properties.
 
 </para>
         <para>
 These are declared in the <code>property</code> and <code>properties</code>
 elements.</para>
      </section>
      <section role="field" xreflabel="references" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.references">
         <title>public ReferenceDTO[] references</title>
         <para>
The referenced services.
 
 </para>
         <para>
 These are declared in the <code>reference</code> elements. The array must be
 empty if the component description does not declare references to any
 services.</para>
      </section>
      <section role="field" xreflabel="scope" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.scope">
         <title>public String scope</title>
         <para>
The service scope.
 
 </para>
         <para>
 This is declared in the <code>scope</code> attribute of the <code>service</code>
 element. This must be <code>null</code> if the component description does not
 declare any service interfaces.</para>
      </section>
      <section role="field" xreflabel="serviceInterfaces" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.serviceInterfaces">
         <title>public String[] serviceInterfaces</title>
         <para>
The fully qualified names of the service interfaces.
 
 </para>
         <para>
 These are declared in the <code>interface</code> attribute of the
 <code>provide</code> elements. The array must be empty if the component
 description does not declare any service interfaces.</para>
      </section>
      <section role="method" xreflabel="ComponentDescriptionDTO()" xml:id="org.osgi.service.component.runtime.dto.ComponentDescriptionDTO.ComponentDescriptionDTO--">
         <title>public  ComponentDescriptionDTO()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="ReferenceDTO" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO">
      <title>public class ReferenceDTO<?line-break?> extends DTO</title>
      <para>
A representation of a declared reference to a service.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="bind" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.bind">
         <title>public String bind</title>
         <para>
The name of the bind method of the reference.
 
 </para>
         <para>
 This is declared in the <code>bind</code> attribute of the <code>reference</code>
 element. This must be <code>null</code> if the component description does not
 declare a bind method for the reference.</para>
      </section>
      <section role="field" xreflabel="cardinality" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.cardinality">
         <title>public String cardinality</title>
         <para>
The cardinality of the reference.
 
 </para>
         <para>
 This is declared in the <code>cardinality</code> attribute of the
 <code>reference</code> element. This must be the default cardinality if the
 component description does not declare a cardinality for the reference.</para>
      </section>
      <section role="field" xreflabel="field" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.field">
         <title>public String field</title>
         <para>
The name of the field of the reference.
 
 </para>
         <para>
 This is declared in the <code>field</code> attribute of the <code>reference</code>
 element. This must be <code>null</code> if the component description does not
 declare a field for the reference.</para>
      </section>
      <section role="field" xreflabel="fieldOption" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.fieldOption">
         <title>public String fieldOption</title>
         <para>
The field option of the reference.
 
 </para>
         <para>
 This is declared in the <code>field-option</code> attribute of the
 <code>reference</code> element. This must be <code>null</code> if the component
 description does not declare a field for the reference.</para>
      </section>
      <section role="field" xreflabel="interfaceName" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.interfaceName">
         <title>public String interfaceName</title>
         <para>
The service interface of the reference.
 
 </para>
         <para>
 This is declared in the <code>interface</code> attribute of the
 <code>reference</code> element.</para>
      </section>
      <section role="field" xreflabel="name" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.name">
         <title>public String name</title>
         <para>
The name of the reference.
 
 </para>
         <para>
 This is declared in the <code>name</code> attribute of the <code>reference</code>
 element. This must be the default name if the component description does
 not declare a name for the reference.</para>
      </section>
      <section role="field" xreflabel="policy" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.policy">
         <title>public String policy</title>
         <para>
The policy of the reference.
 
 </para>
         <para>
 This is declared in the <code>policy</code> attribute of the <code>reference</code>
 element. This must be the default policy if the component description
 does not declare a policy for the reference.</para>
      </section>
      <section role="field" xreflabel="policyOption" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.policyOption">
         <title>public String policyOption</title>
         <para>
The policy option of the reference.
 
 </para>
         <para>
 This is declared in the <code>policy-option</code> attribute of the
 <code>reference</code> element. This must be the default policy option if the
 component description does not declare a policy option for the reference.</para>
      </section>
      <section role="field" xreflabel="scope" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.scope">
         <title>public String scope</title>
         <para>
The scope of the reference.
 
 </para>
         <para>
 This is declared in the <code>scope</code> attribute of the <code>reference</code>
 element. This must be the default scope if the component description does
 not declare a scope for the reference.</para>
      </section>
      <section role="field" xreflabel="target" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.target">
         <title>public String target</title>
         <para>
The target of the reference.
 
 </para>
         <para>
 This is declared in the <code>target</code> attribute of the <code>reference</code>
 element. This must be <code>null</code> if the component description does not
 declare a target for the reference.</para>
      </section>
      <section role="field" xreflabel="unbind" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.unbind">
         <title>public String unbind</title>
         <para>
The name of the unbind method of the reference.
 
 </para>
         <para>
 This is declared in the <code>unbind</code> attribute of the <code>reference</code>
 element. This must be <code>null</code> if the component description does not
 declare an unbind method for the reference.</para>
      </section>
      <section role="field" xreflabel="updated" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.updated">
         <title>public String updated</title>
         <para>
The name of the updated method of the reference.
 
 </para>
         <para>
 This is declared in the <code>updated</code> attribute of the
 <code>reference</code> element. This must be <code>null</code> if the component
 description does not declare an updated method for the reference.</para>
      </section>
      <section role="method" xreflabel="ReferenceDTO()" xml:id="org.osgi.service.component.runtime.dto.ReferenceDTO.ReferenceDTO--">
         <title>public  ReferenceDTO()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="SatisfiedReferenceDTO" xml:id="org.osgi.service.component.runtime.dto.SatisfiedReferenceDTO">
      <title>public class SatisfiedReferenceDTO<?line-break?> extends DTO</title>
      <para>
A representation of a satisfied reference.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="boundServices" xml:id="org.osgi.service.component.runtime.dto.SatisfiedReferenceDTO.boundServices">
         <title>public ServiceReferenceDTO[] boundServices</title>
         <para>
The bound services.
 
 </para>
         <para>
 Each <link linkend="org.osgi.framework.dto.ServiceReferenceDTO">ServiceReferenceDTO</link> in the array represents a service bound
 to the satisfied reference. The array must be empty if there are no bound
 services.</para>
      </section>
      <section role="field" xreflabel="name" xml:id="org.osgi.service.component.runtime.dto.SatisfiedReferenceDTO.name">
         <title>public String name</title>
         <para>
The name of the declared reference.
 
 </para>
         <para>
 This is declared in the <code>name</code> attribute of the <code>reference</code>
 element of the component description.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.component.runtime.dto.ReferenceDTO.name">ReferenceDTO.name</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="target" xml:id="org.osgi.service.component.runtime.dto.SatisfiedReferenceDTO.target">
         <title>public String target</title>
         <para>
The target property of the satisfied reference.
 
 </para>
         <para>
 This is the value of the <link linkend="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.properties">component property</link> whose name is the concatenation of the
 <link linkend="org.osgi.service.component.runtime.dto.ReferenceDTO.name">declared reference name</link> and
 ".target". This must be <code>null</code> if no target property is
 set for the reference.</para>
      </section>
      <section role="method" xreflabel="SatisfiedReferenceDTO()" xml:id="org.osgi.service.component.runtime.dto.SatisfiedReferenceDTO.SatisfiedReferenceDTO--">
         <title>public  SatisfiedReferenceDTO()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="UnsatisfiedReferenceDTO" xml:id="org.osgi.service.component.runtime.dto.UnsatisfiedReferenceDTO">
      <title>public class UnsatisfiedReferenceDTO<?line-break?> extends DTO</title>
      <para>
A representation of an unsatisfied reference.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="name" xml:id="org.osgi.service.component.runtime.dto.UnsatisfiedReferenceDTO.name">
         <title>public String name</title>
         <para>
The name of the declared reference.
 
 </para>
         <para>
 This is declared in the <code>name</code> attribute of the <code>reference</code>
 element of the component description.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.component.runtime.dto.ReferenceDTO.name">ReferenceDTO.name</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="target" xml:id="org.osgi.service.component.runtime.dto.UnsatisfiedReferenceDTO.target">
         <title>public String target</title>
         <para>
The target property of the unsatisfied reference.
 
 </para>
         <para>
 This is the value of the <link linkend="org.osgi.service.component.runtime.dto.ComponentConfigurationDTO.properties">component property</link> whose name is the concatenation of the
 <link linkend="org.osgi.service.component.runtime.dto.ReferenceDTO.name">declared reference name</link> and
 ".target". This must be <code>null</code> if no target property is
 set for the reference.</para>
      </section>
      <section role="field" xreflabel="targetServices" xml:id="org.osgi.service.component.runtime.dto.UnsatisfiedReferenceDTO.targetServices">
         <title>public ServiceReferenceDTO[] targetServices</title>
         <para>
The target services.
 
 </para>
         <para>
 Each <link linkend="org.osgi.framework.dto.ServiceReferenceDTO">ServiceReferenceDTO</link> in the array represents a target service
 for the reference. The array must be empty if there are no target
 services. The upper bound on the number of target services in the array
 is the upper bound on the <link linkend="org.osgi.service.component.runtime.dto.ReferenceDTO.cardinality">cardinality</link> of
 the reference.</para>
      </section>
      <section role="method" xreflabel="UnsatisfiedReferenceDTO()" xml:id="org.osgi.service.component.runtime.dto.UnsatisfiedReferenceDTO.UnsatisfiedReferenceDTO--">
         <title>public  UnsatisfiedReferenceDTO()</title>
         <para/>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i1550732"><title>Automating Service Dependency
      Management in a Service-Oriented Component Model</title>Humberto
      Cervantes, Richard S. Hall, Proceedings of the Sixth Component-Based
      Software Engineering Workshop, May 2003, pp. 91-96<?line-break?>http://www-adele.imag.fr/Les.Publications/intConferences/CBSE2003Cer.pdf</bibliomixed>

      <bibliomixed><title>Service Binder</title>Humberto Cervantes, Richard S.
      Hall<?line-break?>http://gravity.sourceforge.net/servicebinder</bibliomixed>

      <bibliomixed xml:id="i1567926"><title>Java Properties
      File</title>http://docs.oracle.com/javase/7/docs/api/java/util/Properties.html</bibliomixed>

      <bibliomixed xml:id="i1636361"><title>Extensible Markup Language (XML)
      1.0</title>http://www.w3.org/TR/REC-xml/</bibliomixed>

      <bibliomixed xml:id="i1655737"><title>OSGi XML
      Schemas</title>http://www.osgi.org/Specifications</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="113" revision="$Id: 03ab3d3ce8cba58f46eb5bdc678d6e4683480804 $" version="5" xml:id="service.event" xml:base="../113/service.event.xml">
  <title>Event Admin Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.event-version" linkend="org.osgi.service.event"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>Nearly all the bundles in an OSGi framework must deal with events,
    either as an event publisher or as an event handler. So far, the preferred
    mechanism to disperse those events have been the service interface
    mechanism.</para>

    <para>Dispatching events for a design related to X, usually involves a
    service of type <code>XListener</code>. However, this model does not scale
    well for fine grained events that must be dispatched to many different
    handlers. Additionally, the dynamic nature of the OSGi environment
    introduces several complexities because both event publishers and event
    handlers can appear and disappear at any time.</para>

    <para>The Event Admin service provides an inter-bundle communication
    mechanism. It is based on a event <emphasis>publish</emphasis> and
    <emphasis>subscribe</emphasis> model, popular in many message based
    systems.</para>

    <para>This specification defines the details for the participants in this
    event model.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Simplifications</emphasis> - The model must
          significantly simplify the process of programming an event source
          and an event handler.</para>
        </listitem>

        <listitem>
          <para><emphasis>Dependencies</emphasis> - Handle the myriad of
          dependencies between event sources and event handlers for proper
          cleanup.</para>
        </listitem>

        <listitem>
          <para><emphasis>Synchronicity</emphasis> - It must be possible to
          deliver events asynchronously or synchronously with the
          caller.</para>
        </listitem>

        <listitem>
          <para><emphasis>Event Window</emphasis> - Only event handlers that
          are active when an event is published must receive this event,
          handlers that register later must not see the event.</para>
        </listitem>

        <listitem>
          <para><emphasis>Performance</emphasis> - The event mechanism must
          impose minimal overhead in delivering events.</para>
        </listitem>

        <listitem>
          <para><emphasis>Selectivity</emphasis> - Event listeners must only
          receive notifications for the event types for which they are
          interested</para>
        </listitem>

        <listitem>
          <para><emphasis>Reliability</emphasis> - The Event Admin must ensure
          that events continue to be delivered regardless the quality of the
          event handlers.</para>
        </listitem>

        <listitem>
          <para><emphasis>Security</emphasis> - Publishing and receiving
          events are sensitive operations that must be protected per event
          type.</para>
        </listitem>

        <listitem>
          <para><emphasis>Extensibility</emphasis> - It must be possible to
          define new event types with their own data types.</para>
        </listitem>

        <listitem>
          <para><emphasis>Native Code</emphasis> - Events must be able to be
          passed to native code or come from native code.</para>
        </listitem>

        <listitem>
          <para><emphasis>OSGi Events</emphasis> - The OSGi Framework, as well
          as a number of OSGi services, already have number of its own events
          defined. For uniformity of processing, these have to be mapped into
          generic event types.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Event</emphasis> - An <code>Event</code> object has
          a topic and a <code>Dictionary</code> object that contains the event
          properties. It is an immutable object.</para>
        </listitem>

        <listitem>
          <para><emphasis>Event Admin</emphasis> - The service that provides
          the publish and subscribe model to Event Handlers and Event
          Publishers.</para>
        </listitem>

        <listitem>
          <para><emphasis>Event Handler</emphasis> - A service that receives
          and handles <code>Event</code> objects.</para>
        </listitem>

        <listitem>
          <para><emphasis>Event Publisher</emphasis> - A bundle that sends
          event through the Event Admin service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Event Subscriber</emphasis> - Another name for an
          Event Handler.</para>
        </listitem>

        <listitem>
          <para><emphasis>Topic</emphasis> - The name of an Event type.</para>
        </listitem>

        <listitem>
          <para><emphasis>Event Properties</emphasis> - The set of properties
          that is associated with an Event.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>The Event Admin service org.osgi.service.event package</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.865in" contentwidth="7.000in" fileref="eventadmin-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Synopsis</title>

      <para>The Event Admin service provides a place for bundles to publish
      events, regardless of their destination. It is also used by Event
      Handlers to subscribe to specific types of events.</para>

      <para>Events are published under a topic, together with a number of
      event properties. Event Handlers can specify a filter to control the
      Events they receive on a very fine grained basis.</para>
    </section>

    <section>
      <title>What To Read</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Architects</emphasis> - The <xref linkend="i1487590"/> provides an overview of the Event Admin
          service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Event Publishers</emphasis> - The <xref linkend="i1399436"/> provides an introduction of how to write an
          Event Publisher. The <xref linkend="i1487590"/> provides a good
          overview of the design.</para>
        </listitem>

        <listitem>
          <para><emphasis>Event Subscribers/Handlers</emphasis> - The <xref linkend="i1557230"/> provides the rules on how to subscribe and
          handle events.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="i1487590">
    <title>Event Admin Architecture</title>

    <para>The Event Admin is based on the
    <emphasis>Publish-Subscribe</emphasis> pattern. This pattern decouples
    sources from their handlers by interposing an <emphasis>event
    channel</emphasis> between them. The publisher posts events to the
    channel, which identifies which handlers need to be notified and then
    takes care of the notification process. This model is depicted in <xref linkend="i1450302"/>.</para>

    <figure xml:id="i1450302">
      <title>Channel Pattern</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="0.995in" contentwidth="4.940in" fileref="channel-pattern.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>In this model, the event source and event handler are completely
    decoupled because neither has any direct knowledge of the other. The
    complicated logic of monitoring changes in the event publishers and event
    handlers is completely contained within the event channel. This is highly
    advantageous in an OSGi environment because it simplifies the process of
    both sending and receiving events.</para>
  </section>

  <section>
    <title>The Event</title>

    <para>Events have the following attributes:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Topic</emphasis> - A topic that defines what happened.
        For example, when a bundle is started an event is published that has a
        topic of <code>org/osgi/framework/BundleEvent/STARTED</code>.</para>
      </listitem>

      <listitem>
        <para><emphasis>Properties</emphasis> - Zero or more properties that
        contain additional information about the event. For example, the
        previous example event has a property of <code>bundle.id</code> which
        is set to a <code>Long</code> object, among other properties.</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Topics</title>

      <para>The topic of an event defines the <emphasis>type</emphasis> of the
      event. It is fairly granular in order to give handlers the opportunity
      to register for just the events they are interested in. When a topic is
      designed, its name should not include any other information, such as the
      publisher of the event or the data associated with the event, those
      parts are intended to be stored in the event properties.</para>

      <para>The topic is intended to serve as a first-level filter for
      determining which handlers should receive the event. Event Admin service
      implementations use the structure of the topic to optimize the
      dispatching of the events to the handlers.</para>

      <para>Topics are arranged in a hierarchical namespace. Each level is
      defined by a token and levels are separated by solidi (<code>'/'
      \u002F</code>). More precisely, the topic must conform to the following
      grammar:</para>

      <programlisting>  topic ::= token ( '/' token ) *    // See General Syntax Definitions in Core</programlisting>

      <para>Topics should be designed to become more specific when going from
      left to right. Handlers can provide a prefix that matches a topic, using
      the preferred order allows a handler to minimize the number of prefixes
      it needs to register.</para>

      <para>Topics are case-sensitive. As a convention, topics should follow
      the reverse domain name scheme used by Java packages to guarantee
      uniqueness. The separator must be a solidus (<code>'/' \u002F</code>)
      instead of the full stop (<code>'.' \u002E</code>).</para>

      <para>This specification uses the convention
      <code>fully/qualified/package/ClassName/ACTION</code>. If necessary, a
      pseudo-class-name is used.</para>
    </section>

    <section>
      <title>Properties</title>

      <para>Information about the actual event is provided as properties. The
      property name is a case-sensitive string and the value can be any
      object. Although any Java object can be used as a property value, only
      <code>String</code> objects and the eight primitive types (plus their
      wrappers) should be used. Other types cannot be passed to handlers that
      reside external from the Java VM.</para>

      <para>Another reason that arbitrary classes should not be used is the
      mutability of objects. If the values are not immutable, then any handler
      that receives the event could change the value. Any handlers that
      received the event subsequently would see the altered value and not the
      value as it was when the event was sent.</para>

      <para>The topic of the event is available as a property with the key
      <xref linkend="org.osgi.service.event.EventConstants.EVENT_TOPIC" xrefstyle="hyperlink"/>. This allows filters to include the topic as a
      condition if necessary.</para>
    </section>

    <section>
      <title>High Performance</title>

      <para>An event processing system can become a bottleneck in large
      systems. One expensive aspect of the Event object is its properties and
      its immutability. This combination requires the Event object to create a
      copy of the properties for each object. There are many situations where
      the same properties are dispatched through Event Admin, the topic is
      then used to signal the information. Creating the copy of the properties
      can therefore take unnecessary CPU time and memory. However, the
      immutability of the Event object requires the properties to be
      immutable.</para>

      <para>For this reason, this specification also provides an immutable Map
      with the Event Properties class. This class implements an immutable map
      that is recognized and trusted by the Event object to not mutate. Using
      an Event Properties object allows a client to create many different
      Event objects with different topics but sharing the same properties
      object.</para>

      <para>The following example shows how an event poster can limit the
      copying of the properties.</para>

      <programlisting>void foo(EventAdmin eventAdmin) {
   Map&lt;String,Object&gt; props = new HashMap&lt;String,Object&gt;();
   props.put("foo", 1);
   EventProperties eventProps = new EventProperties( props);

   for ( int i=0; i&lt;1000; i++)
      eventAdmin.postEvent( new Event( "my/topic/" + i, eventProps));
}</programlisting>
    </section>
  </section>

  <section xml:id="i1557230">
    <title>Event Handler</title>

    <para>Event handlers must be registered as services with the OSGi
    framework under the object class
    <code>org.osgi.service.event.EventHandler</code>.</para>

    <para>Event handlers should be registered with a property (constant from
    the <code>EventConstants</code> class) <xref linkend="org.osgi.service.event.EventConstants.EVENT_TOPIC" xrefstyle="hyperlink"/>. The value being a <code>String</code>,
    <code>String[]</code> or <code>Collection&lt;String&gt;</code> object that
    describes which <emphasis>topics</emphasis> the handler is interested in.
    A wildcard asterisk (<code>'*' \u002A</code>) may be used as the last
    token of a topic name, for example <code>com/action/*</code>. This matches
    any topic that shares the same first tokens. For example,
    <code>com/action/*</code> matches <code>com/action/listen</code>.</para>

    <para>Event Handlers which have not specified the <xref linkend="org.osgi.service.event.EventConstants.EVENT_TOPIC" xrefstyle="hyperlink"/> service property must not receive events.</para>

    <para>The value of each entry in the <xref linkend="org.osgi.service.event.EventConstants.EVENT_TOPIC" xrefstyle="hyperlink"/> service registration property must conform to the
    following grammar:</para>

    <programlisting>topic-scope ::= '*' | ( topic '/*'?  )</programlisting>

    <para>Event handlers can also be registered with a service property named
    <xref linkend="org.osgi.service.event.EventConstants.EVENT_FILTER" xrefstyle="hyperlink"/>. The value of this property must be a string
    containing a Framework filter specification. Any of the event's properties
    can be used in the filter expression.</para>

    <programlisting>event-filter ::= filter              //  See Filter Syntax in Core</programlisting>

    <para>Each Event Handler is notified for any event which belongs to the
    topics the handler has expressed an interest in. If the handler has
    defined a <xref linkend="org.osgi.service.event.EventConstants.EVENT_FILTER" xrefstyle="hyperlink"/> service property then the event properties must
    also match the filter expression. If the filter is an error, then the
    Event Admin service should log a warning and further ignore the Event
    Handler.</para>

    <para>For example, a bundle wants to see all Log Service events with a
    level of <code>WARNING</code> or <code>ERROR</code>, but it must ignore
    the <code>INFO</code> and <code>DEBUG</code> events. Additionally, the
    only events of interest are when the bundle symbolic name starts with
    <code>com.acme</code>.</para>

    <programlisting>public AcmeWatchDog implements BundleActivator, 
        EventHandler {
    final static String [] topics = new String[] {
        "org/osgi/service/log/LogEntry/LOG_WARNING",
        "org/osgi/service/log/LogEntry/LOG_ERROR" };

    public void start(BundleContext context) {
        Dictionary d = new Hashtable();
        d.put(EventConstants.EVENT_TOPIC, topics );
        d.put(EventConstants.EVENT_FILTER, 
            "(bundle.symbolicName=com.acme.*)" );
        context.registerService( EventHandler.class.getName(),
            this, d );
    }
    public void stop( BundleContext context) {}

    public void handleEvent(Event event ) {
        //...
    }
}</programlisting>

    <para>If there are multiple Event Admin services registered with the
    Framework then all Event Admin services must send their published events
    to all registered Event Handlers.</para>

    <section xml:id="i1556001">
      <title>Ordering</title>

      <para>In the default case, an Event Handler will receive posted
      (asynchronous) events from a single thread in the same order as they
      were posted. Maintaining this ordering guarantee requires the Event
      Admin to serialize the delivery of events instead of, for example,
      delivering the events on different worker threads. There are many
      scenarios where this ordering is not really required. For this reason,
      an Event Handler can signal to the Event Admin that events can be
      delivered out of order. This is notified with the <xref linkend="org.osgi.service.event.EventConstants.EVENT_DELIVERY" xrefstyle="hyperlink"/> service property. This service property can be
      used in the following way:</para>

      <itemizedlist>
        <listitem>
          <para>Not set or set to both - The Event Admin must deliver the
          events in the proper order.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.event.EventConstants.DELIVERY_ASYNC_ORDERED" xrefstyle="hyperlink"/> - Events must be delivered in order.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.event.EventConstants.DELIVERY_ASYNC_UNORDERED" xrefstyle="hyperlink"/> - Allow the events to be delivered in any
          order.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="i1399436">
    <title>Event Publisher</title>

    <para>To fire an event, the event source must retrieve the Event Admin
    service from the OSGi service registry. Then it creates the event object
    and calls one of the Event Admin service's methods to fire the event
    either synchronously or asynchronously.</para>

    <para>The following example is a class that publishes a time event every
    60 seconds.</para>

    <programlisting>public class TimerEvent extends Thread 
    implements BundleActivator {
    Hashtable      time = new Hashtable();
    ServiceTracker tracker;

    public TimerEvent() { super("TimerEvent"); }

    public void start(BundleContext context ) {
        tracker = new ServiceTracker(context,
            EventAdmin.class.getName(), null );
        tracker.open();
        start();
    }

    public void stop( BundleContext context ) {
        interrupt();
        tracker.close();
    }

    public void run() {
        while ( ! Thread.interrupted() ) try {
            Calendar c = Calendar.getInstance();
            set(c,Calendar.MINUTE,"minutes");
            set(c,Calendar.HOUR,"hours");
            set(c,Calendar.DAY_OF_MONTH,"day");
            set(c,Calendar.MONTH,"month");
            set(c,Calendar.YEAR,"year");

            EventAdmin ea =
                (EventAdmin) tracker.getService();
            if ( ea != null )
                ea.sendEvent(new Event("com/acme/timer",
                    time ));
            Thread.sleep(60000-c.get(Calendar.SECOND)*1000);
        } catch( InterruptedException e ) {
            return;
        }
    }

    void set( Calendar c, int field, String key ) {
        time.put( key, new Integer(c.get(field)) );
    }
}       </programlisting>
  </section>

  <section>
    <title>Specific Events</title>

    <section>
      <title>General Conventions</title>

      <para>Some handlers are more interested in the contents of an event
      rather than what actually happened. For example, a handler wants to be
      notified whenever an Exception is thrown anywhere in the system. Both
      Framework Events and Log Entry events may contain an exception that
      would be of interest to this hypothetical handler. If both Framework
      Events and Log Entries use the same property names then the handler can
      access the Exception in exactly the same way. If some future event type
      follows the same conventions then the handler can receive and process
      the new event type even though it had no knowledge of it when it was
      compiled.</para>

      <para>The following properties are suggested as conventions. When new
      event types are defined they should use these names with the
      corresponding types and values where appropriate. These values should be
      set only if they are not <code>null</code></para>

      <para>A list of these property names can be found in the following
      table.</para>

      <table>
        <title>General property names for events</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="2*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="4*"/>

          <thead>
            <row>
              <entry>Name</entry>

              <entry>Type</entry>

              <entry>Notes</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.BUNDLE_SIGNER" xrefstyle="hyperlink"/></para></entry>

              <entry><code>String | Collection &lt;String&gt;</code></entry>

              <entry><para>A bundle's signers DN</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.BUNDLE_VERSION" xrefstyle="hyperlink"/></para></entry>

              <entry><code>Version</code></entry>

              <entry><para>A bundle's version</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.BUNDLE_SYMBOLICNAME" xrefstyle="hyperlink"/></para></entry>

              <entry><code>String</code></entry>

              <entry><para>A bundle's symbolic name</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.EVENT" xrefstyle="hyperlink"/></para></entry>

              <entry><code>Object</code></entry>

              <entry><para>The actual event object. Used when rebroadcasting
              an event that was sent via some other event
              mechanism</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.EXCEPTION" xrefstyle="hyperlink"/></para></entry>

              <entry><code>Throwable</code></entry>

              <entry><para>An exception or error</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.EXCEPTION_MESSAGE" xrefstyle="hyperlink"/></para></entry>

              <entry><code>String</code></entry>

              <entry><para>Must be equal to
              <code>exception.getMessage()</code>.</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.EXCEPTION_CLASS" xrefstyle="hyperlink"/></para></entry>

              <entry><code>String</code></entry>

              <entry><para>Must be equal to the name of the
              <code>Exception</code> class.</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.MESSAGE" xrefstyle="hyperlink"/></para></entry>

              <entry><code>String</code></entry>

              <entry><para>A human-readable message that is usually not
              localized.</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.SERVICE" xrefstyle="hyperlink"/></para></entry>

              <entry><code>Service Reference</code></entry>

              <entry><para>A Service Reference</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.SERVICE_ID" xrefstyle="hyperlink"/></para></entry>

              <entry><code>Long</code></entry>

              <entry><para>A service's id</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.SERVICE_OBJECTCLASS" xrefstyle="hyperlink"/></para></entry>

              <entry><code>String[]</code></entry>

              <entry><para>A service's <code>objectClass</code></para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.SERVICE_PID" xrefstyle="hyperlink"/></para></entry>

              <entry><code>String | Collection &lt;String&gt;</code></entry>

              <entry><para>A service's persistent identity. A PID that is
              specified with a <code>String[]</code> must be coerced into a
              <code>Collection&lt;String&gt;</code>.</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.event.EventConstants.TIMESTAMP" xrefstyle="hyperlink"/></para></entry>

              <entry><code>Long</code></entry>

              <entry><para>The time when the event occurred, as reported by
              <code>System.currentTimeMillis()</code></para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The topic of an OSGi event is constructed by taking the fully
      qualified name of the event class, substituting a solidus (<code>'/'
      \u002F</code>)for every full stop, and appending a solidus followed by
      the name of the constant that defines the event type. For example, the
      topic of</para>

      <programlisting>BundleEvent.STARTED</programlisting>

      <para>Event becomes</para>

      <programlisting>org/osgi/framework/BundleEvent/STARTED</programlisting>

      <para>If a type code for the event is unknown then the event must be
      ignored.</para>
    </section>

    <section>
      <title>OSGi Events</title>

      <para>In order to present a consistent view of all the events occurring
      in the system, the existing Framework-level events are mapped to the
      Event Admin's publish-subscribe model. This allows event subscribers to
      treat framework events exactly the same as other events.</para>

      <para>It is the responsibility of the Event Admin service implementation
      to map these Framework events to its queue.</para>

      <para>The properties associated with the event depends on its class as
      outlined in the following sections.</para>
    </section>

    <section>
      <title>Framework Event</title>

      <para>Framework Events must be delivered asynchronously with a topic
      of:</para>

      <programlisting>org/osgi/framework/FrameworkEvent/&lt;eventtype&gt;</programlisting>

      <para>The following event types are supported:</para>

      <programlisting>STARTED 
ERROR   
PACKAGES_REFRESHED
STARTLEVEL_CHANGED
WARNING
INFO</programlisting>

      <para>Other events are ignored, no event will be send by the Event
      Admin. The following event properties must be set for a Framework
      Event.</para>

      <itemizedlist>
        <listitem>
          <para><code>event</code> - (<code>FrameworkEvent</code>) The
          original event object.</para>
        </listitem>
      </itemizedlist>

      <para>If the <code>FrameworkEvent getBundle</code> method returns a
      non-<code>null</code> value, the following fields must be set:</para>

      <itemizedlist>
        <listitem>
          <para><code>bundle.id - (Long</code>) The source's bundle id.</para>
        </listitem>

        <listitem>
          <para><code>bundle.symbolicName</code> - (<code>String)</code> The
          source bundle's symbolic name. Only set if the bundle's symbolic
          name is not <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><code>bundle.version</code> - <code>(Version)</code> The
          version of the bundle, if set.</para>
        </listitem>

        <listitem>
          <para><code>bundle.signer</code> -
          <code>(String|Collection&lt;String&gt;)</code> The DNs of the
          signers.</para>
        </listitem>

        <listitem>
          <para><code>bundle</code> - (<code>Bundle</code>) The source
          bundle.</para>
        </listitem>
      </itemizedlist>

      <para>If the <code>FrameworkEvent</code> <code>getThrowable</code>
      method returns a non-<code>null</code> value:</para>

      <itemizedlist>
        <listitem>
          <para><code>exception.class</code> - (<code>String</code>) The
          fully-qualified class name of the attached Exception.</para>
        </listitem>

        <listitem>
          <para><code>exception.message</code> -( <code>String)</code> The
          message of the attached exception. Only set if the Exception message
          is not <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><code>exception</code> - (Throwable) The Exception returned by
          the <code>getThrowable</code> method.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Bundle Event</title>

      <para>Framework Events must be delivered asynchronously with a topic
      of:</para>

      <programlisting>org/osgi/framework/BundleEvent/&lt;event type&gt;</programlisting>

      <para>The following event types are supported:</para>

      <programlisting>INSTALLED
STARTED
STOPPED
UPDATED
UNINSTALLED
RESOLVED
UNRESOLVED</programlisting>

      <para>Unknown events must be ignored.</para>

      <para>The following event properties must be set for a Bundle Event. If
      listeners require synchronous delivery then they should register a
      Synchronous Bundle Listener with the Framework.</para>

      <itemizedlist>
        <listitem>
          <para><code>event</code> - (<code>BundleEvent</code>) The original
          event object.</para>
        </listitem>

        <listitem>
          <para><code>bundle.id - (Long</code>) The source's bundle id.</para>
        </listitem>

        <listitem>
          <para><code>bundle.symbolicName</code> - (<code>String)</code> The
          source bundle's symbolic name. Only set if the bundle's symbolic
          name is not <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><code>bundle.version</code> - <code>(Version)</code> The
          version of the bundle, if set.</para>
        </listitem>

        <listitem>
          <para><code>bundle.signer</code> -
          <code>(String|Collection&lt;String&gt;)</code> The DNs of the
          signers.</para>
        </listitem>

        <listitem>
          <para><code>bundle</code> - (<code>Bundle</code>) The source
          bundle.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="service.event.serviceevent">
      <title>Service Event</title>

      <para>Service Events must be delivered asynchronously with the
      topic:</para>

      <programlisting>org/osgi/framework/ServiceEvent/&lt;eventtype&gt;</programlisting>

      <para>The following event types are supported:</para>

      <programlisting>REGISTERED
MODIFIED
UNREGISTERING</programlisting>

      <para>Unknown events must be ignored.</para>

      <itemizedlist>
        <listitem>
          <para><code>event</code> - (<code>ServiceEvent</code>) The original
          Service Event object.</para>
        </listitem>

        <listitem>
          <para><code>service</code> - (<code>ServiceReference</code>) The
          result of the <code>getServiceReference</code> method</para>
        </listitem>

        <listitem>
          <para><code>service.id</code> - (<code>Long</code>) The service's
          ID.</para>
        </listitem>

        <listitem>
          <para><code>service.pid</code> - (<code>String or
          Collection&lt;String&gt;</code>) The service's persistent identity.
          Only set if not <code>null</code>. If the PID is specified as a
          <code>String[]</code> then it must be coerced into a
          <code>Collection&lt;String&gt;</code>.</para>
        </listitem>

        <listitem>
          <para><code>service.objectClass</code> - (<code>String[]</code>) The
          service's object class.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Other Event Sources</title>

      <para>Several OSGi service specifications define their own event model.
      It is the responsibility of these services to map their events to Event
      Admin events. Event Admin is seen as a core service that will be present
      in most devices. However, if there is no Event Admin service present,
      applications are not mandated to buffer events.</para>
    </section>
  </section>

  <section>
    <title>Event Admin Service</title>

    <para>The Event Admin service must be registered as a service with the
    object class <code>org.osgi.service.event.EventAdmin</code>. Multiple
    Event Admin services can be registered. Publishers should publish their
    event on the Event Admin service with the highest value for the
    <code>SERVICE_RANKING</code> service property. This is the service
    selected by the <code>getServiceReference</code> method.</para>

    <para>The Event Admin service is responsible for tracking the registered
    handlers, handling event notifications and providing at least one thread
    for asynchronous event delivery.</para>

    <section>
      <title>Synchronous Event Delivery</title>

      <para>Synchronous event delivery is initiated by the
      <code>sendEvent</code> method. When this method is invoked, the Event
      Admin service determines which handlers must be notified of the event
      and then notifies each one in turn. The handlers can be notified in the
      caller's thread or in an event-delivery thread, depending on the
      implementation. In either case, all notifications must be completely
      handled before the <code>sendEvent</code> method returns to the
      caller.</para>

      <para>Synchronous event delivery is significantly more expensive than
      asynchronous delivery. All things considered equal, the asynchronous
      delivery should be preferred over the synchronous delivery.</para>

      <para>Callers of this method will need to be coded defensively and
      assume that synchronous event notifications could be handled in a
      separate thread. That entails that they must not be holding any monitors
      when they invoke the <code>sendEvent</code> method. Otherwise they
      significantly increase the likelihood of deadlocks because Java monitors
      are not reentrant from another thread by definition. Not holding
      monitors is good practice even when the event is dispatched in the same
      thread.</para>
    </section>

    <section>
      <title>Asynchronous Event Delivery</title>

      <para>Asynchronous event delivery is initiated by the
      <code>postEvent</code> method. When this method is invoked, the Event
      Admin service must determine which handlers are interested in the event.
      By collecting this list of handlers during the method invocation, the
      Event Admin service ensures that only handlers that were registered at
      the time the event was posted will receive the event notification. This
      is the same as described in <emphasis>Delivering Events</emphasis> of
      <xref linkend="intro.core.release" xrefstyle="template:%t"/>.</para>

      <para>The Event Admin service can use more than one thread to deliver
      events. If it does then it must guarantee that each handler receives the
      events in the same order as the events were posted, unless this handler
      allows unordered deliver, see <xref linkend="i1556001"/>. This ensures
      that handlers see events in their expected order. For example, for some
      handlers it would be an error to see a <code>destroyed</code> event
      before the corresponding <code>created</code> event.</para>

      <para>Before notifying each handler, the event delivery thread must
      ensure that the handler is still registered in the service registry. If
      it has been unregistered then the handler must not be notified.</para>
    </section>

    <section>
      <title>Order of Event Delivery</title>

      <para>Asynchronous events are delivered in the order in which they
      arrive in the event queue. Thus if two events are posted by the same
      thread then they will be delivered in the same order (though other
      events may come between them). However, if two or more events are posted
      by different threads then the order in which they arrive in the queue
      (and therefore the order in which they are delivered) will depend very
      much on subtle timing issues. The event delivery system cannot make any
      guarantees in this case. An Event Handler can indicate that the ordering
      is not relevant, allowing the Event Admin to more aggressively
      parallelize the event deliver, see <xref linkend="i1556001"/>.</para>

      <para>Synchronous events are delivered as soon as they are sent. If two
      events are sent by the same thread, one after the other, then they must
      be guaranteed to be processed serially and in the same order. However,
      if two events are sent by different threads then no guarantees can be
      made. The events can be processed in parallel or serially, depending on
      whether or not the Event Admin service dispatches synchronous events in
      the caller's thread or in a separate thread.</para>

      <para>Note that if the actions of a handler trigger a synchronous event,
      then the delivery of the first event will be paused and delivery of the
      second event will begin. Once delivery of the second event has
      completed, delivery of the first event will resume. Thus some handlers
      may observe the second event before they observe the first one.</para>
    </section>
  </section>

  <section>
    <title>Reliability</title>

    <section>
      <title>Exceptions in callbacks</title>

      <para>If a handler throws an Exception during delivery of an event, it
      must be caught by the Event Admin service and handled in some
      implementation specific way. If a Log Service is available the exception
      should be logged. Once the exception has been caught and dealt with, the
      event delivery must continue with the next handlers to be notified, if
      any.</para>

      <para>As the Log Service can also forward events through the Event Admin
      service there is a potential for a loop when an event is reported to the
      Log Service.</para>
    </section>

    <section>
      <title>Dealing with Stalled Handlers</title>

      <para>Event handlers should not spend too long in the
      <code>handleEvent</code> method. Doing so will prevent other handlers in
      the system from being notified. If a handler needs to do something that
      can take a while, it should do it in a different thread.</para>

      <para>An event admin implementation can attempt to detect stalled or
      deadlocked handlers and deal with them appropriately. Exactly how it
      deals with this situation is left as implementation specific. One
      allowed implementation is to mark the current event delivery thread as
      invalid and spawn a new event delivery thread. Event delivery must
      resume with the next handler to be notified.</para>

      <para>Implementations can choose to blacklist any handlers that they
      determine are misbehaving. Blacklisted handlers must not be notified of
      any events. If a handler is blacklisted, the event admin should log a
      message that explains the reason for it.</para>
    </section>
  </section>

  <section>
    <title>Inter-operability with Native Applications</title>

    <para>Implementations of the Event Admin service can support passing
    events to, and/or receiving events from native applications.</para>

    <para>If the implementation supports native inter-operability, it must be
    able to pass the topic of the event and its properties to/from native
    code. Implementations must be able to support property values of the
    following types:</para>

    <itemizedlist>
      <listitem>
        <para><code>String</code> objects, including full Unicode
        support</para>
      </listitem>

      <listitem>
        <para><code>Integer, Long, Byte, Short, Float, Double, Boolean,
        Character</code> objects</para>
      </listitem>

      <listitem>
        <para>Single-dimension arrays of the above types (including
        <code>String</code>)</para>
      </listitem>

      <listitem>
        <para>Single-dimension arrays of Java's eight primitive types
        (<code>int, long, byte, short, float, double, boolean,
        char</code>)</para>
      </listitem>
    </itemizedlist>

    <para>Implementations can support additional types. Property values of
    unsupported types must be silently discarded.</para>
  </section>

  <section>
    <title>Security</title>

    <section>
      <title>Topic Permission</title>

      <para>The <code>TopicPermission</code> class allows fine-grained control
      over which bundles may post events to a given topic and which bundles
      may receive those events.</para>

      <para>The target parameter for the permission is the topic name.
      <code>TopicPermission</code> classes uses a wildcard matching algorithm
      similar to the <code>BasicPermission</code> class, except that solidi
      (<code>'/' \u002F</code>) are used as separators instead of full stop
      characters. For example, a name of <code>a/b/*</code> implies
      <code>a/b/c</code> but not <code>x/y/z</code> or
      <code>a/b</code>.</para>

      <para>There are two available actions: <code>PUBLISH</code> and
      <code>SUBSCRIBE</code>. These control a bundle's ability to either
      publish or receive events, respectively. Neither one implies the
      other.</para>
    </section>

    <section>
      <title>Required Permissions</title>

      <para>Bundles that need to register an event handler must be granted
      <code>ServicePermission</code>[<code>org.osgi.service.event.EventHandler</code>,
      <code>REGISTER</code>]. In addition, handlers require
      <code>TopicPermission[ &lt;topic&gt;, SUBSCRIBE ]</code> for each topic
      they want to be notified about.</para>

      <para>Bundles that need to publish an event must be granted
      <code>ServicePermission[ org.osgi.service.event.EventAdmin, GET]</code>
      so that they may retrieve the Event Admin service and use it. In
      addition, event sources require <code>TopicPermission[ &lt;topic&gt;,
      PUBLISH]</code> for each topic they want to send events to.</para>

      <para>Bundles that need to iterate the handlers registered with the
      system must be granted
      <code>ServicePermission[org.osgi.service.event.EventHandler, GET]</code>
      to retrieve the event handlers from the service registry.</para>

      <para>Only a bundle that contains an Event Admin service implementation
      should be granted <code>ServicePermission[
      org.osgi.service.event.EventAdmin, REGISTER]</code> to register the
      event channel admin service.</para>
    </section>

    <section>
      <title>Security Context During Event Callbacks</title>

      <para>During an event notification, the Event Admin service's Protection
      Domain will be on the stack above the handler's Protection Domain. In
      the case of a synchronous event, the event publisher's protection domain
      can also be on the stack.</para>

      <para>Therefore, if a handler needs to perform a secure operation using
      its own privileges, it must invoke the <code>doPrivileged</code> method
      to isolate its security context from that of its caller.</para>

      <para>The event delivery mechanism must not wrap event notifications in
      a <code>doPrivileged</code> call.</para>
    </section>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.event" xml:id="org.osgi.service.event" xml:base="../../generated/javadoc/docbook/org.osgi.service.event.xml">
   <title>org.osgi.service.event</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.event-version">Version 1.3</releaseinfo>
      <edition xml:id="org.osgi.service.event-version.number">1.3</edition>
   </info>
   <para>
Event Admin Package Version 1.3.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.event; version="[1.3,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.event; version="[1.3,1.4)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.event.Event">
                  <code>Event</code>
               </link> - 
An event.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.event.EventAdmin">
                  <code>EventAdmin</code>
               </link> - 
The Event Admin service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.event.EventConstants">
                  <code>EventConstants</code>
               </link> - 
Defines standard names for <code>EventHandler</code> properties.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.event.EventHandler">
                  <code>EventHandler</code>
               </link> - 
Listener for Events.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.event.EventProperties">
                  <code>EventProperties</code>
               </link> - 
The properties for an <link linkend="org.osgi.service.event.Event">Event</link>.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.event.TopicPermission">
                  <code>TopicPermission</code>
               </link> - 
A bundle's authority to publish or subscribe to event on a topic.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="Event" xml:id="org.osgi.service.event.Event">
      <title>public class Event</title>
      <para>
An event.
 
 <code>Event</code> objects are delivered to <code>EventHandler</code> services which
 subscribe to the topic of the event.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="method" xreflabel="Event(String,Map)" xml:id="org.osgi.service.event.Event.Event-String-Map-">
         <title>public  Event(String topic,Map&lt;String,?&gt; properties)</title>
         <formalpara role="parameter">
            <title>topic</title>
            <para>The topic of the event.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>properties</title>
            <para>The event's properties (may be <code>null</code>). A
        property whose key is not of type <code>String</code> will be ignored.
        If the specified properties is an <link linkend="org.osgi.service.event.EventProperties">EventProperties</link> object,
        then it will be directly used. Otherwise, a copy of the specified
        properties is made.</para>
         </formalpara>
         <para role="description">
Constructs an event.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If topic is not a valid topic name.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="Event(String,Dictionary)" xml:id="org.osgi.service.event.Event.Event-String-Dictionary-">
         <title>public  Event(String topic,Dictionary&lt;String,?&gt; properties)</title>
         <formalpara role="parameter">
            <title>topic</title>
            <para>The topic of the event.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>properties</title>
            <para>The event's properties (may be <code>null</code>). A
        property whose key is not of type <code>String</code> will be ignored.
        A copy of the specified properties is made.</para>
         </formalpara>
         <para role="description">
Constructs an event.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If topic is not a valid topic name.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="containsProperty(String)" xml:id="org.osgi.service.event.Event.containsProperty-String-">
         <title>public final boolean containsProperty(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the property.</para>
         </formalpara>
         <para role="description">
Indicate the presence of an event property. The event topic is present
 using the property name "event.topics".
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if a property with the specified name is in the
         event. This property may have a <code>null</code> value. <code>false</code>
         otherwise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.event.Event.equals-Object-">
         <title>public boolean equals(Object object)</title>
         <formalpara role="parameter">
            <title>object</title>
            <para>The <code>Event</code> object to be compared.</para>
         </formalpara>
         <para role="description">
Compares this <code>Event</code> object to another object.
 
 </para>
         <para>
 An event is considered to be <emphasis role="strong">equal to</emphasis> another event if the topic
 is equal and the properties are equal. The properties are compared using
 the <code>java.util.Map.equals()</code> rules which includes identity
 comparison for array values.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if <code>object</code> is a <code>Event</code> and is equal to
         this object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getProperty(String)" xml:id="org.osgi.service.event.Event.getProperty-String-">
         <title>public final Object getProperty(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the property to retrieve.</para>
         </formalpara>
         <para role="description">
Retrieve the value of an event property. The event topic may be retrieved
 with the property name "event.topics".
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The value of the property, or <code>null</code> if not found.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getPropertyNames()" xml:id="org.osgi.service.event.Event.getPropertyNames--">
         <title>public final String[] getPropertyNames()</title>
         <para role="description">
Returns a list of this event's property names. The list will include the
 event topic property name "event.topics".
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A non-empty array with one element per property.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getTopic()" xml:id="org.osgi.service.event.Event.getTopic--">
         <title>public final String getTopic()</title>
         <para role="description">
Returns the topic of this event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The topic of this event.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.event.Event.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns a hash code value for this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An integer which is a hash code value for this object.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="matches(Filter)" xml:id="org.osgi.service.event.Event.matches-Filter-">
         <title>public final boolean matches(Filter filter)</title>
         <formalpara role="parameter">
            <title>filter</title>
            <para>The filter to test.</para>
         </formalpara>
         <para role="description">
Tests this event's properties against the given filter using a case
 sensitive match.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true If this event's properties match the filter, false
         otherwise.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="toString()" xml:id="org.osgi.service.event.Event.toString--">
         <title>public String toString()</title>
         <para role="description">
Returns the string representation of this event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The string representation of this event.</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="EventAdmin" xml:id="org.osgi.service.event.EventAdmin">
      <title>public interface EventAdmin</title>
      <para>
The Event Admin service. Bundles wishing to publish events must obtain the
 Event Admin service and call one of the event delivery methods.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="postEvent(Event)" xml:id="org.osgi.service.event.EventAdmin.postEvent-Event-">
         <title>public void postEvent(Event event)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>The event to send to all listeners which subscribe to the
        topic of the event.</para>
         </formalpara>
         <para role="description">
Initiate asynchronous, ordered delivery of an event. This method returns
 to the caller before delivery of the event is completed. Events are
 delivered in the order that they are received by this method.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>TopicPermission[topic,PUBLISH]</code> for the topic specified in
         the event.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="sendEvent(Event)" xml:id="org.osgi.service.event.EventAdmin.sendEvent-Event-">
         <title>public void sendEvent(Event event)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>The event to send to all listeners which subscribe to the
        topic of the event.</para>
         </formalpara>
         <para role="description">
Initiate synchronous delivery of an event. This method does not return to
 the caller until delivery of the event is completed.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>TopicPermission[topic,PUBLISH]</code> for the topic specified in
         the event.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="EventConstants" xml:id="org.osgi.service.event.EventConstants">
      <title>public interface EventConstants</title>
      <para>
Defines standard names for <code>EventHandler</code> properties.
   </para>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="field" xreflabel="BUNDLE" xml:id="org.osgi.service.event.EventConstants.BUNDLE">
         <title>public static final String BUNDLE = "bundle"</title>
         <para>
The Bundle object of the bundle relevant to the event. The type of the
 value for this event property is <link linkend="org.osgi.framework.Bundle">Bundle</link>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="BUNDLE_ID" xml:id="org.osgi.service.event.EventConstants.BUNDLE_ID">
         <title>public static final String BUNDLE_ID = "bundle.id"</title>
         <para>
The Bundle id of the bundle relevant to the event. The type of the value
 for this event property is <code>Long</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="BUNDLE_SIGNER" xml:id="org.osgi.service.event.EventConstants.BUNDLE_SIGNER">
         <title>public static final String BUNDLE_SIGNER = "bundle.signer"</title>
         <para>
The Distinguished Names of the signers of the bundle relevant to the
 event. The type of the value for this event property is <code>String</code> or
 <code>Collection</code> of <code>String</code>.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE_SYMBOLICNAME" xml:id="org.osgi.service.event.EventConstants.BUNDLE_SYMBOLICNAME">
         <title>public static final String BUNDLE_SYMBOLICNAME = "bundle.symbolicName"</title>
         <para>
The Bundle Symbolic Name of the bundle relevant to the event. The type of
 the value for this event property is <code>String</code>.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE_VERSION" xml:id="org.osgi.service.event.EventConstants.BUNDLE_VERSION">
         <title>public static final String BUNDLE_VERSION = "bundle.version"</title>
         <para>
The version of the bundle relevant to the event. The type of the value
 for this event property is <link linkend="org.osgi.framework.Version">Version</link>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="DELIVERY_ASYNC_ORDERED" xml:id="org.osgi.service.event.EventConstants.DELIVERY_ASYNC_ORDERED">
         <title>public static final String DELIVERY_ASYNC_ORDERED = "async.ordered"</title>
         <para>
Event Handler delivery quality value specifying the Event Handler
 requires asynchronously delivered events be delivered in order. Ordered
 delivery is the default for asynchronously delivered events.
 
 </para>
         <para>
 This delivery quality value is mutually exclusive with
 <link linkend="org.osgi.service.event.EventConstants.DELIVERY_ASYNC_UNORDERED">DELIVERY_ASYNC_UNORDERED</link>. However, if both this value and
 <link linkend="org.osgi.service.event.EventConstants.DELIVERY_ASYNC_UNORDERED">DELIVERY_ASYNC_UNORDERED</link> are specified for an event handler,
 this value takes precedence.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.event.EventConstants.EVENT_DELIVERY">EVENT_DELIVERY</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="DELIVERY_ASYNC_UNORDERED" xml:id="org.osgi.service.event.EventConstants.DELIVERY_ASYNC_UNORDERED">
         <title>public static final String DELIVERY_ASYNC_UNORDERED = "async.unordered"</title>
         <para>
Event Handler delivery quality value specifying the Event Handler does
 not require asynchronously delivered events be delivered in order. This
 may allow an Event Admin implementation to optimize asynchronous event
 delivery by relaxing ordering requirements.
 
 </para>
         <para>
 This delivery quality value is mutually exclusive with
 <link linkend="org.osgi.service.event.EventConstants.DELIVERY_ASYNC_ORDERED">DELIVERY_ASYNC_ORDERED</link>. However, if both this value and
 <link linkend="org.osgi.service.event.EventConstants.DELIVERY_ASYNC_ORDERED">DELIVERY_ASYNC_ORDERED</link> are specified for an event handler,
 <link linkend="org.osgi.service.event.EventConstants.DELIVERY_ASYNC_ORDERED">DELIVERY_ASYNC_ORDERED</link> takes precedence.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.event.EventConstants.EVENT_DELIVERY">EVENT_DELIVERY</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="EVENT" xml:id="org.osgi.service.event.EventConstants.EVENT">
         <title>public static final String EVENT = "event"</title>
         <para>
The forwarded event object. Used when rebroadcasting an event that was
 sent via some other event mechanism. The type of the value for this event
 property is <code>Object</code>.
   </para>
      </section>
      <section role="field" xreflabel="EVENT_DELIVERY" xml:id="org.osgi.service.event.EventConstants.EVENT_DELIVERY">
         <title>public static final String EVENT_DELIVERY = "event.delivery"</title>
         <para>
Service Registration property specifying the delivery qualities requested
 by an Event Handler service.
 </para>
         <para>
 Event handlers MAY be registered with this property. Each value of this
 property is a string specifying a delivery quality for the Event handler.
 
 </para>
         <para>
 The value of this property must be of type <code>String</code>,
 <code>String[]</code>, or <code>Collection&lt;String&gt;</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.event.EventConstants.DELIVERY_ASYNC_ORDERED">DELIVERY_ASYNC_ORDERED</link>, <link linkend="org.osgi.service.event.EventConstants.DELIVERY_ASYNC_UNORDERED">DELIVERY_ASYNC_UNORDERED</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="EVENT_FILTER" xml:id="org.osgi.service.event.EventConstants.EVENT_FILTER">
         <title>public static final String EVENT_FILTER = "event.filter"</title>
         <para>
Service Registration property specifying a filter to further select
 <code>Event</code> s of interest to an Event Handler service.
 </para>
         <para>
 Event handlers MAY be registered with this property. The value of this
 property is a string containing an LDAP-style filter specification. Any
 of the event's properties may be used in the filter expression. Each
 event handler is notified for any event which belongs to the topics in
 which the handler has expressed an interest. If the event handler is also
 registered with this service property, then the properties of the event
 must also match the filter for the event to be delivered to the event
 handler.
 </para>
         <para>
 If the filter syntax is invalid, then the Event Handler must be ignored
 and a warning should be logged.
 
 </para>
         <para>
 The value of this property must be of type <code>String</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.event.Event">Event</link>, <link linkend="org.osgi.framework.Filter">Filter</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="EVENT_TOPIC" xml:id="org.osgi.service.event.EventConstants.EVENT_TOPIC">
         <title>public static final String EVENT_TOPIC = "event.topics"</title>
         <para>
Service registration property specifying the <code>Event</code> topics of
 interest to an Event Handler service.
 </para>
         <para>
 Event handlers SHOULD be registered with this property. Each value of
 this property is a string that describe the topics in which the handler
 is interested. An asterisk ('*') may be used as a trailing wildcard.
 Event Handlers which do not have a value for this property must not
 receive events. More precisely, the value of each string must conform to
 the following grammar:
 
 </para>
         <programlisting>  topic-description := '*' | topic ( '/*' )?
  topic := token ( '/' token )*</programlisting>
         <para>
 The value of this property must be of type <code>String</code>,
 <code>String[]</code>, or <code>Collection&lt;String&gt;</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.event.Event">Event</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="EXCEPTION" xml:id="org.osgi.service.event.EventConstants.EXCEPTION">
         <title>public static final String EXCEPTION = "exception"</title>
         <para>
An exception or error. The type of the value for this event property is
 <code>Throwable</code>.
   </para>
      </section>
      <section role="field" xreflabel="EXCEPTION_CLASS" xml:id="org.osgi.service.event.EventConstants.EXCEPTION_CLASS">
         <title>public static final String EXCEPTION_CLASS = "exception.class"</title>
         <para>
The name of the exception type. Must be equal to the name of the class of
 the exception in the event property <link linkend="org.osgi.service.event.EventConstants.EXCEPTION">EXCEPTION</link>. The type of the
 value for this event property is <code>String</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="EXCEPTION_MESSAGE" xml:id="org.osgi.service.event.EventConstants.EXCEPTION_MESSAGE">
         <title>public static final String EXCEPTION_MESSAGE = "exception.message"</title>
         <para>
The exception message. Must be equal to the result of calling
 <code>getMessage()</code> on the exception in the event property
 <link linkend="org.osgi.service.event.EventConstants.EXCEPTION">EXCEPTION</link>. The type of the value for this event property is
 <code>String</code>.
   </para>
      </section>
      <section role="field" xreflabel="EXECPTION_CLASS" xml:id="org.osgi.service.event.EventConstants.EXECPTION_CLASS">
         <title>public static final String EXECPTION_CLASS = "exception.class"</title>
         <para>
This constant was released with an incorrectly spelled name. It has been
 replaced by <link linkend="org.osgi.service.event.EventConstants.EXCEPTION_CLASS">EXCEPTION_CLASS</link>
         </para>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of 1.1, replaced by EXCEPTION_CLASS</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="MESSAGE" xml:id="org.osgi.service.event.EventConstants.MESSAGE">
         <title>public static final String MESSAGE = "message"</title>
         <para>
A human-readable message that is usually not localized. The type of the
 value for this event property is <code>String</code>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE" xml:id="org.osgi.service.event.EventConstants.SERVICE">
         <title>public static final String SERVICE = "service"</title>
         <para>
A service reference. The type of the value for this event property is
 <link linkend="org.osgi.framework.ServiceReference">ServiceReference</link>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_ID" xml:id="org.osgi.service.event.EventConstants.SERVICE_ID">
         <title>public static final String SERVICE_ID = "service.id"</title>
         <para>
A service's id. The type of the value for this event property is
 <code>Long</code>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_OBJECTCLASS" xml:id="org.osgi.service.event.EventConstants.SERVICE_OBJECTCLASS">
         <title>public static final String SERVICE_OBJECTCLASS = "service.objectClass"</title>
         <para>
A service's objectClass. The type of the value for this event property is
 <code>String[]</code>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_PID" xml:id="org.osgi.service.event.EventConstants.SERVICE_PID">
         <title>public static final String SERVICE_PID = "service.pid"</title>
         <para>
A service's persistent identity. The type of the value for this event
 property is <code>String</code> or <code>Collection</code> of <code>String</code>.
   </para>
      </section>
      <section role="field" xreflabel="TIMESTAMP" xml:id="org.osgi.service.event.EventConstants.TIMESTAMP">
         <title>public static final String TIMESTAMP = "timestamp"</title>
         <para>
The time when the event occurred, as reported by
 <code>System.currentTimeMillis()</code>. The type of the value for this event
 property is <code>Long</code>.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="EventHandler" xml:id="org.osgi.service.event.EventHandler">
      <title>public interface EventHandler</title>
      <para>
Listener for Events.
 
 </para>
      <para>
         <code>EventHandler</code> objects are registered with the Framework service
 registry and are notified with an <code>Event</code> object when an event is sent
 or posted.
 </para>
      <para>
         <code>EventHandler</code> objects can inspect the received <code>Event</code> object to
 determine its topic and properties.
 
 </para>
      <para>
         <code>EventHandler</code> objects must be registered with a service property
 <link linkend="org.osgi.service.event.EventConstants.EVENT_TOPIC">EventConstants.EVENT_TOPIC</link> whose value is the list of topics in which
 the event handler is interested.
 </para>
      <para>
 For example:
 
 </para>
      <programlisting> String[] topics = new String[] {"com/isv/*"};
 Hashtable ht = new Hashtable();
 ht.put(EventConstants.EVENT_TOPIC, topics);
 context.registerService(EventHandler.class.getName(), this, ht);</programlisting>
      <para>
 
 Event Handler services can also be registered with an
 <link linkend="org.osgi.service.event.EventConstants.EVENT_FILTER">EventConstants.EVENT_FILTER</link> service property to further filter the
 events. If the syntax of this filter is invalid, then the Event Handler must
 be ignored by the Event Admin service. The Event Admin service should log a
 warning.
 </para>
      <para>
 Security Considerations. Bundles wishing to monitor <code>Event</code> objects
 will require <code>ServicePermission[EventHandler,REGISTER]</code> to register an
 <code>EventHandler</code> service. The bundle must also have
 <code>TopicPermission[topic,SUBSCRIBE]</code> for the topic specified in the event
 in order to receive the event.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.event.Event">Event</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="handleEvent(Event)" xml:id="org.osgi.service.event.EventHandler.handleEvent-Event-">
         <title>public void handleEvent(Event event)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>The event that occurred.</para>
         </formalpara>
         <para role="description">
Called by the <link linkend="org.osgi.service.event.EventAdmin">EventAdmin</link> service to notify the listener of an
 event.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="EventProperties" xml:id="org.osgi.service.event.EventProperties">
      <title>public class EventProperties<?line-break?> implements Map&lt;String,Object&gt;</title>
      <para>
The properties for an <link linkend="org.osgi.service.event.Event">Event</link>. An event source can create an
 EventProperties object if it needs to reuse the same event properties for
 multiple events.
 
 </para>
      <para>
 The keys are all of type <code>String</code>. The values are of type
 <code>Object</code>. The key "event.topics" is ignored as event topics
 can only be set when an <link linkend="org.osgi.service.event.Event">Event</link> is constructed.
 
 </para>
      <para>
 Once constructed, an EventProperties object is unmodifiable. However, the
 values of the map used to construct an EventProperties object are still
 subject to modification as they are not deeply copied.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="method" xreflabel="EventProperties(Map)" xml:id="org.osgi.service.event.EventProperties.EventProperties-Map-">
         <title>public  EventProperties(Map&lt;String,?&gt; properties)</title>
         <formalpara role="parameter">
            <title>properties</title>
            <para>The properties to use for this EventProperties object
        (may be <code>null</code>).</para>
         </formalpara>
         <para role="description">
Create an EventProperties from the specified properties.
 
 </para>
         <para>
 The specified properties will be copied into this EventProperties.
 Properties whose key is not of type <code>String</code> will be ignored. A
 property with the key "event.topics" will be ignored.</para>
      </section>
      <section role="method" xreflabel="clear()" xml:id="org.osgi.service.event.EventProperties.clear--">
         <title>public void clear()</title>
         <para role="description">
This method throws UnsupportedOperationException.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>UnsupportedOperationException</code>– if called.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="containsKey(Object)" xml:id="org.osgi.service.event.EventProperties.containsKey-Object-">
         <title>public boolean containsKey(Object name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The property name.</para>
         </formalpara>
         <para role="description">
Indicates if the specified property is present.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> If the property is present, <code>false</code> otherwise.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="containsValue(Object)" xml:id="org.osgi.service.event.EventProperties.containsValue-Object-">
         <title>public boolean containsValue(Object value)</title>
         <formalpara role="parameter">
            <title>value</title>
            <para>The property value.</para>
         </formalpara>
         <para role="description">
Indicates if the specified value is present.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> If the value is present, <code>false</code> otherwise.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="entrySet()" xml:id="org.osgi.service.event.EventProperties.entrySet--">
         <title>public Set&lt;Map.Entry&lt;String,Object&gt;&gt; entrySet()</title>
         <para role="description">
Return the property entries.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A set containing the property name/value pairs.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.event.EventProperties.equals-Object-">
         <title>public boolean equals(Object object)</title>
         <formalpara role="parameter">
            <title>object</title>
            <para>The <code>EventProperties</code> object to be compared.</para>
         </formalpara>
         <para role="description">
Compares this <code>EventProperties</code> object to another object.
 
 </para>
         <para>
 The properties are compared using the <code>java.util.Map.equals()</code>
 rules which includes identity comparison for array values.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if <code>object</code> is a <code>EventProperties</code> and
         is equal to this object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="get(Object)" xml:id="org.osgi.service.event.EventProperties.get-Object-">
         <title>public Object get(Object name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the specified property.</para>
         </formalpara>
         <para role="description">
Return the value of the specified property.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The value of the specified property.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.event.EventProperties.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns a hash code value for this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An integer which is a hash code value for this object.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="isEmpty()" xml:id="org.osgi.service.event.EventProperties.isEmpty--">
         <title>public boolean isEmpty()</title>
         <para role="description">
Indicate if this properties is empty.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> If this properties is empty, <code>false</code>
         otherwise.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="keySet()" xml:id="org.osgi.service.event.EventProperties.keySet--">
         <title>public Set&lt;String&gt; keySet()</title>
         <para role="description">
Return the names of the properties.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The names of the properties.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="put(String,Object)" xml:id="org.osgi.service.event.EventProperties.put-String-Object-">
         <title>public Object put(String key,Object value)</title>
         <para role="description">
This method throws UnsupportedOperationException.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>UnsupportedOperationException</code>– if called.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="putAll(Map)" xml:id="org.osgi.service.event.EventProperties.putAll-Map-">
         <title>public void putAll(Map&lt;? extends String,? extends Object&gt; map)</title>
         <para role="description">
This method throws UnsupportedOperationException.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>UnsupportedOperationException</code>– if called.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="remove(Object)" xml:id="org.osgi.service.event.EventProperties.remove-Object-">
         <title>public Object remove(Object key)</title>
         <para role="description">
This method throws UnsupportedOperationException.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>UnsupportedOperationException</code>– if called.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="size()" xml:id="org.osgi.service.event.EventProperties.size--">
         <title>public int size()</title>
         <para role="description">
Return the number of properties.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The number of properties.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="toString()" xml:id="org.osgi.service.event.EventProperties.toString--">
         <title>public String toString()</title>
         <para role="description">
Returns the string representation of this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The string representation of this object.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="values()" xml:id="org.osgi.service.event.EventProperties.values--">
         <title>public Collection&lt;Object&gt; values()</title>
         <para role="description">
Return the properties values.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The values of the properties.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="TopicPermission" xml:id="org.osgi.service.event.TopicPermission">
      <title>public final class TopicPermission<?line-break?> extends Permission</title>
      <para>
A bundle's authority to publish or subscribe to event on a topic.
 
 </para>
      <para>
 A topic is a slash-separated string that defines a topic.
 </para>
      <para>
 For example:
 
 </para>
      <programlisting> org/osgi/service/foo/FooEvent/ACTION</programlisting>
      <para>
         <code>TopicPermission</code> has two actions: <code>publish</code> and
 <code>subscribe</code>.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="PUBLISH" xml:id="org.osgi.service.event.TopicPermission.PUBLISH">
         <title>public static final String PUBLISH = "publish"</title>
         <para>
The action string <code>publish</code>.
   </para>
      </section>
      <section role="field" xreflabel="SUBSCRIBE" xml:id="org.osgi.service.event.TopicPermission.SUBSCRIBE">
         <title>public static final String SUBSCRIBE = "subscribe"</title>
         <para>
The action string <code>subscribe</code>.
   </para>
      </section>
      <section role="method" xreflabel="TopicPermission(String,String)" xml:id="org.osgi.service.event.TopicPermission.TopicPermission-String-String-">
         <title>public  TopicPermission(String name,String actions)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>Topic name.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>
               <code>publish</code>,<code>subscribe</code> (canonical order).</para>
         </formalpara>
         <para role="description">
Defines the authority to publish and/or subscribe to a topic within the
 EventAdmin service.
 </para>
         <para>
 The name is specified as a slash-separated string. Wildcards may be used.
 For example:
 
 </para>
         <programlisting>    org/osgi/service/fooFooEvent/ACTION
    com/isv/*
    *</programlisting>
         <para>
 A bundle that needs to publish events on a topic must have the
 appropriate <code>TopicPermission</code> for that topic; similarly, a bundle
 that needs to subscribe to events on a topic must have the appropriate
 <code>TopicPermssion</code> for that topic.
 </para>
         <para/>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.event.TopicPermission.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>The object to test for equality with this
        <code>TopicPermission</code> object.</para>
         </formalpara>
         <para role="description">
Determines the equality of two <code>TopicPermission</code> objects.
 
 This method checks that specified <code>TopicPermission</code> has the same
 topic name and actions as this <code>TopicPermission</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if <code>obj</code> is a <code>TopicPermission</code>, and has
         the same topic name and actions as this <code>TopicPermission</code>
         object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getActions()" xml:id="org.osgi.service.event.TopicPermission.getActions--">
         <title>public String getActions()</title>
         <para role="description">
Returns the canonical string representation of the
 <code>TopicPermission</code> actions.
 
 </para>
         <para>
 Always returns present <code>TopicPermission</code> actions in the following
 order: <code>publish</code>,<code>subscribe</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Canonical string representation of the <code>TopicPermission</code>
         actions.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.event.TopicPermission.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code value for this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A hash code value for this object.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="implies(Permission)" xml:id="org.osgi.service.event.TopicPermission.implies-Permission-">
         <title>public boolean implies(Permission p)</title>
         <formalpara role="parameter">
            <title>p</title>
            <para>The target permission to interrogate.</para>
         </formalpara>
         <para role="description">
Determines if the specified permission is implied by this object.
 
 </para>
         <para>
 This method checks that the topic name of the target is implied by the
 topic name of this object. The list of <code>TopicPermission</code> actions
 must either match or allow for the list of the target object to imply the
 target <code>TopicPermission</code> action.
 
 </para>
         <programlisting>    x/y/*,"publish" -&gt; x/y/z,"publish" is true
    *,"subscribe" -&gt; x/y,"subscribe"   is true
    *,"publish" -&gt; x/y,"subscribe"     is false
    x/y,"publish" -&gt; x/y/z,"publish"   is false</programlisting>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the specified <code>TopicPermission</code> action is
         implied by this object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="newPermissionCollection()" xml:id="org.osgi.service.event.TopicPermission.newPermissionCollection--">
         <title>public PermissionCollection newPermissionCollection()</title>
         <para role="description">
Returns a new <code>PermissionCollection</code> object suitable for storing
 <code>TopicPermission</code> objects.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new <code>PermissionCollection</code> object.</para>
         </formalpara>
         <para/>
      </section>
   </section>
</section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="121" revision="$Id: 6bb30be9c62ad05f124d6e94f40630283101cc91 $" version="5" xml:id="service.blueprint" xml:base="../121/service.blueprint.xml">
  <title>Blueprint Container Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.blueprint.container-version" linkend="org.osgi.service.blueprint.container"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>One of the great promises of object oriented languages was the
    greater reuse it should enable. However, over time it turned out that
    reuse was still hard. One of the key reasons was
    <emphasis>coupling</emphasis>. Trying to reuse a few classes usually ended
    up in dragging in many more classes, that in their turn dragged in even
    more classes, <emphasis>ad nauseum</emphasis>.</para>

    <para>One of the key innovations in the Java language to address this
    coupling issue were <emphasis>interfaces</emphasis>. Interfaces
    significantly could minimize coupling because they were void of any
    implementation details. Any class can use an interface, where that
    interface can be implemented by any other class. However, coupling was
    still necessary because objects need to be created, and for creating an
    object its concrete class is necessary.</para>

    <para>One of the most successful insights in the software industry of late
    has been <emphasis>inversion of control</emphasis>, or more specific
    <emphasis>dependency injection</emphasis>. With dependency injection, an
    object is given the collaborators that it needs to work with. By not
    creating these dependencies itself, the object is not coupled to the
    concrete type of these implementations and their transitive implementation
    dependencies. However, these objects are not useful on their own, they can
    only function when an external party provides these objects with their
    collaborating objects.</para>

    <para>An injection framework creates these objects, and also their
    concrete dependencies, and wires them together. Injection frameworks can
    significantly increase reuse and provide increased flexibility. For
    example, during testing it is possible to inject mocked up objects instead
    of the actual objects.</para>

    <para>There exists a number of these injection frameworks in the market,
    for example <xref linkend="i1954805"/>, <xref linkend="i1954924"/>, and
    <xref linkend="i1954940"/>. These containers are configured with XML, Java
    annotations, or provide automatic configuration based on types.</para>

    <para>Decoupling is one of the primary drivers for the OSGi
    specifications. The module layer provides many mechanisms to hide
    implementation details and explicitly defines any dependencies. The
    service layer provides a mechanism to collaborate with other bundles
    without caring about who that other bundle is. However, using the OSGi
    APIs to construct an application out of services and objects also implies
    coupling to these OSGi APIs.</para>

    <para>This specification therefore defines a dependency injection
    framework, specifically for OSGi bundles, that understands the unique
    dynamic nature of services. It provides an OSGi bundle programming model
    with minimal implementation dependencies and virtually no accidental
    complexity in the Java code. Bundles in this programming model contain a
    number of XML definition resources which are used by the Blueprint
    Container to wire the application together and start it when the bundle is
    active.</para>

    <para>This Blueprint Container specification is derived from the <xref linkend="i1954997"/> project.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Dependency Injection Framework</emphasis> - Provide
          an advanced dependency injection framework for bundles that can
          create and wire objects and services together into an
          application.</para>
        </listitem>

        <listitem>
          <para><emphasis>Inversion of Control</emphasis> - (IOC) A pattern in
          which a framework/library provides the control over the component
          instances instead of the other way around. Dependency injection is a
          form of IOC.</para>
        </listitem>

        <listitem>
          <para><emphasis>Extender Model</emphasis> - Enable the configuration
          of components inside a bundle based on configuration data provided
          by the bundle developer. The life cycle of these components is
          controlled by the extender based on the extended bundle's
          state.</para>
        </listitem>

        <listitem>
          <para><emphasis>Unencumbered</emphasis> - Do not require any special
          bundle activator or other code to be written inside the bundle in
          order to have components instantiated and configured.</para>
        </listitem>

        <listitem>
          <para><emphasis>Services</emphasis> - Enable the usage of OSGi
          services as injected dependencies.</para>
        </listitem>

        <listitem>
          <para><emphasis>Dependencies</emphasis> - Allow components to depend
          on other components like services and beans as well as register as
          services, with the full breadth of the OSGi capabilities.</para>
        </listitem>

        <listitem>
          <para><emphasis>Dynamicity</emphasis> - Minimize the complexity of
          using the dynamicity of services</para>
        </listitem>

        <listitem>
          <para><emphasis>Business Logic</emphasis> - A focus on writing
          business logic in regular Java classes that are not required to
          implement certain framework APIs or contracts in order to integrate
          with a container.</para>
        </listitem>

        <listitem>
          <para><emphasis>Declarative</emphasis> - This facilitates
          independent testing of components and reduces environment
          dependencies.</para>
        </listitem>

        <listitem>
          <para><emphasis>Familiarity</emphasis> - Familiar to enterprise Java
          developers.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Blueprint Extender</emphasis> - The bundle that
          creates and injects component instances for a Blueprint bundle as
          configured in that Blueprint bundle's XML definition
          resources.</para>
        </listitem>

        <listitem>
          <para><emphasis>Blueprint Container</emphasis> - Represents the
          activities of the Blueprint Extender for a specific Blueprint
          Bundle.</para>
        </listitem>

        <listitem>
          <para><emphasis>Blueprint Bundle</emphasis> - A bundle that is being
          constructed by the Blueprint Container because it has a
          Bundle-Blueprint header or it contains XML resources in the
          <code>OSGI-INF/blueprint</code> directory.</para>
        </listitem>

        <listitem>
          <para><emphasis>Manager</emphasis> - A manager is responsible for
          the life cycle of all <emphasis>component instances</emphasis> for
          one <emphasis>component definition</emphasis>. There are the
          following types of managers. A manager is a <emphasis>bean
          manager</emphasis>, a <emphasis>service reference
          manager</emphasis>, or a <emphasis>service manager</emphasis>. A
          manager can have <emphasis>explicit</emphasis> and
          <emphasis>implicit</emphasis> dependencies on other manager. During
          instantiation and runtime, a manager can
          <emphasis>provide</emphasis> a component instance to be injected or
          used in other ways.</para>
        </listitem>

        <listitem>
          <para><emphasis>Component</emphasis> - A loosely defined term for
          the application building blocks and their infrastructure. Components
          are instantiated into <emphasis>component instances</emphasis> by a
          <emphasis>manager</emphasis> that is configured with a
          <emphasis>Component Metadata</emphasis> subclass that is derived
          from a <emphasis>Component Definition</emphasis>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Component Instance</emphasis> - An object that is
          part of the application. Component Instances are created and managed
          by their component <emphasis>manager</emphasis>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Component Definition</emphasis> - Configuration data
          used by a manager to construct and manage component instances. This
          configuration data is represented in Metadata, an interface
          hierarchy starting with the <emphasis>Metadata</emphasis>
          interface.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bean Manager</emphasis> - A manager that has
          metadata for creating Java objects and injecting them with objects
          and component instances that come from other managers it implicitly
          depends on.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service Manager</emphasis> - A manager that handles
          the registration of a service object that is provided by a component
          instance.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service Reference Manager</emphasis> - The general
          name for the reference and reference-list managers.</para>
        </listitem>

        <listitem>
          <para><emphasis>Reference Manager</emphasis> - A manager that
          handles the dependency on a single OSGi service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Reference-list Manager</emphasis> - A manager that
          handles the dependency on a list of OSGi services.</para>
        </listitem>

        <listitem>
          <para><emphasis>Environment Manager</emphasis> - A manager that can
          provide information from the Bundle's environment. For example, the
          <code>BlueprintContainer</code> object is made available through an
          environment manager.</para>
        </listitem>

        <listitem>
          <para><emphasis>Target</emphasis> - A manager type useful in a
          callback context. These are the ref (which is an indirection to), a
          reference, and a bean manager.</para>
        </listitem>

        <listitem>
          <para><emphasis>Property</emphasis> - A conceptual instance variable
          of a component instance provided by a bean manager that is set on
          the component instance with a corresponding
          <code>set&lt;Name&gt;</code> method.</para>
        </listitem>

        <listitem>
          <para><emphasis>Argument</emphasis> - Metadata for an argument in a
          constructor or method.</para>
        </listitem>

        <listitem>
          <para><emphasis>Type Converter</emphasis> - A component instance
          defined, or referenced, in the type-converters section implementing
          the <code>Converter</code> interface.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Blueprint Class and Service Overview</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.062in" contentwidth="7.000in" fileref="blueprint-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Synopsis</title>

      <para>The Blueprint Extender bundle waits for Blueprint bundles. These
      are bundles that contain Blueprint XML resources called the definitions.
      These XML resources can be found in a fixed location or pointed to from
      a manifest header. When a Blueprint extender bundle detects that a
      Blueprint bundle is ready, it creates a Blueprint Container to manage
      that Blueprint bundle.</para>

      <para>The Blueprint Container then parses the definitions into metadata
      objects. All top-level elements in the definitions are
      <code>ComponentMetadata</code> objects and are registered in the
      Blueprint Container by their id.</para>

      <para>For each of the <code>ComponentMetadata</code> objects, the
      Blueprint Container has a corresponding component manager. For example,
      a <code>BeanMetadata</code> object relates to a Bean Manager instance.
      There are the following types of managers:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Bean Managers</emphasis> - Can provide general
          objects that are properly constructed and configured</para>
        </listitem>

        <listitem>
          <para><emphasis>Service Managers</emphasis> - Can register
          services</para>
        </listitem>

        <listitem>
          <para><emphasis>Service Reference Managers</emphasis> - Provide
          proxies to one or more services. There are two sub-types:
          reference-list and reference.</para>
        </listitem>

        <listitem>
          <para><emphasis>Environment Managers</emphasis> - Holding
          environment values like the Blueprint <code>Bundle</code>
          object</para>
        </listitem>
      </itemizedlist>

      <para>After creation, all managers are not yet activated. A manager is
      activated on demand when it has to provide a component instance for the
      first time.</para>

      <para>All service reference managers track services in the service
      registry in order to determine if they are satisfied or not. If not, the
      Blueprint Container can optionally start a <emphasis>grace</emphasis>
      period. During the grace period, the Blueprint Container waits for all
      mandatory service reference managers to become satisfied. If this does
      not happen during the grace period, the Blueprint Container must abort
      the initialization.</para>

      <para>From now on, the Blueprint Container is ready to provide component
      instances. Whenever a manager is asked to provide a component instance
      for the first time, the manager is activated. This activation will first
      request all its dependencies to provide a component instance, activating
      these managers if not already activated, recursively.</para>

      <para>However, the activation needs a trigger to start. There are two
      triggers.</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Service Request</emphasis> - All service managers
          must have a Service Factory registered with the OSGi service
          registry whenever that service manager is enabled, see <xref linkend="i2630717"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Eager Managers</emphasis> - To kick start the
          application in the bundle, the Blueprint Container must ask all
          eager managers to provide a component instance, thereby activating
          these managers, see <xref linkend="i2081951"/>.</para>
        </listitem>
      </itemizedlist>

      <para>Service references must actuate their reference listeners when
      they are activated.</para>

      <para>Bean managers have a scope. This scope can be
      <code>singleton</code>, where the manager always provides the same
      object, or <code>prototype</code>, where the manager creates a new
      object for each request.</para>

      <para>Service reference managers provide proxies to the actual service
      objects and fetch the service object lazily. They provide a constant
      reference that dampen the dynamics of the underlying service
      objects.</para>

      <para>If the Blueprint Container has successfully activated the eager
      managers, it will register a Blueprint Container service.</para>

      <para>When the Blueprint Container must be destroyed because: the
      Blueprint bundle has stopped, there is a failure, or the Blueprint
      extender is stopped, then the Blueprint Container service is
      unregistered and all managers are deactivated. This will unregister any
      services and disable listeners, which release the component instances.
      Then all component instances are destroyed in reverse dependency order.
      That is, a component instance is destroyed when no other component
      instances depend on it.</para>
    </section>
  </section>

  <section>
    <title>Managers</title>

    <para>The key feature of the Blueprint Container specification is to let
    the application in the bundle be constructed in the proper order from
    objects that are not required to be aware of Blueprint, OSGi, or even each
    other. These objects are called <emphasis>component instances</emphasis>.
    The active entity that orchestrates the life cycle of the bundle
    application is the <emphasis>Blueprint Container</emphasis>. It is
    configured by XML resources in the Blueprint bundle. The Blueprint
    Container is responsible for construction and configuration of the
    component instances as well as the interaction with the service
    registry.</para>

    <para>Inside the Blueprint Container, component instances are managed by a
    <emphasis>manager</emphasis>. A manager is configured with one Component
    Definition, for example a bean definition, and can then provide one or
    more component instances. Such a configured manager instance is also
    loosely called a <emphasis>component</emphasis>.</para>

    <para>A manager can have additional behavior associated with it. This
    behavior is controlled by the manager's <emphasis>type</emphasis>. This
    specification defines a number of manager types: bean, service,
    environment, reference, and reference-list. These types are further
    defined in the next section.</para>

    <para>These managers are conceptual, they are not visible in the API of
    this specification. That is, an implementation is free to implement the
    specification without these objects as long as the externally observable
    behavior is the same.</para>

    <para>As an example, a trivial echo service:</para>

    <programlisting>&lt;blueprint&gt;
   &lt;service id="echoService" 
            interface="com.acme.Echo" ref="echo"/&gt;
   &lt;bean id="echo" class="com.acme.EchoImpl"&gt;
     &lt;property name="message" value="Echo: "/&gt;
   &lt;/bean&gt;
&lt;/blueprint&gt;

public interface Echo {
  public String echo(String m);
}
public class EchoImpl implements Echo {
  String message;
  public void setMessage(String m) {
    this.message= m;
  }
  public void echo(String s) { return message + s; }
}  </programlisting>

    <para>The example defines two <emphasis>top-level</emphasis> managers:
    <code>echoService</code> and <code>echo</code>. The
    <code>echoService</code> manager is of type <emphasis>service</emphasis>,
    and the <code>echo</code> manager is of type <emphasis>bean</emphasis>.
    The service manager is responsible for registering an OSGi service, where
    the service object will be the component instance provided by the
    <code>echo</code> manager. The <code>echo</code> component instance gets a
    message injected.</para>

    <para>As seen from the example, managers can use component instances from
    other managers to construct their component instances. The use of other
    managers creates an <emphasis>implicit dependency</emphasis>. Managers can
    also declare <emphasis>explicit dependencies</emphasis>. Dependencies are
    transitive, see <xref linkend="i2739446"/> for more information. In the
    previous example, the <code>echoService</code> service manager depends on
    the <code>echo</code> manager, this is an implicit dependency.</para>

    <para>Managers have their own life cycle. They are conceptually created
    after the Blueprint Container has decided to run the application, see
    <xref linkend="i2931886"/>. However, the intention of this specification
    is to allow the bundle application to lazily
    <emphasis>activate</emphasis>. That is, no application code is used until
    there is a trigger like a service request or a service manager has an
    explicit dependency. A manager must always be atomically activated before
    it provides its first component instance. During activation, listeners are
    actuated and notified, service objects are requested, etc. The details are
    described in the appropriate manager's type description.</para>

    <para>Each manager type has an associated <emphasis>component
    metadata</emphasis> type. Component Metadata is used to configure a
    manager. XML definition resources in the bundle define the source for this
    Metadata. In the previous example, the <code>service</code> and
    <code>bean</code> XML element are translated to a
    <code>ServiceMetadata</code> and <code>BeanMetadata</code> object
    respectively.</para>

    <para>The Blueprint Container maintains a registry of managers by their
    <emphasis>id</emphasis>. These are the managers that are called the
    <emphasis>top-level</emphasis> managers. Top level managers are managers
    defined as child elements of the top XML <code>blueprint</code> element or
    bean managers in the <code>type-converters</code> element. Their Metadata
    is registered under their id (or calculated id) in the Blueprint
    Container. All top level managers share a single namespace. That is, it is
    an error if the same <code>id</code> is used multiple times or attempts to
    override the built-in environment managers.</para>

    <para>Top level managers can depend on other top level managers but there
    are many places where a manager can depend on an <emphasis>inlined
    </emphasis>manager. In these places, a complete manager can be defined
    inside another manager. Such inlined managers are always
    <emphasis>anonymous</emphasis>: they must not have an id and must not be
    registered as a top-level manager. Inlined beans are further constrained
    to always have <code>prototype</code> scope. That is, every time they are
    asked to provide a component instance, they must return a different
    object.</para>

    <para>When the Blueprint Container must be <emphasis>destroyed</emphasis>,
    all <code>singleton</code> component instances that have been created must
    be destroyed. This must first <emphasis>deactivate</emphasis> all
    activated managers. All these managers must release their dependencies on
    any component instances they hold. Then the Blueprint Container must
    destroy all <code>singleton</code> component instances. The order of this
    destruction must be such that a component instance is only destroyed if
    there are no other component instances depending on it. See <xref linkend="i2491884"/>.</para>

    <para>The relations between manager types, component instances, metadata
    and the Blueprint Container is schematically depicted in <xref linkend="i2517280" xrefstyle="template:Figure %n on page %p"/>.</para>

    <figure xml:id="i2517280">
      <title>Managers and Metadata</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="3.751in" contentwidth="4.901in" fileref="managers-metadata.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <section>
      <title>Manager Types</title>

      <para>Blueprint only supports a fixed set of the following
      <emphasis>manager types</emphasis>:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Bean</emphasis> - A bean manager provides regular
          Java objects as component instances. It has the following
          features:</para>

          <itemizedlist>
            <listitem>
              <para>Construction via class name, static factory method, or a
              factory method on a <emphasis>target</emphasis>. A
              <emphasis>target</emphasis> is a reference to a top level
              manager of type bean or service reference, or a referral to a
              top level manager of those types.</para>
            </listitem>

            <listitem>
              <para>Can have <emphasis>arguments</emphasis> for a constructor
              or factory method.</para>
            </listitem>

            <listitem>
              <para>Can have <emphasis>properties</emphasis> that are
              injected.</para>
            </listitem>

            <listitem>
              <para>Manages a singleton or creates objects on demand depending
              on its <emphasis>scope</emphasis>.</para>
            </listitem>

            <listitem>
              <para>Life cycle callbacks for end of initialization and
              destruction.</para>
            </listitem>
          </itemizedlist>

          <para>See <xref linkend="i2217757"/> for more details.</para>
        </listitem>

        <listitem>
          <para><emphasis>Reference</emphasis> - Reference managers track a
          service in the OSGi service registry. When activated, they provide a
          proxy to a service object. See <xref linkend="i2468749"/> for more
          details. A reference is satisfied when its selection matches a
          service in the registry.</para>
        </listitem>

        <listitem>
          <para><emphasis>Reference-list</emphasis> - Reference-list managers
          track multiple services. A reference-list is satisfied when its
          selection matches one or more services in the registry. See <xref linkend="i2468749"/> for more details.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service</emphasis> - Service managers maintain the
          registration of an OSGi service object. Service managers provide a
          proxied <code>ServiceRegistration</code> object so that the
          application code has a constant reference, even if the service is
          unregistered and then registered again. A service manager is
          <emphasis>enabled</emphasis> if all the mandatory service references
          in its dependencies are satisfied. See <xref linkend="i1947792"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Environment</emphasis> - Environment managers
          provide access to the environment of the Blueprint bundle, for
          example its Bundle Context. See <xref linkend="i2088582"/> for more
          details.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Metadata Objects</title>

      <para><code>Metadata</code> objects hold the configuration information
      (from the Component Definition) for the managers. These metadata objects
      represent the element structure found in the XML definitions in
      canonical form. Each element in the XML has a corresponding Metadata
      sub-type that has a name that maps directly to the element. For example,
      the <code>bean</code> element represents the bean manager that has its
      configuration data defined in the <code>BeanMetadata</code>
      interface.</para>

      <para>There are <code>Metadata</code> interfaces for all the manager
      types, except the environment type. Some dependency injections require
      the construction of arrays, maps, properties, simple objects, etc. For
      these type of objects, additional Metadata sub-interfaces are defined;
      these interfaces provide the information to construct the basic
      programming types. For example, the <code>CollectionMetadata</code>
      interface contains the information to construct an Array or Collection
      of a given type, where its member values are defined by other
      <code>Metadata</code> objects.</para>

      <para>The set of Metadata types is fixed in this specification, just
      like the set of manager types. It is impossible to extend this set with
      user defined Metadata types. For more information about Metadata, see
      <xref linkend="i2373727"/>.</para>
    </section>

    <section>
      <title>Activation and Deactivation</title>

      <para>Managers are created after all the definitions are parsed. Some
      managers can already show some activity, for example service managers
      always activate explicit dependencies and register a Service Factory
      with the OSGi service registry. However, in this state a manager should
      attempt to not use any resources from the Blueprint bundle until it is
      activated itself.</para>

      <para>A manager must be atomically activated when it has to provide its
      first component instance. During activation it can perform a manager
      specific initialization that will actually consume resources from the
      Blueprint bundle. This activation must be atomic. That is, if a manager
      is being activated then other threads must block until the activation is
      completed.</para>

      <para>Deactivation only happens during the destruction of the Blueprint
      Container. During deactivation, a manager must release any dependencies
      on resources of the Blueprint bundle. No components instances are
      destroyed during deactivation because the singleton component instance
      destruction must happen after all managers are deactivated.</para>

      <para>Each manager type has a dedicated section that describes what must
      happen during its activation and deactivation.</para>
    </section>

    <section xml:id="i2739446">
      <title>Manager Dependencies</title>

      <para>Managers that refer to other managers depend on these managers
      transitively. For example, a service manager depends directly on the
      manager that provides the service object. In its turn, that service
      object could depend on any provided objects that were used to construct
      and inject this service object, and so on. This transitive set of
      dependencies are called <emphasis>implicit dependencies</emphasis>
      because these dependencies are implicitly created by the use of other
      managers in the Component Definitions.</para>

      <para>Managers can also be configured with <emphasis>explicit
      dependencies</emphasis>. The XML definitions for all managers have a
      <code>depends-on</code> attribute with a whitespace delimited list of
      manager ids. Each of these <code>depends-on</code> managers must provide
      an object, that will be ignored. The timing of activation of
      dependencies depends on the specific managers but in general should
      happen before any observable behavior.</para>

      <para>There is no ordering guarantee between independent sets of
      dependencies. The dependency graph is based on the managers, not the
      component instances. For example, the following definition:</para>

      <programlisting>&lt;blueprint default-activation='eager'&gt;
  &lt;bean id='A'...&gt;  &lt;argument ref='B'&gt; &lt;/bean&gt;
  &lt;bean id='B' depends-on='C E'...&gt;  
    &lt;argument ref='C'&gt; 
  &lt;/bean&gt;
  &lt;bean id='C' scope='prototype' ...&gt;  
    &lt;argument ref='D'&gt; 
  &lt;/bean&gt;
  &lt;bean id='D' .../&gt;
  &lt;bean id='E' ...&gt; &lt;argument ref='C'/&gt; &lt;/bean&gt;
  &lt;bean id='F' depends-on='B' activation="lazy"/&gt;
&lt;/blueprint&gt;</programlisting>

      <para>After initialization, there will be the following component
      instances: <code>a</code>, <code>b</code>, <code>d</code>,
      <code>e</code>, and three <code>c</code>'s. Lower case names are used
      for instances, the corresponding upper case is its manager. The ordering
      guarantee is that manager <code>D</code> is activated before manager
      <code>C</code>, manager <code>C</code> is activated before manager
      <code>E</code> and <code>B</code>, manager <code>E</code> is activated
      before manager <code>B</code>, and manager <code>B</code> is activated
      before manager <code>A</code>. There will be no component instance
      <code>f</code> created because <code>F</code> is a lazy manager. There
      are three <code>c</code>'s because manager <code>E</code> and
      <code>B</code> have an implicit dependency on <code>C</code> and manager
      <code>B</code> has an additional explicit dependency, totaling 3
      dependencies. One of these <code>c</code>'s is an orphan and will be
      garbage collected over time because it is not referred to by any
      component instance.</para>

      <para>The example is depicted in <xref linkend="i2660491" xrefstyle="template:Figure %n on page %p"/>.</para>

      <figure xml:id="i2660491">
        <title>Dependency Graph after initialization</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.882in" contentwidth="4.948in" fileref="graph-after-init.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section xml:id="i2491884">
      <title>Reverse Dependency Order</title>

      <para>The destruction of component instances must be done in
      <emphasis>reverse dependency order</emphasis>. This concept is defined
      as only destroying a singleton component instance (in a manager specific
      way) when no other activated singleton component instance has an
      implicit or explicit dependency on it. That is, a component instance has
      no more field references to other component instances. A component that
      never was activated does not have any dependencies.</para>

      <para>This strategy will ensure that a component instance cannot have an
      instance field that refers to an component instance that has been
      destroyed.</para>

      <para>Deactivating the manager will release its dependencies, which then
      frees up other component instances until all component instances are
      destroyed, or there are cyclic references. In the case of cyclic
      dependencies, the order of destruction is undefined.</para>

      <para>In the example depicted in <xref linkend="i2660491" xrefstyle="template:Figure %n on page %p"/>, the previous rules imply
      that component instance <code>a</code> can be immediately destroyed
      first because it has no clients. After component instance <code>a</code>
      is destroyed, component instance <code>b</code> becomes free because no
      other component instances refer to it. The explicit dependency from
      manager <code>F</code> to manager <code>B</code> was never activated, so
      it is not taken into account. The destruction of component instance
      <code>b</code> frees up component instance <code>e</code> and
      <code>c</code> because now the explicit dependency from manager
      <code>B</code> to manager <code>E</code> and manager <code>B</code> to
      manager <code>C</code> have been released. Manager <code>C</code> is
      deactivated but no component instances are destructed because it has
      prototype scope; these managers do not destroy their component
      instances. Then component instance <code>d</code> can be
      destructed.</para>
    </section>

    <section>
      <title>Cyclic Dependencies</title>

      <para>The implicit and explicit dependencies of a component form a
      dependency graph. In the ideal case, this graph should be free from
      <emphasis>cycles</emphasis>. A cycle occurs when a set of one or more
      managers find themselves in their own implicit or explicit dependencies.
      For example:</para>

      <programlisting>public class A { public A(B b); }
public class B { public void setA(A a); }

&lt;bean id="a" class="A"&gt; &lt;argument ref="b"/&gt; &lt;/bean&gt;
&lt;bean id="b" class="B"&gt; &lt;property name="a" ref="a"/&gt; &lt;/bean&gt;</programlisting>

      <para>In this example, the cycle is the set <code>{a,b}</code>. Managers
      can be part of multiple cycles.</para>

      <para>When a member of a cycle is requested to provide a component
      instance, the Blueprint Container must break the cycle by finding one
      <emphasis>breaking member</emphasis> in the cycle's members. A breaking
      member must be a singleton bean and use property injection for the
      dependency that causes the cycle. The Blueprint Container can pick any
      suitable member of the cycle for breaking member, if no such member can
      be found, then initialization fails or the
      <code>getComponentInstance</code> method must throw a Component
      Definition Exception.</para>

      <para>In the previous example, manager <code>b</code> can be a breaking
      member because it uses the property injection for the cyclic dependency
      on manager <code>a</code>. Manager <code>a</code> cannot be a breaking
      member because the cyclic dependency is caused by a constructor
      argument, a breaking member must use property injection for the cyclic
      dependency to be broken.</para>

      <para>A breaking member must return a partially initialized component
      instance when it is asked to provide an object. A partially initialized
      object has done all possible initialization but has not yet been called
      with the <code>initMethod</code> (if specified) nor has it been injected
      any of the properties that causes a cycle. The
      <emphasis>finalization</emphasis> of the partially initialized component
      instance must be delayed until the breaking member has been injected in
      all referring members of the cycles. Finalization means injecting any
      remaining unset properties and calling of the <code>initMethod</code>,
      if specified.</para>

      <para>The consequence of partially initialized component instances is
      that they can be used before they have all properties set, applications
      must be aware of this.</para>

      <para>All partially initialized component instances must be finalized
      before the Blueprint Container enters the Runtime phase and before a
      call to the <code>getComponentInstance</code> method returns a component
      instance.</para>

      <para>All detected cycles should be logged.</para>

      <para>Consider the following example:</para>

      <programlisting>public class A {
 public A(B b) {}
}
public class B {
 public B(A a) {}
}</programlisting>

      <para>And the configuration:</para>

      <programlisting>&lt;bean id="a" class="A"&gt; &lt;argument ref="b"/&gt; &lt;/bean&gt;
&lt;bean id="b" class="B"&gt; &lt;argument ref="a"/&gt; &lt;/bean&gt;</programlisting>

      <para>In this case, the cycle cannot be broken because neither manager
      qualifies as breaking manager because they have a constructor/factory
      argument dependency. That is, it is impossible to construct an object
      without using the dependency. However, consider the following
      example:</para>

      <programlisting>public class A {
 public A(B b) {}
}
public class B {
 public B(C c) {}
}
public class C {
  public void setA(A a) {}
}</programlisting>

      <para>And the configuration:</para>

      <programlisting>&lt;bean id="a" class="A"&gt; &lt;argument ref="b"/&gt; &lt;/bean&gt;
&lt;bean id="b" class="B"&gt; &lt;argument ref="c"/&gt; &lt;/bean&gt;
&lt;bean id="c" class="C" init-method="done"&gt; 
    &lt;property name="a" ref="a"/&gt;      
&lt;/bean&gt;</programlisting>

      <para>This configuration is depicted in <xref linkend="i2799562" xrefstyle="template:Figure %n on page %p"/>. This cycle
      <code>{a,b,c}</code> can be broken by selecting manager <code>c</code>
      as the breaking member. If manager <code>a</code> is requested to
      provide a component instance for the first time, then the following
      sequence takes place:</para>

      <programlisting>activate a
  activate b
    activate c
      c = new C()
    b = new B(c)
  a = new A(b)
  c.seta(a)
  c.done()
return a</programlisting>

      <figure xml:id="i2799562">
        <title>Cyclic Dependency</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="0.635in" contentwidth="4.948in" fileref="cyclic-dependency.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Cycles must be broken, if possible, both for
      <code>singleton</code> managers as well as <code>prototype</code> beans,
      although a breaking manager must always be a <code>singleton</code> bean
      because a <code>prototype</code> bean must always return a new object,
      making it impossible to break the cycle by returning a partially
      initialized component instance. That is, the following definition is not
      allowed to attempt to create an infinite loop:</para>

      <programlisting>&lt;bean id="a" scope="singleton" class="A"&gt; 
  &lt;property name="a" ref="a"&gt;
&lt;/bean&gt;</programlisting>

      <para>The previous definition must create an <code>A</code> object that
      refers to itself. However, if the example had used a
      <code>prototype</code> scope, it would be an unbreakable cycle.</para>
    </section>

    <section>
      <title>Eager Managers</title>

      <para>The Blueprint Container can force the activation of the
      application in the Blueprint bundle with <emphasis>eager</emphasis>
      managers. An eager manager is a manager that has the
      <code>activation</code> set to <code>eager</code>. A bean manager can
      only be <code>eager</code> if it has <code>singleton</code>
      scope.</para>

      <para>Eager managers are explicitly activated by asking them to provide
      a component instance after all other initialization is done. A bundle
      that wants to be lazily initialized should not define any eager
      managers.</para>
    </section>
  </section>

  <section xml:id="i2931886">
    <title>Blueprint Life-Cycle</title>

    <para>A bundle is a <emphasis>Blueprint bundle</emphasis> if it contains
    one or more blueprint XML <emphasis>definition</emphasis> resources in the
    <code>OSGI-INF/blueprint</code> directory or it contains the
    Bundle-Blueprint manifest header referring to existing resources.</para>

    <para>A <emphasis>Blueprint extender</emphasis> is an implementation of
    this specification and must track<emphasis> </emphasis>blueprint bundles
    that are <emphasis>type compatible</emphasis> for the Blueprint packages
    and initialize them appropriately. The timing and ordering of the
    initialization process is detailed in the following section.</para>

    <para>There should be only one Blueprint extender present in an OSGi
    framework because this specification does not specify a way to resolve the
    conflicts that arise when two Blueprint extenders extend the same
    Blueprint bundle.</para>

    <section>
      <title>Class Space Compatibility</title>

      <para>A Blueprint extender must not manage a Blueprint bundle if there
      is a class space incompatibility for the
      <code>org.osgi.service.blueprint</code> packages. For example, if the
      Blueprint bundle uses the <code>BlueprintContainer</code> class, then it
      must import the <code>org.osgi.service.blueprint.container</code>
      package. The Blueprint extender and the Blueprint bundle must then share
      the same class space for this package. Type compatibility can be
      verified by loading a class from the blueprint packages via the
      Blueprint extender bundle and the Blueprint bundle's
      <code>loadClass</code> methods. If the Blueprint bundle cannot load the
      class or the class is identical to the class loaded from the extender,
      then the two bundles are compatible for the given package. If the
      Blueprint extender is not class space compatible with the Blueprint
      bundle, then Blueprint extender must not start to manage the Blueprint
      bundle.</para>
    </section>

    <section xml:id="i2272468">
      <title>Initialization of a Blueprint Container</title>

      <para>A Blueprint extender manages the application life cycle of
      Blueprint bundles based on:</para>

      <itemizedlist>
        <listitem>
          <para>The Blueprint bundle state,</para>
        </listitem>

        <listitem>
          <para>The Blueprint definitions,</para>
        </listitem>

        <listitem>
          <para>The Blueprint extender's bundle state</para>
        </listitem>

        <listitem>
          <para>The class space compatibility</para>
        </listitem>
      </itemizedlist>

      <para>All activities on behalf of the Blueprint bundle must use the
      Bundle Context of the Blueprint bundle. All dynamic class loads must use
      the Blueprint bundle's <code>Bundle</code> <code>loadClass</code>
      method.</para>

      <para>The following sections describe a linear process that handles one
      Blueprint bundle as if it was managed by a special thread, that is,
      waits are specified if the thread waits. Implementations are likely to
      use a state machine instead for each managed Blueprint bundle, the
      linear description is only used for simplicity.</para>

      <para>In the following description of the initialization steps, the
      Blueprint Container will update its state. State changes are broadcast
      as events, see <xref linkend="i2148562"/>.</para>

      <para>If any failure occurs during initialization, or the Blueprint
      bundle or Blueprint extender bundle is stopped, the Blueprint Container
      must be destroyed, see <xref linkend="i2143970"/>. These checks are not
      indicated in the normal flow for clarity.</para>

      <section xml:id="i2959082">
        <title>Initialization Steps</title>

        <para>The initialization process of a Blueprint Container is defined
        in the following steps:</para>

        <orderedlist>
          <listitem>
            <para>Wait until a blueprint bundle is <emphasis>ready</emphasis>.
            A blueprint bundle is ready when it is in the <code>ACTIVE</code>
            state, and for blueprint bundles that have a <code>lazy</code>
            activation policy, also in the <code>STARTING</code> state.</para>
          </listitem>

          <listitem>
            <para>Prepare, verify if this Blueprint bundle must be managed,
            see <xref linkend="i2959070"/>.</para>
          </listitem>

          <listitem>
            <para>State = <code>CREATING</code></para>
          </listitem>

          <listitem>
            <para>Parse the XML definition resources.</para>
          </listitem>

          <listitem>
            <para>Service reference managers must start tracking their
            satisfiability without actually activating. See <xref linkend="i2157344"/>.</para>
          </listitem>

          <listitem>
            <para>If all mandatory service references are satisfied, or the
            <code>blueprint.graceperiod</code> is <code>false</code>, then go
            to step <xref linkend="i2543924"/>.</para>
          </listitem>

          <listitem>
            <para>State = <code>GRACE_PERIOD</code></para>
          </listitem>

          <listitem>
            <para>Perform the <emphasis>grace period</emphasis>. This period
            waits until all mandatory service references are satisfied. See
            <xref linkend="i2456332"/>. This step fails if the mandatory
            dependencies are not satisfied at the end of the grace
            period.</para>
          </listitem>

          <listitem xml:id="i2543924">
            <para>The Blueprint Container is now ready to provide component
            instances.</para>
          </listitem>

          <listitem>
            <para>Service managers must initialize their explicit dependencies
            and have a Service Factory registered during the periods that they
            are enabled. See <xref linkend="i2584179"/>.</para>
          </listitem>

          <listitem>
            <para>Ask all eager managers to provide a component instance. See
            <xref linkend="i2081951"/>.</para>
          </listitem>

          <listitem>
            <para>State = <code>CREATED</code></para>
          </listitem>

          <listitem>
            <para>Register the Blueprint Container</para>
          </listitem>

          <listitem>
            <para>The components are now active and perform their function
            until the Blueprint bundle or the Blueprint extender bundle are
            stopped.</para>
          </listitem>

          <listitem>
            <para>State = <code>DESTROYING</code></para>
          </listitem>

          <listitem>
            <para>Perform the Destroy phase, see <xref linkend="i2497674"/>.</para>
          </listitem>

          <listitem>
            <para>State = <code>DESTROYED</code></para>
          </listitem>
        </orderedlist>
      </section>

      <section xml:id="i2143970">
        <title>Failure</title>

        <para>If at any time there is a failure, the Blueprint Container
        must:</para>

        <orderedlist>
          <listitem>
            <para>State = <code>FAILURE</code></para>
          </listitem>

          <listitem>
            <para>Unregister the Blueprint Container service.</para>
          </listitem>

          <listitem>
            <para>Destroy the Blueprint Container.</para>
          </listitem>

          <listitem>
            <para>Wait for the Blueprint bundle to be stopped.</para>
          </listitem>
        </orderedlist>
      </section>

      <section>
        <title>Diagram</title>

        <para>This initialization process is depicted in <xref linkend="i2055945" xrefstyle="template:Figure %n on page %p"/>.</para>

        <figure pgwide="1" xml:id="i2055945">
          <title>Blueprint Bundle Initialization</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" contentdepth="5.423in" contentwidth="4.947in" fileref="blueprint-bundle-init.svg"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
    </section>

    <section>
      <title>Extensions</title>

      <para>A compliant implementation of this specification must follow the
      rules as outlined. However, implementations can provide functional
      extensions by including attributes or elements of other namespaces. For
      example, a Blueprint extender implementation that supports proxying of
      certain classes and a number of additional type converters could include
      a <code>http://www.acme.com/extensions</code> namespace that adds an
      <code>extensions</code> attribute on the <code>blueprint</code>
      element:</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;blueprint
 xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
 xmlns:ext="http://www.acme.com/extensions"

  ext:extensions="proxyClasses"
&gt;
  ...
&lt;/blueprint&gt;</programlisting>

      <para>Blueprint extenders that detect the use of an unrecognized
      namespace must fail to signal a portability problem.</para>
    </section>

    <section xml:id="i2959070">
      <title>Preparing</title>

      <para>Blueprint definitions are stored as resources in the Blueprint
      bundle. If a Bundle-Blueprint manifest header is defined, then this
      header contains a list of paths. The Bundle-Blueprint header has the
      following syntax:</para>

      <programlisting>Bundle-Blueprint ::= header 
                     // See Common Header Syntax in Core</programlisting>

      <para>This specification does not define any attributes or directives
      for this header. Implementations can provide proprietary parameters that
      should be registered with the OSGi Alliance to prevent name collisions.
      The non-localized version of the header must be used.</para>

      <para>The last component of each path in the Bundle-Blueprint header may
      use wildcards so that <code>Bundle.findEntries</code> can be used to
      locate the XML document within the bundle and its fragments. The
      <code>findEndtries</code> method must always be used in the
      non-recursive mode. Valid paths in the header have one of the following
      forms:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>absolute path</emphasis> - The path to a resource in
          the fragment or directory, this resource must exist. For example
          <code>cnf/start.xml</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>directory</emphasis> - The path to directory in a
          fragment or main bundle, the path must end in a solidus (<code>'/'
          \u002F</code>). The pattern used in the <code>findEntries</code>
          method must then be <code>*.xml</code>. The directory is allowed to
          be empty.</para>
        </listitem>

        <listitem>
          <para><emphasis>pattern</emphasis> - The last component of the path
          specifies a filename with optional wildcards. The part before is the
          path of directory in the bundle or one of its fragments. These two
          parts specify the parameter to <code>findEntries</code>. It is
          allowed to have no matching resources. An example of a pattern is:
          <code>cnf/*.xml</code>.</para>
        </listitem>
      </itemizedlist>

      <para>If no resources can be found, then the Blueprint bundle will not
      be managed and the initialization exits.</para>

      <para>For example, the following header will read the resources
      <code>/lib/account.xml</code>, <code>/security.bp</code>, and all
      resources which path ends in <code>.xml</code> in the <code>/cnf</code>
      directory:</para>

      <programlisting>Bundle-Blueprint: lib/account.xml, security.bp,cnf/*.xml</programlisting>

      <para>If the Bundle-Blueprint header is not defined, then its default
      value is:</para>

      <programlisting>OSGI-INF/blueprint/*.xml</programlisting>

      <para>A Bundle-Blueprint manifest header specified in a fragment is
      ignored by the Blueprint Container. However, XML documents referenced by
      a bundle's Bundle-Blueprint manifest header, or its default, may be
      contained in attached fragments, as defined by the
      <code>findEntries</code> method.</para>

      <para>If the Bundle-Blueprint header is specified but empty, then the
      Blueprint bundle must not be managed. This can be used to temporarily
      disable a Blueprint bundle.</para>
    </section>

    <section>
      <title>Parsing</title>

      <para>The Blueprint Container must parse the XML definitions into the
      Blueprint Container's metadata registry. Parsing fails if:</para>

      <itemizedlist>
        <listitem>
          <para>A path from the Bundle-Blueprint header cannot be found in the
          bundle or any of its fragments.</para>
        </listitem>

        <listitem>
          <para>An XML definition does not validate against its schema.</para>
        </listitem>

        <listitem>
          <para>The XML elements do not meet one or more of their
          constraints</para>
        </listitem>

        <listitem>
          <para>Any errors occur</para>
        </listitem>
      </itemizedlist>

      <para>For failure, see <xref linkend="i2009036"/>.</para>
    </section>

    <section xml:id="i2157344">
      <title>Tracking References</title>

      <para>Service reference managers must track the service registry to see
      if they are satisfied or not. These managers must not be activated to
      register these service listeners nor must they activate any dependencies
      until they are activated. That is, no component instances for the
      reference listeners are obtained until the service reference manager is
      activated.</para>
    </section>

    <section xml:id="i2456332">
      <title>Grace Period</title>

      <para>A Blueprint Container by default will wait for its dependencies in
      the <emphasis>grace period</emphasis>. However, this can be overridden
      with a directive on the Bundle-SymbolicName header of the Blueprint
      bundle:</para>

      <itemizedlist>
        <listitem>
          <para><code>blueprint.graceperiod</code> (
          <code>true</code>|<code>false</code>) - If set to <code>true</code>,
          then the Blueprint Container must enter the grace period and wait
          for dependencies, this is the default. Otherwise, it must skip the
          grace period and progress to the next phase regardless if there are
          any unsatisfied service references.</para>
        </listitem>
      </itemizedlist>

      <para>The purpose of the grace period is to handle the initialization of
      multiple bundles <emphasis>gracefully</emphasis>. The grace period will
      first wait a configurable time for all mandatory service references to
      become satisfied, or for the bundle to stop. If these mandatory services
      are satisfied, then the grace period succeeds, otherwise it will fail.
      If the bundle is stopped during the grace period, then the Blueprint
      Container must be destroyed.</para>

      <para>During the waiting period services can come and go. Each time such
      a service event takes place that involves any of the mandatory service
      references, the Blueprint Container must send out another
      <code>GRACE_PERIOD</code> event if that event does not result in ending
      the grace period. The event contains the complete filters of the
      unsatisfied service references, see <xref linkend="i2951918"/>.</para>

      <para>The wait time for the grace period is defined in a directive on
      the Bundle-SymbolicName header of the Blueprint bundle:</para>

      <itemizedlist>
        <listitem>
          <para><code>blueprint.timeout</code> (<code>Integer &gt;= 0</code>)
          - The time to wait in the grace period for dependencies to become
          satisfied in milliseconds. The default is 300000, which is 5
          minutes. If the <code>timeout</code> is 0, an indefinite wait will
          take place.</para>
        </listitem>
      </itemizedlist>

      <para>OSGi services are dynamic, therefore the grace period does not
      guarantee that all mandatory service references are still available. It
      only guarantees that at one moment in time they were available. A
      mandatory reference can become <emphasis>unsatisfied</emphasis> at any
      moment in time when a service is not available. See the <xref linkend="i1766539"/> for a description of how this is handled.</para>

      <para>For example, the following header will make the bundle wait a
      maximum of 10 seconds for its mandatory service references to be
      satisfied. These dependencies must be satisfied, or a failure
      occurs.</para>

      <programlisting>Bundle-SymbolicName: com.acme.foo;
    blueprint.graceperiod:=true;
    blueprint.timeout:= 10000</programlisting>
    </section>

    <section xml:id="i2584179">
      <title>Service Registration</title>

      <para>A service manager must first activate all its explicit
      dependencies but it must not activate. It must then ensure that a
      Service Factory object is registered as a service when that service is
      <emphasis>enabled</emphasis>. Enabled means that all of the mandatory
      service references in its dependencies are satisfied.</para>

      <para>Once the Service Factory is registered, any bundle can get the
      corresponding service object. Such a request must activate the service
      manager, if it is not already activated. Activation of a service manager
      must obtain a component instance from the Blueprint Container for the
      service object and any registration listeners. The registration
      listeners are then actuated and notified of the initial state.</para>
    </section>

    <section xml:id="i2081951">
      <title>Eager Instantiation</title>

      <para>After all initialization is done, the Blueprint Container is
      ready. It is now possible to request component instances. If a bundle
      needs immediate startup because they cannot wait until they are
      triggered, then it should set the <code>activation</code> of its bean
      managers to <code>eager</code>. The Blueprint Container must request all
      eager managers to provide a component instance in this instantiation
      phase, see also <xref linkend="i2707929"/>.</para>
    </section>

    <section>
      <title>Runtime Phase</title>

      <para>The Blueprint Container must be registered as a service with the
      following service properties:</para>

      <itemizedlist>
        <listitem>
          <para><code>osgi.blueprint.container.symbolicname</code> - The
          bundle symbolic name of the Blueprint bundle</para>
        </listitem>

        <listitem>
          <para><code>osgi.blueprint.container.version</code> - The version of
          the Blueprint bundle</para>
        </listitem>
      </itemizedlist>

      <para>The Blueprint Container service must only be available during the
      runtime phase when initialization has succeeded.</para>

      <para>As long as the Blueprint extender and the Blueprint bundle are
      active, the application is in the runtime phase. The component instances
      perform their requested functionality in collaboration. The Blueprint
      Container can be used to provide objects from the defined managers, get
      information about the configuration, and general state information, see
      <xref linkend="i2088582"/>.</para>
    </section>

    <section xml:id="i2497674">
      <title>Destroy the Blueprint Container</title>

      <para>The Blueprint Container must be destroyed when any of the
      following conditions becomes true:</para>

      <itemizedlist>
        <listitem>
          <para>The Blueprint bundle is stopped, that is, it is no longer
          ready.</para>
        </listitem>

        <listitem>
          <para>The Blueprint extender is stopped</para>
        </listitem>

        <listitem>
          <para>One of the initialization phases failed.</para>
        </listitem>
      </itemizedlist>

      <para>Destroying the Blueprint Container must occur synchronously with
      the Bundle <code>STOPPING</code> event if that caused any of the
      previous conditions. For example, if the Blueprint extender is stopped,
      it must synchronously destroy all Blueprint Containers it has
      created.</para>

      <para>Destroying the Blueprint Container means:</para>

      <orderedlist>
        <listitem>
          <para>Unregistering the Blueprint Container service</para>
        </listitem>

        <listitem>
          <para>Deactivating all managers.</para>
        </listitem>

        <listitem>
          <para>Destroying all component instances in reverse dependency
          order, see <xref linkend="i2491884"/>.</para>
        </listitem>
      </orderedlist>

      <para>A Blueprint Container must continue to follow the destruction even
      when component instances throw exceptions or other problems occur. These
      errors should be logged.</para>

      <para>If the Blueprint extender is stopped, then all its active
      Blueprint Containers must be destroyed in an orderly fashion,
      synchronously with the stopping of the Blueprint extender bundle.
      Blueprint Containers must use the following algorithm to destroy
      multiple Blueprint Containers:</para>

      <orderedlist>
        <listitem xml:id="service.blueprint-extenderstop1">
          <para>Destroy Blueprint Containers that do not have any services
          registered that are in use by other bundles. More recently installed
          bundles must be destroyed before later installed bundles, that is,
          reverse bundle id order.</para>
        </listitem>

        <listitem>
          <para>The previous step can have released services, therefore,
          repeat step <xref linkend="service.blueprint-extenderstop1"/> until
          no more Blueprint Containers can be destroyed.</para>
        </listitem>

        <listitem>
          <para>If there are still Blueprint Containers that are not
          destroyed, then destroy the Blueprint Container with:</para>

          <itemizedlist>
            <listitem>
              <para>The registered service that is in use with the lowest
              ranking number, or if a tie</para>
            </listitem>

            <listitem>
              <para>The highest registered service id</para>
            </listitem>
          </itemizedlist>

          <para>If there are still Bundle Containers to be destroyed, retry
          step <xref linkend="service.blueprint-extenderstop1"/></para>
        </listitem>
      </orderedlist>

      <para>During the shutting down of an OSGi framework, it is likely that
      many bundles are stopped near simultaneously. The Blueprint extender
      should be able to handle this case, without deadlock, when the stop of a
      Blueprint bundle overlaps with the stop of the Blueprint extender
      bundle.</para>
    </section>

    <section xml:id="i2009036">
      <title>Failure</title>

      <para>If a failure occurs during the initialization of the Blueprint
      bundle, then first a <code>FAILURE</code> event must be posted, see
      <xref linkend="i2148562"/>. Then the Blueprint Container should be
      destroyed, ensuring that no uninitialized or half initialized objects
      are destroyed. Failures should be logged if a Log Service is
      present.</para>
    </section>

    <section>
      <title>Lazy</title>

      <para>The Blueprint Container specification specifically allows lazy
      initialization of the application in the Blueprint bundle. No component
      instances are created until an eager manager is activated, or a service
      request comes in.</para>

      <para>If no eager managers are defined and no service has explicit
      dependencies, then no component instances are provided until an external
      trigger occurs. This trigger can be a service request or a call to the
      <code>getComponentInstance</code> method of the Blueprint Container,
      which is registered as a service. This allows a Blueprint bundle to not
      create component instances, and thereby load classes, until they are
      really needed. This can significantly reduce startup time.</para>

      <para>Some features of the component definitions can only be verified by
      inspecting a class. This class loading can break the lazy initialization
      of a Blueprint bundle. It is therefore allowed to delay this kind of
      verification until the activation of a manager.</para>

      <para>This lazy behavior is independent of the bundle's lazy activation
      policy. Though the Blueprint extender recognizes this policy to detect
      when the bundle is ready (for a lazy activated bundle the
      <code>STARTING</code> state is like the <code>ACTIVE</code> state), it
      is further ignored. That is, the relation between a Bundle Activator
      that is lazily activated and the Blueprint Container is not
      defined.</para>
    </section>
  </section>

  <section>
    <title>Blueprint Definitions</title>

    <para>The Blueprint XML resources in a bundle are the<emphasis>
    definitions</emphasis>. Each definition can include multiple namespaces.
    Implementations of the Blueprint core namespace must strictly follow this
    specification, if they add additional behavior they must add additional
    namespaces that are actually used in the definitions to signal the
    deviation from this specification.</para>

    <para>The namespace for the core Blueprint definition resources is:</para>

    <programlisting>http://www.osgi.org/xmlns/blueprint/v1.0.0</programlisting>

    <para>Blueprint resources that use this core specification must have as
    top the <code>blueprint</code> element. The following example shows the
    body of a Blueprint definition:</para>

    <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;blueprint
 xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"&gt;
  ...
&lt;/blueprint&gt;</programlisting>

    <para>The recommended prefix for the Blueprint core namespace is
    <code>bp</code>.</para>

    <para>All elements in the Blueprint namespace are prepared for future
    extensions and provide a <code>description</code> child element in most
    positions.</para>

    <section>
      <title>XML</title>

      <para>In the following sections, the XML is explained using the normal
      syntax notation used for headers. There is, however, one addition to the
      normal usage specific to XML, and that is the use of the angled brackets
      ( &lt;&gt;). A term enclosed in angled brackets, indicates the use of a
      real element. Without the angled brackets it is the definition of a term
      that is expanded later to a one or more other terms or elements. For
      example:</para>

      <programlisting>people     ::= &lt;person&gt; *
person     ::= &lt;child&gt;* address
address    ::= &lt;fr&gt; | &lt;us&gt; | &lt;nl&gt;</programlisting>

      <para>Describes for example the following XML:</para>

      <programlisting>&lt;people&gt;
    &lt;person id="mieke"&gt;
        &lt;child name="mischa"/&gt;
        &lt;child name="thomas"/&gt;
        &lt;fr zip="34160"/&gt;
    &lt;/person&gt;
&lt;/people&gt;</programlisting>

      <para>Attributes are described in tables that define how they map to
      their corresponding Metadata. As a rule, the XML elements and attributes
      are expressed directly in the Metadata.</para>

      <para>The text in the following sections is a normative description of
      the semantics of the schema. However, the structure information is
      illustrative. For example, all <code>description</code> elements have
      been ignored for brevity. The exact structure is described by the XML
      schema, see <xref linkend="i2152341"/>.</para>

      <para>There are a number of convenient XML types used in the following
      sections. There schema types are defined here:</para>

      <itemizedlist>
        <listitem>
          <para><code>qname</code> - A fully qualified Java class name in
          dotted form, for example <code>java.lang.String</code>.</para>
        </listitem>

        <listitem>
          <para><code>method</code> - A valid Java method name, for example
          <code>setFoo</code>.</para>
        </listitem>

        <listitem>
          <para><code>NCName</code> - A string syntax for names defined in
          <xref linkend="i2584676"/>.</para>
        </listitem>

        <listitem>
          <para><code>ID</code> - A string syntax for ids defined in <xref linkend="i2584676"/>.</para>
        </listitem>

        <listitem>
          <para><code>type</code> - A name of a Java type including arrays,
          see the next section <xref linkend="i2972566"/>.</para>
        </listitem>

        <listitem>
          <para><code>target</code> - An inline bean, reference, or ref, see
          <xref linkend="i2983382"/>.</para>
        </listitem>

        <listitem>
          <para><code>object</code> - An object value, see <xref linkend="i2352936"/></para>
        </listitem>
      </itemizedlist>

      <para>In several cases, the actual syntax depends on the type
      conversion. This type of syntax is indicated with
      <code>&lt;&lt;type&gt;&gt;</code> indicates that the syntax of the
      string depends on the type conversion, where ten type is usually given
      as a parameter on the same Metadata.</para>
    </section>

    <section xml:id="i2972566">
      <title>Syntax for Java types</title>

      <para>A number of elements can refer to a Java type, for example the
      <code>value</code> element has a <code>type</code> attribute and a
      <code>map</code> element has a <code>key-type</code> attribute. The
      syntax for these types is as follows:</para>

      <programlisting>type    ::= qname array
array   ::= '[]' *</programlisting>

      <para>Where <code>qname</code> is the fully qualified name of a Java
      class or interface, or the name of a primitive type.</para>

      <para>For example:</para>

      <programlisting>&lt;value type="java.lang.String[]"/&gt;</programlisting>

      <para>It is not possible to specify generic information in this
      syntax.</para>
    </section>

    <section>
      <title>XML and Metadata</title>

      <para>The Blueprint Container parses the XML into <code>Metadata</code>
      objects, see <xref linkend="i2373727"/>. During parsing, the XML parser
      validates against the detailed Blueprint schema and will therefore catch
      many errors. However, the XML schema and the Metadata type are not
      equivalent. The XML contains many conveniences that the Blueprint
      Container must convert to the canonical type in the Metadata. A number
      of general rules apply for this conversion:</para>

      <itemizedlist>
        <listitem>
          <para>An absent attribute will result in <code>null</code>, unless
          the schema element provides a default value. In that case, the
          default must be returned from the Metadata object. That is, a
          default is indistinguishable from a specifically set value.</para>
        </listitem>

        <listitem>
          <para>Defaults from the <code>blueprint</code> element are filled in
          the <code>Metadata</code> objects, they are not available in any
          other way.</para>
        </listitem>

        <listitem>
          <para>Strings are trimmed from extraneous whitespace, as described
          in XML normalization.</para>
        </listitem>

        <listitem>
          <para>Child elements are represented by <code>List</code> objects,
          in the order of their definition. If no child elements are
          specified, the list will be empty.</para>
        </listitem>
      </itemizedlist>

      <para>For example, the <code>activation</code> feature reflects the
      total of <code>default-activation</code> and <code>activation</code>
      attributes but does not reflect that a <code>prototype</code> scope
      always makes a bean lazy. That is, even if <code>activation</code> is
      <code>eager</code>, the bean must still have <code>lazy
      activation</code> when it has <code>prototype</code> scope.</para>
    </section>

    <section>
      <title>&lt;blueprint&gt;</title>

      <para>The <code>blueprint</code> element is the top element. The
      definitions consist of two sections: the <code>type-converter</code>
      section and the managers section.</para>

      <programlisting>blueprint           ::= &lt;type-converters&gt;manager*
manager             ::= &lt;bean&gt; | &lt;service&gt;  
                               | service-reference
service-reference   ::= &lt;reference&gt; | &lt;reference-list&gt;
type-converters     ::= &lt;bean&gt; | &lt;ref&gt;</programlisting>

      <para>In this specification, the reference and reference-list managers
      are referred to as <emphasis>service reference</emphasis>s when their
      differences are irrelevant. The <code>blueprint</code> element structure
      is visualized in <xref linkend="i1791257"/>.</para>

      <figure xml:id="i1791257">
        <title>Managers (bold = element name, plain=base type)</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.224in" contentwidth="4.675in" fileref="managers.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Metadata</title>

      <para>The blueprint element has no corresponding Metadata class.</para>
    </section>

    <section>
      <title>Defaults</title>

      <para>The <code>blueprint</code> element supports the setting of the
      diverse defaults for the current definition resource with the following
      attributes:</para>

      <itemizedlist>
        <listitem>
          <para><code>default-activation</code> - Controls the default for the
          <code>activation</code> attribute on a manager. See <xref linkend="i2707929"/>. The default for this attribute is
          <code>eager</code>.</para>
        </listitem>

        <listitem>
          <para><code>default-availability</code> - The default availability
          of the service reference elements, see <xref linkend="i2468749"/>.
          The default for this attribute is <code>mandatory</code>.</para>
        </listitem>

        <listitem>
          <para><code>default-timeout</code> - The default for the
          <code>reference</code> element <code>timeout</code> attribute, see
          <xref linkend="i2468749"/>. The default for this attribute is 30000,
          or 5 minutes.</para>
        </listitem>
      </itemizedlist>

      <para>These defaults are specific for one definition resource, they
      apply only to elements enclosed to any depth in the
      <code>blueprint</code> element. These defaults are not visible in the
      Metadata.</para>
    </section>

    <section xml:id="i2709370">
      <title>&lt;type-converters&gt;</title>

      <para>The Blueprint definitions are text based but the component
      instances require actual classes for their construction and dependency
      injection. Component instances are injected with general objects the
      target type is not always compatible with the source type. This
      specification therefore allows for <emphasis>type conversion</emphasis>.
      Type conversion rules are specified in <xref linkend="i1864218"/>. This
      section provides beans, or referrals to beans, that can be used in this
      type conversion process. They are listed in a separate section so they
      can be registered as a type converter, pre-instantiated, and preventing
      dependencies that easily become cyclic. Beans defined in the
      <code>type-converters</code> element must be registered as top-level
      managers.</para>

      <para>The structure of the <code>type-converters</code> element
      is:</para>

      <programlisting>type-converters     ::= ( &lt;bean&gt; | &lt;ref&gt; )*</programlisting>

      <para>Type converters defined with the <code>ref</code> element can
      refer to bean managers or reference managers. Type converters must have
      ids distinct from any other manager and are available through the
      Blueprint Container's <code>getComponentInstance</code> method.</para>
    </section>

    <section xml:id="i3005561">
      <title>manager</title>

      <para>The component XML schema type is the base type of the
      <code>bean</code>, <code>service</code>, <code>reference-list</code>,
      and <code>reference</code> elements. All manager sub-types share the
      following attributes:</para>

      <itemizedlist>
        <listitem>
          <para><code>id</code> - The manager and its Metadata are identified
          by its <code>id</code> as defined in its Component Definition. In
          general this id is therefore referred to as the <emphasis>component
          id</emphasis>. This is an optional attribute. If it is not defined,
          a default calculated unique id will be assigned to it for top-level
          managers. For inlined managers, the <code>id</code> attribute cannot
          be set, their Metadata must return <code>null</code>. All top level
          manager ids must be unique in a Blueprint Container.</para>

          <para>The id attribute must be of type <code>ID</code> as defined in
          XML Schema, see <xref linkend="i2584676"/>. The syntax for an id is
          therefore:</para>

          <programlisting>id  ::=     ID              // See ID in <xref linkend="i2584676"/></programlisting>

          <para>Ids generally use camel case, like <code>myComponent</code>,
          and they are case sensitive. That is, component id
          <code>madHatter</code> and <code>madhatter</code> are distinct ids.
          Applications should not use ids starting with the prefix
          <code>blueprint</code>.</para>

          <para>Ids are not required, if no component id is specified, the
          Blueprint Container must assign a unique id when it is a configured
          in a top level element. This calculated <code>id</code> must start
          with a full stop (<code>'.' \u002E</code>).</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para><code>activation</code> - Defines the activation mode to be
          lazy or eager. See <xref linkend="i2081951"/>.</para>
        </listitem>

        <listitem>
          <para><code>dependsOn</code> - The list of explicit dependencies
          that must be activated. See <xref linkend="i2706015"/>.</para>
        </listitem>
      </itemizedlist>

      <para>The Metadata interface of top level managers will be a
      sub-interface of <code>ComponentMetadata</code> and is available from
      the Blueprint Container by its component id.</para>

      <figure>
        <title>Inheritance hierarchy for managers</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.032in" contentwidth="4.936in" fileref="manager-inheritance-hierarchy.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section xml:id="i2706015">
      <title>Explicit Dependencies</title>

      <para>The <code>dependsOn</code> list contains the ids of the top-level
      managers the bean explicitly depends on. Unless stated otherwise in the
      specific manager description, explicit dependencies must be activated
      before their manager is activated.</para>

      <para>For example:</para>

      <programlisting>&lt;bean id="alice" class="com.acme.MadHatter" 
        depends-on="cheshire rabbit queen"/&gt;</programlisting>

      <para>This example will ask the top level managers
      <code>cheshire</code>, <code>rabbit</code>, and <code>queen</code> to
      provide an object before <code>alice</code> is activated. For a
      discussion about dependencies see <xref linkend="i2739446"/>.</para>
    </section>

    <section xml:id="i2707929">
      <title>Lazy and Eager</title>

      <para>During initialization, all <emphasis>eager</emphasis> top level
      managers are requested to provide a component instance. Applications can
      use this request as an indication to start providing their intended
      functionality.</para>

      <para>Managers that are <emphasis>lazy</emphasis>, that is, not
      <code>singleton</code> scope, <code>activation</code> is
      <code>lazy</code>, or inlined, are activated when they are first asked
      to provide a component instance. Therefore, even lazy managers can
      activate during initialization when they happen to be a dependency of
      another manager that activates its dependencies.</para>

      <para>Services and service references can also have <code>lazy</code> or
      <code>eager</code> activation. The <code>eager</code> activation will
      ensure that all listeners are properly actuated during the corresponding
      activation. For services, the service object is then also requested at
      startup.</para>

      <para>The following example defines an eager bean by making it a
      <code>singleton</code> and setting the <code>activation</code> to
      <code>eager</code>:</para>

      <programlisting>&lt;bean id="eager" scope="singleton"
        class="com.acme.FooImpl" <code>activation</code>="eager"/&gt;</programlisting>
    </section>

    <section xml:id="i2983382">
      <title>Target</title>

      <para>In several places in the Blueprint schema it is necessary to refer
      to a <emphasis>target</emphasis>. A target is a:</para>

      <itemizedlist>
        <listitem>
          <para><code>ref</code> - Must reference one of the following
          managers</para>
        </listitem>

        <listitem>
          <para><code>reference</code> - An inlined reference manager</para>
        </listitem>

        <listitem>
          <para><code>bean</code> - An inlined bean manager</para>
        </listitem>
      </itemizedlist>

      <para>The target type is normally used for listeners, service objects,
      and other places where a general application component instance is
      required.</para>
    </section>
  </section>

  <section xml:id="i2217757">
    <title>Bean Manager</title>

    <para>A bean manager provides an arbitrary Java object. It constructs this
    object from a given class or factory and then configures the object by
    injecting its <emphasis>properties</emphasis> with other component
    instances or more general object values.</para>

    <para>The provided component instance can be a <code>singleton</code> or a
    new object can be returned on every invocation (<code>prototype</code>),
    this behavior is defined with the <code>scope</code> attribute, see <xref linkend="i3015704"/>.</para>

    <para>The provided object can optionally be notified when all of its
    properties have been injected, and when the providing bean manager will be
    deactivated, see <xref linkend="i2339865"/>.</para>

    <section>
      <title>Bean Component XML</title>

      <para>The structure of a <code>bean</code> element is:</para>

      <programlisting>bean    ::= ( &lt;argument&gt; | &lt;property&gt;)*</programlisting>

      <figure>
        <title>Bean Structure</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.586in" contentwidth="4.675in" fileref="bean-structure.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>&lt;bean&gt;</title>

      <para>The Metadata for a bean manager is represented in the
      <code>BeanMetadata</code> interface, which extends
      <code>ComponentMetadata</code>. <xref linkend="service.blueprint-bean.manager.features"/> provides an overview
      of the related XML definitions and the <code>BeanMetadata</code>
      interface. The table only provides a summary, the sometimes subtle
      interactions between the different features are discussed in later
      sections.</para>

      <table xml:id="service.blueprint-bean.manager.features">
        <title>Bean Manager Features</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3" colwidth="3*"/>

          <colspec colnum="4" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute or Element</entry>

              <entry>Syntax</entry>

              <entry>Bean Metadata</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>id</code></entry>

              <entry><code>ID</code></entry>

              <entry><para><code>id</code></para><para><code>:
              String</code></para></entry>

              <entry><para>The id of a top level manager, must be unique in
              the Blueprint Container. All inlined managers must return
              <code>null</code> for their id.</para></entry>
            </row>

            <row>
              <entry><code>activation</code></entry>

              <entry><para><code>  lazy</code></para><para><code>|
              eager</code></para></entry>

              <entry><para><code>activation</code></para><para><code>:
              int</code></para></entry>

              <entry><para>Defines if this bean is lazily or eagerly
              activated. If not explicitly set, the <code>blueprint</code>
              element's value for the <code>default-activation</code>
              attributes is used. If this is also not set, the value is
              <code>eager</code>. See <xref linkend="i2707929"/>.</para></entry>
            </row>

            <row>
              <entry><code>depends-on</code></entry>

              <entry><code>NCName*</code></entry>

              <entry><para><code>dependsOn</code></para><para><code>:
              List&lt;String&gt;</code></para></entry>

              <entry><para>Explicit list of ids that are the dependencies.
              These referred managers must be activated before this bean can
              provide an object. See <xref linkend="i2706015"/>. This is a
              whitespace separated list.</para></entry>
            </row>

            <row>
              <entry><code>class</code></entry>

              <entry><code>qname</code></entry>

              <entry><para><code>className</code></para><para><code>:
              String</code></para></entry>

              <entry><para>Class name of the object to be provided or the
              class name for a static factory. See <xref linkend="i2339858"/>.</para></entry>
            </row>

            <row>
              <entry><code>scope</code></entry>

              <entry><para><code>  singleton</code></para><para><code>|
              prototype</code></para></entry>

              <entry><para><code>scope</code></para><para><code>:
              String</code></para></entry>

              <entry><para>The scope defines the construction strategy for the
              component instance. The default is <code>singleton</code> except
              for inlined bean managers, where it is <code>prototype</code>.
              There is no schema default, so if it is not explicitly set, the
              Metadata will be <code>null</code>. See <xref linkend="i3015704"/>.</para></entry>
            </row>

            <row>
              <entry><code>init-method</code></entry>

              <entry><code>method</code></entry>

              <entry><para><code>initMethod</code></para><para><code>:
              String</code></para></entry>

              <entry><para>The name of a method to invoke when a provided
              object has been injected with all its properties. If this is not
              set, it is <code>null</code>. See <xref linkend="i2339865"/>.</para></entry>
            </row>

            <row>
              <entry><code>destroy-method</code></entry>

              <entry><code>method</code></entry>

              <entry><para><code>destroyMethod</code></para><para><code>:
              String</code></para></entry>

              <entry><para>A name of a method to invoke on the provided
              objects with <code>singleton</code> scope when the Blueprint
              Container is destroyed. If this is not set, it is
              <code>null</code>. See <xref linkend="i2339865"/>.</para></entry>
            </row>

            <row>
              <entry><code>factory-method</code></entry>

              <entry><code>method</code></entry>

              <entry><para><code>factoryMethod</code></para><para><code>:
              String</code></para></entry>

              <entry><para>The name of the method on a static or component
              instance factory. See <xref linkend="i2339858"/>.</para></entry>
            </row>

            <row>
              <entry><code>factory-ref</code></entry>

              <entry><code>NCName</code></entry>

              <entry><para><code>factoryComponent</code></para><para><code>:
              String</code></para></entry>

              <entry><para>A reference to a manager that acts as the factory.
              See <xref linkend="i2339858"/>.</para></entry>
            </row>

            <row>
              <entry><code>&lt;argument&gt;</code></entry>

              <entry><link linkend="i3002456"><code>Table</code></link></entry>

              <entry><para><code>arguments</code></para><para><code>:
              List&lt;BeanArgument&gt;</code></para></entry>

              <entry><para>Defined as sub-elements of the <code>bean</code>
              element. A <code>BeanArgument</code> object contains the value
              of an argument in the factory method or constructor. The order
              of the arguments is declaration order. See <xref linkend="i2339858"/>.</para></entry>
            </row>

            <row>
              <entry><code>&lt;property&gt;</code></entry>

              <entry><link linkend="i2355653"><code>Table</code></link></entry>

              <entry><para><code>properties</code></para><para><code>:
              List&lt;BeanProperties&gt;</code></para></entry>

              <entry><para>Defined as sub-elements of the <code>bean</code>
              element. A <code>BeanProperty</code> object provides the
              property name and injection value. See <xref linkend="i2318920"/>.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The bean element has the following constraints that are not
      enforced by the schema but must be enforced by the Blueprint
      Container:</para>

      <itemizedlist>
        <listitem>
          <para>The <code>destroyMethod</code> must not be set when the scope
          is <code>prototype</code>.</para>
        </listitem>

        <listitem>
          <para>The <code>activation</code> must not be set to
          <code>eager</code> if the bean also has <code>prototype</code>
          scope.</para>
        </listitem>

        <listitem>
          <para>The following combinations of arguments are valid, all other
          combinations are invalid:</para>

          <itemizedlist>
            <listitem>
              <para><code>className</code></para>
            </listitem>

            <listitem>
              <para><code>className</code>, <code>factory-method</code></para>
            </listitem>

            <listitem>
              <para><code>factory-ref</code>,
              <code>factory-method</code></para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i3002456">
      <title>&lt;argument&gt;</title>

      <para>The <code>argument</code> element holds a value for a constructor
      or factory method's parameters.</para>

      <table>
        <title>Bean Argument Features</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3" colwidth="3*"/>

          <colspec colnum="4" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute or Element</entry>

              <entry>Syntax</entry>

              <entry>Bean Argument</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>index</code></entry>

              <entry><code>int &gt;= 0</code></entry>

              <entry><para><code>index</code></para><para><code>:
              int</code></para></entry>

              <entry><para>The index of the argument in the constructor or
              factory-method signature. If this is not set, the Blueprint
              Container must use the type information to calculate it to match
              the disambiguation algorithm. The index will be -1 when not
              explicitly set.</para></entry>
            </row>

            <row>
              <entry><code>type</code></entry>

              <entry><code>qname</code></entry>

              <entry><para><code>valueType</code></para><para><code>:
              String</code></para></entry>

              <entry><para>The fully qualified class name of a Java type to
              match the argument to the signature against.</para></entry>
            </row>

            <row>
              <entry><code>ref</code></entry>

              <entry><code>NCName</code></entry>

              <entry><para><code>value</code></para><para><code>:
              RefMetadata</code></para></entry>

              <entry><para>A reference to a top level manager that provides
              the value for the <code>argument</code>.</para></entry>
            </row>

            <row>
              <entry><code>value</code></entry>

              <entry><code>&lt;&lt;type&gt;&gt;</code></entry>

              <entry><para><code>value</code></para><para><code>:
              ValueMetadata</code></para></entry>

              <entry><para>The Value Metadata based on the value
              property.</para></entry>
            </row>

            <row>
              <entry><code>&lt;...&gt;</code></entry>

              <entry><code>object</code></entry>

              <entry><para><code>value</code></para><para><code>:
              Metadata</code></para></entry>

              <entry><para>An inlined value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The argument element has the following additional
      constraints:</para>

      <itemizedlist>
        <listitem>
          <para>Either all arguments have a specified index or none have a
          specified index.</para>
        </listitem>

        <listitem>
          <para>If indexes are specified, they must be unique and run from
          <code>0..(n-1)</code>, where <code>n</code> is the number of
          arguments.</para>
        </listitem>

        <listitem>
          <para>The following attributes and elements are mutually
          exclusive:</para>

          <itemizedlist>
            <listitem>
              <para><code>ref</code></para>
            </listitem>

            <listitem>
              <para><code>value</code></para>
            </listitem>

            <listitem>
              <para>An inlined object value</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i2355653">
      <title>&lt;property&gt;</title>

      <para>The <code>property</code> element holds the information to inject
      a bean property with an object value.</para>

      <table>
        <title>Bean Property Features</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3" colwidth="3*"/>

          <colspec colnum="4" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute or Element</entry>

              <entry>Syntax</entry>

              <entry>Bean Property</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>name</code></entry>

              <entry><para><code>method</code></para><para><code>( '.'
              method</code></para><para><code>)*</code></para></entry>

              <entry><para><code>name</code></para><para><code>:
              String</code></para></entry>

              <entry><para>The property name, for example <code>foo</code>.
              The method name can consist of full stop separated method names,
              indicating nested property access.</para></entry>
            </row>

            <row>
              <entry><code>ref</code></entry>

              <entry><code>NCName</code></entry>

              <entry><para><code>value</code></para><para><code>:
              RefMetadata</code></para></entry>

              <entry><para>A reference to a top level manager.</para></entry>
            </row>

            <row>
              <entry><code>value</code></entry>

              <entry><code>&lt;&lt;type&gt;&gt;</code></entry>

              <entry><para><code>value</code></para><para><code>:
              ValueMetadata</code></para></entry>

              <entry><para>A Value Metadata where the type is
              <code>null</code>.</para></entry>
            </row>

            <row>
              <entry><code>&lt;...&gt;</code></entry>

              <entry><code>object</code></entry>

              <entry><para><code>value</code></para><para><code>:
              Metadata</code></para></entry>

              <entry><para>An inlined object value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The argument element has the following additional
      constraints:</para>

      <itemizedlist>
        <listitem>
          <para>The following attributes/elements are mutually
          exclusive</para>

          <itemizedlist>
            <listitem>
              <para><code>ref</code></para>
            </listitem>

            <listitem>
              <para><code>value</code></para>
            </listitem>

            <listitem>
              <para>An inlined object value</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i3015704">
      <title>Scope</title>

      <para>A bean manager has a recipe for the construction and injection of
      an object value. However, there can be different strategies in
      constructing its component instance, this strategy is reflected in the
      <code>scope</code>. The following scopes are architected for this
      specification:</para>

      <itemizedlist>
        <listitem>
          <para><code>singleton</code> - The bean manager only holds a single
          component instance. This object is created and set when the bean is
          activated. Subsequent requests must provide the same instance.
          Singleton is the default scope. It is usually used for core
          component instances as well as stateless services.</para>
        </listitem>

        <listitem>
          <para><code>prototype</code> - The object is created and configured
          anew each time the bean is requested to provide a component
          instance, that is, every call to <code>getComponentInstance</code>
          must result in a new component instance. This is usually the only
          possible scope for stateful objects. All inlined beans are always
          <code>prototype</code> scope.</para>
        </listitem>
      </itemizedlist>

      <para>Implementations can provide additional scope types. However, these
      types must only be allowed when a defining namespace is included in the
      definitions and is actually used in the definitions to specify the
      dependency on this feature.</para>
    </section>

    <section xml:id="i2339858">
      <title>Construction</title>

      <para>The Blueprint specification supports a number of ways for a bean
      manager to construct an object. Each possibility is a combination of the
      following Metadata properties:</para>

      <itemizedlist>
        <listitem>
          <para><code>className</code> - Defines the fully qualified name of a
          class to construct, or the name of a class with a static factory
          method. The class must be loadable from the Blueprint bundle
          <code>loadClass</code> method.</para>
        </listitem>

        <listitem>
          <para><code>factoryMethod</code> - A static or instance factory
          method name that corresponds to a publicly accessible method on the
          given class or factory manager.</para>
        </listitem>

        <listitem>
          <para><code>factoryComponent</code> - The id of a top-level target
          manager in the Blueprint Container that is an instance
          factory.</para>
        </listitem>
      </itemizedlist>

      <para>The Bean manager can have a number of <code>BeanArgument</code>
      objects that specify arguments for the constructor or for the factory
      class/object method. The matching constructor or method must be publicly
      accessible. The argument's <code>valueType</code> can be used to
      disambiguate between multiple signatures of constructors or methods. See
      <xref linkend="i1800540"/>.</para>

      <para>The <code>value</code> of the argument is always a
      <code>Metadata</code> object. Such an object can be converted into a
      general object value, see <xref linkend="i2352936"/>.</para>

      <para>The construction properties can be used in a rather large number
      of combinations, however, not all combinations are valid. <xref linkend="service.blueprint-bean.manager.construction"/> shows the
      different valid combinations. If none of the combinations matches, then
      the Bean Metadata is erroneous.</para>

      <para>In <xref linkend="service.blueprint-bean.manager.construction"/>,
      a variation of the following bean definition is assumed:</para>

      <programlisting>&lt;bean class="C" factory-method="f" factory-ref="fc"&gt;
    &lt;argument value="1"/&gt;
    &lt;argument value="2"/&gt;
&lt;/bean&gt;</programlisting>

      <para>This definition is invalid because it specifies an invalid
      combination of metadata properties. The only valid combinations are
      subsets, they are all specified in the following table.</para>

      <table xml:id="service.blueprint-bean.manager.construction">
        <title>Component Attributes and Construction</title>

        <tgroup cols="5">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="1*"/>

          <colspec colnum="4" colwidth="1*"/>

          <colspec colnum="5" colwidth="2*"/>

          <thead>
            <row>
              <entry>className</entry>

              <entry>factory-method</entry>

              <entry>factory-ref</entry>

              <entry>argument</entry>

              <entry>Corresponding Java Code</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>C</code></entry>

              <entry/>

              <entry/>

              <entry/>

              <entry><code>new C</code></entry>
            </row>

            <row>
              <entry><code>C</code></entry>

              <entry><code>f</code></entry>

              <entry/>

              <entry/>

              <entry><code>C.f()</code></entry>
            </row>

            <row>
              <entry><code>C</code></entry>

              <entry/>

              <entry/>

              <entry><code>1,2</code></entry>

              <entry><code>new C(1,2)</code></entry>
            </row>

            <row>
              <entry><code>C</code></entry>

              <entry><code>f</code></entry>

              <entry/>

              <entry><code>1,2</code></entry>

              <entry><code>C.f(1,2)</code></entry>
            </row>

            <row>
              <entry/>

              <entry><code>f</code></entry>

              <entry><code>$fc</code></entry>

              <entry/>

              <entry><code>$fc.f()</code></entry>
            </row>

            <row>
              <entry/>

              <entry><code>f</code></entry>

              <entry><code>$fc</code></entry>

              <entry><code>1,2</code></entry>

              <entry><code>$fc.f(1,2)</code></entry>
            </row>

            <row>
              <entry><code>*</code></entry>

              <entry><code>*</code></entry>

              <entry><code>*</code></entry>

              <entry><code>*</code></entry>

              <entry><code>failure</code></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The object created this way will be the provided object of the
      bean after any properties are injected. If the
      <code>factoryMethod</code> returns a primitive type, then this primitive
      must be converted to the corresponding wrapper type before any
      usage.</para>
    </section>

    <section xml:id="i2318920">
      <title>Properties</title>

      <para>Dependency injection configures a constructed object with the help
      of the <code>properties</code>, which is a List of
      <code>BeanProperty</code> objects. A Bean Property has the following
      features:</para>

      <itemizedlist>
        <listitem>
          <para><code>name</code> - The name of the bean property. This name
          refers to the <code>set</code> method on the constructed object as
          specified in the design pattern for beans getters and setters, see
          <xref linkend="i1704220"/>. For example, if the property name is
          <code>foo</code>, then the public method <code>setFoo(arg)</code>
          will be used to set the value. There should only be one set method
          with a single argument for a specific property. If overloaded
          properties are encountered, the chosen set method is
          unspecified.</para>

          <para>Nested property names are allowed when setting bean
          properties, as long as all parts of the path, except the property
          that is set, result in a <code>non-null</code> value. The parts of
          the path are separated with a full stop (<code>'.' \u002E</code>).
          For example:</para>

          <programlisting>&lt;property name="foo.bar.baz" value="42"/&gt;</programlisting>

          <para>This example gets the <code>foo</code> property, from the
          constructed object, it then gets the <code>bar</code> property and
          then sets the <code>baz</code> property on that object with the
          given value.</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para><code>value</code> - The value of the property is always a
          Metadata object. This <code>Metadata</code> object can be converted
          to a value object, see <xref linkend="i2352936"/>.</para>
        </listitem>
      </itemizedlist>

      <para>After the Metadata object is converted to an object value, it must
      be injected into the property. If the value object is not directly
      assignable to the property type (as defined by its only set method and
      the rules in <xref linkend="i2736197"/> ), then the Blueprint Container
      must use the type conversion mechanism to create a new object that
      matches the desired type, or fail. See <xref linkend="i2381582"/> for
      more information about dependency injection.</para>

      <para>For example, the following bean creates an instance and then
      injects a three into a the <code>foo</code> property that it gets from
      the <code>bar</code> property. The string that holds the three is
      converted to a <code>double</code>:</para>

      <programlisting>&lt;bean id="foo" class="com.acme.Foo"&gt;
  &lt;property name="bar.foo" value="3"/&gt;
&lt;/bean&gt;

// Classes
package com.acme;
public class Bar {
    double v;
    public void setFoo(double v) { this.v = v; }
}
public class Foo {
    Bar bar = new Bar();
    public void getBar() { return bar; }
}

// Corresponding Java code
Foo foo = new Foo();
foo.getBar().setFoo(3.0);</programlisting>
    </section>

    <section xml:id="i2339865">
      <title>Life Cycle Callbacks</title>

      <para>The <code>bean</code> element provides two attributes that define
      the <emphasis>callback</emphasis> method names for initialization and
      destruction. A callback must be implemented as a publicly accessible
      method without any arguments. The callback method names must exist as
      <code>void()</code> methods.</para>

      <para>The <code>initMethod</code> specifies the name of an
      initialization method that is called after all properties have been
      injected. The <code>destroyMethod</code> specifies the name of a destroy
      method that is called when the Blueprint Container has destroyed a
      component instance. Only bean managers with <code>singleton</code> scope
      support the <code>destroyMethod</code>. The destroy callback cannot be
      used for beans that have <code>prototype</code> scope, the
      responsibility for destroying those instances lies with the
      application.</para>
    </section>

    <section>
      <title>Activation and Deactivation</title>

      <para>A singleton bean manager must construct its single object during
      activation and then callback its <code>initMethod</code> method.
      Prototype scoped beans are created after activation and also have their
      <code>initMethod</code> invoked. The destroy method is called during the
      destruction of all the beans in <code>singleton</code> scope, this
      happens after deactivation.</para>

      <para>A <code>prototype</code> bean manager has no special activities
      for deactivation.</para>
    </section>
  </section>

  <section xml:id="i1947792">
    <title>Service Manager</title>

    <para>The service manager defined by a <code>service</code> element is
    responsible for registering a service object with the service registry. It
    must ensure that this service is only registered when it is
    <emphasis>enabled</emphasis>. Where enabled means that all its mandatory
    service reference managers in its dependencies are satisfied.</para>

    <section>
      <title>&lt;service&gt;</title>

      <para>The XML structure of the <code>&lt;service&gt;</code> manager
      is:</para>

      <programlisting>service               ::= &lt;interfaces&gt;
                          &lt;service-properties&gt;
                          &lt;registration-listener&gt;*
                          target
interfaces            ::= &lt;value&gt;+
service-properties    ::= &lt;entry&gt;+
registration-listener ::= target</programlisting>

      <para>The service manager has the features outlined in <xref linkend="service.blueprint-service.manager.features" xrefstyle="template:Table %n on page %p"/>. The following additional
      constraints apply:</para>

      <itemizedlist>
        <listitem>
          <para>The <code>interface</code> attribute and
          <code>interfaces</code> element are mutually exclusive.</para>
        </listitem>

        <listitem>
          <para>If the <code>auto-export</code> attribute is set to anything
          else but <code>disabled</code>, neither the <code>interface</code>
          attribute nor the <code>interfaces</code> element must be
          used.</para>
        </listitem>

        <listitem>
          <para>The <code>ref</code> attribute and <code>inlined</code>
          element are mutually exclusive</para>
        </listitem>
      </itemizedlist>

      <table xml:id="service.blueprint-service.manager.features">
        <title>Service Manager Features</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3" colwidth="3*"/>

          <colspec colnum="4" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute or Element</entry>

              <entry>Type</entry>

              <entry>Service Metadata</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>id</code></entry>

              <entry><code>ID</code></entry>

              <entry><para><code>id</code></para><para><code>:
              String</code></para></entry>

              <entry><para>Optional component id of the manager, if it is a
              top level manager.</para></entry>
            </row>

            <row>
              <entry><code>activation</code></entry>

              <entry><para><code>  lazy</code></para><para><code>|
              eager</code></para></entry>

              <entry><para><code>activation</code></para><para><code>:
              int</code></para></entry>

              <entry><para>Defines if this service is lazily or eagerly
              initialized. If not explicitly set, the <code>blueprint</code>
              element's value for the <code>default-activation</code>
              attributes is used. If this is also not set, the value is
              <code>eager</code>. See also <xref linkend="i2707929"/>.</para></entry>
            </row>

            <row>
              <entry><code>depends-on</code></entry>

              <entry><code>NCName*</code></entry>

              <entry><para><code>dependsOn</code></para><para><code>:
              List&lt;String&gt;</code></para></entry>

              <entry><para>Explicit list of ids that are the dependencies.
              These managers must be activated at the start of the
              registration phase. See <xref linkend="i2706015"/>. This is a
              whitespace separated list.</para></entry>
            </row>

            <row>
              <entry><code>interface</code></entry>

              <entry><code>qname</code></entry>

              <entry><para><code>interfaces</code></para><para><code>:
              List&lt;String&gt;</code></para></entry>

              <entry><para>Name of the interface under which this service
              should be registered. See <xref linkend="i2392232"/>.</para></entry>
            </row>

            <row>
              <entry><code>auto-export</code></entry>

              <entry><para><code>  disabled</code></para><para><code>|
              interfaces</code></para><para><code>|
              class-</code></para><para><code>  hierarchy</code></para><para><code>|
              all-classes</code></para></entry>

              <entry><para><code>autoExport</code></para><para><code>:
              int</code></para></entry>

              <entry><para>Defines the way the class must be analyzed to find
              the interfaces under which the service must be registered. The
              schema default is <code>disabled</code>. See <xref linkend="i2392232"/></para></entry>
            </row>

            <row>
              <entry><code>ranking</code></entry>

              <entry><code>int</code></entry>

              <entry><para><code>ranking</code></para><para><code>:
              int</code></para></entry>

              <entry><para>The <code>service.ranking</code> value. The schema
              default is 0, which implies no service property. See <xref linkend="i2392470"/>.</para></entry>
            </row>

            <row>
              <entry><code>ref</code></entry>

              <entry><code>NCName</code></entry>

              <entry><para><code>value</code></para><para><code>:
              RefMetadata</code></para></entry>

              <entry><para>Reference to the manager that provides the service
              object. See <xref linkend="i2392545"/>.</para></entry>
            </row>

            <row>
              <entry><code>&lt;service-properties&gt;</code></entry>

              <entry>See <xref linkend="i1979502"/>.</entry>

              <entry><para><code>serviceProperties</code></para><para><code>:
              List&lt;MapEntry&gt;</code></para></entry>

              <entry><para>The service properties for this service. See <xref linkend="i1942131"/>.</para></entry>
            </row>

            <row>
              <entry><code>&lt;registration-listener&gt;</code></entry>

              <entry>See <xref linkend="service.blueprint-service.manager.registration.listener"/>.</entry>

              <entry><para><code>registrationListeners</code></para><para><code>:
              List&lt;Registration</code></para><para><code>  Listener&gt;</code></para></entry>

              <entry><para>The registration listeners. See <xref linkend="i2392507"/>.</para></entry>
            </row>

            <row>
              <entry><code>&lt;interfaces&gt;</code></entry>

              <entry><code>&lt;value&gt;*</code></entry>

              <entry><para><code>interfaces</code></para><para><code>:
              List&lt;String&gt;</code></para></entry>

              <entry><para>Names of interfaces under which this service should
              be registered. Each interface name must be listed as a child
              <code>value</code> element. This value element has no
              attributes. For example:</para><programlisting>&lt;interfaces&gt;
 &lt;value&gt;com.a.Foo&lt;/value&gt;
 &lt;value&gt;com.a.Bar&lt;/value&gt;
&lt;/interfaces&gt;</programlisting><para>The value element must only hold a
              string value. See <xref linkend="i2392232"/></para></entry>
            </row>

            <row>
              <entry><code>&lt;...&gt;</code></entry>

              <entry><code>target</code></entry>

              <entry><para><code>value</code></para><para><code>:
              Target</code></para></entry>

              <entry><para>An inlined target manager that is used for the
              service object. See <xref linkend="i2392545"/></para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>&lt;registration-listener&gt;</title>

      <para>The <code>service</code> element can contain zero or more
      <code>registration-listener</code> elements, that define registration
      listeners to be notified of service registration and unregistration
      events. This element has the following structure:</para>

      <programlisting>registration-listener   ::= target*</programlisting>

      <para>The <code>registration-listener</code> element defines the
      callback methods for registration and unregistration.</para>

      <table xml:id="service.blueprint-service.manager.registration.listener">
        <title>Registration Listener Features</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3" colwidth="3*"/>

          <colspec colnum="4" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute or Element</entry>

              <entry>Type</entry>

              <entry>Registration Listener</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>ref</code></entry>

              <entry><code>NCName</code></entry>

              <entry><para><code>registrationListener</code></para><para><code>:
              Target</code></para></entry>

              <entry><para>A reference to a top level manager.</para></entry>
            </row>

            <row>
              <entry><code>registration-method</code></entry>

              <entry><code>method</code></entry>

              <entry><para><code>registrationMethod</code></para><para><code>:
              String</code></para></entry>

              <entry><para>The name of the method to call after the service
              has been registered. See <xref linkend="i2392507"/>.</para></entry>
            </row>

            <row>
              <entry><code>unregistration-method</code></entry>

              <entry><code>method</code></entry>

              <entry><para><code>unregistrationMethod</code></para><para><code>:
              String</code></para></entry>

              <entry><para>The name of the method to call before the service
              will be unregistered. See <xref linkend="i2392507"/>.</para></entry>
            </row>

            <row>
              <entry><code>&lt;...&gt;</code></entry>

              <entry><code>target</code></entry>

              <entry><para><code>registrationListener</code></para><para><code>:
              Target</code></para></entry>

              <entry><para>An inlined target manager</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The additional constraint is:</para>

      <itemizedlist>
        <listitem>
          <para>The <code>ref</code> attribute and the inlined manager are
          mutually exclusive.</para>
        </listitem>

        <listitem>
          <para>Either or both of the <code>registrationMethod</code> and
          <code>unregistrationMethod</code> must be set.</para>
        </listitem>

        <listitem>
          <para>For each method name set, there must be at least one method
          matching the possible prototypes in the registration listener
          object, see <xref linkend="i2392507"/>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Explicit Dependencies</title>

      <para>A service manager must initialize any explicit dependencies in the
      start of its registration phase, even before it tracks its enabled
      state. The presence of explicit dependencies will not activate the
      service manager.</para>
    </section>

    <section>
      <title>Provided Object</title>

      <para>A service manager provides a proxy to a
      <code>ServiceRegistration</code> object. If this proxy is used when the
      dependencies are not met, and the service is therefore unregistered, an
      Illegal State Exception must be thrown. In all other cases, the proxy
      acts as if it was the <code>ServiceRegistration</code> object associated
      with the registration of its service object.</para>

      <para>The <code>unregister</code> method on the returned object must not
      be used. If the application code calls unregister then this must result
      in an Unsupported Operation Exception.</para>
    </section>

    <section xml:id="i2392232">
      <title>Service Interfaces</title>

      <para>Each service object is registered under one or more interface
      names. The list of interface names is provided by
      <code>interfaces</code> or <code>autoExport</code>.</para>

      <para>The <code>autoExport</code> tells the Blueprint Container to
      calculate the interface(s) from the type of the service object. The
      <code>autoExport</code> can have the following values:</para>

      <itemizedlist>
        <listitem>
          <para><code>disabled</code> - No auto-detection of service interface
          names is undertaken, the interface names must be found in
          <code>interfaces</code>. This is the default mode.</para>
        </listitem>

        <listitem>
          <para><code>interfaces</code> - The service object will be
          registered using all of its implemented public Java interface types,
          including any interfaces implemented by super classes.</para>
        </listitem>

        <listitem>
          <para><code>class-hierarchy</code> - The service object will be
          registered using its actual type and any public super-types up to
          the <code>Object</code> class (not included).</para>
        </listitem>

        <listitem>
          <para><code>all-classes</code> - The service object will be
          registered using its actual type, all public super-types up to the
          <code>Object</code> class (not including), as well as all public
          interfaces implemented by the service object and any of its super
          classes.</para>
        </listitem>
      </itemizedlist>

      <para>The <code>autoExport</code> requires the actual class object for
      introspection for all its modes except <code>disabled</code>,which can
      cause a bundle with a <code>lazy</code> activation policy to activate
      because a class will be loaded from the Blueprint bundle.</para>

      <para>As an example:</para>

      <programlisting>&lt;bean id="fooImpl" class="FooImpl"/&gt;

public class FooImpl implements Foo { ... }</programlisting>

      <para>Then the following service definitions are equivalent:</para>

      <programlisting>&lt;service id="foo"&gt;
    &lt;interfaces&gt;
        &lt;value&gt;com.acme.Foo&lt;/value&gt;
    &lt;/interface&gt;
&lt;/service&gt;
&lt;service id="foo" interface="com.acme.Foo" ref="fooImpl"/&gt;
&lt;service id="foo" auto-export="interfaces" ref="fooImpl"/&gt;</programlisting>
    </section>

    <section xml:id="i1942131">
      <title>Service Properties</title>

      <para>Each service can optionally be registered with <emphasis>service
      properties</emphasis>. The <code>serviceProperties</code> is a list of
      <code>MapEntry</code>, see <xref linkend="i2443675"/>. This metadata
      must be used to create the service properties. Service properties
      creation can have side effects because they can use component instances.
      The service properties must therefore be created once before the first
      time the first time the service is registered.</para>

      <para>The service manager adds the following automatic service
      properties that cannot be overridden. When these properties are
      explicitly set, they must be ignored.</para>

      <itemizedlist>
        <listitem>
          <para><code>osgi.service.blueprint.compname</code> - This will
          reflect the id of the manager that provides the service object,
          unless it is inlined. Inlined beans are always anonymous and must
          not have this property set.</para>
        </listitem>

        <listitem>
          <para><code>service.ranking</code> - If the ranking attribute is not
          zero, this property will be set and hold an <code>Integer</code>
          object with the given value, see <xref linkend="i2392470"/>.</para>
        </listitem>
      </itemizedlist>

      <para>For example, the following definition is followed by equivalent
      Java code needed to register the service:</para>

      <programlisting>&lt;service ref="fooImpl" interface="com.acme.Foo"&gt;
  &lt;service-properties&gt;
    &lt;entry key="size" value="42"/&gt;
  &lt;/service-properties&gt;
&lt;/service&gt;

Dictionary d = new Hashtable();
d.put("size", "42");
d.put("osgi.service.blueprint.compname", "fooImpl");
ServiceRegistration sr = 
    bundleContext.registerService("com.acme.Foo",
        blueprintContainer.getComponentInstance("fooImpl"),
      d);</programlisting>

      <para>Service properties should specify the <code>valueType</code> of
      the entry unless the value to be registered needs to be a
      <code>String</code> object. The service property types should be one
      of:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Primitives Number</emphasis> - <code>int, long,
          float, double, byte, short, char, boolean</code></para>
        </listitem>

        <listitem>
          <para><emphasis>Scalar</emphasis> - <code>String, Integer, Long,
          Float, Double, Byte, Short, Character, Boolean</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Array</emphasis> - An array of either the allowable
          primitive or scalar types.</para>
        </listitem>

        <listitem>
          <para><emphasis>Collection</emphasis> - An object implementing the
          <code>Collection</code> interface that contains scalar types.</para>
        </listitem>
      </itemizedlist>

      <para>See <xref linkend="i2443675"/> types for information how to create
      these types.</para>
    </section>

    <section xml:id="i2392545">
      <title>Service Object</title>

      <para>The service manager must not request the Blueprint Container for
      the service object until it is actually needed because a bundle requests
      it. The service object is represented in the <code>value</code>. This is
      a Metadata object that can be used to construct an object value, see
      <xref linkend="i2352936"/>.</para>

      <para>For example:</para>

      <programlisting>&lt;service id="fooService" ref="fooImpl".../&gt;

&lt;service id="fooService" ... &gt;
   &lt;bean class="com.acme.fooImpl"/&gt;
&lt;/service&gt;</programlisting>

      <para>The scope of the beans is ignored for the manager that provides
      the service object. Its value will only be created once the first time
      it is needed for the service.</para>
    </section>

    <section xml:id="i2715956">
      <title>Scope</title>

      <para>A service manager must always register a Service Factory as
      service object and then dispatch the service requests to the service
      object. A service manager must obtain a single component instance as
      service object. This component instance is shared between all bundles.
      That is, even if the service object comes from a prototype scoped
      manager, only one instance is ever created per service manager.</para>

      <para>If this component instance implements Service Factory, then all
      incoming service requests are forwarded to this single component
      instance.</para>
    </section>

    <section xml:id="i2392470">
      <title>Ranking</title>

      <para>When registering a service with the service registry, an optional
      <emphasis>service ranking</emphasis> can be specified that orders
      service references. The service ranking is registered as the
      <code>SERVICE_RANKING</code> property defined in the OSGi service layer.
      When a bundle looks up a service in the service registry, given two or
      more matching services, then the one with the highest number will be
      returned. The default ranking value for the OSGi service registry is
      zero, therefore, this property must not be registered when
      <code>ranking</code> is zero, which is also the default value.</para>

      <para>For example:</para>

      <programlisting>&lt;service ref="fooImpl" interface="com.acme.FooImpl"
            ranking="900" /&gt;</programlisting>

      <para>This will result in the following service property:</para>

      <programlisting>service.ranking=new Integer(900)</programlisting>
    </section>

    <section xml:id="i2392507">
      <title>Registration Listener</title>

      <para>The <code>registrationListeners</code> represent the objects that
      need to be called back after the service has been registered and just
      before it will be unregistered.</para>

      <para>The <code>listenerComponent</code> must be a <code>Target</code>
      object; it is the target for the following callbacks:</para>

      <itemizedlist>
        <listitem>
          <para><code>registrationMethod</code> - The name of the notification
          method that is called after this service has been registered.</para>
        </listitem>

        <listitem>
          <para><code>unregistrationMethod</code> - This method is called when
          this service will be unregistered.</para>
        </listitem>
      </itemizedlist>

      <para>The signatures for the callback methods depend on the scope and if
      the service object implements the <code>ServiceFactory</code> interface.
      The different possibilities are outlined in the following table.</para>

      <table>
        <title>Interaction scopes and types for callback signature.</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="2*"/>

          <colspec colnum="4" colwidth="2*"/>

          <thead>
            <row>
              <entry>Scope</entry>

              <entry>Type</entry>

              <entry>Signature</entry>

              <entry>Comment</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>singleton</code></entry>

              <entry><code>ServiceFactory</code></entry>

              <entry><code>void(ServiceFactory,Map)</code></entry>

              <entry><para>All service requests are handled by the component
              instance.</para></entry>
            </row>

            <row>
              <entry><code>singleton</code></entry>

              <entry><code>T</code></entry>

              <entry><code>void( super T,Map)</code></entry>

              <entry><para><code>T</code> is assignable from the service
              object's type.</para></entry>
            </row>

            <row>
              <entry><code>prototype</code></entry>

              <entry><code>ServiceFactory</code></entry>

              <entry><code>void(ServiceFactory,Map)</code></entry>

              <entry><para>All service requests are handled by the first
              component instance.</para></entry>
            </row>

            <row>
              <entry><code>prototype</code></entry>

              <entry><code>T</code></entry>

              <entry><code>void(,Map)</code></entry>

              <entry><para>The first argument must be <code>null</code>
              because for <code>prototype</code> service objects, the
              component instance is created when a bundle requests the
              service. Therefore, at registration time there is no service
              object available.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>If multiple signatures match, then all methods must be called in
      indeterminate order. At least one method must match.</para>

      <para>The service manager must provide the registration listener with
      the current registration state when the listener is registered. This
      initial notification must take place before any other callback methods
      are called on this listener on other threads. That is, if the service is
      registered at that time, it must call the registration method and
      otherwise the unregistration method.</para>

      <para>The following example shows two registration listeners, one with a
      referred bean and another one with an inlined bean.</para>

      <programlisting>&lt;service ref="fooImpl" interface="com.acme.Foo"&gt;
   &lt;registration-listener registration-method="reg"
            unregistration-method="unreg"&gt;
        &lt;bean class="com.acme.FooListener"/&gt;
    &lt;/registration-listener&gt;
&lt;/service&gt;

&lt;service ref="fooImpl" interface="com.acme.Foo"&gt;
   &lt;registration-listener registration-method="reg"
            unregistration-method="unreg" ref="fooListener"/&gt;
&lt;/service&gt;
&lt;bean id="fooListener" class="com.acme.FooListener"/&gt;

package com.acme;
public class FooListener {
  public void reg( Foo foo, Map properties ) { ... }
  public void unreg( Foo foo, Map properties ) { ... }
}</programlisting>

      <para>The manager that provides the registration listener object is an
      implicit dependency of the enclosing service manager. However, the
      registration listener component instance is specifically allowed to use
      to the service manager though this is technically a cyclic dependency.
      Therefore, a bean is allowed to be both be injected with a
      <code>ServiceRegistration</code> object from the service manager as well
      as being a registered listener to the same service manager.</para>

      <para>In the following example, the <code>foo</code> service manager
      uses manager <code>main</code>, both as a registration listener as well
      as top-level bean <code>main</code> being injected with reference
      <code>foo</code>.</para>

      <programlisting>&lt;service id="foo" interface="com.acme.Foo"ref="main"&gt;
  &lt;registration-listener 
        registration-method="register" ref="main"/&gt;
&lt;/service&gt;

&lt;bean id="main" class="com.acme.Main" init-method="done"&gt;
    &lt;property name="foo" ref="foo"/&gt;
&lt;/bean&gt;</programlisting>
    </section>

    <section xml:id="i2630717">
      <title>Enabled</title>

      <para>A service manager needs a service object that is referred to by
      the <code>value</code>Metadata property. This value can in its turn
      depend on other managers transitively. If any of these managers are
      service reference managers, then they can be satisfied or not. If these
      service reference managers are marked to be mandatory, then they
      influence the <emphasis>enabled</emphasis> state of the first service
      manager. Only if all of these mandatory service reference managers in
      the dependency graph are satisfied, then the first service manager is
      enabled.</para>

      <para>A service manager must have a Service Factory registered with the
      OSGi service registry after the primary initialization of the Blueprint
      Container has been done until the Blueprint Container is destroyed while
      it is enabled. See see <xref linkend="i2584179"/>.</para>
    </section>

    <section>
      <title>Activation and Deactivation</title>

      <para>When a service manager is activated, it must actuate its
      registration listeners. Each registration listener must be called back
      during its actuation with the current service registration state as
      described in the <xref linkend="i2392507"/>. Normally, this will also
      request the container for a service object but this can be further
      delayed in certain circumstances. See <xref linkend="i2392545"/> for
      more details.</para>

      <para>During deactivation, a service manager must disable any
      registration listeners and release any dependencies it has on these
      component instances.</para>
    </section>
  </section>

  <section xml:id="i2468749">
    <title>Service Reference Managers</title>

    <para>The <code>reference</code>, and <code>reference-list</code> elements
    are all <emphasis>service references</emphasis>. They select a number of
    services in the service registry. The structure of these elements is as
    follows:</para>

    <programlisting>reference       ::= &lt;reference-listener&gt;* 
reference-list  ::= &lt;reference-listener&gt;*</programlisting>

    <para>The inheritance hierarchy for service references is depicted in
    <xref linkend="i2331840" xrefstyle="template:Figure %n on page %p"/>.</para>

    <figure xml:id="i2331840">
      <title>Inheritance hierarchy for service references</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.422in" contentwidth="4.936in" fileref="reference-inheritance-hierarchy.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <section>
      <title>Service Reference</title>

      <para>The service reference managers have almost identical Metadata and
      share most behavior. The only schema differences between a reference
      manager and a reference-list manager are:</para>

      <itemizedlist>
        <listitem>
          <para><code>timeout</code> - A reference manager supports a
          <code>timeout</code>.</para>
        </listitem>

        <listitem>
          <para><code>memberType</code> - The reference-list can define its
          member-type</para>
        </listitem>
      </itemizedlist>

      <para>The features of the service references are explained in the
      following table.</para>

      <table>
        <title>Service Reference Manager Features</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3" colwidth="3*"/>

          <colspec colnum="4" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute or Element</entry>

              <entry>Type</entry>

              <entry>ServiceReference-Metadata</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>id</code></entry>

              <entry><code>ID</code></entry>

              <entry><para><code>id</code></para><para><code>:
              String</code></para></entry>

              <entry><para>The component id of a top level
              manager</para></entry>
            </row>

            <row>
              <entry><code>activation</code></entry>

              <entry><para><code>  lazy</code></para><para><code>|
              eager</code></para></entry>

              <entry><para><code>activation</code></para><para><code>:
              int</code></para></entry>

              <entry><para>Defines if this service reference is lazily of
              eagerly initialized. If not explicitly set, the
              <code>blueprint</code> element's value for the
              <code>default-activation</code> attributes is used. If this is
              also not set, the value is <code>eager</code>. See also <xref linkend="i2707929"/>.</para></entry>
            </row>

            <row>
              <entry><code>depends-on</code></entry>

              <entry><code>NCName*</code></entry>

              <entry><para><code>dependsOn</code></para><para><code>:
              List&lt;String&gt;</code></para></entry>

              <entry><para>Explicit list of component ids that are the
              dependencies. These managers must be activated before this
              service reference's activation. See <xref linkend="i2706015"/>.
              This is a whitespace separated List.</para></entry>
            </row>

            <row>
              <entry><code>availability</code></entry>

              <entry><para><code>  mandatory</code></para><para><code>|
              optional</code></para></entry>

              <entry><para><code>availability</code></para><para><code>:
              int</code></para></entry>

              <entry><para>Defines if a service reference is mandatory or
              optional. The default for the <code>availability</code>
              attribute is defined by the <code>default-availability</code>
              attribute in the <code>blueprint</code> element. If the
              <code>default-availability</code> attribute is not defined, the
              value is <code>mandatory</code>.</para></entry>
            </row>

            <row>
              <entry><code>interface</code></entry>

              <entry><code>qname</code></entry>

              <entry><para><code>interface</code></para><para><code>:
              String</code></para></entry>

              <entry><para>A single name of an interface class. It is allowed
              to not specify an interface name.</para></entry>
            </row>

            <row>
              <entry><code>component-name</code></entry>

              <entry><code>NCName</code></entry>

              <entry><para><code>componentName</code></para><para><code>:
              String</code></para></entry>

              <entry><para>Points to another manager in another Blueprint
              Container registered in the service registry. If set, the
              component name must be part of the effective
              filter.</para></entry>
            </row>

            <row>
              <entry><code>filter</code></entry>

              <entry><code>filter</code></entry>

              <entry><para><code>filter</code></para><para><code>:
              String</code></para></entry>

              <entry><para>The given filter string, can be
              <code>null</code>.</para></entry>
            </row>

            <row>
              <entry><code>&lt;reference-listener&gt;</code></entry>

              <entry>See <xref linkend="i2985507"/>.</entry>

              <entry><para><code>referenceListeners</code></para><para><code>:
              List&lt;Listener&gt;</code></para></entry>

              <entry><para>The Metadata of the reference
              listeners</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The additional constraints for service references are:</para>

      <itemizedlist>
        <listitem>
          <para>The <code>interface</code>, if set, must refer to a public
          interface.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>&lt;reference&gt;</title>

      <para>A reference manager, selecting a single service, has the
      additional feature explained in the following table.</para>

      <table>
        <title>Reference Features</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3" colwidth="3*"/>

          <colspec colnum="4" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute or Element</entry>

              <entry>Type</entry>

              <entry>Reference Metadata</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>timeout</code></entry>

              <entry><code>long &gt;= 0</code></entry>

              <entry><para><code>timeout</code></para><para><code>:
              long</code></para></entry>

              <entry><para>The <code>timeout</code> in ms. Zero is
              indefinite.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>An additional constraint on the reference is:</para>

      <itemizedlist>
        <listitem>
          <para>The <code>timeout</code> must be equal or larger than
          zero.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>&lt;reference-list&gt;</title>

      <para>A reference-list manager, selecting multiple services, has the
      additional feature explained in the following table.</para>

      <table>
        <title>Reference-list Features</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3" colwidth="3*"/>

          <colspec colnum="4" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute or Element</entry>

              <entry>Type</entry>

              <entry>Reference List Metadata</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>member-type</code></entry>

              <entry><para><code>  service-</code></para><para><code>  object</code></para><para><code>|
              service-</code></para><para><code>  reference</code></para></entry>

              <entry><para><code>memberType</code></para><para><code>:
              int</code></para></entry>

              <entry><para>Defines if the members of the list are
              <code>ServiceReference</code> objects or the proxies to the
              actual service objects.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="i2985507">
      <title>&lt;reference-listener&gt;</title>

      <para>The <code>reference</code> element can notify reference listeners
      of the service selection changes with the
      <code>referenceListeners</code>. The <code>reference-listener</code>
      element has the following structure:</para>

      <programlisting>reference-listener  ::= target*</programlisting>

      <para>The <code>reference-listener</code> element defines the callback
      methods for binding and unbinding a service.</para>

      <table>
        <title>Reference Listener Features</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3" colwidth="3*"/>

          <colspec colnum="4" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute or Element</entry>

              <entry>Type</entry>

              <entry>Reference Listener</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>ref</code></entry>

              <entry><code>NCName</code></entry>

              <entry><para><code>listenerComponent</code></para><para><code>:
              Target</code></para></entry>

              <entry><para>A reference to a top level target manager.
              </para></entry>
            </row>

            <row>
              <entry><code>bind-method</code></entry>

              <entry><code>method</code></entry>

              <entry><para><code>bindMethod</code></para><para><code>:
              String</code></para></entry>

              <entry><para>The name of the method to call after the service
              has been bound. See <xref linkend="i2039720"/>.</para></entry>
            </row>

            <row>
              <entry><code>unbind-method</code></entry>

              <entry><code>method</code></entry>

              <entry><para><code>unbindMethod</code></para><para><code>:
              String</code></para></entry>

              <entry><para>The name of the method to call before the service
              will be unbound. See <xref linkend="i2039720"/>.</para></entry>
            </row>

            <row>
              <entry><code>&lt;...&gt;</code></entry>

              <entry><code>target</code></entry>

              <entry><para><code>listenerComponent</code></para><para><code>:
              Target</code></para></entry>

              <entry><para>An inlined target manager</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The additional constraints are:</para>

      <itemizedlist>
        <listitem>
          <para>The <code>ref</code> attribute and the inlined manager are
          mutually exclusive.</para>
        </listitem>

        <listitem>
          <para>Either or both <code>bindMethod</code> and
          <code>unbindMethod</code> must be specified.</para>
        </listitem>

        <listitem>
          <para>At least one specified method must exist with each given
          method name, see <xref linkend="i2039720"/>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i2748212">
      <title>Provided Object For a Reference</title>

      <para>The provided object for a service reference manager is a
      <emphasis>proxy</emphasis> backed by a service object from the service
      registry. Therefore, even though the injected object will remain
      constant, it can change its reference to a backing service at any time,
      implying it can only be used with stateful services if reference
      listeners are used. If use when no suitable backing service is
      available, it will wait until it times out. See <xref linkend="i1766539"/> for more details. The model is depicted in <xref linkend="i2751824"/>.</para>

      <figure xml:id="i2751824">
        <title>Constant references with dynamic selection</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.265in" contentwidth="4.917in" fileref="dynamic-selection.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The following example shows how a property can be set to the
      service object.</para>

      <programlisting>public class C {
    public void setProxy(T ref) { ... }
}
&lt;reference id="p" interface="T"/&gt;
&lt;bean id="c" class="C"&gt;
    &lt;property name="proxy" ref="p"/&gt;
&lt;/bean&gt;</programlisting>
    </section>

    <section xml:id="i2748237">
      <title>Provided Object For a Reference-list</title>

      <para>The reference-list provided object implements the
      <code>List</code> interface; this List contains proxies to the backing
      services. These proxies do not have a <code>timeout</code>. That is,
      when a proxy from a reference-list is used, it must not wait when the
      backing service is no longer available but it must immediately throw a
      Service Unavailable Exception.</para>

      <para>Changes to the list are dynamic. When a backing service is
      unregistered, the corresponding proxy is removed from the list
      synchronously with the service event. When a new service enters the
      selection, it is added synchronously with the service event. Proxies to
      newly discovered services must be added at the end of the list. The
      structure is depicted in <xref linkend="i2751839"/>.</para>

      <figure xml:id="i2751839">
        <title>Constant reference to list with dynamic selection</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.265in" contentwidth="4.917in" fileref="dynamic-selection-list.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The member type of the list depends on the
      <code>memberType</code>. If this is set to:</para>

      <itemizedlist>
        <listitem>
          <para><code>service-object</code> - Inject a List of service
          objects, this is the default.</para>
        </listitem>

        <listitem>
          <para><code>service-reference</code> - Inject a list of
          <code>ServiceReference</code> objects</para>
        </listitem>
      </itemizedlist>

      <para>If generics information is available, then it is an error if the
      generic member type of the target list is not assignable with the
      <code>memberType</code>. If the member target type is in itself
      specified with generic arguments, like
      <code>List&lt;T&lt;U&gt;&gt;</code>, then the assignment must fail
      because this would require conversion and no conversion can take place
      for this assignment. For information about generics, see <xref linkend="i2814178"/>.</para>
    </section>

    <section>
      <title>Read Only Lists</title>

      <para>The list is a read-only view on the actual set of proxies to the
      service objects. This <code>List</code> object must only support the
      following methods:</para>

      <programlisting>contains(Object)
containsAll(Collection)
equals(Object)
get(int)
hashCode()
indexOf(Object)
isEmpty()
iterator()          // no remove method
lastIndexOf(Object)
listIterator()      // not supported
listIterator(int)   // not supported
size()
subList(int, int)   // same list type as parent
toArray()
toArray(T[])</programlisting>

      <para>All other methods must throw an Unsupported Operation Exception.
      The List Iterator is not supported for these lists.</para>
    </section>

    <section xml:id="i2748268">
      <title>Selection</title>

      <para>A service reference must provide a <emphasis>selection</emphasis>
      of services from the service registry. The Blueprint Container must
      logically use a filter for the selection that is the <code>and</code>
      (&amp;) of the following assertions:</para>

      <itemizedlist>
        <listitem>
          <para>The <code>interface</code>, if specified</para>
        </listitem>

        <listitem>
          <para>If <code>componentName</code> is not null, a filter that
          asserts <code>osgi.blueprint.compname=$componentName</code> This is
          a convenience function to easily refer to managers in other
          Blueprint Containers. Registered Blueprint services will
          automatically get this property set to their blueprint name.</para>
        </listitem>

        <listitem>
          <para>If <code>filter</code> is not <code>null</code>, the
          <code>filter</code></para>
        </listitem>
      </itemizedlist>

      <para>The selection is defined as the set of Service References selected
      by the given filter.</para>
    </section>

    <section>
      <title>Availability</title>

      <para>A service reference is <emphasis>satisfied</emphasis> when one or
      more services match the selection. The <code>availability</code> is used
      to specify whether a service reference needs to be satisfied before
      initialization, see <xref linkend="i2456332"/>, or if it controls the
      registration state of any service managers that depend on this service
      reference manager (explicit and implicit), see <xref linkend="i2416456"/>. The <code>availability</code> can have the
      following values:</para>

      <itemizedlist>
        <listitem>
          <para><code>mandatory</code> - Mandatory indicates that the service
          reference needs to be satisfied.</para>
        </listitem>

        <listitem>
          <para><code>optional</code> - Optional indicates that the
          satisfaction of this reference is not relevant for any registered
          services, or for the grace period.</para>
        </listitem>
      </itemizedlist>

      <para>It is an error to declare a mandatory reference to a service that
      is registered by the same bundle. Such a definition could cause either
      deadlock or a timeout.</para>

      <para>The fact that Blueprint specification has mandatory service
      references gives no guarantee that a valid service object is available
      when the service reference is used, in the dynamic world of OSGi,
      services can get unregistered at any time.</para>

      <para>The following example declares a mandatory service reference for a
      single service. The usage of the reference can stall a maximum of 5
      seconds if no service matches the selection.</para>

      <programlisting>&lt;reference 
    id          ="log" 
    interface   ="org.osgi.service.log.LogService"
    availability="mandatory"
    timeout     ="5000" /&gt;</programlisting>
    </section>

    <section xml:id="i2039720">
      <title>Reference Listeners</title>

      <para>The <code>referenceListeners</code> are represented as
      <code>ReferenceListener</code> objects. They define the following
      callbacks:</para>

      <itemizedlist>
        <listitem>
          <para><code>bindMethod</code> - Called after a service is selected
          by the service reference manager. For a reference manager, this
          method can be called repeatedly without an intermediate unbind
          callback. This happens when a service is unregistered but a
          replacement can be found immediately.</para>
        </listitem>

        <listitem>
          <para><code>unbindMethod</code> - Called when the service is no
          longer used by the service reference manager but before it has been
          returned to the service registry with the <code>unget</code> method.
          For a reference manager, no unbind method is called when the service
          can immediately be replaced with an alternative service when the
          service goes away.</para>
        </listitem>
      </itemizedlist>

      <para>A reference listener callback can have any of the following
      signatures:</para>

      <itemizedlist>
        <listitem>
          <para><code>public void(ServiceReference)</code> - Provide the
          <code>ServiceReference</code> object associated with this service
          reference. This callback type provides access to the service's
          properties without actually getting the service.</para>
        </listitem>

        <listitem>
          <para><code>public void( super T)</code> - Provide the proxy to the
          service object, where T is on of the types implemented by the
          service object proxy.</para>
        </listitem>

        <listitem>
          <para><code>public void ( super T,Map)</code> - Provide the proxy to
          the service object. <code>T</code> is a type that is assignable from
          the service object. The <code>Map</code> object provides the service
          properties of the corresponding <code>ServiceReference</code>
          object.</para>
        </listitem>
      </itemizedlist>

      <para>All signatures must be supported regardless of the value of
      <code>memberType</code> that was specified in the reference-list. The
      service object given to the reference listeners must be the proxy to the
      service object.</para>

      <para>The callbacks must be made synchronously with the corresponding
      OSGi service event. For reference-list callbacks, the service proxy is
      guaranteed to be available in the collection before a bind callback is
      invoked, and to remain in the collection until after an unbind callback
      has completed.</para>

      <para>If a service listener defines multiple overloaded methods for a
      callback, then every method with a matching signature is invoked in an
      undefined order.</para>

      <para>For example, the following definition will result in calling all
      the <code>setLog</code> methods on a <code>FooImpl</code> object:</para>

      <programlisting>&lt;reference id="log"
        interface="org.osgi.service.log.LogService"&gt;
  &lt;reference-listener
        bind-method="setLog"&gt;
        &lt;bean class="com.acme.FooImpl"/&gt;
    &lt;/reference-listener&gt;
&lt;/reference&gt;

public class FooImpl {
    public void setLog(Object o, Map m) { ... }
    public void setLog(LogService l, Map m) { ... }
    public void setLog(ServiceReference ref) { ... }
}</programlisting>

      <para>The manager that provides the reference listener object is treated
      as an implicit dependency of the enclosing service reference. This
      manager is specifically allowed to use to the service reference in a
      property injection or constructor argument, though this is technically a
      cyclic dependency. Therefore, a bean must be allowed to both be injected
      with a reference as well as listening to the bind and unbind callbacks
      of that same reference.</para>

      <para>In the following example, the <code>foo</code> reference manager
      uses manager <code>main</code>, both as a reference listener as well as
      manager <code>main</code> being injected with reference
      <code>foo</code>.</para>

      <programlisting>&lt;reference id="foo" interface="com.acme.Foo"&gt;
  &lt;reference-listener bind-method="setL" ref="main"/&gt;
&lt;/reference&gt;
&lt;bean id="main" class="com.acme.Main"&gt;
    &lt;property name="r" ref="foo"/&gt;
&lt;/bean&gt;</programlisting>
    </section>

    <section>
      <title>Service Proxies</title>

      <para>The Blueprint extender must generate proxies for the service
      reference managers. Reference managers provide proxies that dynamically
      select a <emphasis>backing</emphasis> service, which can change over
      time. A reference-list provides a list of proxies that have a fixed
      backing service, these proxies are added and removed from the list.
      Based on the selection, they do not have a time-out.</para>

      <para>The backing service for a reference proxy must not be gotten from
      the OSGi service registry until an actual service object is needed, that
      is, when an actual method is called on the proxy. If the backing service
      becomes unregistered, then the proxy must unget the reference to the
      backing service (if it had gotten it) and get another service object the
      next time a method on the proxy is called. If a replacement can be found
      immediately, the reference listener's bind method must be called without
      calling the unbind method. Other threads that need the same service
      object must block until the service object has become available or times
      out.</para>

      <para>The proxies must implement all the methods that are defined in the
      <code>interface</code>. The <code>interface</code> must refer to an
      interface, not a class. The proxy must only support the methods in the
      given interface. That is, it must not proxy methods available on the
      service object that are not available in the given interface. If no
      interface is defined, the proxy must be implemented as if the interface
      had no methods defined.</para>

      <para>Blueprint bundles must ensure that the proper semantics are
      maintained for <code>hashCode</code> and <code>equals</code> methods. If
      these methods are not defined in the interface, then the proxy must use
      the default semantics of the <code>Object</code> class for
      <code>equals</code> and <code>hashCode</code> methods.</para>
    </section>

    <section>
      <title>Activation and Deactivation</title>

      <para>Service reference managers are active before activation because
      they must handle the enable status of service managers.</para>

      <para>During activation, a service reference must actuate its listeners
      and provide these listeners with the initial state of the reference. For
      a reference, if there is a selected object, the bind method must be
      called with the proxy object, otherwise the unbind method must be called
      with a <code>null</code> as proxy object. For a reference-list, the bind
      method must be called for each member of the list. If the list is empty,
      the unbind method must be called with a <code>null</code> as proxy
      object.</para>

      <para>During deactivation, the listeners must be disabled.</para>
    </section>
  </section>

  <section xml:id="i2352936">
    <title>Object Values</title>

    <para>Top-level managers can use <emphasis>object values</emphasis> in
    different places. These object values are defined with XML elements and
    attributes. After parsing, they are all converted to sub-interfaces of the
    <code>Metadata</code> interface, transitively reachable from top-level
    managers. For example, the following definition creates a bean that is
    injected with the byte array: <code>byte[] {7,42}</code>:</para>

    <programlisting>&lt;bean class="com.acme.FooImpl"&gt;
    &lt;property name="array"&gt;
        &lt;array value-type="byte"&gt;
            &lt;value&gt;7&lt;/value&gt;
            &lt;value&gt;42&lt;/value&gt;
        &lt;/array&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting>

    <para>This definition provides the configuration data for an
    <emphasis>array value</emphasis>, which is represented by the
    <code>CollectionMetadata</code> interface. A <code>Metadata</code> object
    can be used to construct its object value during runtime whenever a new
    object must be constructed.</para>

    <para>In most places where an object value can be used, it can be
    anything, including objects provided by a managers and even
    <code>null</code>. However, maps require non-null keys. The object values
    are therefore split in <code>value</code> and <code>nonNullValue</code>
    types.</para>

    <para>The syntax for object values has the following structure:</para>

    <programlisting>nonNullValue ::= &lt;ref&gt;
               | &lt;idref&gt;
               | &lt;value&gt;
               | &lt;map&gt;
               | &lt;props&gt;
               | collection
               | manager // see <xref linkend="i3005561"/>
value        ::= nonNullValue | &lt;null&gt;
collection   ::= &lt;list&gt; | &lt;set&gt; | &lt;array&gt;</programlisting>

    <para>Object values also include inlined managers. The use of an inlined
    manager for an object value means that manager will provide a value every
    time the object value is constructed. Each of the object values is created
    anew and the types are mutable, except for the service references. The use
    of managers in object values must create an implicit dependency between
    the top level managers and any transitively reachable manager from their
    Metadata.</para>

    <section xml:id="i1979542">
      <title>&lt;ref&gt;</title>

      <para>The <code>ref</code> element is a reference to a top-level manager
      in the same Blueprint Container. The <code>ref</code> element has a
      single attribute <code>component-id</code>.</para>

      <table>
        <title>Ref Features</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3" colwidth="3*"/>

          <colspec colnum="4" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Type</entry>

              <entry>Ref Metadata</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>component-id</code></entry>

              <entry><code>NCName</code></entry>

              <entry><para><code>componentId</code></para><para><code>:
              String</code></para></entry>

              <entry><para>A reference to a top level manager.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>For example, the following definition uses the <code>foo</code>
      manager to instantiate the service object.</para>

      <programlisting>&lt;service id="fooService" interface="com.acme.Foo"&gt;
    &lt;ref component-id="fooImpl"/&gt; 
&lt;/service&gt;
&lt;bean id="fooImpl" class="com.acme.FooImpl"/&gt;

public class FooImpl implements Foo { }</programlisting>
    </section>

    <section xml:id="i1979564">
      <title>&lt;idref&gt;</title>

      <para>The <code>idref</code> element provides the component id of
      another manager in the same Blueprint Container. This reference can then
      be used by the application to look up a manager in the Blueprint
      Container during runtime. The <code>idref</code> element is a safe way
      to provide a component id because the Blueprint Container will verify
      that the component id exists, thereby showing errors early. The
      <code>idref</code> does not create an implicit dependency on the given
      manager.</para>

      <table>
        <title>IdRef Features</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3" colwidth="3*"/>

          <colspec colnum="4" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Type</entry>

              <entry>Id Ref Metadata</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>component-id</code></entry>

              <entry><code>NCName</code></entry>

              <entry><para><code>componentId</code></para><para><code>:
              String</code></para></entry>

              <entry><para>A reference to a top level manager.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The following example provides the <code>foo</code> object with
      the reference to the database.</para>

      <programlisting>&lt;bean id="foo" class="com.acme.FooImpl"&gt;
    &lt;property name="db"&gt;
        &lt;idref component-id="jdbc"/&gt;
    &lt;/property&gt;
&lt;/bean&gt;

&lt;bean id="jdbc" ... /&gt;</programlisting>

      <para>The following definition is equivalent to except that a non
      existent component id will not be detected until the <code>foo</code>
      object access the Blueprint Container. In the previous example this was
      detected directly after the definitions were parsed.</para>

      <programlisting>&lt;bean id="foo" class="com.acme.FooImpl"&gt;
    &lt;property name="db" value="jdbc"/&gt;
&lt;/bean&gt; 
&lt;bean id="jdbc" ... /&gt; </programlisting>
    </section>

    <section xml:id="i1979526">
      <title>&lt;value&gt;</title>

      <para>A value element represents an object that can directly be
      constructed from a string formed by its text contents.</para>

      <table>
        <title>Value Features</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3" colwidth="3*"/>

          <colspec colnum="4" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute, Element</entry>

              <entry>Type</entry>

              <entry>Value Metadata</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>type</code></entry>

              <entry><code>type</code></entry>

              <entry><para><code>type</code></para><para><code>:
              String</code></para></entry>

              <entry><para>The optional type name to be used in type
              converting the given string to a target type. This type can
              commit the conversion to a specific choice. If this type is not
              set, then it must return null. For the type syntax, see <xref linkend="i2972566"/>.</para></entry>
            </row>

            <row>
              <entry><code>...</code></entry>

              <entry><code>&lt;&lt;type&gt;&gt;</code></entry>

              <entry><para><code>stringValue</code></para><para><code>:
              String</code></para></entry>

              <entry><para>The string value that must be converted to the
              target type, if set.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>If a value element is used as a member in a <code>list</code>,
      <code>map</code>, <code>array</code>, or <code>set</code> then the
      enclosing collection can define a default value for the type attribute
      of its value elements.</para>

      <para>The following example creates a list of two OSGi version
      objects.</para>

      <programlisting>&lt;list value-type="org.osgi.framework.Version"&gt;
    &lt;value&gt;1.3.4&lt;/value&gt;
    &lt;value&gt;5.6.2.v200911121020&lt;/value&gt;
&lt;/list&gt;</programlisting>

      <para>The corresponding Java code is:</para>

      <programlisting>Arrays.asList( new Version("1.3.4"), 
    new Version("5.6.2.v200911121020") )</programlisting>
    </section>

    <section xml:id="i1979534">
      <title>&lt;null&gt;</title>

      <para>A null element results in a Java <code>null</code>. It has no
      attributes and no elements. It corresponds to Null Metadata.</para>
    </section>

    <section xml:id="i1979486">
      <title>&lt;list&gt;, &lt;set&gt;, &lt;array&gt;</title>

      <para>Lists, sets, and arrays are referred to as
      <emphasis>collections</emphasis>. List and array are ordered sequences
      of objects, where equal objects can occur multiple times. A set discards
      equal objects.</para>

      <para>The structure of a collection element is:</para>

      <programlisting>collection  ::=  value *
 </programlisting>

      <table>
        <title>Collection Features</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colname="col3" colnum="3" colwidth="3*"/>

          <colspec colname="col4" colnum="4" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute or Element</entry>

              <entry>Type</entry>

              <entry>Collection Metadata</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry morerows="1"><code>value-type</code></entry>

              <entry morerows="1"><code>type</code></entry>

              <entry><para><code>valueType</code></para><para><code>:
              String</code></para></entry>

              <entry><para>Optionally set the type for
              <code>ValueMetadata</code> children.</para></entry>
            </row>

            <row>
              <entry colname="col3"><para><code>collectionClass</code></para><para><code>:
              Class&lt;</code></para><para><code>  List | Set |
              Object[] &gt;</code></para></entry>

              <entry colname="col4"><para>The actual collection class to be
              used, derived from the appropriate definition.</para></entry>
            </row>

            <row>
              <entry><code>&lt;...&gt;</code></entry>

              <entry><code>object*</code></entry>

              <entry><para><code>values</code></para><para><code>:
              List&lt;Metadata&gt;</code></para></entry>

              <entry><para>The Metadata for the children of the
              collection</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The <code>valueType</code> sets the default for any contained
      <code>ValueMetadata</code> objects. The result of a collection element
      is an object that implements the given collection interface or is an
      <code>Object[]</code>. That is, the resulting object is mutable and can
      be used by the application. However, type conversion can create a copy
      of this list.</para>

      <para>The following example creates a List of Lists of 2x2 of
      <code>int</code> values:</para>

      <programlisting>&lt;list&gt;
    &lt;list value-type="int"&gt;
        &lt;value&gt;2&lt;/value&gt;
        &lt;value&gt;7&lt;/value&gt;
    &lt;/list&gt;
    &lt;list value-type="int"&gt;
        &lt;value&gt;9&lt;/value&gt;
        &lt;value&gt;5&lt;/value&gt;
    &lt;/list&gt;
&lt;/list&gt;</programlisting>

      <para>The corresponding Java code is:</para>

      <programlisting>Arrays.asList( 
    new int[] {2,7},
    new int[]{9,5},
)</programlisting>
    </section>

    <section xml:id="i1979502">
      <title>&lt;map&gt;</title>

      <para>A map is a sequence of associations between a
      <emphasis>key</emphasis> and some object., this association is called an
      <emphasis>entry</emphasis>. The structure of a <code>map</code> element
      is therefore:</para>

      <programlisting>map ::= &lt;entry&gt; *</programlisting>

      <table>
        <title>Map Features</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3" colwidth="3*"/>

          <colspec colnum="4" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute or Element</entry>

              <entry>Type</entry>

              <entry>Map Metadata</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>key-type</code></entry>

              <entry><code>type</code></entry>

              <entry><para><code>keyType</code></para><para><code>:
              String</code></para></entry>

              <entry><para>Optional default type for keys. For the syntax see
              <xref linkend="i2972566"/>.</para></entry>
            </row>

            <row>
              <entry><code>value-type</code></entry>

              <entry><code>type</code></entry>

              <entry><para><code>valueType</code></para><para><code>:
              String</code></para></entry>

              <entry><para>Optional default type for values. For the syntax
              see <xref linkend="i2972566"/>.</para></entry>
            </row>

            <row>
              <entry><code>&lt;entry&gt;</code></entry>

              <entry>See <xref linkend="i2443675"/>.</entry>

              <entry><para><code>values</code></para><para><code>:
              List&lt;MapEntry&gt;</code></para></entry>

              <entry><para>The <code>MapEntry</code> object for the children
              of the map or properties.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>There are no additional constraints.</para>
    </section>

    <section xml:id="i2443675">
      <title>&lt;entry&gt;</title>

      <para>The entry element provides an association between a key and a
      value. The structure of the element is:</para>

      <programlisting>entry   ::= &lt;key&gt; object
key     ::= nonNullValue</programlisting>

      <table>
        <title>Entry Features</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3" colwidth="3*"/>

          <colspec colnum="4" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Type</entry>

              <entry>Map Entry</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>key</code></entry>

              <entry><code>&lt;&lt;type&gt;&gt;</code></entry>

              <entry><para><code>key</code></para><para><code>:
              NonNullMetadata</code></para></entry>

              <entry><para>Specify the key of the entry.</para></entry>
            </row>

            <row>
              <entry><code>key-ref</code></entry>

              <entry><code>NCName</code></entry>

              <entry><para><code>key</code></para><para><code>:
              NonNullMetadata</code></para></entry>

              <entry><para>Reference to a top-level manager</para></entry>
            </row>

            <row>
              <entry><code>&lt;key&gt;</code></entry>

              <entry><code>nonNull-Value</code></entry>

              <entry><para><code>key</code></para><para><code>:
              NonNullMetadata</code></para></entry>

              <entry><para>Contains an inlined value that is never
              null.</para></entry>
            </row>

            <row>
              <entry><code>value</code></entry>

              <entry><code>&lt;&lt;type&gt;&gt;</code></entry>

              <entry><para><code>value</code></para><para><code>:
              Metadata</code></para></entry>

              <entry><para>Specify the value directly, this will be a string
              type.</para></entry>
            </row>

            <row>
              <entry><code>value-ref</code></entry>

              <entry><code>NCName</code></entry>

              <entry><para><code>value</code></para><para><code>:
              RefMetadata</code></para></entry>

              <entry><para>A reference to a top-level manager</para></entry>
            </row>

            <row>
              <entry><code>&lt;...&gt;</code></entry>

              <entry><code>object</code></entry>

              <entry><para><code>value</code></para><para><code>:
              Metadata</code></para></entry>

              <entry><para>An inlined manager</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Additional constraints:</para>

      <itemizedlist>
        <listitem>
          <para><code>key</code>, <code>key-ref</code> attributes and
          <code>key</code> element are mutually exclusive.</para>
        </listitem>

        <listitem>
          <para><code>value</code>, <code>value-ref</code> attributes and
          <code>value</code> element are mutually exclusive.</para>
        </listitem>

        <listitem>
          <para>The resulting object of a key must not be a primitive
          type.</para>
        </listitem>
      </itemizedlist>

      <para>The following example shows the different way an entry can get its
      key. In this case the value is always a string.</para>

      <programlisting>&lt;map&gt;
    &lt;entry key="bar"     value="..."/&gt;    // 1
    &lt;entry key-ref="bar" value="..."/&gt;    // 2
    &lt;entry value="..."&gt;                   // 3
        &lt;key&gt;
            &lt;value type="org.osgi.framework.Version"&gt;
                2.71
            &lt;/value&gt;
        &lt;/key&gt;
    &lt;/entry&gt;
&lt;/map&gt;</programlisting>

      <para>The previous example is equivalent to the following Java
      code:</para>

      <programlisting>Map m = new HashMap();
m.put( "bar", "...");
m.put( container.getComponentInstance("bar"), "...");
m.put( new Version("2.71"), "...");</programlisting>

      <para>The following examples shows the different ways a value of an
      entry can be defined.</para>

      <programlisting>&lt;map&gt;
    &lt;entry key="1" value="1"/&gt;
    &lt;entry key="2" value-ref="foo"/&gt;
    &lt;entry key="3"&gt;
        &lt;value type="org.osgi.framework.Version"&gt;3.14&lt;/value&gt;
    &lt;/entry&gt;
&lt;/map&gt;</programlisting>

      <para>The previous code is equivalent to the following Java code.</para>

      <programlisting>Map m = new HashMap()
m.put("1", "1");
m.put("2", container.getComponentInstance("foo"))
m.put("3", new Version("3.14"));</programlisting>
    </section>

    <section xml:id="i1979518">
      <title>&lt;props&gt;</title>

      <para>The <code>props</code> element specifies a <code>Properties</code>
      object. The structure of a <code>props</code> element is as
      follows:</para>

      <programlisting> props  ::= prop *</programlisting>

      <para>Each <code>prop</code> element is an association between two
      strings. It defines the following attributes:</para>

      <itemizedlist>
        <listitem>
          <para><code>key</code> - A string specifying the property key. This
          attribute is required.</para>
        </listitem>

        <listitem>
          <para><code>value</code> - A string specifying the property
          value.</para>
        </listitem>
      </itemizedlist>

      <para>The following example initializes the same <code>Properties</code>
      object in two s ways.</para>

      <programlisting>&lt;props&gt;
    &lt;prop key="1"&gt;one&lt;/prop&gt;
    &lt;prop key="2"&gt;two&lt;/prop&gt;
&lt;/props&gt;

&lt;props&gt;
    &lt;prop key="1" value="one"/&gt;
    &lt;prop key="2" value="two"/&gt;
&lt;/props&gt;</programlisting>

      <para>This is equivalent to the following Java code:</para>

      <programlisting>Properties p = new Properties();
p.setProperty( "1", "one");
p.setProperty( "2", "two");</programlisting>
    </section>

    <section>
      <title>Manager as Value</title>

      <para>Each manager can be the provider of component instances that act
      as object values. When a manager is used in an object value, then that
      is the manager asked to provide a component instance. The managers are
      specified in <xref linkend="i3005561"/>. The simple example is a bean.
      Any inlined bean can act as an object value. For example:</para>

      <programlisting>&lt;list&gt;
    &lt;bean class="com.acme.FooImpl"/&gt;
&lt;/list&gt;</programlisting>

      <para>Some managers have side effects when they are instantiated. For
      example, a service manager will result in a
      <code>ServiceRegistration</code> object but it will also register a
      service.</para>

      <programlisting>&lt;map&gt;
    &lt;entry key="foo"&gt;
        &lt;service interface="com.acme.Foo"&gt;
            &lt;bean class="com.acme.FooImpl"/&gt;
        &lt;/service&gt;
    &lt;/entry&gt;
&lt;/map&gt;    </programlisting>
    </section>
  </section>

  <section xml:id="i2381582">
    <title>Dependency Injection</title>

    <para>A bean has a recipe for constructing a component instance with a
    constructor or factory and then providing it with its
    <emphasis>properties</emphasis>. These properties are then injected with
    <emphasis>object values</emphasis>, see <xref linkend="i2352936"/>.</para>

    <para>The following types of dependencies can be injected:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Constructor arguments</emphasis> - The
        <code>arguments</code> specify the parameters for a
        constructor.</para>
      </listitem>

      <listitem>
        <para><emphasis>Static Factory arguments</emphasis> - The
        <code>arguments</code> specify the parameters for a static
        method.</para>
      </listitem>

      <listitem>
        <para><emphasis>Instance Factory arguments</emphasis> - The
        <code>arguments</code> specify the parameters for a method on an
        object provided by another manager.</para>
      </listitem>

      <listitem>
        <para><emphasis>Properties</emphasis> - The <code>value</code> of the
        Bean Property specifies the single parameter for the property's set
        method.</para>
      </listitem>
    </itemizedlist>

    <para>In all the previous cases, the Blueprint Container must find an
    appropriate method or constructor to inject the dependent objects into the
    bean. The process of selecting the correct method or constructor is
    described in the following section, which assumes a Bean Argument as
    context, where a Bean Property acts as a Bean Argument without an
    <code>index</code> or <code>type</code> set.</para>

    <section xml:id="i1800540">
      <title>Signature Disambiguation</title>

      <para>Constructors, factory methods, and property set methods are
      described with Metadata. The Blueprint Container must map these
      descriptions to an actual method or constructor. In practice, there can
      be multiple methods/constructors that could potentially map to the same
      description. It is therefore necessary to disambiguate this selection.
      Both factory methods and constructors have the same concept of
      <emphasis>signatures</emphasis>. A signature consists of an ordered
      sequence of zero or more types. For methods, only publicly accessible
      methods with the appropriate name are considered. For constructors, all
      publicly accessible constructors are considered. The disambiguation
      process described here is valid for all constructors and methods because
      the signature concept applies to both of them.</para>

      <orderedlist>
        <listitem>
          <para>Discard any signatures that have the wrong cardinality</para>
        </listitem>

        <listitem>
          <para>Find the list of signatures that have
          <emphasis>assignable</emphasis> types for each argument in their
          corresponding positions. Assignable is defined in <xref linkend="i2736197"/>. If a <code>type</code> was specified for an
          argument, then this <code>type</code> must match the name of the
          corresponding reified type in the signature exactly.</para>
        </listitem>

        <listitem>
          <para>If this result list has one element, then this element is the
          answer. If this list has more than one element, then the
          disambiguation fails.</para>
        </listitem>

        <listitem>
          <para>Otherwise, find the list of signatures that have
          <emphasis>compatible</emphasis> types for each argument in their
          corresponding positions. Compatibility is defined in <xref linkend="i2736197"/>.</para>
        </listitem>

        <listitem>
          <para>If this result list has one element, then this element is the
          answer. If the list has more than one element, then the
          disambiguation fails.</para>
        </listitem>

        <listitem xml:id="service.blueprint-signaturedisambiguation6">
          <para>If the arguments cannot be reordered (the <code>index</code>
          of the <code>argument</code> is used and is thus not -1, or there
          are less than two arguments) then the disambiguation fails.</para>
        </listitem>

        <listitem>
          <para>Find all signatures that match a re-ordered combination of the
          arguments. Reordering must begin with the first argument and match
          this argument against the first <emphasis>assignable</emphasis>
          types in a signature, going from position 0 to <code>n</code>. If
          the type is assignable from the argument, then it is locked in that
          position. If the argument has a <code>type</code>, then it must
          exactly match the name of the selected signature type. The same is
          done for the subsequent arguments. If all arguments can find an
          exclusive position in the signature this way, than the signature is
          added to the result.</para>
        </listitem>

        <listitem>
          <para>If the result list contains one signature, then this is the
          resulting signature. If the list has more than one element, then the
          disambiguation fails.</para>
        </listitem>

        <listitem>
          <para>Repeat step <xref linkend="service.blueprint-signaturedisambiguation6"/>, but now look
          for <emphasis>compatible</emphasis> types instead of assignable
          types.</para>
        </listitem>

        <listitem>
          <para>If the result list contains one signature, then this is the
          resulting signature.</para>
        </listitem>

        <listitem>
          <para>Otherwise, the disambiguation fails</para>
        </listitem>
      </orderedlist>

      <para>An example elucidates how the disambiguation works. Assuming the
      following definition and classes:</para>

      <programlisting>&lt;bean ...&gt;
    &lt;argument&gt;
        &lt;bean class="Bar"/&gt;
    &lt;/argument&gt;
    &lt;argument&gt;
        &lt;bean class="Foo"/&gt;
    &lt;/argument&gt;
&lt;bean&gt;

public class Bar extends Foo {}
public class Foo {}</programlisting>

      <para>The following bullets provide examples how signatures are matched
      against the previous definition.</para>

      <itemizedlist>
        <listitem>
          <para><code>(Bar,Foo)</code> - The arguments will be in the given
          order and the ordered match will succeed. This is the normal
          case.</para>
        </listitem>

        <listitem>
          <para><code>(Foo,Bar)</code> - This will not match because in the
          re-ordered match, the Bar argument (which is a <code>Foo</code>
          sub-type) is matched against the first argument. The second
          <code>Foo</code> argument can then no longer find a compatible type
          because that slot is taken by the <code>Bar</code> instance.</para>
        </listitem>

        <listitem>
          <para><code>(Object,Object)</code> - This will be called with
          <code>(aBar,aFoo)</code>.</para>
        </listitem>
      </itemizedlist>

      <para>Multiple constructors on a class can require disambiguation with
      the arguments <code>type</code>. In the following example, the
      <code>Multiple</code> class has two constructors that would both match
      the constructor arguments because a <code>String</code> object can be
      converted to both a <code>File</code> object and a <code>URL</code>
      object.</para>

      <programlisting>public class Multiple {
    public Multiple(URL a);
    public Multiple(File a);
}</programlisting>

      <para>An attempt to configure a <code>Multiple</code> object without the
      <code>type</code> will fail, because it is not possible to determine the
      correct constructor. Therefore, the <code>type</code> should be set to
      disambiguate this:</para>

      <programlisting>&lt;bean class="Multiple"&gt;
  &lt;argument type="java.net.URL" value="http://www.acme.us"/&gt;
&lt;/bean&gt;</programlisting>
    </section>

    <section xml:id="i2736197">
      <title>Type Compatibility</title>

      <para>During injection, it is necessary to decide about type
      <emphasis>assignability</emphasis> or type
      <emphasis>compatibility</emphasis> in several places. If generics are
      present, a type must be <emphasis>reified</emphasis> in its class, see
      <xref linkend="i2814178"/>. In this specification, the canonical
      representation for a type is <code>T&lt;P1..Pn&gt;</code>, where
      <code>n</code> is zero for a non-parameterized type, which is always
      true in a VM less than Java 5. The <code>ReifiedType</code> class models
      this kind of type.</para>

      <para>If type <code>T</code> or <code>S</code> is primitive, then they
      are treated as their corresponding wrapper class for deciding
      assignability and compatibility. Therefore, a type
      <code>T&lt;P1..Pn&gt;</code> (target) is <emphasis>assignable</emphasis>
      from an object <code>s</code> of type <code>S</code> (source) when the
      following is true:</para>

      <itemizedlist>
        <listitem>
          <para><code>n == 0, and</code></para>
        </listitem>

        <listitem>
          <para><code>T.isAssignableFrom(S)</code></para>
        </listitem>
      </itemizedlist>

      <para><code>T&lt;P1..Pn&gt;</code>is <emphasis>compatible</emphasis>
      with an object <code>s</code> of type <code>S</code> when it is
      assignable or it can be converted using the Blueprint built-in type
      converter. The convertability must be verified with the
      <code>canConvert(s,T&lt;P1..Pn&gt;)</code> method. That is, type
      compatibility is defined as:</para>

      <itemizedlist>
        <listitem>
          <para><code>assignable(T&lt;P1..Pn&gt;,S), and</code></para>
        </listitem>

        <listitem>
          <para><code>cs.canConvert(s,T&lt;P1..Pn&gt;)</code> returns
          <code>true</code></para>
        </listitem>
      </itemizedlist>

      <para>Where <code>cs</code> is the Blueprint built in type converter
      that also uses the custom type converters.</para>
    </section>

    <section xml:id="i1864218">
      <title>Type Conversion</title>

      <para>Strings in Blueprint definitions, object values, and component
      instances must be made compatible with the type expected by an injection
      target (method or constructor argument, or property) before being
      injected, which can require <emphasis>type conversion</emphasis>. The
      Blueprint Container supports a number of built-in type conversions, and
      provides an extension mechanism for configuring additional type
      converters. Custom type converters have priority over built-in
      converters.</para>

      <para>The goal of the type conversion is to convert a source object
      <code>s</code> with type <code>S</code> to a target type
      <code>T&lt;P1..Pn&gt;</code>. The conversion of the Blueprint built-in
      type converter must take place in the following order:</para>

      <orderedlist>
        <listitem>
          <para>If <code>T&lt;P1..Pn&gt;</code> is assignable from
          <code>S</code>, which implies n=0, then no conversion is necessary,
          except that primitives must be converted to their wrapper
          types.</para>
        </listitem>

        <listitem>
          <para>Try all type converters in declaration order with the
          <code>canConvert(s,T&lt;P1..Pn&gt;)</code> method, exceptions are
          ignored and logged. The first converter that returns
          <code>true</code> is considered the converter, its result is
          obtained by calling <code>convert(s,T&lt;P1..Pn&gt;)</code>.
          Exceptions in this method must be treated as an error.</para>
        </listitem>

        <listitem>
          <para>If <code>T</code> is an array, then <code>S</code> must be an
          array or it must implement <code>Collection</code>, otherwise the
          conversion fails. Each member of array <code>s</code> must be type
          converted to the component type of <code>T</code> using the generics
          information if available, see the <code>getComponentType</code>
          method on <code>Class</code>. This is a recursive process. The
          result must be stored in an array of type <code>T</code>.</para>
        </listitem>

        <listitem>
          <para>If <code>T</code> implements <code>Collection</code>, then
          <code>S</code> must be an array or implement
          <code>Collection</code>, otherwise the conversion fails. If the
          platform supports generics, the members of object <code>s</code>
          must be converted to the member type of the collection if this is
          available from the generics information, or to <code>Object</code>
          otherwise. The Blueprint Container must create a target collection
          and add all members of <code>s</code> to this new object in the
          iteration order of <code>s</code>. The target collection depends on
          type <code>T</code>:</para>

          <itemizedlist>
            <listitem>
              <para>If <code>T</code> is one of the interfaces listed in <xref linkend="i2779480"/>, then the target collection must be the
              corresponding concrete class.</para>
            </listitem>

            <listitem>
              <para><code>T</code> must represent a public concrete class with
              an empty publicly accessible constructor, the target collection
              is then a new instance of <code>T</code>.</para>
            </listitem>

            <listitem>
              <para>Otherwise <code>T</code> represents an interface and the
              conversion must fail.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>If <code>T</code> implements <code>Map</code> or extends
          <code>Dictionary</code>, then <code>S</code> must implement
          <code>Map</code> or extend <code>Dictionary</code> as well,
          otherwise the conversion fails. If the platform supports generics,
          the members of map <code>s</code> must be converted to the key and
          value type of the target map. This is a recursive process. Without
          generics, the members are not converted and put as is.</para>

          <para>The target map depends on T:</para>

          <itemizedlist>
            <listitem>
              <para>If <code>T</code> is a public concrete class (not
              interface) with an empty publicly accessible constructor then
              the target map must be a new instance of <code>T</code>.</para>
            </listitem>

            <listitem>
              <para>If <code>T</code> is one of the <code>Map</code>
              interfaces or <code>Dictionary</code> listed in <xref linkend="i2779480"/>, then the target map must be the
              corresponding concrete class.</para>
            </listitem>

            <listitem>
              <para>Otherwise, the conversion fails.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>If <code>T</code> is one of the primitive types (<code>byte,
          char, short, int, long, float, double, boolean</code>) then treat
          <code>T</code> as the corresponding wrapper class.</para>
        </listitem>

        <listitem>
          <para>If <code>T</code> extends class <code>Number</code> and
          <code>S</code> extends also class <code>Number</code> then convert
          the source to a number of type <code>T</code>. If the target type
          cannot hold the value then the conversion fails. However, precision
          may be lost if a <code>double</code> or <code>float</code> is
          converted to one of the integer types.</para>
        </listitem>

        <listitem>
          <para>If source type <code>S</code> is not class
          <code>String</code>, then the conversion fails.</para>
        </listitem>

        <listitem>
          <para>The conversion is attempted based on the target type
          <code>T</code> from the string <code>s</code>. The following target
          types are supported:</para>

          <itemizedlist>
            <listitem>
              <para><code>boolean</code> or <code>Boolean</code> - Construct
              the appropriate boolean type while accepting the following
              additional values for <code>true</code> and <code>false</code>
              respectively:</para>

              <itemizedlist>
                <listitem>
                  <para><code>yes</code>, <code>no</code></para>
                </listitem>

                <listitem>
                  <para><code>on</code>, <code>off</code></para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para><code>Character</code> - The string <code>s</code> must
              have a length of 1, this single character is then converted to a
              <code>Character</code> object.</para>
            </listitem>

            <listitem>
              <para><code>Locale</code> - The string <code>s</code> is
              converted to a <code>Locale</code> using the following syntax
              (no spaces are allowed between terms).</para>

              <programlisting>locale  ::= &lt;java language-code&gt; ( '_' country)+
country ::= &lt;java country-code&gt; ('_' &lt;java variant-code&gt;)+</programlisting>
            </listitem>
          </itemizedlist>

          <itemizedlist>
            <listitem>
              <para><code>Pattern</code> - Create the <code>Pattern</code>
              object with <code>Pattern.compile(String)</code>.</para>
            </listitem>

            <listitem>
              <para><code>Properties</code> - Create a new
              <code>Properties</code> object and load the properties from the
              string. The string must follow the format described with the
              <code>Properties.load method</code>.</para>
            </listitem>

            <listitem>
              <para><code>Enum subclass</code> - Convert the string
              <code>s</code> to the appropriate member of the given enum with
              the <code>Enum.valueOf</code> method. If the string is not one
              of the enum values, then the conversion must fail.</para>
            </listitem>

            <listitem>
              <para><code>Class</code> - The string <code>s</code> must
              conform to the syntax in <xref linkend="i2972566"/>. This type
              must be loaded through the Bundle's <code>loadClass</code>
              method. The resulting class must match any generic constraints
              on <code>T</code>. If this fails, the conversion fails.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>If target type <code>T</code> has a constructor
          <code>(String)</code>, then use this constructor to create an
          instance with the source string <code>s</code>. This convention
          caters for many of the built-in Java types such as
          <code>BigDecimal</code>, <code>BigInteger</code>, <code>File</code>,
          <code>URL</code>, and so on, as well as for custom types.</para>
        </listitem>
      </orderedlist>

      <para>If none of the above steps has found a proper conversion than the
      conversion fails. Failing a conversion must end with throwing an Illegal
      Argument Exception.</para>
    </section>

    <section>
      <title>Type Converters</title>

      <para>A type converter converts a source type to a target type. The
      source type for a type converter is not constrained. A type converter
      must support the following methods:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.Converter.canConvert-Object-ReifiedType-" xrefstyle="hyperlink"/> - A light weight method that inspects the
          object and returns <code>true</code> if it can convert it to the
          given Reified Type, <code>false</code> otherwise. Converters
          normally can convert a type <code>S</code> to a type
          <code>T&lt;...&gt;</code>. However, converters can convert to
          multiple types and the value of the source object can influence the
          returned type. For example, a converter could convert a string to a
          type based on its content.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.Converter.convert-Object-ReifiedType-" xrefstyle="hyperlink"/> - The actual conversion method. This method
          should not fail if the <code>canConvert</code> method has returned
          <code>true</code>.</para>
        </listitem>
      </itemizedlist>

      <para>The <code>ReifiedType</code> class provides access to the target
      class. In a Java 1.4 environment, the <code>ReifiedType</code> object
      will provide a <code>Class</code> object for conversion and no type
      arguments. In a Java 5 environment, the <code>ReifiedType</code> object
      provides access to the reified class as well as the type arguments.
      Generics and reified types are described in <xref linkend="i2814178"/>.</para>

      <para>Type converters are normal managers with some limitations due to
      the dependency handling. If they depend on general managers or services
      then there is a change that cyclic dependencies are created.</para>

      <para>Converters must be defined in the <code>type-converters</code>
      element, see <xref linkend="i2709370"/>, to be registered as a
      converter. Component instances of managers in this section must
      implement the <code>Converter</code> interface. Converters must also
      only transitively depend on built-in converters. It must be possible to
      initialize all converters before any of them are used. Type converters
      should not use the type conversion before all type converters are fully
      configured.</para>

      <para>Converters are ordered within one definition resource but there is
      no resource ordering, so the overall ordering is not defined, making it
      a good practice to concentrate all converters in a single XML
      definition. The definition ordering is used during type conversion. That
      is, converters are not ordered by their specialization, a converter that
      is earlier can convert a more general type will override a converter
      that is later in the list but could have converted to a more specific
      type.</para>

      <para>Converters must always use the type arguments of the given Reified
      Type, even if they are running on Java 1.4. The default behavior of the
      Reified Type will automatically work.</para>

      <para>The following example demonstrates how a converter can use
      generics to use an <code>AtomicReference&lt;T&gt;</code> whenever type T
      is supported. Such a type could be for a property like:</para>

      <programlisting>public void setInteger( AtomicReference&lt;Integer&gt;atomic );</programlisting>

      <para>The Atomic Converter uses the generic argument to convert a source
      object to an Integer and then creates an <code>AtomicReference</code>
      with this converted object. The definition of the type converter looks
      like:</para>

      <programlisting>&lt;type-converters&gt;
  &lt;bean class="AtomicConverter"&gt;
    &lt;argument ref="blueprintConverter"/&gt;
  &lt;/bean&gt;
&lt;/type-converters&gt; </programlisting>

      <para>The Blueprint converter is injected in the constructor of the
      <code>AtomicInteger</code> class, in order to allow the conversion of
      the generic arguments. The Blueprint built-in type converter must not be
      used before all type converters are registered because a needed type
      converter might not have been registered yet. This is the reason type
      converters should not require type conversion in their initialization
      because the state of this converter is not well defined at this
      time.</para>

      <para>The conversion class looks like:</para>

      <programlisting>public class AtomicConverter {
  Converter bpc;
  public AtomicConverter(Converter bpc) { this.bpc=bpc; }

  public boolean canConvert(Object s,ReifiedType T) {
    return T.getRawClass() == AtomicReference.class
    &amp;&amp; bpc.canConvert(s, T.getActualTypeArgument(0));
  }

  public Object convert( Object s, ReifiedType T )
      throws Exception {
    Object obj = bpc.convert(
        s,T.getActualTypeArgument(0) );

     return new AtomicReference&lt;Object&gt;(obj);
  }
}</programlisting>

      <para>Any injection that now targets an
      <code>AtomicReference&lt;T&gt;</code> value will automatically be
      converted into an <code>AtomicReference</code> of the appropriate type
      because of the example converter. The following definitions test this
      behavior:</para>

      <programlisting>public class Foo&lt;T extends Integer&gt; {
  public Foo( AtomicReference&lt;T&gt; v) {}
}

&lt;bean id="foo" class="Foo"&gt; &lt;argument value="6"/&gt; &lt;/bean&gt; </programlisting>

      <para>This definition will create an <code>foo</code> object with the
      <code>Foo(AtomicReference&lt;T&gt;)</code> constructor. The source type
      is a string and there is no assignability for an Atomic Reference, so
      the registered type converters are consulted. The Atomic Converter
      recognizes that the target <code>T</code> is an
      <code>AtomicReference</code> class and indicates it can convert. The
      convert method then uses the generic argument information, which is an
      <code>Integer</code> object in the example, to convert the string "6" to
      an Integer object and return the appropriate
      <code>AtomicReference</code> object.</para>
    </section>

    <section xml:id="i2250799">
      <title>Built-in Converter</title>

      <para>A Blueprint Container must contain an environment manager called
      <code>blueprintConverter</code>. The related component instance must
      implement the <code>Converter</code> interface.</para>

      <para>The built-in Converter provides access to the provided type
      converters as well as the built in types. This service provides the type
      conversion as defined in <xref linkend="i1864218"/>.</para>

      <para>Injecting a reference to the <code>blueprintConverter</code>
      environment manager into a bean provides access to all the type
      conversions that the Blueprint Container and registered type converters
      are able to perform. However, if this converter is injected in a type
      converter, then by definition, not all custom type converters are yet
      registered with the built-in converter. Type converters should therefore
      in general not rely on type conversion during their construction.</para>
    </section>

    <section xml:id="i2779480">
      <title>Concrete Types for Interfaces</title>

      <para>The Blueprint extender can choose an implementation class when it
      provides an instance during conversion to an interface as well as when
      it natively provides an object. The actual implementation class can make
      a noticeable difference in disambiguation, type conversion, and general
      behavior. Therefore this sections describe the concrete types an
      implementation must use for specific interfaces if the platform allows
      this.</para>

      <table>
        <title>Implementation types for interfaces</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="3*"/>

          <colspec colnum="3" colwidth="3*"/>

          <thead>
            <row>
              <entry><para/></entry>

              <entry>Interface/Abstract class</entry>

              <entry>Implementation class</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><para/></entry>

              <entry><para><code>Collection</code></para></entry>

              <entry><para><code>ArrayList</code></para></entry>
            </row>

            <row>
              <entry><para/></entry>

              <entry><para><code>List</code></para></entry>

              <entry><para><code>ArrayList</code></para></entry>
            </row>

            <row>
              <entry><para>Java 5</para></entry>

              <entry><para><code>Queue</code></para></entry>

              <entry><para><code>LinkedList</code></para></entry>
            </row>

            <row>
              <entry><para/></entry>

              <entry><para><code>Set</code></para></entry>

              <entry><para><code>LinkedHashSet</code></para></entry>
            </row>

            <row>
              <entry><para/></entry>

              <entry><para><code>SortedSet</code></para></entry>

              <entry><para><code>TreeSet</code></para></entry>
            </row>

            <row>
              <entry><para/></entry>

              <entry><para><code>Map</code></para></entry>

              <entry><para><code>LinkedHashMap</code></para></entry>
            </row>

            <row>
              <entry><para/></entry>

              <entry><para><code>SortedMap</code></para></entry>

              <entry><para><code>TreeMap</code></para></entry>
            </row>

            <row>
              <entry><para>Java 5</para></entry>

              <entry><para><code>ConcurrentMap</code></para></entry>

              <entry><para><code>ConcurrentHashMap</code></para></entry>
            </row>

            <row>
              <entry><para/></entry>

              <entry><para><code>Dictionary</code></para></entry>

              <entry><para><code>Hashtable</code></para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>If possible, the instances of these types must preserve the
      definition ordering.</para>
    </section>

    <section xml:id="i2814178">
      <title>Generics</title>

      <para>Java 5 introduced the concept of <emphasis>generics</emphasis>.
      Before Java 5, a <emphasis>type</emphasis>, was simply a class or
      interface, both represented by the <code>Class</code> object. Generics
      augment these classes and interfaces with additional <emphasis>type
      constraints</emphasis>. These type constraints are not available on an
      instance because an instance always references a raw <code>Class</code>.
      For an instance all generic type constraints are
      <emphasis>erased</emphasis>. That is, a <code>List&lt;Integer&gt;</code>
      object is indistinguishable from a <code>List&lt;String&gt;</code>
      object, which are indistinguishable from a <code>List</code> object.
      Objects always refer to a raw <code>Class</code> object, this is the one
      returned from the <code>getClass</code> method. This Class object is
      shared between all instances and can therefore not have the actual type
      constraints (like <code>String</code>, <code>Integer</code> in the list
      examples).</para>

      <para>When a class is used the compiler captures the type constraints
      and associates them with the specific use and encodes them in a
      <code>Type</code> object. For example, a field declaration captures the
      full generic type information:</para>

      <programlisting>List&lt;String&gt; strings;</programlisting>

      <para>A field has a <code>getGenericType</code> method that provides
      access to a <code>Type</code> object, which is a super interface for all
      type information in the Java 5 and later runtime. In the previous
      example, this would be a Parameterized Type that has a raw class of
      <code>List</code> and a type argument that is the <code>String</code>
      class. These constraints are reflectively available for:</para>

      <itemizedlist>
        <listitem>
          <para>A superclass</para>
        </listitem>

        <listitem>
          <para>Implemented interfaces</para>
        </listitem>

        <listitem>
          <para>Fields</para>
        </listitem>

        <listitem>
          <para>For each method or constructor:</para>

          <itemizedlist>
            <listitem>
              <para>Return type</para>
            </listitem>

            <listitem>
              <para>Exception types</para>
            </listitem>

            <listitem>
              <para>Parameter types</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <para>Generics influence the type conversion rules because most of the
      time the Blueprint extender knows the actual <code>Type</code> object
      for an injection. Therefore, conversion must take place to a type like
      <code>T&lt;P1..Pn&gt;</code>, where T is a raw Class object and
      <code>P1..Pn</code> form the available type parameters. For a
      non-parametrized class and for other VMs than 1.4, <code>n</code> is
      always zero, that is no type arguments are available. The <code>P</code>
      arguments are in itself instances of <code>Type</code>. The form
      <code>T&lt;P1..Pn&gt;</code> is called the <emphasis>reified</emphasis>
      form. It can be constructed by traversing the <code>Type</code> graph
      and calculating a class that matches the constraints. For example
      <code>&lt; extends List&lt;T&gt;&gt;</code> defines a <emphasis>wild
      card</emphasis> constraint, that has a <code>List&lt;T&gt;</code> as
      reified type, where <code>T</code> is a Type Variable defined elsewhere
      that can have additional constraints. The resulting type must be an
      instance of <code>List&lt;T&gt;</code>. A reified type will use an
      object implementing <code>List</code> for such an example because that
      is the only class that is guaranteed to be compatible. The rules to
      reify the different <code>Type</code> interfaces are:</para>

      <itemizedlist>
        <listitem>
          <para><code>Class</code> - A Class represents unparameterized raw
          type and is reified into T&lt;&gt;. For example:</para>

          <programlisting>String string;</programlisting>
        </listitem>

        <listitem>
          <para><code>ParameterizedType</code> - A Parameterized Type defines
          a raw type and 1..n typed parameters. The raw type of the
          Parameterized Type is also reified and represents <code>T</code>.
          The arguments map directly to the arguments of the reified form. An
          example of a Parameterized Type is:</para>

          <programlisting>Map&lt;String,Object&gt; map;</programlisting>
        </listitem>

        <listitem>
          <para><code>TypeVariable</code> - Represents a Type Variable. A type
          variable is listed in a generics type declaration, for example in
          <code>Map&lt;K,V&gt;</code>, the <code>K</code> and <code>V</code>
          are the type variables. A type variable is bounded by a number of
          types because it is possible to declare a bounded type like:
          <code>&lt;A extends Readable&amp;Closeable&gt;</code>. A Type
          Variable is reified by taking its first bound in reified form, this
          is the same as in Java 5 where the first bounds is the erasure type.
          However, this can fail if multiple bounds are present. An example of
          a Type Variable is:</para>

          <programlisting>public &lt;T extends ServiceTracker&gt; void setMap(T st) {} </programlisting>

          <para>In this example, the parameter <code>st</code> will have a
          reified type of <code>ServiceTracker</code>.</para>
        </listitem>

        <listitem>
          <para><code>WildcardType</code> - A Wildcard Type constrains a type
          to a set of lower bounds and a set of upper bounds, at least in the
          reflective API. In the Java 5 and later syntax a Wildcard Type can
          only specify 0 or one lower and one upper bound, for example
          <code>&lt;T extends Number&gt;</code> constraints the Type Variable
          <code>T</code> to at least extend the <code>Number</code> class. A
          Wildcard Type is reified into its reified upper bound when no lower
          bound is set, and otherwise it is reified into its reified lower
          bound. An example of a Wildcard Type is seen in the example of a
          Type Variable.</para>
        </listitem>

        <listitem>
          <para><code>GenericArrayType</code> - A Generic Array Type
          represents an array. Its component type is reified and then
          converted to an array. The Reified Type will have the array class as
          reified class and the type arguments reflect the type arguments of
          the component type. For example:</para>

          <programlisting>public void setLists(List&lt;String&gt;[] lists) {}</programlisting>

          <para>This example will have a Reified Type of
          <code>List[]&lt;String&gt;</code>.</para>
        </listitem>
      </itemizedlist>

      <para>This specification is written to allow Java 1.4 implementations
      and clients, the API therefore has no generics. Therefore, the Type
      class in Java 5 and later cannot be used in the API. However, even if it
      could use the <code>Type</code> class, using the type classes to create
      the reified form is non-trivial and error prone. The API therefore
      provides a concrete class that gives convenient access to the reified
      form without requiring the usage of the <code>Type</code> class.</para>

      <para>The <code>ReifiedType</code> class provides access to the reified
      form of <code>Class</code>, which is itself and has no type arguments.
      However, Blueprint extender implementations that recognize Java 5
      generics should subclass the <code>ReifiedType</code> class and use this
      in the conversion process. The subclass can calculate the reified form
      of any <code>Type</code> subclasses.</para>
    </section>
  </section>

  <section xml:id="i1766539">
    <title>Service Dynamics</title>

    <para>The Blueprint Container specification handles the complexities of
    the dynamic nature of OSGi by <emphasis>hiding</emphasis> the dynamic
    behavior of the OSGi service registry, at least temporarily. This dynamic
    behavior is caused by service references that select one or more services
    that can come and go at runtime.</para>

    <para>The Blueprint Container must handle the dynamics in the following
    way:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Proxied references</emphasis> - Service reference
        managers must provide a proxy implementing the specified interfaces,
        instead of the actual service object it refers to. The proxy must
        fetch the real service lazily. For reference managers, when a proxy is
        used, and no candidate is available, a candidate must be found within
        a limited time. If no candidate service is available during this time,
        a Service Unavailable Exception must be thrown. The reference-list
        manager also maintains proxies but these proxies must throw a Service
        Unavailable Exception immediately when the proxy is used and the
        backing service is no longer available.</para>

        <para>When proxied references are used with stateful services, then
        the application code must register a reference listener to perform the
        necessary initialization and cleanup when a new backing service is
        bound.</para>
      </listitem>

      <listitem>
        <para><emphasis>Conditional Service Registrations</emphasis> - The
        service manager is responsible for registering a service with the OSGi
        service registry. A service manager is statically dependent on the
        transitive set of managers that it depends on. If these static
        dependencies contain mandatory service references, then the manager's
        service must not be registered when any of these mandatory service
        references is unsatisfied, see <xref linkend="i2630717"/>.</para>
      </listitem>
    </itemizedlist>

    <section xml:id="i2630744">
      <title>Damping</title>

      <para>When an operation is invoked on an unsatisfied proxy from a
      reference manager (either optional or mandatory), the invocation must
      block until either the reference becomes satisfied or a time-out expires
      (whichever comes first). During this wait, a <code>WAITING</code> event
      must be broadcast, see <xref linkend="i2148562"/>.</para>

      <para>The default <code>timeout</code> for service invocations is 5
      minutes. The optional <code>timeout</code> of the reference element
      specifies an alternate <code>timeout</code> (in milliseconds). If no
      matching service becomes available within the <code>timeout</code>, then
      a Service Unavailable Exception must be thrown. A <code>timeout</code>
      of zero means infinite and a negative <code>timeout</code> is an
      error.</para>

      <para>For example:</para>

      <programlisting>&lt;reference id="logService"
        interface="org.osgi.service.log.LogService" 
      timeout="100000" /&gt;

&lt;bean id="bar" class="BarImpl"&gt;
  &lt;property name="log" ref="logService"/&gt;           
&lt;/bean&gt;</programlisting>

      <para>When this Blueprint Container is instantiated, the reference
      manager provides a proxy for the Log Service, which gets injected in the
      <code>log</code> property. If no Log Service is available, then the
      proxy will have no backing service. If the <code>bar</code> object
      attempts to log, it will block and if the <code>timeout</code> expires
      the proxy must throw a Service Unavailable Exception.</para>

      <para>If at some later point in time, a Log Service is registered then
      it becomes satisfied again. If <code>bar</code> now logs a message, the
      proxy will get the service object again and forward the method
      invocation to the actual Log Service implementation.</para>

      <para>The damping ensures that a mandatory service reference that
      becomes unsatisfied does not cause the Blueprint Container to be
      destroyed. Temporary absences of mandatory services are tolerated to
      allow for administrative operations and continuous operation of as much
      of the system as possible.</para>

      <para>A reference-list manager does not provide damping. It only removes
      the service proxy from the collection if its service goes away. Using a
      collection reference manager will never block, it will just have no
      members if its selection is empty. A <code>timeout</code> attribute is
      therefore not supported by the <code>reference-list</code> elements.
      However, the elements are proxied and it is possible that they throw a
      Service Unavailable Exception when used and the backing service has
      disappeared. The exceptions for a reference-list proxy will be thrown
      immediately when the proxy is used.</para>
    </section>

    <section>
      <title>Iteration</title>

      <para>The provided object of a reference-list manager implements the
      <code>List</code> interface. Depending on the <code>memberType</code> or
      the optional generics information, it provides a collection that
      contains the member objects, that is, either proxies to the service
      object, or <code>ServiceReference</code> objects. These collections are
      read-only for the receiver, however, their contents can dynamically
      change due to changes in the selection. The access to these collections
      with iterators must give a number of guarantees:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Safe</emphasis> - All iterators of reference-list
          managers must be safe to traverse according to the
          <code>Iterator</code> interface contract, even while the underlying
          collection is being modified locally or in another thread. If the
          <code>hasNext</code> method returns <code>true</code>, the iterator
          must return a member object on the subsequent <code>next</code>
          method invocation. If there is no longer a service object available
          when requested, then a dummy proxy must be returned that throws a
          Service Unavailable Exception whenever it is used.</para>
        </listitem>

        <listitem>
          <para><emphasis>Visibility</emphasis> - All the changes made to the
          collection that affect member objects not yet returned by the
          iterator must be visible in the iteration. Proxies for new services
          must be added at the end of the List. Proxies already returned can
          be affected by changes in the service registry after the iterator
          has returned them.</para>
        </listitem>
      </itemizedlist>

      <para>After the iterator has returned <code>false</code> for the
      <code>hasNext</code> method, no more objects can be obtained from it. A
      List Iterator must not be supported.</para>
    </section>

    <section xml:id="i2416456">
      <title>Mandatory Dependencies</title>

      <para>A service manager can have mandatory service reference managers in
      its transitive dependencies. Such a service manager must ensure that the
      service object is registered with the OSGi service registry during the
      runtime phase when all its mandatory service references that it depends
      on are satisfied. This called <emphasis>tracking</emphasis> the
      dependency. A service manager is <emphasis>enabled</emphasis> when all
      its mandatory references in its dependencies are satisfied.</para>

      <para>This tracking only works for dependencies declared directly in the
      definitions; dependencies established during runtime by calling the
      <code>getComponentInstance</code> method are not tracked.</para>

      <para>In the following example, service manager <code>S</code> has a
      transitive dependency on the mandatory reference manager <code>M</code>,
      which means the Blueprint Container must ensure that the service object
      provided by bean <code>A</code> is registered when reference manager
      <code>M</code> is satisfied.</para>

      <programlisting>&lt;service id="S" ref="A" interface="com.acme.Foo"/&gt;
&lt;bean id="A" class="com.acme.FooImpl"&gt;
   &lt;property name="bar" ref="m"/&gt;
&lt;/bean&gt; 
&lt;reference id="M" interface="com.acme.Bar"
     availability="mandatory"/&gt;</programlisting>

      <para>However, if the dependency from manager <code>A</code> on manager
      <code>M</code> is not declared but created through code that manipulates
      the Blueprint Container then the dependency is not tracked.</para>
    </section>
  </section>

  <section xml:id="i2088582">
    <title>Blueprint Container</title>

    <para>The Blueprint Container has a registry where all top-level managers,
    as well as <emphasis>environment</emphasis> managers, are registered by
    their component id. The Blueprint Container can be injected in application
    code with the environment <code>blueprintContainer</code> manager. For
    example:</para>

    <programlisting>&lt;bean class="com.acme.FooImpl"&gt;
    &lt;property name="container" ref="blueprintContainer"/&gt;
&lt;/bean&gt;</programlisting>

    <para>The Blueprint Container allows application code to get objects that
    are provided by the top-level managers through the
    <code>getComponentInstance</code> method. However, the Blueprint Container
    should not be required to get a component instance; the proper way to use
    Blueprint is to inject them. This declarative approach makes the Blueprint
    Container aware of any dependencies; one of the primary goals of a
    dependency injection framework. The Blueprint Container's introspective
    features are commonly used for management and other non-application
    purposes.</para>

    <para>The Blueprint Container is registered as a service during the
    runtime phase so that other bundles can use it for these, and other,
    purposes.</para>

    <section>
      <title>Environment Managers</title>

      <para>The Blueprint Container provides a number of <emphasis>environment
      managers</emphasis>. These managers have defined names and provide
      convenient access to information about the environment. Environment
      managers cannot be overridden by explicitly defined managers because it
      is invalid to define a manager with an existing component id. All
      component ids starting with <code>blueprint</code> are reserved for this
      specification and future incarnations.</para>

      <para>There is no XML definition for environment managers but their
      Metadata must be provided as <code>ComponentMetadata</code>
      objects.</para>

      <para>The following ids are used for the environment managers:</para>

      <itemizedlist>
        <listitem>
          <para><code>blueprintContainer</code> - The Blueprint
          Container.</para>
        </listitem>

        <listitem>
          <para><code>blueprintBundle</code> - A manager that provides the
          Blueprint bundle's <code>Bundle</code> object.</para>
        </listitem>

        <listitem>
          <para><code>blueprintBundleContext</code> - A manager that provides
          the Blueprint bundle's <code>BundleContext</code> object.</para>
        </listitem>

        <listitem>
          <para><code>blueprintConverter</code> - A manager that provides an
          object implementing the <code>Converter</code> interface. This
          represents the built-in conversion facility that the Blueprint
          Container uses to convert objects. See <xref linkend="i2250799"/>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Component Instances</title>

      <para>The Blueprint Container provides access to the component instances
      that the top level managers can provide, as well as their Metadata. The
      Blueprint Container has the following methods for requesting a component
      instance and to find out what managers are available:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.BlueprintContainer.getComponentInstance-String-" xrefstyle="hyperlink"/> - This method will provide a component
          instance from the component id. If the manager has not been
          activated yet, it must atomically activate and ensure its explicit
          and implicit dependencies are activated transitively.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.BlueprintContainer.getComponentIds--" xrefstyle="hyperlink"/> - Returns a set of component ids in this
          Blueprint Container. These ids must consist of all top level
          managers (including calculated ids) and environment managers.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Access to Component Metadata</title>

      <para>Each of the manager types has specific Component Metadata subtypes
      associated with it, except Environment managers that use Component
      Metadata. The Blueprint Container provides access by component id to the
      Component Metadata of the top level managers. However, managers can also
      be defined inline, in which case they do not have a component id.
      Therefore, the Blueprint Container can also enumerate all the managers
      that are represented by a <code>Metadata</code> sub-interface.</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.BlueprintContainer.getComponentMetadata-String-" xrefstyle="hyperlink"/> - Answer the Component Metadata sub-type for
          the given component id. Environment managers will return a
          <code>ComponentMetadata</code> object, the other managers each have
          their own specific Metadata type.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.BlueprintContainer.getMetadata-Class-" xrefstyle="hyperlink"/> - Answer a collection with the Metadata of
          the given type, regardless if it is defined as/in a top-level or
          inlined manager. For example,
          <code>getMetadata(ServiceMetadata.class)</code> returns all Service
          Metadata in the Blueprint container. This includes all top level
          managers as well as any inlined managers. For Environment Managers,
          this method returns a <code>ComponentMetadata</code> object.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Concurrency</title>

      <para>A Blueprint Container must be thread safe. Each method must handle
      the case when multiple threads access the underlying registry of
      managers. Activation of managers must be atomic. That is, other threads
      must be blocked until a manager is completely activated.</para>

      <para>The Blueprint Container must handle reentrant calls.</para>
    </section>
  </section>

  <section xml:id="i2148562">
    <title>Events</title>

    <para>The Blueprint Container must track all Blueprint Listener services
    and keep these listeners updated of the progress or failure of all its
    managed bundles. The Blueprint Listener is kept informed by sending it
    events synchronously. These events are therefore normally delivered in
    order but in exceptional cases this can be seen out of order for a
    listener when new events are initiated synchronously from within a
    callback. Therefore, Blueprint Listener services should see the event as a
    notification, where actual work should be processed on another
    thread.</para>

    <para>Blueprint Events must be sent to each registered Blueprint Listener
    service. This service has the following method:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.blueprint.container.BlueprintListener.blueprintEvent-BlueprintEvent-" xrefstyle="hyperlink"/> - Notify the listener of a new Blueprint
        Event. These events are send synchronously with their cause. That is,
        all listeners must be notified before the Blueprint Container
        continues to the next step.</para>
      </listitem>
    </itemizedlist>

    <para>The events must be delivered as <code>BlueprintEvent</code> objects.
    The event types that they represent, and the data that these objects
    carry, is further described in <xref linkend="i2951918"/>.</para>

    <para>A Blueprint Listener services must be given the initial state of all
    managed bundles before normal processing starts, see <xref linkend="i2680219"/>.</para>

    <para>Blueprint Listener services that throw Exceptions or do not return
    in a reasonable time as judged by the Blueprint extender implementation,
    should be logged, if possible, and further ignored.</para>

    <section xml:id="i2951918">
      <title>Blueprint Event</title>

      <para>The Blueprint Event supports the following event types:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.BlueprintEvent.CREATING" xrefstyle="hyperlink"/> - The Blueprint extender has started
          creating a Blueprint Container for the bundle.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.BlueprintEvent.GRACE_PERIOD" xrefstyle="hyperlink"/> - The Blueprint Container enters the grace
          period. This event can be repeated multiple times when the list of
          dependencies changes due to changes in the service registry.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.BlueprintEvent.CREATED" xrefstyle="hyperlink"/> - The Blueprint Container is ready. The
          application is now running.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.BlueprintEvent.WAITING" xrefstyle="hyperlink"/> - A service reference is blocking because of
          unsatisfied mandatory dependencies. This event can happen multiple
          times in a row.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.BlueprintEvent.DESTROYING" xrefstyle="hyperlink"/> - The Blueprint Container is being destroyed
          because the Blueprint bundle or Blueprint extender has
          stopped.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.BlueprintEvent.DESTROYED" xrefstyle="hyperlink"/> - The Blueprint Container is completely
          destroyed.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.BlueprintEvent.FAILURE" xrefstyle="hyperlink"/> - An error occurred during the creation of
          the Blueprint Container.</para>
        </listitem>
      </itemizedlist>

      <para>The Blueprint Event provides the following methods:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.BlueprintEvent.getBundle--" xrefstyle="hyperlink"/> - The Blueprint bundle</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.BlueprintEvent.getCause--" xrefstyle="hyperlink"/> - Any occurred exception or
          <code>null</code></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.BlueprintEvent.getDependencies--" xrefstyle="hyperlink"/> - A list of filters that specify the
          unsatisfied mandatory references.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.BlueprintEvent.getExtenderBundle--" xrefstyle="hyperlink"/> - The Blueprint extender bundle.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.BlueprintEvent.getTimestamp--" xrefstyle="hyperlink"/> - The time the event occurred</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.BlueprintEvent.getType--" xrefstyle="hyperlink"/> - The type of the event.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.BlueprintEvent.isReplay--" xrefstyle="hyperlink"/> - Indicates if the event is a replay
          (<code>true</code>) or if it is a new event (<code>false</code>),
          see <xref linkend="i2680219"/>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i2680219">
      <title>Replay</title>

      <para>The Blueprint Extender must remember the last Blueprint Event for
      each ready bundle that it manages, see <xref linkend="i2959082"/>.
      During the (synchronous) service registration event of a Blueprint
      Listener service, the Blueprint extender must inform the Blueprint
      Listener service about all its managed bundles by sending it the last
      known event for each bundle the Blueprint extender manages. This initial
      event is called the <emphasis>replay</emphasis> event, and is marked as
      such.</para>

      <para>The replay event must be delivered to the Blueprint Listener
      service as the first event, before any other event is delivered, during
      the registration of the Blueprint Listener service. That is, the
      <code>blueprintEvent</code> method must have returned before the first
      non-replay event can be delivered and no events must be lost. The replay
      events must be sent every time a Blueprint Listener service is
      registered.</para>

      <para>The set of managed bundles is defined by bundles that are active
      and are managed by the Blueprint extender, even if their initialization
      ended in failure.</para>

      <para>The <code>BlueprintEvent</code> object for a replay event must
      return <code>true</code> for the <xref linkend="org.osgi.service.blueprint.container.BlueprintEvent.isReplay--" xrefstyle="hyperlink"/> method in this situation, and <code>false</code>
      in all other situations.</para>
    </section>

    <section>
      <title>Event Admin Mapping</title>

      <para>When the Event Admin service is present, the Blueprint extender
      must create an Event Admin event for each defined Blueprint Event. This
      Event Admin event must be asynchronously given to the Event Admin
      service with the <code>postEvent</code> method.</para>

      <para>The topic of the Event Admin event is derived from the Blueprint
      event type with a fixed prefix. All topics must have the prefix
      of:</para>

      <programlisting><xref linkend="org.osgi.service.blueprint.container.EventConstants.TOPIC_BLUEPRINT_EVENTS" xrefstyle="hyperlink"/></programlisting>

      <para>After this prefix, the name of the Blueprint Event type must be
      used as the suffix. That is, <code>CREATING</code>,
      <code>GRACE_PERIOD</code>, etc. For example,
      <code>org/osgi/service/blueprint/container/GRACE_PERIOD</code>.</para>

      <para>For each Blueprint event the following properties must be
      included:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.EventConstants.TYPE" xrefstyle="hyperlink"/> - The type of the Event, see <xref linkend="i2951918"/>.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.EventConstants.BUNDLE" xrefstyle="hyperlink"/> - (<code>Bundle</code>) The
          <code>Bundle</code> object of the Blueprint bundle</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.EventConstants.BUNDLE_ID" xrefstyle="hyperlink"/> - (<code>Long</code>) The id of the
          Blueprint bundle.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.EventConstants.BUNDLE_SYMBOLICNAME" xrefstyle="hyperlink"/> - (<code>String</code>) The Bundle Symbolic
          Name of the Blueprint bundle.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.EventConstants.BUNDLE_VERSION" xrefstyle="hyperlink"/> - (<code>Version</code>) The version of the
          Blueprint bundle.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.EventConstants.EXTENDER_BUNDLE" xrefstyle="hyperlink"/> - (<code>Bundle</code>) the
          <code>Bundle</code> object of the Blueprint extender bundle.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.EventConstants.EXTENDER_BUNDLE_ID" xrefstyle="hyperlink"/> - (<code>Long</code>) The id of the
          Blueprint extender bundle</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.EventConstants.EXTENDER_BUNDLE_SYMBOLICNAME" xrefstyle="hyperlink"/> - (<code>String</code>) The Bundle Symbolic
          Name of the Blueprint extender bundle.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.EventConstants.EXTENDER_BUNDLE_VERSION" xrefstyle="hyperlink"/> - (<code>Version</code>) The version of the
          Blueprint extender bundle</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.EventConstants.TIMESTAMP" xrefstyle="hyperlink"/> - (<code>Long</code>) The time when the
          event occurred</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.EventConstants.CAUSE" xrefstyle="hyperlink"/> - (<code>Throwable</code>) The failure
          cause, only included for a <code>FAILURE</code> event.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.EventConstants.DEPENDENCIES" xrefstyle="hyperlink"/> - (<code>String[]</code>) The filter of an
          unsatisfied service reference. Can only appear in a
          <code>GRACE_PERIOD</code>, <code>WAITING</code> or
          <code>FAILURE</code> event caused by a time-out.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.blueprint.container.EventConstants.EVENT" xrefstyle="hyperlink"/> - (<code>BlueprintEvent</code>) The
          <code>BlueprintEvent</code> object that caused this event.</para>
        </listitem>
      </itemizedlist>

      <para>The property names for Blueprint Listener events may be
      conveniently referenced using the constants defined in the
      <code>org.osgi.service.event.EventConstants</code> and
      <code>EventConstants</code> interfaces.</para>

      <para>The Event Admin events do not follow the replay model in use for
      Blueprint Listener services. That is, the Event Admin must only be kept
      informed about events as they occur.</para>
    </section>
  </section>

  <section xml:id="i2304671">
    <title>Class Loading</title>

    <para>The module layer in OSGi provides advanced class loading rules that
    potentially can cause bundles to live in different class spaces. This
    means that not all bundles can collaborate because the classes involved in
    the collaboration can come from different class loaders, which results in
    confusing Class Cast Exceptions on classes with the same name. It is
    therefore crucial that the Blueprint Container uses the Bundle Context and
    the bundle class loader of the Blueprint bundle for all actions that are
    made on behalf of the Blueprint bundle. Especially, access to the OSGi
    service registry must use the Bundle Context of the Blueprint bundle. Any
    dynamic class loading must use the Blueprint bundle's
    <code>loadClass</code> method. The normal OSGi mechanics will then ensure
    class space consistency for resolved bundles.</para>

    <section>
      <title>Blueprint Extender and Bundle Compatibility</title>

      <para>For many Blueprint bundles, there is no class space compatibility
      issue. These bundles do not use any Blueprint classes and are therefore
      by definition compatible with any extender. However, if the Blueprint
      bundle uses some of the Blueprint packages, it must import these
      packages. Blueprint Containers must verify that they are <emphasis>type
      compatible</emphasis> with the Blueprint bundle before they attempt to
      manage it. See <xref linkend="i2455588"/>.</para>
    </section>

    <section>
      <title>XML and Class Loading</title>

      <para>The Blueprint definition resources contain textual references to
      classes. These textual references will be loaded with the class loader
      of the Blueprint bundle. This implies that all the classes of provided
      component instances must be either imported or available from the
      bundle.</para>

      <para>The Blueprint specification has the following attributes and
      elements that can cause imports:</para>

      <itemizedlist>
        <listitem>
          <para><code>class</code></para>
        </listitem>

        <listitem>
          <para><code>value-type</code></para>
        </listitem>

        <listitem>
          <para>interface</para>
        </listitem>

        <listitem>
          <para>interfaces</para>
        </listitem>

        <listitem>
          <para>type</para>
        </listitem>

        <listitem>
          <para>key-type</para>
        </listitem>
      </itemizedlist>

      <para>All these attributes and elements are defined with the
      <code>Tclass</code> and <code>Ttype</code> XML Schema type for the
      Blueprint namespace. The <code>Tclass</code> defines simple class names,
      and <code>Ttype</code> defines types defined in <xref linkend="i2972566"/>.</para>
    </section>

    <section>
      <title>Foreign Bundle Context</title>

      <para>When using the Blueprint Container in its Blueprint bundle, the
      types that the managers provide are guaranteed to be compatible with the
      caller.</para>

      <para>When using a Blueprint Container service in another bundle (for
      example, getting it as a service) then there is no guarantee of type
      compatibility or even visibility between the versions of the types of
      the returned managers, and the versions of the types visible to the
      caller. Care must therefore be taken when casting the return value of
      the <code>getComponentInstance</code> method to a more specific
      type.</para>
    </section>

    <section>
      <title>Converters and Class Loading</title>

      <para>A converter is closely coupled to its target class. If the
      converter comes from another bundle, then the converter bundle must
      ensure class space consistency between the converter implementation and
      the target class. This can be achieved by specifying the target class in
      the <code>uses</code> directive.</para>

      <para>For example:</para>

      <programlisting>Export-Package:  
     com.converters.ac;uses:="com.converters.dc"</programlisting>

      <para>A bundle that references a type converter defined in the Blueprint
      bundle does not need to export that type. When creating a Blueprint
      Container, the extender bundle uses the class loader of the Blueprint
      bundle.</para>
    </section>

    <section xml:id="i2455588">
      <title>Type Compatibility</title>

      <para>Two bundles are type compatible for a given class if they both
      load the same class object, or if either bundle cannot load the given
      class.</para>

      <para>To mitigate type incompatibility problems, a Blueprint extender
      must export the <code>org.osgi.service.blueprint</code> package. In the
      <code>uses:</code> directive, it should list any packages of classes
      that can be shared between the Blueprint extender and the Blueprint
      bundle. Blueprint bundles should import this package.</para>
    </section>

    <section>
      <title>Visibility and Accessibility</title>

      <para>The Blueprint Container must load any classes it needs through the
      Blueprint bundle's <code>loadClass</code> method. If a class can not be
      loaded, then the initialization fails. Class loading issues are further
      discussed in <xref linkend="i2304671"/>.</para>

      <para>The Blueprint Container must respect the accessibility of the
      class and any of its members. That is, the Blueprint Container must not
      use the <code>setAccessibility</code> method. All classes and reflected
      members must therefore be declared <code>public</code> or be implicitly
      <code>public</code> like the default constructor.</para>
    </section>
  </section>

  <section xml:id="i2373727">
    <title>Metadata</title>

    <para>An important aspect of the Blueprint specification is the so called
    <emphasis>metadata</emphasis> interfaces. These interfaces are used in the
    Blueprint Container to enable programmatic access to the XML definitions.
    During the parsing phase the Blueprint Container reads the XML and
    converts it to an object implementing the appropriate interface.</para>

    <para>The XML elements and XML Schema types map to the
    <code>Metadata</code> interfaces. For example, <code>&lt;bean&gt;</code>
    maps to <code>BeanMetadata</code>. However, in several cases, the
    attributes and/or sub-elements in the <code>Metadata</code> interfaces are
    merged when possible. For example, the <code>interface</code> attribute
    and <code>interfaces</code> element in the service element are merged in
    the <code>ServiceMetadata</code> class' <code>getInterfaces()</code>
    method.</para>

    <para>The interfaces are arranged in a comprehensive hierarchy that
    reflects their usage and constraints. This hierarchy is depicted in <xref linkend="i2709656" xrefstyle="template:Figure %n on page %p"/>.</para>

    <para>The hierarchy can roughly be divided in two parts. The first part is
    the sub-interfaces of the <code>ComponentMetadata</code> interface. These
    interfaces are defining the configuration data of the top-level and
    inlined managers. The manager's component instance(s) are injected with
    values during runtime. The configuration of how to create a specific value
    is also described with Metadata interfaces. For example, a
    <code>Map</code> object is described with configuration information in the
    <code>MapMetadata</code> interface. The hierarchy makes it clear that
    Component Metadata is also a value that can be injected. Keys in maps or
    properties can not be <code>null</code>. This is the reason the hierarchy
    is split at the top into a <code>null</code> value branch and a branch
    that can only generates non-<code>null</code> values.</para>

    <para>The <code>Target</code> interface describes managers that can be
    used as the target for the reference listener or the registration
    listener, or a ref.</para>

    <figure pgwide="1" xml:id="i2709656">
      <title>Metadata Interfaces Hierarchy</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="3.259in" contentwidth="4.972in" fileref="metadata-interfaces-hierarchy.svg"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section xml:id="i2152341">
    <title>Blueprint XML Schema</title>

    <para>The Blueprint schema included in this specification can be found in
    digital form at <xref linkend="i2930811"/>.</para>

    <programlisting role="pgwide">&lt;xsd:schema xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    elementFormDefault="qualified" attributeFormDefault="unqualified"
    version="1.0.1"&gt;

    &lt;xsd:annotation&gt;
        &lt;xsd:documentation&gt;
            &lt;![CDATA[
                This is the XML Schema for the OSGi Blueprint service 1.0.0
                development descriptor.  Blueprint configuration files
                using this schema must indicate the schema using the
                blueprint/v1.0.0 namespace.  For example,

                &lt;blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"&gt;

                if used as a qualified namespace, "bp" is the recommended
                namespace prefix.
            ]]&gt;
        &lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;

    &lt;!-- Schema elements for core component declarations --&gt;

    &lt;xsd:complexType name="Tcomponent" abstract="true"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                    The Tcomponent type is the base type for top-level
                    Blueprint components.  The &lt;bean&gt; &lt;reference&gt;, &lt;service&gt;,
                    and &lt;reference-list&gt; elements are all derived from
                    the Tcomponent type.  This type defines an id attribute
                    that is used create references between different components.
                    Component elements can also be inlined within other component
                    definitions.  The id attribute is not valid when inlined.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;

        &lt;xsd:attribute name="id" type="xsd:ID" /&gt;

        &lt;xsd:attribute name="activation" type="Tactivation"&gt;
            &lt;xsd:annotation&gt;
                &lt;xsd:documentation&gt;
                    &lt;![CDATA[
                    The activation attribute for this component.  This can either
                    be "eager" or "lazy".  If not specified, it
                    defaults to default-activation attribute of the enclosing
                    &lt;blueprint&gt; element.
                    ]]&gt;
                &lt;/xsd:documentation&gt;
            &lt;/xsd:annotation&gt;
        &lt;/xsd:attribute&gt;

        &lt;xsd:attribute name="depends-on" type="TdependsOn"&gt;
            &lt;xsd:annotation&gt;
                &lt;xsd:documentation&gt;
                    &lt;![CDATA[
                    depends-on identifies (by id) other components that this component
                    depends on.  The component only be activated after the
                    depends-on components are successfully activated.  Also, if there
                    are &lt;reference&gt; or &lt;reference-list&gt; elements with unstatisfied
                    manadatory references, then the depends-on relationship will also
                    be used to determine whether this service is enabled or not.
                    ]]&gt;
                &lt;/xsd:documentation&gt;
            &lt;/xsd:annotation&gt;
        &lt;/xsd:attribute&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:element name="blueprint" type="Tblueprint"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                The &lt;blueprint&gt; element is the root element for a blueprint
                configuration file.  A blueprint configuration has two sections.
                The first section (contained within the &lt;type-converters&gt; element)
                identifies components that are used for converting values into
                different target types.  The type converters are optional, so
                the file does not need to specify a type converter section.

                Following the type converters are the component definitions.
                Components are &lt;bean&gt;, &lt;service&gt;, &lt;reference&gt;, and
                &lt;reference-list&gt; elements that identify the bundle components that will
                be managed by the blueprint service.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
    &lt;/xsd:element&gt;

    &lt;xsd:complexType name="Tblueprint"&gt;
        &lt;xsd:sequence&gt;
            &lt;xsd:element name="description" type="Tdescription"
                minOccurs="0" /&gt;
            &lt;xsd:element name="type-converters" type="Ttype-converters"
                minOccurs="0" maxOccurs="1" /&gt;
            &lt;!-- top-level components --&gt;
            &lt;xsd:choice minOccurs="0" maxOccurs="unbounded"&gt;
                &lt;xsd:element name="service" type="Tservice" /&gt;
                &lt;xsd:element name="reference-list" type="Treference-list" /&gt;
                &lt;xsd:element name="bean" type="Tbean" /&gt;
                &lt;xsd:element name="reference" type="Treference" /&gt;
                &lt;xsd:any namespace="##other" processContents="lax" /&gt;
            &lt;/xsd:choice&gt;
        &lt;/xsd:sequence&gt;

        &lt;!-- Defaults--&gt;
        &lt;xsd:attribute name="default-activation" default="eager"
            type="Tactivation"&gt;
            &lt;xsd:annotation&gt;
                &lt;xsd:documentation&gt;
                    &lt;![CDATA[
                    Specifies the default activation setting that will be defined
                    for components.  If not specified, the global default is "eager".
                    Individual components may override the default value.
                    ]]&gt;
                &lt;/xsd:documentation&gt;
            &lt;/xsd:annotation&gt;
        &lt;/xsd:attribute&gt;
        &lt;xsd:attribute name="default-timeout" type="Ttimeout"
            default="300000"&gt;
            &lt;xsd:annotation&gt;
                &lt;xsd:documentation&gt;
                    &lt;![CDATA[
                    Specifies the default timeout value to be used when operations
                    are invoked on unstatisfied service references.  If the
                    reference does not change to a satisfied state within the timeout
                    window, an error is raised on the method invocation.  The
                    default timeout value is 300000 milliseconds and individual
                    &lt;reference&gt; element can override the specified configuration
                    default.
                    ]]&gt;
                &lt;/xsd:documentation&gt;
            &lt;/xsd:annotation&gt;
        &lt;/xsd:attribute&gt;
        &lt;xsd:attribute name="default-availability" type="Tavailability"
            default="mandatory"&gt;
            &lt;xsd:annotation&gt;
                &lt;xsd:documentation&gt;
                    &lt;![CDATA[
                    Specifies the default availability value to be used for
                    &lt;reference&gt;, and &lt;reference-list&gt; components.  The
                    normal default is "mandatory", and can be changed by individual
                    service reference components.
                    ]]&gt;
                &lt;/xsd:documentation&gt;
            &lt;/xsd:annotation&gt;
        &lt;/xsd:attribute&gt;
        &lt;xsd:anyAttribute namespace="##other"
            processContents="lax" /&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:complexType name="Ttype-converters"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                The type used for the &lt;type-converters&gt; element.  The
                &lt;type-converters&gt; section is a set of &lt;bean&gt;, &lt;ref&gt;, or
                &lt;reference&gt; elements that identify the type converter components.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:choice minOccurs="0" maxOccurs="unbounded"&gt;
            &lt;xsd:element name="bean" type="Tbean" /&gt;
            &lt;xsd:element name="reference" type="Treference" /&gt;
            &lt;xsd:element name="ref" type="Tref" /&gt;
            &lt;xsd:any namespace="##other" processContents="lax" /&gt;
        &lt;/xsd:choice&gt;
    &lt;/xsd:complexType&gt;

    &lt;!--
        Components that provide a reasonable target for injection used for
        listeners, etc.
    --&gt;

    &lt;xsd:group name="GtargetComponent"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                A target component is one that can be a target for a
                listener, registration-listener or service elements.
                This is used in contexts where the requirement is a single
                provided object that will implement a particular interface.
                The provided object is obtained either from a &lt;ref&gt; element
                or an inlined &lt;bean&gt; or &lt;reference&gt;.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:choice&gt;
            &lt;xsd:element name="bean" type="Tinlined-bean" /&gt;
            &lt;xsd:element name="reference" type="Tinlined-reference" /&gt;
            &lt;xsd:element name="ref" type="Tref" /&gt;
            &lt;xsd:any namespace="##other" processContents="lax" /&gt;
        &lt;/xsd:choice&gt;
    &lt;/xsd:group&gt;

    &lt;xsd:group name="GallComponents"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                An all components is used in contexts where all component element
                types are values.  The set of component elements contains
                &lt;bean&gt;, &lt;service&gt;, &lt;reference&gt;, &lt;reference-list&gt; and &lt;ref&gt;.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:choice&gt;
            &lt;xsd:element name="service" type="Tinlined-service" /&gt;
            &lt;xsd:element name="reference-list" type="Tinlined-reference-list" /&gt;
            &lt;xsd:group ref="GtargetComponent" /&gt;
        &lt;/xsd:choice&gt;
    &lt;/xsd:group&gt;

    &lt;xsd:group name="GbeanElements"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                A bean elements is a reusable definition of the elements allowed on 
                a &lt;bean&gt; element.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:sequence&gt;
            &lt;xsd:element name="description" type="Tdescription"
                minOccurs="0" /&gt;
            &lt;xsd:choice minOccurs="0" maxOccurs="unbounded"&gt;
                &lt;xsd:element name="argument" type="Targument" /&gt;
                &lt;xsd:element name="property" type="Tproperty" /&gt;
                &lt;xsd:any namespace="##other" processContents="lax" /&gt;
            &lt;/xsd:choice&gt;
        &lt;/xsd:sequence&gt;
    &lt;/xsd:group&gt;

    &lt;xsd:complexType name="Tbean"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                The type definition for a &lt;bean&gt; component.  The &lt;bean&gt; 
                attributes provide the characteristics for how to create a
                bean instance.  Constructor arguments and injected properties
                are specified via child &lt;argument&gt; and &lt;property&gt; elements.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:complexContent&gt;
            &lt;xsd:extension base="Tcomponent"&gt;
                &lt;xsd:group ref="GbeanElements" /&gt;
                &lt;xsd:attribute name="class" type="Tclass" /&gt;
                &lt;xsd:attribute name="init-method" type="Tmethod" /&gt;
                &lt;xsd:attribute name="destroy-method" type="Tmethod" /&gt;
                &lt;xsd:attribute name="factory-method" type="Tmethod" /&gt;
                &lt;xsd:attribute name="factory-ref" type="Tidref" /&gt;
                &lt;xsd:attribute name="scope" type="Tscope" /&gt;
                &lt;xsd:anyAttribute namespace="##other"
                    processContents="lax" /&gt;
            &lt;/xsd:extension&gt;
        &lt;/xsd:complexContent&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:complexType name="Tinlined-bean"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                The Tinlined-bean type is used for inlined (i.e. non top level)
                &lt;bean&gt; elements.  Those elements have some restrictions on
                the attributes that can be used to define them.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:complexContent&gt;
            &lt;xsd:restriction base="Tbean"&gt;
                &lt;xsd:group ref="GbeanElements" /&gt;
                &lt;xsd:attribute name="id" use="prohibited" /&gt;
                &lt;xsd:attribute name="depends-on" type="TdependsOn" /&gt;
                &lt;xsd:attribute name="activation" use="prohibited"
                    fixed="lazy" /&gt;
                &lt;xsd:attribute name="class" type="Tclass" /&gt;
                &lt;xsd:attribute name="init-method" type="Tmethod" /&gt;
                &lt;xsd:attribute name="destroy-method" use="prohibited" /&gt;
                &lt;xsd:attribute name="factory-method" type="Tmethod" /&gt;
                &lt;xsd:attribute name="factory-ref" type="Tidref" /&gt;
                &lt;xsd:attribute name="scope" use="prohibited" /&gt;
                &lt;xsd:anyAttribute namespace="##other"
                    processContents="lax" /&gt;
            &lt;/xsd:restriction&gt;
        &lt;/xsd:complexContent&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:complexType name="Targument"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                An argument used to create an object defined by a &lt;bean&gt;
                component.  The &lt;argument&gt; elements are the arguments for the
                bean class constructor or passed to the bean factory method.

                The type, if specified, is used to disambiguate the constructor
                or method signature.  Arguments may also be matched up with
                arguments by explicitly specifying the index position.  If the
                index is used, then all &lt;argument&gt; elements for the bean must
                also specify the index.

                The value and ref attributes are convenience shortcuts to make
                the &lt;argument&gt; tag easier to code.  A fuller set of injected
                values and types can be specified using one of the "value"
                type elements.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:sequence&gt;
            &lt;xsd:element name="description" type="Tdescription"
                minOccurs="0" /&gt;
            &lt;xsd:group ref="Gvalue" minOccurs="0" /&gt;
        &lt;/xsd:sequence&gt;
        &lt;xsd:attribute name="index" type="xsd:nonNegativeInteger" /&gt;
        &lt;xsd:attribute name="type" type="Ttype" /&gt;
        &lt;xsd:attribute name="ref" type="Tidref" /&gt;
        &lt;xsd:attribute name="value" type="TstringValue" /&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:complexType name="Tproperty"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                A property that will be injected into a created &lt;bean&gt;
                component.  The &lt;property&gt; elements correspond to named
                JavaBean setting methods for a created bean object.

                The value and ref attributes are convenience shortcuts to make
                the &lt;argument&gt; tag easier to code.  A fuller set of injected
                values and types can be specified using one of the "value"
                type elements.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:sequence&gt;
            &lt;xsd:element name="description" type="Tdescription"
                minOccurs="0" /&gt;
            &lt;xsd:group ref="Gvalue" minOccurs="0" /&gt;
        &lt;/xsd:sequence&gt;
        &lt;xsd:attribute name="name" type="Tmethod" use="required" /&gt;
        &lt;xsd:attribute name="ref" type="Tidref" /&gt;
        &lt;xsd:attribute name="value" type="TstringValue" /&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:complexType name="Tkey"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                The Tkey type defines the element types that are permitted
                for Map key situations.  These can be any of the "value"
                types other than the &lt;null&gt; element.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:group ref="GnonNullValue" /&gt;
    &lt;/xsd:complexType&gt;

    &lt;!-- reference --&gt;
    &lt;xsd:complexType name="Treference"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                The Treference type defines the &lt;reference&gt; element.  These
                are instances of the TserviceReference type, with the addition
                of a timeout attribute.  If the timeout is not specified,
                the default-timeout value is inherited from the encapsulating
                &lt;blueprint&gt; definition.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:complexContent&gt;
            &lt;xsd:extension base="TserviceReference"&gt;
                &lt;xsd:sequence&gt;
                    &lt;xsd:any namespace="##other" minOccurs="0" maxOccurs="unbounded"
                        processContents="lax" /&gt;
                &lt;/xsd:sequence&gt;
                &lt;xsd:attribute name="timeout" type="Ttimeout" /&gt;
            &lt;/xsd:extension&gt;
        &lt;/xsd:complexContent&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:complexType name="Tinlined-reference"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                The Tinlined-reference type is used for inlined (i.e. non top level)
                &lt;reference&gt; elements.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:complexContent&gt;
            &lt;xsd:restriction base="Treference"&gt;
                &lt;xsd:sequence&gt;
                    &lt;xsd:group ref="GserviceReferenceElements" /&gt;
                    &lt;xsd:any namespace="##other" minOccurs="0" maxOccurs="unbounded"
                        processContents="lax" /&gt;
                &lt;/xsd:sequence&gt;
                &lt;xsd:attribute name="id" use="prohibited" /&gt;
                &lt;xsd:attribute name="depends-on" type="TdependsOn" /&gt;
                &lt;xsd:attribute name="activation" use="prohibited"
                    fixed="lazy" /&gt;
                &lt;xsd:attribute name="interface" type="Tclass" /&gt;
                &lt;xsd:attribute name="filter" type="xsd:normalizedString" /&gt;
                &lt;xsd:attribute name="component-name" type="Tidref" /&gt;
                &lt;xsd:attribute name="availability" type="Tavailability" /&gt;
                &lt;xsd:attribute name="timeout" type="Ttimeout" /&gt;
                &lt;xsd:anyAttribute namespace="##other"
                    processContents="lax" /&gt;
            &lt;/xsd:restriction&gt;
        &lt;/xsd:complexContent&gt;
    &lt;/xsd:complexType&gt;

    &lt;!-- reference-list --&gt;
    &lt;xsd:complexType name="Treference-list"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                The Treference-list builds in the characteristics of the
                TserviceReference type to define characteristics of the
                &lt;reference-list&gt;.  This adds in the characteristics that
                only apply to collections of references (e.g., member-type).
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:complexContent&gt;
            &lt;xsd:extension base="TserviceReference"&gt;
                &lt;xsd:sequence&gt;
                    &lt;xsd:any namespace="##other" minOccurs="0" maxOccurs="unbounded"
                        processContents="lax" /&gt;
                &lt;/xsd:sequence&gt;
                &lt;xsd:attribute name="member-type" type="Tservice-use"
                    default="service-object"&gt;
                &lt;/xsd:attribute&gt;
            &lt;/xsd:extension&gt;
        &lt;/xsd:complexContent&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:complexType name="Tinlined-reference-list"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                The Tinlined-reference-list type is used for inlined (i.e. non top level)
                &lt;reference-list&gt; elements.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:complexContent&gt;
            &lt;xsd:restriction base="Treference-list"&gt;
                &lt;xsd:sequence&gt;
                    &lt;xsd:group ref="GserviceReferenceElements" /&gt;
                    &lt;xsd:any namespace="##other" minOccurs="0" maxOccurs="unbounded"
                        processContents="lax" /&gt;
                &lt;/xsd:sequence&gt;
                &lt;xsd:attribute name="id" use="prohibited" /&gt;
                &lt;xsd:attribute name="depends-on" type="TdependsOn" /&gt;
                &lt;xsd:attribute name="activation" use="prohibited"
                    fixed="lazy" /&gt;
                &lt;xsd:attribute name="interface" type="Tclass" /&gt;
                &lt;xsd:attribute name="filter" type="xsd:normalizedString" /&gt;
                &lt;xsd:attribute name="component-name" type="Tidref" /&gt;
                &lt;xsd:attribute name="availability" type="Tavailability" /&gt;
                &lt;xsd:attribute name="member-type" type="Tservice-use"
                    default="service-object" /&gt;
                &lt;xsd:anyAttribute namespace="##other"
                    processContents="lax" /&gt;
            &lt;/xsd:restriction&gt;
        &lt;/xsd:complexContent&gt;
    &lt;/xsd:complexType&gt;

    &lt;!-- Reference base class --&gt;
    &lt;xsd:complexType name="TserviceReference"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                TserviceReference is the base element type used for &lt;reference&gt;
                and &lt;reference-list&gt; elements.  This type defines all of the
                characteristics common to both sorts of references.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:complexContent&gt;
            &lt;xsd:extension base="Tcomponent"&gt;
                &lt;xsd:sequence&gt;
                    &lt;xsd:group ref="GserviceReferenceElements" /&gt;
                &lt;/xsd:sequence&gt;

                &lt;xsd:attribute name="interface" type="Tclass"&gt;
                    &lt;xsd:annotation&gt;
                        &lt;xsd:documentation&gt;
                            &lt;![CDATA[
                            The interface that the OSGi service must implement and that will be
                            implemented by the proxy object.
                            This attribute is optional.
                            ]]&gt;
                        &lt;/xsd:documentation&gt;
                    &lt;/xsd:annotation&gt;
                &lt;/xsd:attribute&gt;
                &lt;xsd:attribute name="filter" type="xsd:normalizedString"&gt;
                    &lt;xsd:annotation&gt;
                        &lt;xsd:documentation&gt;
                            &lt;![CDATA[
                            A filter string used to narrow the search for a matching service
                            reference.
                            ]]&gt;
                        &lt;/xsd:documentation&gt;
                    &lt;/xsd:annotation&gt;
                &lt;/xsd:attribute&gt;
                &lt;xsd:attribute name="component-name" type="Tidref"&gt;
                    &lt;xsd:annotation&gt;
                        &lt;xsd:documentation&gt;
                            &lt;![CDATA[
                            An optional specifier that can be used to match a service definition
                            to one created by a specific blueprint component.
                            ]]&gt;
                        &lt;/xsd:documentation&gt;
                    &lt;/xsd:annotation&gt;
                &lt;/xsd:attribute&gt;
                &lt;xsd:attribute name="availability" type="Tavailability"&gt;
                    &lt;xsd:annotation&gt;
                        &lt;xsd:documentation&gt;
                            &lt;![CDATA[
                            Use to control the initial processing of service references at
                            blueprint context startup.  "mandatory" indicates the context
                            should not start unless the service is available within the
                            specified context startup period.  "optional" indicates availability
                            of this service is not a requirement at bundle startup.

                            NOTE:  No default is specified because this can be overridden
                            by the default-availability attribute of the &lt;blueprint&gt; element.
                            ]]&gt;
                        &lt;/xsd:documentation&gt;
                    &lt;/xsd:annotation&gt;
                &lt;/xsd:attribute&gt;
                &lt;xsd:anyAttribute namespace="##other"
                    processContents="lax" /&gt;
            &lt;/xsd:extension&gt;
        &lt;/xsd:complexContent&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:group name="GserviceReferenceElements"&gt;
        &lt;xsd:sequence&gt;
            &lt;xsd:element name="description" type="Tdescription"
                minOccurs="0" /&gt;
            &lt;!-- listener --&gt;
            &lt;xsd:element name="reference-listener" type="TreferenceListener"
                minOccurs="0" maxOccurs="unbounded"&gt;
                &lt;xsd:annotation&gt;
                    &lt;xsd:documentation&gt;
                        &lt;![CDATA[
                        A definition of a listener that will watch for bind/unbind events
                        associated with the service reference.  The targetted listener can
                        be a &lt;ref&gt; to a &lt;bean&gt; or &lt;reference&gt; element, or an inline
                        &lt;bean&gt; or &lt;reference&gt;.
                        ]]&gt;
                    &lt;/xsd:documentation&gt;
                &lt;/xsd:annotation&gt;
            &lt;/xsd:element&gt;
        &lt;/xsd:sequence&gt;
    &lt;/xsd:group&gt;

    &lt;xsd:complexType name="TreferenceListener"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                TReferenceListener defines a reference listener that is attached
                to a &lt;reference&gt; or &lt;reference-list&gt; element.  The listener
                object can be specified as a &lt;ref&gt; or as an inline &lt;bean&gt; or
                &lt;reference&gt; component.  Listener events are mapped to the indicated
                bind or unbind methods.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:sequence&gt;
            &lt;xsd:group ref="GtargetComponent" minOccurs="0" /&gt;
        &lt;/xsd:sequence&gt;
        &lt;xsd:attribute name="ref" type="Tidref" /&gt;
        &lt;xsd:attribute name="bind-method" type="Tmethod" /&gt;
        &lt;xsd:attribute name="unbind-method" type="Tmethod" /&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:simpleType name="Tactivation"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                Tactivation defines the activation type for components.  This is used in this
                schema by the &lt;blueprint&gt; default-activation attribute and the
                activation attribute.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:restriction base="xsd:NMTOKEN"&gt;
            &lt;xsd:enumeration value="eager" /&gt;
            &lt;xsd:enumeration value="lazy" /&gt;
        &lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;

    &lt;xsd:simpleType name="Tavailability"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                Tavailability defines an availability attribute type.  This is used in this
                schema by the &lt;blueprint&gt; default-availability attribute and the
                &lt;reference&gt; and &lt;reference-list&gt; availability attribute.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:restriction base="xsd:NMTOKEN"&gt;
            &lt;xsd:enumeration value="mandatory" /&gt;
            &lt;xsd:enumeration value="optional" /&gt;
        &lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;

    &lt;!-- service --&gt;

    &lt;xsd:complexType name="Tservice"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                Tservice is the type for services exported by this blueprint bundle.
                Services are sourced by either a &lt;ref&gt; to a &lt;bean&gt; component or an
                &lt;inline&gt; bean component.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:complexContent&gt;
            &lt;xsd:extension base="Tcomponent"&gt;
                &lt;xsd:sequence&gt;
                    &lt;xsd:group ref="GserviceElements" /&gt;
                &lt;/xsd:sequence&gt;
                &lt;xsd:attribute name="interface" type="Tclass"&gt;
                    &lt;xsd:annotation&gt;
                        &lt;xsd:documentation&gt;
                            &lt;![CDATA[
                            The interface that this OSGi service will provide.
                            ]]&gt;
                        &lt;/xsd:documentation&gt;
                    &lt;/xsd:annotation&gt;
                &lt;/xsd:attribute&gt;
                &lt;xsd:attribute name="ref" type="Tidref"&gt;
                    &lt;xsd:annotation&gt;
                        &lt;xsd:documentation&gt;
                            &lt;![CDATA[
                            The ref attribute can be used to specify the component that provides
                            the object exported as an OSGi service.
                            ]]&gt;
                        &lt;/xsd:documentation&gt;
                    &lt;/xsd:annotation&gt;
                &lt;/xsd:attribute&gt;
                &lt;xsd:attribute name="auto-export" type="TautoExportModes"
                    default="disabled"&gt;
                    &lt;xsd:annotation&gt;
                        &lt;xsd:documentation&gt;
                            &lt;![CDATA[
                            If set to a value different from "disabled", the Blueprint Container
                            will introspect the target to discover the set of interfaces or classes
                            that the service will be registered under.
                            ]]&gt;
                        &lt;/xsd:documentation&gt;
                    &lt;/xsd:annotation&gt;
                &lt;/xsd:attribute&gt;
                &lt;xsd:attribute name="ranking" type="xsd:int" default="0"&gt;
                    &lt;xsd:annotation&gt;
                        &lt;xsd:documentation&gt;
                            &lt;![CDATA[
                            A service ranking value that is added to the service properties
                            the service will be published with.
                            ]]&gt;
                        &lt;/xsd:documentation&gt;
                    &lt;/xsd:annotation&gt;
                &lt;/xsd:attribute&gt;
                &lt;xsd:anyAttribute namespace="##other"
                    processContents="lax" /&gt;
            &lt;/xsd:extension&gt;
        &lt;/xsd:complexContent&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:complexType name="Tinlined-service"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                The Tinlined-service type is used for inlined (i.e. non top level)
                &lt;service&gt; elements.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:complexContent&gt;
            &lt;xsd:restriction base="Tservice"&gt;
                &lt;xsd:sequence&gt;
                    &lt;xsd:group ref="GserviceElements" /&gt;
                &lt;/xsd:sequence&gt;
                &lt;xsd:attribute name="id" use="prohibited" /&gt;
                &lt;xsd:attribute name="depends-on" type="TdependsOn" /&gt;
                &lt;xsd:attribute name="activation" use="prohibited"
                    fixed="lazy" /&gt;
                &lt;xsd:attribute name="interface" type="Tclass" /&gt;
                &lt;xsd:attribute name="ref" type="Tidref" /&gt;
                &lt;xsd:attribute name="auto-export" type="TautoExportModes"
                    default="disabled" /&gt;
                &lt;xsd:attribute name="ranking" type="xsd:int" default="0" /&gt;
                &lt;xsd:anyAttribute namespace="##other"
                    processContents="lax" /&gt;
            &lt;/xsd:restriction&gt;
        &lt;/xsd:complexContent&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:group name="GbaseServiceElements"&gt;
        &lt;xsd:sequence&gt;
            &lt;xsd:element name="description" type="Tdescription"
                minOccurs="0" /&gt;
            &lt;xsd:element name="interfaces" type="Tinterfaces"
                minOccurs="0"&gt;
                &lt;xsd:annotation&gt;
                    &lt;xsd:documentation&gt;
                        &lt;![CDATA[
                        A collection of one or more interface class names this service
                        will be registered under.  The &lt;service&gt; element also has
                        a shortcut interface attribute for the usual case of just
                        a single interface being used.  This also cannot be used if
                        the auto-export attribute is used.
                        ]]&gt;
                    &lt;/xsd:documentation&gt;
                &lt;/xsd:annotation&gt;
            &lt;/xsd:element&gt;

            &lt;xsd:element name="service-properties" type="TserviceProperties"
                minOccurs="0"&gt;
                &lt;xsd:annotation&gt;
                    &lt;xsd:documentation&gt;
                        &lt;![CDATA[
                        The service provided when the service is registered.  The service
                        properties are similar to map elements, but the keys must always
                        be strings, and the values are required to be in a narrower range.
                        ]]&gt;
                    &lt;/xsd:documentation&gt;
                &lt;/xsd:annotation&gt;
            &lt;/xsd:element&gt;
            &lt;xsd:element name="registration-listener" type="TregistrationListener"
                minOccurs="0" maxOccurs="unbounded"&gt;
                &lt;xsd:annotation&gt;
                    &lt;xsd:documentation&gt;
                        &lt;![CDATA[
                        A set of 0 or more registration listeners attached to this service
                        component.  The registration listeners will be notified whenever the
                        service is registered or unregistered from the framework service
                        registry.
                        ]]&gt;
                    &lt;/xsd:documentation&gt;
                &lt;/xsd:annotation&gt;
            &lt;/xsd:element&gt;
        &lt;/xsd:sequence&gt;
    &lt;/xsd:group&gt;

    &lt;xsd:group name="GserviceElements"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                A set of service elements.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:sequence&gt;
            &lt;xsd:group ref="GbaseServiceElements" /&gt;
            &lt;xsd:group ref="GtargetComponent" minOccurs="0"&gt;
                &lt;xsd:annotation&gt;
                    &lt;xsd:documentation&gt;
                        &lt;![CDATA[
                        A service definition can use any of the target types as an inline element
                        as well.
                        ]]&gt;
                    &lt;/xsd:documentation&gt;
                &lt;/xsd:annotation&gt;
            &lt;/xsd:group&gt;
        &lt;/xsd:sequence&gt;
    &lt;/xsd:group&gt;

    &lt;xsd:complexType name="TregistrationListener"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                A registration listener definition.  The target registration listener
                can be either a &lt;ref&gt; to a &lt;bean&gt; or &lt;service&gt; component, or an inline
                &lt;bean&gt; or &lt;service&gt; component definition.  The registration-method and
                unregistration-method attributes define the methods that will be called
                for the respective events.

                For the very common case of using a &lt;ref&gt; to a listener component, the
                ref attribute may also be used as a shortcut.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:sequence&gt;
            &lt;xsd:group ref="GtargetComponent" minOccurs="0" /&gt;
        &lt;/xsd:sequence&gt;
        &lt;xsd:attribute name="ref" type="Tidref" /&gt;
        &lt;xsd:attribute name="registration-method" type="Tmethod" /&gt;
        &lt;xsd:attribute name="unregistration-method" type="Tmethod" /&gt;
    &lt;/xsd:complexType&gt;

    &lt;!-- Values --&gt;

    &lt;xsd:group name="Gvalue"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                The set of "value" types that can be used in any place a value
                can be specified.  This set includes the &lt;ref&gt; and &lt;idref&gt; elements, any of the
                component types (&lt;bean&gt;, &lt;service&gt;, etc.) as inline components, the
                generic &lt;value&gt; element for types sourced from string values, any of the
                collection types (&lt;set&gt;, &lt;list&gt;, &lt;array&gt;, &lt;map&gt;, &lt;props&gt;), and the
                &lt;null&gt; type to inject a null value.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:choice&gt;
            &lt;xsd:group ref="GnonNullValue" /&gt;
            &lt;xsd:element name="null" type="Tnull" /&gt;
        &lt;/xsd:choice&gt;
    &lt;/xsd:group&gt;

    &lt;xsd:complexType name="Tnull"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                The definition for a &lt;null&gt; value type.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:group name="GnonNullValue"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                The set of "value" types that can be used in any place a non-null value
                can be specified.  This set includes the &lt;ref&gt; and &lt;idref&gt; elements, any of the
                component types (&lt;bean&gt;, &lt;service&gt;, etc.) as inline components, the
                generic &lt;value&gt; element for types sourced from string values, and any of the
                collection types (&lt;set&gt;, &lt;list&gt;, &lt;array&gt;, &lt;map&gt;, &lt;props&gt;).

                The &lt;null&gt; type is NOT a member of this group.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:choice&gt;
            &lt;xsd:group ref="GallComponents" /&gt;
            &lt;xsd:element name="idref" type="Tref" /&gt;
            &lt;xsd:element name="value" type="Tvalue" /&gt;
            &lt;xsd:element name="list" type="Tcollection" /&gt;
            &lt;xsd:element name="set" type="Tcollection" /&gt;
            &lt;xsd:element name="map" type="Tmap" /&gt;
            &lt;xsd:element name="array" type="Tcollection" /&gt;
            &lt;xsd:element name="props" type="Tprops" /&gt;
        &lt;/xsd:choice&gt;
    &lt;/xsd:group&gt;

    &lt;xsd:complexType name="Tref"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                Tref is the type used for &lt;ref&gt; elements.  This specifies a required
                component id for the reference component.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:attribute name="component-id" type="Tidref" use="required" /&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:complexType name="Tvalue" mixed="true"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                Tvalue is the type used for &lt;value&gt; elements.  The &lt;value&gt; element
                is used for types that can be created from a single string value.
                The string value is the data value for the element.  The optional
                type attribute allows a target conversion value to be explicitly
                specified.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:attribute name="type" type="Ttype" /&gt;
    &lt;/xsd:complexType&gt;

    &lt;!-- Collection Values --&gt;

    &lt;xsd:complexType name="TtypedCollection"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                TtypeCollection defines comment attributes shared among different
                collection types that allow a default value type to be specified.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:attribute name="value-type" type="Ttype" /&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:complexType name="Tcollection"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                Tcollection is the base schema type for different ordered collection
                types.  This is shared between the &lt;array&gt;, &lt;list&gt;, and &lt;set&gt; elements.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:complexContent&gt;
            &lt;xsd:extension base="TtypedCollection"&gt;
                &lt;xsd:group ref="Gvalue" minOccurs="0" maxOccurs="unbounded" /&gt;
            &lt;/xsd:extension&gt;
        &lt;/xsd:complexContent&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:complexType name="Tprops"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                Tprops is the type used by the &lt;props&gt; value element.  The prop elements
                are pairs of string-valued keys and values.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:sequence&gt;
            &lt;xsd:element name="prop" type="Tprop" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/xsd:sequence&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:complexType name="Tprop" mixed="true"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                Tprop is a single property element for a &lt;props&gt; value type.  The property
                value can be specified using either the attribute, or as value data for
                the property element.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:attribute name="key" type="TstringValue" use="required" /&gt;
        &lt;xsd:attribute name="value" type="TstringValue" /&gt;
    &lt;/xsd:complexType&gt;

    &lt;!-- 'map' element type --&gt;
    &lt;xsd:complexType name="Tmap"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                Tmap is the base type used for &lt;map&gt; elements.  A map may have a
                default value type specified, so it inherits from the TtypeCollection
                type.  A key type can also be specified, and the map members are
                created from the entry elements, which require a key/value pair.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:complexContent&gt;
            &lt;xsd:extension base="TtypedCollection"&gt;
                &lt;xsd:sequence&gt;
                    &lt;xsd:element name="entry" type="TmapEntry" minOccurs="0"
                        maxOccurs="unbounded" /&gt;
                &lt;/xsd:sequence&gt;
                &lt;xsd:attribute name="key-type" type="Ttype" /&gt;
            &lt;/xsd:extension&gt;
        &lt;/xsd:complexContent&gt;
    &lt;/xsd:complexType&gt;

    &lt;!-- 'entry' element type --&gt;
    &lt;xsd:complexType name="TmapEntry"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                TmapEntry is used for &lt;entry&gt; elements nested inside of a &lt;map&gt; element.
                Each &lt;entry&gt; instance defines a key/value pair that will be added to the
                Map.  Both the keys and values may be arbitrary types.  Keys must not
                be &lt;null&gt; but &lt;null&gt; is permitted for entry values.  A default type
                can be specified for both the keys and the values, but individual keys
                or values can override the default.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:sequence&gt;
            &lt;xsd:element name="key" type="Tkey" minOccurs="0" /&gt;
            &lt;xsd:group ref="Gvalue" minOccurs="0" /&gt;
        &lt;/xsd:sequence&gt;
        &lt;xsd:attribute name="key" type="TstringValue" /&gt;
        &lt;xsd:attribute name="key-ref" type="Tidref" /&gt;
        &lt;xsd:attribute name="value" type="TstringValue" /&gt;
        &lt;xsd:attribute name="value-ref" type="Tidref" /&gt;
    &lt;/xsd:complexType&gt;

    &lt;!-- 'service property' element type --&gt;
    &lt;xsd:complexType name="TserviceProperties"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                TserviceProperty is used for &lt;service-properties&gt; elements.
                The syntax is similar to what is defined for &lt;map&gt;, but keys must be
                string values and there are no type defaults that can be specified.
                created from the entry elements, which require a key/value pair.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:sequence&gt;
            &lt;xsd:element name="entry" type="TservicePropertyEntry"
                minOccurs="0" maxOccurs="unbounded" /&gt;
            &lt;xsd:any namespace="##other" processContents="lax"
                minOccurs="0" maxOccurs="unbounded" /&gt;
        &lt;/xsd:sequence&gt;
    &lt;/xsd:complexType&gt;

    &lt;!-- 'entry' element type --&gt;
    &lt;xsd:complexType name="TservicePropertyEntry"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                TservicePropertyEntry is an entry value used for the &lt;service-properties&gt;
                element.  This does not allow a child &lt;key&gt; element and there are no
                key-ref or value-ref attributes.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:sequence&gt;
            &lt;xsd:group ref="Gvalue" minOccurs="0" /&gt;
        &lt;/xsd:sequence&gt;
        &lt;xsd:attribute name="key" type="TstringValue" use="required" /&gt;
        &lt;xsd:attribute name="value" type="TstringValue" /&gt;
    &lt;/xsd:complexType&gt;

    &lt;!-- General types --&gt;

    &lt;xsd:complexType name="Tdescription" mixed="true"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                A generic &lt;description&gt; element type to allow documentation to added to the
                blueprint configuration.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:choice minOccurs="0" maxOccurs="unbounded" /&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:complexType name="Tinterfaces"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                The type definition for the &lt;interfaces&gt; element used for &lt;service&gt;
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:choice minOccurs="1" maxOccurs="unbounded"&gt;
            &lt;xsd:element name="value" type="TinterfaceValue" /&gt;
        &lt;/xsd:choice&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:simpleType name="TinterfaceValue"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                TinterfaceValue is used for subelements of the &lt;interfaces&gt; element.
                This is just a &lt;value&gt;xxxxx&lt;/value&gt; element where the contained
                value is the name of an interface class.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:restriction base="Tclass" /&gt;
    &lt;/xsd:simpleType&gt;

    &lt;xsd:simpleType name="Tclass"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                Tclass is a base type that should be used for all attributes that
                refer to java class names.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:restriction base="xsd:NCName" /&gt;
    &lt;/xsd:simpleType&gt;

    &lt;xsd:simpleType name="Ttype"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                Ttype is a base type that refer to java types such as classes or
                arrays.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:restriction base="xsd:token"&gt;
            &lt;xsd:pattern value="[\i-[:]][\c-[:]]*(\[\])*" /&gt;
        &lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;

    &lt;xsd:simpleType name="Tmethod"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                Tmethod is a base type that should be used for all attributes that
                refer to java method names.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:restriction base="xsd:NCName" /&gt;
    &lt;/xsd:simpleType&gt;

    &lt;!--
        Should be used for all attributes and elements that refer to method
        names
    --&gt;
    &lt;xsd:simpleType name="Tidref"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                Tidref is a base type that should be used for all attributes that
                refer to component ids.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:restriction base="xsd:NCName" /&gt;
    &lt;/xsd:simpleType&gt;

    &lt;xsd:simpleType name="TstringValue"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                TstringValue is a base type that should be used for all attributes that
                refer to raw string values
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:restriction base="xsd:normalizedString" /&gt;
    &lt;/xsd:simpleType&gt;

    &lt;xsd:simpleType name="TautoExportModes"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                TautoExportModes is a base type that should be used for export-mode
                attributes.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:restriction base="xsd:NMTOKEN"&gt;
            &lt;xsd:enumeration value="disabled" /&gt;
            &lt;xsd:enumeration value="interfaces" /&gt;
            &lt;xsd:enumeration value="class-hierarchy" /&gt;
            &lt;xsd:enumeration value="all-classes" /&gt;
        &lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;

    &lt;xsd:simpleType name="Ttimeout"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                Ttimeout is a base type that should be used for all attributes that
                specify timeout values
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:restriction base="xsd:unsignedLong" /&gt;
    &lt;/xsd:simpleType&gt;

    &lt;xsd:simpleType name="TdependsOn"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                TdependsOn is a base type that should be used for all attributes that
                specify depends-on relationships
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:restriction&gt;
            &lt;xsd:simpleType&gt;
                &lt;xsd:list itemType="Tidref" /&gt;
            &lt;/xsd:simpleType&gt;
            &lt;xsd:minLength value="1" /&gt;
        &lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;

    &lt;xsd:simpleType name="Tscope"&gt;
        &lt;xsd:union&gt;
            &lt;xsd:simpleType&gt;
                &lt;xsd:restriction base="xsd:NMTOKEN"&gt;
                    &lt;xsd:enumeration value="singleton" /&gt;
                    &lt;xsd:enumeration value="prototype" /&gt;
                &lt;/xsd:restriction&gt;
            &lt;/xsd:simpleType&gt;
            &lt;xsd:simpleType&gt;
                &lt;xsd:restriction base="xsd:QName"&gt;
                    &lt;xsd:pattern value=".+:.+" /&gt;
                &lt;/xsd:restriction&gt;
            &lt;/xsd:simpleType&gt;
        &lt;/xsd:union&gt;
    &lt;/xsd:simpleType&gt;

    &lt;xsd:simpleType name="Tservice-use"&gt;
        &lt;xsd:annotation&gt;
            &lt;xsd:documentation&gt;
                &lt;![CDATA[
                Indicates the type of object that will be placed within the
                reference collection.  "service-object" indicates the 
                collection contains blueprint proxies for imported services.  
                "service-reference" indicates the collection contains 
                ServiceReference objects matching the target service type.
                ]]&gt;
            &lt;/xsd:documentation&gt;
        &lt;/xsd:annotation&gt;
        &lt;xsd:restriction base="xsd:NMTOKEN"&gt;
            &lt;xsd:enumeration value="service-object" /&gt;
            &lt;xsd:enumeration value="service-reference" /&gt;
        &lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;

&lt;/xsd:schema&gt;
</programlisting>
  </section>

  <section>
    <title>Security</title>

    <section>
      <title>Blueprint Extender</title>

      <para>A Blueprint Extender must use the Bundle Context of the Blueprint
      bundle. This will ensure that much of the resources allocated will be
      used on behalf of the Blueprint bundle. However, most Java 2 permissions
      will also verify the stack and this will inevitably include the
      Blueprint extender's code. Therefore, the Blueprint extender will
      require the combined set of permissions needed by all Blueprint bundles.
      It is therefore likely that in practical situations the Blueprint
      extender requires All Permission.</para>

      <para>The Blueprint bundle requires permission for all actions that are
      done by the Blueprint Container on behalf of this bundle. That is, the
      Blueprint Container must not give any extra permissions to the Blueprint
      bundle because it is being extended.</para>

      <para>A Blueprint Container must therefore use a
      <code>doPriviliged</code> block around all actions that execute code on
      behalf of the Blueprint bundle. This <code>doPrivileged</code> block
      must use an Access Control Context that represents the permissions of
      the Blueprint bundle.</para>

      <para>For example, if a Blueprint bundle defines the following
      bean:</para>

      <programlisting>&lt;bean class="java.lang.System" factory-method="exit"&gt;
    &lt;argument value="1"/&gt;
&lt;/bean&gt;</programlisting>

      <para>Then the Blueprint bundle must have the proper permission to exit
      the system or the Blueprint bundle must fail when the bean is
      constructed. At the same time, a Blueprint bundle must not be required
      to have any permission needed by the Blueprint Container to performs its
      tasks.</para>

      <para>A Blueprint Container must never use the
      <code>setAccessibility</code> method on a returned member. Only publicly
      accessible members must be used. Using a non-publicly accessible member
      must initiate failure, resulting in the destruction of the
      container.</para>
    </section>

    <section>
      <title>Blueprint Bundle</title>

      <para>A Blueprint Bundle must have all the permissions required by its
      code. There is one additional permission required for the Blueprint
      Bundle. The Blueprint extender will register a Blueprint Container
      service on behalf of the Blueprint bundle, and the Blueprint bundle must
      therefore have:</para>

      <programlisting>ServicePermission(...BlueprintContainer,[REGISTER])</programlisting>
    </section>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.blueprint.container" xml:id="org.osgi.service.blueprint.container" xml:base="../../generated/javadoc/docbook/org.osgi.service.blueprint.container.xml">
   <title>org.osgi.service.blueprint.container</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.blueprint.container-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.blueprint.container-version.number">1.0</edition>
   </info>
   <para>
Blueprint Container Package Version 1.0.
 
 </para>
   <para>
 This package defines the primary interface to a Blueprint Container,
 <code>BlueprintContainer</code>. An instance of this type is available
 inside a Blueprint Container as an implicitly defined component with the name
 "blueprintContainer".

 </para>
   <para>
 This package also declares the supporting exception types, listener, and constants 
 for working with a Blueprint Container.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.blueprint.container; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.blueprint.container; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.BlueprintContainer">
                  <code>BlueprintContainer</code>
               </link> - 
A Blueprint Container represents the managed state of a Blueprint bundle.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.BlueprintEvent">
                  <code>BlueprintEvent</code>
               </link> - 
A Blueprint Event.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.BlueprintListener">
                  <code>BlueprintListener</code>
               </link> - 
A <code>BlueprintEvent</code> Listener.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.ComponentDefinitionException">
                  <code>ComponentDefinitionException</code>
               </link> - 
A Blueprint exception indicating that a component definition is in error.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.Converter">
                  <code>Converter</code>
               </link> - 
Type converter to convert an object to a target type.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.EventConstants">
                  <code>EventConstants</code>
               </link> - 
Event property names used in Event Admin events published by a Blueprint
 Container.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.NoSuchComponentException">
                  <code>NoSuchComponentException</code>
               </link> - 
A Blueprint exception indicating that a component does not exist in a
 Blueprint Container.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.ReifiedType">
                  <code>ReifiedType</code>
               </link> - 
Provides access to a concrete type and its optional generic type parameters.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.ServiceUnavailableException">
                  <code>ServiceUnavailableException</code>
               </link> - 
A Blueprint exception indicating that a service is unavailable.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="BlueprintContainer" xml:id="org.osgi.service.blueprint.container.BlueprintContainer">
      <title>public interface BlueprintContainer</title>
      <para>
A Blueprint Container represents the managed state of a Blueprint bundle.
 
 A Blueprint Container provides access to all managed components. These are
 the beans, services, and service references. Only bundles in the
 <code>ACTIVE</code> state (and also the <code>STARTING</code> state for bundles
 awaiting lazy activation) can have an associated Blueprint Container. A given
 Bundle Context has at most one associated Blueprint Container.
 
 A Blueprint Container can be obtained by injecting the predefined
 "blueprintContainer" component id. The Blueprint Container is also
 registered as a service and its managed components can be queried.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="getComponentIds()" xml:id="org.osgi.service.blueprint.container.BlueprintContainer.getComponentIds--">
         <title>public Set&lt;String&gt; getComponentIds()</title>
         <para role="description">
Returns the set of component ids managed by this Blueprint Container.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An immutable Set of Strings, containing the ids of all of the
         components managed within this Blueprint Container.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getComponentInstance(String)" xml:id="org.osgi.service.blueprint.container.BlueprintContainer.getComponentInstance-String-">
         <title>public Object getComponentInstance(String id)</title>
         <formalpara role="parameter">
            <title>id</title>
            <para>The component id for the requested component instance.</para>
         </formalpara>
         <para role="description">
Return the component instance for the specified component id.
 
 If the component's manager has not yet been activated, calling this
 operation will atomically activate it. If the component has singleton
 scope, the activation will cause the component instance to be created and
 initialized. If the component has prototype scope, then each call to this
 method will return a new component instance.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A component instance for the component with the specified
         component id.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NoSuchComponentException</code>– If no component with the specified
         component id is managed by this Blueprint Container.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getComponentMetadata(String)" xml:id="org.osgi.service.blueprint.container.BlueprintContainer.getComponentMetadata-String-">
         <title>public ComponentMetadata getComponentMetadata(String id)</title>
         <formalpara role="parameter">
            <title>id</title>
            <para>The component id for the requested Component Metadata.</para>
         </formalpara>
         <para role="description">
Return the Component Metadata object for the component with the specified
 component id.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Component Metadata object for the component with the
         specified component id.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NoSuchComponentException</code>– If no component with the specified
         component id is managed by this Blueprint Container.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMetadata(Class)" xml:id="org.osgi.service.blueprint.container.BlueprintContainer.getMetadata-Class-">
         <title>public Collection&lt;T&gt; getMetadata(Class&lt;T&gt; type)</title>
         <formalpara role="parameter">
            <title>Type Arguments</title>
            <para>
               <code>&lt;T extends ComponentMetadata&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;T&gt;</title>
            <para>Type of Component Metadata.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>The super type or type of the requested Component Metadata
        objects.</para>
         </formalpara>
         <para role="description">
Return all <link linkend="org.osgi.service.blueprint.reflect.ComponentMetadata">ComponentMetadata</link> objects of the specified Component
 Metadata type. The supported Component Metadata types are
 <link linkend="org.osgi.service.blueprint.reflect.ComponentMetadata">ComponentMetadata</link> (which returns the Component Metadata for all
 defined manager types), <link linkend="org.osgi.service.blueprint.reflect.BeanMetadata">BeanMetadata</link> ,
 <link linkend="org.osgi.service.blueprint.reflect.ServiceReferenceMetadata">ServiceReferenceMetadata</link> (which returns both
 <link linkend="org.osgi.service.blueprint.reflect.ReferenceMetadata">ReferenceMetadata</link> and <link linkend="org.osgi.service.blueprint.reflect.ReferenceListMetadata">ReferenceListMetadata</link> objects), and
 <link linkend="org.osgi.service.blueprint.reflect.ServiceMetadata">ServiceMetadata</link>. The collection will include all Component
 Metadata objects of the requested type, including components that are
 declared inline.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An immutable collection of Component Metadata objects of the
         specified type.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="BlueprintEvent" xml:id="org.osgi.service.blueprint.container.BlueprintEvent">
      <title>public class BlueprintEvent</title>
      <para>
A Blueprint Event.
 
 </para>
      <para>
         <code>BlueprintEvent</code> objects are delivered to all registered
 <link linkend="org.osgi.service.blueprint.container.BlueprintListener">BlueprintListener</link> services. Blueprint Events must be asynchronously
 delivered in chronological order with respect to each listener.
 
 </para>
      <para>
 In addition, after a Blueprint Listener is registered, the Blueprint extender
 will synchronously send to this Blueprint Listener the last Blueprint Event
 for each ready Blueprint bundle managed by this extender. This
 <emphasis>replay</emphasis> of Blueprint Events is designed so that the new Blueprint
 Listener can be informed of the state of each Blueprint bundle. Blueprint
 Events sent during this replay will have the <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.isReplay--">isReplay()</link> flag set.
 The Blueprint extender must ensure that this replay phase does not interfere
 with new Blueprint Events so that the chronological order of all Blueprint
 Events received by the Blueprint Listener is preserved. If the last Blueprint
 Event for a given Blueprint bundle is <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.DESTROYED">DESTROYED</link>, the extender must
 not send it during this replay phase.
 
 </para>
      <para>
 A type code is used to identify the type of event. The following event types
 are defined:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.CREATING">CREATING</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.CREATED">CREATED</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.DESTROYING">DESTROYING</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.DESTROYED">DESTROYED</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.FAILURE">FAILURE</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.GRACE_PERIOD">GRACE_PERIOD</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.WAITING">WAITING</link>
            </para>
         </listitem>
      </itemizedlist>
      <para>
 In addition to calling the registered <link linkend="org.osgi.service.blueprint.container.BlueprintListener">BlueprintListener</link> services, the
 Blueprint extender must also send those events to the Event Admin service, if
 it is available.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.blueprint.container.BlueprintListener">BlueprintListener</link>, <link linkend="org.osgi.service.blueprint.container.EventConstants">EventConstants</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="CREATED" xml:id="org.osgi.service.blueprint.container.BlueprintEvent.CREATED">
         <title>public static final int CREATED = 2</title>
         <para>
The Blueprint extender has created a Blueprint Container for the bundle.
 This event is sent after the Blueprint Container has been registered as a
 service.
   </para>
      </section>
      <section role="field" xreflabel="CREATING" xml:id="org.osgi.service.blueprint.container.BlueprintEvent.CREATING">
         <title>public static final int CREATING = 1</title>
         <para>
The Blueprint extender has started creating a Blueprint Container for the
 bundle.
   </para>
      </section>
      <section role="field" xreflabel="DESTROYED" xml:id="org.osgi.service.blueprint.container.BlueprintEvent.DESTROYED">
         <title>public static final int DESTROYED = 4</title>
         <para>
The Blueprint Container for the bundle has been completely destroyed.
 This event is sent after the Blueprint Container has been unregistered as
 a service.
   </para>
      </section>
      <section role="field" xreflabel="DESTROYING" xml:id="org.osgi.service.blueprint.container.BlueprintEvent.DESTROYING">
         <title>public static final int DESTROYING = 3</title>
         <para>
The Blueprint extender has started destroying the Blueprint Container for
 the bundle.
   </para>
      </section>
      <section role="field" xreflabel="FAILURE" xml:id="org.osgi.service.blueprint.container.BlueprintEvent.FAILURE">
         <title>public static final int FAILURE = 5</title>
         <para>
The Blueprint Container creation for the bundle has failed. If this event
 is sent after a timeout in the Grace Period, the
 <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.getDependencies--">getDependencies()</link> method must return an array of missing
 mandatory dependencies. The event must also contain the cause of the
 failure as a <code>Throwable</code> through the <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.getCause--">getCause()</link> method.
   </para>
      </section>
      <section role="field" xreflabel="GRACE_PERIOD" xml:id="org.osgi.service.blueprint.container.BlueprintEvent.GRACE_PERIOD">
         <title>public static final int GRACE_PERIOD = 6</title>
         <para>
The Blueprint Container has entered the grace period. The list of missing
 dependencies must be made available through the
 <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.getDependencies--">getDependencies()</link> method. During the grace period, a
 <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.GRACE_PERIOD">GRACE_PERIOD</link> event is sent each time the set of unsatisfied
 dependencies changes.
   </para>
      </section>
      <section role="field" xreflabel="WAITING" xml:id="org.osgi.service.blueprint.container.BlueprintEvent.WAITING">
         <title>public static final int WAITING = 7</title>
         <para>
The Blueprint Container is waiting on the availability of a service to
 satisfy an invocation on a referenced service. The missing dependency
 must be made available through the <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.getDependencies--">getDependencies()</link> method
 which will return an array containing one filter object as a String.
   </para>
      </section>
      <section role="method" xreflabel="BlueprintEvent(int,Bundle,Bundle)" xml:id="org.osgi.service.blueprint.container.BlueprintEvent.BlueprintEvent-int-Bundle-Bundle-">
         <title>public  BlueprintEvent(int type,Bundle bundle,Bundle extenderBundle)</title>
         <formalpara role="parameter">
            <title>type</title>
            <para>The type of this event.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The Blueprint bundle associated with this event. This
        parameter must not be <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>extenderBundle</title>
            <para>The Blueprint extender bundle that is generating
        this event. This parameter must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Create a simple <code>BlueprintEvent</code> object.
   </para>
      </section>
      <section role="method" xreflabel="BlueprintEvent(int,Bundle,Bundle,String[])" xml:id="org.osgi.service.blueprint.container.BlueprintEvent.BlueprintEvent-int-Bundle-Bundle-String---">
         <title>public  BlueprintEvent(int type,Bundle bundle,Bundle extenderBundle,String[] dependencies)</title>
         <formalpara role="parameter">
            <title>type</title>
            <para>The type of this event.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The Blueprint bundle associated with this event. This
        parameter must not be <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>extenderBundle</title>
            <para>The Blueprint extender bundle that is generating
        this event. This parameter must not be <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>dependencies</title>
            <para>An array of <code>String</code> filters for each
        dependency associated with this event. Must be a non-empty array
        for event types <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.GRACE_PERIOD">GRACE_PERIOD</link> and <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.WAITING">WAITING</link>. It is
        optional for event type <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.FAILURE">FAILURE</link>. Must be <code>null</code> for
        other event types.</para>
         </formalpara>
         <para role="description">
Create a <code>BlueprintEvent</code> object associated with a set of
 dependencies.
   </para>
      </section>
      <section role="method" xreflabel="BlueprintEvent(int,Bundle,Bundle,Throwable)" xml:id="org.osgi.service.blueprint.container.BlueprintEvent.BlueprintEvent-int-Bundle-Bundle-Throwable-">
         <title>public  BlueprintEvent(int type,Bundle bundle,Bundle extenderBundle,Throwable cause)</title>
         <formalpara role="parameter">
            <title>type</title>
            <para>The type of this event.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The Blueprint bundle associated with this event. This
        parameter must not be <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>extenderBundle</title>
            <para>The Blueprint extender bundle that is generating
        this event. This parameter must not be <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>A <code>Throwable</code> object describing the root cause of the
        event. May be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Create a <code>BlueprintEvent</code> object associated with a failure cause.
   </para>
      </section>
      <section role="method" xreflabel="BlueprintEvent(int,Bundle,Bundle,String[],Throwable)" xml:id="org.osgi.service.blueprint.container.BlueprintEvent.BlueprintEvent-int-Bundle-Bundle-String---Throwable-">
         <title>public  BlueprintEvent(int type,Bundle bundle,Bundle extenderBundle,String[] dependencies,Throwable cause)</title>
         <formalpara role="parameter">
            <title>type</title>
            <para>The type of this event.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The Blueprint bundle associated with this event. This
        parameter must not be <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>extenderBundle</title>
            <para>The Blueprint extender bundle that is generating
        this event. This parameter must not be <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>dependencies</title>
            <para>An array of <code>String</code> filters for each
        dependency associated with this event. Must be a non-empty array
        for event types <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.GRACE_PERIOD">GRACE_PERIOD</link> and <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.WAITING">WAITING</link>. It is
        optional for event type <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.FAILURE">FAILURE</link>. Must be <code>null</code> for
        other event types.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>A <code>Throwable</code> object describing the root cause of this
        event. May be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Create a <code>BlueprintEvent</code> object associated with a failure cause
 and a set of dependencies.
   </para>
      </section>
      <section role="method" xreflabel="BlueprintEvent(BlueprintEvent,boolean)" xml:id="org.osgi.service.blueprint.container.BlueprintEvent.BlueprintEvent-BlueprintEvent-boolean-">
         <title>public  BlueprintEvent(BlueprintEvent event,boolean replay)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>The original <code>BlueprintEvent</code> to copy. Must not be
        <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>replay</title>
            <para>
               <code>true</code> if this event should be used as a replay
        event.</para>
         </formalpara>
         <para role="description">
Create a new <code>BlueprintEvent</code> from the specified
 <code>BlueprintEvent</code>. The <code>timestamp</code> property will be copied
 from the original event and only the replay property will be overridden
 with the given value.
   </para>
      </section>
      <section role="method" xreflabel="getBundle()" xml:id="org.osgi.service.blueprint.container.BlueprintEvent.getBundle--">
         <title>public Bundle getBundle()</title>
         <para role="description">
Return the Blueprint bundle associated with this event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Blueprint bundle associated with this event.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getCause()" xml:id="org.osgi.service.blueprint.container.BlueprintEvent.getCause--">
         <title>public Throwable getCause()</title>
         <para role="description">
Return the cause for this <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.FAILURE">FAILURE</link> event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The cause of the failure for this event. May be <code>null</code> .</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getDependencies()" xml:id="org.osgi.service.blueprint.container.BlueprintEvent.getDependencies--">
         <title>public String[] getDependencies()</title>
         <para role="description">
Return the filters identifying the missing dependencies that caused this
 event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The filters identifying the missing dependencies that caused this
         event if the event type is one of <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.WAITING">WAITING</link>,
         <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.GRACE_PERIOD">GRACE_PERIOD</link> or <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.FAILURE">FAILURE</link> or <code>null</code> for the
         other event types.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getExtenderBundle()" xml:id="org.osgi.service.blueprint.container.BlueprintEvent.getExtenderBundle--">
         <title>public Bundle getExtenderBundle()</title>
         <para role="description">
Return the Blueprint extender bundle that is generating this event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Blueprint extender bundle that is generating this event.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getTimestamp()" xml:id="org.osgi.service.blueprint.container.BlueprintEvent.getTimestamp--">
         <title>public long getTimestamp()</title>
         <para role="description">
Return the time at which this event was created.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The time at which this event was created.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.blueprint.container.BlueprintEvent.getType--">
         <title>public int getType()</title>
         <para role="description">
Return the type of this event.
 </para>
         <para>
 The type values are:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.CREATING">CREATING</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.CREATED">CREATED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.DESTROYING">DESTROYING</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.DESTROYED">DESTROYED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.FAILURE">FAILURE</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.GRACE_PERIOD">GRACE_PERIOD</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.WAITING">WAITING</link>
               </para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The type of this event.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isReplay()" xml:id="org.osgi.service.blueprint.container.BlueprintEvent.isReplay--">
         <title>public boolean isReplay()</title>
         <para role="description">
Return whether this event is a replay event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this event is a replay event and <code>false</code>
         otherwise.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="BlueprintListener" xml:id="org.osgi.service.blueprint.container.BlueprintListener">
      <title>public interface BlueprintListener</title>
      <para>
A <code>BlueprintEvent</code> Listener.
 
 </para>
      <para>
 To receive Blueprint Events, a bundle must register a Blueprint Listener
 service.
 
 After a Blueprint Listener is registered, the Blueprint extender must
 synchronously send to this Blueprint Listener the last Blueprint Event for
 each ready Blueprint bundle managed by this extender. This replay of
 Blueprint Events is designed so that the new Blueprint Listener can be
 informed of the state of each Blueprint bundle. Blueprint Events sent during
 this replay will have the <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.isReplay--">isReplay()</link> flag
 set. The Blueprint extender must ensure that this replay phase does not
 interfere with new Blueprint Events so that the chronological order of all
 Blueprint Events received by the Blueprint Listener is preserved. If the last
 Blueprint Event for a given Blueprint bundle is
 <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.DESTROYED">DESTROYED</link>, the extender must not send it
 during this replay phase.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.blueprint.container.BlueprintEvent">BlueprintEvent</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="blueprintEvent(BlueprintEvent)" xml:id="org.osgi.service.blueprint.container.BlueprintListener.blueprintEvent-BlueprintEvent-">
         <title>public void blueprintEvent(BlueprintEvent event)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>The <link linkend="org.osgi.service.blueprint.container.BlueprintEvent">BlueprintEvent</link>.</para>
         </formalpara>
         <para role="description">
Receives notifications of a Blueprint Event.
 
 Implementers should quickly process the event and return.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="ComponentDefinitionException" xml:id="org.osgi.service.blueprint.container.ComponentDefinitionException">
      <title>public class ComponentDefinitionException<?line-break?> extends RuntimeException</title>
      <para>
A Blueprint exception indicating that a component definition is in error.
 
 This exception is thrown when a configuration-related error occurs during
 creation of a Blueprint Container.
   </para>
      <section role="method" xreflabel="ComponentDefinitionException()" xml:id="org.osgi.service.blueprint.container.ComponentDefinitionException.ComponentDefinitionException--">
         <title>public  ComponentDefinitionException()</title>
         <para role="description">
Creates a Component Definition Exception with no message or exception
 cause.
   </para>
      </section>
      <section role="method" xreflabel="ComponentDefinitionException(String)" xml:id="org.osgi.service.blueprint.container.ComponentDefinitionException.ComponentDefinitionException-String-">
         <title>public  ComponentDefinitionException(String explanation)</title>
         <formalpara role="parameter">
            <title>explanation</title>
            <para>The associated message.</para>
         </formalpara>
         <para role="description">
Creates a Component Definition Exception with the specified message
   </para>
      </section>
      <section role="method" xreflabel="ComponentDefinitionException(String,Throwable)" xml:id="org.osgi.service.blueprint.container.ComponentDefinitionException.ComponentDefinitionException-String-Throwable-">
         <title>public  ComponentDefinitionException(String explanation,Throwable cause)</title>
         <formalpara role="parameter">
            <title>explanation</title>
            <para>The associated message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception.</para>
         </formalpara>
         <para role="description">
Creates a Component Definition Exception with the specified message and
 exception cause.
   </para>
      </section>
      <section role="method" xreflabel="ComponentDefinitionException(Throwable)" xml:id="org.osgi.service.blueprint.container.ComponentDefinitionException.ComponentDefinitionException-Throwable-">
         <title>public  ComponentDefinitionException(Throwable cause)</title>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception.</para>
         </formalpara>
         <para role="description">
Creates a Component Definition Exception with the exception cause.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="Converter" xml:id="org.osgi.service.blueprint.container.Converter">
      <title>public interface Converter</title>
      <para>
Type converter to convert an object to a target type.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="canConvert(Object,ReifiedType)" xml:id="org.osgi.service.blueprint.container.Converter.canConvert-Object-ReifiedType-">
         <title>public boolean canConvert(Object sourceObject,ReifiedType targetType)</title>
         <formalpara role="parameter">
            <title>sourceObject</title>
            <para>The source object <code>s</code> to convert.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>targetType</title>
            <para>The target type <code>T</code>.</para>
         </formalpara>
         <para role="description">
Return if this converter is able to convert the specified object to the
 specified type.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the conversion is possible, <code>false</code>
         otherwise.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="convert(Object,ReifiedType)" xml:id="org.osgi.service.blueprint.container.Converter.convert-Object-ReifiedType-">
         <title>public Object convert(Object sourceObject,ReifiedType targetType) throws Exception</title>
         <formalpara role="parameter">
            <title>sourceObject</title>
            <para>The source object <code>s</code> to convert.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>targetType</title>
            <para>The target type <code>T</code>.</para>
         </formalpara>
         <para role="description">
Convert the specified object to an instance of the specified type.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An instance with a type that is assignable from targetType's raw
         class</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– If the conversion cannot succeed. This exception should
         not be thrown when the <link linkend="org.osgi.service.blueprint.container.Converter.canConvert-Object-ReifiedType-">canConvert</link> method has returned <code>true</code>.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="EventConstants" xml:id="org.osgi.service.blueprint.container.EventConstants">
      <title>public class EventConstants</title>
      <para>
Event property names used in Event Admin events published by a Blueprint
 Container.
 
 </para>
      <para>
 Each type of event is sent to a different topic:
 
 </para>
      <para>
         <code>org/osgi/service/blueprint/container/</code>
         <emphasis>&lt;event-type&gt;</emphasis>
      </para>
      <para>
 where <emphasis>&lt;event-type&gt;</emphasis> can have the values
 <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.CREATING">CREATING</link>, <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.CREATED">CREATED</link>, <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.DESTROYING">DESTROYING</link>,
 <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.DESTROYED">DESTROYED</link>, <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.FAILURE">FAILURE</link>, <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.GRACE_PERIOD">GRACE_PERIOD</link>, or
 <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.WAITING">WAITING</link>.
 
 </para>
      <para>
 Such events have the following properties:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.EventConstants.TYPE">type</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.EventConstants.EVENT">event</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.EventConstants.TIMESTAMP">timestamp</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.EventConstants.BUNDLE">bundle</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.EventConstants.BUNDLE_SYMBOLICNAME">bundle.symbolicName</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.EventConstants.BUNDLE_ID">bundle.id</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.EventConstants.BUNDLE_VERSION">bundle.version</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.EventConstants.EXTENDER_BUNDLE_SYMBOLICNAME">extender.bundle.symbolicName</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.EventConstants.EXTENDER_BUNDLE_ID">extender.bundle.id</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.EventConstants.EXTENDER_BUNDLE_VERSION">extender.bundle.version</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.EventConstants.DEPENDENCIES">dependencies</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.container.EventConstants.CAUSE">cause</link>
            </para>
         </listitem>
      </itemizedlist>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="BUNDLE" xml:id="org.osgi.service.blueprint.container.EventConstants.BUNDLE">
         <title>public static final String BUNDLE = "bundle"</title>
         <para>
The Blueprint bundle associated with this event. This property is of type
 <code>Bundle</code>.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE_ID" xml:id="org.osgi.service.blueprint.container.EventConstants.BUNDLE_ID">
         <title>public static final String BUNDLE_ID = "bundle.id"</title>
         <para>
The bundle id of the Blueprint bundle associated with this event. This
 property is of type <code>Long</code>.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE_SYMBOLICNAME" xml:id="org.osgi.service.blueprint.container.EventConstants.BUNDLE_SYMBOLICNAME">
         <title>public static final String BUNDLE_SYMBOLICNAME = "bundle.symbolicName"</title>
         <para>
The bundle symbolic name of the Blueprint bundle associated with this
 event. This property is of type <code>String</code>.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE_VERSION" xml:id="org.osgi.service.blueprint.container.EventConstants.BUNDLE_VERSION">
         <title>public static final String BUNDLE_VERSION = "bundle.version"</title>
         <para>
The bundle version of the Blueprint bundle associated with this event.
 This property is of type <code>Version</code>.
   </para>
      </section>
      <section role="field" xreflabel="CAUSE" xml:id="org.osgi.service.blueprint.container.EventConstants.CAUSE">
         <title>public static final String CAUSE = "cause"</title>
         <para>
The cause for a <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.FAILURE">FAILURE</link> event. This
 property is of type <code>Throwable</code>.
   </para>
      </section>
      <section role="field" xreflabel="DEPENDENCIES" xml:id="org.osgi.service.blueprint.container.EventConstants.DEPENDENCIES">
         <title>public static final String DEPENDENCIES = "dependencies"</title>
         <para>
The filters identifying the missing dependencies that caused this event
 for a <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.FAILURE">FAILURE</link>,
 <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.GRACE_PERIOD">GRACE_PERIOD</link>, or
 <link linkend="org.osgi.service.blueprint.container.BlueprintEvent.WAITING">WAITING</link> event. This property type is an
 array of <code>String</code>.
   </para>
      </section>
      <section role="field" xreflabel="EVENT" xml:id="org.osgi.service.blueprint.container.EventConstants.EVENT">
         <title>public static final String EVENT = "event"</title>
         <para>
The <code>BlueprintEvent</code> object that caused this event. This property
 is of type <link linkend="org.osgi.service.blueprint.container.BlueprintEvent">BlueprintEvent</link>.
   </para>
      </section>
      <section role="field" xreflabel="EXTENDER_BUNDLE" xml:id="org.osgi.service.blueprint.container.EventConstants.EXTENDER_BUNDLE">
         <title>public static final String EXTENDER_BUNDLE = "extender.bundle"</title>
         <para>
The Blueprint extender bundle that is generating this event. This
 property is of type <code>Bundle</code>.
   </para>
      </section>
      <section role="field" xreflabel="EXTENDER_BUNDLE_ID" xml:id="org.osgi.service.blueprint.container.EventConstants.EXTENDER_BUNDLE_ID">
         <title>public static final String EXTENDER_BUNDLE_ID = "extender.bundle.id"</title>
         <para>
The bundle id of the Blueprint extender bundle that is generating this
 event. This property is of type <code>Long</code>.
   </para>
      </section>
      <section role="field" xreflabel="EXTENDER_BUNDLE_SYMBOLICNAME" xml:id="org.osgi.service.blueprint.container.EventConstants.EXTENDER_BUNDLE_SYMBOLICNAME">
         <title>public static final String EXTENDER_BUNDLE_SYMBOLICNAME = "extender.bundle.symbolicName"</title>
         <para>
The bundle symbolic of the Blueprint extender bundle that is generating
 this event. This property is of type <code>String</code>.
   </para>
      </section>
      <section role="field" xreflabel="EXTENDER_BUNDLE_VERSION" xml:id="org.osgi.service.blueprint.container.EventConstants.EXTENDER_BUNDLE_VERSION">
         <title>public static final String EXTENDER_BUNDLE_VERSION = "extender.bundle.version"</title>
         <para>
The bundle version of the Blueprint extender bundle that is generating
 this event. This property is of type <code>Version</code>.
   </para>
      </section>
      <section role="field" xreflabel="TIMESTAMP" xml:id="org.osgi.service.blueprint.container.EventConstants.TIMESTAMP">
         <title>public static final String TIMESTAMP = "timestamp"</title>
         <para>
The time the event was created. This property is of type <code>Long</code>.
   </para>
      </section>
      <section role="field" xreflabel="TOPIC_BLUEPRINT_EVENTS" xml:id="org.osgi.service.blueprint.container.EventConstants.TOPIC_BLUEPRINT_EVENTS">
         <title>public static final String TOPIC_BLUEPRINT_EVENTS = "org/osgi/service/blueprint/container"</title>
         <para>
Topic prefix for all events issued by the Blueprint Container
   </para>
      </section>
      <section role="field" xreflabel="TOPIC_CREATED" xml:id="org.osgi.service.blueprint.container.EventConstants.TOPIC_CREATED">
         <title>public static final String TOPIC_CREATED = "org/osgi/service/blueprint/container/CREATED"</title>
         <para>
Topic for Blueprint Container CREATED events
   </para>
      </section>
      <section role="field" xreflabel="TOPIC_CREATING" xml:id="org.osgi.service.blueprint.container.EventConstants.TOPIC_CREATING">
         <title>public static final String TOPIC_CREATING = "org/osgi/service/blueprint/container/CREATING"</title>
         <para>
Topic for Blueprint Container CREATING events
   </para>
      </section>
      <section role="field" xreflabel="TOPIC_DESTROYED" xml:id="org.osgi.service.blueprint.container.EventConstants.TOPIC_DESTROYED">
         <title>public static final String TOPIC_DESTROYED = "org/osgi/service/blueprint/container/DESTROYED"</title>
         <para>
Topic for Blueprint Container DESTROYED events
   </para>
      </section>
      <section role="field" xreflabel="TOPIC_DESTROYING" xml:id="org.osgi.service.blueprint.container.EventConstants.TOPIC_DESTROYING">
         <title>public static final String TOPIC_DESTROYING = "org/osgi/service/blueprint/container/DESTROYING"</title>
         <para>
Topic for Blueprint Container DESTROYING events
   </para>
      </section>
      <section role="field" xreflabel="TOPIC_FAILURE" xml:id="org.osgi.service.blueprint.container.EventConstants.TOPIC_FAILURE">
         <title>public static final String TOPIC_FAILURE = "org/osgi/service/blueprint/container/FAILURE"</title>
         <para>
Topic for Blueprint Container FAILURE events
   </para>
      </section>
      <section role="field" xreflabel="TOPIC_GRACE_PERIOD" xml:id="org.osgi.service.blueprint.container.EventConstants.TOPIC_GRACE_PERIOD">
         <title>public static final String TOPIC_GRACE_PERIOD = "org/osgi/service/blueprint/container/GRACE_PERIOD"</title>
         <para>
Topic for Blueprint Container GRACE_PERIOD events
   </para>
      </section>
      <section role="field" xreflabel="TOPIC_WAITING" xml:id="org.osgi.service.blueprint.container.EventConstants.TOPIC_WAITING">
         <title>public static final String TOPIC_WAITING = "org/osgi/service/blueprint/container/WAITING"</title>
         <para>
Topic for Blueprint Container WAITING events
   </para>
      </section>
      <section role="field" xreflabel="TYPE" xml:id="org.osgi.service.blueprint.container.EventConstants.TYPE">
         <title>public static final String TYPE = "type"</title>
         <para>
The type of the event that has been issued. This property is of type
 <code>Integer</code> and can take one of the values defined in
 <link linkend="org.osgi.service.blueprint.container.BlueprintEvent">BlueprintEvent</link>.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="NoSuchComponentException" xml:id="org.osgi.service.blueprint.container.NoSuchComponentException">
      <title>public class NoSuchComponentException<?line-break?> extends RuntimeException</title>
      <para>
A Blueprint exception indicating that a component does not exist in a
 Blueprint Container.
 
 This exception is thrown when an attempt is made to create a component
 instance or lookup Component Metadata using a component id that does not
 exist in the Blueprint Container.
   </para>
      <section role="method" xreflabel="NoSuchComponentException(String,String)" xml:id="org.osgi.service.blueprint.container.NoSuchComponentException.NoSuchComponentException-String-String-">
         <title>public  NoSuchComponentException(String msg,String id)</title>
         <formalpara role="parameter">
            <title>msg</title>
            <para>The associated message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>id</title>
            <para>The id of the non-existent component.</para>
         </formalpara>
         <para role="description">
Create a No Such Component Exception for a non-existent component.
   </para>
      </section>
      <section role="method" xreflabel="NoSuchComponentException(String)" xml:id="org.osgi.service.blueprint.container.NoSuchComponentException.NoSuchComponentException-String-">
         <title>public  NoSuchComponentException(String id)</title>
         <formalpara role="parameter">
            <title>id</title>
            <para>The id of the non-existent component.</para>
         </formalpara>
         <para role="description">
Create a No Such Component Exception for a non-existent component.
   </para>
      </section>
      <section role="method" xreflabel="getComponentId()" xml:id="org.osgi.service.blueprint.container.NoSuchComponentException.getComponentId--">
         <title>public String getComponentId()</title>
         <para role="description">
Returns the id of the non-existent component.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The id of the non-existent component.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ReifiedType" xml:id="org.osgi.service.blueprint.container.ReifiedType">
      <title>public class ReifiedType</title>
      <para>
Provides access to a concrete type and its optional generic type parameters.
 
 </para>
      <para>
 Java 5 and later support generic types. These types consist of a raw class
 with type parameters. This class models such a <code>Type</code> class but ensures
 that the type is <emphasis>reified</emphasis>. Reification means that the Type graph
 associated with a Java 5 <code>Type</code> instance is traversed until the type
 becomes a concrete class. This class is available with the
 <link linkend="org.osgi.service.blueprint.container.ReifiedType.getRawClass--">getRawClass()</link> method. The optional type parameters are recursively
 represented as Reified Types.
 
 </para>
      <para>
 In Java 1.4, a class has by definition no type parameters. This class
 implementation provides the Reified Type for Java 1.4 by making the raw class
 the Java 1.4 class and using a Reified Type based on the <code>Object</code> class
 for any requested type parameter.
 
 </para>
      <para>
 A Blueprint extender implementations can subclass this class and provide
 access to the generic type parameter graph for conversion. Such a subclass
 must <emphasis>reify</emphasis> the different Java 5 <code>Type</code> instances into the
 reified form. That is, a form where the raw Class is available with its
 optional type parameters as Reified Types.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="method" xreflabel="ReifiedType(Class)" xml:id="org.osgi.service.blueprint.container.ReifiedType.ReifiedType-Class-">
         <title>public  ReifiedType(Class&lt;?&gt; clazz)</title>
         <formalpara role="parameter">
            <title>clazz</title>
            <para>The raw class of the Reified Type.</para>
         </formalpara>
         <para role="description">
Create a Reified Type for a raw Java class without any generic type
 parameters. Subclasses can provide the optional generic type parameter
 information. Without subclassing, this instance has no type parameters.
   </para>
      </section>
      <section role="method" xreflabel="getActualTypeArgument(int)" xml:id="org.osgi.service.blueprint.container.ReifiedType.getActualTypeArgument-int-">
         <title>public ReifiedType getActualTypeArgument(int i)</title>
         <formalpara role="parameter">
            <title>i</title>
            <para>The zero-based index of the requested type parameter.</para>
         </formalpara>
         <para role="description">
Return a type parameter for this type.
 
 The type parameter refers to a parameter in a generic type declaration
 given by the zero-based index <code>i</code>.
 
 For example, in the following example:
 
 </para>
         <programlisting> Map&lt;String, ? extends Metadata&gt;</programlisting>
         <para>
 
 type parameter 0 is <code>String</code>, and type parameter 1 is
 <code>Metadata</code>.
 
 </para>
         <para>
 This implementation returns a Reified Type that has <code>Object</code> as
 class. Any object is assignable to Object and therefore no conversion is
 then necessary. This is compatible with versions of Java language prior
 to Java 5.
 
 This method should be overridden by a subclass that provides access to
 the generic type parameter information for Java 5 and later.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <code>ReifiedType</code> for the generic type parameter at the
         specified index.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRawClass()" xml:id="org.osgi.service.blueprint.container.ReifiedType.getRawClass--">
         <title>public Class&lt;?&gt; getRawClass()</title>
         <para role="description">
Return the raw class represented by this type.
 
 The raw class represents the concrete class that is associated with a
 type declaration. This class could have been deduced from the generics
 type parameter graph of the declaration. For example, in the following
 example:
 
 </para>
         <programlisting> Map&lt;String, ? extends Metadata&gt;</programlisting>
         <para>
 
 The raw class is the Map class.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The raw class represented by this type.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="size()" xml:id="org.osgi.service.blueprint.container.ReifiedType.size--">
         <title>public int size()</title>
         <para role="description">
Return the number of type parameters for this type.
 
 </para>
         <para>
 This implementation returns <code>0</code>. This method should be overridden
 by a subclass that provides access to the generic type parameter
 information for Java 5 and later.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The number of type parameters for this type.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ServiceUnavailableException" xml:id="org.osgi.service.blueprint.container.ServiceUnavailableException">
      <title>public class ServiceUnavailableException<?line-break?> extends ServiceException</title>
      <para>
A Blueprint exception indicating that a service is unavailable.
 
 This exception is thrown when an invocation is made on a service reference
 and a backing service is not available.
   </para>
      <section role="method" xreflabel="ServiceUnavailableException(String,String)" xml:id="org.osgi.service.blueprint.container.ServiceUnavailableException.ServiceUnavailableException-String-String-">
         <title>public  ServiceUnavailableException(String message,String filter)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The associated message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>filter</title>
            <para>The filter used for the service lookup.</para>
         </formalpara>
         <para role="description">
Creates a Service Unavailable Exception with the specified message.
   </para>
      </section>
      <section role="method" xreflabel="ServiceUnavailableException(String,String,Throwable)" xml:id="org.osgi.service.blueprint.container.ServiceUnavailableException.ServiceUnavailableException-String-String-Throwable-">
         <title>public  ServiceUnavailableException(String message,String filter,Throwable cause)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The associated message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>filter</title>
            <para>The filter used for the service lookup.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception.</para>
         </formalpara>
         <para role="description">
Creates a Service Unavailable Exception with the specified message and
 exception cause.
   </para>
      </section>
      <section role="method" xreflabel="getFilter()" xml:id="org.osgi.service.blueprint.container.ServiceUnavailableException.getFilter--">
         <title>public String getFilter()</title>
         <para role="description">
Returns the filter expression that a service would have needed to satisfy
 in order for the invocation to proceed.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The failing filter.</para>
         </formalpara>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.service.blueprint.reflect" xml:id="org.osgi.service.blueprint.reflect" xml:base="../../generated/javadoc/docbook/org.osgi.service.blueprint.reflect.xml">
   <title>org.osgi.service.blueprint.reflect</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.blueprint.reflect-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.blueprint.reflect-version.number">1.0</edition>
   </info>
   <para>
Blueprint Reflection Package Version 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.blueprint.reflect; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.blueprint.reflect; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.BeanArgument">
                  <code>BeanArgument</code>
               </link> - 
Metadata for a factory method or constructor argument of a bean.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.BeanMetadata">
                  <code>BeanMetadata</code>
               </link> - 
Metadata for a Bean component.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.BeanProperty">
                  <code>BeanProperty</code>
               </link> - 
Metadata for a property to be injected into a bean.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.CollectionMetadata">
                  <code>CollectionMetadata</code>
               </link> - 
Metadata for a collection based value.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.ComponentMetadata">
                  <code>ComponentMetadata</code>
               </link> - 
Metadata for managed components.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.IdRefMetadata">
                  <code>IdRefMetadata</code>
               </link> - 
Metadata for the verified id of another component managed by the Blueprint
 Container.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.MapEntry">
                  <code>MapEntry</code>
               </link> - 
Metadata for a map entry.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.MapMetadata">
                  <code>MapMetadata</code>
               </link> - 
Metadata for a Map based value.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.Metadata">
                  <code>Metadata</code>
               </link> - 
Top level Metadata type.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.NonNullMetadata">
                  <code>NonNullMetadata</code>
               </link> - 
Metadata for a value that cannot <code>null</code>.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.NullMetadata">
                  <code>NullMetadata</code>
               </link> - 
Metadata for a value specified to be <code>null</code> via the &lt;null&gt;
 element.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.PropsMetadata">
                  <code>PropsMetadata</code>
               </link> - 
Metadata for a <code>java.util.Properties</code> based value.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.ReferenceListener">
                  <code>ReferenceListener</code>
               </link> - 
Metadata for a reference listener interested in the reference bind and unbind
 events for a service reference.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.ReferenceListMetadata">
                  <code>ReferenceListMetadata</code>
               </link> - 
Metadata for a list of service references.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.ReferenceMetadata">
                  <code>ReferenceMetadata</code>
               </link> - 
Metadata for a reference that will bind to a single matching service in the
 service registry.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.RefMetadata">
                  <code>RefMetadata</code>
               </link> - 
Metadata for a reference to another component managed by the Blueprint
 Container.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.RegistrationListener">
                  <code>RegistrationListener</code>
               </link> - 
Metadata for a registration listener interested in service registration and
 unregistration events for a service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.ServiceMetadata">
                  <code>ServiceMetadata</code>
               </link> - 
Metadata for a service to be registered by the Blueprint Container when
 enabled.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.ServiceReferenceMetadata">
                  <code>ServiceReferenceMetadata</code>
               </link> - 
Metadata for a reference to an OSGi service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.Target">
                  <code>Target</code>
               </link> - 
A common interface for managed components that can be used as a direct target
 for method calls.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.ValueMetadata">
                  <code>ValueMetadata</code>
               </link> - 
Metadata for a simple <code>String</code> value that will be type-converted if
 necessary before injecting.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="BeanArgument" xml:id="org.osgi.service.blueprint.reflect.BeanArgument">
      <title>public interface BeanArgument</title>
      <para>
Metadata for a factory method or constructor argument of a bean. The
 arguments of a bean are obtained from <link linkend="org.osgi.service.blueprint.reflect.BeanMetadata.getArguments--">BeanMetadata.getArguments()</link>.
 
 This is specified by the <code>argument</code> elements of a bean.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="getIndex()" xml:id="org.osgi.service.blueprint.reflect.BeanArgument.getIndex--">
         <title>public int getIndex()</title>
         <para role="description">
Return the zero-based index into the parameter list of the factory method
 or constructor to be invoked for this argument. This is determined by
 specifying the <code>index</code> attribute for the bean. If not explicitly
 set, this will return -1 and the initial ordering is defined by its
 position in the <link linkend="org.osgi.service.blueprint.reflect.BeanMetadata.getArguments--">BeanMetadata.getArguments()</link> list.
 
 This is specified by the <code>index</code> attribute.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The zero-based index of the parameter, or -1 if no index is
         specified.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getValue()" xml:id="org.osgi.service.blueprint.reflect.BeanArgument.getValue--">
         <title>public Metadata getValue()</title>
         <para role="description">
Return the Metadata for the argument value.
 
 This is specified by the <code>value</code> attribute.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Metadata for the argument value.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getValueType()" xml:id="org.osgi.service.blueprint.reflect.BeanArgument.getValueType--">
         <title>public String getValueType()</title>
         <para role="description">
Return the name of the value type to match the argument and convert the
 value into when invoking the constructor or factory method.
 
 This is specified by the <code>type</code> attribute.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of the value type to convert the value into, or
         <code>null</code> if no type is specified.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="BeanMetadata" xml:id="org.osgi.service.blueprint.reflect.BeanMetadata">
      <title>public interface BeanMetadata<?line-break?> extends Target, ComponentMetadata</title>
      <para>
Metadata for a Bean component.
 
 </para>
      <para>
 This is specified by the <code>bean</code> element.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="SCOPE_PROTOTYPE" xml:id="org.osgi.service.blueprint.reflect.BeanMetadata.SCOPE_PROTOTYPE">
         <title>public static final String SCOPE_PROTOTYPE = "prototype"</title>
         <para>
The bean has <code>prototype</code> scope.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.BeanMetadata.getScope--">getScope()</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SCOPE_SINGLETON" xml:id="org.osgi.service.blueprint.reflect.BeanMetadata.SCOPE_SINGLETON">
         <title>public static final String SCOPE_SINGLETON = "singleton"</title>
         <para>
The bean has <code>singleton</code> scope.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.BeanMetadata.getScope--">getScope()</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getArguments()" xml:id="org.osgi.service.blueprint.reflect.BeanMetadata.getArguments--">
         <title>public List&lt;BeanArgument&gt; getArguments()</title>
         <para role="description">
Return the arguments for the factory method or constructor of the bean.
 
 This is specified by the child <code>argument</code> elements.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An immutable List of <link linkend="org.osgi.service.blueprint.reflect.BeanArgument">BeanArgument</link> objects for the factory
         method or constructor of the bean. The List is empty if no
         arguments are specified for the bean.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getClassName()" xml:id="org.osgi.service.blueprint.reflect.BeanMetadata.getClassName--">
         <title>public String getClassName()</title>
         <para role="description">
Return the name of the class specified for the bean.
 
 This is specified by the <code>class</code> attribute of the bean definition.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of the class specified for the bean. If no class is
         specified in the bean definition, because the a factory component
         is used instead, then this method will return <code>null</code>.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getDestroyMethod()" xml:id="org.osgi.service.blueprint.reflect.BeanMetadata.getDestroyMethod--">
         <title>public String getDestroyMethod()</title>
         <para role="description">
Return the name of the destroy method specified for the bean.
 
 This is specified by the <code>destroy-method</code> attribute of the bean
 definition.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of the destroy method specified for the bean, or
         <code>null</code> if no destroy method is specified.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFactoryComponent()" xml:id="org.osgi.service.blueprint.reflect.BeanMetadata.getFactoryComponent--">
         <title>public Target getFactoryComponent()</title>
         <para role="description">
Return the Metadata for the factory component on which to invoke the
 factory method for the bean.
 
 This is specified by the <code>factory-ref</code> attribute of the bean.
 
 </para>
         <para>
 When a factory method and factory component have been specified for the
 bean, this method returns the factory component on which to invoke the
 factory method for the bean. When no factory component has been specified
 this method will return <code>null</code>.
 
 When a factory method has been specified for the bean but a factory
 component has not been specified, the factory method must be invoked as a
 static method on the bean's class.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Metadata for the factory component on which to invoke the
         factory method for the bean or <code>null</code> if no factory
         component is specified.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFactoryMethod()" xml:id="org.osgi.service.blueprint.reflect.BeanMetadata.getFactoryMethod--">
         <title>public String getFactoryMethod()</title>
         <para role="description">
Return the name of the factory method for the bean.
 
 This is specified by the <code>factory-method</code> attribute of the bean.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of the factory method of the bean or <code>null</code> if no
         factory method is specified for the bean.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getInitMethod()" xml:id="org.osgi.service.blueprint.reflect.BeanMetadata.getInitMethod--">
         <title>public String getInitMethod()</title>
         <para role="description">
Return the name of the init method specified for the bean.
 
 This is specified by the <code>init-method</code> attribute of the bean
 definition.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of the init method specified for the bean, or
         <code>null</code> if no init method is specified.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getProperties()" xml:id="org.osgi.service.blueprint.reflect.BeanMetadata.getProperties--">
         <title>public List&lt;BeanProperty&gt; getProperties()</title>
         <para role="description">
Return the properties for the bean.
 
 This is specified by the child <code>property</code> elements.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An immutable List of <link linkend="org.osgi.service.blueprint.reflect.BeanProperty">BeanProperty</link> objects, with one entry
         for each property to be injected in the bean. The List is empty
         if no property injection is specified for the bean.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getScope()" xml:id="org.osgi.service.blueprint.reflect.BeanMetadata.getScope--">
         <title>public String getScope()</title>
         <para role="description">
Return the scope for the bean.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The scope for the bean. Returns <code>null</code> if the scope has not
         been explicitly specified in the bean definition.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.BeanMetadata.SCOPE_SINGLETON">SCOPE_SINGLETON</link>, <link linkend="org.osgi.service.blueprint.reflect.BeanMetadata.SCOPE_PROTOTYPE">SCOPE_PROTOTYPE</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="BeanProperty" xml:id="org.osgi.service.blueprint.reflect.BeanProperty">
      <title>public interface BeanProperty</title>
      <para>
Metadata for a property to be injected into a bean. The properties of a bean
 are obtained from <link linkend="org.osgi.service.blueprint.reflect.BeanMetadata.getProperties--">BeanMetadata.getProperties()</link>.
 
 This is specified by the <code>property</code> elements of a bean. Properties are
 defined according to the Java Beans conventions.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="getName()" xml:id="org.osgi.service.blueprint.reflect.BeanProperty.getName--">
         <title>public String getName()</title>
         <para role="description">
Return the name of the property to be injected. The name follows Java
 Beans conventions.
 
 This is specified by the <code>name</code> attribute.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of the property to be injected.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getValue()" xml:id="org.osgi.service.blueprint.reflect.BeanProperty.getValue--">
         <title>public Metadata getValue()</title>
         <para role="description">
Return the Metadata for the value to be injected into a bean.
 
 This is specified by the <code>value</code> attribute or in inlined text.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Metadata for the value to be injected into a bean.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="CollectionMetadata" xml:id="org.osgi.service.blueprint.reflect.CollectionMetadata">
      <title>public interface CollectionMetadata<?line-break?> extends NonNullMetadata</title>
      <para>
Metadata for a collection based value. Values of the collection are defined
 by Metadata objects. This Collection Metadata can constrain the values of the
 collection to a specific type.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="getCollectionClass()" xml:id="org.osgi.service.blueprint.reflect.CollectionMetadata.getCollectionClass--">
         <title>public Class&lt;?&gt; getCollectionClass()</title>
         <para role="description">
Return the type of the collection.
 
 The possible types are: array (<code>Object[]</code>), <code>Set</code>, and
 <code>List</code>. This information is specified in the element name.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The type of the collection. <code>Object[]</code> is returned to
         indicate an array.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getValues()" xml:id="org.osgi.service.blueprint.reflect.CollectionMetadata.getValues--">
         <title>public List&lt;Metadata&gt; getValues()</title>
         <para role="description">
Return Metadata for the values of the collection.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A List of Metadata for the values of the collection.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getValueType()" xml:id="org.osgi.service.blueprint.reflect.CollectionMetadata.getValueType--">
         <title>public String getValueType()</title>
         <para role="description">
Return the type specified for the values of the collection.
 
 The <code>value-type</code> attribute specified this information.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The type specified for the values of the collection.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ComponentMetadata" xml:id="org.osgi.service.blueprint.reflect.ComponentMetadata">
      <title>public interface ComponentMetadata<?line-break?> extends NonNullMetadata</title>
      <para>
Metadata for managed components. This is the base type for
 <link linkend="org.osgi.service.blueprint.reflect.BeanMetadata">BeanMetadata</link>, <link linkend="org.osgi.service.blueprint.reflect.ServiceMetadata">ServiceMetadata</link> and
 <link linkend="org.osgi.service.blueprint.reflect.ServiceReferenceMetadata">ServiceReferenceMetadata</link>.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="ACTIVATION_EAGER" xml:id="org.osgi.service.blueprint.reflect.ComponentMetadata.ACTIVATION_EAGER">
         <title>public static final int ACTIVATION_EAGER = 1</title>
         <para>
The component's manager must eagerly activate the component.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.ComponentMetadata.getActivation--">getActivation()</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="ACTIVATION_LAZY" xml:id="org.osgi.service.blueprint.reflect.ComponentMetadata.ACTIVATION_LAZY">
         <title>public static final int ACTIVATION_LAZY = 2</title>
         <para>
The component's manager must lazily activate the component.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.ComponentMetadata.getActivation--">getActivation()</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getActivation()" xml:id="org.osgi.service.blueprint.reflect.ComponentMetadata.getActivation--">
         <title>public int getActivation()</title>
         <para role="description">
Return the activation strategy for the component.
 
 This is specified by the <code>activation</code> attribute of a component
 definition. If this is not set, then the <code>default-activation</code> in
 the <code>blueprint</code> element is used. If that is also not set, then the
 activation strategy is <link linkend="org.osgi.service.blueprint.reflect.ComponentMetadata.ACTIVATION_EAGER">ACTIVATION_EAGER</link>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The activation strategy for the component.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.ComponentMetadata.ACTIVATION_EAGER">ACTIVATION_EAGER</link>, <link linkend="org.osgi.service.blueprint.reflect.ComponentMetadata.ACTIVATION_LAZY">ACTIVATION_LAZY</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getDependsOn()" xml:id="org.osgi.service.blueprint.reflect.ComponentMetadata.getDependsOn--">
         <title>public List&lt;String&gt; getDependsOn()</title>
         <para role="description">
Return the ids of any components listed in a <code>depends-on</code> attribute
 for the component.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An immutable List of component ids that are explicitly declared
         as a dependency, or an empty List if none.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getId()" xml:id="org.osgi.service.blueprint.reflect.ComponentMetadata.getId--">
         <title>public String getId()</title>
         <para role="description">
Return the id of the component.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The id of the component. The component id can be <code>null</code> if
         this is an anonymously defined and/or inlined component.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="IdRefMetadata" xml:id="org.osgi.service.blueprint.reflect.IdRefMetadata">
      <title>public interface IdRefMetadata<?line-break?> extends NonNullMetadata</title>
      <para>
Metadata for the verified id of another component managed by the Blueprint
 Container. The id itself will be injected, not the component to which the id
 refers. No implicit dependency is created.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="getComponentId()" xml:id="org.osgi.service.blueprint.reflect.IdRefMetadata.getComponentId--">
         <title>public String getComponentId()</title>
         <para role="description">
Return the id of the referenced component.
 
 This is specified by the <code>component-id</code> attribute of a component.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The id of the referenced component.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="MapEntry" xml:id="org.osgi.service.blueprint.reflect.MapEntry">
      <title>public interface MapEntry</title>
      <para>
Metadata for a map entry.
 
 This type is used by <link linkend="org.osgi.service.blueprint.reflect.MapMetadata">MapMetadata</link>, <link linkend="org.osgi.service.blueprint.reflect.PropsMetadata">PropsMetadata</link> and
 <link linkend="org.osgi.service.blueprint.reflect.ServiceMetadata">ServiceMetadata</link>.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="getKey()" xml:id="org.osgi.service.blueprint.reflect.MapEntry.getKey--">
         <title>public NonNullMetadata getKey()</title>
         <para role="description">
Return the Metadata for the key of the map entry.
 
 This is specified by the <code>key</code> attribute or element.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Metadata for the key of the map entry. This must not be
         <code>null</code>.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getValue()" xml:id="org.osgi.service.blueprint.reflect.MapEntry.getValue--">
         <title>public Metadata getValue()</title>
         <para role="description">
Return the Metadata for the value of the map entry.
 
 This is specified by the <code>value</code> attribute or element.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Metadata for the value of the map entry. This must not be
         <code>null</code>.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="MapMetadata" xml:id="org.osgi.service.blueprint.reflect.MapMetadata">
      <title>public interface MapMetadata<?line-break?> extends NonNullMetadata</title>
      <para>
Metadata for a Map based value.
 
 </para>
      <para>
 This is specified by the <code>map</code> element.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="getEntries()" xml:id="org.osgi.service.blueprint.reflect.MapMetadata.getEntries--">
         <title>public List&lt;MapEntry&gt; getEntries()</title>
         <para role="description">
Return the entries for the map.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An immutable List of <link linkend="org.osgi.service.blueprint.reflect.MapEntry">MapEntry</link> objects for each entry in
         the map. The List is empty if no entries are specified for the
         map.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getKeyType()" xml:id="org.osgi.service.blueprint.reflect.MapMetadata.getKeyType--">
         <title>public String getKeyType()</title>
         <para role="description">
Return the name of the type of the map keys.
 
 This is specified by the <code>key-type</code> attribute of the map.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of the type of the map keys, or <code>null</code> if none is
         specified.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getValueType()" xml:id="org.osgi.service.blueprint.reflect.MapMetadata.getValueType--">
         <title>public String getValueType()</title>
         <para role="description">
Return the name of the type of the map values.
 
 This is specified by the <code>value-type</code> attribute of the map.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of the type of the map values, or <code>null</code> if none
         is specified.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Metadata" xml:id="org.osgi.service.blueprint.reflect.Metadata">
      <title>public interface Metadata</title>
      <para>
Top level Metadata type. All Metadata types extends this base type.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
   </section>
   <section role="class" xreflabel="NonNullMetadata" xml:id="org.osgi.service.blueprint.reflect.NonNullMetadata">
      <title>public interface NonNullMetadata<?line-break?> extends Metadata</title>
      <para>
Metadata for a value that cannot <code>null</code>. All Metadata subtypes extend
 this type except for <link linkend="org.osgi.service.blueprint.reflect.NullMetadata">NullMetadata</link>.
 
 </para>
      <para>
 This Metadata type is used for keys in Maps because they cannot be
 <code>null</code>.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
   </section>
   <section role="class" xreflabel="NullMetadata" xml:id="org.osgi.service.blueprint.reflect.NullMetadata">
      <title>public interface NullMetadata<?line-break?> extends Metadata</title>
      <para>
Metadata for a value specified to be <code>null</code> via the &lt;null&gt;
 element.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="NULL" xml:id="org.osgi.service.blueprint.reflect.NullMetadata.NULL">
         <title>public static final NullMetadata NULL</title>
         <para>
Singleton instance of <code>NullMetadata</code>.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="PropsMetadata" xml:id="org.osgi.service.blueprint.reflect.PropsMetadata">
      <title>public interface PropsMetadata<?line-break?> extends NonNullMetadata</title>
      <para>
Metadata for a <code>java.util.Properties</code> based value.
 
 </para>
      <para>
 The <link linkend="org.osgi.service.blueprint.reflect.MapEntry">MapEntry</link> objects of properties are defined with keys and values
 of type <code>String</code>.
 
 </para>
      <para>
 This is specified by the <code>props</code> element.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="getEntries()" xml:id="org.osgi.service.blueprint.reflect.PropsMetadata.getEntries--">
         <title>public List&lt;MapEntry&gt; getEntries()</title>
         <para role="description">
Return the entries for the properties.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An immutable List of <link linkend="org.osgi.service.blueprint.reflect.MapEntry">MapEntry</link> objects for each entry in
         the properties. The List is empty if no entries are specified for
         the properties.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ReferenceListener" xml:id="org.osgi.service.blueprint.reflect.ReferenceListener">
      <title>public interface ReferenceListener</title>
      <para>
Metadata for a reference listener interested in the reference bind and unbind
 events for a service reference.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="getBindMethod()" xml:id="org.osgi.service.blueprint.reflect.ReferenceListener.getBindMethod--">
         <title>public String getBindMethod()</title>
         <para role="description">
Return the name of the bind method. The bind method will be invoked when
 a matching service is bound to the reference.
 
 This is specified by the <code>bind-method</code> attribute of the reference
 listener.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of the bind method.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getListenerComponent()" xml:id="org.osgi.service.blueprint.reflect.ReferenceListener.getListenerComponent--">
         <title>public Target getListenerComponent()</title>
         <para role="description">
Return the Metadata for the component that will receive bind and unbind
 events.
 
 This is specified by the <code>ref</code> attribute or via an inlined
 component.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Metadata for the component that will receive bind and unbind
         events.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getUnbindMethod()" xml:id="org.osgi.service.blueprint.reflect.ReferenceListener.getUnbindMethod--">
         <title>public String getUnbindMethod()</title>
         <para role="description">
Return the name of the unbind method. The unbind method will be invoked
 when a matching service is unbound from the reference.
 
 This is specified by the <code>unbind-method</code> attribute of the reference
 listener.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of the unbind method.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ReferenceListMetadata" xml:id="org.osgi.service.blueprint.reflect.ReferenceListMetadata">
      <title>public interface ReferenceListMetadata<?line-break?> extends ServiceReferenceMetadata</title>
      <para>
Metadata for a list of service references.
 
 </para>
      <para>
 This is specified by the <code>reference-list</code> element.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="USE_SERVICE_OBJECT" xml:id="org.osgi.service.blueprint.reflect.ReferenceListMetadata.USE_SERVICE_OBJECT">
         <title>public static final int USE_SERVICE_OBJECT = 1</title>
         <para>
Reference list values must be proxies to the actual service objects.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.ReferenceListMetadata.getMemberType--">getMemberType()</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="USE_SERVICE_REFERENCE" xml:id="org.osgi.service.blueprint.reflect.ReferenceListMetadata.USE_SERVICE_REFERENCE">
         <title>public static final int USE_SERVICE_REFERENCE = 2</title>
         <para>
Reference list values must be <code>ServiceReference</code> objects.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.ReferenceListMetadata.getMemberType--">getMemberType()</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMemberType()" xml:id="org.osgi.service.blueprint.reflect.ReferenceListMetadata.getMemberType--">
         <title>public int getMemberType()</title>
         <para role="description">
Return whether the List will contain service object proxies or
 <code>ServiceReference</code> objects.
 
 This is specified by the <code>member-type</code> attribute of the reference
 list.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Whether the List will contain service object proxies or
         <code>ServiceReference</code> objects.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.ReferenceListMetadata.USE_SERVICE_OBJECT">USE_SERVICE_OBJECT</link>, <link linkend="org.osgi.service.blueprint.reflect.ReferenceListMetadata.USE_SERVICE_REFERENCE">USE_SERVICE_REFERENCE</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ReferenceMetadata" xml:id="org.osgi.service.blueprint.reflect.ReferenceMetadata">
      <title>public interface ReferenceMetadata<?line-break?> extends Target, ServiceReferenceMetadata</title>
      <para>
Metadata for a reference that will bind to a single matching service in the
 service registry.
 
 </para>
      <para>
 This is specified by the <code>reference</code> element.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="getTimeout()" xml:id="org.osgi.service.blueprint.reflect.ReferenceMetadata.getTimeout--">
         <title>public long getTimeout()</title>
         <para role="description">
Return the timeout for service invocations when a backing service is
 unavailable.
 
 This is specified by the <code>timeout</code> attribute of the reference.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The timeout, in milliseconds, for service invocations when a
         backing service is unavailable.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="RefMetadata" xml:id="org.osgi.service.blueprint.reflect.RefMetadata">
      <title>public interface RefMetadata<?line-break?> extends Target, NonNullMetadata</title>
      <para>
Metadata for a reference to another component managed by the Blueprint
 Container.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="getComponentId()" xml:id="org.osgi.service.blueprint.reflect.RefMetadata.getComponentId--">
         <title>public String getComponentId()</title>
         <para role="description">
Return the id of the referenced component.
 
 This is specified by the <code>component-id</code> attribute of a component.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The id of the referenced component.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="RegistrationListener" xml:id="org.osgi.service.blueprint.reflect.RegistrationListener">
      <title>public interface RegistrationListener</title>
      <para>
Metadata for a registration listener interested in service registration and
 unregistration events for a service.
 
 </para>
      <para>
 The registration listener is called with the initial state of the service
 when the registration listener is actuated.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="getListenerComponent()" xml:id="org.osgi.service.blueprint.reflect.RegistrationListener.getListenerComponent--">
         <title>public Target getListenerComponent()</title>
         <para role="description">
Return the Metadata for the component that will receive registration and
 unregistration events.
 
 This is specified by the <code>ref</code> attribute or via an inlined
 component.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Metadata for the component that will receive registration and
         unregistration events.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRegistrationMethod()" xml:id="org.osgi.service.blueprint.reflect.RegistrationListener.getRegistrationMethod--">
         <title>public String getRegistrationMethod()</title>
         <para role="description">
Return the name of the registration method. The registration method will
 be invoked when the associated service is registered with the service
 registry.
 
 This is specified by the <code>registration-method</code> attribute of the
 registration listener.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of the registration method.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getUnregistrationMethod()" xml:id="org.osgi.service.blueprint.reflect.RegistrationListener.getUnregistrationMethod--">
         <title>public String getUnregistrationMethod()</title>
         <para role="description">
Return the name of the unregistration method. The unregistration method
 will be invoked when the associated service is unregistered from the
 service registry.
 
 This is specified by the <code>unregistration-method</code> attribute of the
 registration listener.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of the unregistration method.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ServiceMetadata" xml:id="org.osgi.service.blueprint.reflect.ServiceMetadata">
      <title>public interface ServiceMetadata<?line-break?> extends ComponentMetadata</title>
      <para>
Metadata for a service to be registered by the Blueprint Container when
 enabled.
 
 </para>
      <para>
 This is specified by the <code>service</code> element.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="AUTO_EXPORT_ALL_CLASSES" xml:id="org.osgi.service.blueprint.reflect.ServiceMetadata.AUTO_EXPORT_ALL_CLASSES">
         <title>public static final int AUTO_EXPORT_ALL_CLASSES = 4</title>
         <para>
Advertise all Java classes and interfaces in the component instance type
 as service interfaces.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.ServiceMetadata.getAutoExport--">getAutoExport()</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="AUTO_EXPORT_CLASS_HIERARCHY" xml:id="org.osgi.service.blueprint.reflect.ServiceMetadata.AUTO_EXPORT_CLASS_HIERARCHY">
         <title>public static final int AUTO_EXPORT_CLASS_HIERARCHY = 3</title>
         <para>
Advertise all Java classes in the hierarchy of the component instance
 type as service interfaces.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.ServiceMetadata.getAutoExport--">getAutoExport()</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="AUTO_EXPORT_DISABLED" xml:id="org.osgi.service.blueprint.reflect.ServiceMetadata.AUTO_EXPORT_DISABLED">
         <title>public static final int AUTO_EXPORT_DISABLED = 1</title>
         <para>
Do not auto-detect types for advertised service interfaces
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.ServiceMetadata.getAutoExport--">getAutoExport()</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="AUTO_EXPORT_INTERFACES" xml:id="org.osgi.service.blueprint.reflect.ServiceMetadata.AUTO_EXPORT_INTERFACES">
         <title>public static final int AUTO_EXPORT_INTERFACES = 2</title>
         <para>
Advertise all Java interfaces implemented by the component instance type
 as service interfaces.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.ServiceMetadata.getAutoExport--">getAutoExport()</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getAutoExport()" xml:id="org.osgi.service.blueprint.reflect.ServiceMetadata.getAutoExport--">
         <title>public int getAutoExport()</title>
         <para role="description">
Return the auto-export mode for the service.
 
 This is specified by the <code>auto-export</code> attribute of the service.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The auto-export mode for the service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.ServiceMetadata.AUTO_EXPORT_DISABLED">AUTO_EXPORT_DISABLED</link>, <link linkend="org.osgi.service.blueprint.reflect.ServiceMetadata.AUTO_EXPORT_INTERFACES">AUTO_EXPORT_INTERFACES</link>, <link linkend="org.osgi.service.blueprint.reflect.ServiceMetadata.AUTO_EXPORT_CLASS_HIERARCHY">AUTO_EXPORT_CLASS_HIERARCHY</link>, <link linkend="org.osgi.service.blueprint.reflect.ServiceMetadata.AUTO_EXPORT_ALL_CLASSES">AUTO_EXPORT_ALL_CLASSES</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getInterfaces()" xml:id="org.osgi.service.blueprint.reflect.ServiceMetadata.getInterfaces--">
         <title>public List&lt;String&gt; getInterfaces()</title>
         <para role="description">
Return the type names of the interfaces that the service should be
 advertised as supporting.
 
 This is specified in the <code>interface</code> attribute or child
 <code>interfaces</code> element of the service.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An immutable List of <code>String</code> for the type names of the
         interfaces that the service should be advertised as supporting.
         The List is empty if using <code>auto-export</code> or no interface
         names are specified for the service.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRanking()" xml:id="org.osgi.service.blueprint.reflect.ServiceMetadata.getRanking--">
         <title>public int getRanking()</title>
         <para role="description">
Return the ranking value to use when advertising the service. If the
 ranking value is zero, the service must be registered without a
 <code>service.ranking</code> service property.
 
 This is specified by the <code>ranking</code> attribute of the service.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The ranking value to use when advertising the service.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRegistrationListeners()" xml:id="org.osgi.service.blueprint.reflect.ServiceMetadata.getRegistrationListeners--">
         <title>public Collection&lt;RegistrationListener&gt; getRegistrationListeners()</title>
         <para role="description">
Return the registration listeners to be notified when the service is
 registered and unregistered with the framework.
 
 This is specified by the <code>registration-listener</code> elements of the
 service.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An immutable Collection of <link linkend="org.osgi.service.blueprint.reflect.RegistrationListener">RegistrationListener</link> objects
         to be notified when the service is registered and unregistered
         with the framework. The Collection is empty if no registration
         listeners are specified for the service.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getServiceComponent()" xml:id="org.osgi.service.blueprint.reflect.ServiceMetadata.getServiceComponent--">
         <title>public Target getServiceComponent()</title>
         <para role="description">
Return the Metadata for the component to be exported as a service.
 
 This is specified inline or via the <code>ref</code> attribute of the service.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Metadata for the component to be exported as a service.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getServiceProperties()" xml:id="org.osgi.service.blueprint.reflect.ServiceMetadata.getServiceProperties--">
         <title>public List&lt;MapEntry&gt; getServiceProperties()</title>
         <para role="description">
Return the user declared properties to be advertised with the service.
 
 This is specified by the <code>service-properties</code> element of the
 service.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An immutable List of <link linkend="org.osgi.service.blueprint.reflect.MapEntry">MapEntry</link> objects for the user
         declared properties to be advertised with the service. The List
         is empty if no service properties are specified for the service.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ServiceReferenceMetadata" xml:id="org.osgi.service.blueprint.reflect.ServiceReferenceMetadata">
      <title>public interface ServiceReferenceMetadata<?line-break?> extends ComponentMetadata</title>
      <para>
Metadata for a reference to an OSGi service. This is the base type for
 <link linkend="org.osgi.service.blueprint.reflect.ReferenceListMetadata">ReferenceListMetadata</link> and <link linkend="org.osgi.service.blueprint.reflect.ReferenceMetadata">ReferenceMetadata</link>.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="AVAILABILITY_MANDATORY" xml:id="org.osgi.service.blueprint.reflect.ServiceReferenceMetadata.AVAILABILITY_MANDATORY">
         <title>public static final int AVAILABILITY_MANDATORY = 1</title>
         <para>
A matching service is required at all times.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.ServiceReferenceMetadata.getAvailability--">getAvailability()</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="AVAILABILITY_OPTIONAL" xml:id="org.osgi.service.blueprint.reflect.ServiceReferenceMetadata.AVAILABILITY_OPTIONAL">
         <title>public static final int AVAILABILITY_OPTIONAL = 2</title>
         <para>
A matching service is not required to be present.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.ServiceReferenceMetadata.getAvailability--">getAvailability()</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getAvailability()" xml:id="org.osgi.service.blueprint.reflect.ServiceReferenceMetadata.getAvailability--">
         <title>public int getAvailability()</title>
         <para role="description">
Return whether or not a matching service is required at all times.
 
 This is specified in the <code>availability</code> attribute of the service
 reference.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Whether or not a matching service is required at all times.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.blueprint.reflect.ServiceReferenceMetadata.AVAILABILITY_MANDATORY">AVAILABILITY_MANDATORY</link>, <link linkend="org.osgi.service.blueprint.reflect.ServiceReferenceMetadata.AVAILABILITY_OPTIONAL">AVAILABILITY_OPTIONAL</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getComponentName()" xml:id="org.osgi.service.blueprint.reflect.ServiceReferenceMetadata.getComponentName--">
         <title>public String getComponentName()</title>
         <para role="description">
Return the value of the <code>component-name</code> attribute of the service
 reference. This specifies the id of a component that is registered in the
 service registry. This will create an automatic filter, appended with the
 filter if set, to select this component based on its automatic <code>id</code>
 attribute.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The value of the <code>component-name</code> attribute of the service
         reference or <code>null</code> if the attribute is not specified.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFilter()" xml:id="org.osgi.service.blueprint.reflect.ServiceReferenceMetadata.getFilter--">
         <title>public String getFilter()</title>
         <para role="description">
Return the filter expression that a matching service must match.
 
 This is specified by the <code>filter</code> attribute of the service
 reference.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The filter expression that a matching service must match or
         <code>null</code> if a filter is not specified.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getInterface()" xml:id="org.osgi.service.blueprint.reflect.ServiceReferenceMetadata.getInterface--">
         <title>public String getInterface()</title>
         <para role="description">
Return the name of the interface type that a matching service must
 support.
 
 This is specified in the <code>interface</code> attribute of the service
 reference.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of the interface type that a matching service must
         support or <code>null</code> when no interface name is specified.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getReferenceListeners()" xml:id="org.osgi.service.blueprint.reflect.ServiceReferenceMetadata.getReferenceListeners--">
         <title>public Collection&lt;ReferenceListener&gt; getReferenceListeners()</title>
         <para role="description">
Return the reference listeners to receive bind and unbind events.
 
 This is specified by the <code>reference-listener</code> elements of the
 service reference.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An immutable Collection of <link linkend="org.osgi.service.blueprint.reflect.ReferenceListener">ReferenceListener</link> objects to
         receive bind and unbind events. The Collection is empty if no
         reference listeners are specified for the service reference.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Target" xml:id="org.osgi.service.blueprint.reflect.Target">
      <title>public interface Target<?line-break?> extends NonNullMetadata</title>
      <para>
A common interface for managed components that can be used as a direct target
 for method calls. These are <code>bean</code>, <code>reference</code>, and <code>ref</code>,
 where the <code>ref</code> must refer to a bean or reference component.
   </para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.blueprint.reflect.BeanMetadata">BeanMetadata</link>, <link linkend="org.osgi.service.blueprint.reflect.ReferenceMetadata">ReferenceMetadata</link>, <link linkend="org.osgi.service.blueprint.reflect.RefMetadata">RefMetadata</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
   </section>
   <section role="class" xreflabel="ValueMetadata" xml:id="org.osgi.service.blueprint.reflect.ValueMetadata">
      <title>public interface ValueMetadata<?line-break?> extends NonNullMetadata</title>
      <para>
Metadata for a simple <code>String</code> value that will be type-converted if
 necessary before injecting.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="getStringValue()" xml:id="org.osgi.service.blueprint.reflect.ValueMetadata.getStringValue--">
         <title>public String getStringValue()</title>
         <para role="description">
Return the unconverted string representation of the value.
 
 This is specified by the <code>value</code> attribute or text part of the
 <code>value</code> element.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The unconverted string representation of the value.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.blueprint.reflect.ValueMetadata.getType--">
         <title>public String getType()</title>
         <para role="description">
Return the name of the type to which the value should be converted.
 
 This is specified by the <code>type</code> attribute.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of the type to which the value should be converted or
         <code>null</code> if no type is specified.</para>
         </formalpara>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i1954805"><title>Spring
      Framework</title>http://www.springsource.org/</bibliomixed>

      <bibliomixed xml:id="i1954997"><title>Spring Dynamic
      Modules</title>http://www.springsource.org/osgi</bibliomixed>

      <bibliomixed xml:id="i1954924"><title>Guice</title>http://code.google.com/p/google-guice/</bibliomixed>

      <bibliomixed xml:id="i1954940"><title>Picocontainer</title>http://www.picocontainer.org/</bibliomixed>

      <bibliomixed xml:id="i1704220"><title>Java Beans
      Specification</title>http://www.oracle.com/technetwork/java/javase/tech/index-jsp-138795.html</bibliomixed>

      <bibliomixed xml:id="i1807860"><title>XML
      Namespaces</title>http://www.w3.org/TR/REC-xml-names</bibliomixed>

      <bibliomixed><title>Properties
      format</title>http://docs.oracle.com/javase/1.4.2/docs/api/java/util/Properties.html#load%28java.io.InputStream%29</bibliomixed>

      <bibliomixed xml:id="i2584676"><title>XML
      Schema</title>http://www.w3.org/XML/Schema</bibliomixed>

      <bibliomixed xml:id="i2930811"><title>OSGi XML
      Schemas</title>http://www.osgi.org/Specifications/HomePage</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="122" revision="$Id: a2768257353f0f0f4970615322f778083cfbfa88 $" version="5" xml:id="service.remoteserviceadmin" xml:base="../122/service.remoteserviceadmin.xml">
  <title>Remote Service Admin Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.remoteserviceadmin-version" linkend="org.osgi.service.remoteserviceadmin"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The <xref linkend="intro.core.release" xrefstyle="template:%t"/>
    framework specifies a model where bundles can use distributed services.
    The basic model for OSGi remote services is that a bundle can register
    services that are <emphasis>exported</emphasis> to a communication
    <emphasis>Endpoint</emphasis> and use services that are
    <emphasis>imported</emphasis> from a communication Endpoint. However,
    chapter <xref linkend="service.remoteservices"/> does not explain
    <emphasis>what</emphasis> services are exported and/or imported; it leaves
    such decisions to the distribution provider. The distribution provider
    therefore performs multiple roles and cannot be leveraged by other bundles
    in scenarios that the distribution provider had not foreseen.</para>

    <para>The primary role of the distribution provider is purely mechanical;
    it creates Endpoints and registers service proxies and enables their
    communication. The second role is about the policies around the desired
    topology. The third role is discovery. To establish a specific topology it
    is necessary to find out about exported services in other
    frameworks.</para>

    <para>This specification therefore defines an API for the distribution
    provider and discovery of services in a network. A management agent can
    use this API to provide an actual distribution policy. This management
    agent, called the Topology Manager, can control the export and import of
    services delegating the intrinsic knowledge of the low level details of
    communication protocols, proxying of services, and discovering services in
    the network to services defined in this specification.</para>

    <para>This specification is an extension of the Remote Service chapter.
    Though some aspects are repeated in this specification, a full
    understanding of the Remote Services chapter is required for full
    understanding of this document.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Simple</emphasis> - Make it as simple as possible
          for a Topology Manager to implement distribution policies.</para>
        </listitem>

        <listitem>
          <para><emphasis>Dynamic</emphasis> - Discover available Endpoints
          dynamically, for example through a discovery protocol like <xref linkend="i1788834"/> or <xref linkend="i1789952"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Inform</emphasis> - Provide a mechanism to inform
          other parties about created and removed Endpoints.</para>
        </listitem>

        <listitem>
          <para><emphasis>Configuration</emphasis> - Allow bundles to describe
          Endpoints as a bundle resource that are provided to the Distribution
          Provider.</para>
        </listitem>

        <listitem>
          <para><emphasis>Selective</emphasis> - Not all parties are
          interested in all services. Endpoint registries must be able to
          express the scope of services they are interested in.</para>
        </listitem>

        <listitem>
          <para><emphasis>Multiple</emphasis> - Allow the collaboration of
          multiple Topology Managers, Remote Service Admin services, and
          Discovery Providers.</para>
        </listitem>

        <listitem>
          <para><emphasis>Dynamic</emphasis> - Allow the dynamic discovery of
          Endpoints.</para>
        </listitem>

        <listitem>
          <para><emphasis>Federated</emphasis> - Enable a global view of all
          available services in a distributed environment.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Remote Service Admin</emphasis> - An implementation
          of this specification provides the mechanisms to import and export
          services through a set of configuration types. The Remote Service
          Admin service is a passive Distribution Provider, not taking any
          action to export or import itself.</para>
        </listitem>

        <listitem>
          <para><emphasis>Topology Manager</emphasis> - The Topology Manager
          provides the policy for importing and exporting services through the
          Remote Service Admin service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Endpoint</emphasis> - An Endpoint is a
          communications access mechanism to a service in another framework, a
          (web) service, another process, or a queue or topic destination,
          etc., requiring some protocol for communications.</para>
        </listitem>

        <listitem>
          <para><emphasis>Endpoint Description</emphasis> - A properties based
          description of an Endpoint. Endpoint Descriptions can be exchanged
          between different frameworks to create connections to each other's
          services. Endpoint Descriptions can also be created to Endpoints not
          originating in an OSGi Framework.</para>
        </listitem>

        <listitem>
          <para><emphasis>Endpoint Description Provider</emphasis> - A party
          that can inform others about the existence of Endpoints.</para>
        </listitem>

        <listitem>
          <para><emphasis>Endpoint Event Listener</emphasis> – A listener
          service that receives events relating to Endpoints that match its
          scope. This Endpoint Event Listener is used symmetrically to
          implement a federated registry. The Topology Manager can use it to
          notify interested parties about created and removed Endpoints, as
          well as to receive notifications from other parties, potentially
          remote, about their available Endpoints.</para>
        </listitem>

        <listitem>
          <para><emphasis>Endpoint Listener</emphasis> – An older version of
          the Endpoint Event Listener defined by version <code>1.0</code> of
          this specification. The Endpoint Event Listener supersedes the
          Endpoint Listener, and should be used in preference where
          possible.</para>
        </listitem>

        <listitem>
          <para><emphasis>Remote Service Admin Listener</emphasis> - A
          listener service that is informed of all the primitive actions that
          the Remote Service Admin performs like importing and exporting as
          well as errors.</para>
        </listitem>

        <listitem>
          <para><emphasis>Endpoint Configuration Extender</emphasis> - A
          bundle that can detect configuration data describing an Endpoint
          Description in a bundle resource, using the extender pattern.</para>
        </listitem>

        <listitem>
          <para><emphasis>Discovery</emphasis> – An Endpoint Event Listener
          that detects the Endpoint Descriptions through some discovery
          protocol.</para>
        </listitem>

        <listitem>
          <para><emphasis>Cluster</emphasis> - A group of computing systems
          that closely work together, usually in a fast network.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1" xml:id="i1706087">
        <title>Remote Service Admin Entities</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.570in" contentwidth="7.000in" fileref="rsa-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Synopsis</title>

      <para>Topology Managers are responsible for the distribution policies of
      a OSGi framework. To implement a policy, a Topology Manager must be
      aware of the environment, for this reason, it can register:</para>

      <itemizedlist>
        <listitem>
          <para>Service listeners to detect services that can be exported
          according to the Remote Services chapter.</para>
        </listitem>

        <listitem>
          <para>Listener and Find Hook services to detect bundles that have an
          interest in specific services that potentially could be
          imported.</para>
        </listitem>

        <listitem>
          <para>A Remote Service Admin Listener service to detect the activity
          of other Topology Managers.</para>
        </listitem>

        <listitem>
          <para>Endpoint Event Listener and Endpoint Listener services to
          detect Endpoints that are made available through discovery
          protocols, configuration data, or other means.</para>
        </listitem>
      </itemizedlist>

      <para>Using this information, the manager implements a topology using
      the Remote Service Admin service. A Topology Manager that wants to
      export a service can create an <emphasis>Export Registration</emphasis>
      by providing one or more Remote Service Admin services a Service
      Reference plus a Map with the required properties. A Remote Service
      Admin service then creates a number of Endpoints based on the available
      configuration types and returns a collection of
      <code>ExportRegistration</code> objects. A collection is returned
      because a single service can be exported to multiple Endpoints depending
      on the available configuration type properties.</para>

      <para>Each Export Registration is specific for the caller and represents
      an existing or newly created Endpoint. The Export Registration
      associates the exported Service Reference with an <emphasis>Endpoint
      Description</emphasis>. If there are problems with the export operation,
      the Remote Service Admin service reports these on the Export
      Registration objects. That is, not all the returned Export Registrations
      have to be valid.</para>

      <para>An Endpoint Description is a property based description of an
      Endpoint. Some of these properties are defined in this specification,
      other properties are defined by configuration types. These configuration
      types must follow the same rules as the configuration types defined in
      the Remote Services chapter. Remote Service Admin services that support
      the configuration types in the Endpoint Description can import a service
      from that Endpoint solely based on that Endpoint Description.</para>

      <para>In similar vein, the Topology Manager can import a service from a
      remote system by creating an Import Registration out of an Endpoint
      Description. The Remote Service Admin service then registers a service
      that is a proxy for the remote Endpoint and returns an
      <code>ImportRegistration</code> object. If there are problems with the
      import, the Remote Service Admin service that cannot be detected early,
      then the Remote Service Admin service reports these on the returned
      <code>ImportRegistration</code> object.</para>

      <para>For introspection, the Remote Service Admin can list its current
      set of Import and Export References so that a Topology Manager can get
      the current state. The Remote Service Admin service also informs all
      Topology Managers and observers of the creation, deletion, and errors of
      Import and Export Registrations through the Remote Service Admin
      Listener service. Interested parties like the Topology Manager can
      register such a service and will be called back with the initial state
      as well as any subsequent changes.</para>

      <para>An important aspect of the Topology Manager is the distributed
      nature of the scenarios it plays an orchestrating role in. A Topology
      Manager needs to be aware of Endpoints in the network, not just the ones
      provided by Remote Service Admin services in its local framework. The
      Endpoint Event Listener service is specified for this purpose. This
      service is provided for both directions, symmetrically. That is, it is
      used by the Topology Manager to inform any observers about the existence
      of Endpoints that are locally available, as well as for parties that
      represent a discovery mechanism. For example Endpoints available on
      other systems, Endpoint Descriptions embedded in resources in bundles,
      or Endpoint Descriptions that are available in some other form.</para>

      <para>Endpoint Event Listener services are not always interested in the
      complete set of available Endpoints because this set can potentially be
      very large. For example, if a remote registry like <xref linkend="i1789020"/> is used then the number of Endpoints can run into
      the thousands or more. An Endpoint Event Listener service can therefore
      scope the set of Endpoints with an OSGi LDAP style filter. Parties that
      can provide information about Endpoints must only notify Endpoint Event
      Listener services when the Endpoint Description falls within the scope
      of the Endpoint Listener service. Parties that use some discovery
      mechanism can use the scope to trigger directed searches across the
      network.</para>

      <section>
        <title>Endpoint Listener Services</title>

        <para>The <code>1.0</code> version of this specification defined an
        Endpoint Listener service, which has an identical purpose and similar
        behaviors to an Endpoint Event Listener service. Unfortunately the
        design of the Endpoint Listener limited its extensibility, meaning
        that it had to be replaced in version <code>1.1</code> of this
        specification.</para>

        <para>In order to maintain backward compatible interoperability with
        Remote Service Admin <code>1.0</code> actors, Remote Service Admin
        <code>1.1</code> actors must continue to register Endpoint Listener
        services as well as Endpoint Event Listener services. They must also
        continue to call Endpoint Listener services as well as
        EndpointEventListener services.</para>
      </section>
    </section>
  </section>

  <section>
    <title>Actors</title>

    <para>The OSGi Remote Services specification is about the distribution of
    services. This specification does not outline the details of how the
    distribution provider knows the desired topology, this policy aspect is
    left up to implementations. In many situations, this is a desirable
    architecture because it provides freedom of implementation to the
    distribution provider. However, such an architecture does not enable a
    separation of the mechanisms and <emphasis>policy</emphasis>. Therefore,
    this Remote Service Admin specification provides an architecture that
    enables a separate bundle from the distribution provider to define the
    topology. It splits the responsibility of the Remote Service specification
    in a number of <emphasis>roles</emphasis>. These roles can all have
    different implementations but they can collaborate through the services
    defined in this specification. These roles are:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Topology Manager</emphasis>s - Topology Managers are
        the (anonymous) players that implement the policies for distributing
        services; they are closely aligned with the concept of an OSGi
        <emphasis>management agent</emphasis>. It is expected that Topology
        Managers will be developed for scenarios like import/export all
        applicable services, configuration based imports- and exports, and
        scenarios like fail-over, load-balancing, as well as standards like
        domain managers for the <xref linkend="i1789031"/>.</para>
      </listitem>

      <listitem>
        <para><emphasis>Remote Service Admin</emphasis> - The Remote Service
        Admin service provides the basic mechanism to import and export
        services. This service is policy free; it will not distribute services
        without explicitly being told so. A OSGi framework can host multiple
        Remote Service Admin services that, for example, support different
        configuration types.</para>
      </listitem>

      <listitem>
        <para><emphasis>Discovery</emphasis> - To implement a distribution
        policy, a Topology Manager must be aware of what Endpoints are
        available. This specification provides an abstraction of a
        <emphasis>federated Endpoint registry</emphasis>. This registry can be
        used to both publish as well as consume Endpoints from many different
        sources. The federated registry is defined for local services but is
        intended to be used with standard and proprietary service discovery
        protocols. The federated registry is implemented with the Endpoint
        Event Listener service.</para>
      </listitem>
    </itemizedlist>

    <para>These roles are depicted in <xref linkend="i1817848" xrefstyle="template:Figure %n on page %p"/>.</para>

    <figure xml:id="i1817848">
      <title>Roles</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.194in" contentwidth="6.240in" fileref="roles.svg"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section>
    <title>Topology Managers</title>

    <para>Distributed processing has become mainstream because of the massive
    scale required for Internet applications. Only with distributed
    architectures is it possible to scale systems to <emphasis>Internet
    size</emphasis> with hundreds of millions of users. To allow a system to
    scale, servers are grouped in clusters where they can work in unison or
    geographically dispersed in even larger configurations. The distribution
    of the work-load is crucial for the amount of scalability provided by an
    architecture and often has domain specific dispatching techniques. For
    example, the hash of a user id can be used to select the correct profile
    database server. In this fast moving world it is very unlikely that a
    single architecture or distribution policy would be sufficient to satisfy
    many users. It is therefore that this specification separates the
    <emphasis>how</emphasis> from the <emphasis>what</emphasis>. The complex
    mechanics of importing and exporting services are managed by a Remote
    Service Admin service (the how) while the different policies are
    implemented by Topology Managers (the what). This separation of concerns
    enables the development of Topology Managers that can run on many
    different systems, providing high user functionality. For example, a
    Topology Manager could implement a fail-over policy where some strategic
    services are redirected when their connections fail. Other Topology
    Managers could use a discovery protocol like SLP to find out about other
    systems in a cluster and automatically configure the cluster.</para>

    <para>The key value of this architecture is demonstrated by the example of
    an <emphasis>SCA domain controller</emphasis>. An SCA domain controller
    receives a description of a domain (a set of systems and modules) and must
    ensure that the proper connections are made between the participating SCA
    modules. By splitting the roles, an SCA domain manager can be developed
    that can run on any compatible Remote Service Admin service
    implementation.</para>

    <section xml:id="i1812921">
      <title>Multiple Topology Managers</title>

      <para>There is no restriction on the number of Topology Managers, nor is
      there a restriction on the number of Remote Service Admin service
      implementations. It is up to the deployer of the OSGi framework to
      select the appropriate set of these service implementations. It is the
      responsibility of the Topology Managers to listen to the Remote Service
      Admin Listener and track Endpoints created and deleted by other Topology
      Managers and act appropriately.</para>
    </section>

    <section xml:id="service.remoteserviceadmin-example.policies">
      <title>Example Use Cases</title>

      <section>
        <title>Promiscuous Policy</title>

        <para>A <emphasis>cluster</emphasis> is a set of machines that are
        connected in a network. The simplest policy for a Topology Manager is
        to share exported services in such a cluster. Such a policy is very
        easy to implement with the Remote Services Admin service. In the most
        basic form, this Topology Manager would use some multicast protocol to
        communicate with its peers. These peers would exchange
        <code>EndpointDescription</code> objects of exported services. Each
        Topology Manager would then import any exported service.</para>

        <para>This scenario can be improved by separating the promiscuous
        policy from the discovery. Instead of embedding the multicast
        protocol, a Topology manager could use the Endpoint Event Listener
        service. This service allows the discovery of remote services. At the
        same time, the Topology Manager could tell all other Endpoint Event
        Listener services about the services it has created, allowing them to
        be used by others in the network.</para>

        <para>Splitting the Topology Manager and discovery in two bundles
        allows different implementations of the discovery bundle, for example,
        to use different protocols. See <xref linkend="org.osgi.service.remoteserviceadmin.namespace.TopologyNamespace.PROMISCUOUS_POLICY" xrefstyle="hyperlink"/>.</para>
      </section>

      <section>
        <title>Fail Over</title>

        <para>A more elaborate scheme is a <emphasis>fail-over
        policy</emphasis>. In such a policy a service can be replaced by a
        service from another machine. There are many ways to implement such a
        policy, an simple example strategy is provided here for
        illustration.</para>

        <para>A Fail-Over Topology Manager is given a list of stateless
        services that require fail-over, for example through the <xref linkend="service.cm"/>. The Fail-Over Manager tracks the systems in
        the its cluster that provide such services. This tracking can use an
        embedded protocol or it can be based on the Endpoint Event Listener
        service model.</para>

        <para>In the Fail-Over policy, the fail-over manager only imports a
        single service and then tracks the error status of the imported
        service through the Remote Service Admin Listener service. If it
        detects the service is becoming unavailable, it closes the
        corresponding Import Registration and imports a service from an
        alternative system instead. In <xref linkend="i1819899"/>, there are 4
        systems in a cluster. The topology/fail-over manager ensures that
        there is always one of the services in system <code>A</code>, <code>
        B</code>, or <code>C</code> available in <code>D</code>.</para>

        <figure xml:id="i1819899">
          <title>Fail Over Scenario in a cluster</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" contentdepth="1.852in" contentwidth="4.901in" fileref="fail-over.svg"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para>There are many possible variations on this scenario. The
        managers could exchange load information, allowing the service switch
        to be influenced by the load of the target systems. The important
        aspect is that the Topology Manager can ignore the complex details of
        discovery protocols, communication protocols, and service proxying and
        instead focus on the topology. See <xref linkend="org.osgi.service.remoteserviceadmin.namespace.TopologyNamespace.FAIL_OVER_POLICY" xrefstyle="hyperlink"/>.</para>
      </section>
    </section>
  </section>

  <section xml:id="service.remoteserviceadmin.endpointdescription">
    <title>Endpoint Description</title>

    <para>An <emphasis>Endpoint</emphasis> is a point of rendezvous of
    distribution providers. It is created by an exporting distribution
    provider or some other party, and is used by importing distribution
    providers to create a connection. An <emphasis>Endpoint
    Description</emphasis> describes an Endpoint in such a way that an
    importing Remote Service Admin service can create this connection if it
    recognizes the <emphasis>configuration type</emphasis> that is used for
    that Endpoint. The configuration type consists of a name and a set of
    properties associated with that name.</para>

    <para>The core concept of the Endpoint Description is a Map of properties.
    The structure of this map is the same as service properties, and the
    defined properties are closely aligned with the properties of an imported
    service. An <code>EndpointDescription</code> object must only consist of
    the data types that are supported for service properties. This makes the
    property map serializable with many different mechanisms. The
    <code>EndpointDescription</code> class provides a convenient way to access
    the properties in a type safe way.</para>

    <para>An Endpoint Description has case insensitive keys, just like the
    Service Reference's properties.</para>

    <para>The properties map must contain all the prescribed service
    properties of the exported service after intents have been processed, as
    if the service was registered as an imported service. That is, the map
    must not contain any properties that start with
    <code>service.exported.*</code> but it must contain the
    <code>service.imported</code>.* variation of these properties. The
    Endpoint Description must reflect the imported service properties because
    this simplifies the use of filters from the service hooks. Filters applied
    to the Endpoint Description can then be the same filters as applied by a
    bundle to select an imported service from the service registry.</para>

    <para>The properties that can be used in an Endpoint Description are
    listed in <xref linkend="service.remoteserviceadmin-endpoint.properties"/>. The
    <code>RemoteConstants</code> class contains the constants for all of these
    property names.</para>

    <table xml:id="service.remoteserviceadmin-endpoint.properties">
      <title>Endpoint Properties</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="2.5*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="4.5*"/>

        <thead>
          <row>
            <entry>Endpoint Property Name</entry>

            <entry>Type</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>service.exported.*</code></entry>

            <entry><para/></entry>

            <entry><para>Must not be set</para></entry>
          </row>

          <row>
            <entry><code>service.imported</code></entry>

            <entry><code>*</code></entry>

            <entry><para>Must always be set to some value. See <xref linkend="org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_IMPORTED" xrefstyle="hyperlink"/>.</para></entry>
          </row>

          <row>
            <entry><code>objectClass</code></entry>

            <entry><code>String[]</code></entry>

            <entry><para>Must be set to the value of
            <code>service.exported.interfaces</code>, of the exported service
            after expanding any wildcards. Though this property will be
            overridden by the framework for the corresponding service
            registration, it must be set in the Endpoint Description to
            simplify the filter matching. These interface names are available
            with the <xref linkend="org.osgi.service.remoteserviceadmin.EndpointDescription.getInterfaces--" xrefstyle="hyperlink"/> method.</para></entry>
          </row>

          <row>
            <entry><code>service.intents</code></entry>

            <entry><code>String+</code></entry>

            <entry><para>Intents implemented by the exporting distribution
            provider and, if applicable, the exported service itself. Any
            qualified intents must have their expanded form present. These
            expanded intents are available with the <xref linkend="org.osgi.service.remoteserviceadmin.EndpointDescription.getIntents--" xrefstyle="hyperlink"/> method. See <xref linkend="org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_INTENTS" xrefstyle="hyperlink"/>.</para></entry>
          </row>

          <row>
            <entry><code>endpoint.service.id</code></entry>

            <entry><code>Long</code></entry>

            <entry><para>The service id of the exported service. Can be absent
            or 0 if the corresponding Endpoint is not for an OSGi service. The
            remote service id is available as <xref linkend="org.osgi.service.remoteserviceadmin.EndpointDescription.getServiceId--" xrefstyle="hyperlink"/>. See also <xref linkend="org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_SERVICE_ID" xrefstyle="hyperlink"/>.</para></entry>
          </row>

          <row>
            <entry><code>endpoint.framework.uuid</code></entry>

            <entry><code>String</code></entry>

            <entry><para>A universally unique id identifying the instance of
            the exporting framework. Can be absent if the corresponding
            Endpoint is not for an OSGi service. See <xref linkend="i1887500"/>. The remote framework UUID is available with
            the <xref linkend="org.osgi.service.remoteserviceadmin.EndpointDescription.getFrameworkUUID--" xrefstyle="hyperlink"/> method. See also <xref linkend="org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_FRAMEWORK_UUID" xrefstyle="hyperlink"/>.</para></entry>
          </row>

          <row>
            <entry><code>endpoint.id</code></entry>

            <entry><code>String</code></entry>

            <entry><para>The Id for this Endpoint, can never be
            <code>null</code>. This information is available with the <xref linkend="org.osgi.service.remoteserviceadmin.EndpointDescription.getId--" xrefstyle="hyperlink"/>. See <xref linkend="i1887496"/> and also
            <xref linkend="org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_ID" xrefstyle="hyperlink"/>.</para></entry>
          </row>

          <row>
            <entry><para><code>endpoint.package.</code></para><para><code> version.&lt;package-name&gt;</code></para></entry>

            <entry><code>String</code></entry>

            <entry><para>The Java package version for the embedded
            &lt;package&gt;. For example, the property
            <code>endpoint.package.version.com.acme=1.3</code> describes the
            version for the <code>com.acme</code> package. The version for a
            package can be obtained with the <xref linkend="org.osgi.service.remoteserviceadmin.EndpointDescription.getPackageVersion-String-" xrefstyle="hyperlink"/>.</para> <para>The version does not have to
            be set, if not set, the value must be assumed to be
            0.</para></entry>
          </row>

          <row>
            <entry><code>service.imported.configs</code></entry>

            <entry><code>String+</code></entry>

            <entry><para>The configuration types that can be used to implement
            the corresponding Endpoint. This property maps to the
            corresponding property in the Remote Services chapter. This
            property can be obtained with the <xref linkend="org.osgi.service.remoteserviceadmin.EndpointDescription.getConfigurationTypes--" xrefstyle="hyperlink"/> method.</para> <para>The Export
            Registration has all the possible configuration types, where the
            Import Registration reports the configuration type actually used.
            <xref linkend="org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_IMPORTED_CONFIGS" xrefstyle="hyperlink"/>.</para></entry>
          </row>

          <row>
            <entry><code>&lt;config&gt;.*</code></entry>

            <entry><code>*</code></entry>

            <entry><para>Where <code>&lt;config&gt;</code> is one of the
            configuration type names listed in
            <code>service.imported.configs</code>. The content of these
            properties must be valid for creating a connection to the Endpoint
            in another framework. That is, any locally readable URLs from
            bundles must be converted in such a form that they can be read by
            the importing framework. How this is done is configuration type
            specific.</para></entry>
          </row>

          <row>
            <entry><code>*</code></entry>

            <entry><code>*</code></entry>

            <entry><para>All remaining public service properties must be
            present (that is, not starting with full stop (<code>'.'
            \u002E</code>)). If the values can not be marshaled by the
            Distribution Provider then they must be ignored.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The <code>EndpointDescription</code> class has a number of
    constructors that make it convenient to instantiate it for different
    purposes:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.EndpointDescription.EndpointDescription-Map-" xrefstyle="hyperlink"/> - Instantiate the Endpoint Description from a
        <code>Map</code> object.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.EndpointDescription.EndpointDescription-ServiceReference-Map-" xrefstyle="hyperlink"/> - Instantiate an Endpoint Description based on
        a Service Reference and a Map. The base properties of this Endpoint
        Description are the Service Reference properties but the properties in
        the given Map must override any of their case variants in the Service
        Reference. This allows the construction of an Endpoint Description
        from an exportable service while still allowing overrides of specific
        properties by the Topology Manager.</para>
      </listitem>
    </itemizedlist>

    <para>The Endpoint Description must use the allowed properties as given in
    <xref linkend="service.remoteserviceadmin-endpoint.properties" xrefstyle="template:Table %n on page %p"/>. The Endpoint Description must
    automatically skip any <code>service.exported.*</code> properties.</para>

    <para>The Endpoint Description provides the following methods to access
    the properties in a more convenient way:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.EndpointDescription.getInterfaces--" xrefstyle="hyperlink"/> - Answers a list of Java interface names.
        These are the interfaces under which the services must be registered.
        These interface names can also be found at the
        <code>objectClass</code> property. A service can only be imported when
        there is at least one Java interface name available.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.EndpointDescription.getConfigurationTypes--" xrefstyle="hyperlink"/> - Answer the configuration types that are used
        for exporting this Endpoint. The configuration types are associated
        with a number of properties.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.EndpointDescription.getId--" xrefstyle="hyperlink"/> - Returns an Id uniquely identifying an
        Endpoint. The syntax of this Id should be defined in the specification
        for the associated configuration type. Two Endpoint Descriptions with
        the same Id describe the same Endpoint.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.EndpointDescription.getFrameworkUUID--" xrefstyle="hyperlink"/> - Get a Universally Unique Identifier (UUID)
        for the framework instance that has created the Endpoint, <xref linkend="i1887500"/>.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.EndpointDescription.getServiceId--" xrefstyle="hyperlink"/> - Get the service id for the framework
        instance that has created the Endpoint. If there is no service on the
        remote side the value must be 0.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.EndpointDescription.getPackageVersion-String-" xrefstyle="hyperlink"/> - Get the version for the given
        package.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.EndpointDescription.getIntents--" xrefstyle="hyperlink"/> - Get the list of specified intents.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.EndpointDescription.getProperties--" xrefstyle="hyperlink"/> - Get all the properties.</para>
      </listitem>
    </itemizedlist>

    <para>Two Endpoint Descriptions are deemed equal when their Endpoint Id is
    equal. The Endpoint Id is a mandatory property of an Endpoint Description,
    it is further described at <xref linkend="i1887496"/>. The hash code is
    therefore also based on the Endpoint Id.</para>

    <section>
      <title>Validity</title>

      <para>A valid Endpoint Description must at least satisfy the following
      assertions:</para>

      <itemizedlist>
        <listitem>
          <para>It must have a non-<code>null</code> Id that uniquely
          identifies the Endpoint</para>
        </listitem>

        <listitem>
          <para>It must at least have one Java interface name</para>
        </listitem>

        <listitem>
          <para>It must at least have one configuration type set</para>
        </listitem>

        <listitem>
          <para>Any version for the packages must have a valid version
          syntax.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Mutability</title>

      <para>An <code>EndpointDescription</code> object is immutable and with
      all final fields. It can be freely used between different
      threads.</para>
    </section>

    <section xml:id="i1887496">
      <title>Endpoint Id</title>

      <para>An Endpoint Id is an opaque unique identifier for an Endpoint.
      This uniqueness must at least hold for the entire network in which the
      Endpoint is used. There is no syntax defined for this string except that
      white space at the beginning and ending must be ignored. The actual
      syntax for this Endpoint Id must be defined by the actual configuration
      type.</para>

      <para>Two Endpoint Descriptions are deemed identical when their Endpoint
      Id is equal. The Endpoint Ids must be compared as string compares with
      leading and trailing spaces removed. The Endpoint Description class must
      use the <code>String</code> class' hash Code from the Endpoint Id as its
      own <code>hashCode</code>.</para>

      <para>The simplest way to ensure that a growth in the number of
      EndpointDescriptions and/or the size of the connected group does not
      violate the required uniqueness of Endpoint Ids is for implementations
      to make their Endpoint Ids globally unique. This protects against
      clashes regardless of changes to the connected group.</para>

      <para>Whilst globally unique identifiers (GUIDs) are a simple solution
      to the Endpoint Id uniqueness problem, they are not easy to implement in
      all environments. In some systems they can be prohibitively expensive to
      create, or of insufficient entropy to be genuinely unique. Some
      distribution providers may therefore choose not to use random
      GUIDs.</para>

      <para>In the case where no globally unique value is used the following
      actions are recommended (although not required).</para>

      <itemizedlist>
        <listitem>
          <para>Distribution Providers protect against intra-framework clashes
          using some known value unique to the service, for example the
          service id.</para>
        </listitem>

        <listitem>
          <para>Distribution Providers protect against inter-provider
          collisions within a single framework by using some unique value,
          such as the distribution provider's bundle id. The distribution
          provider bundle's symbolic name is insufficient, as there may be
          multiple versions of the same distribution provider installed within
          a single framework.</para>
        </listitem>

        <listitem>
          <para>Distribution Providers protect against inter-framework
          collisions using some value unique to the framework, such as the
          framework UUID.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i1887500">
      <title>Framework UUID</title>

      <para>Each framework registers its services with a service id that is
      only unique for that specific framework. The OSGi framework is not a
      singleton, making it possible that a single VM process holds multiple
      OSGi frameworks. Therefore, to identify an OSGi service uniquely it is
      necessary to identify the framework that has registered it. This
      identifier is a <emphasis>Universally Unique IDentifier</emphasis>
      (UUID) that is set for each framework. This UUID is contained in the
      following framework property:</para>

      <programlisting>org.osgi.framework.uuid</programlisting>

      <para>If an Endpoint Description has no associated OSGi service then the
      UUID of that Endpoint Description must not be set and its service id
      must be 0.</para>

      <para>A local Endpoint Description will have its framework UUID set to
      the local framework. This makes it straightforward to filter for
      Endpoint Descriptions that are describing local Endpoints or that
      describe remote Endpoints. For example, a manager can take the filter
      from a listener and ensure that it is only getting remote Endpoint
      Descriptions:</para>

      <programlisting>(&amp;
  (!
    (service.remote.framework.uuid
       =72dc5fd9-5f8f-4f8f-9821-9ebb433a5b72)
  )
  (objectClass=org.osgi.service.log.LogService)
)</programlisting>

      <para>Where <code>72dc5fd9-5f8f-4f8f-9821-9ebb433a5b72</code> is the
      UUID of the local framework. A discovery bundle can register the
      following filter in its scope to receive all locally generated
      Endpoints:</para>

      <programlisting>(service.remote.framework.uuid
       =72dc5fd9-5f8f-4f8f-9821-9ebb433a5b72)</programlisting>
    </section>

    <section xml:id="i1887526">
      <title>Resource Containment</title>

      <para>Configuration types can use URLs to point to local resources
      describing in detail the Endpoint parameters for specific protocols.
      However, the purpose of an Endpoint Description is to describe an
      Endpoint to a remote system. This implies that there is some marshaling
      process that will transfer the Endpoint Description to another process.
      This other process is unlikely to be able to access resource URLs. Local
      bundle resource URLs are only usable in the framework that originates
      them but even HTTP based URLs can easily run into problems due to
      firewalls or lack of routing.</para>

      <para>Therefore, the properties for a configuration type should be
      stored in such a way that the receiving process can access them. One way
      to achieve this is to contain the configuration properties completely in
      the Endpoint Description and ensure they only use the basic data types
      that the remote services chapter in the core requires every Distribution
      Provider to support.</para>

      <para>The Endpoint Description XML format provides an <code>xml</code>
      element that is specifically added to make it easy to embed XML based
      configuration documents. The XML Schema is defined in <xref linkend="i1889341"/>.</para>
    </section>
  </section>

  <section xml:id="service.remoteserviceadmin-rsa.service">
    <title>Remote Service Admin</title>

    <para>The Remote Service Admin service abstracts the core functionality of
    a distribution provider: exporting a service to an Endpoint and importing
    services from an Endpoint. However, in contrast with the distribution
    provider of the Remote Services specification, the Remote Service Admin
    service must be told explicitly what services to import and export.</para>

    <section>
      <title>Exporting</title>

      <para>An exportable service can be exported with the <xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.exportService-ServiceReference-Map-" xrefstyle="hyperlink"/> method. This method creates a number of
      Endpoints by inspecting the merged properties from the Service Reference
      and the given Map. Any property in the Map overrides the Service
      Reference properties, regardless of case. That is, if the map contains a
      key then it will override any case variant of this key in the Service
      Reference. However, if the Map contains the <code>objectClass</code> or
      <code>service.id</code> property key in any case variant, then these
      properties must not override the Service Reference's value.</para>

      <para>The Remote Service Admin service must interpret the merged
      properties according to the Remote Services chapter. This means that it
      must look at the following properties (as defined in chapter <xref linkend="service.remoteservices"/> ):</para>

      <itemizedlist>
        <listitem>
          <para><code>service.exported.configs</code> - <code>(String+
          )</code> A list of configuration types that should be used to export
          this service. Each configuration type represents the configuration
          parameters for an Endpoint. A Remote Service Admin service should
          create an Endpoint for each configuration type that it supports and
          ignore the types it does not recognize. If this property is not set,
          then the Remote Service Admin implementation must choose a
          convenient configuration type that then must be reported on the
          Endpoint Description with the <code>service.imported.configs</code>
          associated with the returned Export Registration.</para>
        </listitem>

        <listitem>
          <para><code>service.exported.intents</code> - (
          <code>String+)</code> A list of intents that the Remote Service
          Admin service must implement to distribute the given service.</para>
        </listitem>

        <listitem>
          <para><code>service.exported.intents.extra</code> -
          <code>(String+)</code> This property is merged with the
          <code>service.exported.intents</code> property.</para>
        </listitem>

        <listitem>
          <para><code>service.exported.interfaces</code> -
          <code>(String+)</code> This property must be set; it marks this
          service for export and defines the interfaces. The list members must
          all be contained in the types listed in the <code>objectClass</code>
          service property from the Service Reference. The single value of an
          asterisk (<code>'*' \u002A</code>) indicates all interfaces in the
          registration's <code>objectClass</code> property and ignore the
          classes. Being able to set this property outside the Service
          Reference implies that the Topology Manager can export any
          registered service, also services not specifically marked to be
          exported.</para>
        </listitem>

        <listitem>
          <para><code>service.intents</code> - <code>(String+)</code> A list
          of intents that this service has implemented.</para>
        </listitem>
      </itemizedlist>

      <para>A Topology Manager cannot remove properties, <code>null</code> is
      invalid as a property value.</para>

      <para>The Remote Service Admin returns a collection of
      <code>ExportRegistration</code> objects. This collection must contain an
      entry for each configuration type the Remote Service Admin has
      recognized. Unrecognized configuration types must be ignored. However,
      it is possible that this list contains <emphasis>invalid
      registrations</emphasis>, see <xref linkend="i1791501"/>.</para>

      <para>If a Service was already exported then the Remote Service Admin
      must still return a new <code>ExportRegistration</code> object that is
      linked with the earlier registrations. That is, an Endpoint can be
      shared between multiple Export Registrations. The Remote Service Admin
      service must ensure that the corresponding Endpoint remains available as
      long as there is at least one open Export Registration for that
      Endpoint.</para>

      <para>For each successful creation of an export registration, the Remote
      Service Admin service must publish an <xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.EXPORT_REGISTRATION" xrefstyle="hyperlink"/> event, see <xref linkend="i1736220"/>. This
      event must be emitted, even if the Endpoint already existed and is thus
      shared with another Export Registration. If the creation of an Endpoint
      runs into an error, an <xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.EXPORT_ERROR" xrefstyle="hyperlink"/> event must be emitted.</para>

      <para>Each valid Export Registration corresponds to an Endpoint for the
      given service. This Endpoint must remain active until all of the Export
      Registrations are closed that share this Endpoint.</para>

      <para>The Endpoint can now be published so that other processes or
      systems can import this Endpoint. To aid with this import, the Export
      Registration has a <xref linkend="org.osgi.service.remoteserviceadmin.ExportRegistration.getExportReference--" xrefstyle="hyperlink"/> method that returns an <xref linkend="org.osgi.service.remoteserviceadmin.ExportReference" xrefstyle="hyperlink"/> object. This reference provides the following
      information:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.remoteserviceadmin.ExportReference.getExportedEndpoint--" xrefstyle="hyperlink"/> - This is the associated Endpoint
          Description. This Endpoint Description is a properties based
          description of an Endpoint. The property keys and their semantics
          are outlined in <xref linkend="service.remoteserviceadmin.endpointdescription"/>. It can
          be used to inform other systems of the availability of an
          Endpoint.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.remoteserviceadmin.ExportReference.getExportedService--" xrefstyle="hyperlink"/> - The Service Reference to the exported
          service.</para>
        </listitem>
      </itemizedlist>

      <para>Both methods must return <code>null</code> when the associated
      Export Registration is closed.</para>

      <para>A Distribution Provider that recognizes the configuration type in
      an Endpoint can create a connection to an Endpoint on other systems as
      long as firewalls and networks permit. The Endpoint Description can
      therefore be communicated to other systems to announce the availability
      of an Endpoint. The Topology Manager can optionally announce the
      availability of an Endpoint to the Endpoint Event Listener services, see
      <xref linkend="i1751493"/>. The decision to announce the availability of
      an Endpoint is one of the policies that is provided by a specific
      Topology Manager.</para>

      <para>The Export Registrations remain open until:</para>

      <itemizedlist>
        <listitem>
          <para>Explicitly closed by the Topology Manager, or</para>
        </listitem>

        <listitem>
          <para>The Remote Service Admin service is no longer used by the
          Topology Manager that created the Export Registration.</para>
        </listitem>
      </itemizedlist>

      <para>If the Remote Service Admin service can no longer maintain the
      corresponding Endpoint due to failures than these should be reported
      through the events. However, the registrations should remain open until
      explicitly closed by the Topology Manager.</para>

      <para>See <xref linkend="i1736585"/> for more information.</para>

      <para>The Export Registrations are not permanent; persistence is in the
      realm of the Topology Manager.</para>
    </section>

    <section>
      <title>Importing</title>

      <para>To import a service, a Topology Manager must have an Endpoint
      Description that describes the Endpoint the imported service should
      connect to. With this Endpoint Description, a Remote Service Admin
      service can then import the corresponding Endpoint. A Topology Manager
      can obtain these Endpoint Descriptions through internal configuration;
      it can use the discovery model enabled by the Endpoint Event Listener
      service, see <xref linkend="i1751493"/>, or some alternate means.</para>

      <para>A service can be imported with the Remote Service Admin <xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.importService-EndpointDescription-" xrefstyle="hyperlink"/> method. This method takes an Endpoint
      Description and picks one of the embedded configuration types to
      establish a connection with the corresponding Endpoint to create a local
      service proxy. This proxy can then be mapped to either a remote OSGi
      service or an alternative, for example a web service. In certain cases
      the service proxy can be lazy, only verifying the reachability of the
      Endpoint when it is actually invoked for the first time. This implies
      that a service proxy can block when invoked until the proper
      communication setup has taken place.</para>

      <para>If the Remote Service Admin service does not recognize any of the
      configuration types then it must return <code>null</code>. If there are
      multiple configuration types recognized then the Remote Service Admin is
      free to select any one of the recognized types.</para>

      <para>The Remote Service Admin service must ensure that service
      properties are according to the Remote Services chapter for an imported
      service. This means that it must register the following
      properties:</para>

      <itemizedlist>
        <listitem>
          <para><code>service.imported</code> - <code>(*)</code> Must be set
          to any value.</para>
        </listitem>

        <listitem>
          <para><code>service.imported.configs</code> - <code>(String+)</code>
          The configuration information used to import this service. Any
          associated properties for this configuration types must be properly
          mapped to the importing system. For example, a URL in these
          properties must point to a valid resource when used in the importing
          framework, see <xref linkend="i1887526"/>. Multiple configuration
          types can be listed if they are synonyms for exactly the same
          Endpoint that is used to export this service.</para>
        </listitem>

        <listitem>
          <para><code>service.intents</code> - <code>(String+)</code> The
          Remote Service Admin must set this property to convey the combined
          intents of:</para>

          <itemizedlist>
            <listitem>
              <para>The exporting service, and</para>
            </listitem>

            <listitem>
              <para>The intents that the exporting distribution provider adds,
              and</para>
            </listitem>

            <listitem>
              <para>The intents that the importing distribution provider
              adds.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Any additional properties listed in the Endpoint Description
          that should not be excluded. See <xref linkend="service.remoteserviceadmin.endpointdescription"/> for more
          details about the properties in the Endpoint Description.</para>
        </listitem>
      </itemizedlist>

      <para>A Remote Service Admin service must strictly follow the rules for
      importing a service as outlined in the Remote Services chapter.</para>

      <para>The Remote Service Admin must return an
      <code>ImportRegistration</code> object or <code>null</code>. Even if an
      Import Registration is returned, it can still be an <emphasis>invalid
      registration</emphasis>, see <xref linkend="i1791501"/> if the setup of
      the connection failed asynchronously. The Import Registration must
      always be a new object. Each valid Import Registration corresponds to a
      proxy service, potentially shared, that was created for the given
      Endpoint. The issues around proxying are described in <xref linkend="i1742961"/>.</para>

      <para>For each successful creation of an import registration, the Remote
      Service Admin service must publish an <xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.IMPORT_REGISTRATION" xrefstyle="hyperlink"/> event, if there is an error it must publish an
      <xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.IMPORT_ERROR" xrefstyle="hyperlink"/>, see <xref linkend="i1736220"/>.</para>

      <para>For more information see <xref linkend="i1736585"/>.</para>

      <para>The Import Registration provides access to an <xref linkend="org.osgi.service.remoteserviceadmin.ImportReference" xrefstyle="hyperlink"/> object with the <xref linkend="org.osgi.service.remoteserviceadmin.ImportRegistration.getImportReference--" xrefstyle="hyperlink"/>. This object has the following methods:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.remoteserviceadmin.ImportReference.getImportedEndpoint--" xrefstyle="hyperlink"/> - Provides the Endpoint Description for this
          imported service.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.remoteserviceadmin.ImportReference.getImportedService--" xrefstyle="hyperlink"/> - Provides the Service Reference for the
          service proxy.</para>
        </listitem>
      </itemizedlist>

      <para>The Import Registration will remain open as long as:</para>

      <itemizedlist>
        <listitem>
          <para>The corresponding remote Endpoint remains available,
          and</para>
        </listitem>

        <listitem>
          <para>The Remote Service Admin service is still in use by the
          Topology Manager that created the Import Registration.</para>
        </listitem>
      </itemizedlist>

      <para>That is, the Import Registrations are not permanent, any
      persistence is in the realm of the Topology Manager. See <xref linkend="i1736585"/> for more details.</para>
    </section>

    <section>
      <title>Updates</title>

      <para>Services Registrations are dynamic and service properties may
      change during the lifetime of a service. Remote services must mirror
      these dynamics without making it appear as though the service has become
      unavailable. This requires that the exporting distribution provider and
      the importing distribution provider support the changing of service
      properties.</para>

      <para>There are two types of service properties:</para>

      <itemizedlist>
        <listitem>
          <para>Properties that are intended to be consumed by the
          distribution provider, such as: the exported interfaces and
          configuration types, exported intents and configuration type
          specific properties. These properties are typically prefixed with
          <code>'service.'</code> or <code>'endpoint.'</code> see <xref linkend="service.remoteserviceadmin-endpoint.properties" xrefstyle="template:Table %n on page %p"/>.</para>
        </listitem>

        <listitem>
          <para>Service properties not intended for the distribution provider.
          These are typically used to communicate information to the consumer
          of the service and are often specific to the domain of the
          service.</para>
        </listitem>
      </itemizedlist>

      <para>The following methods to support the updating of service
      properties on Export Registrations and the propagation of these updates
      to the remote proxies via Import Registrations.</para>

      <itemizedlist>
        <listitem>
          <para>ExportRegistration.<xref linkend="org.osgi.service.remoteserviceadmin.ExportRegistration.update-Map-" xrefstyle="hyperlink"/> - Allows the Topology Manager to update an
          existing export registration it created after receiving a
          notification of changed properties on the remoted service.</para>
        </listitem>

        <listitem>
          <para>ImportRegistration.<xref linkend="org.osgi.service.remoteserviceadmin.ImportRegistration.update-EndpointDescription-" xrefstyle="hyperlink"/> - Allows the Topology Manager to update the
          import registration representing a remote service after the remote
          service properties have been updated. Typically the topology manager
          is notified of such change via the Discovery mechanism.</para>
        </listitem>
      </itemizedlist>

      <para>The distribution provider must support the updates of service
      properties <emphasis>not</emphasis> intended for the distribution
      provider, where supported property values are as defined in the
      <emphasis>Filter Syntax</emphasis> of <xref linkend="intro.core.release" xrefstyle="template:%t"/>. Distribution providers may support updates to
      a wider set of properties or data types, but these may fail with other
      implementations.</para>
    </section>

    <section>
      <title>Reflection</title>

      <para>The Remote Service Admin service provides the following methods to
      get the list of the current exported and imported services:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.getExportedServices--" xrefstyle="hyperlink"/> - List the Export References for services
          that are exported by this Remote Service Admin service as directed
          by any of the Topology Managers.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.getImportedEndpoints--" xrefstyle="hyperlink"/> - List the Import References for services
          that have been imported by this Remote Service Admin service as
          directed by any of the Topology Managers.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i1736585">
      <title>Registration Life Cycle</title>

      <para>All registrations obtained through a Remote Service Admin service
      are life cycle bound to the Topology Manager that created it. That is,
      if a Topology Manager ungets its Remote Service Admin service, all
      registrations obtained through this service must automatically be
      closed. This model ensures that all registrations are properly closed if
      either the Remote Service Admin or the Topology Manager stops because in
      both cases the framework performs the unget automatically. Such behavior
      can be achieved by implementing the Remote Service Admin service as a
      Service Factory.</para>
    </section>

    <section xml:id="i1791501">
      <title>Invalid Registrations</title>

      <para>The Remote Service Admin service is explicitly allowed to return
      <emphasis>invalid</emphasis> Import and Export Registrations. First, in
      a communications stack it can take time to discover that there are
      issues, allowing the registration to return before it has completed can
      potentially save time. Second, it allows the Topology Manager to
      discover problems with the configuration information. Without the
      invalid Export Registrations, the Topology Manager would have to scan
      the log or associate the Remote Service Admin Events with a specific
      import/export method call, something that can be difficult to do.</para>

      <para>If the registration is invalid, the <xref linkend="org.osgi.service.remoteserviceadmin.ExportRegistration.getException--" xrefstyle="hyperlink"/> method must return a <code>Throwable</code>
      object. If the registration has initialized correctly, this method will
      return <code>null</code>. The <xref linkend="org.osgi.service.remoteserviceadmin.ExportRegistration.getExportReference--" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.remoteserviceadmin.ImportRegistration.getImportReference--" xrefstyle="hyperlink"/> methods must throw an Illegal State Exception
      when the registration is invalid. A Remote Service Admin service is
      allowed to block for a reasonable amount of time when any of these
      methods is called, including the <code>getException</code> method, to
      finish initialization.</para>

      <para>An invalid registration can be considered as never having been
      opened, it is therefore not necessary to close it; however, closing an
      invalid or closed registration must be a dummy operation and never throw
      an Exception. However, a failed registration must generate a
      corresponding error event.</para>
    </section>

    <section xml:id="i1742961">
      <title>Proxying</title>

      <para>It is the responsibility of the Remote Service Admin service to
      properly proxy an imported service. This specification does not mandate
      the technique used to proxy an Endpoint as a service in the OSGi
      framework. The OSGi Remote Services specification allows a distribution
      provider to limit what it can proxy.</para>

      <para>One of the primary aspects of a proxy is to ensure class space
      consistency between the exporting bundle and importing bundles. This can
      require the generation of a proxy-per-bundle to match the proper class
      spaces. It is the responsibility of the Remote Service Admin to ensure
      that no Class Cast Exceptions occur.</para>

      <para>A common technique to achieve maximum class space compatibility is
      to use a Service Factory. A Service Factory provides the calling bundle
      when it first gets the service, making it straightforward to verify the
      package version of the interface that the calling bundle uses. Knowing
      the bundle that requests the service allows the creation of specialized
      proxies for each bundle. The interface class(es) for the proxy can then
      be loaded directly from the bundle, ensuring class compatibility.
      Interfaces should be loadable by the bundle otherwise that bundle can
      not use the interface in its code. If an interface cannot be loaded then
      it can be skipped. A dedicated class loader can then be created that has
      visibility to all these interfaces and is used to define the proxy
      class. This design ensures proper visibility and consistency.
      Implementations can optimize this model by sharing compatible class
      loaders between bundles.</para>

      <para>The proxy will have to call arbitrary methods on arbitrary
      services. This has a large number of security implications, see <xref linkend="i1789427"/>.</para>
    </section>
  </section>

  <section xml:id="i1751493">
    <title>Discovery</title>

    <para>The topology of the distributed system is decided by the Topology
    Manager. However, in a distributed environment, the Topology Manager needs
    to <emphasis>discover</emphasis> Endpoints in other frameworks. There is a
    very large number of ways how a Topology Manager could learn about other
    Endpoints, ranging from static configuration, a centralized
    administration, all the way to fully dynamic discovery protocols like the
    Service Location Protocol (SLP) or JGroups. To support the required
    flexibility, this specification defines an <emphasis>Endpoint Event
    Listener</emphasis> service that allows the dissemination of Endpoint
    information. This service provides a symmetric solution because the
    problem is symmetric: it is used by a Topology Manager to announce changes
    in its local topology as well as find out about other Endpoint
    Descriptions. Where those other Endpoint Descriptions come from can vary
    widely. This design is depicted in <xref linkend="i1753219" xrefstyle="template:Figure %n on page %p"/>.</para>

    <figure xml:id="i1753219">
      <title>Examples</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.532in" contentwidth="7.000in" fileref="topology-example.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The design of the Endpoint Event Listener allows a federated
    registry of Endpoint Descriptions. Any party that is interested in
    Endpoint Descriptions should register an Endpoint Event Listener service.
    This will signal that it is interested in topology information to any
    <emphasis>Endpoint Description Providers</emphasis>. Each Endpoint Event
    Listener service must be registered with a service property that holds a
    set of filter strings to indicate the <emphasis>scope</emphasis> of its
    interest. These filters must match an Endpoint Description before the
    corresponding Endpoint Event Listener service is notified of the
    availability of an Endpoint Description. Scoping is intended to limit the
    delivery of unnecessary Endpoint Descriptions as well as signal the need
    for specific Endpoints.</para>

    <para>In addition to providing an Endpoint Event Listener actors must
    provide an Endpoint Listener. This may, or may not, be the same service
    object as the Endpoint Event Listener. Registering an Endpoint Listener in
    addition to an Endpoint Event Listener ensures that Endpoint announcements
    from version <code>1.0</code> actors will continue to be visible. If a
    service object is advertised as both an Endpoint Listener
    <emphasis>and</emphasis> an Endpoint Event Listener then version
    <code>1.1</code> actors must use the Endpoint Event Listener interface of
    the service in preference, and not call it as an Endpoint Listener. For
    this reason the Endpoint Listener interface is marked as
    <code>Deprecated</code>. The reason that the Endpoint Event Listener
    interface should be preferred is that it supports more advanced
    notification types, such as modification events.</para>

    <para>A Topology Manager has knowledge of its local Endpoints and is
    likely to be only interested in remote Endpoints. It can therefore set the
    scope to only match remote Endpoint Descriptions. See <xref linkend="i1887500"/> for how to limit the scope to local or remote
    Endpoints. At the same time, a Topology manager should inform any locally
    registered Endpoint Event Listener and Endpoint Listener services about
    Endpoints that it has created or deleted.</para>

    <para>This architecture allows many different use cases. For example, a
    bundle could display a map of the topology by registering an Endpoint
    Event Listener with a scope for local Endpoints. Another example is the
    use of SLP to announce local Endpoints to a network and to discover remote
    Endpoints from other parties on this network.</para>

    <para>An instance of this design is shown in <xref linkend="i1751511" xrefstyle="template:Figure %n on page %p"/>. In this figure, there are 3
    frameworks that collaborate through some discovery bundle. The
    <code>Top</code> framework has created an Endpoint and decides to notify
    all Endpoint Event Listeners and Endpoint Listeners registered in this
    framework that are scoped to this new Endpoint. Local bundle
    <code>D</code> has set its scope to all Endpoint Descriptions that
    originate from its local framework, it therefore receives the Endpoint
    Description from <code>T</code>. Bundle <code>D</code> then sends the
    Endpoint Description to all its peers on the network.</para>

    <para>In the <code>Quark</code> framework, the manager bundle
    <code>T</code> has expressed an interest by setting its scope to a filter
    that matches the Endpoint Description from the <code>Top</code> framework.
    When the bundle <code>D</code> on the <code>Quark</code> framework
    receives the Endpoint Description from bundle <code>D</code> on the
    <code>Top</code> framework, it matches it against all local Endpoint Event
    Listener's scope. In this case, the local manager bundle <code>T</code>
    matches and is given the Endpoint Description. The manager then uses the
    Remote Service Admin service to import the exported service described by
    the given Endpoint Description.</para>

    <figure pgwide="1" xml:id="i1751511">
      <title>Endpoint Discovery Architecture. T=Topology Manager,
      D=Discovery</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.692in" contentwidth="4.924in" fileref="endpoint-discovery-architecture.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The previous description is just one of the possible usages of the
    Endpoint Event Listener. For example, the discovery bundles could
    communicate the scopes to their peers. These peers could then register an
    Endpoint Event Listener per peer, minimizing the network traffic because
    Endpoint Descriptions do not have to be broadcast to all peers.</para>

    <para>Another alternative usage is described in <xref linkend="i1889341"/>. In this chapter the extender pattern is used to
    retrieve Endpoint Descriptions from resources in locally active
    bundles.</para>

    <section>
      <title>Scope and Filters</title>

      <para>An Endpoint Event Listener or Endpoint Listener service is
      registered with the <xref linkend="org.osgi.service.remoteserviceadmin.EndpointEventListener.ENDPOINT_LISTENER_SCOPE" xrefstyle="hyperlink"/> service property. This property, which is
      <code>String+</code>, must be set and must contain at least one filter.
      If there is not at least one filter, then that Endpoint Event Listener
      or Endpoint Listener must not receive any Endpoint Descriptions.</para>

      <para>Each filter in the scope is applied against the properties of the
      Endpoint Description until one succeeds. Only if one succeeds is the
      Endpoint informed about the existence of an Endpoint.</para>

      <para>The Endpoint Description is designed to reflect the properties of
      the imported service, there is therefore a correspondence with the
      filters that are used by bundles that are listening for service
      registrations. The purpose of this design is to match the filter
      available through Listener Hook services, see <xref linkend="i1755239"/>.</para>

      <para>However, the purpose of the filters is more generic than just this
      use case. It can also be used to specify the interest in local Endpoints
      or remote Endpoints. For example, Topology Managers are only interested
      in remote Endpoints while discoverers are only interested in local
      Endpoints. It is easy to discriminate between local and remote by
      filtering on the <code>endpoint.framework.uuid</code> property. Endpoint
      Descriptions contain the Universally Unique ID (UUID) of the originating
      framework. This UUID must be available from the local framework as well.
      See <xref linkend="i1887500"/>.</para>
    </section>

    <section>
      <title>Endpoint Event Listener Interface</title>

      <para>The <code>EndpointEventListener</code> interface has the following
      method:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.remoteserviceadmin.EndpointEventListener.endpointChanged-EndpointEvent-String-" xrefstyle="hyperlink"/> – Notify the Endpoint Event Listener of
          changes to an Endpoint. The change could entail the addition or
          removal of an Endpoint or the modification of the properties of an
          existing Endpoint. Multiple identical events should be counted as a
          single such event.</para>
        </listitem>
      </itemizedlist>

      <para>These methods must only be called if the Endpoint Event Listener
      service has a filter in its scope that matches the Endpoint Description
      properties.</para>

      <para>The Endpoint Event Listener interface is
      <emphasis>idempotent</emphasis>. Endpoint Description Providers must
      inform an Endpoint Event Listener service (and its deprecated
      predecessor Endpoint Listener service) that is registered of all their
      matching Endpoints. The only way to find out about all available
      Endpoints is to register an Endpoint Event Listener (or Endpoint
      Listener) that is then informed by all available Endpoint Description
      Providers of their known Endpoint Descriptions that match their
      scope.</para>
    </section>

    <section>
      <title>Endpoint Listener Interface</title>

      <para>The <code>EndpointListener</code> interface is marked as
      <code>Deprecated</code> because the <code>EndpointEventListener</code>
      interface must be used in preference when both are implemented by the
      same object. The <code>EndpointEvent</code> interface has the following
      methods:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.remoteserviceadmin.EndpointListener.endpointAdded-EndpointDescription-String-" xrefstyle="hyperlink"/> – Notify the Endpoint Listener of a new
          Endpoint Description. The second parameter is the filter that
          matched the Endpoint Description. Registering the same Endpoint
          multiple times counts as a single registration.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.remoteserviceadmin.EndpointListener.endpointRemoved-EndpointDescription-String-" xrefstyle="hyperlink"/> – Notify the Endpoint Listener that the
          provided Endpoint Description is no longer available.</para>
        </listitem>
      </itemizedlist>

      <para>These methods must only be called if the Endpoint Listener service
      has a filter in its scope that matches the Endpoint Description
      properties. The reason for the filter string in the methods is to
      simplify and speed up matching an Endpoint Description to the cause of
      interest. For example, if the Listener Hook is used to do on demand
      import of services, then the filter can be associated with the Listener
      Info of the hook, see <xref linkend="i1755239"/>. If multiple filters in
      the scope match the Endpoint Description than the first filter in the
      scope must be passed.</para>

      <para>The Endpoint Listener interface is
      <emphasis>idempotent</emphasis>. Endpoint Description Providers must
      inform an Endpoint Listener service that is registered of all their
      matching Endpoints.</para>
    </section>

    <section>
      <title>Endpoint Event Listener and Endpoint Listener
      Implementations</title>

      <para>An Endpoint Event Listener service tracks the known Endpoints in
      its given scope. There are potentially a large number of bundles
      involved in creating this federated registry of Endpoints. To ensure
      that no Endpoint Descriptions are orphaned or unnecessarily missed, an
      Endpoint Event Listener implementation must follow the following
      rules:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Registration</emphasis> – The Endpoint Event
          Listener service is called with an event of type <xref linkend="org.osgi.service.remoteserviceadmin.EndpointEvent.ADDED" xrefstyle="hyperlink"/> for all known Endpoint Descriptions that the
          bundles in the local framework are aware of. Similarly, Endpoint
          Listener services are called with an <xref linkend="org.osgi.service.remoteserviceadmin.EndpointListener.endpointAdded-EndpointDescription-String-" xrefstyle="hyperlink"/> method for all these.</para>
        </listitem>

        <listitem>
          <para><emphasis>Tracking providers</emphasis> – An Endpoint Event
          Listener or Endpoint Listener must track the bundles that provide it
          with Endpoint Descriptions. If a bundle that provided Endpoint
          Descriptions is stopped, all Endpoint Descriptions that were
          provided by that bundle must be removed. This can be implemented
          straightforwardly with a Service Factory.</para>
        </listitem>

        <listitem>
          <para><emphasis>Scope modification</emphasis> – An Endpoint Event
          Listener or Endpoint Listener is allowed to modify the set of
          filters in its scope through a service property modification. This
          modification must result in new and/or existing Endpoint
          Descriptions to be added, however, existing Endpoints that are no
          longer in scope are not required to be explicitly removed by the
          their sources. It is the responsibility for the Endpoint Listener to
          remove these orphaned Endpoint Description from its view.</para>
        </listitem>

        <listitem>
          <para><emphasis>Endpoint mutability</emphasis> – An Endpoint
          Description can change its Properties. The way this is handled is
          different for Endpoint Event Listeners and Endpoint Listeners. An
          Endpoint Event Listener receives a change event of type <xref linkend="org.osgi.service.remoteserviceadmin.EndpointEvent.MODIFIED" xrefstyle="hyperlink"/> when the Properties of an existing Endpoint
          are modified. If the modification means that the Endpoint no longer
          matches the listener scope an event of type <xref linkend="org.osgi.service.remoteserviceadmin.EndpointEvent.MODIFIED_ENDMATCH" xrefstyle="hyperlink"/> is sent instead. Endpoint Listener services
          receive a sequence of <xref linkend="org.osgi.service.remoteserviceadmin.EndpointListener.endpointRemoved-EndpointDescription-String-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.remoteserviceadmin.EndpointListener.endpointAdded-EndpointDescription-String-" xrefstyle="hyperlink"/> callbacks when the Properties of an Endpoint
          are modified.</para>
        </listitem>
      </itemizedlist>

      <para>Endpoint Descriptions can be added from different sources and
      providers of Endpoint Descriptions often use asynchronous and
      potentially unreliable communications. An implementation must therefore
      handle the addition of multiple equal Endpoint Descriptions from
      different sources as well as from the same source. Implementations must
      not count the number of registrations, a remove operation of an Endpoint
      Description is final for each source. That is, if source <code>A</code>
      added Endpoint Description <code>e</code>, then it can only be removed
      by source <code>A</code>. However, if source <code>A</code> added
      <code>e</code> multiple times, then it only needs to be removed once.
      Removals of Endpoint Descriptions that have not been added (or were
      removed before) should be ignored.</para>

      <para>The discovery of Endpoints is a fundamentally indeterministic
      process and implementations of Endpoint Event Listener services should
      realize that there are no guarantees that an added Endpoint Description
      is always describing a valid Endpoint.</para>
    </section>

    <section>
      <title>Endpoint Description Providers</title>

      <para>The Endpoint Event Listener and Endpoint Listener services are
      based on an asynchronous, unreliable, best effort model because there
      are few guarantees in a distributed world. It is the task of an Endpoint
      Description Provider, for example a discovery bundle, to keep the
      Endpoint Event Listener services up to date of any Endpoint Descriptions
      the provider is aware of and that match the tracked service's
      scope.</para>

      <para>If an Endpoint Event Listener or Endpoint Listener service is
      registered, a provider must add all matching Endpoint Descriptions that
      it is aware of and match the tracked listener's scope. This can be done
      during registration or asynchronously later. For example, it is possible
      to use the filters in the scope to request remote systems for any
      Endpoint Descriptions that match those filters. For expediency reasons,
      the service registration event should not be delayed until those results
      return; it is therefore applicable to add these Endpoint Descriptions
      later when the returns from the remote systems finally arrive.</para>

      <para>If a tracked listener service object is advertised as both an
      Endpoint Event Listener and an Endpoint Listener then the
      EndpointDescription Provider must ignore the
      <code>EndpointListener</code> interface, and treat the listener only as
      an Endpoint Event Listener. Remote Service Admin <code>1.0</code> actors
      will be unaware of the <code>EndpointEventListener</code> interface, and
      will treat the service object purely as an Endpoint Listener. This
      restriction ensures that all actors will treat the service either as an
      Endpoint Event Listener, or an Endpoint Listener, but never as both. As
      a result the listener service will not have to disambiguate duplicate
      events from a single source. If an Endpoint Description Provider uses
      both the Endpoint Listener and Endpoint Event Listener interfaces of a
      single service object then the resulting behavior is undefined. The
      implementation may detect the misuse and throw an Exception, process or
      ignore the events from one of the interfaces, or it may simply corrupt
      the internal registry of Endpoints within the listener.</para>

      <para>A tracked Endpoint Event Listener or Endpoint Listener is allowed
      to modify its scope by setting new properties on its Service
      Registration. An Endpoint Description provider must process the new
      scope and add any newly matching Endpoint Descriptions. It is not
      necessary to remove any Endpoint Descriptions that were added before but
      no longer match the new scope. Removing those orphaned descriptions is
      the responsibility of the listener implementation.</para>

      <para>It is not necessary to remove any registered Endpoint Descriptions
      when the Endpoint Event Listener or Endpoint Listener is unregistered;
      also here it is the responsibility of the listener to do the proper
      cleanup.</para>
    </section>

    <section xml:id="i1755239">
      <title>On Demand</title>

      <para>A common distribution policy is to import services that are being
      listened for by local bundles. For example, when a bundle opens a
      Service Tracker on the Log Service, a Topology Manager could be notified
      and attempt to find a Log Service in the local cluster and then import
      this service in the local Service Registry.</para>

      <para>The OSGi framework provides service hooks for exactly this
      purpose. A Topology Manager can register a Listener Hook service and
      receive the information about bundles that have specified an interests
      in specific services.</para>

      <para>For example, a bundle creates the following Service
      Tracker:</para>

      <programlisting>ServiceTracker st = new ServiceTracker(context, 
        LogService.class.getName() );
st.open();</programlisting>

      <para>This Service Tracker will register a Service Listener with the
      OSGi framework. This will cause the framework to add a
      <code>ListenerInfo</code> to any Listener Hook services. The
      <code>getFilter</code> method on a <code>ListenerInfo</code> object
      provides a filter that is directly applicable for the Endpoint Event
      Listener's scope. In the previous example, this would be the
      filter:</para>

      <programlisting>(objectClass=org.osgi.service.log.LogService)</programlisting>

      <para>A Topology Manager could verify if this listener is satisfied.
      That is, if it has at least one service. If no such service could be
      found, it could then add this filter to its Endpoint Event Listener's
      scope to detect remote implementations of this service. If such an
      Endpoint is detected, it could then request the import of this service
      through the Remote Service Admin service.</para>
    </section>
  </section>

  <section xml:id="i1736220">
    <title>Events</title>

    <para>The Remote Service Admin service must synchronously inform any
    Remote Service Admin Listener services of events as they happen. Client of
    the events should return quickly and not perform any but trivial
    processing in the same thread.</para>

    <para>The following event types are defined:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.EXPORT_ERROR" xrefstyle="hyperlink"/> - An exported service has run into an
        unrecoverable error, although the Export Registration has not been
        closed yet. The event carries the Export Registration as well as the
        Exception that caused the problem, if present.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.EXPORT_REGISTRATION" xrefstyle="hyperlink"/> - The Remote Service Admin has registered a
        new Export Registration.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.EXPORT_UNREGISTRATION" xrefstyle="hyperlink"/> - An Export Registration has been closed, the
        service is no longer exported and the Endpoint is no longer active
        when this was the last registration for that service/Endpoint
        combination.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.EXPORT_UPDATE" xrefstyle="hyperlink"/> - An exported service is updated. The service
        properties have changed.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.EXPORT_WARNING" xrefstyle="hyperlink"/> - An exported service is experiencing problems
        but the Endpoint is still available.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.IMPORT_ERROR" xrefstyle="hyperlink"/> - An imported service has run into a fatal
        error and has been shut down. The Import Registration should be closed
        by the Topology Manager that created them.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.IMPORT_REGISTRATION" xrefstyle="hyperlink"/> - A new Import Registration was created for a
        potentially existing service/Endpoint combination.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.IMPORT_UNREGISTRATION" xrefstyle="hyperlink"/> - An Import Registration was closed, removing
        the proxy if this was the last registration.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.IMPORT_UPDATE" xrefstyle="hyperlink"/> - An imported service is updated. The service
        properties have changed.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.IMPORT_WARNING" xrefstyle="hyperlink"/> - An imported service is experiencing problems
        but can continue to function.</para>
      </listitem>
    </itemizedlist>

    <para>The following properties are available on the event:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.getType--" xrefstyle="hyperlink"/> - The type of the event.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.getException--" xrefstyle="hyperlink"/> - Any exception, if present.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.getExportReference--" xrefstyle="hyperlink"/> - An export reference, if applicable.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.getImportReference--" xrefstyle="hyperlink"/> - An import reference, if applicable.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.getSource--" xrefstyle="hyperlink"/> - The source of the event, the Remote Service
        Admin service.</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Event Admin Mapping</title>

      <para>All Remote Service Admin events must be posted, which is
      asynchronously, to the Event Admin service, if present, under the
      following topic:</para>

      <programlisting>org/osgi/service/remoteserviceadmin/&lt;type&gt;</programlisting>

      <para>Where <code>&lt;type&gt;</code> represents the type of the event,
      for example <code>IMPORT_ERROR</code>.</para>

      <para>The Event Admin event must have the following properties:</para>

      <itemizedlist>
        <listitem>
          <para><code>bundle</code> - <code>(Bundle)</code> The Remote Service
          Admin bundle</para>
        </listitem>

        <listitem>
          <para><code>bundle.id</code> - (<code>Long</code>) The id of the
          Remote Service Admin bundle.</para>
        </listitem>

        <listitem>
          <para><code>bundle.symbolicname</code> - (<code>String</code>) The
          Bundle Symbolic Name of the Remote Service Admin
          <code>bundle.version</code> - (<code>Version</code>) The version of
          the Remote Service Admin bundle.</para>
        </listitem>

        <listitem>
          <para><code>bundle.signer</code> - (<code>String[]</code>) Signer of
          the Remote Service Admin bundle</para>
        </listitem>

        <listitem>
          <para><code>exception</code> - (Throwable) The Exception, if
          present. Also reported on the <code>cause</code> property for
          backward compatibility.</para>
        </listitem>

        <listitem>
          <para><code>exception.class</code> - (<code>String</code>) The
          fully-qualified class name of the attached Exception.</para>
        </listitem>

        <listitem>
          <para><code>exception.message</code> -( <code>String)</code> The
          message of the attached exception. Only set if the Exception message
          is not <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><code>endpoint.service.id</code> - (<code>Long</code>) Remote
          service id, if present</para>
        </listitem>

        <listitem>
          <para><code>endpoint.framework.uuid</code> - (<code>String</code>)
          Remote service's Framework UUID, if present</para>
        </listitem>

        <listitem>
          <para><code>endpoint.id</code> - (<code>String</code>) The id of the
          Endpoint, if present</para>
        </listitem>

        <listitem>
          <para><code>objectClass</code> - <code>(String[])</code> The
          interface names, if present</para>
        </listitem>

        <listitem>
          <para><code>service.imported.configs</code> - (<code>String+</code>)
          The configuration types of the imported services, if present</para>
        </listitem>

        <listitem>
          <para><code>timestamp</code> - (<code>Long</code>) The time when the
          event occurred</para>
        </listitem>

        <listitem>
          <para><code>event</code> - (<code>RemoteServiceAdminEvent</code>)
          The <code>RemoteServiceAdminEvent</code> object that caused this
          event.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="i1889341">
    <title>Endpoint Description Extender Format</title>

    <para>The Endpoint Description Extender format is a possibility to deliver
    Endpoint Descriptions in bundles. This section defines an XML schema and
    how to locate XML definition resources that use this schema to define
    Endpoint Descriptions. The definition resource is a simple property based
    model that can define the same information as the properties on an
    imported service. If a bundle with the description is
    <emphasis>ready</emphasis> (<code>ACTIVE</code> or lazy activation and in
    the <code>STARTING</code> state), then this static description can be
    disseminated through the Endpoint Event Listeners that have specified an
    interest in this description. If the bundle is stopped, the corresponding
    Endpoints must be removed.</para>

    <para>XML documents containing remote service descriptions must be
    specified by the Remote-Service header in the manifest. The structure of
    the Remote Service header is:</para>

    <programlisting>Remote-Service ::= header // See Common Header Syntax in Core</programlisting>

    <para>The value of the header is a comma separated list of paths. A path
    is:</para>

    <itemizedlist>
      <listitem>
        <para>A directory if it ends with a solidus (<code>'/' \u002F</code>).
        A directory is scanned for <code>*.xml</code> files.</para>
      </listitem>

      <listitem>
        <para>A path with wildcards. Such a path can use the wildcards in its
        last component, as defined in the <code>findEntries</code>
        method.</para>
      </listitem>

      <listitem>
        <para>A complete path, not having wildcards not ending in a solidus
        (<code>'/' \u002F</code>).</para>
      </listitem>
    </itemizedlist>

    <para>The Remote-Service header has no architected directives or
    attributes, unrecognized attributes and directives must be ignored.</para>

    <para>A Remote-Service manifest header specified in a fragment must be
    ignored. However, XML documents referenced by a bundle's Remote-Service
    manifest header can be contained in attached fragments. The required
    behavior for this is implemented in the <code>findEntries</code>
    method.</para>

    <para>The extender must process each XML document specified in this
    header. If an XML document specified by the header cannot be located in
    the bundle and its attached fragments, the extender must log an error
    message with the Log Service, if present, and continue.</para>

    <para>For example:</para>

    <programlisting>Remote-Service: lib/, remote/osgi/*.dsc, cnf/google.xml</programlisting>

    <para>This matches all resources in the lib directory matching
    <code>*.xml</code>, all resources in the <code>/remote/osgi</code>
    directory that end with <code>.dsc</code>, as well as the
    <code>google.xml</code> resource in the <code>cnf</code> directory.</para>

    <para>The namespace of these XML resources must be:</para>

    <programlisting> <code>http://www.osgi.org/xmlns/rsa/v1.0.0</code></programlisting>

    <para>This namespace describes a set of Endpoint Descriptions, where each
    Endpoint Description can provide a set of properties. The structure of
    this schema is:</para>

    <programlisting>endpoint-descriptions  ::= &lt;endpoint-description&gt;*
endpoint-description   ::= &lt;property&gt;*
property               ::= ( &lt;array&gt; | &lt;list&gt; | &lt;set&gt;| &lt;xml&gt; )?
array                  ::= &lt;value&gt; *
list                   ::= &lt;value&gt; *
set                    ::= &lt;value&gt; *
xml                    ::= &lt;*&gt; *</programlisting>

    <para>This structure is depicted in <xref linkend="i1889373" xrefstyle="template:Figure %n on page %p"/>.</para>

    <figure xml:id="i1889373">
      <title>Endpoint Description XML Structure</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="3.427in" contentwidth="6.262in" fileref="endpoint-xml-structure.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The <code>property</code> element has the attributes listed in table
    <xref linkend="service.remoteserviceadmin-property.attributes"/>.</para>

    <table xml:id="service.remoteserviceadmin-property.attributes">
      <title>Property Attributes</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="1*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="3*"/>

        <thead>
          <row>
            <entry>Attribute</entry>

            <entry>Type</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>name</code></entry>

            <entry><code>String</code></entry>

            <entry><para>The required name of the property. The type maps to
            the XML Schema <code>xsd:string</code> type.</para></entry>
          </row>

          <row>
            <entry><code>value-type</code></entry>

            <entry><para><code>  String</code></para><para><code>|
            long</code></para><para><code>| Long</code></para><para><code>|
            double</code></para><para><code>|
            Double</code></para><para><code>| float</code></para><para><code>|
            Float</code></para><para><code>| int</code></para><para><code>|
            Integer</code></para><para><code>| byte</code></para><para><code>|
            Byte</code></para><para><code>| char</code></para><para><code>|
            Character</code></para><para><code>|
            boolean</code></para><para><code>|
            Boolean</code></para><para><code>|
            short</code></para><para><code>| Short</code></para></entry>

            <entry><para>The optional type name of the property, the default
            is <code>String</code>. Any value in the value attribute or the
            value element when collections are used must be converted to the
            corresponding Java types. If the primitive form, for example
            <code>byte</code>, is specified for non-array types, then the
            value must be silently converted to the corresponding wrapper
            type.</para></entry>
          </row>

          <row>
            <entry><code>value</code></entry>

            <entry><code>String</code></entry>

            <entry><para>The value. Must be converted to the specified type if
            this is not the <code>String</code> type. The <code>value</code>
            attribute must not be used when the <code>property</code> element
            has a child element.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>A property can have an <code>array</code>, <code>list</code>,
    <code>set</code>, or <code>xml</code> child element. If a child element is
    present then it is an error if the <code>value</code> attribute is
    defined. It is also an error of there is no child element and no
    <code>value</code> attribute.</para>

    <para>The <code>array</code>, <code>list</code>, or <code>set</code> are
    <emphasis>multi-valued</emphasis>. That is, they contain 0 or more
    <code>value</code> elements. A value element contains text (a string) that
    must be converted to the given value-type or if not specified, left as is.
    Conversion must <emphasis>trim</emphasis> the leading and trailing white
    space characters as defined in the <code>Character.isWhitespace</code>
    method. No trimming must be done for strings. An array of primitive
    integers like <code>int[] {1,42,97}</code> can be encoded as
    follows:</para>

    <programlisting>&lt;property name="integers" value-type="int"&gt;
    &lt;array&gt;
        &lt;value&gt; 1&lt;/value&gt;
        &lt;value&gt;42&lt;/value&gt;
        &lt;value&gt;97&lt;/value&gt;
    &lt;/array&gt;
&lt;/property&gt;</programlisting>

    <para>The <code>xml</code> element is used to convey XML from other
    namespaces, it is allowed to contain one foreign XML root element, with
    any number of children, that will act as the root element of an XML
    document. This root element will be included in the corresponding property
    as a string. The XML element must be a valid XML document but not contain
    the XML processing instructions, the part between the <code>&lt;?</code>
    and <code>?&gt;</code>. The <code>value-type</code> of the property must
    be <code>String</code> or not set when an <code>xml</code> element is
    used, using another type is invalid.</para>

    <para>The <code>xml</code> element can be used to embed configuration
    information, making the Endpoint Description self contained.</para>

    <para>The following is an example of an <code>endpoint-descriptions</code>
    resource.</para>

    <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;endpoint-descriptions xmlns="http://www.osgi.org/xmlns/rsa/v1.0.0"&gt;
    &lt;endpoint-description&gt;
        &lt;property name="service.intents"&gt;
            &lt;list&gt;
                &lt;value&gt;SOAP&lt;/value&gt;
                &lt;value&gt;HTTP&lt;/value&gt;
            &lt;/list&gt;
        &lt;/property&gt;
        &lt;property name="endpoint.id" value="http://ws.acme.com:9000/hello"/&gt; 
        &lt;property name="endpoint.package.version.com.acme" value="4.2"/&gt;
        &lt;property name="objectClass"&gt;
            &lt;array&gt;
                &lt;value&gt;com.acme.Foo&lt;/value&gt;
            &lt;/array&gt;
        &lt;/property&gt;
        &lt;property name="service.imported.configs" value="com.acme"/&gt;
        &lt;property name="com.acme.ws.xml"&gt;
            &lt;xml&gt;
                &lt;config xmlns="http://acme.com/defs"&gt;
                    &lt;port&gt;1029&lt;/port&gt;
                    &lt;host&gt;www.acme.com&lt;/host&gt;
                &lt;/config&gt;
            &lt;/xml&gt;
        &lt;/property&gt;
    &lt;/endpoint-description&gt;
&lt;/endpoint-descriptions&gt;</programlisting>

    <para>Besides being in a separate resource, the static configuration as
    described here could also be part of a larger XML file. In that case the
    parser must ignore elements not part of the
    <code>http://www.osgi.org/xmlns/rsa/v1.0.0</code> namespace schema.</para>

    <section>
      <title>XML Schema</title>

      <para>This namespace of the schema is:</para>

      <programlisting>http://www.osgi.org/xmlns/rsa/v1.0.0</programlisting>

      <programlisting role="pgwide">&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"
  xmlns:rsa="http://www.osgi.org/xmlns/rsa/v1.0.0"
  targetNamespace="http://www.osgi.org/xmlns/rsa/v1.0.0"
  elementFormDefault="qualified" version="1.0.1"&gt;

  &lt;annotation&gt;
    &lt;documentation xml:lang="en"&gt;
      This is the XML Schema for endpoint descriptions used by
      the Remote Service Admin Specification. Endpoint descriptions
      are used to describe remote services to a client in cases
      where a real live Discovery system isn't used. An extender,
      such as a local Discovery Service can look for service
      descriptions in installed bundles and inform the Topology
      Manager of these remote services. The Topology Manager can then
      instruct the Remote Service Admin to create client proxies for
      these services.
    &lt;/documentation&gt;
  &lt;/annotation&gt;

  &lt;element name="endpoint-descriptions" type="rsa:Tendpoint-descriptions" /&gt;

  &lt;complexType name="Tendpoint-descriptions"&gt;
    &lt;sequence&gt;
      &lt;element name="endpoint-description" type="rsa:Tendpoint-description"
               minOccurs="1" maxOccurs="unbounded" /&gt;
        &lt;!--
          It is non-deterministic, per W3C XML Schema 1.0:
          http://www.w3.org/TR/xmlschema-1/#cos-nonambig to use
          namespace="##any" below.
        --&gt;
      &lt;any namespace="##other" minOccurs="0" maxOccurs="unbounded"
           processContents="lax" /&gt;
    &lt;/sequence&gt;
    &lt;anyAttribute processContents="lax" /&gt;
  &lt;/complexType&gt;

  &lt;complexType name="Tendpoint-description"&gt;
    &lt;annotation&gt;
      &lt;documentation xml:lang="en"&gt;
        A Distribution Provider can register a proxy with the properties
        provided. Whether or not it is instructed to do so, is up to the
        Topology Manager. If any 'intents' properties are specified then the
        Distribution Provider should only register a proxy if it can support 
        those intents.
      &lt;/documentation&gt;
    &lt;/annotation&gt;
    &lt;sequence&gt;
      &lt;element name="property" type="rsa:Tproperty" minOccurs="1"
               maxOccurs="unbounded" /&gt;
      &lt;any namespace="##other" minOccurs="0" maxOccurs="unbounded"
           processContents="lax" /&gt;
    &lt;/sequence&gt;
    &lt;anyAttribute processContents="lax" /&gt;
  &lt;/complexType&gt;

  &lt;complexType name="Tproperty" mixed="true"&gt;
    &lt;sequence&gt;
      &lt;choice minOccurs="0" maxOccurs="1"&gt;
        &lt;element name="array" type="rsa:Tmulti-value"/&gt;
        &lt;element name="list" type="rsa:Tmulti-value"/&gt;
        &lt;element name="set" type="rsa:Tmulti-value"/&gt;
        &lt;element name="xml" type="rsa:Txml"/&gt;
      &lt;/choice&gt;
      &lt;any namespace="##other" minOccurs="0" maxOccurs="unbounded"
           processContents="lax" /&gt;
    &lt;/sequence&gt;
    &lt;attribute name="name" type="string" use="required" /&gt;
    &lt;attribute name="value" type="string" use="optional" /&gt;
    &lt;attribute name="value-type" type="rsa:Tvalue-types" default="String" use="optional" /&gt;
    &lt;anyAttribute processContents="lax" /&gt;
  &lt;/complexType&gt;
  
  &lt;complexType name="Tmulti-value"&gt;
    &lt;sequence&gt;
      &lt;element name="value" minOccurs="0" maxOccurs="unbounded" type="rsa:Tvalue"/&gt;
      &lt;any namespace="##other" minOccurs="0" maxOccurs="unbounded"
           processContents="lax" /&gt;      
    &lt;/sequence&gt;
    &lt;anyAttribute processContents="lax" /&gt;
  &lt;/complexType&gt;
  
  &lt;complexType name="Tvalue" mixed="true"&gt;
    &lt;sequence&gt;
      &lt;element name="xml" minOccurs="0" maxOccurs="1" type="rsa:Txml"/&gt;
      &lt;any namespace="##other" minOccurs="0" maxOccurs="unbounded"
           processContents="lax" /&gt;      
    &lt;/sequence&gt;
    &lt;anyAttribute processContents="lax" /&gt;
  &lt;/complexType&gt;
  
  &lt;!-- Specifies the data type of a property or of the elements in a multi-value  
       property. Numerical and boolean values are trimmed before they are processed.
       Simple types are automatically boxed if needed. Only the array data type 
       allows for simple type values. When specifying a simple type on any other 
       type of property it will automatically be boxed. --&gt;
  &lt;simpleType name="Tvalue-types"&gt;
    &lt;restriction base="string"&gt;
      &lt;enumeration value="String" /&gt;
      &lt;enumeration value="long" /&gt;
      &lt;enumeration value="Long" /&gt;
      &lt;enumeration value="double" /&gt;
      &lt;enumeration value="Double" /&gt;
      &lt;enumeration value="float" /&gt;
      &lt;enumeration value="Float" /&gt;
      &lt;enumeration value="int" /&gt;
      &lt;enumeration value="Integer" /&gt;
      &lt;enumeration value="byte" /&gt;
      &lt;enumeration value="Byte" /&gt;
      &lt;enumeration value="char" /&gt;
      &lt;enumeration value="Character" /&gt;
      &lt;enumeration value="boolean" /&gt;
      &lt;enumeration value="Boolean" /&gt;
      &lt;enumeration value="short" /&gt;
      &lt;enumeration value="Short" /&gt;
    &lt;/restriction&gt;
  &lt;/simpleType&gt;
  
  &lt;!-- This complex type allows literal XML to be specified in an &lt;xml/&gt; tag (which 
       is more convenient than putting it in a CDATA section). 
       The embedded XML must be well-formed and not be in the rsa namespace. It will 
       be put in a String value of a property or in an element of a multi-value 
       property of base type String. The XML will be prefixed with the standard 
       &lt;?XML ?&gt; header which is copied from the enclosing document. Hence it will 
       carry the same version and encoding as the document in the rsa namespace. --&gt;
  &lt;complexType name="Txml"&gt;
    &lt;sequence&gt;
      &lt;any namespace="##other" minOccurs="1" maxOccurs="1"
           processContents="lax" /&gt;
    &lt;/sequence&gt;
    &lt;anyAttribute processContents="lax" /&gt;
  &lt;/complexType&gt;

  &lt;attribute name="must-understand" type="boolean" default="false"&gt;
    &lt;annotation&gt;
      &lt;documentation xml:lang="en"&gt;
        This attribute should be used by extensions to documents
        to require that the document consumer understand the
        extension.
      &lt;/documentation&gt;
    &lt;/annotation&gt;
  &lt;/attribute&gt;
&lt;/schema&gt;
</programlisting>
    </section>
  </section>

  <section>
    <title>Capability Namespaces</title>

    <section>
      <title>Local Discovery Extender</title>

      <para>A bundle containing Endpoint Description Extender resources can
      indicate its dependency on the Remote Service Admin extender by
      declaring a requirement on the <code>osgi.extender</code>
      namespace.</para>

      <programlisting>Require-Capability: osgi.extender;
    filter:="(&amp;(osgi.extender=osgi.remoteserviceadmin.localdiscovery)
             (version&gt;=1.0)(!(version&gt;=2.0)))"</programlisting>

      <para>With this constraint declared a bundle that depends on the
      extender will fail to resolve if no extender is present in the
      framework.</para>

      <para>Implementations of this specification must provide this extender
      capability at version 1.0 as follows:</para>

      <programlisting>Provide-Capability: osgi.extender;
    osgi.extender="osgi.remoteserviceadmin.localdiscovery";
    version:Version="1.0";
    uses:="org.osgi.service.remoteserviceadmin"</programlisting>

      <para>The reason that the extender capability is declared at version 1.0
      is because the extender is unchanged from version 1.0 of this
      specification.</para>
    </section>

    <section>
      <title>Discovery Provider Capability</title>

      <para>Discovery Providers use the
      <code>osgi.remoteserviceadmin.discovery</code> namespace to declare
      themselves as such. The version defined for this namespace indicates the
      version of this specification that the discovery provider
      supports.</para>

      <para>This namespace has a defined attribute, <code>protocols</code> of
      type <code>List&lt;String&gt;</code>, which contains a list of the
      discovery protocols supported by the discovery provider. Local discovery
      providers (using the <xref linkend="i1889341"/>), should use the value
      <code>local</code> to indicate that they support this. Additionally, it
      defines a <code>version</code> attribute. Other values for the protocols
      attribute are implementation specific.</para>

      <table pgwide="1">
        <title>osgi.remoteserviceadmin.discovery Namespace</title>

        <tgroup cols="6">
          <colspec colnum="1" colwidth="2*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="1*"/>

          <colspec colnum="4" colwidth="2*"/>

          <colspec colnum="5" colwidth="3.5*"/>

          <colspec colnum="6" colwidth="7*"/>

          <thead>
            <row>
              <entry>Name</entry>

              <entry>Kind</entry>

              <entry>M/O</entry>

              <entry>Type</entry>

              <entry>Syntax</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>protocols</code></entry>

              <entry><code>CA</code></entry>

              <entry><code>M</code></entry>

              <entry><code>List&lt;String&gt;</code></entry>

              <entry><code>symbolic-name</code></entry>

              <entry><para>The discovery protocols supported. A value of
              <code>local</code> indicates support for the <xref linkend="i1889341"/>.</para></entry>
            </row>

            <row>
              <entry><code>version</code></entry>

              <entry><code>CA</code></entry>

              <entry><code>M</code></entry>

              <entry><code>Version</code></entry>

              <entry><code>version</code></entry>

              <entry><para>This version must correspond to the version of the
              Remote Service Admin specification.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Example: A discovery provider that provides local and SLP
      discovery:</para>

      <programlisting>Provide-Capability: osgi.remoteserviceadmin.discovery;
    protocols:List&lt;String&gt;="SLP,local"; version:Version=1.1</programlisting>
    </section>

    <section>
      <title>Distribution Provider Capability</title>

      <para>Distribution providers advertise their supported distribution
      mechanisms using configuration types. These are selected at runtime
      using the <code>service.exported.configs</code> service property.
      Distribution providers can use the
      <code>osgi.remoteserviceadmin.distribution</code> namespace with
      attribute <code>configs</code>, of type <code>List&lt;String&gt;</code>,
      to advertise the supported config types.</para>

      <table pgwide="1">
        <title>osgi.remoteserviceadmin.distribution Namespace</title>

        <tgroup cols="6">
          <colspec colnum="1" colwidth="2*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="1*"/>

          <colspec colnum="4" colwidth="2*"/>

          <colspec colnum="5" colwidth="3.5*"/>

          <colspec colnum="6" colwidth="7*"/>

          <thead>
            <row>
              <entry>Name</entry>

              <entry>Kind</entry>

              <entry>M/O</entry>

              <entry>Type</entry>

              <entry>Syntax</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>configs</code></entry>

              <entry><code>CA</code></entry>

              <entry><code>M</code></entry>

              <entry><code>List&lt;String&gt;</code></entry>

              <entry><code>symbolic-name</code></entry>

              <entry><para>Supported configuration types. See <xref linkend="service.remoteserviceadmin.endpointdescription"/>
              .</para></entry>
            </row>

            <row>
              <entry><code>version</code></entry>

              <entry><code>CA</code></entry>

              <entry><code>M</code></entry>

              <entry><code>Version</code></entry>

              <entry><code>version</code></entry>

              <entry><para>This version must correspond to the version of the
              Remote Service Admin specification.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Example: A Distribution provider that supports the
      <code>org.acme.jaxws</code> and <code>org.acme.jaxrs</code>
      configuration types:</para>

      <programlisting>Provide-Capability: osgi.remoteserviceadmin.distribution;
    configs:List&lt;String&gt;="org.acme.jaxws,org.acme.jaxrs"; version:Version=1.1</programlisting>
    </section>

    <section>
      <title>Topology Manager Capability</title>

      <para>Remote Service Admin topology managers may use different policies
      when determining which services to export and/or import. Topology
      managers use the namespace <code>osgi.remoteserviceadmin.topology</code>
      to declare this behavior. This namespace defines the <code>policy</code>
      attribute of type <code>List&lt;String&gt;</code>. Values are
      implementation specific, but example definitions can be found at <xref linkend="service.remoteserviceadmin-example.policies"/>.</para>

      <table pgwide="1">
        <title>osgi.remoteserviceadmin.topology Namespace</title>

        <tgroup cols="6">
          <colspec colnum="1" colwidth="2*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="1*"/>

          <colspec colnum="4" colwidth="2*"/>

          <colspec colnum="5" colwidth="3.5*"/>

          <colspec colnum="6" colwidth="7*"/>

          <thead>
            <row>
              <entry>Name</entry>

              <entry>Kind</entry>

              <entry>M/O</entry>

              <entry>Type</entry>

              <entry>Syntax</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>policy</code></entry>

              <entry><code>CA</code></entry>

              <entry><code>M</code></entry>

              <entry><code>List&lt;String&gt;</code></entry>

              <entry><code>symbolic-name</code></entry>

              <entry><para>The policy used for importing and exporting
              services. In general the policy is implementation
              specific.</para></entry>
            </row>

            <row>
              <entry><code>version</code></entry>

              <entry><code>CA</code></entry>

              <entry><code>M</code></entry>

              <entry><code>Version</code></entry>

              <entry><code>version</code></entry>

              <entry><para>This version must correspond to the version of the
              Remote Service Admin specification.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Example: A Topology manager that supports a
      <emphasis>promiscuous</emphasis> policy:</para>

      <programlisting>Provide-Capability: osgi.remoteserviceadmin.topology;
    policy:List&lt;String&gt;=promiscuous; version:Version=1.1</programlisting>
    </section>

    <section>
      <title>Service Capability</title>

      <para>The Distribution Provider provides the <link linkend="service.remoteserviceadmin-rsa.service"> <emphasis>Remote
      Service Admin</emphasis></link> service. To inform tools about this
      service it must provide the <link linkend="service.namespaces-osgi.service.namespace"><code>osgi.service</code></link>
      namespace representing the <xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdmin" xrefstyle="hyperlink"/> service. This capability must also declare a
      uses constraint for the <code>org.osgi.service.remoteserviceadmin</code>
      package:</para>

      <programlisting>Provide-Capability: osgi.service;
  objectClass:List&lt;String&gt;=
    "org.osgi.service.remoteserviceadmin.RemoteServiceAdmin";
  uses:="org.osgi.service.remoteserviceadmin"</programlisting>

      <para>This capability must follow the rules defined for the <xref linkend="service.namespaces-osgi.service.namespace"/>.</para>
    </section>
  </section>

  <section>
    <title>Advice to implementations</title>

    <para>This section is not intended to be normative, but offers advice to
    implementations as to how the complexity of supporting both the new
    Endpoint Event Listener and Endpoint Listener services can be managed and
    minimized. This advice applies to both Discovery Providers and Topology
    Managers implementing Remote Service Admin <code>1.1</code>.</para>

    <section>
      <title>Notifying listeners</title>

      <para>Endpoint Event Listeners and Endpoint Listeners have a very
      similar behavior and lifecycle. They also use the same property names to
      define their scope filter. It is therefore relatively simple for an
      Endpoint Description Provider to notify both Endpoint Listener and
      Endpoint Event Listeners using a single code path.</para>

      <para>One possible mechanism is to track both the listener types using
      the same Service Tracker. If the tracked Service Reference advertises
      the <code>EndpointEventListener</code> interface then it must be treated
      as an Endpoint Event Listener. If not then the Endpoint Listener service
      can be wrapped in an adapter that converts Endpoint Event Listener
      events into the appropriate Endpoint Listener calls. The main
      notification code path can then treat every listener as an Endpoint
      Event Listener.</para>
    </section>

    <section>
      <title>Receiving Endpoint lifecycle notifications</title>

      <para>The Remote Service Admin <code>1.1</code> specification is
      backward compatible with version <code>1.0</code>, meaning that version
      1.1 actors must register an Endpoint Listener service. There is no
      restriction requiring this listener to be the same service as the
      Endpoint Event Listener, however there is a significant advantage to
      combining the listeners into a single service registration.</para>

      <para>By making the two listeners a single service object a bundle can
      guarantee that it will not receive multiple notifications for the same
      event. If the service registrations are separate then Endpoint
      Description Providers will see two separate listeners, and notify them
      both. As a single service registration only one event will occur, and
      using the highest mutually supported version of the Remote Service Admin
      Specification.</para>
    </section>
  </section>

  <section xml:id="i1789427">
    <title>Security</title>

    <para>From a security point of view distribution is a significant threat.
    A Distribution Provider requires very significant capabilities to be able
    to proxy services. In many situations it will be required to grant the
    distribution provider All Permission. It is therefore highly recommended
    that Distribution Providers use trusted links and ensure that it is not
    possible to attack a system through the Remote Services Admin service and
    used discovery protocols.</para>

    <section>
      <title>Import and Export Registrations</title>

      <para>Import and Export Registrations are
      <emphasis>capabilities</emphasis>. That is, they can only be obtained
      when the caller has the proper permissions but once obtained they are no
      longer checked. The caller should therefore be careful to share those
      objects with other bundles. Export and Import References are free to
      share.</para>
    </section>

    <section>
      <title>Endpoint Permission</title>

      <para>The Remote Service Admin implementation requires a large set of
      permissions because it must be able to distribute potentially any
      service. Giving these extensive capabilities to all Topology Managers
      would make it harder to developer general Topology Managers that
      implements specific scenarios. For this reason, this specification
      provides an Endpoint Permission.</para>

      <para>When an Endpoint Permission must be verified, it must be created
      with an Endpoint Description as argument, like:</para>

      <programlisting>sm.checkPermission( new EndpointPermission(anEndpoint,localUUID,READ));</programlisting>

      <para>The standard name and action constructor is used to define a
      permission. The name argument is a filter expression. The filter for an
      Endpoint Permission is applied to the properties of an Endpoint
      Description. The <code>localUUID</code> must map to the UUID of the
      framework of the caller of this constructor, see <xref linkend="i1887500"/>. This <code>localUUID</code> is used to allow a the
      permissions to use the <code>&lt;&lt;LOCAL&gt;&gt;</code> magic name in
      the permission filter to refer to the local framework.</para>

      <para>The filter expression can use the following magic value:</para>

      <itemizedlist>
        <listitem>
          <para><code>&lt;&lt;LOCAL&gt;&gt;</code> - This value represents the
          framework UUID of the framework that this bundle belongs to. The
          following example restricts the visibility to descriptions of local
          Endpoints:</para>

          <programlisting>  ALLOW { 
    ...EndpointPermission
         "(endpoint.framework.uuid=&lt;&lt;LOCAL&gt;&gt;)" 
         "READ" }</programlisting>
        </listitem>
      </itemizedlist>

      <para>An Endpoint Permission that has the actions listed in the
      following table.</para>

      <table>
        <title>Endpoint Permission Actions</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="0.8*"/>

          <colspec colnum="2" colwidth="4*"/>

          <colspec colnum="3" colwidth="3.1*"/>

          <thead>
            <row>
              <entry>Action</entry>

              <entry>Methods</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>IMPORT</code></entry>

              <entry><para><xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.importService-EndpointDescription-" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Import an Endpoint</para></entry>
            </row>

            <row>
              <entry><code>EXPORT</code></entry>

              <entry><para><xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.exportService-ServiceReference-Map-" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Export a service</para></entry>
            </row>

            <row>
              <entry><code>READ</code></entry>

              <entry><para><xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.getExportedServices--" xrefstyle="hyperlink"/></para><para><xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.getImportedEndpoints--" xrefstyle="hyperlink"/></para><para><xref linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminListener.remoteAdminEvent-RemoteServiceAdminEvent-" xrefstyle="hyperlink"/></para></entry>

              <entry><para>See the presence of distributed services. The
              <code>IMPORT</code> and <code>EXPORT</code> action imply
              <code>READ</code>. Distribution of events to the Remote Service
              Admin Listener. The Remote Service Admin must verify that the
              listener's bundle has the proper permission. No events should be
              delivered that are not implied.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.remoteserviceadmin" xml:id="org.osgi.service.remoteserviceadmin" xml:base="../../generated/javadoc/docbook/org.osgi.service.remoteserviceadmin.xml">
   <title>org.osgi.service.remoteserviceadmin</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.remoteserviceadmin-version">Version 1.1</releaseinfo>
      <edition xml:id="org.osgi.service.remoteserviceadmin-version.number">1.1</edition>
   </info>
   <para>
Remote Service Admin Package Version 1.1.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.remoteserviceadmin; version="[1.1,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.remoteserviceadmin; version="[1.1,1.2)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.remoteserviceadmin.EndpointDescription">
                  <code>EndpointDescription</code>
               </link> - 
A description of an endpoint that provides sufficient information for a
 compatible distribution provider to create a connection to this endpoint
 
 An Endpoint Description is easy to transfer between different systems because
 it is property based where the property keys are strings and the values are
 simple types.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.remoteserviceadmin.EndpointEvent">
                  <code>EndpointEvent</code>
               </link> - 
An Endpoint Event.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.remoteserviceadmin.EndpointEventListener">
                  <code>EndpointEventListener</code>
               </link> - 
A white board service that represents a listener for endpoints.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.remoteserviceadmin.EndpointListener">
                  <code>EndpointListener</code>
               </link> - 
Deprecated white board service that represents a listener for endpoints.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.remoteserviceadmin.EndpointPermission">
                  <code>EndpointPermission</code>
               </link> - 
A bundle's authority to export, import or read an Endpoint.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.remoteserviceadmin.ExportReference">
                  <code>ExportReference</code>
               </link> - 
An Export Reference associates a service with a local endpoint.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.remoteserviceadmin.ExportRegistration">
                  <code>ExportRegistration</code>
               </link> - 
An Export Registration associates a service to a local endpoint.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.remoteserviceadmin.ImportReference">
                  <code>ImportReference</code>
               </link> - 
An Import Reference associates an active proxy service to a remote endpoint.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.remoteserviceadmin.ImportRegistration">
                  <code>ImportRegistration</code>
               </link> - 
An Import Registration associates an active proxy service to a remote
 endpoint.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.remoteserviceadmin.RemoteConstants">
                  <code>RemoteConstants</code>
               </link> - 
Provide the definition of the constants used in the Remote Service Admin
 specification.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdmin">
                  <code>RemoteServiceAdmin</code>
               </link> - 
A Remote Service Admin manages the import and export of services.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent">
                  <code>RemoteServiceAdminEvent</code>
               </link> - 
Provides the event information for a Remote Service Admin event.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminListener">
                  <code>RemoteServiceAdminListener</code>
               </link> - 
A <link linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent">RemoteServiceAdminEvent</link> listener is notified synchronously of any
 export or import registrations and unregistrations.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="EndpointDescription" xml:id="org.osgi.service.remoteserviceadmin.EndpointDescription">
      <title>public class EndpointDescription</title>
      <para>
A description of an endpoint that provides sufficient information for a
 compatible distribution provider to create a connection to this endpoint
 
 An Endpoint Description is easy to transfer between different systems because
 it is property based where the property keys are strings and the values are
 simple types. This allows it to be used as a communications device to convey
 available endpoint information to nodes in a network.
 
 An Endpoint Description reflects the perspective of an <emphasis>importer</emphasis>. That
 is, the property keys have been chosen to match filters that are created by
 client bundles that need a service. Therefore the map must not contain any
 <code>service.exported.*</code> property and must contain the corresponding
 <code>service.imported.*</code> ones.
 
 The <code>service.intents</code> property must contain the intents provided by the
 service itself combined with the intents added by the exporting distribution
 provider. Qualified intents appear fully expanded on this property.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="method" xreflabel="EndpointDescription(Map)" xml:id="org.osgi.service.remoteserviceadmin.EndpointDescription.EndpointDescription-Map-">
         <title>public  EndpointDescription(Map&lt;String,?&gt; properties)</title>
         <formalpara role="parameter">
            <title>properties</title>
            <para>The map from which to create the Endpoint Description.
        The keys in the map must be type <code>String</code> and, since the
        keys are case insensitive, there must be no duplicates with case
        variation.</para>
         </formalpara>
         <para role="description">
Create an Endpoint Description from a Map.
 
 </para>
         <para>
 The <link linkend="org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_ID">endpoint.id</link>,
 <link linkend="org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_IMPORTED_CONFIGS">service.imported.configs</link>
 and <code>objectClass</code> properties must be set.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– When the properties are not proper for
         an Endpoint Description.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="EndpointDescription(ServiceReference,Map)" xml:id="org.osgi.service.remoteserviceadmin.EndpointDescription.EndpointDescription-ServiceReference-Map-">
         <title>public  EndpointDescription(ServiceReference&lt;?&gt; reference,Map&lt;String,?&gt; properties)</title>
         <formalpara role="parameter">
            <title>reference</title>
            <para>A service reference that can be exported.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>properties</title>
            <para>Map of properties. This argument can be <code>null</code>.
        The keys in the map must be type <code>String</code> and, since the
        keys are case insensitive, there must be no duplicates with case
        variation.</para>
         </formalpara>
         <para role="description">
Create an Endpoint Description based on a Service Reference and a Map of
 properties. The properties in the map take precedence over the properties
 in the Service Reference.
 
 </para>
         <para>
 This method will automatically set the
 <link linkend="org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_FRAMEWORK_UUID">endpoint.framework.uuid</link>
 and <link linkend="org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_SERVICE_ID">endpoint.service.id</link>
 properties based on the specified Service Reference as well as the
 <link linkend="org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_IMPORTED">service.imported</link> property if
 they are not specified as properties.
 </para>
         <para>
 The <link linkend="org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_ID">endpoint.id</link>,
 <link linkend="org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_IMPORTED_CONFIGS">service.imported.configs</link>
 and <code>objectClass</code> properties must be set.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– When the properties are not proper for
         an Endpoint Description   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.remoteserviceadmin.EndpointDescription.equals-Object-">
         <title>public boolean equals(Object other)</title>
         <formalpara role="parameter">
            <title>other</title>
            <para>The <code>EndpointDescription</code> object to be compared.</para>
         </formalpara>
         <para role="description">
Compares this <code>EndpointDescription</code> object to another object.
 
 </para>
         <para>
 An Endpoint Description is considered to be <emphasis role="strong">equal to</emphasis> another
 Endpoint Description if their ids are equal.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if <code>object</code> is a <code>EndpointDescription</code>
         and is equal to this object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getConfigurationTypes()" xml:id="org.osgi.service.remoteserviceadmin.EndpointDescription.getConfigurationTypes--">
         <title>public List&lt;String&gt; getConfigurationTypes()</title>
         <para role="description">
Returns the configuration types.
 
 A distribution provider exports a service with an endpoint. This endpoint
 uses some kind of communications protocol with a set of configuration
 parameters. There are many different types but each endpoint is
 configured by only one configuration type. However, a distribution
 provider can be aware of different configuration types and provide
 synonyms to increase the change a receiving distribution provider can
 create a connection to this endpoint.
 
 This value of the configuration types is stored in the
 <link linkend="org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_IMPORTED_CONFIGS">RemoteConstants.SERVICE_IMPORTED_CONFIGS</link> service property.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable list of the configuration types used for the
         associated endpoint and optionally synonyms.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFrameworkUUID()" xml:id="org.osgi.service.remoteserviceadmin.EndpointDescription.getFrameworkUUID--">
         <title>public String getFrameworkUUID()</title>
         <para role="description">
Return the framework UUID for the remote service, if present.
 
 The value of the remote framework UUID is stored in the
 <link linkend="org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_FRAMEWORK_UUID">RemoteConstants.ENDPOINT_FRAMEWORK_UUID</link> endpoint property.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Remote Framework UUID, or <code>null</code> if this endpoint is not
         associated with an OSGi framework having a framework UUID.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getId()" xml:id="org.osgi.service.remoteserviceadmin.EndpointDescription.getId--">
         <title>public String getId()</title>
         <para role="description">
Returns the endpoint's id.
 
 The id is an opaque id for an endpoint. No two different endpoints must
 have the same id. Two Endpoint Descriptions with the same id must
 represent the same endpoint.
 
 The value of the id is stored in the <link linkend="org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_ID">RemoteConstants.ENDPOINT_ID</link>
 property.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The id of the endpoint, never <code>null</code>. The returned value
         has leading and trailing whitespace removed.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getIntents()" xml:id="org.osgi.service.remoteserviceadmin.EndpointDescription.getIntents--">
         <title>public List&lt;String&gt; getIntents()</title>
         <para role="description">
Return the list of intents implemented by this endpoint.
 
 The intents are based on the service.intents on an imported service,
 except for any intents that are additionally provided by the importing
 distribution provider. All qualified intents must have been expanded.
 
 This value of the intents is stored in the
 <link linkend="org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_INTENTS">RemoteConstants.SERVICE_INTENTS</link> service property.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable list of expanded intents that are provided by
         this endpoint.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getInterfaces()" xml:id="org.osgi.service.remoteserviceadmin.EndpointDescription.getInterfaces--">
         <title>public List&lt;String&gt; getInterfaces()</title>
         <para role="description">
Provide the list of interfaces implemented by the exported service.
 
 The value of the interfaces is derived from the <code>objectClass</code>
 property.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable list of Java interface names implemented by this
         endpoint.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getPackageVersion(String)" xml:id="org.osgi.service.remoteserviceadmin.EndpointDescription.getPackageVersion-String-">
         <title>public Version getPackageVersion(String packageName)</title>
         <formalpara role="parameter">
            <title>packageName</title>
            <para>The name of the package for which a version is
        requested.</para>
         </formalpara>
         <para role="description">
Provide the version of the given package name.
 
 The version is encoded by prefixing the given package name with
 <link linkend="org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_PACKAGE_VERSION_">endpoint.package.version.</link>, and then using this as an endpoint property
 key. For example:
 
 </para>
         <programlisting> endpoint.package.version.com.acme</programlisting>
         <para>
 
 The value of this property is in String format and will be converted to a
 <code>Version</code> object by this method.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The version of the specified package or
         <code>Version.emptyVersion</code> if the package has no version in
         this Endpoint Description.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the version property value is not
         String.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getProperties()" xml:id="org.osgi.service.remoteserviceadmin.EndpointDescription.getProperties--">
         <title>public Map&lt;String,Object&gt; getProperties()</title>
         <para role="description">
Returns all endpoint properties.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable map referring to the properties of this Endpoint
         Description.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getServiceId()" xml:id="org.osgi.service.remoteserviceadmin.EndpointDescription.getServiceId--">
         <title>public long getServiceId()</title>
         <para role="description">
Returns the service id for the service exported through this endpoint.
 
 This is the service id under which the framework has registered the
 service. This field together with the Framework UUID is a globally unique
 id for a service.
 
 The value of the remote service id is stored in the
 <link linkend="org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_SERVICE_ID">RemoteConstants.ENDPOINT_SERVICE_ID</link> endpoint property.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Service id of a service or 0 if this Endpoint Description does
         not relate to an OSGi service.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.remoteserviceadmin.EndpointDescription.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns a hash code value for the object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An integer which is a hash code value for this object.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="isSameService(EndpointDescription)" xml:id="org.osgi.service.remoteserviceadmin.EndpointDescription.isSameService-EndpointDescription-">
         <title>public boolean isSameService(EndpointDescription other)</title>
         <formalpara role="parameter">
            <title>other</title>
            <para>The Endpoint Description to look at</para>
         </formalpara>
         <para role="description">
Answers if this Endpoint Description refers to the same service instance
 as the given Endpoint Description.
 
 Two Endpoint Descriptions point to the same service if they have the same
 id or their framework UUIDs and remote service ids are equal.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>True if this endpoint description points to the same service as
         the other</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="matches(String)" xml:id="org.osgi.service.remoteserviceadmin.EndpointDescription.matches-String-">
         <title>public boolean matches(String filter)</title>
         <formalpara role="parameter">
            <title>filter</title>
            <para>The filter to test.</para>
         </formalpara>
         <para role="description">
Tests the properties of this <code>EndpointDescription</code> against the
 given filter using a case insensitive match.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> If the properties of this
         <code>EndpointDescription</code> match the filter, <code>false</code>
         otherwise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If <code>filter</code> contains an invalid
         filter string that cannot be parsed.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="toString()" xml:id="org.osgi.service.remoteserviceadmin.EndpointDescription.toString--">
         <title>public String toString()</title>
         <para role="description">
Returns the string representation of this EndpointDescription.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>String form of this EndpointDescription.</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="EndpointEvent" xml:id="org.osgi.service.remoteserviceadmin.EndpointEvent">
      <title>public class EndpointEvent</title>
      <para>
An Endpoint Event.
 </para>
      <para/>
      <para>
         <code>EndpointEvent</code> objects are delivered to all registered
 <link linkend="org.osgi.service.remoteserviceadmin.EndpointEventListener">EndpointEventListener</link> services where the <link linkend="org.osgi.service.remoteserviceadmin.EndpointDescription">EndpointDescription</link>
 properties match one of the filters specified in the
 <link linkend="org.osgi.service.remoteserviceadmin.EndpointEventListener.ENDPOINT_LISTENER_SCOPE">EndpointEventListener.ENDPOINT_LISTENER_SCOPE</link> registration properties
 of the Endpoint Event Listener.
 </para>
      <para/>
      <para>
 
 A type code is used to identify the type of event. The following event types
 are defined:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.remoteserviceadmin.EndpointEvent.ADDED">ADDED</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.remoteserviceadmin.EndpointEvent.REMOVED">REMOVED</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.remoteserviceadmin.EndpointEvent.MODIFIED">MODIFIED</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.remoteserviceadmin.EndpointEvent.MODIFIED_ENDMATCH">MODIFIED_ENDMATCH</link>
            </para>
         </listitem>
      </itemizedlist>
      <para>
 Additional event types may be defined in the future.
 </para>
      <para/>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.remoteserviceadmin.EndpointEventListener">EndpointEventListener</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="ADDED" xml:id="org.osgi.service.remoteserviceadmin.EndpointEvent.ADDED">
         <title>public static final int ADDED = 1</title>
         <para>
An endpoint has been added.
 </para>
         <para/>
         <para>
 
 This <code>EndpointEvent</code> type indicates that a new endpoint has been
 added. The endpoint is represented by the associated
 <link linkend="org.osgi.service.remoteserviceadmin.EndpointDescription">EndpointDescription</link> object.
   </para>
      </section>
      <section role="field" xreflabel="MODIFIED" xml:id="org.osgi.service.remoteserviceadmin.EndpointEvent.MODIFIED">
         <title>public static final int MODIFIED = 4</title>
         <para>
The properties of an endpoint have been modified.
 </para>
         <para/>
         <para>
 
 This <code>EndpointEvent</code> type indicates that the properties of an
 existing endpoint have been modified. The endpoint is represented by the
 associated <link linkend="org.osgi.service.remoteserviceadmin.EndpointDescription">EndpointDescription</link> object and its properties can be
 obtained via <link linkend="org.osgi.service.remoteserviceadmin.EndpointDescription.getProperties--">EndpointDescription.getProperties()</link>. The endpoint
 properties still match the filters as specified in the
 <link linkend="org.osgi.service.remoteserviceadmin.EndpointEventListener.ENDPOINT_LISTENER_SCOPE">EndpointEventListener.ENDPOINT_LISTENER_SCOPE</link> filter.
   </para>
      </section>
      <section role="field" xreflabel="MODIFIED_ENDMATCH" xml:id="org.osgi.service.remoteserviceadmin.EndpointEvent.MODIFIED_ENDMATCH">
         <title>public static final int MODIFIED_ENDMATCH = 8</title>
         <para>
The properties of an endpoint have been modified and the new properties
 no longer match the listener's filter.
 </para>
         <para/>
         <para>
 
 This <code>EndpointEvent</code> type indicates that the properties of an
 existing endpoint have been modified and no longer match the filter. The
 endpoint is represented by the associated <link linkend="org.osgi.service.remoteserviceadmin.EndpointDescription">EndpointDescription</link>
 object and its properties can be obtained via
 <link linkend="org.osgi.service.remoteserviceadmin.EndpointDescription.getProperties--">EndpointDescription.getProperties()</link>. As a consequence of the
 modification the filters as specified in the
 <link linkend="org.osgi.service.remoteserviceadmin.EndpointEventListener.ENDPOINT_LISTENER_SCOPE">EndpointEventListener.ENDPOINT_LISTENER_SCOPE</link> do not match any
 more.
   </para>
      </section>
      <section role="field" xreflabel="REMOVED" xml:id="org.osgi.service.remoteserviceadmin.EndpointEvent.REMOVED">
         <title>public static final int REMOVED = 2</title>
         <para>
An endpoint has been removed.
 </para>
         <para/>
         <para>
 
 This <code>EndpointEvent</code> type indicates that an endpoint has been
 removed. The endpoint is represented by the associated
 <link linkend="org.osgi.service.remoteserviceadmin.EndpointDescription">EndpointDescription</link> object.
   </para>
      </section>
      <section role="method" xreflabel="EndpointEvent(int,EndpointDescription)" xml:id="org.osgi.service.remoteserviceadmin.EndpointEvent.EndpointEvent-int-EndpointDescription-">
         <title>public  EndpointEvent(int type,EndpointDescription endpoint)</title>
         <formalpara role="parameter">
            <title>type</title>
            <para>The event type. See <link linkend="org.osgi.service.remoteserviceadmin.EndpointEvent.getType--">getType()</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>endpoint</title>
            <para>The endpoint associated with the event.</para>
         </formalpara>
         <para role="description">
Constructs a <code>EndpointEvent</code> object from the given arguments.
   </para>
      </section>
      <section role="method" xreflabel="getEndpoint()" xml:id="org.osgi.service.remoteserviceadmin.EndpointEvent.getEndpoint--">
         <title>public EndpointDescription getEndpoint()</title>
         <para role="description">
Return the endpoint associated with this event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The endpoint associated with the event.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.remoteserviceadmin.EndpointEvent.getType--">
         <title>public int getType()</title>
         <para role="description">
Return the type of this event.
 </para>
         <para/>
         <para>
 The type values are:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.remoteserviceadmin.EndpointEvent.ADDED">ADDED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.remoteserviceadmin.EndpointEvent.REMOVED">REMOVED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.remoteserviceadmin.EndpointEvent.MODIFIED">MODIFIED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.remoteserviceadmin.EndpointEvent.MODIFIED_ENDMATCH">MODIFIED_ENDMATCH</link>
               </para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The type of this event.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="EndpointEventListener" xml:id="org.osgi.service.remoteserviceadmin.EndpointEventListener">
      <title>public interface EndpointEventListener</title>
      <para>
A white board service that represents a listener for endpoints.
 
 An Endpoint Event Listener represents a participant in the distributed model
 that is interested in Endpoint Descriptions.
 
 This white board service can be used in many different scenarios. However,
 the primary use case is to allow a remote manager to be informed of Endpoint
 Descriptions available in the network and inform the network about available
 Endpoint Descriptions.
 
 Both the network bundle and the manager bundle register an Endpoint Event
 Listener service. The manager informs the network bundle about Endpoints that
 it creates. The network bundles then uses a protocol like SLP to announce
 these local end-points to the network.
 
 If the network bundle discovers a new Endpoint through its discovery
 protocol, then it sends an Endpoint Description to all the Endpoint Listener
 services that are registered (except its own) that have specified an interest
 in that endpoint.
 
 Endpoint Event Listener services can express their <emphasis>scope</emphasis> with the
 service property <link linkend="org.osgi.service.remoteserviceadmin.EndpointEventListener.ENDPOINT_LISTENER_SCOPE">ENDPOINT_LISTENER_SCOPE</link>. This service property is a
 list of filters. An Endpoint Description should only be given to a Endpoint
 Event Listener when there is at least one filter that matches the Endpoint
 Description properties.
 
 This filter model is quite flexible. For example, a discovery bundle is only
 interested in locally originating Endpoint Descriptions. The following filter
 ensures that it only sees local endpoints.
 
 </para>
      <programlisting>   (org.osgi.framework.uuid=72dc5fd9-5f8f-4f8f-9821-9ebb433a5b72)</programlisting>
      <para>
 
 In the same vein, a manager that is only interested in remote Endpoint
 Descriptions can use a filter like:
 
 </para>
      <programlisting>   (!(org.osgi.framework.uuid=72dc5fd9-5f8f-4f8f-9821-9ebb433a5b72))</programlisting>
      <para>
 
 Where in both cases, the given UUID is the UUID of the local framework that
 can be found in the Framework properties.
 
 The Endpoint Event Listener's scope maps very well to the service hooks. A
 manager can just register all filters found from the Listener Hook as its
 scope. This will automatically provide it with all known endpoints that match
 the given scope, without having to inspect the filter string.
 
 In general, when an Endpoint Description is discovered, it should be
 dispatched to all registered Endpoint Event Listener services. If a new
 Endpoint Event Listener is registered, it should be informed about all
 currently known Endpoints that match its scope. If a getter of the Endpoint
 Listener service is unregistered, then all its registered Endpoint
 Description objects must be removed.
 
 The Endpoint Event Listener models a <emphasis>best effort</emphasis> approach.
 Participating bundles should do their utmost to keep the listeners up to
 date, but implementers should realize that many endpoints come through
 unreliable discovery processes.
 
 The Endpoint Event Listener supersedes the <link linkend="org.osgi.service.remoteserviceadmin.EndpointListener">EndpointListener</link> interface
 as it also supports notifications around modifications of endpoints.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="ENDPOINT_LISTENER_SCOPE" xml:id="org.osgi.service.remoteserviceadmin.EndpointEventListener.ENDPOINT_LISTENER_SCOPE">
         <title>public static final String ENDPOINT_LISTENER_SCOPE = "endpoint.listener.scope"</title>
         <para>
Specifies the interest of this listener with filters. This listener is
 only interested in Endpoint Descriptions where its properties match the
 given filter. The type of this property must be <code>String+</code>.
   </para>
      </section>
      <section role="method" xreflabel="endpointChanged(EndpointEvent,String)" xml:id="org.osgi.service.remoteserviceadmin.EndpointEventListener.endpointChanged-EndpointEvent-String-">
         <title>public void endpointChanged(EndpointEvent event,String filter)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>The event containing the details about the change.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>filter</title>
            <para>The filter from the <link linkend="org.osgi.service.remoteserviceadmin.EndpointEventListener.ENDPOINT_LISTENER_SCOPE">ENDPOINT_LISTENER_SCOPE</link> that
        matches (or for <link linkend="org.osgi.service.remoteserviceadmin.EndpointEvent.MODIFIED_ENDMATCH">EndpointEvent.MODIFIED_ENDMATCH</link> and
        <link linkend="org.osgi.service.remoteserviceadmin.EndpointEvent.REMOVED">EndpointEvent.REMOVED</link> used to match) the endpoint, must
        not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Notification that an endpoint has changed.
 
 Details of the change is captured in the Endpoint Event provided. This
 could be that an endpoint was added, removed or modified.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="EndpointListener" xml:id="org.osgi.service.remoteserviceadmin.EndpointListener">
      <title>public interface EndpointListener</title>
      <para>
Deprecated white board service that represents a listener for endpoints.
 
 An Endpoint Listener represents a participant in the distributed model that
 is interested in Endpoint Descriptions.
 
 The Endpoint Listener is called back when matching endpoints are added or
 removed. Consumers interested in the modification of endpoints, when
 associated service properties are changed, should use an
 <link linkend="org.osgi.service.remoteserviceadmin.EndpointEventListener">EndpointEventListener</link> instead.
 
 This white board service can be used in many different scenarios. However,
 the primary use case is to allow a remote manager to be informed of Endpoint
 Descriptions available in the network and inform the network about available
 Endpoint Descriptions.
 
 Both the network bundle and the manager bundle register an Endpoint Listener
 service. The manager informs the network bundle about Endpoints that it
 creates. The network bundles then uses a protocol like SLP to announce these
 local end-points to the network.
 
 If the network bundle discovers a new Endpoint through its discovery
 protocol, then it sends an Endpoint Description to all the Endpoint Listener
 services that are registered (except its own) that have specified an interest
 in that endpoint.
 
 Endpoint Listener services can express their <emphasis>scope</emphasis> with the service
 property <link linkend="org.osgi.service.remoteserviceadmin.EndpointListener.ENDPOINT_LISTENER_SCOPE">ENDPOINT_LISTENER_SCOPE</link>. This service property is a list of
 filters. An Endpoint Description should only be given to a Endpoint Listener
 when there is at least one filter that matches the Endpoint Description
 properties.
 
 This filter model is quite flexible. For example, a discovery bundle is only
 interested in locally originating Endpoint Descriptions. The following filter
 ensure that it only sees local endpoints.
 
 </para>
      <programlisting>   (org.osgi.framework.uuid=72dc5fd9-5f8f-4f8f-9821-9ebb433a5b72)</programlisting>
      <para>
 
 In the same vein, a manager that is only interested in remote Endpoint
 Descriptions can use a filter like:
 
 </para>
      <programlisting>   (!(org.osgi.framework.uuid=72dc5fd9-5f8f-4f8f-9821-9ebb433a5b72))</programlisting>
      <para>
 
 Where in both cases, the given UUID is the UUID of the local framework that
 can be found in the Framework properties.
 
 The Endpoint Listener's scope maps very well to the service hooks. A manager
 can just register all filters found from the Listener Hook as its scope. This
 will automatically provide it with all known endpoints that match the given
 scope, without having to inspect the filter string.
 
 In general, when an Endpoint Description is discovered, it should be
 dispatched to all registered Endpoint Listener services. If a new Endpoint
 Listener is registered, it should be informed about all currently known
 Endpoints that match its scope. If a getter of the Endpoint Listener service
 is unregistered, then all its registered Endpoint Description objects must be
 removed.
 
 The Endpoint Listener models a <emphasis>best effort</emphasis> approach. Participating
 bundles should do their utmost to keep the listeners up to date, but
 implementers should realize that many endpoints come through unreliable
 discovery processes.
   </para>
      <formalpara role="parameter">
         <title>Deprecated</title>
         <para>As of 1.1. Replaced by EndpointEventListener.</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="ENDPOINT_LISTENER_SCOPE" xml:id="org.osgi.service.remoteserviceadmin.EndpointListener.ENDPOINT_LISTENER_SCOPE">
         <title>public static final String ENDPOINT_LISTENER_SCOPE = "endpoint.listener.scope"</title>
         <para>
Specifies the interest of this listener with filters. This listener is
 only interested in Endpoint Descriptions where its properties match the
 given filter. The type of this property must be <code>String+</code>.
   </para>
      </section>
      <section role="method" xreflabel="endpointAdded(EndpointDescription,String)" xml:id="org.osgi.service.remoteserviceadmin.EndpointListener.endpointAdded-EndpointDescription-String-">
         <title>public void endpointAdded(EndpointDescription endpoint,String matchedFilter)</title>
         <formalpara role="parameter">
            <title>endpoint</title>
            <para>The Endpoint Description to be published</para>
         </formalpara>
         <formalpara role="parameter">
            <title>matchedFilter</title>
            <para>The filter from the <link linkend="org.osgi.service.remoteserviceadmin.EndpointListener.ENDPOINT_LISTENER_SCOPE">ENDPOINT_LISTENER_SCOPE</link>
        that matched the endpoint, must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Register an endpoint with this listener.
 
 If the endpoint matches one of the filters registered with the
 <link linkend="org.osgi.service.remoteserviceadmin.EndpointListener.ENDPOINT_LISTENER_SCOPE">ENDPOINT_LISTENER_SCOPE</link> service property then this filter should
 be given as the <code>matchedFilter</code> parameter.
 
 When this service is first registered or it is modified, it should
 receive all known endpoints matching the filter.
   </para>
      </section>
      <section role="method" xreflabel="endpointRemoved(EndpointDescription,String)" xml:id="org.osgi.service.remoteserviceadmin.EndpointListener.endpointRemoved-EndpointDescription-String-">
         <title>public void endpointRemoved(EndpointDescription endpoint,String matchedFilter)</title>
         <formalpara role="parameter">
            <title>endpoint</title>
            <para>The Endpoint Description that is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>matchedFilter</title>
            <para>The filter from the <link linkend="org.osgi.service.remoteserviceadmin.EndpointListener.ENDPOINT_LISTENER_SCOPE">ENDPOINT_LISTENER_SCOPE</link>
        that matched the endpoint, must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Remove the registration of an endpoint.
 
 If an endpoint that was registered with the
 <link linkend="org.osgi.service.remoteserviceadmin.EndpointListener.endpointAdded-EndpointDescription-String-">endpointAdded(EndpointDescription, String)</link> method is no longer
 available then this method should be called. This will remove the
 endpoint from the listener.
 
 It is not necessary to remove endpoints when the service is unregistered
 or modified in such a way that not all endpoints match the interest
 filter anymore.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="EndpointPermission" xml:id="org.osgi.service.remoteserviceadmin.EndpointPermission">
      <title>public final class EndpointPermission<?line-break?> extends Permission</title>
      <para>
A bundle's authority to export, import or read an Endpoint.
 </para>
      <itemizedlist>
         <listitem>
            <para>The <code>export</code> action allows a bundle to export a service as an
 Endpoint.</para>
         </listitem>
         <listitem>
            <para>The <code>import</code> action allows a bundle to import a service from an
 Endpoint.</para>
         </listitem>
         <listitem>
            <para>The <code>read</code> action allows a bundle to read references to an
 Endpoint.</para>
         </listitem>
      </itemizedlist>
      <para>
 Permission to read an Endpoint is required in order to detect events
 regarding an Endpoint. Untrusted bundles should not be able to detect the
 presence of certain Endpoints unless they have the appropriate
 <code>EndpointPermission</code> to read the specific service.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="EXPORT" xml:id="org.osgi.service.remoteserviceadmin.EndpointPermission.EXPORT">
         <title>public static final String EXPORT = "export"</title>
         <para>
The action string <code>export</code>. The <code>export</code> action implies the
 <code>read</code> action.
   </para>
      </section>
      <section role="field" xreflabel="IMPORT" xml:id="org.osgi.service.remoteserviceadmin.EndpointPermission.IMPORT">
         <title>public static final String IMPORT = "import"</title>
         <para>
The action string <code>import</code>. The <code>import</code> action implies the
 <code>read</code> action.
   </para>
      </section>
      <section role="field" xreflabel="READ" xml:id="org.osgi.service.remoteserviceadmin.EndpointPermission.READ">
         <title>public static final String READ = "read"</title>
         <para>
The action string <code>read</code>.
   </para>
      </section>
      <section role="method" xreflabel="EndpointPermission(String,String)" xml:id="org.osgi.service.remoteserviceadmin.EndpointPermission.EndpointPermission-String-String-">
         <title>public  EndpointPermission(String filterString,String actions)</title>
         <formalpara role="parameter">
            <title>filterString</title>
            <para>The filter string or "*" to match all
        endpoints.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>The actions <code>read</code>, <code>import</code>, or
        <code>export</code>.</para>
         </formalpara>
         <para role="description">
Create a new EndpointPermission with the specified filter.
 
 </para>
         <para>
 The filter will be evaluated against the endpoint properties of a
 requested EndpointPermission.
 
 </para>
         <para>
 There are three possible actions: <code>read</code>, <code>import</code> and
 <code>export</code>. The <code>read</code> action allows the owner of this
 permission to see the presence of distributed services. The
 <code>import</code> action allows the owner of this permission to import an
 endpoint. The <code>export</code> action allows the owner of this permission
 to export a service.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the filter has an invalid syntax or
         the actions are not valid.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="EndpointPermission(EndpointDescription,String,String)" xml:id="org.osgi.service.remoteserviceadmin.EndpointPermission.EndpointPermission-EndpointDescription-String-String-">
         <title>public  EndpointPermission(EndpointDescription endpoint,String localFrameworkUUID,String actions)</title>
         <formalpara role="parameter">
            <title>endpoint</title>
            <para>The requested endpoint.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>localFrameworkUUID</title>
            <para>The UUID of the local framework. This is used
        to support matching the
        <link linkend="org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_FRAMEWORK_UUID">endpoint.framework.uuid</link> endpoint property to the
        <code>&lt;&lt;LOCAL&gt;&gt;</code> value in the filter expression.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>The actions <code>read</code>, <code>import</code>, or
        <code>export</code>.</para>
         </formalpara>
         <para role="description">
Creates a new requested <code>EndpointPermission</code> object to be used by
 code that must perform <code>checkPermission</code>.
 <code>EndpointPermission</code> objects created with this constructor cannot
 be added to an <code>EndpointPermission</code> permission collection.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the endpoint is <code>null</code> or the
         actions are not valid.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.remoteserviceadmin.EndpointPermission.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>The object to test for equality.</para>
         </formalpara>
         <para role="description">
Determines the equality of two EndpointPermission objects.
 
 Checks that specified object has the same name, actions and endpoint as
 this <code>EndpointPermission</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true If obj is a <code>EndpointPermission</code>, and has the same
         name, actions and endpoint as this <code>EndpointPermission</code>
         object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getActions()" xml:id="org.osgi.service.remoteserviceadmin.EndpointPermission.getActions--">
         <title>public String getActions()</title>
         <para role="description">
Returns the canonical string representation of the actions. Always
 returns present actions in the following canonical order: <code>read</code>,
 <code>import</code>, <code>export</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The canonical string representation of the actions.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.remoteserviceadmin.EndpointPermission.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code value for this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Hash code value for this object.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="implies(Permission)" xml:id="org.osgi.service.remoteserviceadmin.EndpointPermission.implies-Permission-">
         <title>public boolean implies(Permission p)</title>
         <formalpara role="parameter">
            <title>p</title>
            <para>The target permission to check.</para>
         </formalpara>
         <para role="description">
Determines if a <code>EndpointPermission</code> object "implies" the specified
 permission.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the specified permission is implied by this
         object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="newPermissionCollection()" xml:id="org.osgi.service.remoteserviceadmin.EndpointPermission.newPermissionCollection--">
         <title>public PermissionCollection newPermissionCollection()</title>
         <para role="description">
Returns a new <code>PermissionCollection</code> object for storing
 <code>EndpointPermission</code> objects.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new <code>PermissionCollection</code> object suitable for storing
         <code>EndpointPermission</code> objects.</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="ExportReference" xml:id="org.osgi.service.remoteserviceadmin.ExportReference">
      <title>public interface ExportReference</title>
      <para>
An Export Reference associates a service with a local endpoint.
 
 The Export Reference can be used to reference an exported service. When the
 service is no longer exported, all methods must return <code>null</code>.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="getExportedEndpoint()" xml:id="org.osgi.service.remoteserviceadmin.ExportReference.getExportedEndpoint--">
         <title>public EndpointDescription getExportedEndpoint()</title>
         <para role="description">
Return the Endpoint Description for the local endpoint.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Endpoint Description for the local endpoint. Must be
         <code>null</code> when the service is no longer exported.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getExportedService()" xml:id="org.osgi.service.remoteserviceadmin.ExportReference.getExportedService--">
         <title>public ServiceReference&lt;?&gt; getExportedService()</title>
         <para role="description">
Return the service being exported.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The service being exported. Must be <code>null</code> when the service
         is no longer exported.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ExportRegistration" xml:id="org.osgi.service.remoteserviceadmin.ExportRegistration">
      <title>public interface ExportRegistration</title>
      <para>
An Export Registration associates a service to a local endpoint.
 
 The Export Registration can be used to delete the endpoint associated with an
 this registration. It is created with the
 <link linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.exportService-ServiceReference-Map-">RemoteServiceAdmin.exportService(ServiceReference,Map)</link> method.
 
 When this Export Registration has been closed, all methods must return
 <code>null</code>.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="close()" xml:id="org.osgi.service.remoteserviceadmin.ExportRegistration.close--">
         <title>public void close()</title>
         <para role="description">
Delete the local endpoint and disconnect any remote distribution
 providers. After this method returns, all methods must return
 <code>null</code>.
 
 This method has no effect when this registration has already been closed
 or is being closed.
   </para>
      </section>
      <section role="method" xreflabel="getException()" xml:id="org.osgi.service.remoteserviceadmin.ExportRegistration.getException--">
         <title>public Throwable getException()</title>
         <para role="description">
Return the exception for any error during the export process.
 
 If the Remote Service Admin for some reasons is unable to properly
 initialize this registration, then it must return an exception from this
 method. If no error occurred, this method must return <code>null</code>.
 
 The error must be set before this Export Registration is returned.
 Asynchronously occurring errors must be reported to the log.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The exception that occurred during the initialization of this
         registration or <code>null</code> if no exception occurred.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getExportReference()" xml:id="org.osgi.service.remoteserviceadmin.ExportRegistration.getExportReference--">
         <title>public ExportReference getExportReference()</title>
         <para role="description">
Return the Export Reference for the exported service.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Export Reference for this registration, or <code>null</code>
         if this Import Registration is closed.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– When this registration was not properly
         initialized. See <link linkend="org.osgi.service.remoteserviceadmin.ExportRegistration.getException--">getException()</link>.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="update(Map)" xml:id="org.osgi.service.remoteserviceadmin.ExportRegistration.update-Map-">
         <title>public EndpointDescription update(Map&lt;String,?&gt; properties)</title>
         <formalpara role="parameter">
            <title>properties</title>
            <para>properties to be merged with the current service
        properties for the <link linkend="org.osgi.framework.ServiceReference">ServiceReference</link> represented by this
        <link linkend="org.osgi.service.remoteserviceadmin.ExportRegistration">ExportRegistration</link>. If null is passed then the original
        properties passed to
        <link linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.exportService-ServiceReference-Map-">RemoteServiceAdmin.exportService(ServiceReference, Map)</link>
        will be used.</para>
         </formalpara>
         <para role="description">
Update the endpoint represented by this <link linkend="org.osgi.service.remoteserviceadmin.ExportRegistration">ExportRegistration</link> and
 return an updated <link linkend="org.osgi.service.remoteserviceadmin.EndpointDescription">EndpointDescription</link>. If this method returns an
 updated <link linkend="org.osgi.service.remoteserviceadmin.EndpointDescription">EndpointDescription</link>, then the object returned via
 <link linkend="org.osgi.service.remoteserviceadmin.ExportRegistration.getExportReference--">getExportReference()</link> must also have been updated to return this
 new object. If this method does not return an updated
 <link linkend="org.osgi.service.remoteserviceadmin.EndpointDescription">EndpointDescription</link> then the object returned via
 <link linkend="org.osgi.service.remoteserviceadmin.ExportRegistration.getExportReference--">getExportReference()</link> should remain unchanged.
 
 When creating the updated <link linkend="org.osgi.service.remoteserviceadmin.EndpointDescription">EndpointDescription</link> the
 <link linkend="org.osgi.framework.ServiceReference">ServiceReference</link> originally passed to
 <link linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.exportService-ServiceReference-Map-">RemoteServiceAdmin.exportService(ServiceReference, Map)</link> must be
 queried to pick up any changes to its service properties.
 
 If this argument is null then the original properties passed when
 creating this ExportRegistration should be used when constructing the
 updated <link linkend="org.osgi.service.remoteserviceadmin.EndpointDescription">EndpointDescription</link>. Otherwise the new properties should
 be used, and replace the original properties for subsequent calls to the
 update method.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The updated <link linkend="org.osgi.service.remoteserviceadmin.EndpointDescription">EndpointDescription</link> for this registration or
         null if there was a failure updating the endpoint. If a failure
         occurs then it can be accessed using <link linkend="org.osgi.service.remoteserviceadmin.ExportRegistration.getException--">getException()</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this registration is closed, or when
         this registration was not properly initialized. See
         <link linkend="org.osgi.service.remoteserviceadmin.ExportRegistration.getException--">getException()</link>.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ImportReference" xml:id="org.osgi.service.remoteserviceadmin.ImportReference">
      <title>public interface ImportReference</title>
      <para>
An Import Reference associates an active proxy service to a remote endpoint.
 
 The Import Reference can be used to reference an imported service. When the
 service is no longer imported, all methods must return <code>null</code>.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="getImportedEndpoint()" xml:id="org.osgi.service.remoteserviceadmin.ImportReference.getImportedEndpoint--">
         <title>public EndpointDescription getImportedEndpoint()</title>
         <para role="description">
Return the Endpoint Description for the remote endpoint.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Endpoint Description for the remote endpoint. Must be
         <code>null</code> when the service is no longer imported.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getImportedService()" xml:id="org.osgi.service.remoteserviceadmin.ImportReference.getImportedService--">
         <title>public ServiceReference&lt;?&gt; getImportedService()</title>
         <para role="description">
Return the Service Reference for the proxy for the endpoint.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Service Reference to the proxy for the endpoint. Must be
         <code>null</code> when the service is no longer imported.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ImportRegistration" xml:id="org.osgi.service.remoteserviceadmin.ImportRegistration">
      <title>public interface ImportRegistration</title>
      <para>
An Import Registration associates an active proxy service to a remote
 endpoint.
 
 The Import Registration can be used to delete the proxy associated with an
 endpoint. It is created with the
 <link linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.importService-EndpointDescription-">RemoteServiceAdmin.importService(EndpointDescription)</link> method.
 
 When this Import Registration has been closed, all methods must return
 <code>null</code>.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="close()" xml:id="org.osgi.service.remoteserviceadmin.ImportRegistration.close--">
         <title>public void close()</title>
         <para role="description">
Close this Import Registration. This must close the connection to the
 endpoint and unregister the proxy. After this method returns, all other
 methods must return <code>null</code>.
 
 This method has no effect when this registration has already been closed
 or is being closed.
   </para>
      </section>
      <section role="method" xreflabel="getException()" xml:id="org.osgi.service.remoteserviceadmin.ImportRegistration.getException--">
         <title>public Throwable getException()</title>
         <para role="description">
Return the exception for any error during the import process.
 
 If the Remote Service Admin for some reasons is unable to properly
 initialize this registration, then it must return an exception from this
 method. If no error occurred, this method must return <code>null</code>.
 
 The error must be set before this Import Registration is returned.
 Asynchronously occurring errors must be reported to the log.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The exception that occurred during the initialization of this
         registration or <code>null</code> if no exception occurred.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getImportReference()" xml:id="org.osgi.service.remoteserviceadmin.ImportRegistration.getImportReference--">
         <title>public ImportReference getImportReference()</title>
         <para role="description">
Return the Import Reference for the imported service.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Import Reference for this registration, or <code>null</code>
         if this Import Registration is closed.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– When this registration was not properly
         initialized. See <link linkend="org.osgi.service.remoteserviceadmin.ImportRegistration.getException--">getException()</link>.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="update(EndpointDescription)" xml:id="org.osgi.service.remoteserviceadmin.ImportRegistration.update-EndpointDescription-">
         <title>public boolean update(EndpointDescription endpoint)</title>
         <formalpara role="parameter">
            <title>endpoint</title>
            <para>The updated endpoint</para>
         </formalpara>
         <para role="description">
Update the local service represented by this <link linkend="org.osgi.service.remoteserviceadmin.ImportRegistration">ImportRegistration</link>.
 After this method returns the <link linkend="org.osgi.service.remoteserviceadmin.EndpointDescription">EndpointDescription</link> returned via
 <link linkend="org.osgi.service.remoteserviceadmin.ImportRegistration.getImportReference--">getImportReference()</link> must have been updated.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the endpoint was successfully updated,
         <code>false</code> otherwise. If the update fails then the
         failure can be retrieved from <link linkend="org.osgi.service.remoteserviceadmin.ImportRegistration.getException--">getException()</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– When this registration is closed, or if it
         was not properly initialized. See <link linkend="org.osgi.service.remoteserviceadmin.ImportRegistration.getException--">getException()</link>.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– When the supplied
         <link linkend="org.osgi.service.remoteserviceadmin.EndpointDescription">EndpointDescription</link> does not represent the same endpoint
         as this <link linkend="org.osgi.service.remoteserviceadmin.ImportRegistration">ImportRegistration</link>.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="RemoteConstants" xml:id="org.osgi.service.remoteserviceadmin.RemoteConstants">
      <title>public class RemoteConstants</title>
      <para>
Provide the definition of the constants used in the Remote Service Admin
 specification.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="ENDPOINT_FRAMEWORK_UUID" xml:id="org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_FRAMEWORK_UUID">
         <title>public static final String ENDPOINT_FRAMEWORK_UUID = "endpoint.framework.uuid"</title>
         <para>
Endpoint property identifying the universally unique id of the exporting
 framework. Can be absent if the corresponding endpoint is not for an OSGi
 service.
 
 </para>
         <para>
 The value of this property must be of type <code>String</code>.</para>
      </section>
      <section role="field" xreflabel="ENDPOINT_ID" xml:id="org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_ID">
         <title>public static final String ENDPOINT_ID = "endpoint.id"</title>
         <para>
Endpoint property identifying the id for this endpoint. This service
 property must always be set.
 
 </para>
         <para>
 The value of this property must be of type <code>String</code>.</para>
      </section>
      <section role="field" xreflabel="ENDPOINT_PACKAGE_VERSION_" xml:id="org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_PACKAGE_VERSION_">
         <title>public static final String ENDPOINT_PACKAGE_VERSION_ = "endpoint.package.version."</title>
         <para>
Prefix for an endpoint property identifying the interface Java package
 version for an interface. For example, the property
 <code>endpoint.package.version.com.acme=1.3</code> describes the version of
 the package for the <code>com.acme.Foo</code> interface. This endpoint
 property for an interface package does not have to be set. If not set,
 the value must be assumed to be 0.
 
 </para>
         <para>
 Since endpoint properties are stored in a case insensitive map, case
 variants of a package name are folded together.
 
 </para>
         <para>
 The value of properties having this prefix must be of type <code>String</code>.</para>
      </section>
      <section role="field" xreflabel="ENDPOINT_SERVICE_ID" xml:id="org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_SERVICE_ID">
         <title>public static final String ENDPOINT_SERVICE_ID = "endpoint.service.id"</title>
         <para>
Endpoint property identifying the service id of the exported service. Can
 be absent or 0 if the corresponding endpoint is not for an OSGi service.
 
 </para>
         <para>
 The value of this property must be of type <code>Long</code>.</para>
      </section>
      <section role="field" xreflabel="REMOTE_CONFIGS_SUPPORTED" xml:id="org.osgi.service.remoteserviceadmin.RemoteConstants.REMOTE_CONFIGS_SUPPORTED">
         <title>public static final String REMOTE_CONFIGS_SUPPORTED = "remote.configs.supported"</title>
         <para>
Service property identifying the configuration types supported by a
 distribution provider. Registered by the distribution provider on one of
 its services to indicate the supported configuration types.
 
 </para>
         <para>
 The value of this property must be of type <code>String</code>,
 <code>String[]</code>, or <code>Collection</code> of <code>String</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Remote Services Specification</code>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="REMOTE_INTENTS_SUPPORTED" xml:id="org.osgi.service.remoteserviceadmin.RemoteConstants.REMOTE_INTENTS_SUPPORTED">
         <title>public static final String REMOTE_INTENTS_SUPPORTED = "remote.intents.supported"</title>
         <para>
Service property identifying the intents supported by a distribution
 provider. Registered by the distribution provider on one of its services
 to indicate the vocabulary of implemented intents.
 
 </para>
         <para>
 The value of this property must be of type <code>String</code>,
 <code>String[]</code>, or <code>Collection</code> of <code>String</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Remote Services Specification</code>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SERVICE_EXPORTED_CONFIGS" xml:id="org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_EXPORTED_CONFIGS">
         <title>public static final String SERVICE_EXPORTED_CONFIGS = "service.exported.configs"</title>
         <para>
Service property identifying the configuration types that should be used
 to export the service. Each configuration type represents the
 configuration parameters for an endpoint. A distribution provider should
 create an endpoint for each configuration type that it supports.
 
 </para>
         <para>
 This property may be supplied in the <code>properties</code>
            <code>Dictionary</code> object passed to the
 <code>BundleContext.registerService</code> method. The value of this property
 must be of type <code>String</code>, <code>String[]</code>, or <code>Collection</code>
 of <code>String</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Remote Services Specification</code>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SERVICE_EXPORTED_INTENTS" xml:id="org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_EXPORTED_INTENTS">
         <title>public static final String SERVICE_EXPORTED_INTENTS = "service.exported.intents"</title>
         <para>
Service property identifying the intents that the distribution provider
 must implement to distribute the service. Intents listed in this property
 are reserved for intents that are critical for the code to function
 correctly, for example, ordering of messages. These intents should not be
 configurable.
 
 </para>
         <para>
 This property may be supplied in the <code>properties</code>
            <code>Dictionary</code> object passed to the
 <code>BundleContext.registerService</code> method. The value of this property
 must be of type <code>String</code>, <code>String[]</code>, or <code>Collection</code>
 of <code>String</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Remote Services Specification</code>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SERVICE_EXPORTED_INTENTS_EXTRA" xml:id="org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_EXPORTED_INTENTS_EXTRA">
         <title>public static final String SERVICE_EXPORTED_INTENTS_EXTRA = "service.exported.intents.extra"</title>
         <para>
Service property identifying the extra intents that the distribution
 provider must implement to distribute the service. This property is
 merged with the <code>service.exported.intents</code> property before the
 distribution provider interprets the listed intents; it has therefore the
 same semantics but the property should be configurable so the
 administrator can choose the intents based on the topology. Bundles
 should therefore make this property configurable, for example through the
 Configuration Admin service.
 
 </para>
         <para>
 This property may be supplied in the <code>properties</code>
            <code>Dictionary</code> object passed to the
 <code>BundleContext.registerService</code> method. The value of this property
 must be of type <code>String</code>, <code>String[]</code>, or <code>Collection</code>
 of <code>String</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Remote Services Specification</code>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SERVICE_EXPORTED_INTERFACES" xml:id="org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_EXPORTED_INTERFACES">
         <title>public static final String SERVICE_EXPORTED_INTERFACES = "service.exported.interfaces"</title>
         <para>
Service property marking the service for export. It defines the
 interfaces under which this service can be exported. This list must be a
 subset of the types under which the service was registered. The single
 value of an asterisk (<code>'*'</code> \u002A) indicates all the interface
 types under which the service was registered excluding the non-interface
 types. It is strongly recommended to only export interface types and not
 concrete classes due to the complexity of creating proxies for some type
 of concrete classes.
 
 </para>
         <para>
 This property may be supplied in the <code>properties</code>
            <code>Dictionary</code> object passed to the
 <code>BundleContext.registerService</code> method. The value of this property
 must be of type <code>String</code>, <code>String[]</code>, or <code>Collection</code>
 of <code>String</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Remote Services Specification</code>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SERVICE_IMPORTED" xml:id="org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_IMPORTED">
         <title>public static final String SERVICE_IMPORTED = "service.imported"</title>
         <para>
Service property identifying the service as imported. This service
 property must be set by a distribution provider to any value when it
 registers the endpoint proxy as an imported service. A bundle can use
 this property to filter out imported services.
 
 </para>
         <para>
 The value of this property may be of any type.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Remote Services Specification</code>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SERVICE_IMPORTED_CONFIGS" xml:id="org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_IMPORTED_CONFIGS">
         <title>public static final String SERVICE_IMPORTED_CONFIGS = "service.imported.configs"</title>
         <para>
Service property identifying the configuration types used to import the
 service. Any associated properties for this configuration types must be
 properly mapped to the importing system. For example, a URL in these
 properties must point to a valid resource when used in the importing
 framework. If multiple configuration types are listed in this property,
 then they must be synonyms for exactly the same remote endpoint that is
 used to export this service.
 
 </para>
         <para>
 The value of this property must be of type <code>String</code>,
 <code>String[]</code>, or <code>Collection</code> of <code>String</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Remote Services Specification</code>, <link linkend="org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_EXPORTED_CONFIGS">SERVICE_EXPORTED_CONFIGS</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SERVICE_INTENTS" xml:id="org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_INTENTS">
         <title>public static final String SERVICE_INTENTS = "service.intents"</title>
         <para>
Service property identifying the intents that this service implement.
 This property has a dual purpose:
 </para>
         <itemizedlist>
            <listitem>
               <para>A bundle can use this service property to notify the distribution
 provider that these intents are already implemented by the exported
 service object.</para>
            </listitem>
            <listitem>
               <para>A distribution provider must use this property to convey the combined
 intents of: The exporting service, and the intents that the exporting
 distribution provider adds, and the intents that the importing
 distribution provider adds.</para>
            </listitem>
         </itemizedlist>
         <para>
 
 To export a service, a distribution provider must expand any qualified
 intents. Both the exporting and importing distribution providers must
 recognize all intents before a service can be distributed.
 
 The value of this property must be of type <code>String</code>,
 <code>String[]</code>, or <code>Collection</code> of <code>String</code>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Remote Services Specification</code>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="RemoteServiceAdmin" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdmin">
      <title>public interface RemoteServiceAdmin</title>
      <para>
A Remote Service Admin manages the import and export of services.
 
 A Distribution Provider can expose a control interface. This interface allows
 a Topology Manager to control the export and import of services.
 
 The API allows a Topology Manager to export a service, to import a service,
 and find out about the current imports and exports.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="exportService(ServiceReference,Map)" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.exportService-ServiceReference-Map-">
         <title>public Collection&lt;ExportRegistration&gt; exportService(ServiceReference&lt;?&gt; reference,Map&lt;String,?&gt; properties)</title>
         <formalpara role="parameter">
            <title>reference</title>
            <para>The Service Reference to export.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>properties</title>
            <para>The properties to create a local Endpoint that can be
        implemented by this Remote Service Admin. If this is <code>null</code>,
        the Endpoint will be determined by the properties on the service.
        The properties are the same as given for an exported service. They
        override any properties in the specified Service Reference (case
        insensitive). The properties <code>objectClass</code> and
        <code>service.id</code>, in any case variant, are ignored. Those
        properties in the Service Reference cannot be overridden. This
        parameter can be <code>null</code>, this should be treated as an empty
        map.</para>
         </formalpara>
         <para role="description">
Export a service to a given Endpoint. The Remote Service Admin must
 create an Endpoint from the given description that can be used by other
 Distribution Providers to connect to this Remote Service Admin and use
 the exported service.
 
 The property keys of a Service Reference are case insensitive while the
 property keys of the specified <code>properties</code> map are case sensitive.
 A property key in the specified <code>properties</code> map must therefore
 override any case variant property key in the properties of the specified
 Service Reference.
 
 </para>
         <para>
 If the caller does not have the appropriate
 <code>EndpointPermission[endpoint,EXPORT]</code> for an Endpoint, and the Java
 Runtime Environment supports permissions, then the
 <link linkend="org.osgi.service.remoteserviceadmin.ExportRegistration.getException--">getException</link> method on the
 corresponding returned <link linkend="org.osgi.service.remoteserviceadmin.ExportRegistration">ExportRegistration</link> will return a
 <code>SecurityException</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>Collection</code> of <link linkend="org.osgi.service.remoteserviceadmin.ExportRegistration">ExportRegistration</link>s for the
         specified Service Reference and properties. Multiple Export
         Registrations may be returned because a single service can be
         exported to multiple Endpoints depending on the available
         configuration type properties and the intents that they support.
         The result is never <code>null</code> but may be empty if this Remove
         Service Admin does not recognize any of the configuration types,
         or if they Remote Service Admin cannot support the relevant
         intents.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If any of the properties for this
         configuration type has a value that is not syntactically correct,
         or if the service properties and the overlaid properties do not
         contain a <link linkend="org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_EXPORTED_INTERFACES">RemoteConstants.SERVICE_EXPORTED_INTERFACES</link>
         entry. This means that implementations must not ignore invalid
         values for property names that they recognize.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getExportedServices()" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.getExportedServices--">
         <title>public Collection&lt;ExportReference&gt; getExportedServices()</title>
         <para role="description">
Return the currently active Export References.
 
 </para>
         <para>
 If the caller does not have the appropriate
 <code>EndpointPermission[endpoint,READ]</code> for an Endpoint, and the Java
 Runtime Environment supports permissions, then returned collection will
 not contain a reference to the exported Endpoint.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>Collection</code> of <link linkend="org.osgi.service.remoteserviceadmin.ExportReference">ExportReference</link>s that are
         currently active.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getImportedEndpoints()" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.getImportedEndpoints--">
         <title>public Collection&lt;ImportReference&gt; getImportedEndpoints()</title>
         <para role="description">
Return the currently active Import References.
 
 </para>
         <para>
 If the caller does not have the appropriate
 <code>EndpointPermission[endpoint,READ]</code> for an Endpoint, and the Java
 Runtime Environment supports permissions, then returned collection will
 not contain a reference to the imported Endpoint.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>Collection</code> of <link linkend="org.osgi.service.remoteserviceadmin.ImportReference">ImportReference</link>s that are
         currently active.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="importService(EndpointDescription)" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.importService-EndpointDescription-">
         <title>public ImportRegistration importService(EndpointDescription endpoint)</title>
         <formalpara role="parameter">
            <title>endpoint</title>
            <para>The Endpoint Description to be used for import.</para>
         </formalpara>
         <para role="description">
Import a service from an Endpoint. The Remote Service Admin must use the
 given Endpoint to create a proxy. This method can return <code>null</code> if
 the service could not be imported.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An Import Registration that combines the Endpoint Description and
         the Service Reference or <code>null</code> if the Endpoint could not
         be imported.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>EndpointPermission[endpoint,IMPORT]</code> for the Endpoint, and
         the Java Runtime Environment supports permissions.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="RemoteServiceAdminEvent" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent">
      <title>public class RemoteServiceAdminEvent</title>
      <para>
Provides the event information for a Remote Service Admin event.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="EXPORT_ERROR" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.EXPORT_ERROR">
         <title>public static final int EXPORT_ERROR = 6</title>
         <para>
A fatal exporting error occurred. The Export Registration has been
 closed.
   </para>
      </section>
      <section role="field" xreflabel="EXPORT_REGISTRATION" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.EXPORT_REGISTRATION">
         <title>public static final int EXPORT_REGISTRATION = 2</title>
         <para>
Add an export registration. The Remote Service Admin will send this event
 when it exports a service. When the <link linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminListener">RemoteServiceAdminListener</link>
 service is registered, the Remote Service Admin must notify the listener
 of all existing Export Registrations.
   </para>
      </section>
      <section role="field" xreflabel="EXPORT_UNREGISTRATION" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.EXPORT_UNREGISTRATION">
         <title>public static final int EXPORT_UNREGISTRATION = 3</title>
         <para>
Remove an export registration. The Remote Service Admin will send this
 event when it removes the export of a service.
   </para>
      </section>
      <section role="field" xreflabel="EXPORT_UPDATE" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.EXPORT_UPDATE">
         <title>public static final int EXPORT_UPDATE = 10</title>
         <para>
Update an export registration. The Remote Service Admin will send this
 event when it exports a service.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="EXPORT_WARNING" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.EXPORT_WARNING">
         <title>public static final int EXPORT_WARNING = 7</title>
         <para>
A problematic situation occurred, the export is still active.
   </para>
      </section>
      <section role="field" xreflabel="IMPORT_ERROR" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.IMPORT_ERROR">
         <title>public static final int IMPORT_ERROR = 5</title>
         <para>
A fatal importing error occurred. The Import Registration has been
 closed.
   </para>
      </section>
      <section role="field" xreflabel="IMPORT_REGISTRATION" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.IMPORT_REGISTRATION">
         <title>public static final int IMPORT_REGISTRATION = 1</title>
         <para>
Add an import registration. The Remote Service Admin will send this event
 when it imports a service. When the <link linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminListener">RemoteServiceAdminListener</link>
 service is registered, the Remote Service Admin must notify the listener
 of all existing Import Registrations.
   </para>
      </section>
      <section role="field" xreflabel="IMPORT_UNREGISTRATION" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.IMPORT_UNREGISTRATION">
         <title>public static final int IMPORT_UNREGISTRATION = 4</title>
         <para>
Remove an import registration. The Remote Service Admin will send this
 event when it removes the import of a service.
   </para>
      </section>
      <section role="field" xreflabel="IMPORT_UPDATE" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.IMPORT_UPDATE">
         <title>public static final int IMPORT_UPDATE = 9</title>
         <para>
Update an import registration. The Remote Service Admin will send this
 event when it updates a service.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="IMPORT_WARNING" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.IMPORT_WARNING">
         <title>public static final int IMPORT_WARNING = 8</title>
         <para>
A problematic situation occurred, the import is still active.
   </para>
      </section>
      <section role="method" xreflabel="RemoteServiceAdminEvent(int,Bundle,ExportReference,Throwable)" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.RemoteServiceAdminEvent-int-Bundle-ExportReference-Throwable-">
         <title>public  RemoteServiceAdminEvent(int type,Bundle source,ExportReference exportReference,Throwable exception)</title>
         <formalpara role="parameter">
            <title>type</title>
            <para>The event type.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>source</title>
            <para>The source bundle, must not be <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>exportReference</title>
            <para>The exportReference, can not be <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>exception</title>
            <para>Any exceptions encountered, can be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Create a Remote Service Admin Event for an export notification.
   </para>
      </section>
      <section role="method" xreflabel="RemoteServiceAdminEvent(int,Bundle,ImportReference,Throwable)" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.RemoteServiceAdminEvent-int-Bundle-ImportReference-Throwable-">
         <title>public  RemoteServiceAdminEvent(int type,Bundle source,ImportReference importReference,Throwable exception)</title>
         <formalpara role="parameter">
            <title>type</title>
            <para>The event type.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>source</title>
            <para>The source bundle, must not be <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>importReference</title>
            <para>The importReference, can not be <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>exception</title>
            <para>Any exceptions encountered, can be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Create a Remote Service Admin Event for an import notification.
   </para>
      </section>
      <section role="method" xreflabel="getException()" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.getException--">
         <title>public Throwable getException()</title>
         <para role="description">
Return the exception for this event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The exception or <code>null</code>.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getExportReference()" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.getExportReference--">
         <title>public ExportReference getExportReference()</title>
         <para role="description">
Return the Export Reference for this event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Export Reference or <code>null</code>.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getImportReference()" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.getImportReference--">
         <title>public ImportReference getImportReference()</title>
         <para role="description">
Return the Import Reference for this event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Import Reference or <code>null</code>.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getSource()" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.getSource--">
         <title>public Bundle getSource()</title>
         <para role="description">
Return the bundle source of this event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The bundle source of this event.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent.getType--">
         <title>public int getType()</title>
         <para role="description">
Return the type of this event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The type of this event.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="RemoteServiceAdminListener" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdminListener">
      <title>public interface RemoteServiceAdminListener</title>
      <para>
A <link linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent">RemoteServiceAdminEvent</link> listener is notified synchronously of any
 export or import registrations and unregistrations.
 
 </para>
      <para>
 If the Java Runtime Environment supports permissions, then filtering is done.
 <code>RemoteServiceAdminEvent</code> objects are only delivered to the listener if
 the bundle which defines the listener object's class has the appropriate
 <code>EndpointPermission[endpoint,READ]</code> for the endpoint referenced by the
 event.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent">RemoteServiceAdminEvent</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="remoteAdminEvent(RemoteServiceAdminEvent)" xml:id="org.osgi.service.remoteserviceadmin.RemoteServiceAdminListener.remoteAdminEvent-RemoteServiceAdminEvent-">
         <title>public void remoteAdminEvent(RemoteServiceAdminEvent event)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>The <link linkend="org.osgi.service.remoteserviceadmin.RemoteServiceAdminEvent">RemoteServiceAdminEvent</link> object.</para>
         </formalpara>
         <para role="description">
Receive notification of any export or import registrations and
 unregistrations as well as errors and warnings.
   </para>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.service.remoteserviceadmin.namespace" xml:id="org.osgi.service.remoteserviceadmin.namespace" xml:base="../../generated/javadoc/docbook/org.osgi.service.remoteserviceadmin.namespace.xml">
   <title>org.osgi.service.remoteserviceadmin.namespace</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.remoteserviceadmin.namespace-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.remoteserviceadmin.namespace-version.number">1.0</edition>
   </info>
   <para>
Remote Service Admin Namespaces Version 1.0.
 
 </para>
   <para>
 Bundles should not need to import this package at runtime since all
 the types in this package just contain constants for capability and 
 requirement namespaces specified by the OSGi Alliance.</para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.remoteserviceadmin.namespace.DiscoveryNamespace">
                  <code>DiscoveryNamespace</code>
               </link> - 
Remote Services Discovery Provider Capability and Requirement Namespace.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.remoteserviceadmin.namespace.DistributionNamespace">
                  <code>DistributionNamespace</code>
               </link> - 
Remote Services Distribution Provider Capability and Requirement Namespace.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.remoteserviceadmin.namespace.TopologyNamespace">
                  <code>TopologyNamespace</code>
               </link> - 
Remote Services Topology Manager Capability and Requirement Namespace.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="DiscoveryNamespace" xml:id="org.osgi.service.remoteserviceadmin.namespace.DiscoveryNamespace">
      <title>public final class DiscoveryNamespace<?line-break?> extends Namespace</title>
      <para>
Remote Services Discovery Provider Capability and Requirement Namespace.
 
 </para>
      <para>
 This class defines the names for the attributes and directives for this
 namespace.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="CAPABILITY_PROTOCOLS_ATTRIBUTE" xml:id="org.osgi.service.remoteserviceadmin.namespace.DiscoveryNamespace.CAPABILITY_PROTOCOLS_ATTRIBUTE">
         <title>public static final String CAPABILITY_PROTOCOLS_ATTRIBUTE = "protocols"</title>
         <para>
The capability attribute used to specify the discovery protocols
 supported by this discovery provider. The value of this attribute must be
 of type <code>String</code> or <code>List&lt;String&gt;</code>.
   </para>
      </section>
      <section role="field" xreflabel="DISCOVERY_NAMESPACE" xml:id="org.osgi.service.remoteserviceadmin.namespace.DiscoveryNamespace.DISCOVERY_NAMESPACE">
         <title>public static final String DISCOVERY_NAMESPACE = "osgi.remoteserviceadmin.discovery"</title>
         <para>
Namespace name for Remote Services discovery provider capabilities and
 requirements.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="DistributionNamespace" xml:id="org.osgi.service.remoteserviceadmin.namespace.DistributionNamespace">
      <title>public final class DistributionNamespace<?line-break?> extends Namespace</title>
      <para>
Remote Services Distribution Provider Capability and Requirement Namespace.
 
 </para>
      <para>
 This class defines the names for the attributes and directives for this
 namespace.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="CAPABILITY_CONFIGS_ATTRIBUTE" xml:id="org.osgi.service.remoteserviceadmin.namespace.DistributionNamespace.CAPABILITY_CONFIGS_ATTRIBUTE">
         <title>public static final String CAPABILITY_CONFIGS_ATTRIBUTE = "configs"</title>
         <para>
The capability attribute used to specify the config types supported by
 this distribution provider. The value of this attribute must be of type
 <code>String</code> or <code>List&lt;String&gt;</code>.
   </para>
      </section>
      <section role="field" xreflabel="DISTRIBUTION_NAMESPACE" xml:id="org.osgi.service.remoteserviceadmin.namespace.DistributionNamespace.DISTRIBUTION_NAMESPACE">
         <title>public static final String DISTRIBUTION_NAMESPACE = "osgi.remoteserviceadmin.distribution"</title>
         <para>
Namespace name for Remote Services distribution provider capabilities and
 requirements.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="TopologyNamespace" xml:id="org.osgi.service.remoteserviceadmin.namespace.TopologyNamespace">
      <title>public final class TopologyNamespace<?line-break?> extends Namespace</title>
      <para>
Remote Services Topology Manager Capability and Requirement Namespace.
 
 </para>
      <para>
 This class defines the names for the attributes and directives for this
 namespace.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="CAPABILITY_POLICY_ATTRIBUTE" xml:id="org.osgi.service.remoteserviceadmin.namespace.TopologyNamespace.CAPABILITY_POLICY_ATTRIBUTE">
         <title>public static final String CAPABILITY_POLICY_ATTRIBUTE = "policy"</title>
         <para>
The capability attribute used to specify the policy or policies supported
 by this topology manager. The value of this attribute must be of type
 <code>String</code> or <code>List&lt;String&gt;</code>. Policy names are typically
 implementation specific, however the Remote Services Specification
 defines the <emphasis>promiscuous</emphasis> and <emphasis>fail-over</emphasis> policies for
 common use cases.
   </para>
      </section>
      <section role="field" xreflabel="FAIL_OVER_POLICY" xml:id="org.osgi.service.remoteserviceadmin.namespace.TopologyNamespace.FAIL_OVER_POLICY">
         <title>public static final String FAIL_OVER_POLICY = "fail-over"</title>
         <para>
The attribute value for Topology managers with a fail-over policy
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.remoteserviceadmin.namespace.TopologyNamespace.CAPABILITY_POLICY_ATTRIBUTE">TopologyNamespace.CAPABILITY_POLICY_ATTRIBUTE</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="PROMISCUOUS_POLICY" xml:id="org.osgi.service.remoteserviceadmin.namespace.TopologyNamespace.PROMISCUOUS_POLICY">
         <title>public static final String PROMISCUOUS_POLICY = "promiscuous"</title>
         <para>
The attribute value for Topology managers with a promiscuous policy
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.remoteserviceadmin.namespace.TopologyNamespace.CAPABILITY_POLICY_ATTRIBUTE">TopologyNamespace.CAPABILITY_POLICY_ATTRIBUTE</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="TOPOLOGY_NAMESPACE" xml:id="org.osgi.service.remoteserviceadmin.namespace.TopologyNamespace.TOPOLOGY_NAMESPACE">
         <title>public static final String TOPOLOGY_NAMESPACE = "osgi.remoteserviceadmin.topology"</title>
         <para>
Namespace name for Remote Services topology manager capabilities and
 requirements.
   </para>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i1693238"><title>OSGi Service Property
      Namespace</title>http://www.osgi.org/Specifications/ServicePropertyNamespace</bibliomixed>

      <bibliomixed xml:id="i1709441"><title>UUIDs</title>http://en.wikipedia.org/wiki/Universally_Unique_Identifier</bibliomixed>

      <bibliomixed xml:id="i1788834"><title>Service Location Protocol
      (SLP)</title>http://en.wikipedia.org/wiki/Service_Location_Protocol</bibliomixed>

      <bibliomixed xml:id="i1789952"><title>JGroups</title>http://www.jgroups.org/</bibliomixed>

      <bibliomixed xml:id="i1789020"><title>UDDI</title>http://en.wikipedia.org/wiki/Universal_Description_Discovery_and_Integration</bibliomixed>

      <bibliomixed xml:id="i1789031"><title>Service Component Architecture
      (SCA)</title>http://www.osoa.org/display/Main/Home</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="123" revision="$Id: 06877508c4677e99b06ddfe04abec97a013b2356 $" version="5" xml:id="service.jta" xml:base="../123/service.jta.xml">
  <title>JTA Transaction Services Specification</title>

  <info>
    <releaseinfo xml:id="service.jta-version">Version 1.0</releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>Transactions are the key abstraction to provide reliability with
    large scale distributed systems and are a primary component of enterprise
    systems. This specification provides an OSGi service based design for the
    Java Transaction Architecture (JTA) Specification, which describes the
    standard transaction model for Java applications. Providing the JTA
    specification as a service based model enables the use of independent
    implementations. This JTA Transaction Services Specification provides a
    managed model, where an Application Container (such as the Java EE EJB
    container) manages the transaction and the enlistment of resources, and an
    unmanaged model, where each application is responsible for these tasks
    itself.</para>

    <para>This specification provides a brief overview of JTA and then the use
    of it through 3 transaction services: User Transaction, Transaction
    Manager, and Transaction Synchronization.</para>

    <para>This specification is based on <xref linkend="i3068796"/>.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Portability</emphasis> - It is important that
          applications are easy to port from other environments that support
          JTA.</para>
        </listitem>

        <listitem>
          <para><emphasis>Pluggability</emphasis> - Allow different vendors to
          provide implementations of this specification.</para>
        </listitem>

        <listitem>
          <para><emphasis>JTA Compatible</emphasis> - Support full JTA 1.1
          Specification</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>JTA Provider</emphasis> - Implementation of this
          specification. It is responsible, on request from a Transaction
          Originator, for starting and ending transactions and coordinating
          the work of Resource Managers that become involved in each
          Transaction. This entity provides the User Transaction service,
          Transaction Manager service, and the Transaction Synchronization
          Registry service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Transaction</emphasis> - An atomic unit of work that
          is associated with a thread of execution.</para>
        </listitem>

        <listitem>
          <para><emphasis>Transaction Originator</emphasis> - An Application
          or its Container, that directs the JTA Provider to begin and end
          Transactions.</para>
        </listitem>

        <listitem>
          <para><emphasis>User Transaction</emphasis> - A service used by a
          Transaction Originator for beginning and ending transactions.</para>
        </listitem>

        <listitem>
          <para><emphasis>Transaction Manager</emphasis> - A service used by a
          Transaction Originator for managing both transaction demarcation and
          enlistment of Durable Resources or Volatile Resources.</para>
        </listitem>

        <listitem>
          <para><emphasis>Transaction Synchronization Registry</emphasis> - A
          service for enlistment of Volatile Resources for getting
          notifications before and after ending Transactions.</para>
        </listitem>

        <listitem>
          <para><emphasis>Application Bundle</emphasis> - An entity that
          initiates work that executes under a Transaction.</para>
        </listitem>

        <listitem>
          <para><emphasis>Container</emphasis> - An entity that is distinct
          from the Application and which provides a managed environment for
          Applications. Unmanaged environments do not distinguish between the
          Application and Container entities.</para>
        </listitem>

        <listitem>
          <para><emphasis>Resource Manager</emphasis> - Provides the
          transactional resources whose work is externally coordinated by a
          JTA Provider. Examples of Resource Managers include databases, Java
          Message Service providers and enterprise information systems.</para>
        </listitem>

        <listitem>
          <para><emphasis>Durable Resource</emphasis> - A resource whose work
          is made durable when the Transaction is successfully committed.
          Durable Resources can be enlisted with a Transaction to ensure that
          work is performed within the scope of the Transaction and to
          participate in the outcome of a Transaction. Durable Resource
          enlistment is the responsibility of the Application Bundle or its
          Container. Durable Resources implement the
          <code>javax.transaction.xa.XAResource</code> interface</para>
        </listitem>

        <listitem>
          <para><emphasis>Volatile Resource</emphasis> - Resources that are
          associated with a Transaction but are no longer needed after the
          Transaction, for example transaction-scoped caches. Volatile
          Resources are registered with the JTA Provider to receive
          notifications before and after the outcome of the Transaction.
          Volatile Resources implement the
          <code>javax.transaction.Synchronization</code> interface</para>
        </listitem>

        <listitem>
          <para><emphasis>Transaction Services</emphasis> - The triplet of the
          User Transaction, Transaction Manager, and Transaction
          Synchronization Registry services registered by the JTA
          Provider.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>Transaction Service Specification Entities</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.570in" contentwidth="6.251in" fileref="jta-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Dependencies</title>

      <para>This specification is based on the following packages:</para>

      <programlisting>javax.transaction
javax.transaction.xa</programlisting>

      <para>These packages must be exported as version 1.1.</para>
    </section>

    <section>
      <title>Synopsis</title>

      <para>The JTA Provider register the Transaction Services:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>User Transaction</emphasis> - Offers transaction
          demarcation capabilities to an Application bundle.</para>
        </listitem>

        <listitem>
          <para><emphasis>Transaction Manager</emphasis> - Offers transaction
          demarcation and further transaction management capabilities to an
          Application Bundle or an Application Container.</para>
        </listitem>

        <listitem>
          <para><emphasis>Transaction Synchronization Registry</emphasis> -
          Offers a callback registration service for volatile transactional
          participants wishing to be notified of the completion of the
          transaction.</para>
        </listitem>
      </itemizedlist>

      <para>A JTA Provider must register these services when it is started. A
      JTA Provider may put restrictions on which bundles can use these
      services. For example, in a Java EE environment, the JTA Provider does
      not expose the <code>TransactionManager</code> interface to
      applications. An OSGi environment which supports the Java EE
      specifications will typically provide access to the Transaction Manager
      service only to Java EE Containers.</para>

      <para>A typical example of the use of a transaction is for transferring
      money from one bank account to another. Two Durable Resources are
      involved, one provided by the database from which the money is to be
      withdrawn and another provided by the database to which the money will
      be deposited. An Application Bundle acting as the Transaction Originator
      gets the User Transaction service and uses it to begin a transaction.
      This transaction is associated with the current thread (implicitly) by
      the JTA Provider. On the same thread of execution, the Application
      Bundle connects to the database from which the money is to be withdrawn
      and updates the balance in the source account by the amount to be
      debited.</para>

      <para>The database is a resource manager whose connections have
      associated XA Resources; the first time a connection is used within the
      scope of a new transaction the Application Bundle, or a Container,
      obtains the XA Resource associated with the connection and enlists it
      with the JTA Provider through the Transaction Manager service. On the
      same thread of execution, the Application Bundle connects to the second
      database and updates the balance in the target account by the amount to
      be credited. An XA Resource for the second connection is enlisted with
      the Transaction Manager service as well by the Application Bundle or a
      Container.</para>

      <para>Now that the money has been transferred the Transaction Originator
      requests a commit of the Transaction (on the same thread of execution)
      via the User Transaction Service, causing the JTA Provider to initiate
      the two-phase commit process with the two Resource Managers through the
      enlisted XA Resources. The transaction is then atomically committed or
      rolled back.</para>
    </section>
  </section>

  <section>
    <title>JTA Overview</title>

    <para>A transaction is a unit of work in which interactions with multiple
    participants can be coordinated by a third party such that the final
    outcome of these interactions has well-defined transactional semantics. A
    variety of well-known transaction models exist with specific
    characteristics; the transactions described in this specification provide
    <emphasis>Atomic Consistent Isolated and Durable</emphasis> (ACID)
    semantics as defined in <xref linkend="i3068810"/> whereby all the
    participants in a transaction are coordinated to an
    <emphasis>atomic</emphasis> outcome in which the work of all the
    participants is either completely committed or completely rolled
    back.</para>

    <para>The <xref linkend="i3068810"/> defines a <emphasis>Distributed
    Transaction Processing</emphasis> (DTP) software architecture for
    transactional work that is distributed across multiple Resource Managers
    and coordinated externally by a Transaction Manager using the two-phase
    commit XA protocol. The DTP architecture defines the roles of the
    <emphasis>Transaction Manager</emphasis> and <emphasis>Resource
    Manager</emphasis>; this specification uses the term <emphasis>JTA
    Provider</emphasis> rather than <emphasis>Transaction Manager</emphasis>
    to distinguish it from the <emphasis>Transaction Manager
    service</emphasis>. Note that Distributed Transaction Processing does not
    imply distribution of transactions across multiple frameworks or
    JVMs.</para>

    <para>The <xref linkend="i3068796"/> defines the Java interfaces required
    for the management of transactions on the enterprise Java platform.</para>

    <section xml:id="i3096101">
      <title>Global and Local Transactions</title>

      <para>A transaction may be a <emphasis>local transaction</emphasis> or a
      <emphasis>global transaction</emphasis>. A local transaction is a unit
      of work that is local to a single Resource Manager and may succeed or
      fail independently of the work of other Resource Managers. A global
      transaction, sometimes referred to as a distributed transaction, is a
      unit of work that may encompass multiple Resource Managers and is
      coordinated by a JTA Provider external to the Resource Manager(s) as
      described in the DTP architecture. The term
      <emphasis>transaction</emphasis> in this specification always refers to
      a global transaction.</para>

      <para>The JTA Provider is responsible for servicing requests from a
      Transaction Originator to create and complete transactions, it manages
      the state of each transaction it creates, the association of each
      transaction with the thread of execution, and the coordination of any
      Resource Managers that become involved in the global transaction. The
      JTA Provider ensures that each transaction is associated with, at most,
      one application thread at a time and provides the means to move that
      association from one thread to another as needed.</para>

      <para>The model for resource commit coordination is the <emphasis>two
      phase commit</emphasis> XA protocol, with Resource Managers being
      directed by the JTA Provider. The first time an Application accesses a
      Resource Manager within the scope of a new global transaction, the
      Application, or its Container, obtains an XA Resource from the Resource
      Manager and <emphasis>enlists</emphasis> this XA Resource with the JTA
      Provider.</para>

      <para>At the end of a transaction, the Transaction Originator must
      decide whether to initiate a <emphasis>commit</emphasis> or
      <emphasis>rollback</emphasis> request for all the changes made within
      the scope of the Transaction. The Transaction Originator requests that
      the JTA Provider completes the transaction. The JTA Provider then
      negotiates with each enlisted Resource Manager to reach a coordinated
      outcome. A failure in the transaction at any point before the second
      phase of two-phase commit results in the transaction being rolled
      back.</para>

      <para>XA is a <emphasis>presumed abort</emphasis> protocol and
      implementations of XA-compliant JTA Providers and Resource Managers can
      be highly optimized to perform no logging of transactional state until a
      commit decision is required. A Resource Manager durably records its
      prepare decision, and a JTA Provider durably records any commit decision
      it makes. Failures between a decision on the outcome of a transaction
      and the enactment of that outcome are handled during
      <emphasis>transaction recovery</emphasis> to ensure the atomic outcome
      of the transaction.</para>
    </section>

    <section>
      <title>Durable Resource</title>

      <para>Durable Resources are provided by Resource Managers and must
      implement the <code>XAResource</code> interface described in the <xref linkend="i3068796"/>. An <code>XAResource</code> object is enlisted with
      a transaction to ensure that the work of the Resource Manager is
      associated with the correct transaction and to participate in the
      two-phase commit process. The <code>XAResource</code> interface is
      driven by the JTA Provider during the completion of the transaction and
      is used to direct the Resource Manager to commit or rollback any changes
      made under the corresponding transaction.</para>
    </section>

    <section>
      <title>Volatile Resource</title>

      <para>Volatile resources are components that do not participate in the
      two phase commit but are called immediately prior to and after the two
      phase commit. They implement the <xref linkend="i3068796"/>
      <code>Synchronization</code> interface. If a request is made to commit a
      transaction then the volatile participants have the opportunity to
      perform some <emphasis>before completion</emphasis> processing such as
      flushing cached updates to persistent storage. Failures during the
      <emphasis>before completion</emphasis> processing must cause the
      transaction to rollback. In both the commit and rollback cases the
      volatile resources are called after two phase commit to perform
      <emphasis>after completion</emphasis> processing. <emphasis>After
      completion</emphasis> procession cannot affect the outcome of the
      transaction.</para>
    </section>

    <section>
      <title>Threading</title>

      <para>As noted above in <xref linkend="i3096101"/>, a global transaction
      must not be associated with more than one application thread at a time
      but can be moved over time from one application thread to another. In
      some environments Applications run in containers which restrict the
      ability of the Application component to explicitly manage the
      transaction-thread association by restricting access to the Transaction
      Manager. For example, Java EE application servers provide web and EJB
      Containers for application components and, while the Containers
      themselves can explicitly manage transaction-thread associations, these
      containers do not allow the Applications to do so. Applications running
      in these containers are required to complete any transactions they start
      on that same application thread. In general, Applications that run
      inside a Container must follow the rules defined by that Container. For
      further details of the considerations specific to Java EE containers,
      see the section <emphasis>Transactions and Threads</emphasis> in <xref linkend="i3073418"/>.</para>
    </section>
  </section>

  <section>
    <title>Application</title>

    <para>An <emphasis>Application</emphasis> is a bundle that may use
    transactions, either as a Transaction Originator or as a bundle that is
    called as part of an existing transaction. A Transaction Originator
    Application bundle starts a transaction and end it with a commit or
    rollback using the User Transaction or Transaction Manager service.</para>

    <para>A Transaction Originator Application bundle may not make use of
    Resource Managers itself but may simply provide transaction demarcation
    and then call other bundles which do use Resource Managers. In such a case
    the Transaction Originator Application bundle requires only the use of the
    User Transaction service for transaction demarcation. The called bundles
    may use the Transaction Manager service if they use Resource
    Managers.</para>

    <para>Application Bundles that use Resource Managers have to know the
    enlistment strategy for the Resource Managers they use. There are two
    possibilities:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Application Bundle Enlistment</emphasis> - The
        Application Bundle must enlist the Resource Managers itself. For each
        Resource Manager it uses it must enlist that Resource Manager with the
        Transaction Manager.</para>
      </listitem>

      <listitem>
        <para><emphasis>Container-Managed Enlistment</emphasis> - An
        Application runs in a container, such as a Java EE Container, which
        manages the Resource Manager enlistment on behalf of the
        Application.</para>
      </listitem>
    </itemizedlist>

    <para>These scenarios are explained in the following sections.</para>

    <section>
      <title>No Enlistment</title>

      <para>A Transaction Originator Application bundle that uses no Resource
      Managers itself but starts a Transaction before calling another bundle
      may use the <emphasis>User Transaction</emphasis> service to control the
      Transaction demarcation.</para>

      <para>For example, an Application can use the User Transaction service
      to begin a global transaction:</para>

      <programlisting>UserTransaction ut = getUserTransaction();
ut.begin();</programlisting>

      <para>The User Transaction service associates a transaction with the
      current thread until that transaction is completed via:</para>

      <programlisting>UserTransaction ut = getUserTransaction();
ut.commit();</programlisting>

      <para>Or the equivalent <code>rollback</code> method. The
      <code>getUserTransaction</code> method implementation (not shown) can
      get the User Transaction service directly from the service registry or
      from an injected field.</para>
    </section>

    <section>
      <title>Application Bundle Enlistment</title>

      <para>An Application Bundle is responsible for enlisting Resource
      Managers itself. That is, it must enlist Resource Manager it uses with
      the <emphasis>Transaction Manager</emphasis> service. The Transaction
      Manager service is an implementation of the JTA
      <code>TransactionManager</code> interface, registered by the JTA
      Provider.</para>

      <para>For example, an Application Bundle can get an
      <code>XADataSource</code> object from a Data Source Factory service.
      Such a Data Source object can provide an <code>XAConnection</code>
      object that then can provide an <code>XAResource</code> object.
      <code>XAResource</code> objects can then be enlisted with the
      Transaction Manager service.</para>

      <para>For example:</para>

      <programlisting>TransactionManager tm;
XADataSource       left;
XADataSource       right;

void acid() throws Exception {
   tm.begin();
    Transaction transaction = <code>tm.getTransaction();</code>
   try {
        XAConnection left = this.left.getXAConnection();
        XAConnection right = this.right.getXAConnection();
        transaction.enlistResource( <code>left</code>.getXAResource());
        transaction.enlistResource( <code>right</code>.getXAResource());
        doWork(left.getConnection(), right.getConnection());
        tm.commit();
    } catch( Throwable t ) {
        tm.rollback();
        throw t; } }
// ...
void setTransactionManager( TransactionManager tm ) { this.tm= tm; }
void setDataSourceFactory( DataSourceFactory dsf ) {
    left = dsf.createXADataSource( getLeftProperties() );
    right = dsf.createXADataSource( getRightProperties() );
}</programlisting>

      <para>In the previous example, the Transaction Manager service could
      have been injected with a component model like Declarative
      Services:</para>

      <programlisting>&lt;reference interface="javax.transaction.TransactionManager"
    bind="setTransactionManager"/&gt;
&lt;reference name="dsf" interface="org.osgi.service.jdbc.DataSourceFactory"
    bind="setDataSourceFactory"/&gt;</programlisting>

      <para>For example, it is possible to provide a Data Source service that
      provides automatic enlistment of the Connection as an XA Resource when
      one of its <code>getConnection</code> methods is called inside a
      transaction. The following code contains a Declarative Service component
      that implement this design. The component references a Transaction
      Manager service and a Data Source Factory service and provides a Data
      Source service that proxies an XA Data Source. Applications depend on
      the Data Source service, assuming that the Data Source service
      automatically enlists the connections it uses inside a transaction. See
      for an overview <xref linkend="i3115044" xrefstyle="template:Figure %n on page %p"/>.</para>

      <figure xml:id="i3115044">
        <title>Data Source Proxy</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.008in" contentwidth="6.248in" fileref="data-source-proxy.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>This general purpose Data Source Proxy component can be fully
      configured by the Configuration Admin service to instantiate this
      component for each needed database connection. The Declarative Services
      service properties can be used to select a Data Source Factory for the
      required database driver (using the <code>target</code>), as well as
      provide the configuration properties for the creation of an XA Data
      Source. That is, such a component could be part of a support
      library.</para>

      <para>The code for such an Application component could start
      like:</para>

      <programlisting>public class DataSourceProxy implements DataSource{
    Properties         properties  = new Properties();
    TransactionManager tm;
    XADataSource       xads;</programlisting>

      <para>The <code>activate</code> method is called when the component's
      dependencies are met, that is, there is a Transaction Manager service as
      well as a matching Data Source Factory service. In this method, the
      properties of the component are copied to a <code>Properties</code>
      object to be compatible with the Data Source Factory factory
      methods.</para>

      <programlisting>void activate(ComponentContext c) {
    // copy the properties set by the Config Admin into properties
    ...
}</programlisting>

      <para>The relevant methods in the Data Source Proxy component are the
      <code>getConnection</code> methods. The contract for this proxy
      component is that it enlists the XA Data Connection's XA Resource when
      it is called inside a transaction. This enlistment is done in the
      private <code>enlist</code> method.</para>

      <programlisting>public Connection getConnection() throws SQLException{
    XAConnection connection = xads.getXAConnection();
    return enlist(connection); }

public Connection getConnection(String username, String password)
        throws SQLException {
    XAConnection connection = xads.getXAConnection(username,password);
    return enlist(connection); }</programlisting>

      <para>The <code>enlist</code> method checks if there currently is a
      transaction active. If not, it ignores the enlistment, the connection
      will then not be connection to the transaction. If there is a current
      transaction, it enlists the corresponding XA Resource.</para>

      <programlisting>private Connection enlist(XAConnection connection)throws SQLException {
    try {
        Transaction transaction = tm.getTransaction();
        if (transaction != null)
            transaction.enlistResource( connection.getXAResource());
    } catch (Exception e) {
        SQLException sqle=
            new SQLException("Failed to enlist");
        sqle.initCause(e);
        throw sqle;
    }
    return connection.getConnection();
}</programlisting>

      <para>What remains are a number of boilerplate methods that forward to
      the XA Data Source or set the dependencies.</para>

      <programlisting>void setTransactionManager(TransactionManagertm) { this.tm = tm;}
void setDataSourceFactory(DataSourceFactory dsf) throws Exception{
    xads = dsf.createXADataSource(properties);}
public PrintWriter getLogWriter() 
    throws SQLException { return xads.getLogWriter(); }

public int getLoginTimeout() 
    throws SQLException { return xads.getLoginTimeout();}

public void setLogWriter(PrintWriter out) 
    throws SQLException { xads.setLogWriter(out); }

public void setLoginTimeout(int seconds) 
    throws SQLException { xads.setLoginTimeout(seconds);}</programlisting>

      <para>This is a fully coded example, it only lacks the configuration
      definitions for the Configuration Admin service.</para>

      <para>This example Data Source proxy component makes it possible for an
      Application to depend on a Data Source service. The connections the
      Application uses from this Data Source are automatically transactional
      as long as there is a current transaction when the service is called.
      However, this approach only works when all bundles in the OSGi framework
      follow the same enlistment strategy because this specification does not
      provide a common enlistment strategy.</para>
    </section>

    <section>
      <title>Container Managed Enlistment</title>

      <para>The Application Container is responsible for enlisting Resource
      Managers used by the Application. For example, the Java EE Web and EJB
      Containers have a well defined model for managing resources within a
      transaction. If an Application runs inside a Java EE Container then it
      is the responsibility of the Java EE Container to handle the resource
      enlistment, the actual rules are beyond this specification.</para>

      <para>A Transaction Originator Application bundle running inside a
      Container which manages any Resource Managers enlistment may use the
      User Transaction service for transaction demarcation, assuming this
      service is made available by the Container.</para>

      <para>When a Java EE Container runs inside an OSGi framework then it
      must ensure that any services seen by its contained Applications are the
      same Transaction services as other bundles on that OSGi
      framework.</para>
    </section>
  </section>

  <section>
    <title>Resource Managers</title>

    <para>Resource Managers perform work that needs to be committed or rolled
    back in a transaction. To participate in a transaction, a Resource Manager
    must have an XA Resource enlisted with the current transaction. This
    specification does not define how OSGi service implementations should be
    enlisted. This can be done by a Java EE Container, the Applications
    themselves, or through some other unspecified means.</para>
  </section>

  <section>
    <title>The JTA Provider</title>

    <para>The JTA Provider is the entity that provides the transaction
    services:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>User Transaction - A service that implements the JTA
        </emphasis><code>UserTransaction</code> <emphasis> interface.
        </emphasis></para>
      </listitem>

      <listitem>
        <para><emphasis>Transaction Manager - A service that implements the
        JTA </emphasis><code>TransactionManager</code><emphasis> interface.
        </emphasis></para>
      </listitem>

      <listitem>
        <para><emphasis>Transaction Synchronization Registry</emphasis> -
        <emphasis>A service that implements the JTA</emphasis>
        <code>TransactionSynchronizationRegistry</code>
        <emphasis>interface</emphasis>.</para>
      </listitem>
    </itemizedlist>

    <para>There can be at most one JTA Provider in an OSGi framework and this
    JTA Provider must ensure that at most one transaction is associated with
    an application thread at any moment in time. All JTA Provider's
    transaction services must map to the same underlying JTA implementation.
    All JTA services should only be registered once.</para>

    <section>
      <title>User Transaction</title>

      <para>The User Transaction service may be used by an Application bundle,
      acting as the Transaction Originator, to demarcate transaction
      boundaries when the bundle has no need to perform resource
      enlistement.</para>
    </section>

    <section>
      <title>Transaction Manager</title>

      <para>The Transaction Manager service offers transaction demarcation and
      further transaction management capabilities, such as Durable and
      Volatile resource enlistment, to an Application bundle or Application
      Container.</para>
    </section>

    <section>
      <title>Transaction Synchronization Service</title>

      <para>The Transaction Synchronization Registry service may be used by an
      Application bundle or a Container. The service provides for the
      registration of Volatile Resources that implement the JTA
      <code>Synchronization</code> interface.</para>

      <para>For example:</para>

      <programlisting>private class MyVolatile implements Synchronization{...}
TransactionSynchronizationRegistry tsr = ...; // may be injected
tsr.registerInterposedSynchronization(new MyVolatile());</programlisting>
    </section>
  </section>

  <section>
    <title>Life Cycle</title>

    <section>
      <title>JTA Provider</title>

      <para>The life cycle of the transaction services and bundles that make
      up the JTA Provider must be dealt with appropriately such that
      implementations always ensure the atomic nature of transactions. When
      the JTA Provider is stopped and its services are unregistered, the JTA
      Provider must make sure that all active transactions are dealt with
      appropriately. A JTA Provider can decide to rollback all active
      transactions or it can decide to keep track of existing active
      transactions and allow them to continue to their normal conclusion but
      not allow any new transactions to be created. Any failures caused by
      executing code outside their life cycle can be dealt with as general
      failures. From a transactional consistency point of view, stopping the
      bundle(s) that implement the JTA Provider while transactional work is
      in-flight, is no different from a failure of the framework hosting the
      JTA Provider. In either case transaction recovery is initiated by the
      JTA Provider after it has re-started.</para>

      <para>There are well-defined XA semantics between a JTA Provider and
      Resource Managers in the event of a failure of either at any point in a
      transaction. If a Resource Manager bundle is stopped while it is
      involved in-flight transactions then the JTA Provider should exhibit the
      same external behavior it does in the event of a communication failure
      with the Resource Manager. For example a JTA Provider will respond to an
      <code>XAER_RMFAIL</code> response resulting from calling the
      <code>XAResource commit</code> method by retrying the
      <code>commit</code>. The mechanism used by the JTA Provider to determine
      when to retry the <code>commit</code> is a detail of the
      implementation.</para>
    </section>

    <section>
      <title>Application Bundles</title>

      <para>Applications can act in the role of the Transaction Originator.
      There is no guarantee that an Application that starts a transaction will
      always be available to complete the transaction since the client can
      fail independently of the JTA Provider. A failure of the Application
      Bundle to complete, in a timely fashion, a transaction it originated
      must finally result in the JTA Provider rolling back the
      transaction.</para>
    </section>

    <section>
      <title>Error Handling</title>

      <para>This specification does not define a specific error handling
      strategy. Exceptions and errors that occur during transaction processing
      can result in the transaction being marked
      <emphasis>rollback-only</emphasis> by the container or framework in
      which an Application runs or may be left for the Application to handle.
      An Application which receives an error or an exception while running
      under a transaction can choose to mark the transaction
      rollback-only.</para>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>This specification relies on the security model of JTA.</para>
  </section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i3068796"><title>Java Transaction API Specification
      1.1</title>http://www.oracle.com/technetwork/java/javaee/jta/index.html</bibliomixed>

      <bibliomixed xml:id="i3068810"><title>XA+ Specification</title>Version
      2, The Open Group, ISBN: 1-85912-046-6</bibliomixed>

      <bibliomixed><title>Transaction Processing</title>J. Gray and A. Reuter.
      Morgan Kaufmann Publishers, ISBN 1.55860-190-2</bibliomixed>

      <bibliomixed xml:id="i3073418"><title>Java Platform, Enterprise Edition
      (Java EE) Specification,
      v5</title>http://jcp.org/en/jsr/detail?id=244</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="124" revision="$Id: f334831ebf1fab921523f415fc2fe9b89ea73d1b $" version="5" xml:id="service.jmx" xml:base="../124/service.jmx.xml">
  <title>JMX™ Management Model Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.jmx-version" linkend="org.osgi.jmx"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The Java Management Extensions (JMX) is the standard API
    specification for providing a management interface to Java SE and Java EE
    applications. The JMX specification defines the design patterns, APIs,
    services and architecture for application management, network management
    and monitoring in the Java programming language. The need to administer,
    monitor and manage a container is today recognized as a prerequisite in
    the enterprise software domain.</para>

    <para>While OSGi defines a rich API for controlling all aspects of the
    framework, this API is not suitable for direct usage in the JMX framework
    because it was not designed to be remoted. This specification provides an
    interface adaptation of the existing OSGi framework, which can be used to
    expose an OSGi Framework manipulation API to any JMX compliant
    implementation. Interfaces and system semantics for a monitoring system
    are specified for exposing the underlying artifacts of the OSGi framework
    such as services and bundles. Additionally, the management of a number of
    core and compendium services have been standardized in this
    document.</para>

    <para>Finally, a standardized JMX object naming standard is proposed so
    that management objects are uniformly named across implementations such
    that any JMX compliant system can find, manipulate and interact with the
    framework and artifacts that it manages.</para>

    <para>This specification requires version 1.2 or later of JMX, which
    implies the use of Java 5.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Life Cycle</emphasis> - Must allow support of full
          life cycle management of bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Batch</emphasis> - Support batch oriented operations
          to minimize the influence of network capacity and latency.</para>
        </listitem>

        <listitem>
          <para><emphasis>Compatible</emphasis> - This specification must work
          naturally with JMX.</para>
        </listitem>

        <listitem>
          <para><emphasis>Efficient</emphasis> - Minimize the number of
          registered objects to not overload the MBean Server and
          communication channels.</para>
        </listitem>

        <listitem>
          <para><emphasis>Open MBean</emphasis> - Support the Open MBean layer
          of JMX instead of using domain specific objects.</para>
        </listitem>

        <listitem>
          <para><emphasis>Core</emphasis> - Supports all the Framework's
          operations.</para>
        </listitem>

        <listitem>
          <para><emphasis>Core Services</emphasis> - Support the framework
          services if registered, except for Conditional Permission
          Admin.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>MBean</emphasis> - A Managed Bean. The core concept
          of JMX to manage an entity.</para>
        </listitem>

        <listitem>
          <para><emphasis>MBean Server</emphasis> - The MBean Server is the
          access point for registering MBeans.</para>
        </listitem>

        <listitem>
          <para><emphasis>Manager</emphasis> - The entity that implements the
          MBeans and registers them with the registered MBean servers.</para>
        </listitem>

        <listitem>
          <para><emphasis>Object Name</emphasis> - A name for an MBean
          registered with an MBean Server.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle State MBean</emphasis> - Provides central
          access to the state of a bundle in a framework.</para>
        </listitem>

        <listitem>
          <para><emphasis>Framework MBean</emphasis> - Represents the general
          framework's state and can be used to manage the life cycle of
          bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle Wiring State MBean</emphasis> - Provides
          access to the wiring state of the framework.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service State MBean</emphasis> - Provides access to
          the service information in the service registry. It provides both a
          general MBean interface as well as an Open Type description.</para>
        </listitem>

        <listitem>
          <para><emphasis>Configuration Admin MBean</emphasis> - Can be used
          to manipulate a Configuration Admin service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Permission Admin MBean</emphasis> - Provides access
          to the Permission Admin service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Provisioning Service MBean</emphasis> - Provides
          access to the Provisioning Service.</para>
        </listitem>

        <listitem>
          <para><emphasis>User Admin MBean</emphasis> - Provides access to the
          User Admin service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Item</emphasis> - A helper class to create Open
          Types. This class is intended to make the Javadoc easier to navigate
          and keep definitions close together. This is otherwise hard to do
          with Open Type. This class has no utility for management
          applications.</para>
        </listitem>

        <listitem>
          <para><emphasis>Open Type</emphasis> - A JMX metadata standard to
          describe MBeans.</para>
        </listitem>

        <listitem>
          <para><emphasis>Remote Manager</emphasis> - The entity accessing a
          MBean Server remotely.</para>
        </listitem>

        <listitem>
          <para><emphasis>JConsole</emphasis> - The default Java Remote
          Manager.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>MBeans</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.668in" contentwidth="7.000in" fileref="jmx-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Synopsis</title>

      <para>This specification plays a part in both the OSGi framework as well
      as in a remote manager.</para>

      <para>A JMX OSGi manager bundle obtains one or more MBean servers that
      are registered as services. The JMX OSGi manager then registers all its
      managed beans: Framework MBean, Bundle State MBean, Package State MBean,
      and the Service State MBean under their JMX object names. If a number of
      optional services are registered, then the JMX OSGi bundle must also
      register a corresponding MBean with the MBean server for each of the
      services that it can obtain.</para>

      <para>A remote manager can access an MBean Server running in a (remote)
      VM. The remote manager can then discover any MBeans. These MBeans can be
      manipulated as dynamic types or as specific types as outlined in this
      specification.</para>
    </section>
  </section>

  <section>
    <title>JMX Overview</title>

    <para>JMX is a specification which defines how arbitrary remote
    communication protocols and mechanisms can be adapted to interact with the
    underlying management APIs exposed by JMX compliant implementations. JMX
    is not a remote communication standard, the actual protocols can vary. The
    JMX architecture is composed of three levels:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Instrumentation</emphasis> - The managed resources of
        the system are instrumented using <emphasis>managed beans</emphasis>
        (a.k.a. MBeans) which expose their management interfaces through a JMX
        agent for remote management and monitoring.</para>
      </listitem>

      <listitem>
        <para><emphasis>Agent</emphasis> - The JMX agent layer is mainly
        represented by the MBean server. This is the <emphasis>managed
        object</emphasis> server where the MBeans are registered. The JMX
        agent includes a set of functions for manipulating the registered
        MBeans, which directly expose and control the underlying resources,
        and then make them available to remote managers.</para>
      </listitem>

      <listitem>
        <para><emphasis>Remote Manager</emphasis> - The remote management
        layer provides the specification for the actual remote communication
        protocol adapters and defines standard <emphasis>connectors</emphasis>
        which make the JMX agent accessible to remote managers outside of the
        Java process that hosts the agent.</para>
      </listitem>
    </itemizedlist>

    <para>The JMX Architecture is depicted in <xref linkend="i3070609"/>.</para>

    <figure xml:id="i3070609">
      <title>JMX Architecture</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.500in" contentwidth="5.982in" fileref="jmx-architecture.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <section>
      <title>Connectors and Adapters</title>

      <para>Connectors are used to connect an agent with a remote JMX-enabled
      managers. This form of communication involves a connector in the JMX
      agent and a connector client in the management application. Protocol
      adapters provide a management view of the JMX agent through a given
      protocol.</para>

      <para>Remote managers that connect to a protocol adapter are usually
      specific to the given protocol. Remote Managers can be generic consoles
      (such as JConsole; see <xref linkend="i3160796"/>), or domain-specific
      monitoring applications. External applications can interact with the
      MBeans through the use of JMX connectors and protocol adapters.</para>
    </section>

    <section>
      <title>Object Name</title>

      <para>All managed objects in JMX are referenced via JMX <emphasis>Object
      Names</emphasis>. Object Names are strings which can be resolved within
      the context of a JMX MBean Server in order. An Object Name consists of
      two parts:</para>

      <programlisting>ObjectName  ::= domain ':' properties
properties  ::= property ( ',' property )*</programlisting>

      <para>To avoid collisions between MBeans supplied by different vendors,
      a recommended convention is to begin the domain name with the reverse
      DNS name of the organization that specifies the MBeans, followed by a
      full stop (<code>'.' \u002E</code>) and a string whose interpretation is
      determined by that organization.</para>

      <para>MBeans specified by the OSGi Alliance have domains that start with
      <code>osgi</code>.</para>
    </section>

    <section>
      <title>MBeans</title>

      <para>Any object can be registered with an MBean Server and manipulated
      remotely over an <emphasis>MBean Server Connection</emphasis>. An MBean
      Server Connection can represent the a local MBean Server or a remote
      MBean Server. An MBean is always identified by an <emphasis>Object
      Name</emphasis>. The Object Name identifies a remote MBean uniquely
      within a specific MBean Server Connection.</para>

      <para>Standard manipulations of a remote MBean are done through
      <emphasis>attributes</emphasis> and <emphasis>operations</emphasis>,
      which are similar to properties and methods for Java beans. Not all
      methods on the implementation class can be used, the registering party
      must specifically provide access to the methods that can be called
      remotely. The registrar can define the exposed operations with the
      following mechanisms:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Design Pattern</emphasis> - Let the registered
          object implement an <emphasis>MBean interface</emphasis> that has
          the fully qualified name of the implementation class suffixed with
          <code>MBean</code>. The MBean server will then limit access to
          attributes and properties defined in the MBean interface. For
          example, the <code>com.acme.Resource</code> class should implement
          the <code>com.acme.ResourceMBean</code> interface. The
          <code>com.acme.ResourceMBean</code> interface would define the
          properties and operations.</para>
        </listitem>

        <listitem>
          <para><emphasis>Dynamic MBean</emphasis> - Register a Dynamic MBean,
          which handles the access to the operations and attributes
          programmatically. The JMX specification provides the
          <code>DynamicMBean</code> interface for this purpose. If the MBean
          registered with an MBean Server implements this interface, then the
          MBean Server must get the MBean's metadata through the
          <code>DynamicMBean</code> interface instead of using reflection.
          Therefore, Dynamic MBeans can provide more rich metadata that
          describes their operations and attributes.</para>
        </listitem>

        <listitem>
          <para><emphasis>Standard MBean</emphasis> - Register a Standard
          MBean. A standard MBean works the same as the previous bullet but
          does not require the implementation class name to map to the MBean
          interface name.</para>
        </listitem>
      </itemizedlist>

      <para>Attributes map to properties on the registered MBean interface and
      operations allow the invocation of an arbitrary method on the remote
      MBean with arbitrary parameters. The following code example shows how to
      get a the size property of a remote MBean in this way:</para>

      <programlisting>void drop( MBeanServerConnection mbs, ObjectNameobjectName) {
  Integer sizeI = (Integer) 
        mbs.getAttribute(objectName, "Size");
  int size = sizeI.intValue();
  if (size &gt; desiredSize) {
    mbs.invoke(objectName,"dropOldest",
        new Integer[] {new Integer(size - desiredSize)},
        new String[] {"int"});
  }
}</programlisting>

      <para>In release 1.2 the JMX specification introduced the
      <emphasis>MBean Server Invocation Handler</emphasis> to simplify the
      manipulation of the remote MBeans by creating a
      <emphasis>proxy</emphasis> for an <emphasis>MBean interface</emphasis>
      that implements all the relevant methods. An MBean interface defines the
      methods and properties for an MBean. The proxy has a reference to an
      <emphasis>MBean Server Connection</emphasis>, it can therefore automate
      the invocation of the appropriate methods from the MBean interface.
      Therefore, by using an MBean interface, it is possible to simplify the
      remote manager:</para>

      <programlisting>MBeanServer mbs = ...;
CacheControlMBean cacheControl = (CacheControlMBean)
 MbeanServerInvocationHandler.newProxyInstance(
    mbs, objectName, CacheControlMBean.class, false);

int size = cacheControl.getSize();
if (size &gt; desiredSize)
  cacheControl.dropOldest(size - desiredSize);</programlisting>

      <para>The creation of the proxy is somewhat verbose, but once it is
      available, the MBean can be accessed like a local object. The proxy is
      much easier to use and read, and much less error-prone, than accessing
      the MBean Server method through invoking operations and getting
      attributes.</para>

      <para>The MBean interface can also ensure a certain amount of type
      safety. The MBean implementation can implement the MBean interface and
      the remote manager uses the proxy implementing this interface. However,
      neither is required. The MBean can directly implement the methods
      without implementing the interface and the remote manager can directly
      manipulate the attributes and invocations.</para>

      <para>The key advantage is therefore the documentation of the management
      interface. Using an MBean interface, this can be done very concisely and
      it allows the usage of standard tools for Java source code and
      Javadoc.</para>
    </section>

    <section xml:id="i3076516">
      <title>Open Types</title>

      <para>The distributed nature of remote management poses a number of
      problems for exchanging general objects.</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Versioning</emphasis> - All participating parties
          require access to the same version of the object's class.</para>
        </listitem>

        <listitem>
          <para><emphasis>Serialization</emphasis> - Not all objects are easy
          to serialize.</para>
        </listitem>

        <listitem>
          <para><emphasis>Size</emphasis> - Arbitrary objects can transitively
          link to large amounts of data.</para>
        </listitem>

        <listitem>
          <para><emphasis>Descriptive</emphasis> - Classes provide little or
          no support for editing.</para>
        </listitem>

        <listitem>
          <para><emphasis>Limited</emphasis> - Classes are Java specific,
          making it harder to interact with non-Java environments.</para>
        </listitem>
      </itemizedlist>

      <para>An alternative is to limit the management types to be exchanged to
      small, well defined set. Open MBeans limit the used data types to small
      number of types called the <emphasis>basic types</emphasis>. These types
      are supported by all JMX 1.2 and later implementations. This basic set
      of types contains:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Primitives</emphasis> - <code>boolean, byte, char,
          short, int, long, float, double</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Primitive Arrays</emphasis> - <code>boolean[],
          byte[], char[], short[], int[], long[], float[],
          double[]</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Wrappers</emphasis> - <code>Boolean, Byte,
          Character, Short, Integer, Long, Float, Double</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Scalars</emphasis> - <code>String, BigDecimal,
          BigInteger, Date, ObjectName</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Complex</emphasis> - <code>CompositeData,
          TabularData</code>, and complex arrays.</para>
        </listitem>

        <listitem>
          <para><emphasis>Return</emphasis> - <code>Void,</code> operation
          return only.</para>
        </listitem>
      </itemizedlist>

      <para>The Complex types are unique to JMX, they are used to provide
      access to complex data (like objects) without using classes. The complex
      types are <emphasis>self describing</emphasis>. The metadata associated
      with these complex types allow a remote manager to discover the
      structure and automatically construct a (graphic) user interface for
      these complex objects.</para>

      <para>Open MBeans must be Dynamic MBeans when registered. Furthermore,
      they must provide Open MBean variations of the Info objects that
      describe the operations and attributes.</para>
    </section>
  </section>

  <section>
    <title>OSGi JMX Management</title>

    <para>The OSGi JMX Management model is based on Open MBeans, see <xref linkend="i3076516"/>. This specification declares a number of MBeans for
    the core Framework, some of the core services, and a number of compendium
    services. Though Open MBeans are based on Dynamic MBeans, this
    specification uses the traditional MBean interface to define the
    management interaction patterns. The implementer of this specification
    must register an implementation of these interfaces as a Dynamic MBean. An
    implementation should provide the additional Open MBeans Info objects for
    the operations and attributes.</para>

    <para>This specification defines the following Open MBeans:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Core Framework</emphasis> -
        <code>FrameworkMBean</code>, <code>BundleStateMBean</code>,
        <code>ServiceStateMBean</code>, <code>BundleWiringStateMBean,</code>
        and <code>PackageStateMBean</code>.</para>
      </listitem>

      <listitem>
        <para><emphasis>Core Services</emphasis> -
        <code>PermissionAdminMBean</code>. The Conditional Permission Admin is
        not included in this specification.</para>
      </listitem>

      <listitem>
        <para><emphasis>Compendium Services</emphasis> -
        <code>ConfigurationAdminMBean</code>, <code>UserAdminMBean</code>,
        <code>ProvisioningServiceMBean</code></para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Naming</title>

      <para>The MBean interfaces have been named after the service they
      manage. That is the <code>ConfigurationAdminMBean</code> interface
      manages the Configuration Admin service, which is modelled with the
      <code>ConfigurationAdmin</code> interface.</para>

      <para>Package names are constructed from taking the corresponding
      resource package and inserting <code>jmx.</code> after
      <code>org.osgi</code>. For example</para>

      <programlisting>org.osgi.framework          org.osgi.jmx.framework
org.osgi.service.cm         org.osgi.jmx.service.cm</programlisting>

      <para>It is not possible to use the MBean interface design pattern
      because the MBean interfaces are in OSGi packages. The design pattern
      requires the fully qualified name of the implementation suffixed with
      MBean to match the MBean interface name. This would require that the
      implementation class resides in an OSGi package, which would extend
      these packages.</para>

      <para>However, the <code>StandardMBean</code> class allows the
      association of one of the OSGi MBean interfaces with an arbitrary
      class.</para>
    </section>

    <section>
      <title>Object Naming</title>

      <para>Object Names for OSGi managed MBeans must follow the following
      structure:</para>

      <programlisting>object-name    ::= ( core | compendium ) 
                    ',version=' version 
                    ',framework=' framework
                    ',uuid=' uuid
                   (',' key '=' value )*
core           ::= 'osgi.core:' framework-type
compendium     ::= 'osgi.compendium:' service-type
framework-type ::= ( 'type=' token ) | service-type
service-type   ::= 'service=' token
framework      ::= &lt;Bundle symbolic name of the system bundle&gt;
uuid           ::= &lt;org.osgi.framework.uuid Framework property'svalue&gt;
key            ::= &lt;any jmx supported key&gt;
value          ::= &lt;any jmx supported value&gt;</programlisting>

      <para>There are the following additional constraints:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Spaces</emphasis> - Spaces between any of the
          terminals are not permitted.</para>
        </listitem>

        <listitem>
          <para><emphasis>Version</emphasis> - The <code>version</code> must
          be limited to a major and minor version part. The given version must
          identify the package of the corresponding resource. For example, if
          the Configuration Admin service is on version
          <code>1.3.2.200910101250</code>, then the version in the Object Name
          must be <code>1.3</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service</emphasis> - The <code>service-type</code>
          should use the package name of the corresponding service. For
          example, for Configuration Admin this would be
          <code>service=cm</code>.</para>
        </listitem>
      </itemizedlist>

      <para>The Object Name must contain the framework bundle symbolic name
      and its UUID so that multiple instances on the same VM can be
      discriminated. An example of an Object Name is:</para>

      <programlisting>osgi.core:type=framework,version=1.7,framework=org.apache.felix.framework, «
    uuid=f81d4fae-7dec-11d0-a765-00a0c91e6bf6</programlisting>

      <para>The advantage of the framework property is that it can be used to
      simplify the querying for the MBeans using Object Name
      <emphasis>patterns</emphasis>. Patterns are names have an asterisk
      (<code>'*' \u002A</code>). For instance, the following query allows a
      client to find all Framework MBeans for an Apache Felix implementation
      without having to rely on knowing the UUID:</para>

      <programlisting>ObjectName on = new ObjectName(
    "osgi.core:type=framework,"
    +   "version=1.7,framework=org.apache.felix.framework,*");
Set&lt;ObjectInstance&gt; instances = mserver.queryMBeans(on,null);</programlisting>

      <para>Furthermore, in many cases, a JMX client may appropriately assume
      that only a single instance of the OSGi framework exists in the managed
      system, as in the following example:</para>

      <programlisting>ObjectName on = new ObjectName("osgi.core:type=framework,version=1.7,*");
Set&lt;ObjectInstance&gt; instances = mserver.queryMBeans(on,null);</programlisting>

      <para>The <code>uuid</code> and <code>framework</code> property keys are
      only applicable to OSGi JMX Management Model Specification Version 1.1
      and above.</para>

      <para>To maintain backward compatibility, a OSGi JMX Framework package
      Version 1.7 may register the first instantiation of an OSGi framework
      using both the Version 1.0 Object Names as well as the Object Names
      outlined in this specification. In other words, a JMX client may not
      specify the <code>uuid</code> and/or framework properties, and still
      retrieve the MBeans for a OSGi framework instance.</para>

      <para>The actual object name prefixes are defined in the MBean
      interfaces. For example, the Object Name for the Configuration Admin
      MBean is:</para>

      <programlisting>osgi.compendium:service=cm,version=1.3</programlisting>

      <para>It is the responsibility of the party registering the MBean to
      suffix this with the framework and UUID.</para>

      <para>In this specification, all management interfaces are specified to
      return opaque Strings or longs rather than Object Names so that the
      MBean interfaces contain no JMX specific artifacts and can be used with
      a variety of remote access protocols such as SNMP, etc. Non JMX use of
      these APIs can use these Strings as their own opaque identifiers without
      any change to the interfaces themselves.</para>
    </section>

    <section>
      <title>The MBean Server</title>

      <para>An implementation of this specification must find all MBean
      Servers services that it has access to. It should then register all
      MBeans with each server found in the service registry.</para>

      <para>A compliant implementation must register all the framework's
      MBeans: <code>FrameworkMBean, BundleStateMBean, ServiceStateMBean,
      BundleWiringStateMBean and PackageStateMBean</code>. The registration of
      the compendium services is optional. However, if they are registered
      they must implement the behavior as defined in this
      specification.</para>
    </section>

    <section>
      <title>Registrations</title>

      <para>The OSGi MBeans are designed to minimize the notifications. That
      is, the objects model a command interface to access the required
      information. Their registration is not intended to signify anything else
      than the start of the manager bundle and the availability of the
      underlying resource.</para>

      <para>Implementations must always register only one of each of the
      Framework MBean types (Framework MBean, Service State MBean, Bundle
      State MBean, Wiring State MBean, and Package State MBean). All other
      MBean types depend on the registered services they manage. Each service
      requires its unique MBean. If no corresponding service is present, then
      no MBean should be registered. Modified events must be ignored. If a
      manager supports a specific OSGi MBean for a compendium service then it
      must register an MBean for each instance of that service.</para>
    </section>
  </section>

  <section>
    <title>MBeans</title>

    <para>This specification defines MBean interfaces listed in the following
    table. The Object Name specified in this table is broken into a number of
    lines for readability, however, newlines and whitespace is not allowed in
    the Object Name.</para>

    <table>
      <title>MBeans</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="1*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1.2*"/>

        <thead>
          <row>
            <entry>MBean</entry>

            <entry>Object Name</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><para><xref linkend="org.osgi.jmx.framework.FrameworkMBean" xrefstyle="hyperlink"/></para></entry>

            <entry><para><code>osgi.core:</code></para><para><code>type=framework,</code></para><para><code>version=1.7</code></para></entry>

            <entry><para>Provides access to bundle life cycle methods of the
            framework including batch install and update
            operations.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.jmx.framework.BundleStateMBean" xrefstyle="hyperlink"/></para></entry>

            <entry><para><code>osgi.core:</code></para><para><code>type=bundleState,</code></para><para><code>version=1.7</code></para></entry>

            <entry><para>Provides detailed access to the state of one bundle
            and aggregated state of a group of bundles.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.jmx.framework.ServiceStateMBean" xrefstyle="hyperlink"/></para></entry>

            <entry><para><code>osgi.core:</code></para><para><code>type=serviceState,</code></para><para><code>version=1.7</code></para></entry>

            <entry><para>Provides detailed access to the state of one service
            and aggregated state of a group of services.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.jmx.framework.PackageStateMBean" xrefstyle="hyperlink"/></para></entry>

            <entry><para><code>osgi.core:</code></para><para><code>type=packageState,</code></para><para><code>version=1.5</code></para></entry>

            <entry><para>Provides detailed access to the state of one package
            and aggregated state of a group of packages.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.jmx.service.permissionadmin.PermissionAdminMBean" xrefstyle="hyperlink"/></para></entry>

            <entry><para><code>osgi.core:</code></para><para><code>service=permissionadmin,</code></para><para><code>version=1.2</code></para></entry>

            <entry><para>Based on the Permission Admin service.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.jmx.service.cm.ConfigurationAdminMBean" xrefstyle="hyperlink"/></para></entry>

            <entry><para><code>osgi.compendium:</code></para><para><code>service=cm,</code></para><para><code>version=1.3</code></para></entry>

            <entry><para>Manages a Configuration Admin service.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.jmx.service.provisioning.ProvisioningServiceMBean" xrefstyle="hyperlink"/></para></entry>

            <entry><para><code>osgi.compendium:</code></para><para><code>service=provisioning,</code></para><para><code>version=1.2</code></para></entry>

            <entry><para>Manages a Provisioning Service.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.jmx.service.useradmin.UserAdminMBean" xrefstyle="hyperlink"/></para></entry>

            <entry><para><code>osgi.compendium:</code></para><para><code>service=useradmin,</code></para><para><code>version=1.1</code></para></entry>

            <entry><para>Manages a User Admin service.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean" xrefstyle="hyperlink"/></para></entry>

            <entry><para><code>osgi.core:</code></para><para><code>service=wiringState,</code></para><para><code>version=1.1</code></para></entry>

            <entry><para>Reflects the Framework's wiring state.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section>
    <title>Item</title>

    <para>The MBean interfaces do not only define the Java interface, they
    also define the Open Types. These types are defined with the <xref linkend="org.osgi.jmx.Item" xrefstyle="hyperlink"/> class in this
    specification to simplify the definitions; the Item class has no role in a
    management application. The Item class is used to allow the items used in
    Composite Types to be encoded in the interface. This is not possible with
    the standard Open Types because they use exceptions and use parallel
    arrays. For example, the following code defines a static Open Type without
    the Item class:</para>

    <programlisting>static CompositeType HEADER;
static {
   try {
     HEADER = new CompositeType( "HEADER" "This is a header", 
        new String[] {"KEY", "VALUE"},
        new String[] {"A key for a header", "A value for a header"},
        new OpenType[] { SimpleType.STRING, SimpleType.STRING });
   catch(OpenDataException e) {
     ...
   }
}</programlisting>

    <para>This code can be replaced with the <code>Item</code> class:</para>

    <programlisting>static Item KEY = new Item("KEY", "A key forheader", SimpleType.STRING );
static Item VALUE = new Item("VALUE", "A value for header",SimpleType.STRING );
static CompositeType HEADER = Item.composite( "HEADER", "Thisis a header",
    KEY, VALUE );</programlisting>

    <para>The Item class also provides a number of convenience methods to
    construct the different Open Types. However, the intention is to simplify
    the specification definitions, not as an aid in management
    operations.</para>
  </section>

  <section>
    <title>Security</title>

    <para>Exposing any system remotely opens up a, potentially, devastating
    security hole in a system. Remote entities should establish their identity
    and the management system should be able to control the access these
    entities have over the management system. JMX seamlessly inter operates
    with the Java Authentication and Authorization Service (JAAS) and Java 2
    platform Standard Edition (Java SE) Security Architecture.</para>

    <para>The JMX OSGi manager must have access to the services it manages and
    the operations it invokes. It is likely that this bundle requires All
    Permission because it needs to invoke operations on the Conditional
    Permission Admin. It is strongly advised that implementations limit the
    set of available permissions based on authenticating the remote
    manager.</para>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.jmx" xml:id="org.osgi.jmx" xml:base="../../generated/javadoc/docbook/org.osgi.jmx.xml">
   <title>org.osgi.jmx</title>
   <info>
      <releaseinfo xml:id="org.osgi.jmx-version">Version 1.1</releaseinfo>
      <edition xml:id="org.osgi.jmx-version.number">1.1</edition>
   </info>
   <para>
OSGi JMX Package Version 1.1.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.jmx; version="[1.1,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.jmx; version="[1.1,1.2)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.jmx.Item">
                  <code>Item</code>
               </link> - 
The item class enables the definition of open types in the appropriate
 interfaces.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.jmx.JmxConstants">
                  <code>JmxConstants</code>
               </link> - 
Constants for OSGi JMX Specification.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="Item" xml:id="org.osgi.jmx.Item">
      <title>public class Item</title>
      <para>
The item class enables the definition of open types in the appropriate
 interfaces.
 
 This class contains a number of methods that make it possible to create open
 types for CompositeType, TabularType, and ArrayType.
 The normal creation throws a checked exception, making it impossible to use
 them in a static initializer. The constructors are also not very suitable for
 static construction.
 
 
 An Item instance describes an item in a Composite Type. It groups the triplet
 of name, description, and Open Type. These Item instances allows the
 definitions of an item to stay together.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="method" xreflabel="Item(String,String,javax.management.openmbean.OpenType,String...)" xml:id="org.osgi.jmx.Item.Item-String-String-javax.management.openmbean.OpenType-String...-">
         <title>public  Item(String name,String description,OpenType type,String ... restrictions)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the item.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>description</title>
            <para>The description of the item.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>The Open Type of this item.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>restrictions</title>
            <para>Ignored, contains list of restrictions</para>
         </formalpara>
         <para role="description">
Create a triple of name, description, and type. This triplet is used in
 the creation of a Composite Type.
   </para>
      </section>
      <section role="method" xreflabel="arrayType(int,javax.management.openmbean.OpenType)" xml:id="org.osgi.jmx.Item.arrayType-int-javax.management.openmbean.OpenType-">
         <title>public static ArrayType arrayType(int dim,OpenType elementType)</title>
         <formalpara role="parameter">
            <title>dim</title>
            <para>The dimension</para>
         </formalpara>
         <formalpara role="parameter">
            <title>elementType</title>
            <para>The element type</para>
         </formalpara>
         <para role="description">
Return a new Array Type.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new Array Type</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="compositeType(String,String,Item...)" xml:id="org.osgi.jmx.Item.compositeType-String-String-Item...-">
         <title>public static CompositeType compositeType(String name,String description,Item ... items)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the Tabular Type.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>description</title>
            <para>The description of the Tabular Type.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>items</title>
            <para>The items that describe the composite type.</para>
         </formalpara>
         <para role="description">
Create a Composite Type
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a new Composite Type</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>RuntimeException</code>– when the Tabular Type throws an
         OpenDataException   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="extend(javax.management.openmbean.CompositeType,String,String,Item...)" xml:id="org.osgi.jmx.Item.extend-javax.management.openmbean.CompositeType-String-String-Item...-">
         <title>public static CompositeType extend(CompositeType parent,String name,String description,Item ... items)</title>
         <formalpara role="parameter">
            <title>parent</title>
            <para>The parent type, can be <code>null</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the type</para>
         </formalpara>
         <formalpara role="parameter">
            <title>description</title>
            <para>The description of the type</para>
         </formalpara>
         <formalpara role="parameter">
            <title>items</title>
            <para>The items that should be added/override to the parent type</para>
         </formalpara>
         <para role="description">
Extend a Composite Type by adding new items. Items can override items in
 the parent type.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new Composite Type that extends the parent type</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>RuntimeException</code>– when an OpenDataException is thrown   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="tabularType(String,String,javax.management.openmbean.CompositeType,String...)" xml:id="org.osgi.jmx.Item.tabularType-String-String-javax.management.openmbean.CompositeType-String...-">
         <title>public static TabularType tabularType(String name,String description,CompositeType rowType,String ... index)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the Tabular Type.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>description</title>
            <para>The description of the Tabular Type.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>rowType</title>
            <para>The Open Type for a row</para>
         </formalpara>
         <formalpara role="parameter">
            <title>index</title>
            <para>The names of the items that form the index .</para>
         </formalpara>
         <para role="description">
Create a Tabular Type.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new Tabular Type composed from the parameters.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>RuntimeException</code>– when the Tabular Type throws an
         OpenDataException   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="JmxConstants" xml:id="org.osgi.jmx.JmxConstants">
      <title>public class JmxConstants</title>
      <para>
Constants for OSGi JMX Specification.
 
 Additionally, this class contains a number of utility types that are used in
 different places in the specification. These are <link linkend="org.osgi.jmx.JmxConstants.LONG_ARRAY_TYPE">LONG_ARRAY_TYPE</link>,
 <link linkend="org.osgi.jmx.JmxConstants.STRING_ARRAY_TYPE">STRING_ARRAY_TYPE</link>, and <link linkend="org.osgi.jmx.JmxConstants.PROPERTIES_TYPE">PROPERTIES_TYPE</link>.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="ARRAY_OF" xml:id="org.osgi.jmx.JmxConstants.ARRAY_OF">
         <title>public static final String ARRAY_OF = "Array of "</title>
         <para>
For an encoded array we need to start with ARRAY_OF. This must be
 followed by one of the names in <link linkend="org.osgi.jmx.JmxConstants.SCALAR">SCALAR</link>.
   </para>
      </section>
      <section role="field" xreflabel="BIGDECIMAL" xml:id="org.osgi.jmx.JmxConstants.BIGDECIMAL">
         <title>public static final String BIGDECIMAL = "BigDecimal"</title>
         <para>
Value for <link linkend="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">PROPERTY_TYPE</link> value in the case of
 java.math.BigDecimal</para>
      </section>
      <section role="field" xreflabel="BIGINTEGER" xml:id="org.osgi.jmx.JmxConstants.BIGINTEGER">
         <title>public static final String BIGINTEGER = "BigInteger"</title>
         <para>
Value for <link linkend="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">PROPERTY_TYPE</link> value in the case of
 java.math.BigInteger</para>
      </section>
      <section role="field" xreflabel="BOOLEAN" xml:id="org.osgi.jmx.JmxConstants.BOOLEAN">
         <title>public static final String BOOLEAN = "Boolean"</title>
         <para>
Value for <link linkend="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">PROPERTY_TYPE</link> value in the case of
 java.lang.Boolean</para>
      </section>
      <section role="field" xreflabel="BYTE" xml:id="org.osgi.jmx.JmxConstants.BYTE">
         <title>public static final String BYTE = "Byte"</title>
         <para>
Value for <link linkend="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">PROPERTY_TYPE</link> value in the case of
 java.lang.Byte</para>
      </section>
      <section role="field" xreflabel="CHARACTER" xml:id="org.osgi.jmx.JmxConstants.CHARACTER">
         <title>public static final String CHARACTER = "Character"</title>
         <para>
Value for <link linkend="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">PROPERTY_TYPE</link> value in the case of
 java.lang.Character</para>
      </section>
      <section role="field" xreflabel="DOUBLE" xml:id="org.osgi.jmx.JmxConstants.DOUBLE">
         <title>public static final String DOUBLE = "Double"</title>
         <para>
Value for <link linkend="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">PROPERTY_TYPE</link> value in the case of
 java.lang.Double</para>
      </section>
      <section role="field" xreflabel="FLOAT" xml:id="org.osgi.jmx.JmxConstants.FLOAT">
         <title>public static final String FLOAT = "Float"</title>
         <para>
Value for <link linkend="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">PROPERTY_TYPE</link> value in the case of
 java.lang.Float</para>
      </section>
      <section role="field" xreflabel="INTEGER" xml:id="org.osgi.jmx.JmxConstants.INTEGER">
         <title>public static final String INTEGER = "Integer"</title>
         <para>
Value for <link linkend="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">PROPERTY_TYPE</link> value in the case of
 java.lang.Integer</para>
      </section>
      <section role="field" xreflabel="KEY" xml:id="org.osgi.jmx.JmxConstants.KEY">
         <title>public static final String KEY = "Key"</title>
         <para>
The key KEY.
   </para>
      </section>
      <section role="field" xreflabel="KEY_ITEM" xml:id="org.osgi.jmx.JmxConstants.KEY_ITEM">
         <title>public static final Item KEY_ITEM</title>
         <para>
The key of a property. The key is <link linkend="org.osgi.jmx.JmxConstants.KEY">KEY</link> and the type is
 SimpleType.STRING.
   </para>
      </section>
      <section role="field" xreflabel="LONG" xml:id="org.osgi.jmx.JmxConstants.LONG">
         <title>public static final String LONG = "Long"</title>
         <para>
Value for <link linkend="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">PROPERTY_TYPE</link> value in the case of
 java.lang.Long</para>
      </section>
      <section role="field" xreflabel="LONG_ARRAY_TYPE" xml:id="org.osgi.jmx.JmxConstants.LONG_ARRAY_TYPE">
         <title>public static final ArrayType LONG_ARRAY_TYPE</title>
         <para>
The MBean Open type for an array of longs
   </para>
      </section>
      <section role="field" xreflabel="OSGI_COMPENDIUM" xml:id="org.osgi.jmx.JmxConstants.OSGI_COMPENDIUM">
         <title>public static final String OSGI_COMPENDIUM = "osgi.compendium"</title>
         <para>
The domain name of the selected OSGi compendium MBeans
   </para>
      </section>
      <section role="field" xreflabel="OSGI_CORE" xml:id="org.osgi.jmx.JmxConstants.OSGI_CORE">
         <title>public static final String OSGI_CORE = "osgi.core"</title>
         <para>
The domain name of the core OSGi MBeans
   </para>
      </section>
      <section role="field" xreflabel="P_BOOLEAN" xml:id="org.osgi.jmx.JmxConstants.P_BOOLEAN">
         <title>public static final String P_BOOLEAN = "boolean"</title>
         <para>
Value for <link linkend="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">PROPERTY_TYPE</link> value in the case of the <code>boolean</code>
 primitive type.
   </para>
      </section>
      <section role="field" xreflabel="P_BYTE" xml:id="org.osgi.jmx.JmxConstants.P_BYTE">
         <title>public static final String P_BYTE = "byte"</title>
         <para>
Value for <link linkend="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">PROPERTY_TYPE</link> value in the case of the <code>byte</code>
 primitive type.
   </para>
      </section>
      <section role="field" xreflabel="P_CHAR" xml:id="org.osgi.jmx.JmxConstants.P_CHAR">
         <title>public static final String P_CHAR = "char"</title>
         <para>
Value for <link linkend="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">PROPERTY_TYPE</link> value in the case of the <code>char</code>
 primitive type.
   </para>
      </section>
      <section role="field" xreflabel="P_DOUBLE" xml:id="org.osgi.jmx.JmxConstants.P_DOUBLE">
         <title>public static final String P_DOUBLE = "double"</title>
         <para>
Value for <link linkend="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">PROPERTY_TYPE</link> value in the case of the <code>double</code>
 primitive type.
   </para>
      </section>
      <section role="field" xreflabel="P_FLOAT" xml:id="org.osgi.jmx.JmxConstants.P_FLOAT">
         <title>public static final String P_FLOAT = "float"</title>
         <para>
Value for <link linkend="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">PROPERTY_TYPE</link> value in the case of the <code>float</code>
 primitive type.
   </para>
      </section>
      <section role="field" xreflabel="P_INT" xml:id="org.osgi.jmx.JmxConstants.P_INT">
         <title>public static final String P_INT = "int"</title>
         <para>
Value for <link linkend="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">PROPERTY_TYPE</link> value in the case of the <code>int</code>
 primitive type.
   </para>
      </section>
      <section role="field" xreflabel="P_LONG" xml:id="org.osgi.jmx.JmxConstants.P_LONG">
         <title>public static final String P_LONG = "long"</title>
         <para>
Value for <link linkend="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">PROPERTY_TYPE</link> value in the case of the <code>long</code>
 primitive type.
   </para>
      </section>
      <section role="field" xreflabel="P_SHORT" xml:id="org.osgi.jmx.JmxConstants.P_SHORT">
         <title>public static final String P_SHORT = "short"</title>
         <para>
Value for <link linkend="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">PROPERTY_TYPE</link> value in the case of the <code>short</code>
 primitive type.
   </para>
      </section>
      <section role="field" xreflabel="PROPERTIES_TYPE" xml:id="org.osgi.jmx.JmxConstants.PROPERTIES_TYPE">
         <title>public static final TabularType PROPERTIES_TYPE</title>
         <para>
Describes a map with properties. The row type is <link linkend="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">PROPERTY_TYPE</link>.
 The index is defined to the <link linkend="org.osgi.jmx.JmxConstants.KEY">KEY</link> of the property.
   </para>
      </section>
      <section role="field" xreflabel="PROPERTY_TYPE" xml:id="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">
         <title>public static final CompositeType PROPERTY_TYPE</title>
         <para>
A Composite Type describing a a single property. A property consists of
 the following items <link linkend="org.osgi.jmx.JmxConstants.KEY_ITEM">KEY_ITEM</link>, <link linkend="org.osgi.jmx.JmxConstants.VALUE_ITEM">VALUE_ITEM</link>, and
 <link linkend="org.osgi.jmx.JmxConstants.TYPE_ITEM">TYPE_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="SCALAR" xml:id="org.osgi.jmx.JmxConstants.SCALAR">
         <title>public static final List&lt;String&gt; SCALAR</title>
         <para>
A set of all scalars that can be used in the <link linkend="org.osgi.jmx.JmxConstants.TYPE">TYPE</link> property of a
 <link linkend="org.osgi.jmx.JmxConstants.PROPERTIES_TYPE">PROPERTIES_TYPE</link>. This contains the following names:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.JmxConstants.BIGDECIMAL">BIGDECIMAL</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.JmxConstants.BIGINTEGER">BIGINTEGER</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.JmxConstants.BOOLEAN">BOOLEAN</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.JmxConstants.BYTE">BYTE</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.JmxConstants.CHARACTER">CHARACTER</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.JmxConstants.DOUBLE">DOUBLE</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.JmxConstants.FLOAT">FLOAT</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.JmxConstants.INTEGER">INTEGER</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.JmxConstants.LONG">LONG</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.JmxConstants.SHORT">SHORT</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.JmxConstants.STRING">STRING</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.JmxConstants.VERSION">VERSION</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.JmxConstants.P_BYTE">P_BYTE</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.JmxConstants.P_CHAR">P_CHAR</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.JmxConstants.P_DOUBLE">P_DOUBLE</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.JmxConstants.P_FLOAT">P_FLOAT</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.JmxConstants.P_INT">P_INT</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.JmxConstants.P_LONG">P_LONG</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.JmxConstants.P_SHORT">P_SHORT</link>
               </para>
            </listitem>
         </itemizedlist>
      </section>
      <section role="field" xreflabel="SHORT" xml:id="org.osgi.jmx.JmxConstants.SHORT">
         <title>public static final String SHORT = "Short"</title>
         <para>
Value for <link linkend="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">PROPERTY_TYPE</link> value in the case of
 java.lang.Short</para>
      </section>
      <section role="field" xreflabel="STRING" xml:id="org.osgi.jmx.JmxConstants.STRING">
         <title>public static final String STRING = "String"</title>
         <para>
Value for <link linkend="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">PROPERTY_TYPE</link> value in the case of
 java.lang.String</para>
      </section>
      <section role="field" xreflabel="STRING_ARRAY_TYPE" xml:id="org.osgi.jmx.JmxConstants.STRING_ARRAY_TYPE">
         <title>public static final ArrayType STRING_ARRAY_TYPE</title>
         <para>
The MBean Open type for an array of strings
   </para>
      </section>
      <section role="field" xreflabel="TYPE" xml:id="org.osgi.jmx.JmxConstants.TYPE">
         <title>public static final String TYPE = "Type"</title>
         <para>
The key TYPE.
   </para>
      </section>
      <section role="field" xreflabel="TYPE_ITEM" xml:id="org.osgi.jmx.JmxConstants.TYPE_ITEM">
         <title>public static final Item TYPE_ITEM</title>
         <para>
The type of the property. The key is <link linkend="org.osgi.jmx.JmxConstants.TYPE">TYPE</link> and the type is
 SimpleType.STRING. This string must follow the following syntax:
 </para>
         <para/>
         <programlisting> type      ::= <link linkend="org.osgi.jmx.JmxConstants.SCALAR">scalar</link> | vector | array
 vector    ::= 'Vector of' scalar
 array     ::= 'Array of' (scalar | primitive)
 scalar    ::= '<link linkend="org.osgi.jmx.JmxConstants.STRING">String</link>' | '<link linkend="org.osgi.jmx.JmxConstants.BIGINTEGER">BigInteger</link>' | '<link linkend="org.osgi.jmx.JmxConstants.BIGDECIMAL">BigDecimal</link>'
              | '<link linkend="org.osgi.jmx.JmxConstants.BYTE">Byte</link>' | '<link linkend="org.osgi.jmx.JmxConstants.CHARACTER">Character</link>' | '<link linkend="org.osgi.jmx.JmxConstants.SHORT">Short</link>'
              | '<link linkend="org.osgi.jmx.JmxConstants.INTEGER">Integer</link>' | '<link linkend="org.osgi.jmx.JmxConstants.LONG">Long</link>' | '<link linkend="org.osgi.jmx.JmxConstants.FLOAT">Float</link>'
              | '<link linkend="org.osgi.jmx.JmxConstants.DOUBLE">Double</link>' | '<link linkend="org.osgi.jmx.JmxConstants.VERSION">Version</link>'
 primitive ::= '<link linkend="org.osgi.jmx.JmxConstants.P_BYTE">byte</link>' | '<link linkend="org.osgi.jmx.JmxConstants.P_CHAR">char</link>' | '<link linkend="org.osgi.jmx.JmxConstants.P_SHORT">short</link>'
              | '<link linkend="org.osgi.jmx.JmxConstants.P_INT">int</link>' | '<link linkend="org.osgi.jmx.JmxConstants.P_LONG">long</link>' | '<link linkend="org.osgi.jmx.JmxConstants.P_FLOAT">float</link>'
              | '<link linkend="org.osgi.jmx.JmxConstants.P_DOUBLE">double</link>'</programlisting>
         <para>
 
 This encoding does not support arrays in vectors or arrays. Arrays and
 vectors can only contain scalars. List properties are encoded as arrays.
 Empty lists, arrays or vectors are not represented. Null is not an
 allowed value.
 </para>
         <para/>
         <para>
 
 For example, the encoding of a byte array <code>byte[] {1,2,3,5,7}</code>
 would look like:
 
 </para>
         <programlisting>   type:  'Array of byte'
   value: 1,2,3,5,7</programlisting>
         <para>
 
 Quoting can be used as follows:
 
 </para>
         <programlisting>   type:  'Array of String'
   value: 'abc', 'def', '\'quoted\'', "'quoted'", "\\"</programlisting>
      </section>
      <section role="field" xreflabel="VALUE" xml:id="org.osgi.jmx.JmxConstants.VALUE">
         <title>public static final String VALUE = "Value"</title>
         <para>
The key VALUE.
   </para>
      </section>
      <section role="field" xreflabel="VALUE_ITEM" xml:id="org.osgi.jmx.JmxConstants.VALUE_ITEM">
         <title>public static final Item VALUE_ITEM</title>
         <para>
The value of a property. The key is <link linkend="org.osgi.jmx.JmxConstants.VALUE">VALUE</link> and the type is
 SimpleType.STRING. A value will be encoded by the string given in
 <link linkend="org.osgi.jmx.JmxConstants.TYPE">TYPE</link>. The syntax for this type is given in <link linkend="org.osgi.jmx.JmxConstants.TYPE_ITEM">TYPE_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="VECTOR_OF" xml:id="org.osgi.jmx.JmxConstants.VECTOR_OF">
         <title>public static final String VECTOR_OF = "Vector of "</title>
         <para>
For an encoded vector we need to start with ARRAY_OF. This must be
 followed by one of the names in <link linkend="org.osgi.jmx.JmxConstants.SCALAR">SCALAR</link>.
   </para>
      </section>
      <section role="field" xreflabel="VERSION" xml:id="org.osgi.jmx.JmxConstants.VERSION">
         <title>public static final String VERSION = "Version"</title>
         <para>
Value for <link linkend="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">PROPERTY_TYPE</link> value in the case of <code>Version</code>
         </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.jmx.framework" xml:id="org.osgi.jmx.framework" xml:base="../../generated/javadoc/docbook/org.osgi.jmx.framework.xml">
   <title>org.osgi.jmx.framework</title>
   <info>
      <releaseinfo xml:id="org.osgi.jmx.framework-version">Version 1.7</releaseinfo>
      <edition xml:id="org.osgi.jmx.framework-version.number">1.7</edition>
   </info>
   <para>
OSGi JMX Framework Package Version 1.7.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.jmx.framework; version="[1.7,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.jmx.framework; version="[1.7,1.8)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.jmx.framework.BundleStateMBean">
                  <code>BundleStateMBean</code>
               </link> - 
This MBean represents the Bundle state of the framework.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.jmx.framework.FrameworkMBean">
                  <code>FrameworkMBean</code>
               </link> - 
The FrameworkMbean provides mechanisms to exert control over the framework.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.jmx.framework.PackageStateMBean">
                  <code>PackageStateMBean</code>
               </link> - 
This MBean provides information about the package state of the framework.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.jmx.framework.ServiceStateMBean">
                  <code>ServiceStateMBean</code>
               </link> - 
This MBean represents the Service state of the framework.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="BundleStateMBean" xml:id="org.osgi.jmx.framework.BundleStateMBean">
      <title>public interface BundleStateMBean</title>
      <para>
This MBean represents the Bundle state of the framework. This MBean also
 emits events that clients can use to get notified of the changes in the
 bundle state of the framework.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="ACTIVATION_POLICY_USED" xml:id="org.osgi.jmx.framework.BundleStateMBean.ACTIVATION_POLICY_USED">
         <title>public static final String ACTIVATION_POLICY_USED = "ActivationPolicyUsed"</title>
         <para>
The key ACTIVATION_POLICY_USED, used in
 <link linkend="org.osgi.jmx.framework.BundleStateMBean.ACTIVATION_POLICY_USED_ITEM">ACTIVATION_POLICY_USED_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="ACTIVATION_POLICY_USED_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.ACTIVATION_POLICY_USED_ITEM">
         <title>public static final Item ACTIVATION_POLICY_USED_ITEM</title>
         <para>
The item containing the indication whether the bundle activation policy
 must be used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">BUNDLE_TYPE</link>. The key is
 <link linkend="org.osgi.jmx.framework.BundleStateMBean.ACTIVATION_POLICY_USED">ACTIVATION_POLICY_USED</link> and the type is
 SimpleType.BOOLEAN.
   </para>
      </section>
      <section role="field" xreflabel="ACTIVE" xml:id="org.osgi.jmx.framework.BundleStateMBean.ACTIVE">
         <title>public static final String ACTIVE = "ACTIVE"</title>
         <para>
Constant ACTIVE for the <link linkend="org.osgi.jmx.framework.BundleStateMBean.STATE">STATE</link>
         </para>
      </section>
      <section role="field" xreflabel="BUNDLE_EVENT_TYPE" xml:id="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_EVENT_TYPE">
         <title>public static final CompositeType BUNDLE_EVENT_TYPE</title>
         <para>
The Composite Type that represents a bundle event. This composite
 consists of:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.IDENTIFIER">IDENTIFIER</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.LOCATION">LOCATION</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.SYMBOLIC_NAME">SYMBOLIC_NAME</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.EVENT">EVENT</link>
               </para>
            </listitem>
         </itemizedlist>
      </section>
      <section role="field" xreflabel="BUNDLE_TYPE" xml:id="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">
         <title>public static final CompositeType BUNDLE_TYPE</title>
         <para>
The Composite Type that represents a bundle. This composite consist of:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.EXPORTED_PACKAGES">EXPORTED_PACKAGES</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.FRAGMENT">FRAGMENT</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.FRAGMENTS">FRAGMENTS</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.HEADERS">HEADERS</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.HOSTS">HOSTS</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.IDENTIFIER">IDENTIFIER</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.IMPORTED_PACKAGES">IMPORTED_PACKAGES</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.LAST_MODIFIED">LAST_MODIFIED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.LOCATION">LOCATION</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.ACTIVATION_POLICY_USED">ACTIVATION_POLICY_USED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.PERSISTENTLY_STARTED">PERSISTENTLY_STARTED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.REGISTERED_SERVICES">REGISTERED_SERVICES</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.REMOVAL_PENDING">REMOVAL_PENDING</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.REQUIRED">REQUIRED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.REQUIRED_BUNDLES">REQUIRED_BUNDLES</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.REQUIRING_BUNDLES">REQUIRING_BUNDLES</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.START_LEVEL">START_LEVEL</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.STATE">STATE</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.SERVICES_IN_USE">SERVICES_IN_USE</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.SYMBOLIC_NAME">SYMBOLIC_NAME</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.VERSION">VERSION</link>
               </para>
            </listitem>
         </itemizedlist>
         <para>
 It is used by <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLES_TYPE">BUNDLES_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLES_TYPE" xml:id="org.osgi.jmx.framework.BundleStateMBean.BUNDLES_TYPE">
         <title>public static final TabularType BUNDLES_TYPE</title>
         <para>
The Tabular Type for a list of bundles. The row type is
 <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">BUNDLE_TYPE</link> and the index is <link linkend="org.osgi.jmx.framework.BundleStateMBean.IDENTIFIER">IDENTIFIER</link>.
   </para>
      </section>
      <section role="field" xreflabel="EVENT" xml:id="org.osgi.jmx.framework.BundleStateMBean.EVENT">
         <title>public static final String EVENT = "BundleEvent"</title>
         <para>
The key EVENT, used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.EVENT_ITEM">EVENT_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="EVENT_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.EVENT_ITEM">
         <title>public static final Item EVENT_ITEM</title>
         <para>
The item containing the event type. The key is <link linkend="org.osgi.jmx.framework.BundleStateMBean.EVENT">EVENT</link> and the
 type is SimpleType.INTEGER</para>
      </section>
      <section role="field" xreflabel="EXPORTED_PACKAGES" xml:id="org.osgi.jmx.framework.BundleStateMBean.EXPORTED_PACKAGES">
         <title>public static final String EXPORTED_PACKAGES = "ExportedPackages"</title>
         <para>
The key EXPORTED_PACKAGES, used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.EXPORTED_PACKAGES_ITEM">EXPORTED_PACKAGES_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="EXPORTED_PACKAGES_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.EXPORTED_PACKAGES_ITEM">
         <title>public static final Item EXPORTED_PACKAGES_ITEM</title>
         <para>
The item containing the exported package names in <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">BUNDLE_TYPE</link>
 .The key is <link linkend="org.osgi.jmx.framework.BundleStateMBean.EXPORTED_PACKAGES">EXPORTED_PACKAGES</link> and the the type is
 <link linkend="org.osgi.jmx.JmxConstants.STRING_ARRAY_TYPE">JmxConstants.STRING_ARRAY_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="FRAGMENT" xml:id="org.osgi.jmx.framework.BundleStateMBean.FRAGMENT">
         <title>public static final String FRAGMENT = "Fragment"</title>
         <para>
The key FRAGMENT, used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.FRAGMENT_ITEM">FRAGMENT_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="FRAGMENT_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.FRAGMENT_ITEM">
         <title>public static final Item FRAGMENT_ITEM</title>
         <para>
The item containing the fragment status in <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">BUNDLE_TYPE</link>. The key
 is <link linkend="org.osgi.jmx.framework.BundleStateMBean.FRAGMENT">FRAGMENT</link> and the the type is SimpleType.BOOLEAN.
   </para>
      </section>
      <section role="field" xreflabel="FRAGMENTS" xml:id="org.osgi.jmx.framework.BundleStateMBean.FRAGMENTS">
         <title>public static final String FRAGMENTS = "Fragments"</title>
         <para>
The key FRAGMENTS, used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.FRAGMENTS_ITEM">FRAGMENTS_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="FRAGMENTS_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.FRAGMENTS_ITEM">
         <title>public static final Item FRAGMENTS_ITEM</title>
         <para>
The item containing the list of fragments the bundle is host to in
 <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">BUNDLE_TYPE</link>. The key is <link linkend="org.osgi.jmx.framework.BundleStateMBean.FRAGMENTS">FRAGMENTS</link> and the type is
 <link linkend="org.osgi.jmx.JmxConstants.LONG_ARRAY_TYPE">JmxConstants.LONG_ARRAY_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="HEADER_TYPE" xml:id="org.osgi.jmx.framework.BundleStateMBean.HEADER_TYPE">
         <title>public static final CompositeType HEADER_TYPE</title>
         <para>
The Composite Type describing an entry in bundle headers. It consists of
 <link linkend="org.osgi.jmx.framework.BundleStateMBean.KEY_ITEM">KEY_ITEM</link> and <link linkend="org.osgi.jmx.framework.BundleStateMBean.VALUE_ITEM">VALUE_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="HEADERS" xml:id="org.osgi.jmx.framework.BundleStateMBean.HEADERS">
         <title>public static final String HEADERS = "Headers"</title>
         <para>
The key HEADERS, used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.HEADERS_ITEM">HEADERS_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="HEADERS_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.HEADERS_ITEM">
         <title>public static final Item HEADERS_ITEM</title>
         <para>
The item containing the bundle headers in <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">BUNDLE_TYPE</link>. The key
 is <link linkend="org.osgi.jmx.framework.BundleStateMBean.HEADERS">HEADERS</link> and the the type is <link linkend="org.osgi.jmx.framework.BundleStateMBean.HEADERS_TYPE">HEADERS_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="HEADERS_TYPE" xml:id="org.osgi.jmx.framework.BundleStateMBean.HEADERS_TYPE">
         <title>public static final TabularType HEADERS_TYPE</title>
         <para>
The Tabular Type describing the type of the Tabular Data value that is
 returned from <link linkend="org.osgi.jmx.framework.BundleStateMBean.getHeaders-long-">getHeaders(long)</link> method. The primary item is
 <link linkend="org.osgi.jmx.framework.BundleStateMBean.KEY_ITEM">KEY_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="HOSTS" xml:id="org.osgi.jmx.framework.BundleStateMBean.HOSTS">
         <title>public static final String HOSTS = "Hosts"</title>
         <para>
The key HOSTS, used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.HOSTS_ITEM">HOSTS_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="HOSTS_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.HOSTS_ITEM">
         <title>public static final Item HOSTS_ITEM</title>
         <para>
The item containing the bundle identifiers representing the hosts in
 <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">BUNDLE_TYPE</link>. The key is <link linkend="org.osgi.jmx.framework.BundleStateMBean.HOSTS">HOSTS</link> and the type is
 <link linkend="org.osgi.jmx.JmxConstants.LONG_ARRAY_TYPE">JmxConstants.LONG_ARRAY_TYPE</link>
         </para>
      </section>
      <section role="field" xreflabel="IDENTIFIER" xml:id="org.osgi.jmx.framework.BundleStateMBean.IDENTIFIER">
         <title>public static final String IDENTIFIER = "Identifier"</title>
         <para>
The key IDENTIFIER, used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.IDENTIFIER_ITEM">IDENTIFIER_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="IDENTIFIER_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.IDENTIFIER_ITEM">
         <title>public static final Item IDENTIFIER_ITEM</title>
         <para>
The item containing the bundle identifier in <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">BUNDLE_TYPE</link>. The
 key is <link linkend="org.osgi.jmx.framework.BundleStateMBean.IDENTIFIER">IDENTIFIER</link> and the the type is SimpleType.LONG.
   </para>
      </section>
      <section role="field" xreflabel="IMPORTED_PACKAGES" xml:id="org.osgi.jmx.framework.BundleStateMBean.IMPORTED_PACKAGES">
         <title>public static final String IMPORTED_PACKAGES = "ImportedPackages"</title>
         <para>
The key IMPORTED_PACKAGES, used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.EXPORTED_PACKAGES_ITEM">EXPORTED_PACKAGES_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="IMPORTED_PACKAGES_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.IMPORTED_PACKAGES_ITEM">
         <title>public static final Item IMPORTED_PACKAGES_ITEM</title>
         <para>
The item containing the imported package names in <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">BUNDLE_TYPE</link>
 .The key is <link linkend="org.osgi.jmx.framework.BundleStateMBean.IMPORTED_PACKAGES">IMPORTED_PACKAGES</link> and the the type is
 <link linkend="org.osgi.jmx.JmxConstants.STRING_ARRAY_TYPE">JmxConstants.STRING_ARRAY_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="INSTALLED" xml:id="org.osgi.jmx.framework.BundleStateMBean.INSTALLED">
         <title>public static final String INSTALLED = "INSTALLED"</title>
         <para>
Constant INSTALLED for the <link linkend="org.osgi.jmx.framework.BundleStateMBean.STATE">STATE</link>
         </para>
      </section>
      <section role="field" xreflabel="KEY" xml:id="org.osgi.jmx.framework.BundleStateMBean.KEY">
         <title>public static final String KEY = "Key"</title>
         <para>
The key KEY, used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.KEY_ITEM">KEY_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="KEY_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.KEY_ITEM">
         <title>public static final Item KEY_ITEM</title>
         <para>
The item describing the key of a bundle header entry. The key is
 <link linkend="org.osgi.jmx.framework.BundleStateMBean.KEY">KEY</link> and the type is SimpleType.STRING.
   </para>
      </section>
      <section role="field" xreflabel="LAST_MODIFIED" xml:id="org.osgi.jmx.framework.BundleStateMBean.LAST_MODIFIED">
         <title>public static final String LAST_MODIFIED = "LastModified"</title>
         <para>
The key LAST_MODIFIED, used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.LAST_MODIFIED_ITEM">LAST_MODIFIED_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="LAST_MODIFIED_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.LAST_MODIFIED_ITEM">
         <title>public static final Item LAST_MODIFIED_ITEM</title>
         <para>
The item containing the last modified time in the <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">BUNDLE_TYPE</link>.
 The key is <link linkend="org.osgi.jmx.framework.BundleStateMBean.LAST_MODIFIED">LAST_MODIFIED</link> and the the type is
 SimpleType.LONG.
   </para>
      </section>
      <section role="field" xreflabel="LOCATION" xml:id="org.osgi.jmx.framework.BundleStateMBean.LOCATION">
         <title>public static final String LOCATION = "Location"</title>
         <para>
The key LOCATION, used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.LOCATION_ITEM">LOCATION_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="LOCATION_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.LOCATION_ITEM">
         <title>public static final Item LOCATION_ITEM</title>
         <para>
The item containing the bundle location in <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">BUNDLE_TYPE</link>. The key
 is <link linkend="org.osgi.jmx.framework.BundleStateMBean.LOCATION">LOCATION</link> and the the type is SimpleType.STRING.
   </para>
      </section>
      <section role="field" xreflabel="OBJECTNAME" xml:id="org.osgi.jmx.framework.BundleStateMBean.OBJECTNAME">
         <title>public static final String OBJECTNAME = "osgi.core:type=bundleState,version=1.7"</title>
         <para>
The Object Name prefix for this mbean. The full object name also contains
 the framework name and uuid as properties.
   </para>
      </section>
      <section role="field" xreflabel="PERSISTENTLY_STARTED" xml:id="org.osgi.jmx.framework.BundleStateMBean.PERSISTENTLY_STARTED">
         <title>public static final String PERSISTENTLY_STARTED = "PersistentlyStarted"</title>
         <para>
The key PERSISTENTLY_STARTED, used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.PERSISTENTLY_STARTED_ITEM">PERSISTENTLY_STARTED_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="PERSISTENTLY_STARTED_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.PERSISTENTLY_STARTED_ITEM">
         <title>public static final Item PERSISTENTLY_STARTED_ITEM</title>
         <para>
The item containing the indication of persistently started in
 <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">BUNDLE_TYPE</link>. The key is <link linkend="org.osgi.jmx.framework.BundleStateMBean.PERSISTENTLY_STARTED">PERSISTENTLY_STARTED</link> and the
 the type is SimpleType.BOOLEAN.
   </para>
      </section>
      <section role="field" xreflabel="REGISTERED_SERVICES" xml:id="org.osgi.jmx.framework.BundleStateMBean.REGISTERED_SERVICES">
         <title>public static final String REGISTERED_SERVICES = "RegisteredServices"</title>
         <para>
The key REGISTERED_SERVICES, used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.REGISTERED_SERVICES_ITEM">REGISTERED_SERVICES_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="REGISTERED_SERVICES_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.REGISTERED_SERVICES_ITEM">
         <title>public static final Item REGISTERED_SERVICES_ITEM</title>
         <para>
The item containing the registered services of the bundle in
 <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">BUNDLE_TYPE</link>. The key is <link linkend="org.osgi.jmx.framework.BundleStateMBean.REGISTERED_SERVICES">REGISTERED_SERVICES</link> and the the
 type is <link linkend="org.osgi.jmx.JmxConstants.LONG_ARRAY_TYPE">JmxConstants.LONG_ARRAY_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="REMOVAL_PENDING" xml:id="org.osgi.jmx.framework.BundleStateMBean.REMOVAL_PENDING">
         <title>public static final String REMOVAL_PENDING = "RemovalPending"</title>
         <para>
The key REMOVAL_PENDING, used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.REMOVAL_PENDING_ITEM">REMOVAL_PENDING_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="REMOVAL_PENDING_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.REMOVAL_PENDING_ITEM">
         <title>public static final Item REMOVAL_PENDING_ITEM</title>
         <para>
The item containing the indication of removal pending in
 <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">BUNDLE_TYPE</link>. The key is <link linkend="org.osgi.jmx.framework.BundleStateMBean.REMOVAL_PENDING">REMOVAL_PENDING</link> and the type is
 SimpleType.BOOLEAN.
   </para>
      </section>
      <section role="field" xreflabel="REQUIRED" xml:id="org.osgi.jmx.framework.BundleStateMBean.REQUIRED">
         <title>public static final String REQUIRED = "Required"</title>
         <para>
The key REQUIRED, used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.REQUIRED_ITEM">REQUIRED_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="REQUIRED_BUNDLES" xml:id="org.osgi.jmx.framework.BundleStateMBean.REQUIRED_BUNDLES">
         <title>public static final String REQUIRED_BUNDLES = "RequiredBundles"</title>
         <para>
The key REQUIRED_BUNDLES, used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.REQUIRED_BUNDLES_ITEM">REQUIRED_BUNDLES_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="REQUIRED_BUNDLES_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.REQUIRED_BUNDLES_ITEM">
         <title>public static final Item REQUIRED_BUNDLES_ITEM</title>
         <para>
The item containing the required bundles in <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">BUNDLE_TYPE</link>. The key
 is <link linkend="org.osgi.jmx.framework.BundleStateMBean.REQUIRED_BUNDLES">REQUIRED_BUNDLES</link> and the type is
 <link linkend="org.osgi.jmx.JmxConstants.LONG_ARRAY_TYPE">JmxConstants.LONG_ARRAY_TYPE</link>
         </para>
      </section>
      <section role="field" xreflabel="REQUIRED_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.REQUIRED_ITEM">
         <title>public static final Item REQUIRED_ITEM</title>
         <para>
The item containing the required status in <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">BUNDLE_TYPE</link>. The key
 is <link linkend="org.osgi.jmx.framework.BundleStateMBean.REQUIRED">REQUIRED</link> and the the type is SimpleType.BOOLEAN.
   </para>
      </section>
      <section role="field" xreflabel="REQUIRING_BUNDLES" xml:id="org.osgi.jmx.framework.BundleStateMBean.REQUIRING_BUNDLES">
         <title>public static final String REQUIRING_BUNDLES = "RequiringBundles"</title>
         <para>
The key REQUIRING_BUNDLES, used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.REQUIRING_BUNDLES_ITEM">REQUIRING_BUNDLES_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="REQUIRING_BUNDLES_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.REQUIRING_BUNDLES_ITEM">
         <title>public static final Item REQUIRING_BUNDLES_ITEM</title>
         <para>
The item containing the bundles requiring this bundle in
 <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">BUNDLE_TYPE</link>. The key is <link linkend="org.osgi.jmx.framework.BundleStateMBean.REQUIRING_BUNDLES">REQUIRING_BUNDLES</link> and the type
 is <link linkend="org.osgi.jmx.JmxConstants.LONG_ARRAY_TYPE">JmxConstants.LONG_ARRAY_TYPE</link>
         </para>
      </section>
      <section role="field" xreflabel="RESOLVED" xml:id="org.osgi.jmx.framework.BundleStateMBean.RESOLVED">
         <title>public static final String RESOLVED = "RESOLVED"</title>
         <para>
Constant RESOLVED for the <link linkend="org.osgi.jmx.framework.BundleStateMBean.STATE">STATE</link>
         </para>
      </section>
      <section role="field" xreflabel="SERVICES_IN_USE" xml:id="org.osgi.jmx.framework.BundleStateMBean.SERVICES_IN_USE">
         <title>public static final String SERVICES_IN_USE = "ServicesInUse"</title>
         <para>
The key SERVICES_IN_USE, used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.SERVICES_IN_USE_ITEM">SERVICES_IN_USE_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICES_IN_USE_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.SERVICES_IN_USE_ITEM">
         <title>public static final Item SERVICES_IN_USE_ITEM</title>
         <para>
The item containing the services in use by this bundle in
 <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">BUNDLE_TYPE</link>. The key is <link linkend="org.osgi.jmx.framework.BundleStateMBean.SERVICES_IN_USE">SERVICES_IN_USE</link> and the the
 type is <link linkend="org.osgi.jmx.JmxConstants.LONG_ARRAY_TYPE">JmxConstants.LONG_ARRAY_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="START_LEVEL" xml:id="org.osgi.jmx.framework.BundleStateMBean.START_LEVEL">
         <title>public static final String START_LEVEL = "StartLevel"</title>
         <para>
The key START_LEVEL, used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.START_LEVEL_ITEM">START_LEVEL_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="START_LEVEL_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.START_LEVEL_ITEM">
         <title>public static final Item START_LEVEL_ITEM</title>
         <para>
The item containing the start level in <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">BUNDLE_TYPE</link>. The key is
 <link linkend="org.osgi.jmx.framework.BundleStateMBean.START_LEVEL">START_LEVEL</link> and the the type is SimpleType.INTEGER.
   </para>
      </section>
      <section role="field" xreflabel="STARTING" xml:id="org.osgi.jmx.framework.BundleStateMBean.STARTING">
         <title>public static final String STARTING = "STARTING"</title>
         <para>
Constant STARTING for the <link linkend="org.osgi.jmx.framework.BundleStateMBean.STATE">STATE</link>
         </para>
      </section>
      <section role="field" xreflabel="STATE" xml:id="org.osgi.jmx.framework.BundleStateMBean.STATE">
         <title>public static final String STATE = "State"</title>
         <para>
The key STATE, used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.STATE_ITEM">STATE_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="STATE_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.STATE_ITEM">
         <title>public static final Item STATE_ITEM</title>
         <para>
The item containing the bundle state in <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">BUNDLE_TYPE</link>. The key is
 <link linkend="org.osgi.jmx.framework.BundleStateMBean.STATE">STATE</link> and the the type is SimpleType.STRING. The
 returned values must be one of the following strings:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.INSTALLED">INSTALLED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.RESOLVED">RESOLVED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.STARTING">STARTING</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.ACTIVE">ACTIVE</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.STOPPING">STOPPING</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.UNINSTALLED">UNINSTALLED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.BundleStateMBean.UNKNOWN">UNKNOWN</link>
               </para>
            </listitem>
         </itemizedlist>
      </section>
      <section role="field" xreflabel="STOPPING" xml:id="org.osgi.jmx.framework.BundleStateMBean.STOPPING">
         <title>public static final String STOPPING = "STOPPING"</title>
         <para>
Constant STOPPING for the <link linkend="org.osgi.jmx.framework.BundleStateMBean.STATE">STATE</link>
         </para>
      </section>
      <section role="field" xreflabel="SYMBOLIC_NAME" xml:id="org.osgi.jmx.framework.BundleStateMBean.SYMBOLIC_NAME">
         <title>public static final String SYMBOLIC_NAME = "SymbolicName"</title>
         <para>
The key SYMBOLIC_NAME, used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.SYMBOLIC_NAME_ITEM">SYMBOLIC_NAME_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="SYMBOLIC_NAME_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.SYMBOLIC_NAME_ITEM">
         <title>public static final Item SYMBOLIC_NAME_ITEM</title>
         <para>
The item containing the symbolic name in <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">BUNDLE_TYPE</link>. The key is
 <link linkend="org.osgi.jmx.framework.BundleStateMBean.SYMBOLIC_NAME">SYMBOLIC_NAME</link> and the the type is SimpleType.STRING.
   </para>
      </section>
      <section role="field" xreflabel="UNINSTALLED" xml:id="org.osgi.jmx.framework.BundleStateMBean.UNINSTALLED">
         <title>public static final String UNINSTALLED = "UNINSTALLED"</title>
         <para>
Constant UNINSTALLED for the <link linkend="org.osgi.jmx.framework.BundleStateMBean.STATE">STATE</link>
         </para>
      </section>
      <section role="field" xreflabel="UNKNOWN" xml:id="org.osgi.jmx.framework.BundleStateMBean.UNKNOWN">
         <title>public static final String UNKNOWN = "UNKNOWN"</title>
         <para>
Constant UNKNOWN for the <link linkend="org.osgi.jmx.framework.BundleStateMBean.STATE">STATE</link>
         </para>
      </section>
      <section role="field" xreflabel="VALUE" xml:id="org.osgi.jmx.framework.BundleStateMBean.VALUE">
         <title>public static final String VALUE = "Value"</title>
         <para>
The key VALUE, used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.VALUE_ITEM">VALUE_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="VALUE_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.VALUE_ITEM">
         <title>public static final Item VALUE_ITEM</title>
         <para>
The item describing the value of a bundle header entry. The key is
 <link linkend="org.osgi.jmx.framework.BundleStateMBean.VALUE">VALUE</link> and the type is SimpleType.STRING.
   </para>
      </section>
      <section role="field" xreflabel="VERSION" xml:id="org.osgi.jmx.framework.BundleStateMBean.VERSION">
         <title>public static final String VERSION = "Version"</title>
         <para>
The key VERSION, used in <link linkend="org.osgi.jmx.framework.BundleStateMBean.VERSION_ITEM">VERSION_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="VERSION_ITEM" xml:id="org.osgi.jmx.framework.BundleStateMBean.VERSION_ITEM">
         <title>public static final Item VERSION_ITEM</title>
         <para>
The item containing the symbolic name in <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">BUNDLE_TYPE</link>. The key is
 <link linkend="org.osgi.jmx.framework.BundleStateMBean.SYMBOLIC_NAME">SYMBOLIC_NAME</link> and the the type is SimpleType.STRING.
   </para>
      </section>
      <section role="method" xreflabel="getBundle(long)" xml:id="org.osgi.jmx.framework.BundleStateMBean.getBundle-long-">
         <title>public CompositeData getBundle(long bundleIdentifier) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleIdentifier</title>
            <para>the bundle identifier of the requested bundle</para>
         </formalpara>
         <para role="description">
Obtain the information regarding a single bundle.
 
 The result is defined by the <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE">BUNDLE_TYPE</link> CompositeType.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A CompositeData object with the bundle information</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getBundleIds()" xml:id="org.osgi.jmx.framework.BundleStateMBean.getBundleIds--">
         <title>public long[] getBundleIds() throws IOException</title>
         <para role="description">
List all bundle IDs in the framework.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>all the bundle ids in the framework.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getExportedPackages(long)" xml:id="org.osgi.jmx.framework.BundleStateMBean.getExportedPackages-long-">
         <title>public String[] getExportedPackages(long bundleId) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para/>
         </formalpara>
         <para role="description">
Answer the list of exported packages for this bundle.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the array of package names, combined with their version in the
         format &lt;packageName;version&gt;</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFragments(long)" xml:id="org.osgi.jmx.framework.BundleStateMBean.getFragments-long-">
         <title>public long[] getFragments(long bundleId) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para/>
         </formalpara>
         <para role="description">
Answer the list of the bundle ids of the fragments associated with this
 bundle
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the array of bundle identifiers</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getHeader(long,String)" xml:id="org.osgi.jmx.framework.BundleStateMBean.getHeader-long-String-">
         <title>public String getHeader(long bundleId,String key) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>the unique identifier of the bundle</para>
         </formalpara>
         <formalpara role="parameter">
            <title>key</title>
            <para>the key of the header to look up</para>
         </formalpara>
         <para role="description">
Retrieve a single header from the bundle headers.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the value of associated header</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getHeader(long,String,String)" xml:id="org.osgi.jmx.framework.BundleStateMBean.getHeader-long-String-String-">
         <title>public String getHeader(long bundleId,String key,String locale) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>the unique identifier of the bundle</para>
         </formalpara>
         <formalpara role="parameter">
            <title>key</title>
            <para>the key of the header to look up</para>
         </formalpara>
         <formalpara role="parameter">
            <title>locale</title>
            <para>the locale name into which the header value is to be
        localized. The value of this parameter follows the same rules as
        the locale parameter in <code>Bundle.getHeaders(String locale)</code>
            </para>
         </formalpara>
         <para role="description">
Retrieve a single header from the bundle headers.
 
 </para>
         <para>
 This method performs the same function as
 <link linkend="org.osgi.jmx.framework.BundleStateMBean.getHeaders-long-">getHeaders(long bundleId)</link> except the manifest header values are
 localized to the specified locale.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the value of associated header</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getHeaders(long)" xml:id="org.osgi.jmx.framework.BundleStateMBean.getHeaders-long-">
         <title>public TabularData getHeaders(long bundleId) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>the unique identifier of the bundle</para>
         </formalpara>
         <para role="description">
Answer the headers for the bundle uniquely identified by the bundle id.
 The Tabular Data is typed by the <link linkend="org.osgi.jmx.framework.BundleStateMBean.HEADERS_TYPE">HEADERS_TYPE</link>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the table of associated header key and values</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getHeaders(long,String)" xml:id="org.osgi.jmx.framework.BundleStateMBean.getHeaders-long-String-">
         <title>public TabularData getHeaders(long bundleId,String locale) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>the unique identifier of the bundle</para>
         </formalpara>
         <formalpara role="parameter">
            <title>locale</title>
            <para>the locale name into which the header values are to be
        localized. The value of this parameter follows the same rules as
        the locale parameter in <code>Bundle.getHeaders(String locale)</code>
            </para>
         </formalpara>
         <para role="description">
Answer the headers for the bundle uniquely identified by the bundle id.
 The Tabular Data is typed by the <link linkend="org.osgi.jmx.framework.BundleStateMBean.HEADERS_TYPE">HEADERS_TYPE</link>.
 
 </para>
         <para>
 This method performs the same function as
 <link linkend="org.osgi.jmx.framework.BundleStateMBean.getHeaders-long-">getHeaders(long bundleId)</link> except the manifest header values are
 localized to the specified locale.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the table of associated header key and values</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getHosts(long)" xml:id="org.osgi.jmx.framework.BundleStateMBean.getHosts-long-">
         <title>public long[] getHosts(long fragment) throws IOException</title>
         <formalpara role="parameter">
            <title>fragment</title>
            <para>the bundle id of the fragment</para>
         </formalpara>
         <para role="description">
Answer the list of bundle ids of the bundles which host a fragment
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the array of bundle identifiers</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getImportedPackages(long)" xml:id="org.osgi.jmx.framework.BundleStateMBean.getImportedPackages-long-">
         <title>public String[] getImportedPackages(long bundleId) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>the bundle identifier</para>
         </formalpara>
         <para role="description">
Answer the array of the packages imported by this bundle
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the array of package names, combined with their version in the
         format &lt;packageName;version&gt;</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getLastModified(long)" xml:id="org.osgi.jmx.framework.BundleStateMBean.getLastModified-long-">
         <title>public long getLastModified(long bundleId) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>the unique identifier of a bundle</para>
         </formalpara>
         <para role="description">
Answer the last modified time of a bundle
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the last modified time</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getLocation(long)" xml:id="org.osgi.jmx.framework.BundleStateMBean.getLocation-long-">
         <title>public String getLocation(long bundleId) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>the identifier of the bundle</para>
         </formalpara>
         <para role="description">
Answer the location of the bundle.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The location string of this bundle</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRegisteredServices(long)" xml:id="org.osgi.jmx.framework.BundleStateMBean.getRegisteredServices-long-">
         <title>public long[] getRegisteredServices(long bundleId) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>the bundle identifier</para>
         </formalpara>
         <para role="description">
Answer the list of service identifiers representing the services this
 bundle exports
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the list of service identifiers</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRequiredBundles(long)" xml:id="org.osgi.jmx.framework.BundleStateMBean.getRequiredBundles-long-">
         <title>public long[] getRequiredBundles(long bundleIdentifier) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleIdentifier</title>
            <para>the bundle identifier to find the dependencies
        for</para>
         </formalpara>
         <para role="description">
Answer an array of ids of bundles the given bundle depends on.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the bundle identifiers of the dependencies</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRequiringBundles(long)" xml:id="org.osgi.jmx.framework.BundleStateMBean.getRequiringBundles-long-">
         <title>public long[] getRequiringBundles(long bundleIdentifier) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleIdentifier</title>
            <para>the bundle identifier</para>
         </formalpara>
         <para role="description">
Answer the list of identifiers of the bundles which require this bundle
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the list of bundle identifiers</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getServicesInUse(long)" xml:id="org.osgi.jmx.framework.BundleStateMBean.getServicesInUse-long-">
         <title>public long[] getServicesInUse(long bundleIdentifier) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleIdentifier</title>
            <para>the bundle identifier</para>
         </formalpara>
         <para role="description">
Answer the list of service identifiers which refer to the the services
 this bundle is using
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the list of service identifiers</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getStartLevel(long)" xml:id="org.osgi.jmx.framework.BundleStateMBean.getStartLevel-long-">
         <title>public int getStartLevel(long bundleId) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>the identifier of the bundle</para>
         </formalpara>
         <para role="description">
Answer the start level of the bundle
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the start level</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getState(long)" xml:id="org.osgi.jmx.framework.BundleStateMBean.getState-long-">
         <title>public String getState(long bundleId) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>the identifier of the bundle</para>
         </formalpara>
         <para role="description">
Answer the symbolic name of the state of the bundle
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the string name of the bundle state</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getSymbolicName(long)" xml:id="org.osgi.jmx.framework.BundleStateMBean.getSymbolicName-long-">
         <title>public String getSymbolicName(long bundleId) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>the identifier of the bundle</para>
         </formalpara>
         <para role="description">
Answer the symbolic name of the bundle
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the symbolic name</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getVersion(long)" xml:id="org.osgi.jmx.framework.BundleStateMBean.getVersion-long-">
         <title>public String getVersion(long bundleId) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>the identifier of the bundle</para>
         </formalpara>
         <para role="description">
Answer the location of the bundle.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The location string of this bundle</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isActivationPolicyUsed(long)" xml:id="org.osgi.jmx.framework.BundleStateMBean.isActivationPolicyUsed-long-">
         <title>public boolean isActivationPolicyUsed(long bundleId) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>the identifier of the bundle</para>
         </formalpara>
         <para role="description">
Answer whether the specified bundle's autostart setting indicates that
 the activation policy declared in the bundle's manifest must be used.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if the bundle's autostart setting indicates the activation
         policy declared in the manifest must be used. false if the bundle
         must be eagerly activated.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isFragment(long)" xml:id="org.osgi.jmx.framework.BundleStateMBean.isFragment-long-">
         <title>public boolean isFragment(long bundleId) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>the identifier of the bundle</para>
         </formalpara>
         <para role="description">
Answer whether the bundle is a fragment or not
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if the bundle is a fragment</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isPersistentlyStarted(long)" xml:id="org.osgi.jmx.framework.BundleStateMBean.isPersistentlyStarted-long-">
         <title>public boolean isPersistentlyStarted(long bundleId) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>the identifier of the bundle</para>
         </formalpara>
         <para role="description">
Answer if the bundle is persistently started when its start level is
 reached
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if the bundle is persistently started</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isRemovalPending(long)" xml:id="org.osgi.jmx.framework.BundleStateMBean.isRemovalPending-long-">
         <title>public boolean isRemovalPending(long bundleId) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>the identifier of the bundle</para>
         </formalpara>
         <para role="description">
Answer true if the bundle is pending removal
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if the bundle is pending removal</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isRequired(long)" xml:id="org.osgi.jmx.framework.BundleStateMBean.isRequired-long-">
         <title>public boolean isRequired(long bundleId) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>the identifier of the bundle</para>
         </formalpara>
         <para role="description">
Answer true if the bundle is required by another bundle
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if the bundle is required by another bundle</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="listBundles()" xml:id="org.osgi.jmx.framework.BundleStateMBean.listBundles--">
         <title>public TabularData listBundles() throws IOException</title>
         <para role="description">
Answer the bundle state of the system in tabular form.
 
 Each row of the returned table represents a single bundle. The Tabular
 Data consists of Composite Data that is type by <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLES_TYPE">BUNDLES_TYPE</link>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the tabular representation of the bundle state</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="listBundles(String...)" xml:id="org.osgi.jmx.framework.BundleStateMBean.listBundles-String...-">
         <title>public TabularData listBundles(String ... items) throws IOException</title>
         <formalpara role="parameter">
            <title>items</title>
            <para>The names of the items to include in the result.</para>
         </formalpara>
         <para role="description">
Answer the bundle state of the system in tabular form.
 
 Each row of the returned table represents a single bundle. The Tabular
 Data consists of Composite Data that is type by <link linkend="org.osgi.jmx.framework.BundleStateMBean.BUNDLES_TYPE">BUNDLES_TYPE</link>.
 
 This method supports specifying the items that are included in the
 result. Note that the <link linkend="org.osgi.jmx.framework.BundleStateMBean.IDENTIFIER">IDENTIFIER</link> item is always returns as this
 the key in the <code>TabularData</code> structure.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the tabular representation of the bundle state</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="FrameworkMBean" xml:id="org.osgi.jmx.framework.FrameworkMBean">
      <title>public interface FrameworkMBean</title>
      <para>
The FrameworkMbean provides mechanisms to exert control over the framework.
 For many operations, it provides a batch mechanism to avoid excessive message
 passing when interacting remotely.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="BATCH_ACTION_RESULT_TYPE" xml:id="org.osgi.jmx.framework.FrameworkMBean.BATCH_ACTION_RESULT_TYPE">
         <title>public static final CompositeType BATCH_ACTION_RESULT_TYPE</title>
         <para>
The Composite Type for a batch action result.
 <link linkend="org.osgi.jmx.framework.FrameworkMBean.refreshBundle-long-">refreshBundle(long)</link> and <link linkend="org.osgi.jmx.framework.FrameworkMBean.refreshBundles-long---">refreshBundles(long[])</link>. Notice
 that a batch action result returns uses an id for the
 <link linkend="org.osgi.jmx.framework.FrameworkMBean.BUNDLE_IN_ERROR">BUNDLE_IN_ERROR</link> while the <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_INSTALL_RESULT_TYPE">BATCH_INSTALL_RESULT_TYPE</link>
 uses a location.
 
 This Composite Type consists of the following items:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.FrameworkMBean.BUNDLE_IN_ERROR_ID_ITEM">BUNDLE_IN_ERROR_ID_ITEM</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.FrameworkMBean.COMPLETED_ITEM">COMPLETED_ITEM</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.FrameworkMBean.ERROR_ITEM">ERROR_ITEM</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.FrameworkMBean.REMAINING_ID_ITEM">REMAINING_ID_ITEM</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.FrameworkMBean.SUCCESS_ITEM">SUCCESS_ITEM</link>
               </para>
            </listitem>
         </itemizedlist>
      </section>
      <section role="field" xreflabel="BATCH_INSTALL_RESULT_TYPE" xml:id="org.osgi.jmx.framework.FrameworkMBean.BATCH_INSTALL_RESULT_TYPE">
         <title>public static final CompositeType BATCH_INSTALL_RESULT_TYPE</title>
         <para>
The Composite Type which represents the result of a batch install
 operation. It is used in <link linkend="org.osgi.jmx.framework.FrameworkMBean.installBundles-String---">installBundles(String[])</link> and
 <link linkend="org.osgi.jmx.framework.FrameworkMBean.installBundlesFromURL-String---String---">installBundlesFromURL(String[], String[])</link>.
 
 This Composite Type consists of the following items:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.FrameworkMBean.BUNDLE_IN_ERROR_LOCATION_ITEM">BUNDLE_IN_ERROR_LOCATION_ITEM</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.FrameworkMBean.COMPLETED_ITEM">COMPLETED_ITEM</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.FrameworkMBean.ERROR_ITEM">ERROR_ITEM</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.FrameworkMBean.REMAINING_LOCATION_ITEM">REMAINING_LOCATION_ITEM</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.FrameworkMBean.SUCCESS_ITEM">SUCCESS_ITEM</link>
               </para>
            </listitem>
         </itemizedlist>
      </section>
      <section role="field" xreflabel="BATCH_RESOLVE_RESULT_TYPE" xml:id="org.osgi.jmx.framework.FrameworkMBean.BATCH_RESOLVE_RESULT_TYPE">
         <title>public static final CompositeType BATCH_RESOLVE_RESULT_TYPE</title>
         <para>
The Composite Type which represents the result of a batch resolve
 operation. It is used in <link linkend="org.osgi.jmx.framework.FrameworkMBean.refreshBundlesAndWait-long---">refreshBundlesAndWait(long[])</link> and
 <link linkend="org.osgi.jmx.framework.FrameworkMBean.resolve-long---">resolve(long[])</link>.
 
 This Composite Type consists of the following items:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.FrameworkMBean.COMPLETED_ITEM">COMPLETED_ITEM</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.FrameworkMBean.SUCCESS_ITEM">SUCCESS_ITEM</link>
               </para>
            </listitem>
         </itemizedlist>
      </section>
      <section role="field" xreflabel="BUNDLE_IN_ERROR" xml:id="org.osgi.jmx.framework.FrameworkMBean.BUNDLE_IN_ERROR">
         <title>public static final String BUNDLE_IN_ERROR = "BundleInError"</title>
         <para>
The key for BUNDLE_IN_ERROR. This key is used with two different items:
 <link linkend="org.osgi.jmx.framework.FrameworkMBean.BUNDLE_IN_ERROR_ID_ITEM">BUNDLE_IN_ERROR_ID_ITEM</link> and
 <link linkend="org.osgi.jmx.framework.FrameworkMBean.BUNDLE_IN_ERROR_LOCATION_ITEM">BUNDLE_IN_ERROR_LOCATION_ITEM</link> that each have a different type
 for this key. It is used in <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_ACTION_RESULT_TYPE">BATCH_ACTION_RESULT_TYPE</link> and
 <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_INSTALL_RESULT_TYPE">BATCH_INSTALL_RESULT_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE_IN_ERROR_ID_ITEM" xml:id="org.osgi.jmx.framework.FrameworkMBean.BUNDLE_IN_ERROR_ID_ITEM">
         <title>public static final Item BUNDLE_IN_ERROR_ID_ITEM</title>
         <para>
The item containing the bundle which caused the error during the batch
 operation. This item describes the bundle in error as an id. The key is
 <link linkend="org.osgi.jmx.framework.FrameworkMBean.BUNDLE_IN_ERROR">BUNDLE_IN_ERROR</link> and the type is SimpleType.LONG. It is
 used in <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_ACTION_RESULT_TYPE">BATCH_ACTION_RESULT_TYPE</link>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.framework.FrameworkMBean.BUNDLE_IN_ERROR_LOCATION_ITEM">BUNDLE_IN_ERROR_LOCATION_ITEM for the
      item that has a location for the bundle in error.</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="BUNDLE_IN_ERROR_LOCATION_ITEM" xml:id="org.osgi.jmx.framework.FrameworkMBean.BUNDLE_IN_ERROR_LOCATION_ITEM">
         <title>public static final Item BUNDLE_IN_ERROR_LOCATION_ITEM</title>
         <para>
The item containing the bundle which caused the error during the batch
 operation. This item describes the bundle in error as a location. The key
 is <link linkend="org.osgi.jmx.framework.FrameworkMBean.BUNDLE_IN_ERROR">BUNDLE_IN_ERROR</link> and the type is SimpleType.STRING. It
 is used in <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_INSTALL_RESULT_TYPE">BATCH_INSTALL_RESULT_TYPE</link>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.framework.FrameworkMBean.BUNDLE_IN_ERROR_ID_ITEM">BUNDLE_IN_ERROR_ID_ITEM for the item that
      has the id for the bundle in error.</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="COMPLETED" xml:id="org.osgi.jmx.framework.FrameworkMBean.COMPLETED">
         <title>public static final String COMPLETED = "Completed"</title>
         <para>
The key COMPLETED, used in <link linkend="org.osgi.jmx.framework.FrameworkMBean.COMPLETED_ITEM">COMPLETED_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="COMPLETED_ITEM" xml:id="org.osgi.jmx.framework.FrameworkMBean.COMPLETED_ITEM">
         <title>public static final Item COMPLETED_ITEM</title>
         <para>
The item containing the list of bundles completing the batch operation.
 The key is <link linkend="org.osgi.jmx.framework.FrameworkMBean.COMPLETED">COMPLETED</link> and the type is
 <link linkend="org.osgi.jmx.JmxConstants.LONG_ARRAY_TYPE">JmxConstants.LONG_ARRAY_TYPE</link>. It is used in
 <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_ACTION_RESULT_TYPE">BATCH_ACTION_RESULT_TYPE</link> and <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_INSTALL_RESULT_TYPE">BATCH_INSTALL_RESULT_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="ERROR" xml:id="org.osgi.jmx.framework.FrameworkMBean.ERROR">
         <title>public static final String ERROR = "Error"</title>
         <para>
The key ERROR, used in <link linkend="org.osgi.jmx.framework.FrameworkMBean.ERROR_ITEM">ERROR_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="ERROR_ITEM" xml:id="org.osgi.jmx.framework.FrameworkMBean.ERROR_ITEM">
         <title>public static final Item ERROR_ITEM</title>
         <para>
The item containing the error message of the batch operation. The key is
 <link linkend="org.osgi.jmx.framework.FrameworkMBean.ERROR">ERROR</link> and the type is SimpleType.STRING. It is used in
 <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_ACTION_RESULT_TYPE">BATCH_ACTION_RESULT_TYPE</link> and <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_INSTALL_RESULT_TYPE">BATCH_INSTALL_RESULT_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="OBJECTNAME" xml:id="org.osgi.jmx.framework.FrameworkMBean.OBJECTNAME">
         <title>public static final String OBJECTNAME = "osgi.core:type=framework,version=1.7"</title>
         <para>
The Object Name prefix for this mbean. The full object name also contains
 the framework name and uuid as properties.
   </para>
      </section>
      <section role="field" xreflabel="REMAINING" xml:id="org.osgi.jmx.framework.FrameworkMBean.REMAINING">
         <title>public static final String REMAINING = "Remaining"</title>
         <para>
The key REMAINING, used in <link linkend="org.osgi.jmx.framework.FrameworkMBean.REMAINING_ID_ITEM">REMAINING_ID_ITEM</link> and
 <link linkend="org.osgi.jmx.framework.FrameworkMBean.REMAINING_LOCATION_ITEM">REMAINING_LOCATION_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="REMAINING_ID_ITEM" xml:id="org.osgi.jmx.framework.FrameworkMBean.REMAINING_ID_ITEM">
         <title>public static final Item REMAINING_ID_ITEM</title>
         <para>
The item containing the list of remaining bundles unprocessed by the
 failing batch operation. The key is <link linkend="org.osgi.jmx.framework.FrameworkMBean.REMAINING">REMAINING</link> and the type is
 <link linkend="org.osgi.jmx.JmxConstants.LONG_ARRAY_TYPE">JmxConstants.LONG_ARRAY_TYPE</link>. It is used in
 <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_ACTION_RESULT_TYPE">BATCH_ACTION_RESULT_TYPE</link> and <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_INSTALL_RESULT_TYPE">BATCH_INSTALL_RESULT_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="REMAINING_LOCATION_ITEM" xml:id="org.osgi.jmx.framework.FrameworkMBean.REMAINING_LOCATION_ITEM">
         <title>public static final Item REMAINING_LOCATION_ITEM</title>
         <para>
The item containing the list of remaining bundles unprocessed by the
 failing batch operation. The key is <link linkend="org.osgi.jmx.framework.FrameworkMBean.REMAINING">REMAINING</link> and the type is
 <link linkend="org.osgi.jmx.JmxConstants.STRING_ARRAY_TYPE">JmxConstants.STRING_ARRAY_TYPE</link>. It is used in
 <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_ACTION_RESULT_TYPE">BATCH_ACTION_RESULT_TYPE</link> and <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_INSTALL_RESULT_TYPE">BATCH_INSTALL_RESULT_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="SUCCESS" xml:id="org.osgi.jmx.framework.FrameworkMBean.SUCCESS">
         <title>public static final String SUCCESS = "Success"</title>
         <para>
The SUCCESS, used in <link linkend="org.osgi.jmx.framework.FrameworkMBean.SUCCESS_ITEM">SUCCESS_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="SUCCESS_ITEM" xml:id="org.osgi.jmx.framework.FrameworkMBean.SUCCESS_ITEM">
         <title>public static final Item SUCCESS_ITEM</title>
         <para>
The item that indicates if this operation was successful. The key is
 <link linkend="org.osgi.jmx.framework.FrameworkMBean.SUCCESS">SUCCESS</link> and the type is SimpleType.BOOLEAN. It is used
 in <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_ACTION_RESULT_TYPE">BATCH_ACTION_RESULT_TYPE</link> and
 <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_INSTALL_RESULT_TYPE">BATCH_INSTALL_RESULT_TYPE</link>.
   </para>
      </section>
      <section role="method" xreflabel="getDependencyClosure(long[])" xml:id="org.osgi.jmx.framework.FrameworkMBean.getDependencyClosure-long---">
         <title>public long[] getDependencyClosure(long[] bundles) throws IOException</title>
         <formalpara role="parameter">
            <title>bundles</title>
            <para>The initial bundles IDs for which to generate the
        dependency closure.</para>
         </formalpara>
         <para role="description">
Returns the dependency closure for the specified bundles.
 
 </para>
         <para>
 A graph of bundles is computed starting with the specified bundles. The
 graph is expanded by adding any bundle that is either wired to a package
 that is currently exported by a bundle in the graph or requires a bundle
 in the graph. The graph is fully constructed when there is no bundle
 outside the graph that is wired to a bundle in the graph. The graph may
 contain <code>UNINSTALLED</code> bundles that are
 <link linkend="org.osgi.jmx.framework.FrameworkMBean.getRemovalPendingBundles--">removal pending</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A bundle ID array containing a snapshot of the dependency closure
         of the specified bundles, or an empty array if there were no
         specified bundles.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation failed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if a bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFrameworkStartLevel()" xml:id="org.osgi.jmx.framework.FrameworkMBean.getFrameworkStartLevel--">
         <title>public int getFrameworkStartLevel() throws IOException</title>
         <para role="description">
Retrieve the framework start level
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the framework start level</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation failed   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getInitialBundleStartLevel()" xml:id="org.osgi.jmx.framework.FrameworkMBean.getInitialBundleStartLevel--">
         <title>public int getInitialBundleStartLevel() throws IOException</title>
         <para role="description">
Answer the initial start level assigned to a bundle when it is first
 started
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the start level</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation failed   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getProperty(String)" xml:id="org.osgi.jmx.framework.FrameworkMBean.getProperty-String-">
         <title>public String getProperty(String key) throws IOException</title>
         <formalpara role="parameter">
            <title>key</title>
            <para>The name of the requested property.</para>
         </formalpara>
         <para role="description">
Returns the value of the specified property. If the key is not found in
 the Framework properties, the system properties are then searched. The
 method returns <code>null</code> if the property is not found.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The value of the requested property, or <code>null</code> if the
         property is undefined.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation failed   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRemovalPendingBundles()" xml:id="org.osgi.jmx.framework.FrameworkMBean.getRemovalPendingBundles--">
         <title>public long[] getRemovalPendingBundles() throws IOException</title>
         <para role="description">
Returns the bundles IDs that have non-current, in use bundle wirings.
 This is typically the bundles which have been updated or uninstalled
 since the last call to <link linkend="org.osgi.jmx.framework.FrameworkMBean.refreshBundles-long---">refreshBundles(long[])</link>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A bundle ID array containing a snapshot of the bundles which have
         non-current, in use bundle wirings, or an empty array if there
         are no such bundles.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation failed   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="installBundle(String)" xml:id="org.osgi.jmx.framework.FrameworkMBean.installBundle-String-">
         <title>public long installBundle(String location) throws IOException</title>
         <formalpara role="parameter">
            <title>location</title>
            <para>the location of the bundle to install</para>
         </formalpara>
         <para role="description">
Install the bundle indicated by the bundleLocations
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the bundle id the installed bundle</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation does not succeed   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="installBundleFromURL(String,String)" xml:id="org.osgi.jmx.framework.FrameworkMBean.installBundleFromURL-String-String-">
         <title>public long installBundleFromURL(String location,String url) throws IOException</title>
         <formalpara role="parameter">
            <title>location</title>
            <para>the location to assign to the bundle</para>
         </formalpara>
         <formalpara role="parameter">
            <title>url</title>
            <para>the URL which will supply the bytes for the bundle</para>
         </formalpara>
         <para role="description">
Install the bundle indicated by the bundleLocations
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the bundle id the installed bundle</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation does not succeed   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="installBundles(String[])" xml:id="org.osgi.jmx.framework.FrameworkMBean.installBundles-String---">
         <title>public CompositeData installBundles(String[] locations) throws IOException</title>
         <formalpara role="parameter">
            <title>locations</title>
            <para>the array of locations of the bundles to install</para>
         </formalpara>
         <para role="description">
Batch install the bundles indicated by the list of bundleLocationUrls
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the resulting state from executing the operation</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation does not succeed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_INSTALL_RESULT_TYPE">BATCH_INSTALL_RESULT_TYPE for the precise
      specification of the CompositeData type representing the returned
      result.</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="installBundlesFromURL(String[],String[])" xml:id="org.osgi.jmx.framework.FrameworkMBean.installBundlesFromURL-String---String---">
         <title>public CompositeData installBundlesFromURL(String[] locations,String[] urls) throws IOException</title>
         <formalpara role="parameter">
            <title>locations</title>
            <para>the array of locations to assign to the installed
        bundles</para>
         </formalpara>
         <formalpara role="parameter">
            <title>urls</title>
            <para>the array of urls which supply the bundle bytes</para>
         </formalpara>
         <para role="description">
Batch install the bundles indicated by the list of bundleLocationUrls
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the resulting state from executing the operation</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation does not succeed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_INSTALL_RESULT_TYPE">for the precise specification of the
      CompositeData type representing the returned result.</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="refreshBundle(long)" xml:id="org.osgi.jmx.framework.FrameworkMBean.refreshBundle-long-">
         <title>public void refreshBundle(long bundleIdentifier) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleIdentifier</title>
            <para>the bundle identifier</para>
         </formalpara>
         <para role="description">
Force the update, replacement or removal of the packages identified by
 the specified bundle.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation failed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="refreshBundleAndWait(long)" xml:id="org.osgi.jmx.framework.FrameworkMBean.refreshBundleAndWait-long-">
         <title>public boolean refreshBundleAndWait(long bundleIdentifier) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleIdentifier</title>
            <para>the bundle identifier</para>
         </formalpara>
         <para role="description">
Force the update, replacement or removal of the packages identified by
 the specified bundle and wait until completed.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>whether the bundle was successfully resolved after being
         refreshed.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation failed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="refreshBundles(long[])" xml:id="org.osgi.jmx.framework.FrameworkMBean.refreshBundles-long---">
         <title>public void refreshBundles(long[] bundleIdentifiers) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleIdentifiers</title>
            <para>The identifiers of the bundles to refresh, or
        <code>null</code> for all bundles with packages pending removal.</para>
         </formalpara>
         <para role="description">
Force the update, replacement or removal of the packages identified by
 the list of bundles.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation failed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if a bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="refreshBundlesAndWait(long[])" xml:id="org.osgi.jmx.framework.FrameworkMBean.refreshBundlesAndWait-long---">
         <title>public CompositeData refreshBundlesAndWait(long[] bundleIdentifiers) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleIdentifiers</title>
            <para>The identifiers of the bundles to refresh, or
        <code>null</code> for all bundles with packages pending removal.</para>
         </formalpara>
         <para role="description">
Force the update, replacement or removal of the packages identified by
 the list of bundles and wait until completed.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the result of the refresh operation</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation failed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if a bundle indicated does not exist   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_RESOLVE_RESULT_TYPE">for the precise specification of the
      CompositeData type representing the returned result.</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="resolve(long[])" xml:id="org.osgi.jmx.framework.FrameworkMBean.resolve-long---">
         <title>public CompositeData resolve(long[] bundleIdentifiers) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleIdentifiers</title>
            <para>The identifiers of the bundles to resolve, or
        <code>null</code> to resolve all unresolved bundles.</para>
         </formalpara>
         <para role="description">
Same as <link linkend="org.osgi.jmx.framework.FrameworkMBean.resolveBundles-long---">resolveBundles(long[])</link> but with a more detailed return
 type.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the resulting state from executing the operation</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation failed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if a bundle indicated does not exist   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_RESOLVE_RESULT_TYPE">for the precise specification of the
      CompositeData type representing the returned result.</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="resolveBundle(long)" xml:id="org.osgi.jmx.framework.FrameworkMBean.resolveBundle-long-">
         <title>public boolean resolveBundle(long bundleIdentifier) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleIdentifier</title>
            <para>the bundle identifier</para>
         </formalpara>
         <para role="description">
Resolve the bundle indicated by the unique symbolic name and version
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the bundle was resolved, false otherwise</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation does not succeed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="resolveBundles(long[])" xml:id="org.osgi.jmx.framework.FrameworkMBean.resolveBundles-long---">
         <title>public boolean resolveBundles(long[] bundleIdentifiers) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleIdentifiers</title>
            <para>The identifiers of the bundles to resolve, or
        <code>null</code> to resolve all unresolved bundles.</para>
         </formalpara>
         <para role="description">
Batch resolve the bundles indicated by the list of bundle identifiers
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the bundles were resolved, false otherwise</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation does not succeed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if a bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="restartFramework()" xml:id="org.osgi.jmx.framework.FrameworkMBean.restartFramework--">
         <title>public void restartFramework() throws IOException</title>
         <para role="description">
Restart the framework by updating the system bundle
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation failed   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setBundleStartLevel(long,int)" xml:id="org.osgi.jmx.framework.FrameworkMBean.setBundleStartLevel-long-int-">
         <title>public void setBundleStartLevel(long bundleIdentifier,int newlevel) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleIdentifier</title>
            <para>the bundle identifier</para>
         </formalpara>
         <formalpara role="parameter">
            <title>newlevel</title>
            <para>the new start level for the bundle</para>
         </formalpara>
         <para role="description">
Set the start level for the bundle identifier
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation failed   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setBundleStartLevels(long[],int[])" xml:id="org.osgi.jmx.framework.FrameworkMBean.setBundleStartLevels-long---int---">
         <title>public CompositeData setBundleStartLevels(long[] bundleIdentifiers,int[] newlevels) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleIdentifiers</title>
            <para>the array of bundle identifiers</para>
         </formalpara>
         <formalpara role="parameter">
            <title>newlevels</title>
            <para>the array of new start level for the bundles</para>
         </formalpara>
         <para role="description">
Set the start levels for the list of bundles.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the resulting state from executing the operation</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation failed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_ACTION_RESULT_TYPE">for the precise specification of the
      CompositeData type representing the returned result.</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setFrameworkStartLevel(int)" xml:id="org.osgi.jmx.framework.FrameworkMBean.setFrameworkStartLevel-int-">
         <title>public void setFrameworkStartLevel(int newlevel) throws IOException</title>
         <formalpara role="parameter">
            <title>newlevel</title>
            <para>the new start level</para>
         </formalpara>
         <para role="description">
Set the start level for the framework
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation failed   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setInitialBundleStartLevel(int)" xml:id="org.osgi.jmx.framework.FrameworkMBean.setInitialBundleStartLevel-int-">
         <title>public void setInitialBundleStartLevel(int newlevel) throws IOException</title>
         <formalpara role="parameter">
            <title>newlevel</title>
            <para>the new start level</para>
         </formalpara>
         <para role="description">
Set the initial start level assigned to a bundle when it is first started
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation failed   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="shutdownFramework()" xml:id="org.osgi.jmx.framework.FrameworkMBean.shutdownFramework--">
         <title>public void shutdownFramework() throws IOException</title>
         <para role="description">
Shutdown the framework by stopping the system bundle
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation failed   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="startBundle(long)" xml:id="org.osgi.jmx.framework.FrameworkMBean.startBundle-long-">
         <title>public void startBundle(long bundleIdentifier) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleIdentifier</title>
            <para>the bundle identifier</para>
         </formalpara>
         <para role="description">
Start the bundle indicated by the bundle identifier
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation does not succeed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="startBundles(long[])" xml:id="org.osgi.jmx.framework.FrameworkMBean.startBundles-long---">
         <title>public CompositeData startBundles(long[] bundleIdentifiers) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleIdentifiers</title>
            <para>the array of bundle identifiers</para>
         </formalpara>
         <para role="description">
Batch start the bundles indicated by the list of bundle identifier
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the resulting state from executing the operation</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation does not succeed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_ACTION_RESULT_TYPE">for the precise specification of the
      CompositeData type representing the returned result.</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="stopBundle(long)" xml:id="org.osgi.jmx.framework.FrameworkMBean.stopBundle-long-">
         <title>public void stopBundle(long bundleIdentifier) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleIdentifier</title>
            <para>the bundle identifier</para>
         </formalpara>
         <para role="description">
Stop the bundle indicated by the bundle identifier
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation does not succeed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="stopBundles(long[])" xml:id="org.osgi.jmx.framework.FrameworkMBean.stopBundles-long---">
         <title>public CompositeData stopBundles(long[] bundleIdentifiers) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleIdentifiers</title>
            <para>the array of bundle identifiers</para>
         </formalpara>
         <para role="description">
Batch stop the bundles indicated by the list of bundle identifier
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the resulting state from executing the operation</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation does not succeed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_ACTION_RESULT_TYPE">BATCH_ACTION_RESULT_TYPE for the precise
      specification of the CompositeData type representing the returned
      result.</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="uninstallBundle(long)" xml:id="org.osgi.jmx.framework.FrameworkMBean.uninstallBundle-long-">
         <title>public void uninstallBundle(long bundleIdentifier) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleIdentifier</title>
            <para>the bundle identifier</para>
         </formalpara>
         <para role="description">
Uninstall the bundle indicated by the bundle identifier
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation does not succeed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="uninstallBundles(long[])" xml:id="org.osgi.jmx.framework.FrameworkMBean.uninstallBundles-long---">
         <title>public CompositeData uninstallBundles(long[] bundleIdentifiers) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleIdentifiers</title>
            <para>the array of bundle identifiers</para>
         </formalpara>
         <para role="description">
Batch uninstall the bundles indicated by the list of bundle identifiers
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the resulting state from executing the operation</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation does not succeed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_ACTION_RESULT_TYPE">BATCH_ACTION_RESULT_TYPE for the precise
      specification of the CompositeData type representing the returned
      result.</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="updateBundle(long)" xml:id="org.osgi.jmx.framework.FrameworkMBean.updateBundle-long-">
         <title>public void updateBundle(long bundleIdentifier) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleIdentifier</title>
            <para>the bundle identifier</para>
         </formalpara>
         <para role="description">
Update the bundle indicated by the bundle identifier
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation does not succeed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="updateBundleFromURL(long,String)" xml:id="org.osgi.jmx.framework.FrameworkMBean.updateBundleFromURL-long-String-">
         <title>public void updateBundleFromURL(long bundleIdentifier,String url) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleIdentifier</title>
            <para>the bundle identifier</para>
         </formalpara>
         <formalpara role="parameter">
            <title>url</title>
            <para>the URL to use to update the bundle</para>
         </formalpara>
         <para role="description">
Update the bundle identified by the bundle identifier
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation does not succeed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="updateBundles(long[])" xml:id="org.osgi.jmx.framework.FrameworkMBean.updateBundles-long---">
         <title>public CompositeData updateBundles(long[] bundleIdentifiers) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleIdentifiers</title>
            <para>the array of bundle identifiers</para>
         </formalpara>
         <para role="description">
Batch update the bundles indicated by the list of bundle identifier.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the resulting state from executing the operation</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation does not succeed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_ACTION_RESULT_TYPE">BATCH_ACTION_RESULT_TYPE for the precise
      specification of the CompositeData type representing the returned
      result.</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="updateBundlesFromURL(long[],String[])" xml:id="org.osgi.jmx.framework.FrameworkMBean.updateBundlesFromURL-long---String---">
         <title>public CompositeData updateBundlesFromURL(long[] bundleIdentifiers,String[] urls) throws IOException</title>
         <formalpara role="parameter">
            <title>bundleIdentifiers</title>
            <para>the array of bundle identifiers</para>
         </formalpara>
         <formalpara role="parameter">
            <title>urls</title>
            <para>the array of URLs to use to update the bundles</para>
         </formalpara>
         <para role="description">
Update the bundle uniquely identified by the bundle symbolic name and
 version using the contents of the supplied urls.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the resulting state from executing the operation</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation does not succeed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the bundle indicated does not exist   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.framework.FrameworkMBean.BATCH_ACTION_RESULT_TYPE">BATCH_ACTION_RESULT_TYPE for the precise
      specification of the CompositeData type representing the returned
      result.</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="updateFramework()" xml:id="org.osgi.jmx.framework.FrameworkMBean.updateFramework--">
         <title>public void updateFramework() throws IOException</title>
         <para role="description">
Update the framework by updating the system bundle.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation failed   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="PackageStateMBean" xml:id="org.osgi.jmx.framework.PackageStateMBean">
      <title>public interface PackageStateMBean</title>
      <para>
This MBean provides information about the package state of the framework.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="EXPORTING_BUNDLES" xml:id="org.osgi.jmx.framework.PackageStateMBean.EXPORTING_BUNDLES">
         <title>public static final String EXPORTING_BUNDLES = "ExportingBundles"</title>
         <para>
The key EXPORTING_BUNDLE, used in <link linkend="org.osgi.jmx.framework.PackageStateMBean.EXPORTING_BUNDLES_ITEM">EXPORTING_BUNDLES_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="EXPORTING_BUNDLES_ITEM" xml:id="org.osgi.jmx.framework.PackageStateMBean.EXPORTING_BUNDLES_ITEM">
         <title>public static final Item EXPORTING_BUNDLES_ITEM</title>
         <para>
The item containing the bundle identifier in <link linkend="org.osgi.jmx.framework.PackageStateMBean.PACKAGE_TYPE">PACKAGE_TYPE</link>. The
 key is <link linkend="org.osgi.jmx.framework.PackageStateMBean.EXPORTING_BUNDLES">EXPORTING_BUNDLES</link> and the type is
 <link linkend="org.osgi.jmx.JmxConstants.LONG_ARRAY_TYPE">JmxConstants.LONG_ARRAY_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="IMPORTING_BUNDLES" xml:id="org.osgi.jmx.framework.PackageStateMBean.IMPORTING_BUNDLES">
         <title>public static final String IMPORTING_BUNDLES = "ImportingBundles"</title>
         <para>
The key IMPORTING_BUNDLES, used in <link linkend="org.osgi.jmx.framework.PackageStateMBean.IMPORTING_BUNDLES_ITEM">IMPORTING_BUNDLES_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="IMPORTING_BUNDLES_ITEM" xml:id="org.osgi.jmx.framework.PackageStateMBean.IMPORTING_BUNDLES_ITEM">
         <title>public static final Item IMPORTING_BUNDLES_ITEM</title>
         <para>
The item containing the bundle identifier in <link linkend="org.osgi.jmx.framework.PackageStateMBean.PACKAGE_TYPE">PACKAGE_TYPE</link>. The
 key is <link linkend="org.osgi.jmx.framework.PackageStateMBean.IMPORTING_BUNDLES">IMPORTING_BUNDLES</link> and the type is
 <link linkend="org.osgi.jmx.JmxConstants.LONG_ARRAY_TYPE">JmxConstants.LONG_ARRAY_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="NAME" xml:id="org.osgi.jmx.framework.PackageStateMBean.NAME">
         <title>public static final String NAME = "Name"</title>
         <para>
The key NAME, used in <link linkend="org.osgi.jmx.framework.PackageStateMBean.NAME_ITEM">NAME_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="NAME_ITEM" xml:id="org.osgi.jmx.framework.PackageStateMBean.NAME_ITEM">
         <title>public static final Item NAME_ITEM</title>
         <para>
The item containing the name of the package in <link linkend="org.osgi.jmx.framework.PackageStateMBean.PACKAGE_TYPE">PACKAGE_TYPE</link>. The
 key is <link linkend="org.osgi.jmx.framework.PackageStateMBean.NAME">NAME</link> and the type is SimpleType.LONG.
   </para>
      </section>
      <section role="field" xreflabel="OBJECTNAME" xml:id="org.osgi.jmx.framework.PackageStateMBean.OBJECTNAME">
         <title>public static final String OBJECTNAME = "osgi.core:type=packageState,version=1.5"</title>
         <para>
The fully qualified object name of this MBean.
   </para>
      </section>
      <section role="field" xreflabel="PACKAGE_TYPE" xml:id="org.osgi.jmx.framework.PackageStateMBean.PACKAGE_TYPE">
         <title>public static final CompositeType PACKAGE_TYPE</title>
         <para>
The Composite Type for a CompositeData representing a package. This type
 consists of:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.PackageStateMBean.EXPORTING_BUNDLES_ITEM">EXPORTING_BUNDLES_ITEM</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.PackageStateMBean.IMPORTING_BUNDLES_ITEM">IMPORTING_BUNDLES_ITEM</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.PackageStateMBean.NAME_ITEM">NAME_ITEM</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.PackageStateMBean.REMOVAL_PENDING_ITEM">REMOVAL_PENDING_ITEM</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.PackageStateMBean.VERSION_ITEM">VERSION_ITEM</link>
               </para>
            </listitem>
         </itemizedlist>
         <para>
 The key is defined as <link linkend="org.osgi.jmx.framework.PackageStateMBean.NAME">NAME</link> and <link linkend="org.osgi.jmx.framework.PackageStateMBean.EXPORTING_BUNDLES">EXPORTING_BUNDLES</link>
         </para>
      </section>
      <section role="field" xreflabel="PACKAGES_TYPE" xml:id="org.osgi.jmx.framework.PackageStateMBean.PACKAGES_TYPE">
         <title>public static final TabularType PACKAGES_TYPE</title>
         <para>
The Tabular Type used in <link linkend="org.osgi.jmx.framework.PackageStateMBean.listPackages--">listPackages()</link>. They key is
 <link linkend="org.osgi.jmx.framework.PackageStateMBean.NAME">NAME</link>, <link linkend="org.osgi.jmx.framework.PackageStateMBean.VERSION">VERSION</link>, and <link linkend="org.osgi.jmx.framework.PackageStateMBean.EXPORTING_BUNDLES">EXPORTING_BUNDLES</link>.
   </para>
      </section>
      <section role="field" xreflabel="REMOVAL_PENDING" xml:id="org.osgi.jmx.framework.PackageStateMBean.REMOVAL_PENDING">
         <title>public static final String REMOVAL_PENDING = "RemovalPending"</title>
         <para>
The name of the item containing the pending removal status of the package
 in the CompositeData. Used
   </para>
      </section>
      <section role="field" xreflabel="REMOVAL_PENDING_ITEM" xml:id="org.osgi.jmx.framework.PackageStateMBean.REMOVAL_PENDING_ITEM">
         <title>public static final Item REMOVAL_PENDING_ITEM</title>
         <para>
The item representing the removal pending status of a package. The key is
 <link linkend="org.osgi.jmx.framework.PackageStateMBean.REMOVAL_PENDING">REMOVAL_PENDING</link> and the type is SimpleType.BOOLEAN.
   </para>
      </section>
      <section role="field" xreflabel="VERSION" xml:id="org.osgi.jmx.framework.PackageStateMBean.VERSION">
         <title>public static final String VERSION = "Version"</title>
         <para>
The name of the item containing the package version in the CompositeData.
 Used in <link linkend="org.osgi.jmx.framework.PackageStateMBean.VERSION_ITEM">VERSION_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="VERSION_ITEM" xml:id="org.osgi.jmx.framework.PackageStateMBean.VERSION_ITEM">
         <title>public static final Item VERSION_ITEM</title>
         <para>
The item containing the version of the package in <link linkend="org.osgi.jmx.framework.PackageStateMBean.PACKAGE_TYPE">PACKAGE_TYPE</link>.
 The key is <link linkend="org.osgi.jmx.framework.PackageStateMBean.VERSION">VERSION</link> and the type is SimpleType.STRING.
   </para>
      </section>
      <section role="method" xreflabel="getExportingBundles(String,String)" xml:id="org.osgi.jmx.framework.PackageStateMBean.getExportingBundles-String-String-">
         <title>public long[] getExportingBundles(String packageName,String version) throws IOException</title>
         <formalpara role="parameter">
            <title>packageName</title>
            <para>- the package name</para>
         </formalpara>
         <formalpara role="parameter">
            <title>version</title>
            <para>- the version of the package</para>
         </formalpara>
         <para role="description">
Answer the identifier of the bundle exporting the package
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the bundle identifiers exporting such a package</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the package indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getImportingBundles(String,String,long)" xml:id="org.osgi.jmx.framework.PackageStateMBean.getImportingBundles-String-String-long-">
         <title>public long[] getImportingBundles(String packageName,String version,long exportingBundle) throws IOException</title>
         <formalpara role="parameter">
            <title>packageName</title>
            <para>The package name</para>
         </formalpara>
         <formalpara role="parameter">
            <title>version</title>
            <para>The version of the package</para>
         </formalpara>
         <formalpara role="parameter">
            <title>exportingBundle</title>
            <para>The exporting bundle for the given package</para>
         </formalpara>
         <para role="description">
Answer the list of identifiers of the bundles importing the package
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the list of bundle identifiers</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the package indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isRemovalPending(String,String,long)" xml:id="org.osgi.jmx.framework.PackageStateMBean.isRemovalPending-String-String-long-">
         <title>public boolean isRemovalPending(String packageName,String version,long exportingBundle) throws IOException</title>
         <formalpara role="parameter">
            <title>packageName</title>
            <para>The package name</para>
         </formalpara>
         <formalpara role="parameter">
            <title>version</title>
            <para>The version of the package</para>
         </formalpara>
         <formalpara role="parameter">
            <title>exportingBundle</title>
            <para>The bundle exporting the package</para>
         </formalpara>
         <para role="description">
Answer if this package is exported by a bundle which has been updated or
 uninstalled
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if this package is being exported by a bundle that has been
         updated or uninstalled.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the package indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="listPackages()" xml:id="org.osgi.jmx.framework.PackageStateMBean.listPackages--">
         <title>public TabularData listPackages() throws IOException</title>
         <para role="description">
Answer the package state of the system in tabular form
 
 The Tabular Data is typed by <link linkend="org.osgi.jmx.framework.PackageStateMBean.PACKAGES_TYPE">PACKAGES_TYPE</link>, which has
 <link linkend="org.osgi.jmx.framework.PackageStateMBean.PACKAGE_TYPE">PACKAGE_TYPE</link> as its Composite Type.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the tabular representation of the package state</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– When fails   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ServiceStateMBean" xml:id="org.osgi.jmx.framework.ServiceStateMBean">
      <title>public interface ServiceStateMBean</title>
      <para>
This MBean represents the Service state of the framework. This MBean also
 emits events that clients can use to get notified of the changes in the
 service state of the framework.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="BUNDLE_IDENTIFIER" xml:id="org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_IDENTIFIER">
         <title>public static final String BUNDLE_IDENTIFIER = "BundleIdentifier"</title>
         <para>
The key BUNDLE_IDENTIFIER, used in <link linkend="org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_IDENTIFIER_ITEM">BUNDLE_IDENTIFIER_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE_IDENTIFIER_ITEM" xml:id="org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_IDENTIFIER_ITEM">
         <title>public static final Item BUNDLE_IDENTIFIER_ITEM</title>
         <para>
The item containing the bundle identifier in <link linkend="org.osgi.jmx.framework.ServiceStateMBean.SERVICE_TYPE">SERVICE_TYPE</link>. The
 key is <link linkend="org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_IDENTIFIER">BUNDLE_IDENTIFIER</link> and the type is SimpleType.LONG
 .
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE_LOCATION" xml:id="org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_LOCATION">
         <title>public static final String BUNDLE_LOCATION = "BundleLocation"</title>
         <para>
The key BUNDLE_LOCATION, used in <link linkend="org.osgi.jmx.framework.ServiceStateMBean.SERVICE_EVENT_TYPE">SERVICE_EVENT_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE_LOCATION_ITEM" xml:id="org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_LOCATION_ITEM">
         <title>public static final Item BUNDLE_LOCATION_ITEM</title>
         <para>
The item containing the bundle location in <link linkend="org.osgi.jmx.framework.ServiceStateMBean.EVENT_ITEM">EVENT_ITEM</link>. The key
 is <link linkend="org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_LOCATION">BUNDLE_LOCATION</link> and the the type is SimpleType.STRING
 .
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE_SYMBOLIC_NAME" xml:id="org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_SYMBOLIC_NAME">
         <title>public static final String BUNDLE_SYMBOLIC_NAME = "BundleSymbolicName"</title>
         <para>
The key BUNDLE_SYMBOLIC_NAME, used in <link linkend="org.osgi.jmx.framework.ServiceStateMBean.SERVICE_EVENT_TYPE">SERVICE_EVENT_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE_SYMBOLIC_NAME_ITEM" xml:id="org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_SYMBOLIC_NAME_ITEM">
         <title>public static final Item BUNDLE_SYMBOLIC_NAME_ITEM</title>
         <para>
The item containing the symbolic name in <link linkend="org.osgi.jmx.framework.ServiceStateMBean.EVENT">EVENT</link>. The key is
 <link linkend="org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_SYMBOLIC_NAME">BUNDLE_SYMBOLIC_NAME</link> and the the type is
 SimpleType.STRING.
   </para>
      </section>
      <section role="field" xreflabel="EVENT" xml:id="org.osgi.jmx.framework.ServiceStateMBean.EVENT">
         <title>public static final String EVENT = "ServiceEvent"</title>
         <para>
The key EVENT, used in <link linkend="org.osgi.jmx.framework.ServiceStateMBean.EVENT_ITEM">EVENT_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="EVENT_ITEM" xml:id="org.osgi.jmx.framework.ServiceStateMBean.EVENT_ITEM">
         <title>public static final Item EVENT_ITEM</title>
         <para>
The item containing the event type. The key is <link linkend="org.osgi.jmx.framework.ServiceStateMBean.EVENT">EVENT</link> and the
 type is SimpleType.INTEGER</para>
      </section>
      <section role="field" xreflabel="IDENTIFIER" xml:id="org.osgi.jmx.framework.ServiceStateMBean.IDENTIFIER">
         <title>public static final String IDENTIFIER = "Identifier"</title>
         <para>
The key IDENTIFIER, used <link linkend="org.osgi.jmx.framework.ServiceStateMBean.IDENTIFIER_ITEM">IDENTIFIER_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="IDENTIFIER_ITEM" xml:id="org.osgi.jmx.framework.ServiceStateMBean.IDENTIFIER_ITEM">
         <title>public static final Item IDENTIFIER_ITEM</title>
         <para>
The item containing the service identifier in <link linkend="org.osgi.jmx.framework.ServiceStateMBean.SERVICE_TYPE">SERVICE_TYPE</link>. The
 key is <link linkend="org.osgi.jmx.framework.ServiceStateMBean.IDENTIFIER">IDENTIFIER</link> and the type is SimpleType.LONG.
   </para>
      </section>
      <section role="field" xreflabel="OBJECT_CLASS" xml:id="org.osgi.jmx.framework.ServiceStateMBean.OBJECT_CLASS">
         <title>public static final String OBJECT_CLASS = "objectClass"</title>
         <para>
The key OBJECT_CLASS, used <link linkend="org.osgi.jmx.framework.ServiceStateMBean.OBJECT_CLASS_ITEM">OBJECT_CLASS_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="OBJECT_CLASS_ITEM" xml:id="org.osgi.jmx.framework.ServiceStateMBean.OBJECT_CLASS_ITEM">
         <title>public static final Item OBJECT_CLASS_ITEM</title>
         <para>
The item containing the interfaces of the service in
 <link linkend="org.osgi.jmx.framework.ServiceStateMBean.SERVICE_TYPE">SERVICE_TYPE</link>. The key is <link linkend="org.osgi.jmx.framework.ServiceStateMBean.OBJECT_CLASS">OBJECT_CLASS</link> and the type is
 <link linkend="org.osgi.jmx.JmxConstants.STRING_ARRAY_TYPE">JmxConstants.STRING_ARRAY_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="OBJECTNAME" xml:id="org.osgi.jmx.framework.ServiceStateMBean.OBJECTNAME">
         <title>public static final String OBJECTNAME = "osgi.core:type=serviceState,version=1.7"</title>
         <para>
The Object Name prefix for this mbean. The full object name also contains
 the framework name and uuid as properties.
   </para>
      </section>
      <section role="field" xreflabel="PROPERTIES" xml:id="org.osgi.jmx.framework.ServiceStateMBean.PROPERTIES">
         <title>public static final String PROPERTIES = "Properties"</title>
         <para>
The key PROPERTIES, used in <link linkend="org.osgi.jmx.framework.ServiceStateMBean.PROPERTIES_ITEM">PROPERTIES_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="PROPERTIES_ITEM" xml:id="org.osgi.jmx.framework.ServiceStateMBean.PROPERTIES_ITEM">
         <title>public static final Item PROPERTIES_ITEM</title>
         <para>
The item containing service properties in <link linkend="org.osgi.jmx.framework.ServiceStateMBean.SERVICE_TYPE">SERVICE_TYPE</link>. The key
 is <link linkend="org.osgi.jmx.framework.ServiceStateMBean.PROPERTIES">PROPERTIES</link> and the type is
 <link linkend="org.osgi.jmx.JmxConstants.PROPERTIES_TYPE">JmxConstants.PROPERTIES_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE_EVENT_TYPE" xml:id="org.osgi.jmx.framework.ServiceStateMBean.SERVICE_EVENT_TYPE">
         <title>public static final CompositeType SERVICE_EVENT_TYPE</title>
         <para>
The Composite Type that represents a service event. This composite
 consists of:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.ServiceStateMBean.IDENTIFIER">IDENTIFIER</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.ServiceStateMBean.OBJECT_CLASS">OBJECT_CLASS</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_LOCATION">BUNDLE_LOCATION</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_SYMBOLIC_NAME">BUNDLE_SYMBOLIC_NAME</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.ServiceStateMBean.EVENT">EVENT</link>
               </para>
            </listitem>
         </itemizedlist>
      </section>
      <section role="field" xreflabel="SERVICE_TYPE" xml:id="org.osgi.jmx.framework.ServiceStateMBean.SERVICE_TYPE">
         <title>public static final CompositeType SERVICE_TYPE</title>
         <para>
The Composite Type for a CompositeData representing a service. This type
 consists of:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_IDENTIFIER">BUNDLE_IDENTIFIER</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.ServiceStateMBean.IDENTIFIER">IDENTIFIER</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.ServiceStateMBean.OBJECT_CLASS">OBJECT_CLASS</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.ServiceStateMBean.PROPERTIES">PROPERTIES</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.ServiceStateMBean.USING_BUNDLES">USING_BUNDLES</link>
               </para>
            </listitem>
         </itemizedlist>
      </section>
      <section role="field" xreflabel="SERVICES_TYPE" xml:id="org.osgi.jmx.framework.ServiceStateMBean.SERVICES_TYPE">
         <title>public static final TabularType SERVICES_TYPE</title>
         <para>
The Tabular Type for a Service table. The rows consists of
 <link linkend="org.osgi.jmx.framework.ServiceStateMBean.SERVICE_TYPE">SERVICE_TYPE</link> Composite Data and the index is <link linkend="org.osgi.jmx.framework.ServiceStateMBean.IDENTIFIER">IDENTIFIER</link>
 .
   </para>
      </section>
      <section role="field" xreflabel="USING_BUNDLES" xml:id="org.osgi.jmx.framework.ServiceStateMBean.USING_BUNDLES">
         <title>public static final String USING_BUNDLES = "UsingBundles"</title>
         <para>
The key USING_BUNDLES, used in <link linkend="org.osgi.jmx.framework.ServiceStateMBean.USING_BUNDLES_ITEM">USING_BUNDLES_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="USING_BUNDLES_ITEM" xml:id="org.osgi.jmx.framework.ServiceStateMBean.USING_BUNDLES_ITEM">
         <title>public static final Item USING_BUNDLES_ITEM</title>
         <para>
The item containing the bundles using the service in
 <link linkend="org.osgi.jmx.framework.ServiceStateMBean.SERVICE_TYPE">SERVICE_TYPE</link>. The key is <link linkend="org.osgi.jmx.framework.ServiceStateMBean.USING_BUNDLES">USING_BUNDLES</link> and the type is
 <link linkend="org.osgi.jmx.JmxConstants.LONG_ARRAY_TYPE">JmxConstants.LONG_ARRAY_TYPE</link>.
   </para>
      </section>
      <section role="method" xreflabel="getBundleIdentifier(long)" xml:id="org.osgi.jmx.framework.ServiceStateMBean.getBundleIdentifier-long-">
         <title>public long getBundleIdentifier(long serviceId) throws IOException</title>
         <formalpara role="parameter">
            <title>serviceId</title>
            <para>the identifier of the service</para>
         </formalpara>
         <para role="description">
Answer the bundle identifier of the bundle which registered the service
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the identifier for the bundle</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the service indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getObjectClass(long)" xml:id="org.osgi.jmx.framework.ServiceStateMBean.getObjectClass-long-">
         <title>public String[] getObjectClass(long serviceId) throws IOException</title>
         <formalpara role="parameter">
            <title>serviceId</title>
            <para>the identifier of the service</para>
         </formalpara>
         <para role="description">
Answer the list of interfaces that this service implements
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the list of interfaces</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the service indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getProperties(long)" xml:id="org.osgi.jmx.framework.ServiceStateMBean.getProperties-long-">
         <title>public TabularData getProperties(long serviceId) throws IOException</title>
         <formalpara role="parameter">
            <title>serviceId</title>
            <para>the identifier of the service</para>
         </formalpara>
         <para role="description">
Answer the map of properties associated with this service.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the table of properties. These include the standard mandatory
         service.id and objectClass properties as defined in the
         <code>org.osgi.framework.Constants</code> interface</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the service indicated does not exist   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.JmxConstants.PROPERTIES_TYPE">for the details of the TabularType</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getProperty(long,String)" xml:id="org.osgi.jmx.framework.ServiceStateMBean.getProperty-long-String-">
         <title>public CompositeData getProperty(long serviceId,String key) throws IOException</title>
         <formalpara role="parameter">
            <title>serviceId</title>
            <para>the identifier of the service</para>
         </formalpara>
         <formalpara role="parameter">
            <title>key</title>
            <para>the property key</para>
         </formalpara>
         <para role="description">
Return a single property from the specified service.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a CompositeData object holding the value and data type of the
         property.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">for the details of the CompositeType.</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getService(long)" xml:id="org.osgi.jmx.framework.ServiceStateMBean.getService-long-">
         <title>public CompositeData getService(long serviceId) throws IOException</title>
         <formalpara role="parameter">
            <title>serviceId</title>
            <para>the ID of the service to look up</para>
         </formalpara>
         <para role="description">
Obtain information about a given service.
 
 The result is defined by the CompositeType <link linkend="org.osgi.jmx.framework.ServiceStateMBean.SERVICE_TYPE">SERVICE_TYPE</link>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A CompositeData object with the service information</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the service indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getServiceIds()" xml:id="org.osgi.jmx.framework.ServiceStateMBean.getServiceIds--">
         <title>public long[] getServiceIds() throws IOException</title>
         <para role="description">
List all service IDs in the framework.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>all the service ids in the framework.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getUsingBundles(long)" xml:id="org.osgi.jmx.framework.ServiceStateMBean.getUsingBundles-long-">
         <title>public long[] getUsingBundles(long serviceId) throws IOException</title>
         <formalpara role="parameter">
            <title>serviceId</title>
            <para>the identifier of the service</para>
         </formalpara>
         <para role="description">
Answer the list of identifiers of the bundles that use the service
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the list of bundle identifiers</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the service indicated does not exist   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="listServices()" xml:id="org.osgi.jmx.framework.ServiceStateMBean.listServices--">
         <title>public TabularData listServices() throws IOException</title>
         <para role="description">
Answer the service state of the system in tabular form.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the tabular representation of the service state</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– If the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the service indicated does not exist   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.framework.ServiceStateMBean.SERVICES_TYPE">for the details of the TabularType</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="listServices(String,String)" xml:id="org.osgi.jmx.framework.ServiceStateMBean.listServices-String-String-">
         <title>public TabularData listServices(String clazz,String filter) throws IOException</title>
         <formalpara role="parameter">
            <title>clazz</title>
            <para>The class name with which the services were registered or
        <code>null</code> for any class name.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>filter</title>
            <para>A filter expression to match the services or <code>null</code>
        for no additional filter.</para>
         </formalpara>
         <para role="description">
Answer the service state of the system in tabular form. This method
 allows the specification of a class name and a filter to select services
 to be provided.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the tabular representation of the service state</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– If the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the service indicated does not exist   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.framework.ServiceStateMBean.SERVICES_TYPE">for the details of the TabularType</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="listServices(String,String,String...)" xml:id="org.osgi.jmx.framework.ServiceStateMBean.listServices-String-String-String...-">
         <title>public TabularData listServices(String clazz,String filter,String ... serviceTypeItems) throws IOException</title>
         <formalpara role="parameter">
            <title>clazz</title>
            <para>The class name with which the services were registered or
        <code>null</code> for any class name.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>filter</title>
            <para>A filter expression to match the services or <code>null</code>
        for no additional filter.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>serviceTypeItems</title>
            <para>The names of the <link linkend="org.osgi.jmx.framework.ServiceStateMBean.SERVICE_TYPE">SERVICE_TYPE</link> items to
        include in the result. For example "objectClass" or "Properties".
        Note that the result always returns the "Identifier" item since
        this serves as the key in the resulting table.</para>
         </formalpara>
         <para role="description">
Answer the service state of the system in tabular form. Apart from class
 name and filter, this method allows the specification of a subset of the
 <link linkend="org.osgi.jmx.framework.ServiceStateMBean.SERVICE_TYPE">SERVICE_TYPE</link> items to be included in the result. Selecting only
 the relevant Service Type items may save bandwidth and improve
 performance over a remote connection.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the tabular representation of the service state</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– If the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the service indicated does not exist   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.framework.ServiceStateMBean.SERVICES_TYPE">for the details of the TabularType</link>
            </para>
         </formalpara>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.jmx.service.cm" xml:id="org.osgi.jmx.service.cm" xml:base="../../generated/javadoc/docbook/org.osgi.jmx.service.cm.xml">
   <title>org.osgi.jmx.service.cm</title>
   <info>
      <releaseinfo xml:id="org.osgi.jmx.service.cm-version">Version 1.3</releaseinfo>
      <edition xml:id="org.osgi.jmx.service.cm-version.number">1.3</edition>
   </info>
   <para>
OSGi JMX Configuration Admin Package Version 1.3.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.jmx.service.cm; version="[1.3,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.jmx.service.cm; version="[1.3,1.4)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.jmx.service.cm.ConfigurationAdminMBean">
                  <code>ConfigurationAdminMBean</code>
               </link> - 
This MBean provides the management interface to the OSGi Configuration
 Administration Service.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="ConfigurationAdminMBean" xml:id="org.osgi.jmx.service.cm.ConfigurationAdminMBean">
      <title>public interface ConfigurationAdminMBean</title>
      <para>
This MBean provides the management interface to the OSGi Configuration
 Administration Service.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="OBJECTNAME" xml:id="org.osgi.jmx.service.cm.ConfigurationAdminMBean.OBJECTNAME">
         <title>public static final String OBJECTNAME = "osgi.compendium:service=cm,version=1.3"</title>
         <para>
The object name for this mbean.
   </para>
      </section>
      <section role="method" xreflabel="createFactoryConfiguration(String)" xml:id="org.osgi.jmx.service.cm.ConfigurationAdminMBean.createFactoryConfiguration-String-">
         <title>public String createFactoryConfiguration(String factoryPid) throws IOException</title>
         <formalpara role="parameter">
            <title>factoryPid</title>
            <para>the persistent id of the factory</para>
         </formalpara>
         <para role="description">
Create a new configuration instance for the supplied persistent id of the
 factory, answering the PID of the created configuration
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the PID of the created configuration</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation failed   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="createFactoryConfigurationForLocation(String,String)" xml:id="org.osgi.jmx.service.cm.ConfigurationAdminMBean.createFactoryConfigurationForLocation-String-String-">
         <title>public String createFactoryConfigurationForLocation(String factoryPid,String location) throws IOException</title>
         <formalpara role="parameter">
            <title>factoryPid</title>
            <para>the persistent id of the factory</para>
         </formalpara>
         <formalpara role="parameter">
            <title>location</title>
            <para>the bundle location</para>
         </formalpara>
         <para role="description">
Create a factory configuration for the supplied persistent id of the
 factory and the bundle location bound to bind the created configuration
 to, answering the PID of the created configuration
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the pid of the created configuation</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation failed   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="delete(String)" xml:id="org.osgi.jmx.service.cm.ConfigurationAdminMBean.delete-String-">
         <title>public void delete(String pid) throws IOException</title>
         <formalpara role="parameter">
            <title>pid</title>
            <para>the persistent identifier of the configuration</para>
         </formalpara>
         <para role="description">
Delete the configuration
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="deleteConfigurations(String)" xml:id="org.osgi.jmx.service.cm.ConfigurationAdminMBean.deleteConfigurations-String-">
         <title>public void deleteConfigurations(String filter) throws IOException</title>
         <formalpara role="parameter">
            <title>filter</title>
            <para>the string representation of the
        <code>org.osgi.framework.Filter</code>
            </para>
         </formalpara>
         <para role="description">
Delete the configurations matching the filter specification.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation failed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the filter is invalid   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="deleteForLocation(String,String)" xml:id="org.osgi.jmx.service.cm.ConfigurationAdminMBean.deleteForLocation-String-String-">
         <title>public void deleteForLocation(String pid,String location) throws IOException</title>
         <formalpara role="parameter">
            <title>pid</title>
            <para>the persistent identifier of the configuration</para>
         </formalpara>
         <formalpara role="parameter">
            <title>location</title>
            <para>the bundle location</para>
         </formalpara>
         <para role="description">
Delete the configuration
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getBundleLocation(String)" xml:id="org.osgi.jmx.service.cm.ConfigurationAdminMBean.getBundleLocation-String-">
         <title>public String getBundleLocation(String pid) throws IOException</title>
         <formalpara role="parameter">
            <title>pid</title>
            <para>the persistent identifier of the configuration</para>
         </formalpara>
         <para role="description">
Answer the bundle location the configuration is bound to
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the bundle location</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getConfigurations(String)" xml:id="org.osgi.jmx.service.cm.ConfigurationAdminMBean.getConfigurations-String-">
         <title>public String[][] getConfigurations(String filter) throws IOException</title>
         <formalpara role="parameter">
            <title>filter</title>
            <para>the string representation of the
        <code>org.osgi.framework.Filter</code>
            </para>
         </formalpara>
         <para role="description">
Answer the list of PID/Location pairs of the configurations managed by
 this service
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the list of configuration PID/Location pairs</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation failed   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the filter is invalid   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFactoryPid(String)" xml:id="org.osgi.jmx.service.cm.ConfigurationAdminMBean.getFactoryPid-String-">
         <title>public String getFactoryPid(String pid) throws IOException</title>
         <formalpara role="parameter">
            <title>pid</title>
            <para>the persistent identifier of the configuration</para>
         </formalpara>
         <para role="description">
Answer the factory PID if the configuration is a factory configuration,
 null otherwise.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the factory PID</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFactoryPidForLocation(String,String)" xml:id="org.osgi.jmx.service.cm.ConfigurationAdminMBean.getFactoryPidForLocation-String-String-">
         <title>public String getFactoryPidForLocation(String pid,String location) throws IOException</title>
         <formalpara role="parameter">
            <title>pid</title>
            <para>the persistent identifier of the configuration</para>
         </formalpara>
         <formalpara role="parameter">
            <title>location</title>
            <para>the bundle location</para>
         </formalpara>
         <para role="description">
Answer the factory PID if the configuration is a factory configuration,
 null otherwise.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the factory PID</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getProperties(String)" xml:id="org.osgi.jmx.service.cm.ConfigurationAdminMBean.getProperties-String-">
         <title>public TabularData getProperties(String pid) throws IOException</title>
         <formalpara role="parameter">
            <title>pid</title>
            <para>the persistent identifier of the configuration</para>
         </formalpara>
         <para role="description">
Answer the contents of the configuration.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the table of contents</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.JmxConstants.PROPERTIES_TYPE">JmxConstants.PROPERTIES_TYPE for the
      details of the TabularType</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getPropertiesForLocation(String,String)" xml:id="org.osgi.jmx.service.cm.ConfigurationAdminMBean.getPropertiesForLocation-String-String-">
         <title>public TabularData getPropertiesForLocation(String pid,String location) throws IOException</title>
         <formalpara role="parameter">
            <title>pid</title>
            <para>the persistent identifier of the configuration</para>
         </formalpara>
         <formalpara role="parameter">
            <title>location</title>
            <para>the bundle location</para>
         </formalpara>
         <para role="description">
Answer the contents of the configuration.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the table of contents</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.JmxConstants.PROPERTIES_TYPE">JmxConstants.PROPERTIES_TYPE for the
      details of the TabularType</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setBundleLocation(String,String)" xml:id="org.osgi.jmx.service.cm.ConfigurationAdminMBean.setBundleLocation-String-String-">
         <title>public void setBundleLocation(String pid,String location) throws IOException</title>
         <formalpara role="parameter">
            <title>pid</title>
            <para>the persistent identifier of the configuration</para>
         </formalpara>
         <formalpara role="parameter">
            <title>location</title>
            <para>the bundle location</para>
         </formalpara>
         <para role="description">
Set the bundle location the configuration is bound to
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="update(String,javax.management.openmbean.TabularData)" xml:id="org.osgi.jmx.service.cm.ConfigurationAdminMBean.update-String-javax.management.openmbean.TabularData-">
         <title>public void update(String pid,TabularData properties) throws IOException</title>
         <formalpara role="parameter">
            <title>pid</title>
            <para>the persistent identifier of the configuration</para>
         </formalpara>
         <formalpara role="parameter">
            <title>properties</title>
            <para>the table of properties</para>
         </formalpara>
         <para role="description">
Update the configuration with the supplied properties For each property
 entry, the following row is supplied.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.JmxConstants.PROPERTIES_TYPE">JmxConstants.PROPERTIES_TYPE for the
      details of the TabularType</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="updateForLocation(String,String,javax.management.openmbean.TabularData)" xml:id="org.osgi.jmx.service.cm.ConfigurationAdminMBean.updateForLocation-String-String-javax.management.openmbean.TabularData-">
         <title>public void updateForLocation(String pid,String location,TabularData properties) throws IOException</title>
         <formalpara role="parameter">
            <title>pid</title>
            <para>the persistent identifier of the configuration</para>
         </formalpara>
         <formalpara role="parameter">
            <title>location</title>
            <para>the bundle location</para>
         </formalpara>
         <formalpara role="parameter">
            <title>properties</title>
            <para>the table of properties</para>
         </formalpara>
         <para role="description">
Update the configuration with the supplied properties For each property
 entry, the following row is supplied.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.JmxConstants.PROPERTIES_TYPE">JmxConstants.PROPERTIES_TYPE for the
      details of the TabularType</link>
            </para>
         </formalpara>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.jmx.service.permissionadmin" xml:id="org.osgi.jmx.service.permissionadmin" xml:base="../../generated/javadoc/docbook/org.osgi.jmx.service.permissionadmin.xml">
   <title>org.osgi.jmx.service.permissionadmin</title>
   <info>
      <releaseinfo xml:id="org.osgi.jmx.service.permissionadmin-version">Version 1.2</releaseinfo>
      <edition xml:id="org.osgi.jmx.service.permissionadmin-version.number">1.2</edition>
   </info>
   <para>
OSGi JMX Permission Admin Package Version 1.2.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.jmx.service.permissionadmin; version="[1.2,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.jmx.service.permissionadmin; version="[1.2,1.3)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.jmx.service.permissionadmin.PermissionAdminMBean">
                  <code>PermissionAdminMBean</code>
               </link> - 
This MBean represents the OSGi Permission Manager Service
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="PermissionAdminMBean" xml:id="org.osgi.jmx.service.permissionadmin.PermissionAdminMBean">
      <title>public interface PermissionAdminMBean</title>
      <para>
This MBean represents the OSGi Permission Manager Service
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="OBJECTNAME" xml:id="org.osgi.jmx.service.permissionadmin.PermissionAdminMBean.OBJECTNAME">
         <title>public static final String OBJECTNAME = "osgi.core:service=permissionadmin,version=1.2"</title>
         <para>
Permission Admin MBean object name.
   </para>
      </section>
      <section role="method" xreflabel="getPermissions(String)" xml:id="org.osgi.jmx.service.permissionadmin.PermissionAdminMBean.getPermissions-String-">
         <title>public String[] getPermissions(String location) throws IOException</title>
         <formalpara role="parameter">
            <title>location</title>
            <para>location identifying the bundle</para>
         </formalpara>
         <para role="description">
Answer the list of encoded permissions of the bundle specified by the
 bundle location
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the array of String encoded permissions</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="listDefaultPermissions()" xml:id="org.osgi.jmx.service.permissionadmin.PermissionAdminMBean.listDefaultPermissions--">
         <title>public String[] listDefaultPermissions() throws IOException</title>
         <para role="description">
Answer the list of encoded permissions representing the default
 permissions assigned to bundle locations that have no assigned
 permissions
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the array of String encoded permissions</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="listLocations()" xml:id="org.osgi.jmx.service.permissionadmin.PermissionAdminMBean.listLocations--">
         <title>public String[] listLocations() throws IOException</title>
         <para role="description">
Answer the bundle locations that have permissions assigned to them
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the bundle locations</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setDefaultPermissions(String[])" xml:id="org.osgi.jmx.service.permissionadmin.PermissionAdminMBean.setDefaultPermissions-String---">
         <title>public void setDefaultPermissions(String[] encodedPermissions) throws IOException</title>
         <formalpara role="parameter">
            <title>encodedPermissions</title>
            <para>the string encoded permissions</para>
         </formalpara>
         <para role="description">
Set the default permissions assigned to bundle locations that have no
 assigned permissions
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setPermissions(String,String[])" xml:id="org.osgi.jmx.service.permissionadmin.PermissionAdminMBean.setPermissions-String-String---">
         <title>public void setPermissions(String location,String[] encodedPermissions) throws IOException</title>
         <formalpara role="parameter">
            <title>location</title>
            <para>the location of the bundle</para>
         </formalpara>
         <formalpara role="parameter">
            <title>encodedPermissions</title>
            <para>the string encoded permissions to set</para>
         </formalpara>
         <para role="description">
Set the permissions on the bundle specified by the bundle location
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.jmx.service.provisioning" xml:id="org.osgi.jmx.service.provisioning" xml:base="../../generated/javadoc/docbook/org.osgi.jmx.service.provisioning.xml">
   <title>org.osgi.jmx.service.provisioning</title>
   <info>
      <releaseinfo xml:id="org.osgi.jmx.service.provisioning-version">Version 1.2</releaseinfo>
      <edition xml:id="org.osgi.jmx.service.provisioning-version.number">1.2</edition>
   </info>
   <para>
OSGi JMX Initial Provisioning Package Version 1.2.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.jmx.service.provisioning; version="[1.2,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.jmx.service.provisioning; version="[1.2,1.3)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.jmx.service.provisioning.ProvisioningServiceMBean">
                  <code>ProvisioningServiceMBean</code>
               </link> - 
This MBean represents the management interface to the OSGi Initial
 Provisioning Service
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="ProvisioningServiceMBean" xml:id="org.osgi.jmx.service.provisioning.ProvisioningServiceMBean">
      <title>public interface ProvisioningServiceMBean</title>
      <para>
This MBean represents the management interface to the OSGi Initial
 Provisioning Service
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="OBJECTNAME" xml:id="org.osgi.jmx.service.provisioning.ProvisioningServiceMBean.OBJECTNAME">
         <title>public static final String OBJECTNAME = "osgi.compendium:service=provisioning,version=1.2"</title>
         <para>
Provisioning MBean object name.
   </para>
      </section>
      <section role="method" xreflabel="addInformation(javax.management.openmbean.TabularData)" xml:id="org.osgi.jmx.service.provisioning.ProvisioningServiceMBean.addInformation-javax.management.openmbean.TabularData-">
         <title>public void addInformation(TabularData info) throws IOException</title>
         <formalpara role="parameter">
            <title>info</title>
            <para>the set of Provisioning Information key/value pairs to add to
        the Provisioning Information dictionary. Any keys are values that
        are of an invalid type will be silently ignored.</para>
         </formalpara>
         <para role="description">
Adds the key/value pairs contained in <code>info</code> to the Provisioning
 Information dictionary. This method causes the
 <code>PROVISIONING_UPDATE_COUNT</code> to be incremented.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.JmxConstants.PROPERTIES_TYPE">JmxConstants.PROPERTIES_TYPE for
      details of the Tabular Data</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="addInformationFromZip(String)" xml:id="org.osgi.jmx.service.provisioning.ProvisioningServiceMBean.addInformationFromZip-String-">
         <title>public void addInformationFromZip(String zipURL) throws IOException</title>
         <formalpara role="parameter">
            <title>zipURL</title>
            <para>the String form of the URL that will be resolved into a
        <code>ZipInputStream</code> which will be used to add key/value pairs
        to the Provisioning Information dictionary and install and start
        bundles. If a <code>ZipEntry</code> does not have an <code>Extra</code>
        field that corresponds to one of the four defined MIME types (
        <code>MIME_STRING</code>, <code>MIME_BYTE_ARRAY</code>,<code>MIME_BUNDLE</code>,
        and <code>MIME_BUNDLE_URL</code>) in will be silently ignored.</para>
         </formalpara>
         <para role="description">
Processes the <code>ZipInputStream</code> contents of the provided zipURL and
 extracts information to add to the Provisioning Information dictionary,
 as well as, install/update and start bundles. This method causes the
 <code>PROVISIONING_UPDATE_COUNT</code> to be incremented.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if an error occurs while processing the
         ZipInputStream of the URL. No additions will be made to the
         Provisioning Information dictionary and no bundles must be
         started or installed.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="listInformation()" xml:id="org.osgi.jmx.service.provisioning.ProvisioningServiceMBean.listInformation--">
         <title>public TabularData listInformation() throws IOException</title>
         <para role="description">
Returns a table representing the Provisioning Information Dictionary.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The table representing the manager dictionary.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.JmxConstants.PROPERTIES_TYPE">JmxConstants.PROPERTIES_TYPE for
      details of the Tabular Data</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setInformation(javax.management.openmbean.TabularData)" xml:id="org.osgi.jmx.service.provisioning.ProvisioningServiceMBean.setInformation-javax.management.openmbean.TabularData-">
         <title>public void setInformation(TabularData info) throws IOException</title>
         <formalpara role="parameter">
            <title>info</title>
            <para>the new set of Provisioning Information key/value pairs. Any
        keys are values that are of an invalid type will be silently
        ignored.</para>
         </formalpara>
         <para role="description">
Replaces the Provisioning Information dictionary with the entries of the
 supplied table. This method causes the <code>PROVISIONING_UPDATE_COUNT</code>
 to be incremented.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.JmxConstants.PROPERTIES_TYPE">JmxConstants.PROPERTIES_TYPE for
      details of the Tabular Data</link>
            </para>
         </formalpara>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.jmx.service.useradmin" xml:id="org.osgi.jmx.service.useradmin" xml:base="../../generated/javadoc/docbook/org.osgi.jmx.service.useradmin.xml">
   <title>org.osgi.jmx.service.useradmin</title>
   <info>
      <releaseinfo xml:id="org.osgi.jmx.service.useradmin-version">Version 1.1</releaseinfo>
      <edition xml:id="org.osgi.jmx.service.useradmin-version.number">1.1</edition>
   </info>
   <para>
OSGi JMX User Admin Package Version 1.1.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.jmx.service.useradmin; version="[1.1,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.jmx.service.useradmin; version="[1.1,1.2)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean">
                  <code>UserAdminMBean</code>
               </link> - 
This MBean provides the management interface to the OSGi User Manager Service
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="UserAdminMBean" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean">
      <title>public interface UserAdminMBean</title>
      <para>
This MBean provides the management interface to the OSGi User Manager Service
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="AUTORIZATION_TYPE" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.AUTORIZATION_TYPE">
         <title>public static final CompositeType AUTORIZATION_TYPE</title>
         <para>
The Composite Type for an Authorization object. It consists of the
 <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.NAME_ITEM">NAME_ITEM</link> and <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.ROLES_ITEM">ROLES_ITEM</link> items.
   </para>
      </section>
      <section role="field" xreflabel="CREDENTIALS" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.CREDENTIALS">
         <title>public static final String CREDENTIALS = "Credentials"</title>
         <para>
The CREDENTIALS key, used in <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.CREDENTIALS_ITEM">CREDENTIALS_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="CREDENTIALS_ITEM" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.CREDENTIALS_ITEM">
         <title>public static final Item CREDENTIALS_ITEM</title>
         <para>
The item containing the credentials of a user. The key is
 <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.CREDENTIALS">CREDENTIALS</link> and the type is <link linkend="org.osgi.jmx.JmxConstants.PROPERTIES_TYPE">JmxConstants.PROPERTIES_TYPE</link>
 .
   </para>
      </section>
      <section role="field" xreflabel="GROUP_TYPE" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.GROUP_TYPE">
         <title>public static final CompositeType GROUP_TYPE</title>
         <para>
The Composite Type for a Group. It extends <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.USER_TYPE">USER_TYPE</link> and adds
 <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.MEMBERS_ITEM">MEMBERS_ITEM</link>, and <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.REQUIRED_MEMBERS_ITEM">REQUIRED_MEMBERS_ITEM</link>.
 
 This type extends the <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.USER_TYPE">USER_TYPE</link>. It adds:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.MEMBERS">MEMBERS</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.REQUIRED_MEMBERS">REQUIRED_MEMBERS</link>
               </para>
            </listitem>
         </itemizedlist>
         <para>
 If there are no members or required members an empty array is returned in
 the respective items.
   </para>
      </section>
      <section role="field" xreflabel="MEMBERS" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.MEMBERS">
         <title>public static final String MEMBERS = "Members"</title>
         <para>
The MEMBERS key, used in <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.MEMBERS_ITEM">MEMBERS_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="MEMBERS_ITEM" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.MEMBERS_ITEM">
         <title>public static final Item MEMBERS_ITEM</title>
         <para>
The item containing the members of a group. The key is <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.MEMBERS">MEMBERS</link>
 and the type is <link linkend="org.osgi.jmx.JmxConstants.STRING_ARRAY_TYPE">JmxConstants.STRING_ARRAY_TYPE</link>. It is used in
 <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.GROUP_TYPE">GROUP_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="NAME" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.NAME">
         <title>public static final String NAME = "Name"</title>
         <para>
The key NAME, used in <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.NAME_ITEM">NAME_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="NAME_ITEM" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.NAME_ITEM">
         <title>public static final Item NAME_ITEM</title>
         <para>
The item for the user name for an authorization object. The key is
 <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.NAME">NAME</link> and the type is SimpleType.STRING.
   </para>
      </section>
      <section role="field" xreflabel="OBJECTNAME" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.OBJECTNAME">
         <title>public static final String OBJECTNAME = "osgi.compendium:service=useradmin,version=1.1"</title>
         <para>
User Admin MBean object name.
   </para>
      </section>
      <section role="field" xreflabel="PROPERTIES" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.PROPERTIES">
         <title>public static final String PROPERTIES = "Properties"</title>
         <para>
The PROPERTIES key, used in <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.PROPERTIES_ITEM">PROPERTIES_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="PROPERTIES_ITEM" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.PROPERTIES_ITEM">
         <title>public static final Item PROPERTIES_ITEM</title>
         <para>
The item containing the properties of a Role. The key is
 <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.PROPERTIES">PROPERTIES</link> and the type is <link linkend="org.osgi.jmx.JmxConstants.PROPERTIES_TYPE">JmxConstants.PROPERTIES_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="REQUIRED_MEMBERS" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.REQUIRED_MEMBERS">
         <title>public static final String REQUIRED_MEMBERS = "RequiredMembers"</title>
         <para>
The REQUIRED_MEMBERS key, used in <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.REQUIRED_MEMBERS_ITEM">REQUIRED_MEMBERS_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="REQUIRED_MEMBERS_ITEM" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.REQUIRED_MEMBERS_ITEM">
         <title>public static final Item REQUIRED_MEMBERS_ITEM</title>
         <para>
The item containing the required members of a group. The key is
 <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.REQUIRED_MEMBERS">REQUIRED_MEMBERS</link> and the type is
 <link linkend="org.osgi.jmx.JmxConstants.STRING_ARRAY_TYPE">JmxConstants.STRING_ARRAY_TYPE</link>. It is used in <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.GROUP_TYPE">GROUP_TYPE</link>
 .
   </para>
      </section>
      <section role="field" xreflabel="ROLE_TYPE" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.ROLE_TYPE">
         <title>public static final CompositeType ROLE_TYPE</title>
         <para>
The Composite Type for a Role. It contains the following items:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.NAME">NAME</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.TYPE">TYPE</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.PROPERTIES">PROPERTIES</link>
               </para>
            </listitem>
         </itemizedlist>
      </section>
      <section role="field" xreflabel="ROLES" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.ROLES">
         <title>public static final String ROLES = "Roles"</title>
         <para>
The key ROLES, used in <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.ROLES_ITEM">ROLES_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="ROLES_ITEM" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.ROLES_ITEM">
         <title>public static final Item ROLES_ITEM</title>
         <para>
The item containing the roles for this authorization object. The key is
 <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.ROLES">ROLES</link>. and the type is <link linkend="org.osgi.jmx.JmxConstants.STRING_ARRAY_TYPE">JmxConstants.STRING_ARRAY_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="TYPE" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.TYPE">
         <title>public static final String TYPE = "Type"</title>
         <para>
The Role TYPE key, used in <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.TYPE_ITEM">TYPE_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="TYPE_ITEM" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.TYPE_ITEM">
         <title>public static final Item TYPE_ITEM</title>
         <para>
The item containing the type of the roles encapsulated by this
 authorization object. The key is <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.TYPE">TYPE</link> and the type is
 SimpleType.INTEGER.
   </para>
      </section>
      <section role="field" xreflabel="USER_TYPE" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.USER_TYPE">
         <title>public static final CompositeType USER_TYPE</title>
         <para>
A Composite Type for a User. A User contains its Role description and
 adds the credentials. It extends <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.ROLE_TYPE">ROLE_TYPE</link> and adds
 <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.CREDENTIALS_ITEM">CREDENTIALS_ITEM</link>.
 
 This type extends the <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.ROLE_TYPE">ROLE_TYPE</link>. It adds:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.CREDENTIALS">CREDENTIALS</link>
               </para>
            </listitem>
         </itemizedlist>
      </section>
      <section role="method" xreflabel="addCredential(String,byte[],String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.addCredential-String-byte---String-">
         <title>public void addCredential(String key,byte[] value,String username) throws IOException</title>
         <formalpara role="parameter">
            <title>key</title>
            <para>The key of the credential to add</para>
         </formalpara>
         <formalpara role="parameter">
            <title>value</title>
            <para>The value of the credential to add</para>
         </formalpara>
         <formalpara role="parameter">
            <title>username</title>
            <para>The name of the user that gets the credential.</para>
         </formalpara>
         <para role="description">
Add credentials to a user, associated with the supplied key
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the username is not a User   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="addCredentialString(String,String,String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.addCredentialString-String-String-String-">
         <title>public void addCredentialString(String key,String value,String username) throws IOException</title>
         <formalpara role="parameter">
            <title>key</title>
            <para>The key of the credential to add</para>
         </formalpara>
         <formalpara role="parameter">
            <title>value</title>
            <para>The value of the credential to add</para>
         </formalpara>
         <formalpara role="parameter">
            <title>username</title>
            <para>The name of the user that gets the credential.</para>
         </formalpara>
         <para role="description">
Add credentials to a user, associated with the supplied key
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the username is not a User   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="addMember(String,String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.addMember-String-String-">
         <title>public boolean addMember(String groupname,String rolename) throws IOException</title>
         <formalpara role="parameter">
            <title>groupname</title>
            <para>The group name that receives the <code>rolename</code> as
        member.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>rolename</title>
            <para>The <code>rolename</code> (User or Group) that must be added.</para>
         </formalpara>
         <para role="description">
Add a member to the group.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the role was added to the group</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if an invalid group name or role name is
         specified   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="addProperty(String,byte[],String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.addProperty-String-byte---String-">
         <title>public void addProperty(String key,byte[] value,String rolename) throws IOException</title>
         <formalpara role="parameter">
            <title>key</title>
            <para>The added property key</para>
         </formalpara>
         <formalpara role="parameter">
            <title>value</title>
            <para>The added byte[] property value</para>
         </formalpara>
         <formalpara role="parameter">
            <title>rolename</title>
            <para>The role name that receives the property</para>
         </formalpara>
         <para role="description">
Add or update a property on a role.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if an invalid role name is specified   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="addPropertyString(String,String,String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.addPropertyString-String-String-String-">
         <title>public void addPropertyString(String key,String value,String rolename) throws IOException</title>
         <formalpara role="parameter">
            <title>key</title>
            <para>The key of the property to add</para>
         </formalpara>
         <formalpara role="parameter">
            <title>value</title>
            <para>The value of the property to add (<code>String</code>)</para>
         </formalpara>
         <formalpara role="parameter">
            <title>rolename</title>
            <para>The role name</para>
         </formalpara>
         <para role="description">
Add or update a property on a role
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if an invalid role name is specified   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="addRequiredMember(String,String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.addRequiredMember-String-String-">
         <title>public boolean addRequiredMember(String groupname,String rolename) throws IOException</title>
         <formalpara role="parameter">
            <title>groupname</title>
            <para>The group name that is addded</para>
         </formalpara>
         <formalpara role="parameter">
            <title>rolename</title>
            <para>The role that</para>
         </formalpara>
         <para role="description">
Add a required member to the group
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if the role was added to the group</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if an invalid group name or role name is
         specified   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="createGroup(String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.createGroup-String-">
         <title>public void createGroup(String name) throws IOException</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>Name of the group to create</para>
         </formalpara>
         <para role="description">
Create a Group
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="createRole(String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.createRole-String-">
         <title>public void createRole(String name) throws IOException</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>Ignored.</para>
         </formalpara>
         <para role="description">
This method was specified in error and must not be used.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– This method will throw an exception if called.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>This method was specified in error. It does not function and
             must not be used. Use either <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.createUser-String-">createUser(String)</link> or
             <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.createGroup-String-">createGroup(String)</link>.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="createUser(String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.createUser-String-">
         <title>public void createUser(String name) throws IOException</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>Name of the user to create</para>
         </formalpara>
         <para role="description">
Create a User
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getAuthorization(String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.getAuthorization-String-">
         <title>public CompositeData getAuthorization(String user) throws IOException</title>
         <formalpara role="parameter">
            <title>user</title>
            <para>The user name</para>
         </formalpara>
         <para role="description">
Answer the authorization for the user name.
 
 The Composite Data is typed by <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.AUTORIZATION_TYPE">AUTORIZATION_TYPE</link>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the Authorization typed by <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.AUTORIZATION_TYPE">AUTORIZATION_TYPE</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the user name is not a User   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getCredentials(String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.getCredentials-String-">
         <title>public TabularData getCredentials(String username) throws IOException</title>
         <formalpara role="parameter">
            <title>username</title>
            <para>The user name</para>
         </formalpara>
         <para role="description">
Answer the credentials associated with a user.
 
 The returned Tabular Data is typed by
 <link linkend="org.osgi.jmx.JmxConstants.PROPERTIES_TYPE">JmxConstants.PROPERTIES_TYPE</link>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the credentials associated with the user, see
         <link linkend="org.osgi.jmx.JmxConstants.PROPERTIES_TYPE">JmxConstants.PROPERTIES_TYPE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the user name is not a User   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getGroup(String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.getGroup-String-">
         <title>public CompositeData getGroup(String groupname) throws IOException</title>
         <formalpara role="parameter">
            <title>groupname</title>
            <para>The group name</para>
         </formalpara>
         <para role="description">
Answer the Group associated with the group name.
 
 The returned Composite Data is typed by <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.GROUP_TYPE">GROUP_TYPE</link>
         </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the Group, see <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.GROUP_TYPE">GROUP_TYPE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the group name is not a Group   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getGroups(String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.getGroups-String-">
         <title>public String[] getGroups(String filter) throws IOException</title>
         <formalpara role="parameter">
            <title>filter</title>
            <para>The filter to apply</para>
         </formalpara>
         <para role="description">
Answer the list of group names
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The list of group names</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getImpliedRoles(String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.getImpliedRoles-String-">
         <title>public String[] getImpliedRoles(String username) throws IOException</title>
         <formalpara role="parameter">
            <title>username</title>
            <para>The name of the user that has the implied roles</para>
         </formalpara>
         <para role="description">
Answer the list of implied roles for a user
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The list of role names</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the username is not a User   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMembers(String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.getMembers-String-">
         <title>public String[] getMembers(String groupname) throws IOException</title>
         <formalpara role="parameter">
            <title>groupname</title>
            <para>The name of the group to get the members from</para>
         </formalpara>
         <para role="description">
Answer the the user names which are members of the group
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The list of user names</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the groupname is not a Group   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getProperties(String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.getProperties-String-">
         <title>public TabularData getProperties(String rolename) throws IOException</title>
         <formalpara role="parameter">
            <title>rolename</title>
            <para>The name of the role to get properties from</para>
         </formalpara>
         <para role="description">
Answer the properties associated with a role.
 
 The returned Tabular Data is typed by
 <link linkend="org.osgi.jmx.JmxConstants.PROPERTIES_TYPE">JmxConstants.PROPERTIES_TYPE</link>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the properties associated with the role, see
         <link linkend="org.osgi.jmx.JmxConstants.PROPERTIES_TYPE">JmxConstants.PROPERTIES_TYPE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the rolename is not a role   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRequiredMembers(String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.getRequiredMembers-String-">
         <title>public String[] getRequiredMembers(String groupname) throws IOException</title>
         <formalpara role="parameter">
            <title>groupname</title>
            <para>The name of the group to get the required members from</para>
         </formalpara>
         <para role="description">
Answer the list of user names which are required members of this group
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The list of user names</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the group name is not a Group   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRole(String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.getRole-String-">
         <title>public CompositeData getRole(String name) throws IOException</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the role to get the data from</para>
         </formalpara>
         <para role="description">
Answer the role associated with a name.
 
 The returned Composite Data is typed by <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.ROLE_TYPE">ROLE_TYPE</link>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the Role, see <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.ROLE_TYPE">ROLE_TYPE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the name is not a role   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRoles(String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.getRoles-String-">
         <title>public String[] getRoles(String filter) throws IOException</title>
         <formalpara role="parameter">
            <title>filter</title>
            <para>The string representation of the
        <code>org.osgi.framework.Filter</code> that is used to filter the roles
        by applying to the properties, if <code>null</code> all roles are
        returned.</para>
         </formalpara>
         <para role="description">
Answer the list of role names which match the supplied filter
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The list the role names</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getUser(String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.getUser-String-">
         <title>public CompositeData getUser(String username) throws IOException</title>
         <formalpara role="parameter">
            <title>username</title>
            <para>The name of the requested user</para>
         </formalpara>
         <para role="description">
Answer the User associated with the user name.
 
 The returned Composite Data is typed by <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.USER_TYPE">USER_TYPE</link>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The User, see <link linkend="org.osgi.jmx.service.useradmin.UserAdminMBean.USER_TYPE">USER_TYPE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the username is not a User   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getUsers(String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.getUsers-String-">
         <title>public String[] getUsers(String filter) throws IOException</title>
         <formalpara role="parameter">
            <title>filter</title>
            <para>The filter to apply</para>
         </formalpara>
         <para role="description">
Answer the list of user names in the User Admin database
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The list of user names</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getUserWithProperty(String,String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.getUserWithProperty-String-String-">
         <title>public String getUserWithProperty(String key,String value) throws IOException</title>
         <formalpara role="parameter">
            <title>key</title>
            <para>The key to compare</para>
         </formalpara>
         <formalpara role="parameter">
            <title>value</title>
            <para>The value to compare</para>
         </formalpara>
         <para role="description">
Answer the user name with the given property key-value pair from the User
 Admin service database.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The User</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="listGroups()" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.listGroups--">
         <title>public String[] listGroups() throws IOException</title>
         <para role="description">
Answer the list of group names
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The list of group names</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="listRoles()" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.listRoles--">
         <title>public String[] listRoles() throws IOException</title>
         <para role="description">
Answer the list of role names in the User Admin database
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The list of role names</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="listUsers()" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.listUsers--">
         <title>public String[] listUsers() throws IOException</title>
         <para role="description">
Answer the list of user names in the User Admin database
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The list of user names</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="removeCredential(String,String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.removeCredential-String-String-">
         <title>public void removeCredential(String key,String username) throws IOException</title>
         <formalpara role="parameter">
            <title>key</title>
            <para>The key of the credential to remove</para>
         </formalpara>
         <formalpara role="parameter">
            <title>username</title>
            <para>The name of the user for which the credential must be
        removed</para>
         </formalpara>
         <para role="description">
Remove the credential associated with the given user
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the username is not a User   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="removeGroup(String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.removeGroup-String-">
         <title>public boolean removeGroup(String name) throws IOException</title>
         <formalpara role="parameter">
            <title>name</title>
            <para/>
         </formalpara>
         <para role="description">
Remove the Group associated with the name
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if the remove succeeded</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the name is not a Group   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="removeMember(String,String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.removeMember-String-String-">
         <title>public boolean removeMember(String groupname,String rolename) throws IOException</title>
         <formalpara role="parameter">
            <title>groupname</title>
            <para>The group name</para>
         </formalpara>
         <formalpara role="parameter">
            <title>rolename</title>
            <para/>
         </formalpara>
         <para role="description">
Remove a role from the group
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if the role was removed from the group</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the groupname is not a Group   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="removeProperty(String,String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.removeProperty-String-String-">
         <title>public void removeProperty(String key,String rolename) throws IOException</title>
         <formalpara role="parameter">
            <title>key</title>
            <para/>
         </formalpara>
         <formalpara role="parameter">
            <title>rolename</title>
            <para/>
         </formalpara>
         <para role="description">
Remove a property from a role
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the rolename is not a role   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="removeRole(String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.removeRole-String-">
         <title>public boolean removeRole(String name) throws IOException</title>
         <formalpara role="parameter">
            <title>name</title>
            <para/>
         </formalpara>
         <para role="description">
Remove the Role associated with the name
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if the remove succeeded</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the name is not a role   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="removeUser(String)" xml:id="org.osgi.jmx.service.useradmin.UserAdminMBean.removeUser-String-">
         <title>public boolean removeUser(String name) throws IOException</title>
         <formalpara role="parameter">
            <title>name</title>
            <para/>
         </formalpara>
         <para role="description">
Remove the User associated with the name
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if the remove succeeded</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the operation fails   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– if the name is not a User   </para>
         </formalpara>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.jmx.framework.wiring" xml:id="org.osgi.jmx.framework.wiring" xml:base="../../generated/javadoc/docbook/org.osgi.jmx.framework.wiring.xml">
   <title>org.osgi.jmx.framework.wiring</title>
   <info>
      <releaseinfo xml:id="org.osgi.jmx.framework.wiring-version">Version 1.1</releaseinfo>
      <edition xml:id="org.osgi.jmx.framework.wiring-version.number">1.1</edition>
   </info>
   <para>
OSGi JMX Framework Wiring Package Version 1.1.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.jmx.framework.wiring; version="[1.1,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.jmx.framework.wiring; version="[1.1,1.2)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean">
                  <code>BundleWiringStateMBean</code>
               </link> - 
This MBean represents the bundle wiring state.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="BundleWiringStateMBean" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean">
      <title>public interface BundleWiringStateMBean</title>
      <para>
This MBean represents the bundle wiring state.
 </para>
      <para>
 It can be used to retrieve the declared capabilities, declared requirements,
 and wiring for the current and past revisions of bundles.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="ATTRIBUTES" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.ATTRIBUTES">
         <title>public static final String ATTRIBUTES = "Attributes"</title>
         <para>
The key of <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.ATTRIBUTES_ITEM">ATTRIBUTES_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="ATTRIBUTES_ITEM" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.ATTRIBUTES_ITEM">
         <title>public static final Item ATTRIBUTES_ITEM</title>
         <para>
The item containing the attributes of a capability or requirement. Used
 in <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_REQUIREMENT_TYPE">BUNDLE_REQUIREMENT_TYPE</link> and <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_CAPABILITY_TYPE">BUNDLE_CAPABILITY_TYPE</link>.
 The key is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.ATTRIBUTES">ATTRIBUTES</link> and the type is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.ATTRIBUTES_TYPE">ATTRIBUTES_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="ATTRIBUTES_TYPE" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.ATTRIBUTES_TYPE">
         <title>public static final TabularType ATTRIBUTES_TYPE</title>
         <para>
The Tabular Type that holds the attributes for a capability or
 requirements. The row type is <link linkend="org.osgi.jmx.JmxConstants.PROPERTY_TYPE">JmxConstants.PROPERTY_TYPE</link> and the
 index is <link linkend="org.osgi.jmx.JmxConstants.KEY">JmxConstants.KEY</link>.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE_CAPABILITY" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_CAPABILITY">
         <title>public static final String BUNDLE_CAPABILITY = "BundleCapability"</title>
         <para>
The key of <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_CAPABILITY_ITEM">BUNDLE_CAPABILITY_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE_CAPABILITY_ITEM" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_CAPABILITY_ITEM">
         <title>public static final Item BUNDLE_CAPABILITY_ITEM</title>
         <para>
The item containing a capability for a bundle in
 <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_WIRE_TYPE">BUNDLE_WIRE_TYPE</link>. The key is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_CAPABILITY">BUNDLE_CAPABILITY</link> and the
 type is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_CAPABILITY_TYPE">BUNDLE_CAPABILITY_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE_CAPABILITY_TYPE" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_CAPABILITY_TYPE">
         <title>public static final CompositeType BUNDLE_CAPABILITY_TYPE</title>
         <para>
The Composite Type that represents the capability of a bundle.
 
 The composite consists of:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.NAMESPACE">NAMESPACE</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.ATTRIBUTES">ATTRIBUTES</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.DIRECTIVES">DIRECTIVES</link>
               </para>
            </listitem>
         </itemizedlist>
      </section>
      <section role="field" xreflabel="BUNDLE_ID" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_ID">
         <title>public static final String BUNDLE_ID = "BundleId"</title>
         <para>
The key of <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_ID_ITEM">BUNDLE_ID_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE_ID_ITEM" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_ID_ITEM">
         <title>public static final Item BUNDLE_ID_ITEM</title>
         <para>
The item containing a bundle ID. They key is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_ID">BUNDLE_ID</link> and the
 type is a long.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE_REQUIREMENT" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_REQUIREMENT">
         <title>public static final String BUNDLE_REQUIREMENT = "BundleRequirement"</title>
         <para>
The key of <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_REQUIREMENT_ITEM">BUNDLE_REQUIREMENT_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE_REQUIREMENT_ITEM" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_REQUIREMENT_ITEM">
         <title>public static final Item BUNDLE_REQUIREMENT_ITEM</title>
         <para>
The item containing a requirement for a bundle in
 <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_WIRE_TYPE">BUNDLE_WIRE_TYPE</link>. The key is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_REQUIREMENT">BUNDLE_REQUIREMENT</link> and the
 type is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_REQUIREMENT_TYPE">BUNDLE_REQUIREMENT_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE_REQUIREMENT_TYPE" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_REQUIREMENT_TYPE">
         <title>public static final CompositeType BUNDLE_REQUIREMENT_TYPE</title>
         <para>
The Composite Type that represents the requirement of a bundle.
 
 The composite consists of:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.NAMESPACE">NAMESPACE</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.ATTRIBUTES">ATTRIBUTES</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.DIRECTIVES">DIRECTIVES</link>
               </para>
            </listitem>
         </itemizedlist>
      </section>
      <section role="field" xreflabel="BUNDLE_REVISION_ID" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_REVISION_ID">
         <title>public static final String BUNDLE_REVISION_ID = "BundleRevisionId"</title>
         <para>
The key of <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_REVISION_ID_ITEM">BUNDLE_REVISION_ID_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE_REVISION_ID_ITEM" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_REVISION_ID_ITEM">
         <title>public static final Item BUNDLE_REVISION_ID_ITEM</title>
         <para>
The item containing a bundle revision ID. A bundle revision ID is always
 local to the result of a JMX invocation and do not have a defined meaning
 across invocation calls. They are used where a result can potentially
 contain multiple revisions of the same bundle. The key is
 <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_REVISION_ID">BUNDLE_REVISION_ID</link> and the type is an integer.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE_WIRE_TYPE" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_WIRE_TYPE">
         <title>public static final CompositeType BUNDLE_WIRE_TYPE</title>
         <para>
The Composite type that represents a bundle wire describing the live
 association between a provider of a capability and a requirer of the
 corresponding requirement.
 </para>
         <para/>
         <para>
 The composite consists of:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_REQUIREMENT">BUNDLE_REQUIREMENT</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_CAPABILITY">BUNDLE_CAPABILITY</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.PROVIDER_BUNDLE_ID">PROVIDER_BUNDLE_ID</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.PROVIDER_BUNDLE_REVISION_ID">PROVIDER_BUNDLE_REVISION_ID</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIRER_BUNDLE_ID">REQUIRER_BUNDLE_ID</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIRER_BUNDLE_REVISION_ID">REQUIRER_BUNDLE_REVISION_ID</link>
               </para>
            </listitem>
         </itemizedlist>
      </section>
      <section role="field" xreflabel="BUNDLE_WIRES_TYPE_ARRAY" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_WIRES_TYPE_ARRAY">
         <title>public static final ArrayType BUNDLE_WIRES_TYPE_ARRAY</title>
         <para>
An array of <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_WIRE_TYPE">BUNDLE_WIRE_TYPE</link>s.
   </para>
      </section>
      <section role="field" xreflabel="BUNDLE_WIRING_TYPE" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_WIRING_TYPE">
         <title>public static final CompositeType BUNDLE_WIRING_TYPE</title>
         <para>
The Composite Type that represents a bundle wiring. The composite
 consists of:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_ID">BUNDLE_ID</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_REVISION_ID">BUNDLE_REVISION_ID</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIREMENTS">REQUIREMENTS</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.CAPABILITIES">CAPABILITIES</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIRED_WIRES">REQUIRED_WIRES</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.PROVIDED_WIRES">PROVIDED_WIRES</link>
               </para>
            </listitem>
         </itemizedlist>
      </section>
      <section role="field" xreflabel="BUNDLES_WIRING_TYPE" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLES_WIRING_TYPE">
         <title>public static final TabularType BUNDLES_WIRING_TYPE</title>
         <para>
The Tabular Type to hold the wiring of a number of bundles. The row type
 is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_WIRING_TYPE">BUNDLE_WIRING_TYPE</link> and the index is the combination of the
 <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_ID">BUNDLE_ID</link> and the <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_REVISION_ID">BUNDLE_REVISION_ID</link>.
   </para>
      </section>
      <section role="field" xreflabel="CAPABILITIES" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.CAPABILITIES">
         <title>public static final String CAPABILITIES = "Capabilities"</title>
         <para>
The key of <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.CAPABILITIES_ITEM">CAPABILITIES_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="CAPABILITIES_ITEM" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.CAPABILITIES_ITEM">
         <title>public static final Item CAPABILITIES_ITEM</title>
         <para>
The item containing the capabilities in
 <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REVISION_CAPABILITIES_TYPE">REVISION_CAPABILITIES_TYPE</link> and <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_WIRING_TYPE">BUNDLE_WIRING_TYPE</link>. The
 key is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.CAPABILITIES">CAPABILITIES</link> and the type is
 <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.CAPABILITY_TYPE_ARRAY">CAPABILITY_TYPE_ARRAY</link>.
   </para>
      </section>
      <section role="field" xreflabel="CAPABILITY_TYPE_ARRAY" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.CAPABILITY_TYPE_ARRAY">
         <title>public static final ArrayType CAPABILITY_TYPE_ARRAY</title>
         <para>
An array of <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_CAPABILITY_TYPE">BUNDLE_CAPABILITY_TYPE</link>s.
   </para>
      </section>
      <section role="field" xreflabel="DIRECTIVE_TYPE" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.DIRECTIVE_TYPE">
         <title>public static final CompositeType DIRECTIVE_TYPE</title>
         <para>
The Composite Type that represents a directive for a capability or
 requirement. The composite consists of:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.KEY">KEY</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.VALUE">VALUE</link>
               </para>
            </listitem>
         </itemizedlist>
      </section>
      <section role="field" xreflabel="DIRECTIVES" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.DIRECTIVES">
         <title>public static final String DIRECTIVES = "Directives"</title>
         <para>
The key of <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.DIRECTIVES_ITEM">DIRECTIVES_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="DIRECTIVES_ITEM" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.DIRECTIVES_ITEM">
         <title>public static final Item DIRECTIVES_ITEM</title>
         <para>
The item containing the directives of a capability or requirement. Used
 in <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_REQUIREMENT_TYPE">BUNDLE_REQUIREMENT_TYPE</link> and <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_CAPABILITY_TYPE">BUNDLE_CAPABILITY_TYPE</link>.
 The key is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.DIRECTIVES">DIRECTIVES</link> and the type is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.DIRECTIVES_TYPE">DIRECTIVES_TYPE</link>.
   </para>
      </section>
      <section role="field" xreflabel="DIRECTIVES_TYPE" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.DIRECTIVES_TYPE">
         <title>public static final TabularType DIRECTIVES_TYPE</title>
         <para>
The Tabular Type that holds the directives for a capability or
 requirement. The row type is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.DIRECTIVE_TYPE">DIRECTIVE_TYPE</link> and the index is
 <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.KEY">KEY</link>.
   </para>
      </section>
      <section role="field" xreflabel="KEY" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.KEY">
         <title>public static final String KEY = "Key"</title>
         <para>
The key of <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.KEY_ITEM">KEY_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="KEY_ITEM" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.KEY_ITEM">
         <title>public static final Item KEY_ITEM</title>
         <para>
The item containing the key of a capability or requirement directive.
 Used in <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.DIRECTIVE_TYPE">DIRECTIVE_TYPE</link>. The key is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.KEY">KEY</link> and the type is
 a String.
   </para>
      </section>
      <section role="field" xreflabel="NAMESPACE" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.NAMESPACE">
         <title>public static final String NAMESPACE = "Namespace"</title>
         <para>
The key of <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.NAMESPACE_ITEM">NAMESPACE_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="NAMESPACE_ITEM" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.NAMESPACE_ITEM">
         <title>public static final Item NAMESPACE_ITEM</title>
         <para>
The item containing the namespace for a capability or requirement. Used
 in <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_REQUIREMENT_TYPE">BUNDLE_REQUIREMENT_TYPE</link> and <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_CAPABILITY_TYPE">BUNDLE_CAPABILITY_TYPE</link>.
 The key is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.NAMESPACE">NAMESPACE</link> and the type is a String.
   </para>
      </section>
      <section role="field" xreflabel="OBJECTNAME" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.OBJECTNAME">
         <title>public static final String OBJECTNAME = "osgi.core:type=wiringState,version=1.1"</title>
         <para>
The Object Name prefix for this mbean. The full object name also contains
 the framework name and uuid as properties.
   </para>
      </section>
      <section role="field" xreflabel="PROVIDED_WIRES" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.PROVIDED_WIRES">
         <title>public static final String PROVIDED_WIRES = "ProvidedWires"</title>
         <para>
The key of <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.PROVIDED_WIRES_ITEM">PROVIDED_WIRES_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="PROVIDED_WIRES_ITEM" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.PROVIDED_WIRES_ITEM">
         <title>public static final Item PROVIDED_WIRES_ITEM</title>
         <para>
The item containing the provided wires in <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_WIRING_TYPE">BUNDLE_WIRING_TYPE</link>.
 The key is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.PROVIDED_WIRES">PROVIDED_WIRES</link> and the type is
 <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_WIRES_TYPE_ARRAY">BUNDLE_WIRES_TYPE_ARRAY</link>.
   </para>
      </section>
      <section role="field" xreflabel="PROVIDER_BUNDLE_ID" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.PROVIDER_BUNDLE_ID">
         <title>public static final String PROVIDER_BUNDLE_ID = "ProviderBundleId"</title>
         <para>
The key of <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.PROVIDER_BUNDLE_ID_ITEM">PROVIDER_BUNDLE_ID_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="PROVIDER_BUNDLE_ID_ITEM" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.PROVIDER_BUNDLE_ID_ITEM">
         <title>public static final Item PROVIDER_BUNDLE_ID_ITEM</title>
         <para>
The item containing the provider bundle ID in <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_WIRE_TYPE">BUNDLE_WIRE_TYPE</link>.
 The key is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.PROVIDER_BUNDLE_ID">PROVIDER_BUNDLE_ID</link> and the type is a long.
   </para>
      </section>
      <section role="field" xreflabel="PROVIDER_BUNDLE_REVISION_ID" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.PROVIDER_BUNDLE_REVISION_ID">
         <title>public static final String PROVIDER_BUNDLE_REVISION_ID = "ProviderBundleRevisionId"</title>
         <para>
The key of <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.PROVIDER_BUNDLE_REVISION_ID_ITEM">PROVIDER_BUNDLE_REVISION_ID_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="PROVIDER_BUNDLE_REVISION_ID_ITEM" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.PROVIDER_BUNDLE_REVISION_ID_ITEM">
         <title>public static final Item PROVIDER_BUNDLE_REVISION_ID_ITEM</title>
         <para>
The local ID of a provider revision in <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_WIRE_TYPE">BUNDLE_WIRE_TYPE</link>. This ID
 is local to the result where it resides and has no defined meaning across
 multiple invocations. The key is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.PROVIDER_BUNDLE_REVISION_ID">PROVIDER_BUNDLE_REVISION_ID</link> and
 the type is an int.
   </para>
      </section>
      <section role="field" xreflabel="REQUIRED_WIRES" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIRED_WIRES">
         <title>public static final String REQUIRED_WIRES = "RequiredWires"</title>
         <para>
The key of <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIRED_WIRES_ITEM">REQUIRED_WIRES_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="REQUIRED_WIRES_ITEM" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIRED_WIRES_ITEM">
         <title>public static final Item REQUIRED_WIRES_ITEM</title>
         <para>
The item containing the required wires in <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_WIRING_TYPE">BUNDLE_WIRING_TYPE</link>.
 The key is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIRED_WIRES">REQUIRED_WIRES</link> and the type is
 <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_WIRES_TYPE_ARRAY">BUNDLE_WIRES_TYPE_ARRAY</link>.
   </para>
      </section>
      <section role="field" xreflabel="REQUIREMENT_TYPE_ARRAY" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIREMENT_TYPE_ARRAY">
         <title>public static final ArrayType REQUIREMENT_TYPE_ARRAY</title>
         <para>
An array of <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_REQUIREMENT_TYPE">BUNDLE_REQUIREMENT_TYPE</link>s.
   </para>
      </section>
      <section role="field" xreflabel="REQUIREMENTS" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIREMENTS">
         <title>public static final String REQUIREMENTS = "Requirements"</title>
         <para>
The key of <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIREMENTS_ITEM">REQUIREMENTS_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="REQUIREMENTS_ITEM" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIREMENTS_ITEM">
         <title>public static final Item REQUIREMENTS_ITEM</title>
         <para>
The item containing the requirements in
 <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REVISION_REQUIREMENTS_TYPE">REVISION_REQUIREMENTS_TYPE</link> and <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_WIRING_TYPE">BUNDLE_WIRING_TYPE</link>. The
 key is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIREMENTS">REQUIREMENTS</link> and the type is
 <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIREMENT_TYPE_ARRAY">REQUIREMENT_TYPE_ARRAY</link>.
   </para>
      </section>
      <section role="field" xreflabel="REQUIRER_BUNDLE_ID" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIRER_BUNDLE_ID">
         <title>public static final String REQUIRER_BUNDLE_ID = "RequirerBundleId"</title>
         <para>
The key of <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIRER_BUNDLE_ID_ITEM">REQUIRER_BUNDLE_ID_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="REQUIRER_BUNDLE_ID_ITEM" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIRER_BUNDLE_ID_ITEM">
         <title>public static final Item REQUIRER_BUNDLE_ID_ITEM</title>
         <para>
The item containing the requirer bundle ID in <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_WIRE_TYPE">BUNDLE_WIRE_TYPE</link>.
 The key is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIRER_BUNDLE_ID">REQUIRER_BUNDLE_ID</link> and the type is long.
   </para>
      </section>
      <section role="field" xreflabel="REQUIRER_BUNDLE_REVISION_ID" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIRER_BUNDLE_REVISION_ID">
         <title>public static final String REQUIRER_BUNDLE_REVISION_ID = "RequirerBundleRevisionId"</title>
         <para>
The key of <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIRER_BUNDLE_REVISION_ID_ITEM">REQUIRER_BUNDLE_REVISION_ID_ITEM</link>.
   </para>
      </section>
      <section role="field" xreflabel="REQUIRER_BUNDLE_REVISION_ID_ITEM" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIRER_BUNDLE_REVISION_ID_ITEM">
         <title>public static final Item REQUIRER_BUNDLE_REVISION_ID_ITEM</title>
         <para>
The local ID of a requirer revision in <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_WIRE_TYPE">BUNDLE_WIRE_TYPE</link>. This ID
 is local to the result where it resides and has no defined meaning across
 multiple invocations. The key is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIRER_BUNDLE_REVISION_ID">REQUIRER_BUNDLE_REVISION_ID</link> and
 the type is an int.
   </para>
      </section>
      <section role="field" xreflabel="REVISION_CAPABILITIES_TYPE" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REVISION_CAPABILITIES_TYPE">
         <title>public static final CompositeType REVISION_CAPABILITIES_TYPE</title>
         <para>
The Composite Type that represents the capabilities for a revision. The
 composite consists of:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_REVISION_ID">BUNDLE_REVISION_ID</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.CAPABILITIES">CAPABILITIES</link>
               </para>
            </listitem>
         </itemizedlist>
      </section>
      <section role="field" xreflabel="REVISION_REQUIREMENTS_TYPE" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REVISION_REQUIREMENTS_TYPE">
         <title>public static final CompositeType REVISION_REQUIREMENTS_TYPE</title>
         <para>
The Composite Type that represents the requirements of a revision. The
 composite consists of:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_REVISION_ID">BUNDLE_REVISION_ID</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIREMENTS">REQUIREMENTS</link>
               </para>
            </listitem>
         </itemizedlist>
      </section>
      <section role="field" xreflabel="REVISIONS_CAPABILITIES_TYPE" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REVISIONS_CAPABILITIES_TYPE">
         <title>public static final TabularType REVISIONS_CAPABILITIES_TYPE</title>
         <para>
The Tabular Type that holds the capabilities of a revision. The row type
 is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REVISION_CAPABILITIES_TYPE">REVISION_CAPABILITIES_TYPE</link> and the index is
 <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_REVISION_ID">BUNDLE_REVISION_ID</link>.
   </para>
      </section>
      <section role="field" xreflabel="REVISIONS_REQUIREMENTS_TYPE" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REVISIONS_REQUIREMENTS_TYPE">
         <title>public static final TabularType REVISIONS_REQUIREMENTS_TYPE</title>
         <para>
The Tabular Type that hold the requirements of a revision. The row type
 is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REVISION_REQUIREMENTS_TYPE">REVISION_REQUIREMENTS_TYPE</link> and the index is
 <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_REVISION_ID">BUNDLE_REVISION_ID</link>.
   </para>
      </section>
      <section role="field" xreflabel="VALUE" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.VALUE">
         <title>public static final String VALUE = "Value"</title>
         <para>
The key of <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.VALUE">VALUE</link>.
   </para>
      </section>
      <section role="field" xreflabel="VALUE_ITEM" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.VALUE_ITEM">
         <title>public static final Item VALUE_ITEM</title>
         <para>
The item containing the value of a capability or requirement directive.
 Used in <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.DIRECTIVE_TYPE">DIRECTIVE_TYPE</link>. They key is <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.VALUE">VALUE</link> and the type
 is a String.
   </para>
      </section>
      <section role="method" xreflabel="getCurrentRevisionDeclaredCapabilities(long,String)" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.getCurrentRevisionDeclaredCapabilities-long-String-">
         <title>public CompositeData[] getCurrentRevisionDeclaredCapabilities(long bundleId,String namespace) throws IOException, JMException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>The bundle ID.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the capabilities to be returned by this
        operation.</para>
         </formalpara>
         <para role="description">
Returns the capabilities for the current bundle revision.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the declared capabilities for the current revision of
         <code>bundleId</code> and <code>namespace</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>JMException</code>– if there is a JMX problem.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the connection could not be made because of a
         communication problem.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.CAPABILITY_TYPE_ARRAY">for the details of the CompositeData.</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getCurrentRevisionDeclaredRequirements(long,String)" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.getCurrentRevisionDeclaredRequirements-long-String-">
         <title>public CompositeData[] getCurrentRevisionDeclaredRequirements(long bundleId,String namespace) throws IOException, JMException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>The bundle ID.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the requirements to be returned by this
        operation.</para>
         </formalpara>
         <para role="description">
Returns the requirements for the current bundle revision.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the declared requirements for the current revision of
         <code>bundleId</code> and <code>namespace</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>JMException</code>– if there is a JMX problem.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the connection could not be made because of a
         communication problem.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REQUIREMENT_TYPE_ARRAY">for the details of the CompositeData.</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getCurrentWiring(long,String)" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.getCurrentWiring-long-String-">
         <title>public CompositeData getCurrentWiring(long bundleId,String namespace) throws IOException, JMException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>The bundle ID.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the requirements and capabilities for
        which to return information.</para>
         </formalpara>
         <para role="description">
Returns the bundle wiring for the current bundle revision.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the wiring information for the current revision of
         <code>bundleId</code> and <code>namespace</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>JMException</code>– if there is a JMX problem.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the connection could not be made because of a
         communication problem.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLE_WIRING_TYPE">for the details of the CompositeData.</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getCurrentWiringClosure(long,String)" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.getCurrentWiringClosure-long-String-">
         <title>public TabularData getCurrentWiringClosure(long rootBundleId,String namespace) throws IOException, JMException</title>
         <formalpara role="parameter">
            <title>rootBundleId</title>
            <para>the root bundle of the closure.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the requirements and capabilities for
        which to return information.</para>
         </formalpara>
         <para role="description">
Returns the bundle wiring closure for the current revision of the
 specified bundle. The wiring closure contains all the wirings from the
 root bundle revision to all bundle revisions it is wired to and all their
 transitive wirings.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a tabular representation of all the wirings in the closure. The
         bundle revision IDs only have meaning in the context of the
         current result. The revision of the rootBundle is set to 0.
         Therefore the root bundle of the closure can be looked up in the
         table by its bundle ID and revision 0.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>JMException</code>– if there is a JMX problem.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the connection could not be made because of a
         communication problem.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLES_WIRING_TYPE">for the details of the TabularData.</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRevisionsDeclaredCapabilities(long,String)" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.getRevisionsDeclaredCapabilities-long-String-">
         <title>public TabularData getRevisionsDeclaredCapabilities(long bundleId,String namespace) throws IOException, JMException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>The bundle ID.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the capabilities to be returned by this
        operation.</para>
         </formalpara>
         <para role="description">
Returns the capabilities for all revisions of the bundle.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the declared capabilities for all revisions of <code>bundleId</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>JMException</code>– if there is a JMX problem.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the connection could not be made because of a
         communication problem.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REVISIONS_CAPABILITIES_TYPE">for the details of TabularData.
 
      The capabilities are in no particular order, and may change in
      subsequent calls to this operation.</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRevisionsDeclaredRequirements(long,String)" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.getRevisionsDeclaredRequirements-long-String-">
         <title>public TabularData getRevisionsDeclaredRequirements(long bundleId,String namespace) throws IOException, JMException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>The bundle ID.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the requirements to be returned by this
        operation.</para>
         </formalpara>
         <para role="description">
Returns the requirements for all revisions of the bundle.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the declared requirements for all revisions of <code>bundleId</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>JMException</code>– if there is a JMX problem.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the connection could not be made because of a
         communication problem.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.REVISIONS_REQUIREMENTS_TYPE">for the details of TabularData.
 
      The requirements are in no particular order, and may change in
      subsequent calls to this operation.</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRevisionsWiring(long,String)" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.getRevisionsWiring-long-String-">
         <title>public TabularData getRevisionsWiring(long bundleId,String namespace) throws IOException, JMException</title>
         <formalpara role="parameter">
            <title>bundleId</title>
            <para>The bundle ID.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the requirements and capabilities for
        which to return information.</para>
         </formalpara>
         <para role="description">
Returns the bundle wirings for all revisions of the bundle.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>the wiring information for all revisions of <code>bundleId</code> and
         <code>namespace</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>JMException</code>– if there is a JMX problem.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the connection could not be made because of a
         communication problem.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLES_WIRING_TYPE">for the details of TabularData.
 
      The bundle wirings are in no particular order, and may change in
      subsequent calls to this operations.</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRevisionsWiringClosure(long,String)" xml:id="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.getRevisionsWiringClosure-long-String-">
         <title>public TabularData getRevisionsWiringClosure(long rootBundleId,String namespace) throws IOException, JMException</title>
         <formalpara role="parameter">
            <title>rootBundleId</title>
            <para>The root bundle ID.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the requirements and capabilities for
        which to return information.</para>
         </formalpara>
         <para role="description">
Returns the bundle wiring closure for all revisions of the specified
 bundle. The wiring closure contains all the wirings from the root bundle
 revision to all bundle revisions it is wired to and all their transitive
 wirings.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a tabular representation of all the wirings in the closure. The
         bundle revision IDs only have meaning in the context of the
         current result.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>JMException</code>– if there is a JMX problem.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– if the connection could not be made because of a
         communication problem.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean.BUNDLES_WIRING_TYPE">for the details of TabularData.
 
      The bundle wirings are in no particular order, and may change in
      subsequent calls to this operation. Furthermore, the bundle revision
      IDs are local and cannot be reused across invocations.</link>
            </para>
         </formalpara>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed><title>JMX</title>http://en.wikipedia.org/wiki/JMX</bibliomixed>

      <bibliomixed><title>Java Management Extensions (JMX) Technology
      Overview</title>http://docs.oracle.com/javase/1.5.0/docs/guide/jmx/overview/JMXoverviewTOC.html</bibliomixed>

      <bibliomixed xml:id="i3067363"><title>JSR 3: Java Management Extensions
      (JMX)
      Specification</title>http://www.jcp.org/en/jsr/detailid=3</bibliomixed>

      <bibliomixed><title>JSR 255: Java Management Extensions (JMX)
      Specification, version
      2.0</title>http://www.jcp.org/en/jsr/detailid=255</bibliomixed>

      <bibliomixed><title>JSR 160: JavaTM Management Extensions (JMX) Remote
      API</title>http://www.jcp.org/en/jsr/detailid=160</bibliomixed>

      <bibliomixed><title>JSR 262: Web Services Connector for Java Management
      Extensions (JMX)
      Agents</title>http://www.jcp.org/en/jsr/detailid=262</bibliomixed>

      <bibliomixed><title>JavaTM Management Extensions (JMXTM)API
      Specification</title>http://docs.oracle.com/javase/1.5.0/docs/guide/jmx/spec.html</bibliomixed>

      <bibliomixed xml:id="i3160796"><title>Using JConsole to Monitor
      Applications</title>http://java.sun.com/developer/technicalArticles/J2SE/jconsole.html</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="125" revision="$Id: a2032d1d6a05bf45f1d723d0122fd5294ee47b71 $" version="5" xml:id="service.jdbc" xml:base="../125/service.jdbc.xml">
  <title>JDBC™ Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.jdbc-version" linkend="org.osgi.service.jdbc"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The Java Database Connectivity (JDBC) standard provides an API for
    applications to interact with relational database systems from different
    vendors. To abstract over concrete database systems and vendor specific
    characteristics, the JDBC specification provides various classes and
    Service Provider Interfaces (SPI) that can be used for database
    interaction. Implementations are database specific and provided by the
    corresponding driver. This specification defines how OSGi-aware JDBC
    drivers can provide access to their implementations. Applications can rely
    on this mechanism to transparently access drivers and to stay independent
    from driver specific classes. Additionally, this mechanism helps to use
    common OSGi practices and to avoid class loading problems.</para>

    <para>This specification uses a number of packages that are defined in
    Java SE 1.4 or later.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Registration</emphasis> - Provide a mechanism for
          JDBC driver announcements.</para>
        </listitem>

        <listitem>
          <para><emphasis>Lookup</emphasis> - Inspect available database
          drivers and provide means for driver access.</para>
        </listitem>

        <listitem>
          <para><emphasis>Services</emphasis> - Uses a service model for
          getting the driver objects.</para>
        </listitem>

        <listitem>
          <para><emphasis>Compatible</emphasis> - Minimize the amount of work
          needed to support this specification for existing drivers.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Relational Database Management Systems</emphasis> -
          (RDBMS) An external database system.</para>
        </listitem>

        <listitem>
          <para><emphasis>Database Driver</emphasis> - JDBC-compliant database
          driver that is delivered in a bundle.</para>
        </listitem>

        <listitem>
          <para><emphasis>Data Source Factory</emphasis> - Provides one of the
          different Data Sources that gives access to a database
          driver.</para>
        </listitem>

        <listitem>
          <para><emphasis>Application</emphasis> - The application that wants
          to access a relational database system.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>JDBC Class/Service Overview</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.156in" contentwidth="7.000in" fileref="jdbc-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Dependencies</title>

      <para>The classes and interfaces used in this specification come from
      the following packages:</para>

      <programlisting>javax.sql
java.sql</programlisting>

      <para>These packages have no associated version. It is assumed they come
      from the runtime environment. This specification is based on Java SE 1.4
      or later.</para>
    </section>

    <section>
      <title>Synopsis</title>

      <para>A JDBC <emphasis>Database Driver</emphasis> is the software that
      maps the JDBC specification to a specific implementation of a relational
      database. For OSGi, JDBC drivers are delivered as driver bundles. A
      driver bundle registers a Data Source Factory service when it is
      <code>ACTIVE</code>. Service properties are used to specify the database
      driver name, version, etc. The Data Source Factory service provides
      methods to create <code>DataSource</code>,
      <code>ConnectionPoolDataSource</code>, <code>XADataSource</code>, or
      <code>Driver</code> objects. These objects are then used by an
      application to interact with the relational database system in the
      standard way.</para>

      <para>The application can query the service registry for available Data
      Source Factory services. It can select particular drivers by filtering
      on the service properties. This service based model is easy to use with
      dependency injection frameworks like Blueprint or Declarative
      Services.</para>
    </section>
  </section>

  <section>
    <title>Database Driver</title>

    <para>A Database Driver provides the connection between an
    <emphasis>Application</emphasis> and a particular database. A single OSGi
    Framework can contain several Database Drivers simultaneously. To make
    itself available to Applications, a Database Driver must register a Data
    Source Factory service. Applications must be able to find the appropriate
    Database Driver. The Database Driver must therefore register the Data
    Source Factory service with the following service properties:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.jdbc.DataSourceFactory.OSGI_JDBC_DRIVER_CLASS" xrefstyle="hyperlink"/> - (<code>String</code>) The required name of
        the driver implementation class. This property is the primary key to
        find a driver's Data Source Factory. It is not required that there is
        an actual class with this name.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.jdbc.DataSourceFactory.OSGI_JDBC_DRIVER_NAME" xrefstyle="hyperlink"/> - (<code>String</code>) The optional driver
        name. This property is informational.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.jdbc.DataSourceFactory.OSGI_JDBC_DRIVER_VERSION" xrefstyle="hyperlink"/> - (<code>String</code>) The driver version.
        The version is not required to be an OSGi version, it should be
        treated as an opaque string. This version is likely not related to the
        package of the implementation class or its bundle.</para>
      </listitem>
    </itemizedlist>

    <para>The previous properties are vendor-specific and are meant to further
    describe the Database Driver to the Application.</para>

    <para>Each Data Source Factory service must relate to a single Database
    Driver. The Database Driver implementation bundle does not necessarily
    need to be the registrar of the Data Source Factory service. Any bundle
    can provide the Data Source Factory service and delegate to the
    appropriate driver specific implementation classes. However, as JDBC
    driver implementations evolve to include built-in support for OSGi they
    can provide the Data Source Factory service themselves. This implies that
    the same driver can be registered multiple times.</para>

    <section>
      <title>Life Cycle</title>

      <para>A Data Source Factory service should be registered while its
      Driver Bundle is in the <code>ACTIVE</code> state or when it has a
      <code>lazy</code> activation policy and is in the <code>STARTING</code>
      state.</para>

      <para>What happens to the objects created by the Data Source Factory
      service, and the objects they created, is undefined in this
      specification. Database Drivers are not mandated to track the proper
      life cycle of these objects.</para>
    </section>

    <section>
      <title>Package Dependencies</title>

      <para>A Database Driver must import the <code>javax.sql</code> package.
      The <code>java.sql</code> package that contains the <code>Driver</code>
      and <code>SQLException</code> interface is automatically imported
      because it starts with <code>java.</code>. Both packages are contained
      in the JRE since Java SE 1.4. These packages are not normally versioned
      with OSGi version numbers. Bundles using the Data Source Factory must
      therefore ensure they get the proper imports, which is usually from the
      JRE. Due to the lack of specified metadata, the deployer is responsible
      for ensuring this.</para>
    </section>
  </section>

  <section>
    <title>Applications</title>

    <section>
      <title>Selecting the Data Source Factory Service</title>

      <para>Applications can query the OSGi service registry for available
      Database Drivers by getting a list of Data Source Factory services.
      Normally, the application needs access to specific drivers that match
      their needed relational database type. The service properties can be
      used to find the desired Database Driver. This model is well supported
      by dependency injection frameworks like Blueprint or Declarative
      Services. However, it can of course also be used with the basic service
      methods. The following code shows how a Service Tracker can be used to
      get a Database Driver called ACME DB.</para>

      <programlisting>Filter filter = context.createFilter(
    "(&amp;(objectClass="  + 
        DataSourceFactory.class.getName() + 
    ")(" + 
        DataSourceFactory.OSGI_JDBC_DRIVER_CLASS + "=com.acme.db.Driver))");

ServiceTracker tracker = new ServiceTracker(context, filter, null);
tracker.open();

DataSourceFactory dsf = (DataSourceFactory) tracker.getService();</programlisting>
    </section>

    <section>
      <title>Using Database Drivers</title>

      <para>The Data Source Factory service can be used to obtain instances
      for the following JDBC related types:</para>

      <itemizedlist>
        <listitem>
          <para><code>javax.sql.DataSource</code></para>
        </listitem>

        <listitem>
          <para><code>javax.sql.ConnectionPoolDataSource</code></para>
        </listitem>

        <listitem>
          <para><code>javax.sql.XADataSource</code></para>
        </listitem>

        <listitem>
          <para><code>java.sql.Driver</code></para>
        </listitem>
      </itemizedlist>

      <para>Which type of Connection provider that is actually required
      depends on the Application and the use case. For each type, the Data
      Source Factory service provides a method that returns the corresponding
      instance. Each method takes a <code>Properties</code> object as a
      parameter to pass a configuration to the Database Driver implementation.
      The configuration is driver-specific and can be used to specify the URL
      for the database and user credentials. Common property names for these
      configuration properties are also defined in the
      <code>DataSourceFactory</code> interface.</para>

      <para>A Data Source Factory is not required to implement all of the
      factory methods. If an implementation does not support a particular type
      then it must throw a SQL Exception. This specification does not provide
      a mechanism to depend on a Data Source Factory service that implements a
      particular factory method.</para>

      <para>The following code shows how a <code>DataSource</code> object
      could be created.</para>

      <programlisting>Properties props = new Properties(); 
props.put(DataSourceFactory.JDBC_URL,      "jdbc:acme:ACMEDB"); 
props.put(DataSourceFactory.JDBC_USER,     "foo"); 
props.put(DataSourceFactory.JDBC_PASSWORD, "secret"); 
DataSource dataSource = dsf.createDataSource(props);</programlisting>

      <para>The <code>DataSourceFactory</code> interface has several static
      fields that represent common property keys for the
      <code>Properties</code> instance. General properties are:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.jdbc.DataSourceFactory.JDBC_DATABASE_NAME" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.jdbc.DataSourceFactory.JDBC_DATASOURCE_NAME" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.jdbc.DataSourceFactory.JDBC_DESCRIPTION" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.jdbc.DataSourceFactory.JDBC_NETWORK_PROTOCOL" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.jdbc.DataSourceFactory.JDBC_PASSWORD" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.jdbc.DataSourceFactory.JDBC_PORT_NUMBER" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.jdbc.DataSourceFactory.JDBC_ROLE_NAME" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.jdbc.DataSourceFactory.JDBC_SERVER_NAME" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.jdbc.DataSourceFactory.JDBC_USER" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.jdbc.DataSourceFactory.JDBC_URL" xrefstyle="hyperlink"/></para>
        </listitem>
      </itemizedlist>

      <para>The following additional property keys are provided for
      applications that want to create a <code>ConnectionPoolDataSource</code>
      object or a <code>XAPoolDataSource</code> object:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.jdbc.DataSourceFactory.JDBC_INITIAL_POOL_SIZE" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.jdbc.DataSourceFactory.JDBC_MAX_IDLE_TIME" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.jdbc.DataSourceFactory.JDBC_MAX_POOL_SIZE" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.jdbc.DataSourceFactory.JDBC_MAX_STATEMENTS" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.jdbc.DataSourceFactory.JDBC_MIN_POOL_SIZE" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.jdbc.DataSourceFactory.JDBC_PROPERTY_CYCLE" xrefstyle="hyperlink"/></para>
        </listitem>
      </itemizedlist>

      <para>Which property keys and values are supported depends on the driver
      implementation. Drivers can support additional custom configuration
      properties.</para>
    </section>

    <section>
      <title>Using JDBC in OSGi and Containers</title>

      <para>The JDBC service provides JDBC driver services, not
      <emphasis>container</emphasis> services. A typical client would only use
      the <code>DataSourceFactory.createDataSource()</code> method to procure
      a regular Data Source from which they can obtain (usually non-pooled)
      connections.</para>

      <para>Containers generally offer connection pools and support XA
      transactions. The container manages the pools and does this by using
      Pooled Connection or XA Connection objects from a driver-implemented
      respective Connection Pool Data Source or XA Data Source. To support
      containers, frameworks, or any client that wants to manage a pool, these
      Data Source types are included in the Data Source Factory service.
      Drivers are permitted to implement their own Data Source using an
      underlying connection pooling scheme. This is driver-dependent and not
      related to the OSGi specifications.</para>

      <para>The usual set of JDBC properties are defined in the services for
      use with the Data Source types. They are the same as what is defined for
      JDBC and the caller should know which properties make sense when passed
      to a given Data Source type. The same result should occur in OSGi as
      occurs outside of OSGi. If the driver does not support a given property
      with a given Data Source type then it can ignore it or it can throw an
      Exception.</para>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>This specification depends on the JDBC specification for
    security.</para>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.jdbc" xml:id="org.osgi.service.jdbc" xml:base="../../generated/javadoc/docbook/org.osgi.service.jdbc.xml">
   <title>org.osgi.service.jdbc</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.jdbc-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.jdbc-version.number">1.0</edition>
   </info>
   <para>
JDBC Service Package Version 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.jdbc; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.jdbc; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.jdbc.DataSourceFactory">
                  <code>DataSourceFactory</code>
               </link> - 
A factory for JDBC connection factories.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="DataSourceFactory" xml:id="org.osgi.service.jdbc.DataSourceFactory">
      <title>public interface DataSourceFactory</title>
      <para>
A factory for JDBC connection factories. There are 3 preferred connection
 factories for getting JDBC connections: <code>javax.sql.DataSource</code>,
 <code>javax.sql.ConnectionPoolDataSource</code>, and
 <code>javax.sql.XADataSource</code>.
 
 DataSource providers should implement this interface and register it as an
 OSGi service with the JDBC driver class name in the
 <link linkend="org.osgi.service.jdbc.DataSourceFactory.OSGI_JDBC_DRIVER_CLASS">OSGI_JDBC_DRIVER_CLASS</link> property.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="JDBC_DATABASE_NAME" xml:id="org.osgi.service.jdbc.DataSourceFactory.JDBC_DATABASE_NAME">
         <title>public static final String JDBC_DATABASE_NAME = "databaseName"</title>
         <para>
The "databaseName" property that DataSource clients should supply a value
 for when calling <link linkend="org.osgi.service.jdbc.DataSourceFactory.createDataSource-Properties-">createDataSource(Properties)</link>.
   </para>
      </section>
      <section role="field" xreflabel="JDBC_DATASOURCE_NAME" xml:id="org.osgi.service.jdbc.DataSourceFactory.JDBC_DATASOURCE_NAME">
         <title>public static final String JDBC_DATASOURCE_NAME = "dataSourceName"</title>
         <para>
The "dataSourceName" property that DataSource clients should supply a
 value for when calling <link linkend="org.osgi.service.jdbc.DataSourceFactory.createDataSource-Properties-">createDataSource(Properties)</link>.
   </para>
      </section>
      <section role="field" xreflabel="JDBC_DESCRIPTION" xml:id="org.osgi.service.jdbc.DataSourceFactory.JDBC_DESCRIPTION">
         <title>public static final String JDBC_DESCRIPTION = "description"</title>
         <para>
The "description" property that DataSource clients should supply a value
 for when calling <link linkend="org.osgi.service.jdbc.DataSourceFactory.createDataSource-Properties-">createDataSource(Properties)</link>.
   </para>
      </section>
      <section role="field" xreflabel="JDBC_INITIAL_POOL_SIZE" xml:id="org.osgi.service.jdbc.DataSourceFactory.JDBC_INITIAL_POOL_SIZE">
         <title>public static final String JDBC_INITIAL_POOL_SIZE = "initialPoolSize"</title>
         <para>
The "initialPoolSize" property that ConnectionPoolDataSource and
 XADataSource clients may supply a value for when calling
 <link linkend="org.osgi.service.jdbc.DataSourceFactory.createConnectionPoolDataSource-Properties-">createConnectionPoolDataSource(Properties)</link> or
 <link linkend="org.osgi.service.jdbc.DataSourceFactory.createXADataSource-Properties-">createXADataSource(Properties)</link> on drivers that support this
 property.
   </para>
      </section>
      <section role="field" xreflabel="JDBC_MAX_IDLE_TIME" xml:id="org.osgi.service.jdbc.DataSourceFactory.JDBC_MAX_IDLE_TIME">
         <title>public static final String JDBC_MAX_IDLE_TIME = "maxIdleTime"</title>
         <para>
The "maxIdleTime" property that ConnectionPoolDataSource and XADataSource
 clients may supply a value for when calling
 <link linkend="org.osgi.service.jdbc.DataSourceFactory.createConnectionPoolDataSource-Properties-">createConnectionPoolDataSource(Properties)</link> or
 <link linkend="org.osgi.service.jdbc.DataSourceFactory.createXADataSource-Properties-">createXADataSource(Properties)</link> on drivers that support this
 property.
   </para>
      </section>
      <section role="field" xreflabel="JDBC_MAX_POOL_SIZE" xml:id="org.osgi.service.jdbc.DataSourceFactory.JDBC_MAX_POOL_SIZE">
         <title>public static final String JDBC_MAX_POOL_SIZE = "maxPoolSize"</title>
         <para>
The "maxPoolSize" property that ConnectionPoolDataSource and XADataSource
 clients may supply a value for when calling
 <link linkend="org.osgi.service.jdbc.DataSourceFactory.createConnectionPoolDataSource-Properties-">createConnectionPoolDataSource(Properties)</link> or
 <link linkend="org.osgi.service.jdbc.DataSourceFactory.createXADataSource-Properties-">createXADataSource(Properties)</link> on drivers that support this
 property.
   </para>
      </section>
      <section role="field" xreflabel="JDBC_MAX_STATEMENTS" xml:id="org.osgi.service.jdbc.DataSourceFactory.JDBC_MAX_STATEMENTS">
         <title>public static final String JDBC_MAX_STATEMENTS = "maxStatements"</title>
         <para>
The "maxStatements" property that ConnectionPoolDataSource and
 XADataSource clients may supply a value for when calling
 <link linkend="org.osgi.service.jdbc.DataSourceFactory.createConnectionPoolDataSource-Properties-">createConnectionPoolDataSource(Properties)</link> or
 <link linkend="org.osgi.service.jdbc.DataSourceFactory.createXADataSource-Properties-">createXADataSource(Properties)</link> on drivers that support this
 property.
   </para>
      </section>
      <section role="field" xreflabel="JDBC_MIN_POOL_SIZE" xml:id="org.osgi.service.jdbc.DataSourceFactory.JDBC_MIN_POOL_SIZE">
         <title>public static final String JDBC_MIN_POOL_SIZE = "minPoolSize"</title>
         <para>
The "minPoolSize" property that ConnectionPoolDataSource and XADataSource
 clients may supply a value for when calling
 <link linkend="org.osgi.service.jdbc.DataSourceFactory.createConnectionPoolDataSource-Properties-">createConnectionPoolDataSource(Properties)</link> or
 <link linkend="org.osgi.service.jdbc.DataSourceFactory.createXADataSource-Properties-">createXADataSource(Properties)</link> on drivers that support this
 property.
   </para>
      </section>
      <section role="field" xreflabel="JDBC_NETWORK_PROTOCOL" xml:id="org.osgi.service.jdbc.DataSourceFactory.JDBC_NETWORK_PROTOCOL">
         <title>public static final String JDBC_NETWORK_PROTOCOL = "networkProtocol"</title>
         <para>
The "networkProtocol" property that DataSource clients should supply a
 value for when calling <link linkend="org.osgi.service.jdbc.DataSourceFactory.createDataSource-Properties-">createDataSource(Properties)</link>.
   </para>
      </section>
      <section role="field" xreflabel="JDBC_PASSWORD" xml:id="org.osgi.service.jdbc.DataSourceFactory.JDBC_PASSWORD">
         <title>public static final String JDBC_PASSWORD = "password"</title>
         <para>
The "password" property that DataSource clients should supply a value for
 when calling <link linkend="org.osgi.service.jdbc.DataSourceFactory.createDataSource-Properties-">createDataSource(Properties)</link>.
   </para>
      </section>
      <section role="field" xreflabel="JDBC_PORT_NUMBER" xml:id="org.osgi.service.jdbc.DataSourceFactory.JDBC_PORT_NUMBER">
         <title>public static final String JDBC_PORT_NUMBER = "portNumber"</title>
         <para>
The "portNumber" property that DataSource clients should supply a value
 for when calling <link linkend="org.osgi.service.jdbc.DataSourceFactory.createDataSource-Properties-">createDataSource(Properties)</link>.
   </para>
      </section>
      <section role="field" xreflabel="JDBC_PROPERTY_CYCLE" xml:id="org.osgi.service.jdbc.DataSourceFactory.JDBC_PROPERTY_CYCLE">
         <title>public static final String JDBC_PROPERTY_CYCLE = "propertyCycle"</title>
         <para>
The "propertyCycle" property that ConnectionPoolDataSource and
 XADataSource clients may supply a value for when calling
 <link linkend="org.osgi.service.jdbc.DataSourceFactory.createConnectionPoolDataSource-Properties-">createConnectionPoolDataSource(Properties)</link> or
 <link linkend="org.osgi.service.jdbc.DataSourceFactory.createXADataSource-Properties-">createXADataSource(Properties)</link> on drivers that support this
 property.
   </para>
      </section>
      <section role="field" xreflabel="JDBC_ROLE_NAME" xml:id="org.osgi.service.jdbc.DataSourceFactory.JDBC_ROLE_NAME">
         <title>public static final String JDBC_ROLE_NAME = "roleName"</title>
         <para>
The "roleName" property that DataSource clients should supply a value for
 when calling <link linkend="org.osgi.service.jdbc.DataSourceFactory.createDataSource-Properties-">createDataSource(Properties)</link>.
   </para>
      </section>
      <section role="field" xreflabel="JDBC_SERVER_NAME" xml:id="org.osgi.service.jdbc.DataSourceFactory.JDBC_SERVER_NAME">
         <title>public static final String JDBC_SERVER_NAME = "serverName"</title>
         <para>
The "serverName" property that DataSource clients should supply a value
 for when calling <link linkend="org.osgi.service.jdbc.DataSourceFactory.createDataSource-Properties-">createDataSource(Properties)</link>.
   </para>
      </section>
      <section role="field" xreflabel="JDBC_URL" xml:id="org.osgi.service.jdbc.DataSourceFactory.JDBC_URL">
         <title>public static final String JDBC_URL = "url"</title>
         <para>
The "url" property that DataSource clients should supply a value for when
 calling <link linkend="org.osgi.service.jdbc.DataSourceFactory.createDataSource-Properties-">createDataSource(Properties)</link>.
   </para>
      </section>
      <section role="field" xreflabel="JDBC_USER" xml:id="org.osgi.service.jdbc.DataSourceFactory.JDBC_USER">
         <title>public static final String JDBC_USER = "user"</title>
         <para>
The "user" property that DataSource clients should supply a value for
 when calling <link linkend="org.osgi.service.jdbc.DataSourceFactory.createDataSource-Properties-">createDataSource(Properties)</link>.
   </para>
      </section>
      <section role="field" xreflabel="OSGI_JDBC_DRIVER_CLASS" xml:id="org.osgi.service.jdbc.DataSourceFactory.OSGI_JDBC_DRIVER_CLASS">
         <title>public static final String OSGI_JDBC_DRIVER_CLASS = "osgi.jdbc.driver.class"</title>
         <para>
Service property used by a JDBC driver to declare the driver class when
 registering a JDBC DataSourceFactory service. Clients may filter or test
 this property to determine if the driver is suitable, or the desired one.
   </para>
      </section>
      <section role="field" xreflabel="OSGI_JDBC_DRIVER_NAME" xml:id="org.osgi.service.jdbc.DataSourceFactory.OSGI_JDBC_DRIVER_NAME">
         <title>public static final String OSGI_JDBC_DRIVER_NAME = "osgi.jdbc.driver.name"</title>
         <para>
Service property used by a JDBC driver to declare the driver name when
 registering a JDBC DataSourceFactory service. Clients may filter or test
 this property to determine if the driver is suitable, or the desired one.
   </para>
      </section>
      <section role="field" xreflabel="OSGI_JDBC_DRIVER_VERSION" xml:id="org.osgi.service.jdbc.DataSourceFactory.OSGI_JDBC_DRIVER_VERSION">
         <title>public static final String OSGI_JDBC_DRIVER_VERSION = "osgi.jdbc.driver.version"</title>
         <para>
Service property used by a JDBC driver to declare the driver version when
 registering a JDBC DataSourceFactory service. Clients may filter or test
 this property to determine if the driver is suitable, or the desired one.
   </para>
      </section>
      <section role="method" xreflabel="createConnectionPoolDataSource(Properties)" xml:id="org.osgi.service.jdbc.DataSourceFactory.createConnectionPoolDataSource-Properties-">
         <title>public ConnectionPoolDataSource createConnectionPoolDataSource(Properties props) throws SQLException</title>
         <formalpara role="parameter">
            <title>props</title>
            <para>The properties used to configure the
        <code>ConnectionPoolDataSource</code>. <code>null</code> indicates no
        properties. If the property cannot be set on the
        <code>ConnectionPoolDataSource</code> being created then a
        <code>SQLException</code> must be thrown.</para>
         </formalpara>
         <para role="description">
Create a new <code>ConnectionPoolDataSource</code> using the given properties.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A configured <code>ConnectionPoolDataSource</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SQLException</code>– If the <code>ConnectionPoolDataSource</code> cannot be
         created.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="createDataSource(Properties)" xml:id="org.osgi.service.jdbc.DataSourceFactory.createDataSource-Properties-">
         <title>public DataSource createDataSource(Properties props) throws SQLException</title>
         <formalpara role="parameter">
            <title>props</title>
            <para>The properties used to configure the <code>DataSource</code> .
        <code>null</code> indicates no properties. If the property cannot be
        set on the <code>DataSource</code> being created then a
        <code>SQLException</code> must be thrown.</para>
         </formalpara>
         <para role="description">
Create a new <code>DataSource</code> using the given properties.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A configured <code>DataSource</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SQLException</code>– If the <code>DataSource</code> cannot be created.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="createDriver(Properties)" xml:id="org.osgi.service.jdbc.DataSourceFactory.createDriver-Properties-">
         <title>public Driver createDriver(Properties props) throws SQLException</title>
         <formalpara role="parameter">
            <title>props</title>
            <para>The properties used to configure the <code>Driver</code>.
        <code>null</code> indicates no properties. If the property cannot be
        set on the <code>Driver</code> being created then a
        <code>SQLException</code> must be thrown.</para>
         </formalpara>
         <para role="description">
Create a new <code>Driver</code> using the given properties.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A configured <code>Driver</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SQLException</code>– If the <code>Driver</code> cannot be created.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="createXADataSource(Properties)" xml:id="org.osgi.service.jdbc.DataSourceFactory.createXADataSource-Properties-">
         <title>public XADataSource createXADataSource(Properties props) throws SQLException</title>
         <formalpara role="parameter">
            <title>props</title>
            <para>The properties used to configure the <code>XADataSource</code>.
        <code>null</code> indicates no properties. If the property cannot be
        set on the <code>XADataSource</code> being created then a
        <code>SQLException</code> must be thrown.</para>
         </formalpara>
         <para role="description">
Create a new <code>XADataSource</code> using the given properties.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A configured <code>XADataSource</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SQLException</code>– If the <code>XADataSource</code> cannot be created.   </para>
         </formalpara>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed><title>Java SE
      1.4</title>http://www.oracle.com/technetwork/java/archive-139210.html</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="126" revision="$Id: be0f0b3a4e5a9abc62b77452acf9a61e18ae1a5a $" version="5" xml:id="service.jndi" xml:base="../126/service.jndi.xml">
  <title>JNDI Services Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.jndi-version" linkend="org.osgi.service.jndi"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>Naming and directory services have long been useful tools in the
    building of software systems. The ability to use a programming interface
    to publish and consume objects can provide many benefits to any system.
    The Java Naming and Directory Interface (JNDI) is a registry technology in
    Java applications, both in the Java SE and Java EE space. JNDI provides a
    vendor-neutral set of APIs that allow clients to interact with a naming
    service from different vendors.</para>

    <para>The JNDI as used in the Java SE environment relies on the class
    loading model provided by the JDK to find providers. By default, it
    attempts to load the JNDI provider class using the Thread Context Class
    Loader. In an OSGi environment, this type of Context creation is not
    desirable since it relies on the JNDI provider classes being visible to
    the JNDI client, or require it to set the Context Class Loader; in both
    cases breaking modularity. For modularity reasons, it is important that
    clients are not required to express a dependency on the implementation of
    services they use.</para>

    <para>This specification will define how JNDI can be utilized from within
    an OSGi framework. The specification consists of three key parts:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>OSGi Service Model</emphasis> - How clients interact
        with JNDI when running inside an OSGi Framework.</para>
      </listitem>

      <listitem>
        <para><emphasis>JNDI Provider Model</emphasis> - How JNDI providers
        can advertise their existence so they are available to OSGi and
        traditional clients.</para>
      </listitem>

      <listitem>
        <para><emphasis>Traditional Model</emphasis> - How traditional JNDI
        applications and providers can continue to work in an OSGi Framework
        without needing to be rewritten when certain precautions are
        taken.</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Naming Service</emphasis> - Provide an integration
          model for JNDI API clients and providers.</para>
        </listitem>

        <listitem>
          <para><emphasis>Flexible</emphasis> - Provide a standard mechanism
          for publishing and locating JNDI providers.</para>
        </listitem>

        <listitem>
          <para><emphasis>Compatibility</emphasis> - Support the traditional
          JNDI programming model used by Java SE and Java EE clients.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service Based</emphasis> - Provide a service model
          that clients and providers can use to leverage JNDI
          facilities.</para>
        </listitem>

        <listitem>
          <para><emphasis>Migration</emphasis> - Provide a mechanism to access
          OSGi services from a JNDI context.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>JNDI Implementation</emphasis> - The Implementer of
          the JNDI Context Manager, JNDI Provider Admin, and setter of the
          JNDI static singletons.</para>
        </listitem>

        <listitem>
          <para><emphasis>JNDI Client</emphasis> - Any code running within an
          OSGi bundle that needs to use JNDI.</para>
        </listitem>

        <listitem>
          <para><emphasis>JNDI Context Manager </emphasis> - A service that
          allows clients to obtain Contexts via a service.</para>
        </listitem>

        <listitem>
          <para><emphasis>JNDI Provider Admin</emphasis> - A service that
          allows the conversion of objects for providers.</para>
        </listitem>

        <listitem>
          <para><emphasis>JNDI Provider</emphasis> - Provides a Context
          implementation.</para>
        </listitem>

        <listitem>
          <para><emphasis>Context</emphasis> - A Context abstracts a
          namespace. Implementations are provided by JNDI providers and the
          Contexts are used by JNDI clients. The corresponding interface is
          <code>javax.naming.Context</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Dir Context</emphasis> - A sub-type of
          <code>Context</code> that provides mechanisms for examining and
          updating the attributes of an object in a directory structure, and
          for performing searches in an hierarchical naming systems like LDAP.
          The corresponding interface is
          <code>javax.naming.directory.DirContext</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Initial Context Factory</emphasis> - A factory for
          creating instances of <code>Context</code> objects. This factory is
          used to integrate new JNDI Providers. In general, a single Initial
          Context Factory constructs <code>Context</code> objects for a single
          provider implementation. The corresponding interface is
          <code>javax.naming.spi.InitialContextFactory</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Initial Context Factory Builder</emphasis> - A
          factory for <code>InitialContextFactory</code> objects. A single
          Initial Context Factory Builder can construct
          <code>InitialContextFactory</code> objects for different types of
          Contexts. The interface is
          <code>javax.naming.spi.InitialContextFactoryBuilder</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Object Factory</emphasis> - Used in conversion of
          objects. The corresponding interface is
          <code>javax.naming.spi.ObjectFactory</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Dir Object Factory</emphasis> - An Object Factory
          that takes attribute information for object conversion. The
          corresponding interface is
          <code>javax.naming.spi.DirObjectFactory</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Object Factory Builder</emphasis> - A factory for
          <code>ObjectFactory</code> objects. A single Object Factory Builder
          can construct <code>ObjectFactory</code> instances for different
          types of conversions. The corresponding interface is
          <code>javax.naming.spi.ObjectFactoryBuilder</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Reference</emphasis> - A description of an object
          that can be turned into an object through an Object Factory. The
          associated <code>Referenceable</code> interface implemented on an
          object indicates that it can provide a <code>Reference</code>
          object.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>JNDI Service Specification Service Entities</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.477in" contentwidth="7.000in" fileref="jndi-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Dependencies</title>

      <para>The classes and interfaces used in this specification come from
      the following packages:</para>

      <programlisting>javax.naming
javax.naming.spi
javax.naming.directory</programlisting>

      <para>These packages have no associated version. It is assumed they come
      from the runtime environment. This specification is based on Java SE 1.4
      or later.</para>
    </section>

    <section>
      <title>Synopsis</title>

      <para>A client bundle wishing to make use of JNDI in order to access
      JNDI Providers such as LDAP or DNS in OSGi should not use the Naming
      Manager but instead use the JNDI Context Manager service. This service
      can be asked for a Context based on environment properties. The
      environment properties are based on an optional argument in the
      <code>newInitialContext</code> method, the Java System properties, and
      an optional resource in the caller's bundle.</para>

      <para>These environment properties can specify an implementation class
      name for a factory that can create a <code>Context</code> object. If
      such a class name is specified, then it is searched for in the service
      registry. If such a service is found, then that service is used to
      create a new Context, which is subsequently returned. If no class name
      is specified, the service registry is searched for Initial Context
      Factory services. These services are tried in ranking order to see if
      they can create an appropriate Context, the first one that can create a
      Context is then used.</para>

      <para>If no class name is specified, all Initial Context Factory Builder
      services are tried to see if they can create a Context, the first
      non-<code>null</code> result is used. If no Context can be found, a No
      Initial Context Exception is thrown. Otherwise, the JNDI Context Manager
      service returns an initial Context that uses the just created Context
      from a provider as the backing service. This initial Context delegates
      all operations to this backing Context, except operations that use a
      name that can be interpreted as a URL, that is, the name contains a
      colon. URL operations are delegated a URL Context that is associated
      with the used scheme. URL Contexts are found through the general object
      conversion facility provided by the JNDI Provider Admin service.</para>

      <para>The JNDI Provider Admin service provides a general object
      conversion facility that can be extended with Object Factory and Object
      Factory Builder services that are traditionally provided through the
      Naming Manager <code>getObjectInstance</code> method. A specific case
      for this conversion is the use of <code>Reference</code> objects.
      <code>Reference</code> objects can be used to store objects persistently
      in a Context implementation. Reference objects must be converted to
      their corresponding object when retrieved from a Context.</para>

      <para>During the client's use of a Context it is possible that its
      provider's service is unregistered. In this case the JNDI Context
      Manager must release the backing Context. If the initial Context is used
      and no backing Context is available, the JNDI Context Manager must
      re-create a new Context, if possible. Otherwise a Naming Exception is
      thrown. If subsequently a proper new backing Context can be created, the
      initial Context must start operating again.</para>

      <para>The JNDI Context Manager service must track the life cycle of a
      calling bundle and ensure that any returned <code>Context</code> objects
      are closed and returned objects are properly cleaned up when the bundle
      is closed or the JNDI Context Manager service is unget.</para>

      <para>When the client bundle is stopped, any returned initial Context
      objects are closed and discarded. If the Initial Context Factory, or
      Initial Context Factory Builder, service that created the initial
      Context goes away then the JNDI Context Manager service releases the
      Context backing the initial Context and attempts to create a replacement
      Context.</para>

      <para>Clients and JNDI Context providers that are unaware of OSGi use
      static methods to connect to the JRE JNDI implementation. The
      <code>InitialContext</code> class provides access to a Context from a
      provider and providers use the static <code>NamingManager</code> methods
      to do object conversion and find URL Contexts. This traditional model is
      not aware of OSGi and can therefore only be used reliably if the
      consequences of this lack of OSGi awareness are managed.</para>
    </section>
  </section>

  <section xml:id="i3095960">
    <title>JNDI Overview</title>

    <para>The Java Naming and Directory Interface (JNDI) provides an
    abstraction for namespaces that is included in Java SE. This section
    describes the basic concepts of JNDI as provided in Java SE. These
    concepts are later used in the service model provided by this
    specification.</para>

    <section>
      <title>Context and Dir Context</title>

      <para>The <emphasis><xref linkend="i3131859"/></emphasis> (JNDI) defines
      an API for <emphasis>namespaces</emphasis>. These namespaces are
      abstracted with the <code>Context</code> interface. Namespaces that
      support <emphasis>attributes</emphasis>, such as a namespace as the
      Lightweight Directory Access Protocol (LDAP), are represented by the
      <code>DirContext</code> class, which extends the <code>Context</code>
      class. If applicable, a <code>Context</code> object can be cast to a
      <code>DirContext</code> object. The distinction is not relevant for this
      specification, except in places where it is especially mentioned.</para>

      <para>The <code>Context</code> interface models a set of name-to-object
      <emphasis>bindings</emphasis> within a namespace. These bindings can be
      looked-up, created, and updated through the <code>Context</code>
      interface. The <code>Context</code> interface can be used for federated,
      flat, or hierarchical namespaces.</para>
    </section>

    <section>
      <title>Initial Context</title>

      <para>Obtaining a Context for a specific namespace, for example DNS, is
      handled through the <code>InitialContext</code> class. Creating an
      instance of this class will cause the JRE to find a
      <emphasis>backing</emphasis> Context. The Initial Context is only a
      facade for the backing Context. The facade context provides URL based
      lookups.</para>

      <para>The backing Context is created by a <emphasis>JNDI
      Provider</emphasis>. How this backing Context is created is an elaborate
      process using class loading techniques or a provisioning mechanism
      involving <emphasis>builders</emphasis>, see <xref linkend="i3082552"/>
      for more information about the builder provisioning mechanism.</para>

      <para>If there is no Initial Context Factory Builder set, the class name
      of a class implementing the <code>InitialContextFactory</code> interface
      is specified as a property in the <emphasis>environment</emphasis>. The
      environment is a <code>Hashtable</code> object that is constructed from
      different sources and then merged with System properties and a resource
      in the calling bundle, see <xref linkend="i3083484"/>. In a standard
      Java SE JNDI, the given class name is then used to construct an
      <code>InitialContextFactory</code> object and this object is then used
      to create the backing Context. This process is depicted in <xref linkend="i3118331" xrefstyle="template:Figure %n on page %p"/>.</para>

      <figure xml:id="i3118331">
        <title>Backing Context</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.427in" contentwidth="6.237in" fileref="initial-backing-context.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>URL Context Factory</title>

      <para>The <code>InitialContext</code> class implements the
      <code>Context</code> interface. It can therefore delegate all the
      <code>Context</code> interface methods to the backing
      <code>Context</code> object. However, it provides a special URL lookup
      behavior for names that are formed like URLs, that is, names that
      contain a colon (<code>':' \u003A</code>) character. This behavior is
      called a <emphasis>URL lookup</emphasis>.</para>

      <para>URL lookups are not delegated to the backing Context but are
      instead first tried via a <emphasis>URL Context</emphasis> based lookup
      on the given scheme, like:</para>

      <programlisting>myscheme:foo</programlisting>

      <para>For example a lookup using
      <code>acme:foo/javax.sql.DataSource</code> results in a URL Context
      being used, rather than the backing Context.</para>

      <para>JNDI uses class loading techniques to search for an
      <code>ObjectFactory</code> class that can be used to create this URL
      Context. The Naming Manager provides a static method
      <code>getURLContext</code> for this purpose. If such a URL Context is
      found, it is used with the requested operation and uses the full URL. If
      no such URL Context can be found, the backing Context is asked to
      perform the operation with the given name.</para>

      <para>The URL lookup behavior is only done when the backing Context was
      created by the JNDI implementation in the JRE. If the backing Context
      had been created through the singleton provisioning mechanism, then no
      URL lookup is done for names that have a colon. The URL lookup
      responsibility is then left to the backing Context
      implementation.</para>
    </section>

    <section xml:id="i3097699">
      <title>Object and Reference Conversion</title>

      <para>The <code>NamingManager</code> class provides a way to create
      objects from a <emphasis>description</emphasis> with the
      <code>getObjectInstance</code> method. In general, it will iterate over
      a number of <code>ObjectFactory</code> objects and ask each one of them
      to provide the requested object. The first non-<code>null</code> result
      indicates success. These <code>ObjectFactory</code> objects are created
      from an environment property.</para>

      <para>A special case for the description argument in the
      <code>getObjectInstance</code> method is the
      <emphasis>Reference</emphasis>. A Reference is a description of an
      object that can be stored persistently. It can be re-created into an
      actual object through the static <code>getObjectInstance</code> method
      of the <code>NamingManager</code> class. The <code>Reference</code>
      object describes the actual <code>ObjectFactory</code> implementing
      class that must be used to create the object.</para>

      <para>This default behavior is completely replaced with the Object
      Factory Builder singleton by getting the to be used
      <code>ObjectFactory</code> object directly from the set singleton Object
      Factory Builder.</para>
    </section>

    <section xml:id="i3083484">
      <title>Environment</title>

      <para>JNDI clients need a way to set the configuration properties to
      select the proper JNDI Provider. For example, a JNDI Provider might
      require an identity and a password in order to access the service. This
      type of configuration is referred to as the
      <emphasis>environment</emphasis> of a Context. The environment is a set
      of properties. Common property names can be found in <xref linkend="i3109941"/>. The set of properties is build from the following
      sources (in priority order, that is later entries are shadowed by
      earlier entries):</para>

      <orderedlist>
        <listitem>
          <para>Properties set in the environment <code>Hashtable</code>
          object given in the constructor argument (if any) of the
          <code>InitialContext</code> class.</para>
        </listitem>

        <listitem>
          <para>Properties from the Java System Properties</para>
        </listitem>

        <listitem>
          <para>Properties found in
          <code>$JAVA_HOME/lib/jndi.properties</code></para>
        </listitem>
      </orderedlist>

      <para>There are some special rules around the handling of specific
      properties.</para>
    </section>

    <section xml:id="i3082552">
      <title>Naming Manager Singletons</title>

      <para>The default behavior of the JRE implementation of JNDI can be
      extended in a standardized way. The <code>NamingManager</code> class has
      two static singletons that allow JNDI Providers outside the JRE to
      provide <code>InitialContextFactory</code> and
      <code>ObjectFactory</code> objects. These singletons are set with the
      following static methods on the <code>NamingManager</code> class:</para>

      <itemizedlist>
        <listitem>
          <para><code>setObjectFactoryBuilder(ObjectFactoryBuilder)</code> - A
          hook to provide <code>ObjectFactory</code> objects.</para>
        </listitem>

        <listitem>
          <para><code>setInitialContextFactoryBuilder(InitialContextFactoryBuilder)</code>
          - A hook to provide <code>InitialContextFactory</code> objects. This
          hook is consulted to create a <code>Context</code> object that will
          be associated with an <code>InitialContext</code> object the client
          creates.</para>
        </listitem>
      </itemizedlist>

      <para>These JNDI Provider hooks are <emphasis>singletons</emphasis> and
      must be set <emphasis>before</emphasis> any application code creates an
      <code>InitialContext</code> object or any objects are converted. If
      these singletons are not set, the JNDI implementation in the JRE will
      provide a default behavior that is based on searching through classes
      defined in an environment property.</para>

      <para>Both singletons can only be set once. A second attempt to set
      these singletons results in an Illegal State Exception being
      thrown.</para>
    </section>

    <section xml:id="i3094617">
      <title>Built-In JNDI Providers</title>

      <para>The Java Runtime Environment (JRE) defines the following default
      providers:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>LDAP</emphasis> - Lightweight Directory Access
          Protocol (LDAP) service provider</para>
        </listitem>

        <listitem>
          <para><emphasis>COS</emphasis> - Corba Object Service (COS) naming
          service provider</para>
        </listitem>

        <listitem>
          <para><emphasis>RMI</emphasis> - Remote Method Invocation (RMI)
          Registry service provider</para>
        </listitem>

        <listitem>
          <para><emphasis>DNS</emphasis> - Domain Name System (DNS) service
          provider</para>
        </listitem>
      </itemizedlist>

      <para>Although these are the default JNDI Service Providers, the JNDI
      architecture provides a number of mechanisms to plug-in new types of
      providers.</para>
    </section>
  </section>

  <section>
    <title>JNDI Context Manager Service</title>

    <para>The JNDI Context Manager service allows clients to obtain a Context
    using the OSGi service model. By obtaining a JNDI Context Manager service,
    a client can get a <code>Context</code> object so that it can interact
    with the available JNDI Providers. This service replaces the approach
    where the creation of a new <code>InitialContext</code> object provided
    the client with access to an <code>InitialContext</code> object that was
    backed by a JNDI Provider's Context.</para>

    <para>The <code>JNDIContextManager</code> interface defines the following
    methods for obtaining <code>Context</code> objects:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.jndi.JNDIContextManager.newInitialContext--" xrefstyle="hyperlink"/> - Obtain a <code>Context</code> object using
        the default environment properties.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.jndi.JNDIContextManager.newInitialContext-Map-" xrefstyle="hyperlink"/> - Get a <code>Context</code> object using the
        default environment properties merged with the given
        properties.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.jndi.JNDIContextManager.newInitialDirContext--" xrefstyle="hyperlink"/> - Get a <code>DirContext</code> object using a
        default environment properties.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.jndi.JNDIContextManager.newInitialDirContext-Map-" xrefstyle="hyperlink"/> -Get a <code>DirContext</code> object using
        the default environment properties merged with the given
        properties.</para>
      </listitem>
    </itemizedlist>

    <para>The JNDI Context Manager service returns <code>Context</code>
    objects that implement the same behavior as the
    <code>InitialContext</code> class; the returned Context object does not
    actually extend the <code>InitialContext</code> class, its only guarantee
    is that it implements the <code>Context</code> interface.</para>

    <para>This <code>Context</code> object is a facade for the context that is
    created by the JNDI Provider. This JNDI Provider's Context is called the
    <emphasis>backing Context</emphasis>. This is similar to the behavior of
    the <code>InitialContext</code> class. However, in this specification, the
    facade can change or loose the backing Context due to the dynamics of the
    OSGi framework.</para>

    <para>The returned facade must also provides URL lookups, just like an
    Initial Context. However, the URL Context lookup must be based on Object
    Factory services with a service property that defines the scheme.</para>

    <para>The environment properties used to create the backing Context are
    constructed in a similar way as the environment properties of the Java SE
    JNDI, see <xref linkend="i3119408"/>.</para>

    <para>The following sections define in detail how a JNDI Provider Context
    must be created and managed.</para>

    <section xml:id="i3119408">
      <title>Environment and Bundles</title>

      <para>The Java SE JNDI looks for a file in
      <code>$JAVAHOME/lib/jndi.properties</code>, see <xref linkend="i3083484"/>. A JNDI Implementation must not use this
      information but it must use a resource in the bundle that uses the JNDI
      Context Manager service. The order is therefore:</para>

      <orderedlist>
        <listitem>
          <para>Properties set in the environment <code>Hashtable</code>
          object given in the constructor argument (if any) of the
          <code>InitialContext</code> class.</para>
        </listitem>

        <listitem>
          <para>Properties from the Java System Properties</para>
        </listitem>

        <listitem>
          <para>A properties resource from the bundle that uses the service
          called <code>/jndi.properties</code>.</para>
        </listitem>
      </orderedlist>

      <para>The following four properties do not overwrite other properties
      but are merged:</para>

      <itemizedlist>
        <listitem>
          <para><code>java.naming.factory.object</code></para>
        </listitem>

        <listitem>
          <para><code>java.naming.factory.state</code></para>
        </listitem>

        <listitem>
          <para><code>java.naming.factory.control</code></para>
        </listitem>

        <listitem>
          <para><code>java.naming.factory.url.pkgs</code></para>
        </listitem>
      </itemizedlist>

      <para>These property values are considered lists and the ultimate value
      used by the JNDI Providers is taken by merging the values found in each
      stage into a single colon separated list. For more information see <xref linkend="i3109941"/>.</para>

      <para>The environment consists of the merged properties. This
      environment is then passed to the Initial Context Factory Builder for
      the creation of an Initial Context Factory.</para>
    </section>

    <section xml:id="i3092215">
      <title>Context Creation</title>

      <para>When a client calls one of the <code>newInitialContext</code> (or
      <code>newInitialDirContext</code>) methods, the JNDI Context Manager
      service must construct an object that implements the
      <code>Context</code> interface based on the environment properties. All
      factory methods in the <code>InitialContextFactory</code> and
      <code>InitialContextFactoryBuilder</code> classes take a
      <code>Hashtable</code> object with the environment as an argument, see
      <xref linkend="i3119408"/>.</para>

      <para>The caller normally provides a specific property in the
      environment that specifies the class name of a provider class. This
      property is named:</para>

      <programlisting>java.naming.factory.initial</programlisting>

      <para>The algorithm to find the provider of the requested Context can
      differ depending on the presence or absence of the
      <code>java.naming.factory.initial</code> property in the
      environment.</para>

      <para>In the following sections the cases for presence or absence of the
      <code>java.naming.factory.initial</code> property are described. Several
      steps in these algorithm iterate over a set of available services. This
      iteration must always take place in service<emphasis> ranking
      order</emphasis>. Service ranking order follows the ordering of the
      <code>service.ranking</code> service property, which is the highest
      <code>service.ranking</code> value, or when equal, the lowest
      <code>service.id</code> value.</para>

      <para>Exception handling in the following steps is as follows:</para>

      <itemizedlist>
        <listitem>
          <para>If an Exception is thrown by an Initial Context Factory
          Builder service, then this Exception must be logged but further
          ignored.</para>
        </listitem>

        <listitem>
          <para>Exceptions thrown by the <code>InitialContextFactory</code>
          objects when creating a Context must be thrown to the caller.</para>
        </listitem>
      </itemizedlist>

      <section xml:id="i3093402">
        <title>Implementation Class Present in Environment</title>

        <para>If the implementation class is specified, a JNDI Provider is
        searched in the service registry with the following steps, which stop
        when a backing Context can be created:</para>

        <orderedlist>
          <listitem>
            <para>Find a service in ranking order that has a name matching the
            given implementation class name as well as the
            <code>InitialContextFactory</code> class name. The searching must
            take place through the Bundle Context of the requesting bundle but
            must not require that the requesting bundle imports the package of
            the implementation class. If such a matching Initial Context
            Factory service is found, it must be used to construct the
            <code>Context</code> object that will act as the backing
            Context.</para>
          </listitem>

          <listitem>
            <para>Get all the Initial Context Factory Builder services. For
            each such service, in ranking order:</para>

            <itemizedlist>
              <listitem>
                <para>Ask the Initial Context Factory Builder service to
                create a new <code>InitialContextFactory</code> object. If
                this is <code>null</code> then continue with the next
                service.</para>
              </listitem>

              <listitem>
                <para>Create the Context with the found Initial Context
                Factory and return it.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>If no backing Context could be found using these steps, then
            the JNDI Context Manager service must throw a No Initial Context
            Exception.</para>
          </listitem>
        </orderedlist>
      </section>

      <section xml:id="i3121179">
        <title>No Implementation Class Specified</title>

        <para>If the environment does not contain a value for the
        <code>java.naming.factory.initial</code> property then the following
        steps must be used to find a backing <code>Context</code>
        object.</para>

        <orderedlist>
          <listitem>
            <para>Get all the Initial Context Factory Builder services. For
            each such service, in ranking order, do:</para>

            <itemizedlist>
              <listitem>
                <para>Ask the Initial Context Factory Builder service to
                create a new <code>InitialContextFactory</code> object. If
                this is <code>null</code>, then continue with the next
                service.</para>
              </listitem>

              <listitem>
                <para>Create the backing <code>Context</code> object with the
                found Initial Context Factory service and return it.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>Get all the Initial Context Factory services. For each such
            service, in ranking order, do:</para>

            <itemizedlist>
              <listitem>
                <para>Ask the Initial Context Factory service to create a new
                <code>Context</code> object. If this is <code>null</code> then
                continue with the next service otherwise create a new Context
                with the created Context as the backing Context.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>If no Context has been found, an initial Context is returned
            without any backing. This returned initial Context can then only
            be used to perform URL based lookups.</para>
          </listitem>
        </orderedlist>
      </section>
    </section>

    <section>
      <title>Rebinding</title>

      <para>A JNDI Provider can be added or removed to the service registry at
      any time because it is an OSGi service; OSGi services are by their
      nature dynamic. When a JNDI Provider unregisters an Initial Context
      Factory that was used to create a backing service then the JNDI Context
      Manager service must remove the association between any returned
      Contexts and their now invalid backing Contexts.</para>

      <para>The JNDI Context Manager service must try to find a replacement
      whenever it is accessed and no backing Context is available. However, if
      no such replacement can be found the called function must result in
      throwing a No Initial Context Exception.</para>
    </section>

    <section>
      <title>Life Cycle and Dynamism</title>

      <para>When a client has finished with a <code>Context</code> object,
      then the client must close this <code>Context</code> object by calling
      the <code>close</code> method. When a <code>Context</code> object is
      closed, the resources held by the JNDI Implementation on the client's
      behalf for that Context must all be released. Releasing these resources
      must not affect other, independent, <code>Context</code> objects
      returned to the same client.</para>

      <para>If a client ungets the JNDI Context Manager service, all the
      <code>Context</code> objects returned through that service instance must
      automatically be closed by the JNDI Context Manager. When the JNDI
      Context Manager service is unregistered, the JNDI Context Manager must
      automatically close all Contexts held.</para>

      <para>For more information about life cycle issues, see also <xref linkend="i3079918"/>.</para>
    </section>
  </section>

  <section xml:id="i3093106">
    <title>JNDI Provider Admin service</title>

    <para>JNDI provides a general object conversion service, see <xref linkend="i3097699"/>. For this specification, the responsibility of the
    static method on the <code>NamingManager</code>
    <code>getObjectInstance</code> is replaced with the JNDI Provider Admin
    service. The <code>JNDIProviderAdmin</code> interface provides the
    following methods that can be used to convert a description object to an
    object:</para>

    <itemizedlist>
      <listitem>
        <para><link linkend="org.osgi.service.jndi.JNDIProviderAdmin.getObjectInstance-Object-javax.naming.Name-javax.naming.Context-Map-" xrefstyle="hyperlink">getObjectInstance(Object,Name,Context,Map)</link>
        - Used by Context implementations to convert a description object to
        another object.</para>
      </listitem>

      <listitem>
        <para><link linkend="org.osgi.service.jndi.JNDIProviderAdmin.getObjectInstance-Object-javax.naming.Name-javax.naming.Context-Map-javax.naming.directory.Attributes-" xrefstyle="hyperlink">getObjectInstance(Object,Name,Context,Map,Attributes)</link>
        - Used by a Dir Context implementations to convert a description
        object to another object.</para>
      </listitem>
    </itemizedlist>

    <para>In either case, the first argument is an object, called the
    <emphasis>description</emphasis>. JNDI allows a number of different Java
    types here. When either method is called, the following algorithm is
    followed to find a matching Object Factory to find/create the requested
    object. This algorithm is identical for both methods, except that the call
    that takes the <code>Attributes</code> argument consults Dir Object
    Factory services first and then Object Factory services while the method
    without the Attributes parameter only consults Object Factory
    services.</para>

    <orderedlist>
      <listitem>
        <para>If the description object is an instance of
        <code>Referenceable</code>, then get the corresponding
        <code>Reference</code> object and use this as the description
        object.</para>
      </listitem>

      <listitem>
        <para>If the description object is not a <code>Reference</code> object
        then goto step <xref linkend="i3112833"/>.</para>
      </listitem>

      <listitem>
        <para>If a factory class name is specified, the JNDI Provider Admin
        service uses its own Bundle Context to search for a service registered
        under the Reference's factory class name. If a matching Object Factory
        is found then it is used to create the object from the
        <code>Reference</code> object and the algorithm stops here.</para>
      </listitem>

      <listitem xml:id="i3112861">
        <para>If no factory class name is specified, iterate over all the
        Reference object's <code>StringRefAddrs</code> objects with the
        address type of <code>URL</code>. For each matching address type, use
        the value to find a matching URL Context, see <xref linkend="i3116133"/>, and use it to recreate the object. See the
        Naming Manager for details. If an object is created then it is
        returned and the algorithm stops here.</para>
      </listitem>

      <listitem xml:id="i3112833">
        <para>Iterate over the Object Factory Builder services in ranking
        order. Attempt to use each such service to create an
        <code>ObjectFactory</code> or <code>DirObjectFactory</code> instance.
        If this succeeds (non <code>null</code>) then use this
        <code>ObjectFactory</code> or <code>DirObjectFactory</code> instance
        to recreate the object. If successful, the algorithm stops
        here.</para>
      </listitem>

      <listitem>
        <para>If the description was a Reference and without a factory class
        name specified, or if the description was not of type Reference, then
        attempt to convert the object with each Object Factory service (or Dir
        Object Factory service for directories) service in ranking order until
        a non-<code>null</code> value is returned.</para>
      </listitem>

      <listitem>
        <para>If no <code>ObjectFactory</code> implementations can be located
        to resolve the given description object, the description object is
        returned.</para>
      </listitem>
    </orderedlist>

    <para>If an Exception occurs during the use of an Object Factory Builder
    service then this exception should be logged but must be ignored. If,
    however, an Exception occurs during the calling of a found
    <code>ObjectFactory</code> or <code>DirObjecFactory</code> object then
    this Exception must be re-thrown to the caller of the JNDI Provider Admin
    service.</para>
  </section>

  <section>
    <title>JNDI Providers</title>

    <para>JNDI Providers can be registered by registering an appropriate
    service. These services are consulted by the JNDI Implementation for
    creating a Context as well as creating/finding/converting general
    objects.</para>

    <section>
      <title>Initial Context Factory Builder Provider</title>

      <para>An Initial Context Factory Builder provider is asked to provide an
      Initial Context Factory when no implementation class is specified or no
      such implementation can be found. An Initial Context Factory Builder
      service can be used by containers for other bundles to control the
      initial Context their applications receive.</para>

      <para>An Initial Context Factory Builder provider must register an
      Initial Context Factory Builder service. The
      <code>service.ranking</code> property defines the iteration ordering of
      multiple Initial Context Factory Builder services. Implementations must
      be careful to correctly provide defaults.</para>

      <para>For example, a container could use a thread local variable to mark
      the stack for a specific application. The implementation of the Initial
      Context Factory Builder can then detect specific calls from this
      application. To make the next code example work, an instance must be
      registered as an Initial Context Factory Builder service.</para>

      <programlisting>public class Container implements InitialContextFactoryBuilder {
    ThreadLocal&lt;Application&gt; apps;

    void startApp(final Application app) {
        Thread appThread = new Thread(app.getName()) {
            public void run() {
                apps.set(app);
                    app.run();
    }}}

    public InitialContextFactory 
        createInitialContextFactory( Hashtable&lt;?,?&gt; ht ) {
        final Application app = apps.get();
        if ( app == null )
          return null;

        return new InitialContextFactory() {
            public Context getInitialContext( Hashtable&lt;?,?&gt;env) {
                return app.getContext(env);
            }
        };
 } }</programlisting>
    </section>

    <section>
      <title>Initial Context Factory Provider</title>

      <para>An Initial Context Factory provides Contexts of a specific type.
      For example, those contexts allow communications with an LDAP server. An
      Initial Context Factory Provider must register the its Initial Context
      Factory service under the following names:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Implementation Class</emphasis> - An Initial Context
          Factory provider must register a service under the name of the
          implementation class. This allows the JNDI Context Manager to find
          implementations specified in the environment properties.</para>
        </listitem>

        <listitem>
          <para><emphasis>Initial Context Factory</emphasis> - As a general
          Initial Context Factory. If registered as such, it can be consulted
          for a default Initial Context. Implementations must be careful to
          only return a Context when the environment properties are
          appropriate. See <xref linkend="i3121179"/></para>
        </listitem>
      </itemizedlist>

      <para>An Initial Context Factory service can create both
      <code>DirContext</code> as well as <code>Context</code> objects.</para>

      <para>For example, SUN JREs for Java SE provide an implementation of a
      Context that can answer DNS questions. The name of the implementation
      class is a well known constant. The following class can be used with
      Declarative Services to provide a lazy implementation of a DNS
      Context:</para>

      <programlisting>public class DNSProvider implements InitialContextFactory{
    public Context createInitialContextFactory( Hashtable&lt;?,?&gt;env ) throws 
        NamingException {
        try {
            Class&lt;InitialContextFactory&gt; cf = (Class&lt;InitialContextFactory&gt;)
                l.loadClass("com.sun.jndi.dns.DnsContextFactory" );
            InitialContextFactory icf = cf.newInstance();
            return icf.createInitialContextFactory(env);
        } catch( Throwable t ) {
            return null;
        }
    }
}</programlisting>
    </section>

    <section>
      <title>Object Factory Builder Provider</title>

      <para>An Object Factory Builder provider must register an Object Factory
      Builder service. Such a service can be used to provide
      <code>ObjectFactory</code> and/or <code>DirObjectFactory</code> objects.
      An Object Factory Builder service is requested for such an object when
      no specific converter can be found. This service can be leveraged by
      bundles that act as a container for other bundles to control the object
      conversion for their subjects.</para>
    </section>

    <section>
      <title>Object Factory Provider</title>

      <para>An Object Factory provider can participate in the conversion of
      objects. It must register a service under the following names:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Implementation Class</emphasis> - A service
          registered under its implementation class can be leveraged by a
          description that is a <code>Reference</code> object. Such an object
          can contain the name of the factory class. The implementation class
          can implement the <code>DirObjectFactory</code> interface or the
          <code>ObjectFactory</code> interface.</para>
        </listitem>

        <listitem>
          <para><emphasis>Object Factory</emphasis> - The
          <code>ObjectFactory</code> interface is necessary to ensure class
          space consistency.</para>
        </listitem>

        <listitem>
          <para><emphasis>Dir Object Factory</emphasis> - If the Object
          Factory provider can accept the additional Attributes argument in
          the <code>getObjectInstance</code> method of the JNDI Provider Admin
          service than it must also register as a Dir Object Factory
          service.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i3116133">
      <title>URL Context Provider</title>

      <para>A <emphasis>URL Context Factory</emphasis> is a special type of an
      Object Factory service. A URL Context Factory must be registered as an
      Object Factory service with the following service property:</para>

      <itemizedlist>
        <listitem>
          <para><code>osgi.jndi.url.scheme</code> - The URL scheme associated
          with this URL Context, for example <code>acme</code>. The scheme
          must not contain the colon (<code>':' \u003A</code>).</para>
        </listitem>
      </itemizedlist>

      <para>A URL Context is used for URL based operations on an initial
      Context. For example, a lookup to
      <code>acme:foo/javax.sql.DataSource</code> must not use the provider
      based lookup mechanism of the backing Context but instead causes a
      lookup for the requested URL Context. A URL Context also provides a
      secondary mechanism for restoring <code>Reference</code> objects.</para>

      <para>When an initial Context returned by the JNDI Context Manager
      service is given a URL based operation, it searches in the service
      registry for an Object Factory service that is published with the URL
      scheme property that matches the scheme used from the lookup
      request.</para>

      <para>It then calls the <code>getInstance</code> method on the Object
      Factory service with the following parameters:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Object</emphasis> - Should be either a
          <code>String</code>, <code>String[]</code>, or
          <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Name</emphasis> - must be <code>null</code></para>
        </listitem>

        <listitem>
          <para><emphasis>Context</emphasis> - must be
          <code>null</code></para>
        </listitem>

        <listitem>
          <para><emphasis>Hashtable</emphasis> - The environment
          properties.</para>
        </listitem>
      </itemizedlist>

      <para>Calling the <code>getInstance</code> method must return a
      <code>Context</code> object. This context is then used to perform the
      lookup.</para>

      <para>The life cycle of the Object Factory used to create the URL
      Context is tied to the JNDI context that was used to perform the URL
      based JNDI operation. By the time JNDI context is closed any
      <code>ObjectFactory</code> objects held to process the URL lookups must
      be released (unget).</para>
    </section>

    <section xml:id="i3104232">
      <title>JRE Context Providers</title>

      <para>The Java Runtime Environment (JRE) defines a number of default
      naming providers., see <xref linkend="i3094617"/>. These naming
      providers are not OSGi aware, but are commonly used and are provided by
      the JRE. These naming providers rely on the <code>NamingManager</code>
      class for object conversion and finding URL Contexts.</para>

      <para>The JRE default providers are made available by the JNDI
      Implementation. This JNDI Implementation must register a
      <emphasis>built-in</emphasis> Initial Context Factory Builder service
      that is capable of loading any <code>InitialContextFactory</code>
      classes of the JRE providers.</para>

      <para>When this built-in Initial Context Factory Builder is called to
      create an <code>InitialContextFactory</code> object it must look in the
      environment properties that were given as an argument and extract the
      <code>java.naming.factory.initial</code> property; this property
      contains the name of the class of a provider. The built-in Initial
      Context Factory Builder then must use the bootstrap class loader to load
      the given <code>InitialContextFactory</code> class and creates a new
      instance with the no arguments constructor and return it. If this fails,
      it must return <code>null</code>. This mechanism will allow loading of
      any built-in providers.</para>

      <para>This built-in Initial Context Factory Builder service must be
      registered with no <code>service.ranking</code> property. This will give
      it the default ranking and allows other providers to override the
      default.</para>
    </section>
  </section>

  <section xml:id="i3134320">
    <title>OSGi URL Scheme</title>

    <para>A URL scheme is available that allows JNDI based applications to
    access services in the service registry, see <xref linkend="i3113878"/>
    about restrictions on these services. The URL scheme is specified as
    follows:</para>

    <programlisting>service   ::= 'osgi:service/' query
query     ::= jndi-name |  qname ( '/' filter )?
jndi-name ::= &lt;any string&gt;</programlisting>

    <para>No spaces are allowed between the terms.</para>

    <para>This OSGi URL scheme can be used to perform a lookup of a single
    matching service using the interface name and filter. The URL Context must
    use the <emphasis>owning bundle</emphasis> to perform the service queries.
    The owning bundle is the bundle that requested the initial Context from
    the JNDI Context Manager service or received its Context through the
    <code>InitialContext</code> class. The returned objects must not be
    incompatible with the class space of the owning bundle.</para>

    <para>The lookup for a URL with the <code>osgi:</code> scheme and
    <code>service</code> path returns the service with highest
    <code>service.ranking</code> and the lowest <code>service.id</code>. This
    scheme only allows a single service to be found. Multiple services can be
    obtained with the <code>osgi:</code> scheme and <code>servicelist</code>
    path:</para>

    <programlisting>servicelist ::= 'osgi:servicelist/' query?</programlisting>

    <para>If this <code>osgi:servicelist</code> scheme is used from a lookup
    method then a <code>Context</code> object is returned instead of a service
    object. Calling the <code>listBindings</code> method will produce a
    <code>NamingEnumeration</code> object that provides <code>Binding</code>
    objects. A Binding object contains the name, class of the service, and the
    service object. The bound object is the service object contained in the
    given Context.</para>

    <para>When the <code>Context</code> class <code>list</code> method is
    called, the Naming Enumeration object provides a
    <code>NameClassPair</code> object. This <code>NameClassPair</code> object
    will include the name and class of each service in the Context. The
    <code>list</code> method can be useful in cases where a client wishes to
    iterate over the available services without actually getting them. If the
    service itself is required, then <code>listBindings</code> method should
    be used.</para>

    <para>If multiple services matched the criteria listed in the URL, there
    would be more than one service available in the Context, and the
    corresponding Naming Enumeration would contain the same number of
    services.</para>

    <para>If multiple services match, a call to <code>listBindings</code> on
    this Context would return a list of bindings whose name are a string with
    the <code>service.id</code> number, for example:</para>

    <programlisting>1283</programlisting>

    <para>Thus the following lookup is valid:</para>

    <programlisting>osgi:servicelist/javax.sql.DataSource/(&amp;(db=mydb)(version=3.1))</programlisting>

    <para>A service can provide a <emphasis>JNDI service name</emphasis> if it
    provides the following service property:</para>

    <itemizedlist>
      <listitem>
        <para><code>osgi.jndi.service.name</code> - An alternative name that
        the service can be looked up by when the <code>osgi:</code> URL scheme
        is used.</para>
      </listitem>
    </itemizedlist>

    <para>If a service is published with a JNDI service name then the service
    matches any URL that has this service name in the place of
    <code>interface</code>. For example, if the JNDI service name is
    <code>foo</code>, then the following URL selects this service:</para>

    <programlisting>osgi:service/foo</programlisting>

    <para>Using a JNDI service name that can be interpreted as an interface
    name must be avoided, if this happens the result is undefined.</para>

    <para>A JNDI client can also obtain the Bundle Context of the owning
    bundle by using the <code>osgi:</code> scheme namespace with the
    <code>framework/bundleContext</code> name. The following URL must return
    the Bundle Context of the owning bundle:</para>

    <programlisting>osgi:framework/bundleContext</programlisting>

    <para>After the <code>NamingEnumeration</code> object has been used it
    must be closed by the client. Implementations must then unget any gotten
    services or perform other cleanup.</para>

    <section>
      <title>Service Proxies</title>

      <para>The OSGi URL Context handles the complexities by hiding the
      dynamic nature of OSGi. The OSGi URL Context must handle the dynamics by
      <emphasis>proxying</emphasis> the service objects<emphasis>.</emphasis>
      This proxy must implement the interface given in the URL. If the JNDI
      service name instead of a class name is used, then all interfaces under
      which the service is registered must be implemented. If an interface is
      not compatible with the owning bundle's class space then it must not be
      implemented on the proxy, it must then be ignored. If this results in no
      implemented interfaces then an Illegal Argument Exception must be
      thrown.</para>

      <para>Interfaces can always be proxied but classes are much harder. For
      this reason, an implementation is free to throw an Illegal Argument
      Exception when a class is used in the URL or in one of the registration
      names.</para>

      <para>Getting the actual service object can be delayed until the proxy
      is actually used to call a method. If a method is called and the actual
      service has been unregistered, then the OSGi URL Context must attempt to
      rebind it to another service that matches the criteria given in the URL
      the next time it is called. When no alternative service is available, a
      Service Exception with the <code>UNREGISTERED</code> type code must be
      thrown. Services obtained with the <code>osgi:</code> URL scheme must
      therefore be stateless because the rebinding to alternative services is
      not visible to the caller; there are no listeners defined for this
      rebinding, see <xref linkend="i3113878"/>.</para>

      <para>If the reference was looked up using <code>osgi:servicelist</code>
      then proxies must still be used, however, these proxies must not rebind
      when their underlying service is unregistered. Instead, they must throw
      a Service Exception with the <code>UNREGISTERED</code> type whenever the
      proxy is used and the proxied service is no longer available.</para>
    </section>

    <section xml:id="i3113878">
      <title>Services and State</title>

      <para>A service obtained through a URL Context lookup is proxied. During
      the usage of this service, the JNDI Implementation can be forced to
      transparently rebind this service to another instance. The JNDI
      specification is largely intended for portability. For this reason, it
      has no mechanism architected to receive notifications about this
      rebinding. The client code is therefore unable to handle the
      dynamics.</para>

      <para>The consequence of this model is that stateful services require
      extra care because applications cannot rely on the fact that they always
      communicate with the same service. Virtually all OSGi specified services
      have state.</para>
    </section>
  </section>

  <section>
    <title>Traditional Client Model</title>

    <para>A JNDI Implementation must at startup register the
    <code>InitialContextFactoryBuilder</code> object and the
    <code>ObjectFactoryBuilder</code> object with the
    <code>NamingManager</code> class. As described in <xref linkend="i3095960"/>, the JNDI code in the JRE will then delegate all
    Context related requests to the JNDI Implementation. Setting these
    singletons allows code that is not aware of the OSGi framework to use
    <code>Context</code> implementations from JNDI Providers registered with
    the OSGi service registry and that are managed as bundles. The JNDI
    Implementation therefore acts as a broker to the service registry for OSGi
    unaware code.</para>

    <para>This brokering role can only be played when the JNDI Implementation
    can set the singletons as specified in <xref linkend="i3082552"/>. If the
    JNDI Implementation cannot set these singletons then it should log an
    error with the Log Service, if available. It can then not perform the
    following sections.</para>

    <section>
      <title>New Initial Context</title>

      <para>The client typically requests a Context using the following
      code:</para>

      <programlisting>Hashtable env = new Hashtable();
env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
InitialContext ctx = new InitialContext(env);</programlisting>

      <para>The created <code>InitialContext</code> object is a facade for the
      real Context that is requested by the caller. It provides the
      bootstrapping mechanism for JNDI Provider pluggability. In order to
      obtain the provider's Context, the <code>InitialContext</code> class
      makes a call to the static <code>getContext</code> method on the
      <code>NamingManager</code> class. The JNDI code in the JRE then
      delegates any request for an initial Context object to the JNDI
      Implementation through the registered
      <code>InitialContextFactoryBuilder</code> singleton. The JNDI
      Implementation then determines the Bundle Context of the caller as
      described in <xref linkend="i3081937"/>. If no such Bundle Context can
      be found, a No Initial Context Exception is thrown to the caller. This
      Bundle Context must be from an <code>ACTIVE</code> bundle.</para>

      <para>This Bundle Context is then used to get the JNDI Context Manager
      service. This service is then used as described in <xref linkend="i3092215"/> to get an initial Context. This initial Context is
      then used in the <code>InitialContext</code> object as the
      <emphasis>default initial context</emphasis>. In this specification this
      is normally called the backing context. An <code>InitialContext</code>
      object constructed through an Initial Context Factory Builder will not
      use the URL lookup mechanism, it must delegate all operations to the its
      backing context. A Context obtained through the JNDI Context Manager
      provides the URL lookup behavior instead.</para>
    </section>

    <section>
      <title>Static Conversion</title>

      <para>JNDI provides a general object conversion facility that is used by
      the URL Context and the process of restoring an object from a
      <code>Reference</code> object, see <xref linkend="i3097699"/>. A JNDI
      Implementation must take over this conversion by setting the static
      Object Factory Builder singleton, see <xref linkend="i3082552"/>.
      Non-OSGi aware <code>Context</code> implementations will use the
      <code>NamingManager</code> static <code>getObjectInstance</code> method
      for object conversion. This method then delegates to the set singleton
      Object Factory Builder to obtain an <code>ObjectFactory</code> object
      that understands how to convert the given description to an object. The
      JNDI Implementation must return an Object Factory that understands the
      OSGi service registry. If the <code>getObjectInstance</code> method is
      called on this object it must use the same rules as defined for the JNDI
      Provider Admin service <xref linkend="org.osgi.service.jndi.JNDIProviderAdmin.getObjectInstance-Object-javax.naming.Name-javax.naming.Context-Map-" xrefstyle="hyperlink"/> method, see <xref linkend="i3093106"/>. The
      Bundle Context that must be used with respect to this service is the
      caller's Bundle Context, see <xref linkend="i3081937"/>. If the Bundle
      Context is not found, the description object must be returned. The
      calling bundle must not be required to import the
      <code>org.osgi.service.jndi</code> package.</para>
    </section>

    <section xml:id="i3081937">
      <title>Caller's Bundle Context</title>

      <para>The following mechanisms are used to determine the callers Bundle
      Context:</para>

      <orderedlist>
        <listitem>
          <para>Look in the JNDI environment properties for a property
          called</para>

          <para><programlisting>osgi.service.jndi.bundleContext</programlisting></para>

          <para>If a value for this property exists then use it as the Bundle
          Context. If the Bundle Context has been found stop.</para>
        </listitem>

        <listitem>
          <para>Obtain the Thread Context Class Loader; if it, or an ancestor
          class loader, implements the <code>BundleReference</code> interface,
          call its <code>getBundle</code> method to get the client's Bundle;
          then call <code>getBundleContext</code> on the <code>Bundle</code>
          object to get the client's Bundle Context. If the Bundle Context has
          been found stop.</para>
        </listitem>

        <listitem>
          <para>Walk the call stack until the invoker is found. The invoker
          can be the caller of the <code>InitialContext</code> class
          constructor or the <code>NamingManager</code> or
          <code>DirectoryManager</code> <code>getObjectInstance</code>
          methods.</para>

          <itemizedlist>
            <listitem>
              <para>Get the class loader of the caller and see if it, or an
              ancestor, implements the <code>BundleReference</code>
              interface.</para>
            </listitem>

            <listitem>
              <para>If a Class Loader implementing the
              <code>BundleReference</code> interface is found call the
              <code>getBundle</code> method to get the clients Bundle; then
              call the <code>getBundleContext</code> method on the Bundle to
              get the clients Bundle Context.</para>
            </listitem>

            <listitem>
              <para>If the Bundle Context has been found stop, else continue
              with the next stack frame.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </orderedlist>
    </section>

    <section xml:id="i3079918">
      <title>Life Cycle Mismatch</title>

      <para>The use of static access to the JNDI mechanisms,
      <code>NamingManager</code> and <code>InitialContext</code> class
      methods, in the traditional client programming model produces several
      problems with regard to the OSGi life cycle. The primary problem being
      that there is no dependency management in place when static methods are
      used. These problems do not exist for the JNDI Context Manager service.
      Therefore, OSGi applications are strongly encouraged to use the JNDI
      Context Manager service.</para>

      <para>The traditional programming model approach relies on two JVM
      singletons in the Naming Manager, see <xref linkend="i3082552"/>. The
      JNDI Implementation bundle must set both singletons before it registers
      its JNDI Context Manager service and JNDI Provider Admin service.
      However, in OSGi there is no defined start ordering, primarily because
      bundles can be updated at any moment in time and will at such time not
      be available to provide their function anyway. For this reason, OSGi
      bundles express their dependencies with services.</para>

      <para>The lack of start ordering means that a bundle could create an
      <code>InitialContext</code> object before the JNDI Implementation has
      had the chance to set the static Initial Context Factory Builder
      singleton. This means that the JNDI implementation inside the JRE will
      provide its default behavior and likely have to throw an exception. A
      similar exception is thrown for the Object Factory Builder
      singleton.</para>

      <para>There is a also a (small) possibility that a client will call
      <code>new InitialContext()</code> after the singletons have been set,
      but before the JNDI Context Manager and JNDI Provider Admin services
      have been registered. This specification requires that these services
      are set after the singletons are set. In this race condition the JNDI
      Implementation should throw a No Initial Context Exception, explaining
      that the JNDI services are not available yet.</para>
    </section>
  </section>

  <section>
    <title>Security</title>

    <section>
      <title>JNDI Implementation</title>

      <para>A JNDI Implementation may wish to assert that the user of the
      provider has some relevant Java 2 security permission. Since the JNDI
      implementation is an intermediary between the JNDI client and provider
      this means that the JNDI implementation needs to have any permissions
      required to access any JNDI Provider. As a result the JNDI
      implementation needs All Permission. This will result in the JNDI
      clients permissions being checked to see if it has the relevant
      permission to access the JNDI Provider.</para>

      <para>The JNDI Implementation must make any invocation to access these
      services in a <code>doPriviledged</code> check. A JNDI client must
      therefore not be required to have the following permissions, which are
      needed by a JNDI Implementation:</para>

      <programlisting>ServicePermission ..ObjectFactory                REGISTER,GET
ServicePermission ..DirObjectFactory             REGISTER,GET
ServicePermission ..ObjectFactoryBuilder         REGISTER,GET
ServicePermission ..InitialContextFactory        REGISTER,GET
ServicePermission ..InitialContextFactoryBuilder REGISTER,GET
ServicePermission ..JNDIProviderAdmin            REGISTER,GET</programlisting>

      <para>The JNDI Implementation bundle must have the appropriate
      permissions to install the <code>InitialContextFactoryBuilder</code> and
      <code>ObjectFactoryBuilder</code> instances using the appropriate
      methods on the <code>NamingManager</code> class. This requires the
      following permission:</para>

      <programlisting>RuntimePermission "setFactory"</programlisting>
    </section>

    <section>
      <title>JNDI Clients</title>

      <para>A JNDI client using the JNDI Context Manager service must have the
      following permissions:</para>

      <programlisting>ServicePermission ..JNDIContextManager           GET</programlisting>

      <para>Obtaining a reference to a JNDI Context Manager service should be
      considered a privileged operation and should be guarded by
      permissions.</para>
    </section>

    <section>
      <title>OSGi URL namespace</title>

      <para>A JNDI client must not be able to obtain services or a Bundle
      Context that the client bundle would not be able to get via the core
      OSGi API. To allow a client to use the <code>osgi</code> namespace to
      get a service the bundle must have the corresponding Service Permission.
      When using the <code>osgi</code> namespace to obtain the Bundle Context
      the client bundle must have Admin Permission for the Bundle Context.
      These permissions must be enforced by the <code>osgi</code> URL
      namespace handler. If there is no proper permission, the implementation
      must throw a Name Not Found Exception to prevent exposing the existence
      of such services.</para>
    </section>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.jndi" xml:id="org.osgi.service.jndi" xml:base="../../generated/javadoc/docbook/org.osgi.service.jndi.xml">
   <title>org.osgi.service.jndi</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.jndi-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.jndi-version.number">1.0</edition>
   </info>
   <para>
JNDI Package Version 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.jndi; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.jndi; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.jndi.JNDIConstants">
                  <code>JNDIConstants</code>
               </link> - 
Constants for the JNDI implementation.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.jndi.JNDIContextManager">
                  <code>JNDIContextManager</code>
               </link> - 
This interface defines the OSGi service interface for the JNDIContextManager.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.jndi.JNDIProviderAdmin">
                  <code>JNDIProviderAdmin</code>
               </link> - 
This interface defines the OSGi service interface for the JNDIProviderAdmin
 service.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="JNDIConstants" xml:id="org.osgi.service.jndi.JNDIConstants">
      <title>public class JNDIConstants</title>
      <para>
Constants for the JNDI implementation.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="BUNDLE_CONTEXT" xml:id="org.osgi.service.jndi.JNDIConstants.BUNDLE_CONTEXT">
         <title>public static final String BUNDLE_CONTEXT = "osgi.service.jndi.bundleContext"</title>
         <para>
This JNDI environment property can be used by a JNDI client to indicate
 the caller's BundleContext. This property can be set and passed to an
 InitialContext constructor. This property is only useful in the
 "traditional" mode of JNDI.
   </para>
      </section>
      <section role="field" xreflabel="JNDI_SERVICENAME" xml:id="org.osgi.service.jndi.JNDIConstants.JNDI_SERVICENAME">
         <title>public static final String JNDI_SERVICENAME = "osgi.jndi.service.name"</title>
         <para>
This service property is set on an OSGi service to provide a name that
 can be used to locate the service other than the service interface name.
   </para>
      </section>
      <section role="field" xreflabel="JNDI_URLSCHEME" xml:id="org.osgi.service.jndi.JNDIConstants.JNDI_URLSCHEME">
         <title>public static final String JNDI_URLSCHEME = "osgi.jndi.url.scheme"</title>
         <para>
This service property is set by JNDI Providers that publish URL Context
 Factories as OSGi Services. The value of this property should be the URL
 scheme that is supported by the published service.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="JNDIContextManager" xml:id="org.osgi.service.jndi.JNDIContextManager">
      <title>public interface JNDIContextManager</title>
      <para>
This interface defines the OSGi service interface for the JNDIContextManager.
 
 This service provides the ability to create new JNDI Context instances
 without relying on the InitialContext constructor.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="newInitialContext()" xml:id="org.osgi.service.jndi.JNDIContextManager.newInitialContext--">
         <title>public Context newInitialContext() throws NamingException</title>
         <para role="description">
Creates a new JNDI initial context with the default JNDI environment
 properties.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>an instance of javax.naming.Context</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NamingException</code>– upon any error that occurs during context
         creation   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="newInitialContext(Map)" xml:id="org.osgi.service.jndi.JNDIContextManager.newInitialContext-Map-">
         <title>public Context newInitialContext(Map environment) throws NamingException</title>
         <formalpara role="parameter">
            <title>environment</title>
            <para>JNDI environment properties specified by caller</para>
         </formalpara>
         <para role="description">
Creates a new JNDI initial context with the specified JNDI environment
 properties.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>an instance of javax.naming.Context</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NamingException</code>– upon any error that occurs during context
         creation   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="newInitialDirContext()" xml:id="org.osgi.service.jndi.JNDIContextManager.newInitialDirContext--">
         <title>public DirContext newInitialDirContext() throws NamingException</title>
         <para role="description">
Creates a new initial DirContext with the default JNDI environment
 properties.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>an instance of javax.naming.directory.DirContext</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NamingException</code>– upon any error that occurs during context
         creation   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="newInitialDirContext(Map)" xml:id="org.osgi.service.jndi.JNDIContextManager.newInitialDirContext-Map-">
         <title>public DirContext newInitialDirContext(Map environment) throws NamingException</title>
         <formalpara role="parameter">
            <title>environment</title>
            <para>JNDI environment properties specified by the caller</para>
         </formalpara>
         <para role="description">
Creates a new initial DirContext with the specified JNDI environment
 properties.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>an instance of javax.naming.directory.DirContext</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NamingException</code>– upon any error that occurs during context
         creation   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="JNDIProviderAdmin" xml:id="org.osgi.service.jndi.JNDIProviderAdmin">
      <title>public interface JNDIProviderAdmin</title>
      <para>
This interface defines the OSGi service interface for the JNDIProviderAdmin
 service.
 
 This service provides the ability to resolve JNDI References in a dynamic
 fashion that does not require calls to
 <code>NamingManager.getObjectInstance()</code>. The methods of this service
 provide similar reference resolution, but rely on the OSGi Service Registry
 in order to find <code>ObjectFactory</code> instances that can convert a Reference
 to an Object.
 
 This service will typically be used by OSGi-aware JNDI Service Providers.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="getObjectInstance(Object,javax.naming.Name,javax.naming.Context,Map)" xml:id="org.osgi.service.jndi.JNDIProviderAdmin.getObjectInstance-Object-javax.naming.Name-javax.naming.Context-Map-">
         <title>public Object getObjectInstance(Object refInfo,Name name,Context context,Map environment) throws Exception</title>
         <formalpara role="parameter">
            <title>refInfo</title>
            <para>Reference info</para>
         </formalpara>
         <formalpara role="parameter">
            <title>name</title>
            <para>the JNDI name associated with this reference</para>
         </formalpara>
         <formalpara role="parameter">
            <title>context</title>
            <para>the JNDI context associated with this reference</para>
         </formalpara>
         <formalpara role="parameter">
            <title>environment</title>
            <para>the JNDI environment associated with this JNDI context</para>
         </formalpara>
         <para role="description">
Resolve the object from the given reference.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>an Object based on the reference passed in, or the original
         reference object if the reference could not be resolved.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– in the event that an error occurs while attempting to
         resolve the JNDI reference.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getObjectInstance(Object,javax.naming.Name,javax.naming.Context,Map,javax.naming.directory.Attributes)" xml:id="org.osgi.service.jndi.JNDIProviderAdmin.getObjectInstance-Object-javax.naming.Name-javax.naming.Context-Map-javax.naming.directory.Attributes-">
         <title>public Object getObjectInstance(Object refInfo,Name name,Context context,Map environment,Attributes attributes) throws Exception</title>
         <formalpara role="parameter">
            <title>refInfo</title>
            <para>Reference info</para>
         </formalpara>
         <formalpara role="parameter">
            <title>name</title>
            <para>the JNDI name associated with this reference</para>
         </formalpara>
         <formalpara role="parameter">
            <title>context</title>
            <para>the JNDI context associated with this reference</para>
         </formalpara>
         <formalpara role="parameter">
            <title>environment</title>
            <para>the JNDI environment associated with this JNDI context</para>
         </formalpara>
         <formalpara role="parameter">
            <title>attributes</title>
            <para>the naming attributes to use when resolving this object</para>
         </formalpara>
         <para role="description">
Resolve the object from the given reference.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>an Object based on the reference passed in, or the original
         reference object if the reference could not be resolved.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– in the event that an error occurs while attempting to
         resolve the JNDI reference.   </para>
         </formalpara>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i3131859"><title>Java Naming and Directory
      Interface</title>http://docs.oracle.com/javase/6/docs/technotes/guides/jndi/index.html</bibliomixed>

      <bibliomixed><title>Java Naming and Directory Interface Tutorial from
      Sun
      Microsystems</title>http://download.oracle.com/javase/6/docs/technotes/guides/jndi/index.html</bibliomixed>

      <bibliomixed xml:id="i3109941"><title>JNDI Standard Property
      Names</title>http://download.oracle.com/javase/1.5.0/docs/api/javax/naming/Context.html</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="127" revision="$Id: 42c102f9792644b6e343a00bbf4e854173cad98d $" version="5" xml:id="service.jpa" xml:base="../127/service.jpa.xml">
  <title>JPA Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.jpa-version" linkend="org.osgi.service.jpa"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The Java Persistence API (JPA) is a specification that sets a
    standard for persistently storing objects in enterprise and non-enterprise
    Java based environments. JPA provides an Object Relational Mapping (ORM)
    model that is configured through persistence descriptors. This Java
    Persistence Service specification defines how persistence units can be
    published in an OSGi framework, how client bundles can find these
    persistence units, how database drivers are found with the OSGi JDBC
    Specification, as well as how JPA providers can be made available within
    an OSGi framework.</para>

    <para>Applications can be managed or they can be unmanaged. Managed
    applications run inside a Java EE Container and unmanaged applications run
    in a Java SE environment. The managed case requires a provider interface
    that can be used by the container, while in the unmanaged case the JPA
    provider is responsible for supporting the client directly. This
    specification is about the unmanaged model of JPA except in the areas
    where the managed model is explicitly mentioned. Additionally, multiple
    concurrent providers for the unmanaged case are not supported.</para>

    <para>This JPA Specification supports both <xref linkend="i3075794"/> and
    <xref linkend="i3075842"/>.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Dependencies</emphasis> - There must be a way for
          persistence clients, if they so require, to manage their
          dependencies on a compatible persistence unit.</para>
        </listitem>

        <listitem>
          <para><emphasis>Compatibility</emphasis> - The Persistence Unit
          service must be able to function in non-managed mode according to
          existing standards and interfaces outlined in the JPA
          specification.</para>
        </listitem>

        <listitem>
          <para><emphasis>Modularity</emphasis> - Persistent classes and their
          accompanying configuration can exist in a separate bundle from the
          client that is operating on them using the Persistence Unit
          service.</para>
        </listitem>

        <listitem>
          <para><emphasis>JDBC</emphasis> - Leverage the OSGi JDBC
          Specification for access to the database.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>JPA</emphasis> - The Java Persistence API, <xref linkend="i3075794"/> and <xref linkend="i3075842"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>JPA Provider</emphasis> - An implementation of JPA,
          providing the Persistence Provider and JPA Services to Java EE
          Containers and Client Bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Interface Bundle</emphasis> - A bundle containing
          the interfaces and classes in the <code>javax.persistence</code>
          namespace (and its sub-namespaces) that are defined by the JPA
          specification.</para>
        </listitem>

        <listitem>
          <para><emphasis>Persistence Bundle</emphasis> - A bundle that
          includes, a Meta-Persistence header, one or more Persistence
          Descriptor resources, and the entity classes specified by the
          Persistence Units in those resources.</para>
        </listitem>

        <listitem>
          <para><emphasis>Client Bundle</emphasis> - The bundle that uses the
          Persistence Bundle to retrieve and store objects.</para>
        </listitem>

        <listitem>
          <para><emphasis>Persistence Descriptor</emphasis> - A resource
          describing one or more Persistence Units.</para>
        </listitem>

        <listitem>
          <para><emphasis>Persistence Unit</emphasis> - A named configuration
          for the object-relational mappings and database access as defined in
          a Persistence Descriptor.</para>
        </listitem>

        <listitem>
          <para><emphasis>Entity Manager</emphasis> - The interface that
          provides the control point of retrieving and persisting objects in a
          relational database based on a single Persistence Unit for a single
          session.</para>
        </listitem>

        <listitem>
          <para><emphasis>Entity Manager Factory</emphasis> - A service that
          can create Entity Managers based on a Persistence Unit for different
          sessions.</para>
        </listitem>

        <listitem>
          <para><emphasis>Entity Manager Factory Builder</emphasis> - A
          service that can build an Entity Manager Factory for a specific
          Persistence Unit with extra configuration parameters.</para>
        </listitem>

        <listitem>
          <para><emphasis>Managed Client</emphasis> - A Client Bundle that is
          managed by a Container</para>
        </listitem>

        <listitem>
          <para><emphasis>Static Client</emphasis> - A Client that uses the
          static factory methods in the Persistence class instead of
          services.</para>
        </listitem>

        <listitem>
          <para><emphasis>Static Persistence</emphasis> - The actor that
          enables the use of the <code>Persistence</code> class static factory
          methods to obtain an Entity Manager Factory.</para>
        </listitem>

        <listitem>
          <para><emphasis>JDBC Provider</emphasis> - The bundle providing a
          Data Source Factory service.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>JPA Service overview</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="4.229in" contentwidth="7.000in" fileref="jpa-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section xml:id="i3113425">
      <title>Dependencies</title>

      <para>This specification is based on JPA 1.0 and JPA 2.0. JPA 2.0 is
      backward compatible with JPA 1.0. For this reason, the versions of the
      packages follow the OSGi recommended version policy with the addition of
      a special JPA marker that annotates the specification version for JPA.
      All JPA Packages must also have an attribute called <code>jpa</code>
      that specifies the JPA version. The purpose of this attribute is to make
      it clear what JPA version belongs to this package.</para>

      <table>
        <title>Dependency versions</title>

        <tgroup cols="5">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="2.2*"/>

          <colspec colnum="3" colwidth="1.8*"/>

          <colspec colnum="4" colwidth="2*"/>

          <colspec colnum="5" colwidth="2*"/>

          <thead>
            <row>
              <entry>JPA</entry>

              <entry>Packages</entry>

              <entry>Export Version</entry>

              <entry>Client Import Range</entry>

              <entry>Provider Imp. Range</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry morerows="1">JPA 1.0</entry>

              <entry><code>javax.persistence</code></entry>

              <entry><code>1.0</code></entry>

              <entry><code>[1.0,2.0)</code></entry>

              <entry><code>[1.0,1.1)</code></entry>
            </row>

            <row>
              <entry><code>javax.persistence.spi</code></entry>

              <entry><code>1.0</code></entry>

              <entry><code>[1.0,2.0)</code></entry>

              <entry><code>[1.0,1.1)</code></entry>
            </row>

            <row>
              <entry morerows="1">JPA 2.0</entry>

              <entry><code>javax.persistence</code></entry>

              <entry><code>1.1</code></entry>

              <entry><code>[1.1,2.0)</code></entry>

              <entry><code>[1.1,1.2)</code></entry>
            </row>

            <row>
              <entry><code>javax.persistence.spi</code></entry>

              <entry><code>1.1</code></entry>

              <entry><code>[1.1,2.0)</code></entry>

              <entry><code>[1.1,1.2)</code></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>For example, JPA should have an export declaration like:</para>

      <programlisting>Export-Package: javax.persistence; version=1.1; jpa=2.0, ...</programlisting>
    </section>

    <section>
      <title>Synopsis</title>

      <para>A JPA Provider tracks Persistence Bundles; a Persistence Bundle
      contains a Meta-Persistence manifest header. This manifest header
      enumerates the Persistence Descriptor resources in the Persistence
      Bundle. Each resource's XML schema is defined by the JPA 1.0 or JPA 2.0
      specification. The JPA Provider reads the resource accordingly and
      extracts the information for one or more Persistence Units. For each
      found Persistence Unit, the JPA Provider registers an Entity Manager
      Factory Builder service. If the database is defined in the Persistence
      Unit, then the JPA Provider registers an Entity Manager Factory service
      during the availability of the corresponding Data Source Factory.</para>

      <para>The identification of these services is handled through a number
      of service properties. The Entity Manager Factory service is named by
      the standard JPA interface, the Builder version is OSGi specific; it is
      used when the Client Bundle needs to create an Entity Manager Factory
      based on configuration properties.</para>

      <para>A Client Bundle that wants to persist or retrieve its entity
      classes depends on an Entity Manager Factory (Builder) service that
      corresponds to a Persistence Unit that lists the entity classes. If such
      a service is available, the client can use this service to get an Entity
      Manager, allowing the client to retrieve and persist objects as long as
      the originating Entity Manager Factory (Builder) service is
      registered.</para>

      <para>In a non-OSGi environment, it is customary to get an Entity
      Manager Factory through the <code>Persistence</code> class. This
      <code>Persistence</code> class provides a number of static methods that
      give access to any locally available JPA providers. This approach is not
      recommended in an OSGi environment due to class loading and start
      ordering issues. However, OSGi environments can support access through
      this static factory with a Static Persistence bundle.</para>
    </section>
  </section>

  <section>
    <title>JPA Overview</title>

    <para>Java Persistence API (JPA) is a specification that is part of <xref linkend="i3091015"/>. This OSGi Specification is based on <xref linkend="i3075794"/> and <xref linkend="i3075842"/>. This section provides
    an overview of JPA as specified in the JCP. The purpose of this section is
    to introduce the concepts behind JPA and define the terminology that will
    be used in the remainder of the chapter.</para>

    <para>The purpose of JPA is to simplify access to relational databases for
    applications on the object-oriented Java platform. JPA provides support
    for storing and retrieving objects in a relational database. The JPA
    specification defines in detail how objects are mapped to tables and
    columns under the full control of the application. The core classes
    involved are depicted in <xref linkend="i3105110"/>.</para>

    <figure pgwide="1" xml:id="i3105110">
      <title>JPA Client View</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.800in" contentwidth="6.246in" fileref="client-view.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The JPA specifications define a number of concepts that are defined
    in this section for the purpose of this OSGi specification. However, the
    full syntax and semantics are defined in the JPA specifications.</para>

    <section>
      <title>Persistence</title>

      <para>Classes that are stored and retrieved through JPA are called the
      <emphasis>entity classes</emphasis>. In this specification, the concept
      of entity classes includes the <emphasis>embeddable</emphasis> classes,
      which are classes that do not have any persistent identity, and mapped
      super classes that allow mappings, but are not themselves persistent.
      Entity classes are not required to implement any interface or extend a
      specific superclass, they are Plain Old Java Objects (POJOs). It is the
      responsibility of the <emphasis>JPA Provider</emphasis> to connect to a
      database and map the store and retrieve operations of the entity classes
      to their tables and columns. For performance reasons, the entity classes
      are sometimes <emphasis>enhanced</emphasis>. This enhancement can take
      place during build time, deploy time, or during class loading time. Some
      enhancements use byte code weaving, some enhancements are based on
      sub-classing.</para>

      <para>The JPA Provider cannot automatically perform its persistence
      tasks; it requires configuration information. This configuration
      information is stored in the <emphasis>Persistence
      Descriptor</emphasis>. A Persistence Descriptor is an XML file according
      of one of the two following namespaces:</para>

      <programlisting>http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd
http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd</programlisting>

      <para>The JPA standard Persistence Descriptor must be stored in
      <code>META-INF/persistence.xml</code>. It is usually in the same class
      path entry (like a JAR or directory) as the entity classes.</para>

      <para>The JPA Provider parses the Persistence Descriptor and extracts
      one or more <emphasis>Persistence Units</emphasis>. A Persistence Unit
      includes the following aspects:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Name</emphasis> - Every Persistence Unit must have a
          name to identify it to clients. For example:
          <code>Accounting</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Provider Selection</emphasis> - Restriction to a
          specific JPA Provider, usually because there are dependencies in the
          application code on provider specific functionality.</para>
        </listitem>

        <listitem>
          <para><emphasis>JDBC Driver Selection</emphasis> - Selects the JDBC
          driver, the principal and the credentials for selecting and
          accessing a relational database. See <xref linkend="i3112211"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Properties</emphasis> - Standard and JPA Provider
          specific properties.</para>
        </listitem>
      </itemizedlist>

      <para>The object-relational mappings are stored in special mapping
      resources or are specified in annotations.</para>

      <para>A Persistence Unit can be <emphasis>complete</emphasis> or
      <emphasis>incomplete</emphasis>. A complete Persistence Unit identifies
      the database driver that is needed for the Persistence Unit, though it
      does not have to contain the credentials. An incomplete Persistence Unit
      lacks this information.</para>

      <para>The relations between the class path, its entries, the entity
      classes, the Persistence Descriptor and the Persistence Unit is depicted
      in <xref linkend="i3092836" xrefstyle="template:Figure %n on page %p"/>.</para>

      <figure xml:id="i3092836">
        <title>JPA Configuration</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.800in" contentwidth="6.264in" fileref="configuration.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>JPA recognizes the concept of a <emphasis>persistence
      root</emphasis>. The persistence root is the root of the JAR (or
      directory) on the class path that contains the
      <code>META-INF/persistence.xml</code> resource.</para>
    </section>

    <section>
      <title>JPA Provider</title>

      <para>The JPA specifications provide support for multiple JPA Providers
      in the same application. An Application selects a JPA Provider through
      the <code>Persistence</code> class, using static factory methods. One of
      these methods accepts a map with <emphasis>configuration
      properties</emphasis>. Configuration properties can override information
      specified in a Persistence Unit or these properties add new information
      to the Persistence Unit.</para>

      <para>The default implementation of the <code>Persistence</code> class
      discovers providers through the Java EE services model, this model
      requires a text resource in the class path entry called:</para>

      <programlisting> <code>META-INF/services/javax.persistence.PersistenceProvider</code> </programlisting>

      <para>This text resource contains the name of the JPA Provider
      implementation class.</para>

      <para>The <code>Persistence</code> class
      <code>createEntityManagerFactory</code> method provides the JPA Provider
      with the name of a Persistence Unit. The JPA Provider must then scan the
      class path for any <code>META-INF/persistence.xml</code> entries, these
      are the available Persistence Descriptors. It then extracts the
      Persistence Units to find the requested Persistence Unit. If no such
      Persistence Unit can be found, or the JPA Provider is restricted from
      servicing this Persistence Unit, then <code>null</code> is returned. The
      Persistence class will then continue to try the next found or registered
      JPA Provider.</para>

      <para>A Persistence Unit can restrict JPA Providers by specifying a
      <emphasis>JPA Provider class</emphasis>, this introduces a
      <emphasis>provider dependency</emphasis>. The specified JPA Provider
      class must implement the <code>PersistenceProvider</code> interface.
      This <emphasis>implementation class name</emphasis> must be available
      from the JPA Provider's documentation. JPA Providers that do not own the
      specified JPA Provider class must ignore such a Persistence Unit.</para>

      <para>Otherwise, if the Persistence Unit is not restricted, the JPA
      Provider is <emphasis>assigned</emphasis> to this Persistence Unit; it
      must be ready to provide an <code>EntityManagerFactory</code> object
      when the application requests one.</para>

      <para>The JPA Provider uses the Persistence Unit, together with any
      additional configuration properties, to construct an <emphasis>Entity
      Manager Factory</emphasis>. The application then uses this Entity
      Manager Factory to construct an <emphasis>Entity Manager</emphasis>,
      optionally providing additional configuration properties. The Entity
      Manager then provides the operations for the application to store and
      retrieve entity classes from the database.</para>

      <para>The additional configuration properties provided with the creation
      of the Entity Manager Factory or the Entity Manager are often used to
      specify the database driver and the credentials. This allows the
      Persistence Unit to be specified without committing to a specific
      database, leaving the choice to the application at runtime.</para>

      <para>The relations between the application, Entity Manager, Entity
      Manager Factory and the JPA Provider are depicted in <xref linkend="i3094282" xrefstyle="template:Figure %n on page %p"/>.</para>

      <figure xml:id="i3094282">
        <title>JPA Dynamic Model</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.200in" contentwidth="6.264in" fileref="dynamic-model.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section xml:id="i3112132">
      <title>Managed and Unmanaged</title>

      <para>The JPA specifications make a distinction between a
      <emphasis>managed</emphasis> and an <emphasis>unmanaged</emphasis> mode.
      In the managed mode the presence of a Java EE Container is assumed. Such
      a container provides many services for its contained applications like
      transaction handling, dependency injection, etc. One of these aspects
      can be the interface to the relational database. The JPA specifications
      therefore have defined a special method for Java EE Containers to manage
      the persistence aspects of their Managed Clients. This method is the
      <code>createContainerEntityManagerFactory</code> method on the
      <code>PersistenceProvider</code> interface. This method is purely
      intended for Java EE Containers and should not be used in other
      environments.</para>

      <para>The other method on the <code>PersistenceProvider</code> interface
      is intended to be used by the <code>Persistence</code> class static
      factory methods. The Persistence class searches for an appropriate JPA
      Provider by asking all available JPA Providers to create an Entity
      Manager Factory based on configuration properties. The first JPA
      Provider that is capable of providing an Entity Manager Factory wins.
      The use of these static factory methods is called the
      <emphasis>unmanaged mode</emphasis>. It requires a JPA Provider to scan
      the class path to find the assigned Persistence Units.</para>
    </section>

    <section xml:id="i3112211">
      <title>JDBC Access in JPA</title>

      <para>A Persistence Unit is configured to work with a relational
      database. JPA Providers communicate with a relational database through
      compliant JDBC database drivers. The database and driver parameters are
      specified in the Persistence Unit or configured during Entity Manager
      Factory or Entity Manager creation with the configuration properties.
      The configuration properties for selecting a database in non-managed
      mode were proprietary in JPA 1.0 but have been standardized in version
      2.0 of JPA:</para>

      <itemizedlist>
        <listitem>
          <para><code>javax.persistence.jdbc.driver</code> - Fully-qualified
          name of the driver class</para>
        </listitem>

        <listitem>
          <para><code>javax.persistence.jdbc.url</code> - Driver-specific URL
          to indicate database information</para>
        </listitem>

        <listitem>
          <para><code>javax.persistence.jdbc.user</code> - User name to use
          when obtaining connections</para>
        </listitem>

        <listitem>
          <para><code>javax.persistence.jdbc.password</code> - Password to use
          when obtaining connections</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Bundles with Persistence</title>

    <para>The primary goal of this specification is to simplify the
    programming model for bundles that need persistence. In this specification
    there are two application roles:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Persistence Bundle</emphasis> - A Persistence Bundle
        contains the entity classes and one or more Persistence Descriptors,
        each providing one or more Persistence Units.</para>
      </listitem>

      <listitem>
        <para><emphasis>Client Bundle</emphasis> -A Client Bundle contains the
        code that manipulates the entity classes and uses an Entity Manager to
        store and retrieve these entity classes with a relational database.
        The Client Bundle obtains the required Entity Manager(s) via a service
        based model.</para>
      </listitem>
    </itemizedlist>

    <para>These roles can be combined in a single bundle.</para>

    <section xml:id="i3096192">
      <title>Services</title>

      <para>A JPA Provider uses Persistence Units to provide Client Bundles
      with a configured <emphasis>Entity Manager Factory </emphasis>service
      and/or an <emphasis>Entity Manager Factory Builder</emphasis> service
      for each assigned Persistence Unit:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Entity Manager Factory service</emphasis> - Provides
          an <code>EntityManagerFactory</code> object that depends on a
          complete Persistence Unit. That is, it is associated with a
          registered Data Source Factory service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Entity Manager Factory Builder service</emphasis> -
          The Entity Manager Factory Builder service provides the capability
          of creating an <code>EntityManagerFactory</code> object with
          additional configuration properties.</para>
        </listitem>
      </itemizedlist>

      <para>These services are collectively called the <emphasis>JPA
      Services</emphasis>. Entity Managers obtained from such JPA Services can
      only be used to operate on entity classes associated with their
      corresponding Persistence Unit.</para>
    </section>

    <section>
      <title>Persistence Bundle</title>

      <para>A <emphasis>Persistence Bundle</emphasis> is a bundle that
      specifies the Meta-Persistence header, see <xref linkend="i3088219"/>.
      This header refers to one or more Persistence Descriptors in the
      Persistence Bundle. Commonly, this is the
      <code>META-INF/persistence.xml</code> resource. This location is the
      standard for non-OSGi environments, however an OSGi bundle can also use
      other locations as well as multiple resources.</para>

      <para>For example, the contents of a simple Persistence Bundle with a
      single <code>Person</code> entity class could look like:</para>

      <programlisting>META-INF/
META-INF/MANIFEST.MF
OSGI-INF/address.xml
com/acme/Person.class</programlisting>

      <para>The corresponding manifest would then look like:</para>

      <programlisting>Manifest-Version: 1.0
Bundle-ManifestVersion: 2
Meta-Persistence: OSGI-INF/address.xml
Bundle-SymbolicName: com.acme.simple.persistence
Bundle-Version: 3.2.4.200912231004</programlisting>

      <para>A Persistence Bundle is a normal bundle; it must follow all the
      rules of OSGi and can use all OSGi constructs like Bundle-Classpath,
      fragment bundles, import packages, export packages, etc. However, there
      is one limitation: any entity classes must originate in the bundle's
      JAR, it cannot come from a fragment. This requirement is necessary to
      simplify enhancing entity classes.</para>
    </section>

    <section>
      <title>Client Bundles</title>

      <para>A Client Bundle uses the entity classes from a Persistence Bundle
      to provide its required functionality. To store and retrieve these
      entity classes a Client Bundle requires an Entity Manager that is
      configured for the corresponding Persistence Unit.</para>

      <para>An Entity Manager is intended to be used by a single session, it
      is not thread safe. Therefore, a client needs an Entity Manager Factory
      to create an Entity Manager. In an OSGi environment, there are multiple
      routes to obtain an Entity Manager Factory.</para>

      <para>A JPA Provider must register an Entity Manager Factory service for
      each assigned Persistence Unit that is <emphasis>complete</emphasis>.
      Complete means that it is a configured Persistence Unit, including the
      reference to the relational database. The Entity Manager Factory service
      is therefore bound to a Data Source Factory service and Client Bundles
      should not attempt to rebind the Data Source Factory with the
      configuration properties of the <code>createEntityManager(Map)</code>
      method. See <xref linkend="i3115644"/> for the consequences. If the Data
      Source Factory must be bound by the Client Bundle then the Client Bundle
      should use the <xref linkend="i3095031"/>.</para>

      <para>The Entity Manager Factory service must be registered with the
      service properties as defined in <xref linkend="i3087143"/>. These
      are:</para>

      <itemizedlist>
        <listitem>
          <para><code>osgi.unit.name</code> - (<code>String</code>) The name
          of the Persistence Unit</para>
        </listitem>

        <listitem>
          <para><code>osgi.unit.version</code> - (<code>String</code>) The
          version of the associated Persistence Bundle</para>
        </listitem>

        <listitem>
          <para><code>osgi.unit.provider</code> - (<code>String</code>) The
          implementation class name of the JPA Provider</para>
        </listitem>
      </itemizedlist>

      <para>The life cycle of the Entity Manager Factory service is bound to
      the Persistence Bundle, the JPA Provider, and the selected Data Source
      Factory service.</para>

      <para>A Client Bundle that wants to use an Entity Manager Factory
      service should therefore use an appropriate filter to select the Entity
      Manager Factory service that corresponds to its required Persistence
      Unit. For example, the following snippet uses Declarative Services, see
      <xref linkend="service.component"/>, to statically depend on such a
      service:</para>

      <programlisting>&lt;reference name="accounting"
   target="(&amp;amp;(osgi.unit.name=Accounting)(osgi.unit.version=3.2.*))"
    interface="javax.persistence.EntityManagerFactory"/&gt;</programlisting>
    </section>

    <section xml:id="i3095031">
      <title>Custom Configured Entity Manager</title>

      <para>If a Client Bundle needs to provide configuration properties for
      the creation of an Entity Manager Factory it should use the
      <emphasis>Entity Manager Factory Builder</emphasis> service. This can
      for example be used to provide the database selection properties when
      the Persistence Unit is incomplete or if the database selection needs to
      be overridden.</para>

      <para>The Entity Manager Factory Builder service's life cycle must not
      depend on the availability of any Data Source Factory, even if a JDBC
      driver class name is specified in the Persistence Descriptor. The Entity
      Manager Factory Builder service is registered with the same service
      properties as the corresponding Entity Factory service, see <xref linkend="i3087143"/>.</para>

      <para>The following method is defined on the
      <code>EntityManagerFactoryBuilder</code> interface:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.jpa.EntityManagerFactoryBuilder.createEntityManagerFactory-Map-" xrefstyle="hyperlink"/> - Returns a custom configured
          <code>EntityManagerFactory</code> instance for the Persistence Unit
          associated with the service. Accepts a map with the configuration
          properties to be applied during Entity Manager Factory creation. The
          method must return a proper Entity Manager Factory or throw an
          Exception.</para>
        </listitem>
      </itemizedlist>

      <para>The <code>createEntityManagerFactory</code> method allows standard
      and vendor-specific properties to be passed in and applied to the Entity
      Manager Factory being created. However, some properties cannot be
      honored by the aforementioned method. For example, the
      <code>javax.persistence.provider</code> JPA property, as a means to
      specify a specific JPA Provider at runtime, cannot be supported because
      the JPA Provider has already been decided; it is the JPA Provider that
      registered the Entity Manager Factory Builder service. A JPA Provider
      should throw an Exception if it recognizes the property but it cannot
      use the property when specified through the builder. Unrecognized
      properties must be ignored.</para>

      <para>Once an Entity Manager Factory is created the specified Data
      Source becomes associated with the Entity Manager Factory. It is
      therefore not possible to re-associate an Entity Manager Factory with
      another Data Source by providing different properties. A JPA Provider
      must throw an Exception when an attempt is made to re-specify the
      database properties. See <xref linkend="i3115644"/> for further
      information.</para>

      <para>As an example, a sample snippet of a client that wants to operate
      on a persistence unit named <code>Accounting</code> and pass in the JDBC
      user name and password properties is:</para>

      <programlisting>ServiceReference[] refs = context.getServiceReferences(
    EntityManagerFactoryBuilder.class.getName(),
    "(osgi.unit.name=Accounting)");
if ( refs != null ) {
    EntityManagerFactoryBuilder emfBuilder = 
        (EntityManagerFactoryBuilder) context.getService(refs[0]);
    if ( emfBuilder != null ) {
      Map&lt;String,Object&gt; props = new HashMap&lt;String,Object&gt;();
      props.put("<code>javax.persistence.jdbc.user</code>", userString);
      props.put("<code>javax.persistence.jdbc.</code>password",passwordString);
      EntityManagerFactory emf = emfBuilder.createEntityManagerFactory(props);
      EntityManager em = emf.createEntityManager();
     ...
}</programlisting>

      <para>The example does not handle the dynamic dependencies on the
      associated Data Source Factory service.</para>
    </section>
  </section>

  <section xml:id="i3097804">
    <title>Extending a Persistence Bundle</title>

    <para>A Persistence Bundle is identified by its Meta-Persistence manifest
    header that references a number of Persistence Descriptor resources.
    Persistence bundles must be detected by a JPA Provider. The JPA Provider
    must parse any Persistence Descriptors in these bundles and detect the
    assigned Persistence Units. For each assigned Persistence Unit, the JPA
    Provider must register an Entity Manager Factory Builder service when the
    Persistence Bundle is ready, see <xref linkend="i3100956"/>.</para>

    <para>For complete and assigned Persistence Units, the JPA Provider must
    find the required Data Source Factory service based on the driver name.
    When the Persistence Bundle is ready and the selected Data Source Factory
    is available, the JPA Provider must have an Entity Manager Factory service
    registered that is linked to that Data Source Factory.</para>

    <para>When the Persistence Bundle is stopped (or the JPA Provider stops),
    the JPA Provider must close all connections and cleanup any resources
    associated with the Persistence Bundle.</para>

    <para>This process is outlined in detail in the following sections.</para>

    <section>
      <title>Class Space Consistency</title>

      <para>A JPA Provider must ignore Persistence Bundles that are in another
      class space for the <code>javax.persistence.*</code> packages. Such a
      JPA Provider cannot create JPA Services that would be visible and usable
      by the Client Bundles.</para>
    </section>

    <section xml:id="i3088219">
      <title>Meta Persistence Header</title>

      <para>A <emphasis>Persistence Bundle </emphasis>is a bundle that
      contains the Meta-Persistence header. If this header is not present,
      then this specification does not apply and a JPA Provider should ignore
      the corresponding bundle.</para>

      <para>The persistence root of a Persistence Unit is the root of the
      Persistence Bundle's JAR</para>

      <para>The Meta-Persistence header has a syntax of:</para>

      <programlisting>Meta-Persistence ::= ( jar-path ( ',' jar-path)* )?
jar-path         ::= path ( '!/' spath )? 
spath            ::= path   // must not start with solidus ('/' \u002F)</programlisting>

      <para>The header may include zero or more comma-separated
      <code>jar-paths</code>, each a path to a Persistence Descriptor resource
      in the bundle. Paths may optionally be prefixed with the solidus
      (<code>'/' \u002F</code>) character. The JPA Provider must always
      include the <code>META-INF/persistence.xml</code> first if it is not one
      of the listed paths. Wildcards in directories are not supported.
      The<code> META-INF/persistence.xml</code> is therefore the default
      location for an empty header.</para>

      <para>For example:</para>

      <programlisting>Meta-Persistence: META-INF/jpa.xml, persistence/jpa.xml</programlisting>

      <para>The previous example will instruct the JPA Provider to process the
      <code>META-INF/persistence.xml</code> resource first, even though it is
      not explicitly listed. The JPA Provider must then subsequently process
      <code>META-INF/jpa.xml</code> and the <code>persistence/jpa.xml</code>
      resources.</para>

      <para>The paths in the Meta-Persistence header must be used with the
      <code>Bundle.getEntry()</code> method, or a mechanism with similar
      semantics, to obtain the corresponding resource. The
      <code>getEntry</code> method does not force the bundle to resolve when
      still unresolved; resolving might interfere with the efficiency of any
      required entity class enhancements. However, the use of the
      <code>getEntry</code> method implies that fragment bundles cannot be
      used to contain Persistence Descriptors nor entity classes.</para>

      <para>Paths in the Meta-Persistence header can reference JAR files that
      are nested in the bundle by using the <code>!/ jar:</code> URL syntax to
      separate the JAR file from the path within the JAR, for example:</para>

      <programlisting>Meta-Persistence: embedded.jar!/META-INF/persistence.xml</programlisting>

      <para>This example refers to a resource in the <code>embedded.jar</code>
      resource, located in the <code>META-INF</code> directory of
      <code>embedded.jar</code>.</para>

      <para>The <code>!/</code> splits the <code>jar-path</code> in a prefix
      and a suffix:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Prefix</emphasis> - The prefix is a path to a JAR
          resource in the bundle.</para>
        </listitem>

        <listitem>
          <para><emphasis>Suffix</emphasis> - The suffix is a path to a
          resource in the JAR identified by the prefix.</para>
        </listitem>
      </itemizedlist>

      <para>For example:</para>

      <programlisting>embedded.jar!/META-INF/persistence.xml
prefix:     embedded.jar
suffix:     META-INF/persistence.xml</programlisting>

      <para>It is not required that all listed or implied resources are
      present in the bundle's JAR. For example, it is valid that the default
      <code>META-INF/persistence.xml</code> resource is absent. However, if no
      Persistence Units are found at all then the absence of any Persistence
      Unit is regarded as an error that should be logged. In this case, the
      Persistence Bundle is further ignored.</para>
    </section>

    <section>
      <title>Processing</title>

      <para>A JPA Provider can detect a Persistence Bundle as early as its
      installation time. This early detection allows the JPA Provider to
      validate the Persistence Bundle as well as prepare any mechanisms to
      enhance the classes for better performance. However, this process can
      also be delayed until the bundle is started.</para>

      <para>The JPA Provider must validate the Persistence Bundle. A valid
      Persistence Bundle must:</para>

      <itemizedlist>
        <listitem>
          <para>Have no parsing errors of the Persistence Descriptors</para>
        </listitem>

        <listitem>
          <para>Validate all Persistence Descriptors against their
          schemas</para>
        </listitem>

        <listitem>
          <para>Have at least one assigned Persistence Unit</para>
        </listitem>

        <listitem>
          <para>Have all entity classes mentioned in the assigned Persistence
          Units on the Persistence Bundle's JAR.</para>
        </listitem>
      </itemizedlist>

      <para>A Persistence Bundle that uses multiple providers for its
      Persistence Units could become incompatible with future versions of this
      specification.</para>

      <para>If any validation fails, then this is an error and should be
      logged. Such a bundle is ignored completely even if it also contains
      valid assigned Persistence Units. Only a bundle update can recover from
      this state.</para>

      <para>Persistence Units can restrict JPA Providers by specifying a
      provider dependency. JPA Providers that do not own this JPA Provider
      implementation class must ignore such a Persistence Unit completely.
      Otherwise, if the JPA Provider can service a Persistence Unit, it
      assigns itself to this Persistence Unit.</para>

      <para>If after the processing of all Persistence Descriptors, the JPA
      Provider has no assigned Persistence Units, then the JPA Provider must
      further ignore the Persistence Bundle.</para>
    </section>

    <section xml:id="i3100956">
      <title>Ready Phase</title>

      <para>A Persistence Bundle is <emphasis>ready</emphasis> when its state
      is <code>ACTIVE</code> or, when a <code>lazy</code> activation policy is
      used, <code>STARTING</code>. A JPA Provider must track the ready state
      of Persistence Bundles that contain assigned Persistence Units.</para>

      <para>While a Persistence Bundle is ready, the JPA Provider must have,
      for each assigned Persistence Unit, an Entity Manager Factory Builder
      service registered to allow Client Bundles to create new
      <code>EntityManagerFactory</code> objects. The JPA Provider must also
      register an Entity Manager Factory for each assigned and complete
      Persistence Unit that has its corresponding Data Source available in the
      service registry.</para>

      <para>The service registration process is asynchronous with the
      Persistence Bundle start because a JPA Provider could start after a
      Persistence Bundle became ready.</para>
    </section>

    <section xml:id="i3087143">
      <title>Service Registrations</title>

      <para>The JPA Services must be registered through the Bundle Context of
      the corresponding Persistence Bundle to ensure proper class space
      consistency checks by the OSGi Framework.</para>

      <para>JPA Services are always related to an assigned Persistence Unit.
      To identify this Persistence Unit and the assigned JPA Provider, each
      JPA Service must have the following service properties:</para>

      <itemizedlist>
        <listitem>
          <para><code>osgi.unit.name</code> - (<code>String</code>) The name
          of the Persistence Unit. This property corresponds to the
          <code>name</code> attribute of the <code>persistence-unit</code>
          element in the Persistence Descriptor. It is used by Client Bundles
          as the primary filter criterion to obtain a JPA Service for a
          required Persistence Unit. There can be multiple JPA Services
          registered under the same <code>osgi.unit.name</code>, each
          representing a different version of the Persistence Unit.</para>
        </listitem>

        <listitem>
          <para><code>osgi.unit.version</code> - (<code>String</code>) The
          version of the Persistence Bundle, as specified in Bundle-Version
          header, that provides the corresponding Persistence Unit. Client
          Bundles can filter their required JPA Services based on a particular
          Persistence Unit version.</para>
        </listitem>

        <listitem>
          <para><code>osgi.unit.provider</code> - (<code>String</code>) The
          JPA Provider implementation class name that registered the service.
          The <code>osgi.unit.provider</code> property allows Client Bundles
          to know the JPA Provider that is servicing the Persistence Unit.
          Client Bundles should be careful when filtering on this property,
          however, since the JPA Provider that is assigned a Persistence Unit
          may not be known by the Client Bundle ahead of time. If there is a
          JPA Provider dependency, it is better to specify this dependency in
          the Persistence Unit because other JPA Providers are then not
          allowed to assign such a Persistence Unit and will therefore not
          register a service.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i3083073">
      <title>Registering the Entity Manager Factory Builder Service</title>

      <para>Once the Persistence Bundle is ready, a JPA Provider must register
      an Entity Manager Factory Builder service for each assigned Persistence
      Unit from that Persistence Bundle.</para>

      <para>The Entity Manager Factory Builder service must be registered with
      the service properties listed in <xref linkend="i3087143"/>. The Entity
      Manager Factory Builder service is registered under the
      <code>org.osgi.service.jpa.EntityManagerFactoryBuilder</code> name. This
      interface is using the JPA packages and is therefore bound to one of the
      two supported versions, see <xref linkend="i3113425"/>.</para>

      <para>The Entity Manager Factory Builder service enables the creation of
      a parameterized version of an Entity Factory Manager by allowing the
      caller to specify configuration properties. This approach is necessary
      if, for example, the Persistence Unit is not complete.</para>
    </section>

    <section xml:id="i3097403">
      <title>Registering the Entity Manager Factory</title>

      <para>A complete Persistence Unit is configured with a specific
      relational database driver, see <xref linkend="i3112211"/>. A JPA
      Provider must have an Entity Manager Factory service registered for each
      assigned and complete Persistence Unit when:</para>

      <itemizedlist>
        <listitem>
          <para>The originating Persistence Bundle is ready, and</para>
        </listitem>

        <listitem>
          <para>A <emphasis>matching</emphasis> Data Source Factory service is
          available. Matching a Data Source Factory service to a Persistence
          Unit is discussed in <xref linkend="i3097361"/>.</para>
        </listitem>
      </itemizedlist>

      <para>A JPA Provider must track the life cycle of the matching Data
      Source Factory service; while this service is unavailable the Entity
      Manager Factory service must also be unavailable. Any active Entity
      Managers created by the Entity Manager Factory service become invalid to
      use at that time.</para>

      <para>The Entity Manager Factory service must be registered with the
      same service properties as described for the Entity Manager Factory
      Builder service, see <xref linkend="i3087143"/>. It should be registered
      under the following name:</para>

      <programlisting> <code>javax.persistence.EntityManagerFactory</code></programlisting>

      <para>The <code>EntityManagerFactory</code> interface is from the JPA
      packages and is therefore bound to one of the two supported versions,
      see <xref linkend="i3113425"/>.</para>

      <para>An Entity Manager Factory is bound to a Data Source Factory
      service because its assigned Persistence Unit was complete. However, a
      Client Bundle could still provide JDBC configuration properties for the
      <code>createEntityManager(Map)</code> method. This not always possible,
      see <xref linkend="i3115644"/>.</para>
    </section>

    <section>
      <title>Stopping</title>

      <para>If a Persistence Bundle is being stopped, then the JPA Provider
      must ensure that any resources allocated on behalf of the Persistence
      Bundle are cleaned up and all open connections are closed. This cleanup
      must happen synchronously with the <code>STOPPING</code> event. Any
      Exceptions being thrown while cleaning up should be logged but must not
      stop any further clean up.</para>

      <para>If the JPA Provider is being stopped, the JPA Provider must
      unregister all JPA Services that it registered through the Persistence
      Bundles and clean up as if those bundles were stopped.</para>
    </section>
  </section>

  <section>
    <title>JPA Provider</title>

    <para>JPA Providers supply the implementation of the JPA Services and the
    Persistence Provider service. It is the responsibility of a JPA Provider
    to store and retrieve the entity classes from a relational database. It is
    the responsibility of the JPA Provider to register a Persistence Provider
    and start tracking Persistence Bundles, see <xref linkend="i3097804"/>.</para>

    <section>
      <title>Managed Model</title>

      <para>A JPA Provider that supports running in managed mode should
      register a specific service for the Java EE Containers: the Persistence
      Provider service. The interface is the standard JPA
      <code>PersistenceProvider</code> interface. See <xref linkend="i3113425"/> for the issues around the multiple versions that
      this specification supports.</para>

      <para>The service must be registered with the following service
      property:</para>

      <itemizedlist>
        <listitem>
          <para><code>javax.persistence.provider</code> - The JPA Provider
          implementation class name, a documented name for all JPA
          Providers.</para>
        </listitem>
      </itemizedlist>

      <para>The Persistence Provider service enables a Java EE Container to
      find a particular JPA Provider. This service is intended for containers
      only, not for Client Bundles because there are implicit assumptions in
      the JPA Providers about the Java EE environment. A Java EE Container
      must obey the life cycle of the Persistence Provider service. If this
      service is unregistered then it must close all connections and clean up
      the corresponding resources.</para>
    </section>

    <section xml:id="i3097361">
      <title>Database Access</title>

      <para>A Persistence Unit is configured to work with a relational
      database. JPA Providers must communicate with a relational database
      through a compliant JDBC database driver. The database and driver
      parameters are specified with properties in the Persistence Unit or the
      configuration properties when a Entity Manager Factory Builder is used
      to build an Entity Manager Factory. All JPA Providers, regardless of
      version, in an OSGi environment must support the following properties
      for database access:</para>

      <itemizedlist>
        <listitem>
          <para><code>javax.persistence.jdbc.driver</code> - Fully-qualified
          name of the driver class.</para>
        </listitem>

        <listitem>
          <para><code>javax.persistence.jdbc.url</code> - Driver-specific URL
          to indicate database information</para>
        </listitem>

        <listitem>
          <para><code>javax.persistence.jdbc.user</code> - User name to use
          when obtaining connections</para>
        </listitem>

        <listitem>
          <para><code>javax.persistence.jdbc.password</code> - Password to use
          when obtaining connections</para>
        </listitem>
      </itemizedlist>

      <para>There are severe limitations in specifying these properties after
      the Entity Manager Factory is created for the first time, see <xref linkend="i3115644"/>.</para>
    </section>

    <section>
      <title>Data Source Factory Service Matching</title>

      <para>Providers must use the <code>javax.persistence.jdbc.driver</code>
      property, as defined in <xref linkend="i3112211"/>, to obtain a Data
      Source Factory service. The Data Source Factory is specified in <xref linkend="service.jdbc"/>. The <code>javax.persistence.jdbc.driver</code>
      property must be matched with the value of the Data Source Factory
      service property named <code>osgi.jdbc.driver.class</code>.</para>

      <para>The Data Source Factory service is registered with the
      <code>osgi.jdbc.driver.class</code> service property that holds the
      class name of the driver. This property must match the
      <code>javax.persistence.jdbc.driver</code> service property of the
      Persistence Unit.</para>

      <para>For example, if the Persistence Unit specifies the
      <code>com.acme.db.Driver</code> database driver in the
      <code>javax.persistence.jdbc.driver property</code> (or in the
      Persistence Descriptor <code>property</code> element), then the
      following filter would select an appropriate <code>Data Source
      Factory:</code></para>

      <programlisting>(&amp;(objectClass=org.osgi.service.jdbc.DataSourceFactory)
   (<code>osgi.jdbc.driver.class=com.acme.db.Driver))</code></programlisting>

      <para>Once the Data Source Factory is obtained, the JPA Provider must
      obtain a <code>DataSource</code> object. This Data Source object must
      then be used for all relational database access.</para>

      <para>In <xref linkend="i3075794"/> the JPA JDBC properties were not
      standardized. JPA Providers typically defined a set of JDBC properties,
      similar to those defined in JPA 2.0, to configure JDBC driver access.
      JPA 1.0 JPA Providers must look up the Data Source Factory service first
      using the JPA 2.0 JDBC properties. If these properties are not defined
      then they should fall back to their proprietary driver
      properties.</para>
    </section>

    <section xml:id="i3115644">
      <title>Rebinding</title>

      <para>In this specification, the Entity Manager Factory service is only
      registered when the Persistence Unit is complete and a matching Data
      Source Factory service is available. However, the API of the Entity
      Manager Factory Builder allows the creation of an Entity Manager Factory
      with configuration properties. Those configuration properties could
      contain the JDBC properties to bind to another Data Source Factory
      service than it had already selected.</para>

      <para>This case must not be supported by a JPA Provider, an Illegal
      Argument Exception must be thrown. If such a case would be supported
      then the life cycle of the Entity Manager Factory service would still be
      bound to the first Data Source Factory. There would be no way for the
      JPA Provider to signal to the Client Bundle that the returned Entity
      Manager Factory is no longer valid because the rebound Data Source
      Factory was unregistered.</para>

      <para>Therefore, when an Entity Manager Factory is being created using
      the Entity Manager Factory Builder, a JPA Provider must verify that the
      new properties are compatible with the properties of the already created
      Entity Manager Factory. If no, then an Exception must be thrown. If they
      are compatible, then an instance of the previous Entity Manager Factory
      should be returned.</para>
    </section>

    <section>
      <title>Enhancing Entity Classes</title>

      <para>JPA Providers may choose to implement the JPA specifications using
      various implementation approaches and techniques. This promotes
      innovation in the area, but also opens the door to limitations and
      constraints arising due to implementation choices. For example, there
      are JPA Providers that perform byte code weaving during the entity class
      loading. Dynamic byte code weaving requires that the entity classes are
      not loaded until the JPA Provider is first able to intercept the loading
      of the entity class and be given an opportunity to do its weaving. It
      also implies that the Persistence Bundle and any other bundles that
      import packages from that bundle must be refreshed if the JPA Provider
      needs to be changed.</para>

      <para>This is necessary because the JPA Services are registered against
      the Bundle Contexts of the Persistence Bundles and not the Bundle
      Context of the JPA Providers. Client Bundles must then unget the service
      to unbind themselves from the uninstalled JPA Provider. However, since
      most JPA Providers perform some kind of weaving or class transformation
      on the entity classes, the Persistence Bundle will likely need to be
      refreshed. This will cause the Client Bundles to be refreshed also
      because they depend on the packages of the entity classes.</para>
    </section>

    <section>
      <title>Class Loading</title>

      <para>JPA Providers cannot have package dependencies on entity classes
      in Persistence Bundles because they cannot know at install time what
      Persistence Bundles they will be servicing. However, when a JPA Provider
      is servicing a Persistence Bundle, it must be able to load classes and
      resources from that Persistence Bundle according to the OSGi bundle
      rules. To do this class loading it must obtain a class loader that has
      the same visibility as the Persistence Bundle's bundle class loader.
      This will also allow it to load and manage metadata for the entity
      classes and resources for that Persistence Bundle's assigned Persistence
      Units. These resources and entity classes must reside directly in the
      Persistence Bundle, they must be accessed using the
      <code>getEntry</code> method. Entity classes and resources must not
      reside in fragments.</para>
    </section>

    <section>
      <title>Validation</title>

      <para>There is not yet an OSGi service specification defined for
      validation providers. If validation is required, the validation
      implementation will need to be included with the JPA Provider
      bundle.</para>
    </section>
  </section>

  <section>
    <title>Static Access</title>

    <para>Non-managed client usage of JPA has traditionally been achieved
    through the <code>Persistence</code> class. Invoking a static method on
    the <code>Persistence</code> class is a dependency on the returned JPA
    Provider that cannot be managed by the OSGi framework.</para>

    <para>However, such an unmanaged dependency is supported in this
    specification by the Static Persistence bundle. This bundle provides
    backwards compatibility for programs that use existing JPA access
    patterns. However, usage of this static model requires that the deployer
    ensures that the actors needed are in place at the appropriate times by
    controlling the life cycles of all participating bundles. The normal OSGi
    safe-guards and dependency handling do not work in the case of static
    access.</para>

    <para>A Static Persistence Bundle must provide static access from the
    <code>Persistence</code> class to the JPA Services.</para>

    <section>
      <title>Access</title>

      <para>There are two methods on the <code>Persistence</code>
      class:</para>

      <itemizedlist>
        <listitem>
          <para><code>createEntityManagerFactory(String)</code></para>
        </listitem>

        <listitem>
          <para><code>createEntityManagerFactory(String,Map)</code></para>
        </listitem>
      </itemizedlist>

      <para>Both methods take the name of a Persistence Unit. The last method
      also takes a map that contains extra configuration properties. To
      support the usage of the static methods on the <code>Persistence</code>
      class, the implementation of the
      <code>Persistence.createEntityManagerFactory</code> method family must
      do a lookup of one of the JPA Services associated with the selected
      Persistence Unit.</para>

      <para>If no configuration properties are specified, the Static
      Persistence Bundle must look for an Entity Manager Factory service with
      the <code>osgi.unit.name</code> property set to the given name. The
      default service should be used because no selector for a version is
      provided. If no such service is available, <code>null</code> must be
      returned. Provisioning of multiple versioned Persistence Units is not
      supported. Deployers should ensure only a single version of a
      Persistence Unit with the same name is present in an OSGi framework at
      any moment in time.</para>

      <para>Otherwise, if configuration properties are provided, the Static
      Access implementation must look for an Entity Manager Factory Builder
      service with the <code>osgi.unit.name</code> property set to the given
      Persistence Unit name. If no such service exists, <code>null</code> must
      be returned. Otherwise, the default service must be used to create an
      Entity Manager Factory with the given configuration properties. The
      result must be returned to the caller.</para>

      <para>For service lookups, the Static Persistence Bundle must use its
      own Bundle Context, it must not attempt to use the Bundle Context of the
      caller. All exceptions should be passed to the caller.</para>

      <para>The class space of the Entity Manager Factory and the class space
      of the client cannot be enforced to be consistent by the framework
      because it is the <code>Persistence</code> class that is doing the
      lookup of the service, and not the actual calling Client Bundle that
      will be using the Entity Manager Factory. The framework cannot make the
      connection and therefore cannot enforce that the class spaces
      correspond. Deployers should therefore ensure that the involved class
      spaces are correctly wired.</para>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>The security for this specification is based on the JPA
    specification.</para>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.jpa" xml:id="org.osgi.service.jpa" xml:base="../../generated/javadoc/docbook/org.osgi.service.jpa.xml">
   <title>org.osgi.service.jpa</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.jpa-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.jpa-version.number">1.0</edition>
   </info>
   <para>
JPA Package Version 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.jpa; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.jpa; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.jpa.EntityManagerFactoryBuilder">
                  <code>EntityManagerFactoryBuilder</code>
               </link> - 
This service interface offers JPA clients the ability to create instances of
 EntityManagerFactory for a given named persistence unit.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="EntityManagerFactoryBuilder" xml:id="org.osgi.service.jpa.EntityManagerFactoryBuilder">
      <title>public interface EntityManagerFactoryBuilder</title>
      <para>
This service interface offers JPA clients the ability to create instances of
 EntityManagerFactory for a given named persistence unit. A service instance
 will be created for each named persistence unit and can be filtered by
 comparing the value of the osgi.unit.name property containing the persistence
 unit name.
 
 This service is used specifically when the caller wants to pass in
 factory-scoped properties as arguments. If no properties are being used in
 the creation of the EntityManagerFactory then the basic EntityManagerFactory
 service should be used.
   </para>
      <section role="field" xreflabel="JPA_UNIT_NAME" xml:id="org.osgi.service.jpa.EntityManagerFactoryBuilder.JPA_UNIT_NAME">
         <title>public static final String JPA_UNIT_NAME = "osgi.unit.name"</title>
         <para>
The name of the persistence unit.
   </para>
      </section>
      <section role="field" xreflabel="JPA_UNIT_PROVIDER" xml:id="org.osgi.service.jpa.EntityManagerFactoryBuilder.JPA_UNIT_PROVIDER">
         <title>public static final String JPA_UNIT_PROVIDER = "osgi.unit.provider"</title>
         <para>
The class name of the provider that registered the service and implements
 the JPA javax.persistence.PersistenceProvider interface.
   </para>
      </section>
      <section role="field" xreflabel="JPA_UNIT_VERSION" xml:id="org.osgi.service.jpa.EntityManagerFactoryBuilder.JPA_UNIT_VERSION">
         <title>public static final String JPA_UNIT_VERSION = "osgi.unit.version"</title>
         <para>
The version of the persistence unit bundle.
   </para>
      </section>
      <section role="method" xreflabel="createEntityManagerFactory(Map)" xml:id="org.osgi.service.jpa.EntityManagerFactoryBuilder.createEntityManagerFactory-Map-">
         <title>public EntityManagerFactory createEntityManagerFactory(Map&lt;String,Object&gt; props)</title>
         <formalpara role="parameter">
            <title>props</title>
            <para>Properties to be used, in addition to those in the
        persistence descriptor, for configuring the EntityManagerFactory
        for the persistence unit.</para>
         </formalpara>
         <para role="description">
Return an EntityManagerFactory instance configured according to the
 properties defined in the corresponding persistence descriptor, as well
 as the properties passed into the method.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An EntityManagerFactory for the persistence unit associated with
         this service. Must not be null.</para>
         </formalpara>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i3075794"><title>JPA
      1.0</title>http://jcp.org/en/jsr/summary?id=220</bibliomixed>

      <bibliomixed xml:id="i3075842"><title>JPA
      2.0</title>http://jcp.org/en/jsr/summary?id=317</bibliomixed>

      <bibliomixed xml:id="i3091015"><title>Java EE
      5</title>http://www.oracle.com/technetwork/java/javaee/tech/index.html</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="128" revision="$Id: 9466c403a8387ed5a6184eb3a8da076b07e7e107 $" version="5" xml:id="service.war" xml:base="../128/service.war.xml">
  <title>Web Applications Specification</title>

  <info>
    <releaseinfo xml:id="service.war-version">Version 1.0</releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The Java EE Servlet model has provided the backbone of web based
    applications written in Java. Given the popularity of the Servlet model,
    it is desirable to provide a seamless experience for deploying existing
    and new web applications to Servlet containers operating on the OSGi
    framework. Previously, the Http Service in the catalogue of OSGi
    compendium services was the only model specified in OSGi to support the
    Servlet programming model. However, the Http Service, as defined in that
    specification, is focused on the run time, as well as manual construction
    of the servlet context, and thus does not actually support the standard
    Servlet packaging and deployment model based on the Web Application
    Archive, or WAR format.</para>

    <para>This specification defines the Web Application Bundle, which is a
    bundle that performs the same role as the WAR in Java EE. A WAB uses the
    OSGi life cycle and class/resource loading rules instead of the standard
    Java EE environment. WABs are normal bundles and can leverage the full set
    of features of the OSGi framework.</para>

    <para>Web applications can also be installed as traditional WARs through a
    manifest rewriting process. During the install, a WAR is transformed into
    a WAB. This specification was based on ideas developed in <xref linkend="i3102743"/>.</para>

    <para>This Web Application Specification provides support for web
    applications written to the Servlet 2.5 specification, or later. Given
    that Java Server Pages, or JSPs, are an integral part of the Java EE web
    application framework, this specification also supports the JSP 2.1
    specification or greater if present. This specification details how a web
    application packaged as a WAR may be installed into an OSGi framework, as
    well as how this application may interact with, and obtain, OSGi
    services.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Extender</emphasis> - Enable the configuration of
          components inside a bundle based on configuration data provided by
          the bundle developer.</para>
        </listitem>

        <listitem>
          <para><emphasis>Services</emphasis> - Enable the use of OSGi
          services within a Web Application.</para>
        </listitem>

        <listitem>
          <para><emphasis>Deployment</emphasis> - Define a mechanism to deploy
          Web Applications, both OSGi aware and non OSGi aware, in the OSGi
          environment.</para>
        </listitem>

        <listitem>
          <para><emphasis>WAR File Support</emphasis> - Transparently enhance
          the contents of a WAR's manifest during installation to add any
          headers necessary to deploy a WAR as an OSGi bundle.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Web Container</emphasis> - The implementation of
          this specification. Consists of a Web Extender, a Web URL Handler
          and a Servlet and Java Server Pages Web Runtime environment.</para>
        </listitem>

        <listitem>
          <para><emphasis>Web Application - </emphasis>A program that has web
          accessible content. A Web Application is defined by <xref linkend="i3076362"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Web Application Archive (WAR)</emphasis> - The Java
          EE standard resource format layout of a JAR file that contains a
          deployable Web Application.</para>
        </listitem>

        <listitem>
          <para><emphasis>Web Application Bundle</emphasis> - A Web
          Application deployed as an OSGi bundle, also called a WAB.</para>
        </listitem>

        <listitem>
          <para><emphasis>WAB</emphasis> - The acronym for a Web Application
          Bundle.</para>
        </listitem>

        <listitem>
          <para><emphasis>Web Extender</emphasis> - An extender bundle that
          deploys the Web Application Bundle to the Web Runtime based on the
          Web Application Bundle's state.</para>
        </listitem>

        <listitem>
          <para><emphasis>Web URL Handler</emphasis> - A URL handler which
          transforms a Web Application Archive (WAR) to conform to the OSGi
          specifications during installation by installing the WAR through a
          special URL so that it becomes a Web Application Bundle.</para>
        </listitem>

        <listitem>
          <para><emphasis>Web Runtime</emphasis> - A Java Server Pages and
          Servlet environment, receiving the web requests and translating them
          to servlet calls, either from Web Application servlets or other
          classes.</para>
        </listitem>

        <listitem>
          <para><emphasis>Web Component</emphasis> - A Servlet or Java Server
          Page (JSP).</para>
        </listitem>

        <listitem>
          <para><emphasis>Servlet</emphasis> - An object implementing the
          Servlet interface; this is for the request handler model in the
          Servlet Specification.</para>
        </listitem>

        <listitem>
          <para><emphasis>Servlet Context</emphasis> - The model representing
          the Web Application in the Servlet Specification.</para>
        </listitem>

        <listitem>
          <para><emphasis>Java Server Page (JSP)</emphasis> - A declarative,
          template based model for generating content through Servlets that is
          optionally supported by the Web Runtime.</para>
        </listitem>

        <listitem>
          <para><emphasis>Context Path</emphasis> - The URI path prefix of any
          content accessible in a Web Application.</para>
        </listitem>
      </itemizedlist>

      <figure xml:id="i3084702">
        <title>Web Container Entities</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.028in" contentwidth="7.000in" fileref="web-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section xml:id="i3100968">
      <title>Dependencies</title>

      <para>The package dependencies for the clients of this specification are
      listed in the following table.</para>

      <table>
        <title>Dependency versions</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="3*"/>

          <colspec colnum="2" colwidth="1.5*"/>

          <colspec colnum="3" colwidth="3*"/>

          <thead>
            <row>
              <entry>Packages</entry>

              <entry>Export Version</entry>

              <entry>Client Import Range</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>javax.servlet</code></entry>

              <entry><code>2.5</code></entry>

              <entry><code>[2.5,3.0)</code></entry>
            </row>

            <row>
              <entry><code>javax.servlet.http</code></entry>

              <entry><code>2.5</code></entry>

              <entry><code>[2.5,3.0)</code></entry>
            </row>

            <row>
              <entry><code>javax.servlet.jsp.el</code></entry>

              <entry><code>2.1</code></entry>

              <entry><code>[2.1,3.0)</code></entry>
            </row>

            <row>
              <entry><code>javax.servlet.jsp.jstl.core</code></entry>

              <entry><code>1.2</code></entry>

              <entry><code>[1.2,2.0)</code></entry>
            </row>

            <row>
              <entry><code>javax.servlet.jsp.jstl.fmt</code></entry>

              <entry><code>1.2</code></entry>

              <entry><code>[1.2,2.0)</code></entry>
            </row>

            <row>
              <entry><code>javax.servlet.jsp.jstl.sql</code></entry>

              <entry><code>1.2</code></entry>

              <entry><code>[1.2,2.0)</code></entry>
            </row>

            <row>
              <entry><code>javax.servlet.jsp.jstl.tlv</code></entry>

              <entry><code>1.2</code></entry>

              <entry><code>[1.2,2.0)</code></entry>
            </row>

            <row>
              <entry><code>javax.servlet.jsp.resources</code></entry>

              <entry><code>2.1</code></entry>

              <entry><code>[2.1,3.0)</code></entry>
            </row>

            <row>
              <entry><code>javax.servlet.jsp.tagext</code></entry>

              <entry><code>2.1</code></entry>

              <entry><code>[2.1,3.0)</code></entry>
            </row>

            <row>
              <entry><code>javax.servlet.jsp</code></entry>

              <entry><code>2.1</code></entry>

              <entry><code>[2.1,3.0)</code></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>JSP is optional for the Web Runtime.</para>
    </section>

    <section>
      <title>Synopsis</title>

      <para>The Web Application Specification is composed of a number of
      cooperating parts, which are implemented by a <emphasis>Web
      Container</emphasis>. A Web Container consists of:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Web Extender</emphasis> - Responsible for deploying
          Web Application Bundles (WAB) to a Web Runtime,</para>
        </listitem>

        <listitem>
          <para><emphasis>Web Runtime</emphasis> - Provides support for
          Servlet and optionally for JSPs, and</para>
        </listitem>

        <listitem>
          <para><emphasis>Web URL Handler</emphasis> - Provides on-the-fly
          enhancements of non-OSGi aware Web ARchives (WAR) so that they can
          be installed as a WAB.</para>
        </listitem>
      </itemizedlist>

      <para>WABs are standard OSGi bundles with additional headers in the
      manifest that serve as deployment instructions to the Web Extender. WABs
      can also contain the Java EE defined <code>web.xml</code> descriptor in
      the <code>WEB-INF</code>/ directory. When the Web Extender detects that
      a WAB is ready the Web Extender deploys the WAB to the Web Runtime using
      information contained in the <code>web.xml</code> descriptor and the
      appropriate manifest headers. The Bundle Context of the WAB is made
      available as a Servlet Context attribute. From that point, the Web
      Runtime will use the information in the WAB to serve content to any
      requests. Both dynamic as well as static content can be provided.</para>

      <para>The Web URL Handler allows the deployment of an unmodified WAR as
      a WAB into the OSGi framework. This Web URL Handler provides a URL
      stream handler with the <code>webbundle:</code> scheme. Installing a WAR
      with this scheme allows the Web URL Handler to interpose itself as a
      filter on the input stream of the contents of the WAR, transforming the
      contents of the WAR into a WAB. The Web URL Handler rewrites the
      manifest by adding necessary headers to turn the WAR into a valid WAB.
      Additional headers can be added to the manifest that serve as
      instructions to the Web Extender.</para>

      <para>After a WAB has been deployed to the Web Runtime, the Web
      Application can interact with the OSGi framework via the provided Bundle
      Context. The Servlet Context associated with this WAB follows the same
      life cycle as the WAB. That is, when the underlying Web Application
      Bundle is started, the Web Application is deployed to the Web Runtime.
      When the underlying Web Application Bundle is stopped because of a
      failure or other reason, the Web Application is undeployed from the Web
      Run-time.</para>
    </section>
  </section>

  <section>
    <title>Web Container</title>

    <para>A Web Container is the implementation of this specification. It
    consists of the following parts:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Web Extender</emphasis> - Detects Web Application
        Bundles (WAB) and tracks their life cycle. Ready WABs are deployed to
        the Web Runtime.</para>
      </listitem>

      <listitem>
        <para><emphasis>Web Runtime</emphasis> - A runtime environment for a
        Web Application that supports the <xref linkend="i3076808"/> and <xref linkend="i3076835"/> or later. The Web Runtime receives web requests
        and calls the appropriate methods on servlets. Servlets can be
        implemented by classes or Java Server Pages.</para>
      </listitem>

      <listitem>
        <para><emphasis>Web URL Handler</emphasis> - A URL stream handler
        providing the <code>webbundle:</code> scheme. This scheme can be used
        to install WARs in an OSGi framework. The Web URL Handler will then
        automatically add the required OSGi manifest headers.</para>
      </listitem>
    </itemizedlist>

    <para>The extender, runtime, and handler can all be implemented in the
    same or different bundles and use unspecified mechanisms to communicate.
    This specification uses the defined names of the sub-parts as the actor;
    the term Web Container is the general name for this collection of
    actors.</para>
  </section>

  <section>
    <title>Web Application Bundle</title>

    <para>Bundles are the deployment and management entities under OSGi. A
    <emphasis>Web Application Bundle</emphasis> (WAB) is deployed as an OSGi
    bundle in an OSGi framework, where each WAB provides a single
    <emphasis>Web Application</emphasis>. A Web Application can make use of
    the <xref linkend="i3076808"/> and <xref linkend="i3076835"/> programming
    models, or later, to provide content for the web.</para>

    <para>A WAB is defined as a normal OSGi bundle that contains web
    accessible content, both static and dynamic. There are no restrictions on
    bundles. A Web Application can be packaged as a WAB during application
    development, or it can be transparently created at bundle install time
    from a standard Web Application aRchive (WAR) via transformation by the
    Web URL Handler, see <xref linkend="i3100445"/>.</para>

    <para>A WAB is a valid OSGi bundle and as such must fully describe its
    dependencies and exports (if any). As Web Applications are modularized
    further into multiple bundles (and not deployed as WAR files only) it is
    possible that a WAB can have dependencies on other bundles.</para>

    <para>A WAB may be installed into the framework using the
    <code>BundleContext.installBundle</code> methods. Once installed, a WAB's
    life cycle is managed just like any other bundle in the framework. This
    life cycle is tracked by the Web Extender who will then deploy the Web
    Application to the Web Runtime when the WAB is ready and will undeploy it
    when the WAB is no longer ready. This state is depicted in <xref linkend="i3086869"/>.</para>

    <figure xml:id="i3086869">
      <title>State diagram Web Application</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.139in" contentwidth="7.125in" fileref="web-app-states.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <section xml:id="i3077053">
      <title>WAB Definition</title>

      <para>A WAB is differentiated from non Web Application bundles through
      the specification of the additional manifest header:</para>

      <programlisting>Web-ContextPath ::= path</programlisting>

      <para>The Web-ContextPath header specifies the value of the
      <emphasis>Context Path</emphasis> of the Web Application. All web
      accessible content of the Web Application is available on the web server
      relative to this Context Path. For example, if the context path is
      <code>/sales</code>, then the URL would be something like:
      <code>http://www.acme.com/sales</code>. The Context Path must always
      begin with a solidus (<code>'/' \u002F</code>).</para>

      <para>The Web Extender must not recognize a bundle as a Web Application
      unless the Web-ContextPath header is present in its manifest and the
      header value is a valid path for the bundle.</para>

      <para>A WAB can optionally contain a <code>web.xml</code> resource to
      specify additional configuration. This <code>web.xml</code> must be
      found with the Bundle <code>findEntries</code> method at the
      path:</para>

      <programlisting> <code>WEB-INF/web.xml</code></programlisting>

      <para>The <code>findEntries</code> method includes fragments, allowing
      the <code>web.xml</code> to be provided by a fragment. The Web Extender
      must fully support a <code>web.xml</code> descriptor that specifies
      Servlets, Filters, or Listeners whose classes are required by the
      WAB.</para>
    </section>

    <section>
      <title>Starting the Web Application Bundle</title>

      <para>A WAB's Web Application must be <emphasis>deployed</emphasis>
      while the WAB is <emphasis>ready</emphasis>. Deployed means that the Web
      Application is available for web requests. Once deployed, a WAB can
      serve its web content on the given Context Path. Ready is when the
      WAB:</para>

      <itemizedlist>
        <listitem>
          <para>Is in the <code>ACTIVE</code> state, or</para>
        </listitem>

        <listitem>
          <para>Has a <code>lazy</code> activation policy and is in the
          <code>STARTING</code> state.</para>
        </listitem>
      </itemizedlist>

      <para>The Web Extender should ensure that serving static content from
      the WAB does not activate the WAB when it has a <code>lazy</code>
      activation policy.</para>

      <para>To deploy the WAB, the Web Extender must initiate the deploying of
      the Web Application into a Web Runtime. This is outlined in the
      following steps:</para>

      <orderedlist>
        <listitem>
          <para>Wait for the WAB to become ready. The following steps can take
          place asynchronously with the starting of the WAB.</para>
        </listitem>

        <listitem>
          <para>Post an <code>org/osgi/service/web/DEPLOYING</code> event. See
          <xref linkend="i3089230"/>.</para>
        </listitem>

        <listitem>
          <para>Validate that the <code>Web-ContextPath</code> manifest header
          does not match the Context Path of any other currently deployed web
          application. If the Context Path value is already in use by another
          Web Application, then the Web Application must not be deployed, and
          the deployment fails, see <xref linkend="i3078658"/>. The Web
          Extender should log the collision. If the prior Web Application with
          the same Context Path is undeployed later, this Web Application
          should be considered as a candidate, see <xref linkend="i3091603"/>.</para>
        </listitem>

        <listitem>
          <para>The Web Runtime processes deployment information by processing
          the <code>web.xml</code> descriptor, if present. The Web Container
          must perform the necessary initialization of Web Components in the
          WAB as described in the <xref linkend="i3076808"/>. This involves
          the following sub-steps in the given order:</para>

          <itemizedlist>
            <listitem>
              <para>Create a Servlet Context for the Web Application.</para>
            </listitem>

            <listitem>
              <para>Instantiate configured Servlet event listeners.</para>
            </listitem>

            <listitem>
              <para>Instantiate configured application filter instances
              etc.</para>
            </listitem>
          </itemizedlist>

          <para>The Web Runtime is required to complete instantiation of
          listeners prior to the start of execution of the first request into
          the Web Application by the Web Runtime. Attribute changes to the
          Servlet Context and Http Session objects can occur concurrently. The
          Servlet Container is not required to synchronize the resulting
          notifications to attribute listener classes. Listener classes that
          maintain state are responsible for the integrity of the data and
          should handle this case explicitly.</para>

          <para>If event listeners or filters are used in the
          <code>web.xml</code>, then the Web Runtime will load the
          corresponding classes from the bundle activating the bundle if it
          was lazily started. Such a configuration will therefore not act
          lazily.</para>
        </listitem>

        <listitem>
          <para>Publish the Servlet Context as a service with identifying
          service properties, see <xref linkend="i3078599"/>.</para>
        </listitem>

        <listitem>
          <para>Post an <code>org/osgi/service/web/DEPLOYED</code> event to
          indicate that the web application is now available. See <xref linkend="i3089230"/>.</para>
        </listitem>
      </orderedlist>

      <para>If at any moment before the
      <code>org/osgi/service/web/DEPLOYED</code> event is published the
      deployment of the WAB fails, then the WAB deployment fails, see <xref linkend="i3078658"/>.</para>
    </section>

    <section xml:id="i3078658">
      <title>Failure</title>

      <para>Any validation failures must prevent the Web Application from
      being accessible via HTTP, and must result in a
      <code>org/osgi/service/web/FAILED</code> event being posted. See <xref linkend="i3089230"/>. The situation after the failure must be as if the
      WAB was never deployed.</para>
    </section>

    <section xml:id="i3078599">
      <title>Publishing the Servlet Context</title>

      <para>To help management agents with tracking the state of Web
      Applications, the Web Extender must register the Servlet Context of the
      WAB as a service, using the Bundle Context of the WAB. The Servlet
      Context service must be registered with the service properties listed in
      the following table.</para>

      <table>
        <title>Servlet Context Service Properties</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="2*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="3*"/>

          <thead>
            <row>
              <entry>Property Name</entry>

              <entry>Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>osgi.web.symbolicname</code></entry>

              <entry><code>String</code></entry>

              <entry><para>The symbolic name for the Web Application
              Bundle</para></entry>
            </row>

            <row>
              <entry><code>osgi.web.version</code></entry>

              <entry><code>String</code></entry>

              <entry><para>The version of the Web Application Bundle. If no
              Bundle-Version is specified in the manifest then this property
              must not be set.</para></entry>
            </row>

            <row>
              <entry><code>osgi.web.contextpath</code></entry>

              <entry><code>String</code></entry>

              <entry><para>The Context Path from which the WAB's content will
              be served.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="i3096883">
      <title>Static Content</title>

      <para>A deployed WAB provides content on requests from the web. For
      certain access paths, this can serve content from the resources of the
      web application: this is called <emphasis>static content</emphasis>. A
      Web Runtime must use the Servlet Context resource access methods to
      service static content, the resource loading strategy for these methods
      is based on the <code>findEntries</code> method, see <xref linkend="i3082990"/>. For confidentiality reasons, a Web Runtime must
      not return any static content for paths that start with one of the
      following prefixes:</para>

      <programlisting>WEB-INF/
OSGI-INF/
META-INF/
OSGI-OPT/</programlisting>

      <para>These <emphasis>protected directories</emphasis> are intended to
      shield code content used for dynamic content generation from
      accidentally being served over the web, which is a potential attack
      route. In the servlet specification, the <code>WEB-INF</code>/ directory
      in the WAR is protected in such a way. However, this protection is not
      complete. A dependent JAR can actually be placed outside the WEB-INF
      directory that can then be served as static content. The same is true
      for a WAB. Though the protected directories must never be served over
      the web, there are no other checks required to verify that no content
      can be served that is also available from the Bundle class path.</para>

      <para>It is the responsibility of the author of the WAB to ensure that
      confidential information remains confidential by placing it in one of
      the protected directories. WAB bundles should be constructed in such a
      way that they do not accidentally expose code or confidential
      information. The simplest way to achieve this is to follow the WAR model
      where code is placed in the <code>WEB-INF/classes</code> directory and
      this directory is placed on the Bundle's class path as the first entry.
      For example:</para>

      <programlisting>Bundle-ClassPath: WEB-INF/classes, WEB-INF/lib/acme.jar</programlisting>
    </section>

    <section>
      <title>Dynamic Content</title>

      <para>Dynamic content is content that uses code to generate the content,
      for example a servlet. This code must be loaded from the bundle with the
      Bundle <code>loadClass</code> method, following all the Bundle class
      path rules.</para>

      <para>Unlike a WAR, a WAB is not constrained to package classes and code
      resources in the <code>WEB-INF/classes</code> directory or dependent
      JARs in <code>WEB-INF/lib/</code> only. These entries can be packaged in
      any way that's valid for an OSGi bundle as long as such directories and
      JARs are part of bundle class path as set with the Bundle-ClassPath
      header and any attached fragments. JARs that are specified in the
      Bundle-ClassPath header are treated like JARs in the
      <code>WEB-INF/lib/</code> directory of the Servlet specification.
      Similarly, any directory that is part of the Bundle-ClassPath header is
      treated like <code>WEB-INF/classes</code> directory of the Servlet
      specification.</para>

      <para>Like WARs, code content that is placed outside the protected
      directories can be served up to clients as static content.</para>
    </section>

    <section>
      <title>Content Serving Example</title>

      <para>This example consists of a WAB with the following contents:</para>

      <programlisting>acme.jar:
    Bundle-ClassPath: WEB-INF/classes, LIB/bar.jar
    Web-ContextPath: /acme

    WEB-INF/lib/foo.jar
    LIB/bar.jar
    index.html
    favicon.ico</programlisting>

      <para>The content of the embedded JARs <code>foo.jar</code> and
      <code>bar.jar</code> is:</para>

      <programlisting>foo.jar:                bar.jar:
    META-INF/foo.tld        META-INF/bar.tld
    foo/FooTag.class        bar/BarTag.class</programlisting>

      <para>Assuming there are no special rules in place then the following
      lists specifies the result of a number of web requests for static
      content:</para>

      <programlisting>/acme/index.html            acme.wab:index.html
/acme/favicon.ico           acme.wab:favicon.ico
/acme/WEB-INF/lib/foo.jar   not found because protecteddirectory
/acme/LIB/bar.jar           acme.wab:LIB/bar.jar  (code, but not protected)</programlisting>

      <para>In this example, the tag classes in <code>bar.jar</code> must be
      found (if JSP is supported) but the tag classes in <code>foo.jar</code>
      must not because <code>foo.jar</code> is not part of the bundle class
      path.</para>
    </section>

    <section xml:id="i3091603">
      <title>Stopping the Web Application Bundle</title>

      <para>A web application is stopped by stopping the corresponding WAB. In
      response to a WAB <code>STOPPING</code> event, the Web Extender must
      <emphasis>undeploy</emphasis> the corresponding Web Application from the
      Servlet Container and clean up any resources. This undeploying must
      occur synchronously with the WAB's stopping event. This will involve the
      following steps:</para>

      <orderedlist>
        <listitem>
          <para>An <code>org/osgi/service/web/UNDEPLOYING</code> event is
          posted to signal that a Web Application will be removed. See <xref linkend="i3089230"/>.</para>
        </listitem>

        <listitem>
          <para>Unregister the corresponding Servlet Context service</para>
        </listitem>

        <listitem>
          <para>The Web Runtime must stop serving content from the Web
          Application.</para>
        </listitem>

        <listitem>
          <para>The Web Runtime must clean up any Web Application specific
          resources as per servlet 2.5 specification.</para>
        </listitem>

        <listitem>
          <para>Emit an <code>org/osgi/service/web/UNDEPLOYED</code> event.
          See <xref linkend="i3089230"/>.</para>
        </listitem>

        <listitem>
          <para>It is possible that there are one or more
          <emphasis>colliding</emphasis> WABs because they had the same
          Context Path as this stopped WAB. If such colliding WABs exists then
          the Web Extender must attempt to deploy the colliding WAB with the
          lowest bundle id.</para>
        </listitem>
      </orderedlist>

      <para>Any failure during undeploying should be logged but must not stop
      the cleaning up of resources and notification of (other) listeners as
      well as handling any collisions.</para>
    </section>

    <section>
      <title>Uninstalling the Web Application Bundle</title>

      <para>A web application can be uninstalled by uninstalling the
      corresponding WAB. The WAB will be uninstalled from the OSGi
      framework.</para>
    </section>

    <section>
      <title>Stopping of the Web Extender</title>

      <para>When the Web Extender is stopped all deployed WABs are undeployed
      as described in <xref linkend="i3091603"/>. Although the WAB is
      undeployed it remains in the <code>ACTIVE</code> state. When the Web
      Extender leaves the <code>STOPPING</code> state all WABs will have been
      undeployed.</para>
    </section>
  </section>

  <section xml:id="i3100445">
    <title>Web URL Handler</title>

    <para>The Web URL Handler acts as a filter on the Input Stream of an
    install operation. It receives the WAB or WAR and it then generates a JAR
    that conforms to the WAB specification by rewriting the manifest resource.
    This process is depicted in <xref linkend="i3100518"/>.</para>

    <figure xml:id="i3100518">
      <title>Web URL Handler</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.498in" contentwidth="7.000in" fileref="webbundle-url-handler.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>When the Web Container bundle is installed it must provide the
    <code>webbundle:</code> scheme to the URL class. The Web URL Handler has
    two primary responsibilities:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>WAB</emphasis> - If the source is already a bundle
        then only the Web-ContextPath can be set or overwritten.</para>
      </listitem>

      <listitem>
        <para><emphasis>WAR</emphasis> - If the source is a WAR (that is, it
        must not contain any OSGi defined headers) then convert the WAR into a
        WAB.</para>
      </listitem>
    </itemizedlist>

    <para>The Web URL Handler can take parameters from the query arguments of
    the install URL, see <xref linkend="i3086131"/>.</para>

    <para>The URL handler must validate query parameters, and ensure that the
    manifest rewriting results in valid OSGi headers. Any validation failures
    must result in Bundle Exception being thrown and the bundle install must
    fail.</para>

    <para>Once a WAB is generated and installed, its life cycle is managed
    just like any other bundle in the framework.</para>

    <section>
      <title>URL Scheme</title>

      <para>The Web URL Handler's scheme is defined to be:</para>

      <programlisting>scheme     ::= 'webbundle:' embedded '?' web-params
embedded   ::= &lt;embedded URL according to RFC 1738&gt;
web-params ::= ( web-param ( '&amp;' web-param )* )?
web-param  ::= &lt;key&gt; '=' &lt;value&gt;</programlisting>

      <para>The <code>web-param</code> &lt;<code>key&gt;</code> and
      <code>&lt;value&gt;</code> as well as the <code>&lt;embedded
      url&gt;</code> must follow <xref linkend="i3079490"/> for their escaping
      and character set rules.A Web URL must further follow all the rules of a
      URL. Whitespaces are not allowed between terms.</para>

      <para>An example for a <code>webbundle:</code> URL:</para>

      <programlisting>webbundle:http://www.acme.com:8021/sales.war?Web-ContextPath=/sales</programlisting>

      <para>Any URL scheme understood by the framework can be embedded, such
      as an <code>http:</code>, or <code>file:</code> URL. Some forms of
      embedded URL also contain URL query parameters and this must be
      supported. The embedded URL most be encoded as a standard URL. That is,
      the control characters like colon (<code>':' \u003A</code>), solidus
      (<code>'/' \u002F</code>), percent (<code>'%' \u0025</code>), and
      ampersand (<code>'&amp;' \u0026</code>) must not be encoded. Thus the
      value returned from the <code>getPath</code> method may contain a query
      part. Any implementation must take care to preserve both the query
      parameters for the embedded URL, and for the complete
      <code>webbundle:</code> URL. A question mark must always follow the
      embedded URL to simplify this processing. The following example shows an
      HTTP URL with some query parameters:</para>

    <programlisting>webbundle:http://www.acme.com/sales?id=123?Bundle-SymbolicName=com.example&amp;
                                             Web-ContextPath=/</programlisting>
    </section>

    <section>
      <title>URL Parsing</title>

      <para>The <code>URL</code> object for a <code>webbundle:</code> URL must
      return the following values for the given methods:</para>

      <itemizedlist>
        <listitem>
          <para><code>getProtocol</code> - <code>webbundle</code></para>
        </listitem>

        <listitem>
          <para><code>getPath</code> - The complete embedded URL</para>
        </listitem>

        <listitem>
          <para><code>getQuery</code> - The parameters for processing of the
          manifest.</para>
        </listitem>
      </itemizedlist>

      <para>For the following example:</para>

      <programlisting>webbundle:http://acme.com/repo?war=example.war?Web-ContextPath=/sales</programlisting>

      <para>The aforementioned methods must return:</para>

      <itemizedlist>
        <listitem>
          <para><code>getProtocol</code> - <code>webbundle</code></para>
        </listitem>

        <listitem>
          <para><code>getPath</code> -
          <code>http://acme.com/repo?war=example.war</code></para>
        </listitem>

        <listitem>
          <para><code>getQuery</code> -
          <code>Web-ContextPath=/sales</code></para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i3086131">
      <title>URL Parameters</title>

      <para>All the parameters in the <code>webbundle:</code> URL are optional
      except for the Web-ContextPath parameter. The parameter names are case
      insensitive, but their values must be treated as case sensitive. <xref linkend="service.war-webbundle.url.parameters"/> describes the
      parameters that must be supported by any <code>webbundle:</code> URL
      Stream handler. A Web URL Handler is allowed to support additional
      parameters.</para>

      <table xml:id="service.war-webbundle.url.parameters">
        <title>Web bundle URL Parameters</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="2.5*"/>

          <thead>
            <row>
              <entry>Parameter Name</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>Bundle-SymbolicName</code></entry>

              <entry><para>The desired symbolic name for the resulting
              WAB.</para></entry>
            </row>

            <row>
              <entry><code>Bundle-Version</code></entry>

              <entry><para>The version of the resulting WAB. The value of this
              parameter must follow the OSGi versioning syntax.</para></entry>
            </row>

            <row>
              <entry><code>Bundle-ManifestVersion</code></entry>

              <entry><para>The desired bundle manifest version. Currently, the
              only valid value for this parameter is
              <code>2</code>.</para></entry>
            </row>

            <row>
              <entry><code>Import-Package</code></entry>

              <entry><para>A list of packages that the war file depends
              on.</para></entry>
            </row>

            <row>
              <entry><code>Web-ContextPath</code></entry>

              <entry><para>The Context Path from which the Servlet Container
              should serve content from the resulting WAB. This is the only
              valid parameter when the input JAR is already a bundle. This
              parameter must be specified.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>WAB Modification</title>

      <para>The Web URL Handler can set or modify the Web-ContextPath of a WAB
      if the input source is already a bundle. It must be considered as a
      bundle when any of the OSGi defined headers listed in <xref linkend="service.war-webbundle.url.parameters"/> is present in the
      bundle.</para>

      <para>For WAB Modification, the Web URL Handler must only support the
      Web-ContextPath parameter and it must not modify any existing headers
      other than the Web-ContextPath. Any other parameter given must result in
      a Bundle Exception.</para>
    </section>

    <section>
      <title>WAR Manifest Processing</title>

      <para>The Web URL Handler is designed to support the transparent
      deployment of Java EE Web ARchives (WAR). Such WARs are ignorant of the
      requirements of the underlying OSGi framework that hosts the Web
      Runtime. These WARs are not proper OSGi bundles because they do not
      contain the necessary metadata in the manifest. For example, a WAR
      without a Bundle-ManifestVersion, Import-Package, and other headers
      cannot operate in an OSGi framework.</para>

      <para>The Web URL Handler implementation copies the contents of the
      embedded URL to the output and rewrites the manifest headers based on
      the given parameters. The result must be a WAB.</para>

      <para>Any parameters specified must be treated as manifest headers for
      the web. The following manifest headers must be set to the following
      values if not specified:</para>

      <itemizedlist>
        <listitem>
          <para><code>Bundle-ManifestVersion</code> - Must be set to 2.</para>
        </listitem>

        <listitem>
          <para><code>Bundle-SymbolicName</code> - Generated in an
          implementation specific way.</para>
        </listitem>

        <listitem>
          <para><code>Bundle-ClassPath</code> - Must consist of:</para>

          <itemizedlist>
            <listitem>
              <para><code>WEB-INF/classes</code></para>
            </listitem>

            <listitem>
              <para>All JARs from the <code>WEB-INF/lib</code> directory in
              the WAR. The order of these embedded JARs is unspecified.</para>
            </listitem>

            <listitem>
              <para>If these JARs declare dependencies in their manifest on
              other JARs in the bundle, then these jars must also be appended
              to the Bundle-ClassPath header. The process of detecting JAR
              dependencies must be performed recursively as indicated in the
              Servlet Specification.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para><code>Web-ContextPath</code> - The Web-ContextPath must be
          specified as a parameter. This Context Path should start with a
          leading solidus (<code>'/' \u002F</code>). The Web URL handler must
          add the preceding solidus it if it is not present.</para>
        </listitem>
      </itemizedlist>

      <para>The Web URL Handler is responsible for managing the import
      dependencies of the WAR. Implementations are free to handle the import
      dependencies in an implementation defined way. They can augment the
      Import-Package header with byte-code analysis information, add a fixed
      set of clauses, and/or use the DynamicImport-Package header as last
      resort.</para>

      <para>Any other manifest headers defined as a parameter or WAR manifest
      header not described in this section must be copied to the WAB manifest
      by the Web URL Handler. Such an header must not be modified.</para>
    </section>

    <section>
      <title>Signed WAR files</title>

      <para>When a signed WAR file is installed using the Web URL Handler,
      then the manifest rewriting process invalidates the signatures in the
      bundle. The OSGi specification requires fully signed bundles for
      security reasons, security resources in partially signed bundles are
      ignored.</para>

      <para>If the use of the signing metadata is required, the WAR must be
      converted to a WAB during development and then signed. In this case, the
      Web URL Handler cannot be used. If the Web URL Handler is presented with
      a signed WAR, the manifest name sections that contain the resource's
      check sums must be stripped out by the URL stream handler. Any signer
      files ( <code>*.SF</code> and their corresponding <code>DSA/RSA</code>
      signature files) must also be removed.</para>
    </section>
  </section>

  <section xml:id="i3089230">
    <title>Events</title>

    <para>The Web Extender must track all WABs in the OSGi framework in which
    the Web Extender is installed. The Web Extender must post Event Admin
    events, which is asynchronous, at crucial points in its processing. The
    topic of the event must be one of the following values:</para>

    <itemizedlist>
      <listitem>
        <para><code>org/osgi/service/web/DEPLOYING</code> - The Web Extender
        has accepted a WAB and started the process of deploying a Web
        Application.</para>
      </listitem>

      <listitem>
        <para><code>org/osgi/service/web/DEPLOYED</code> - The Web Extender
        has finished deploying a Web Application, and the Web Application is
        now available for web requests on its Context Path.</para>
      </listitem>

      <listitem>
        <para><code>org/osgi/service/web/UNDEPLOYING</code> - The web extender
        started undeploying the Web Application in response to its
        corresponding WAB being stopped or the Web Extender is stopped.</para>
      </listitem>

      <listitem>
        <para><code>org/osgi/service/web/UNDEPLOYED</code> - The Web Extender
        has undeployed the Web Application. The application is no longer
        available for web requests.</para>
      </listitem>

      <listitem>
        <para><code>org/osgi/service/web/FAILED</code> - The Web Extender has
        failed to deploy the Web Application, this event can be fired after
        the <code>DEPLOYING</code> event has fired and indicates that no
        DEPLOYED event will be fired.</para>
      </listitem>
    </itemizedlist>

    <para>For each event topic above, the following properties must be
    published:</para>

    <itemizedlist>
      <listitem>
        <para><code>bundle.symbolicName</code> - (<code>String</code>) The
        bundle symbolic name of the WAB.</para>
      </listitem>

      <listitem>
        <para><code>bundle.id</code> - (<code>Long</code>) The bundle id of
        the WAB.</para>
      </listitem>

      <listitem>
        <para><code>bundle</code> - (<code>Bundle)</code> The Bundle object of
        the WAB.</para>
      </listitem>

      <listitem>
        <para><code>bundle.version</code> - (<code>Version)</code> The version
        of the WAB.</para>
      </listitem>

      <listitem>
        <para><code>context.path</code> - (<code>String</code>) The Context
        Path of the Web Application.</para>
      </listitem>

      <listitem>
        <para><code>timestamp - (Long</code>) The time when the event
        occurred</para>
      </listitem>

      <listitem>
        <para><code>extender.bundle</code> - (<code>Bundle</code>) The
        <code>Bundle</code> object of the Web Extender Bundle</para>
      </listitem>

      <listitem>
        <para><code>extender.bundle.id</code> - (<code>Long</code>) The id of
        the Web Extender Bundle.</para>
      </listitem>

      <listitem>
        <para><code>extender.bundle.symbolicName</code> -
        (<code>String)</code> The symbolic name of the Web Extender
        Bundle.</para>
      </listitem>

      <listitem>
        <para><code>extender.bundle.version</code> - (<code>Version</code>)
        The version of the Web Extender Bundle.</para>
      </listitem>
    </itemizedlist>

    <para>In addition, the <code>org/osgi/service/web/FAILED</code> event must
    also have the following property:</para>

    <itemizedlist>
      <listitem>
        <para><code>exception</code> - (Throwable) If an exception caused the
        failure, an exception detailing the error that occurred during the
        deployment of the WAB.</para>
      </listitem>

      <listitem>
        <para><code>collision</code> - (<code>String</code>) If a name
        collision occurred, the Web-ContextPath that had a collision</para>
      </listitem>

      <listitem>
        <para><code>collision.bundles</code> -
        (<code>Collection&lt;Long&gt;</code>) If a name collision occurred, a
        collection of bundle ids that all have the same value for the
        Web-ContextPath manifest header.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Interacting with the OSGi Environment</title>

    <section>
      <title>Bundle Context Access</title>

      <para>In order to properly integrate in an OSGi environment, a Web
      Application can access the OSGi service registry for publishing its
      services, accessing services provided by other bundles, and listening to
      bundle and service events to track the life cycle of these artifacts.
      This requires access to the Bundle Context of the WAB.</para>

      <para>The Web Extender must make the Bundle Context of the corresponding
      WAB available to the Web Application via the Servlet Context
      <code>osgi-bundlecontext</code> attribute. A Servlet can obtain a Bundle
      Context as follows:</para>

      <programlisting>BundleContext ctxt = (BundleContext) 
    servletContext.getAttribute("osgi-bundlecontext");</programlisting>
    </section>

    <section>
      <title>Other Component Models</title>

      <para>Web Applications sometimes need to inter-operate with services
      provided by other component models, such as a Declarative Services or
      Blueprint. Per the Servlet specification, the Servlet Container owns the
      life cycle of a Servlet; the life cycle of the Servlet must be
      subordinate to the life cycle of the Servlet Context, which is only
      dependent on the life cycle of the WAB. Interactions between different
      bundles are facilitated by the OSGi service registry. This interaction
      can be managed in several ways:</para>

      <itemizedlist>
        <listitem>
          <para>A Servlet can obtain a Bundle Context from the Servlet Context
          for performing service registry operations.</para>
        </listitem>

        <listitem>
          <para>Via the JNDI Specification and the <code>osgi:service</code>
          JNDI namespace. The OSGi JNDI specification describes how OSGi
          services can be made available via the JNDI URL Context. It defines
          an <code>osgi:service</code> namespace and leverages URL Context
          factories to facilitate JNDI integration with the OSGi service
          registry.</para>
        </listitem>
      </itemizedlist>

      <para>Per this specification, it is not possible to make the Servlet
      life cycle dependent on the availability of specific services. Any
      synchronization and service dependency management must therefore be done
      by the Web Application itself.</para>
    </section>

    <section xml:id="i3082990">
      <title>Resource Lookup</title>

      <para>The <code>getResource</code> and <code>getResourceAsStream</code>
      methods of the <code>ServletContext</code> interface are used to access
      resources in the web application. For a WAB, these resources must be
      found according to the <code>findEntries</code> method, this method
      includes fragments. For the <code>getResource</code> and
      <code>getResourceAsStream</code> method, if multiple resources are
      found, then the first one must be used.</para>

      <para>Since the <code>getResource</code> and
      <code>getResourceAsStream</code> methods do not support wildcards while
      the <code>findEntries</code> method does it is necessary to escape the
      wildcard asterisk (<code>'*' \u002A</code>) with prefixing it with a
      reverse solidus (<code>'\' \u005C</code>). This implies that a reverse
      solidus must be escaped with an extra reverse solidus. For example, the
      path <code>foo\bar*</code> must be escaped to
      <code>foo\\bar\*</code>.</para>

      <para>The <code>getResourcePaths</code> method must map to the Bundle
      <code>getEntryPaths</code> method, its return type is a Set and can not
      handle multiples. However, the paths from the <code>getEntryPaths</code>
      method are relative while the methods of the
      <code>getResourcePaths</code> must be absolute.</para>

      <para>For example, assume the following manifest for a bundle:</para>

      <programlisting>Bundle-ClassPath: localized, WEB-INF
...</programlisting>

      <para>This WAB has an attached fragment <code>acme-de.jar</code> with
      the following content:</para>

      <programlisting>META-INF/MANIFEST.MF
localized/logo.png</programlisting>

      <para>The <code>getResource</code> method for
      <code>localized/logo.png</code> uses the <code>findEntries</code> method
      to find a resource in the directory <code>/localized</code> and the
      resource <code>logo.png</code>. Assuming the host bundle has no
      <code>localized/</code> directory, the Web Runtime must serve the
      <code>logo.png</code> resource from the <code>acme-de.jar</code>.</para>
    </section>

    <section>
      <title>Resource Injection and Annotations</title>

      <para>The Web Application <code>web.xml</code> descriptor can specify
      the <code>metadata-complete</code> attribute on the <code>web-app</code>
      element. This attribute defines whether the <code>web.xml</code>
      descriptor is <emphasis>complete</emphasis>, or whether the classes in
      the bundle should be examined for deployment annotations. If the
      <code>metadata-complete</code>attribute is set to <code>true</code>, the
      Web Runtime must ignore any servlet annotations present in the class
      files of the Web Application. Otherwise, if the
      <code>metadata-complete</code> attribute is not specified, or is set to
      <code>false</code>, the container should process the class files of the
      Web Application for annotations, if supported.</para>

      <para>A WAB can make use of the annotations defined by <xref linkend="i3081342"/> if supported by the Web Extender. Such a WAB must
      import the packages the annotations are contained in. A Web Extender
      that does not support the use of JSR 250 annotations must not process a
      WAB that imports the annotations package.</para>
    </section>

    <section>
      <title>Java Server Pages Support</title>

      <para>Java Server Pages (JSP) is a rendering technology for template
      based web page construction. This specification supports <xref linkend="i3076835"/> if available with the Web Runtime. The
      <code>servlet</code> element in a <code>web.xml</code> descriptor is
      used to describe both types of Web Components. JSP components are
      defined implicitly in the <code>web.xml</code> descriptor through the
      use of an implicit <code>.jsp</code> extension mapping, or explicitly
      through the use of a <code>jsp-group</code> element.</para>
    </section>

    <section>
      <title>Compilation</title>

      <para>A Web Runtime compiles a JSP page into a Servlet, either during
      the deployment phase, or at the time of request processing, and
      dispatches the request to an instance of such a dynamically created
      class. Often times, the compilation task is delegated to a separate JSP
      compiler that will be responsible for identifying the necessary tag
      libraries, and generating the corresponding Servlet. The container then
      proceeds to load the dynamically generated class, creates an instance
      and dispatches the servlet request to that instance.</para>

      <para>Supporting in-line compilation of a JSP inside a bundle will
      require that the Web Runtime maintains a private area where it can store
      such compiled classes. The Web Runtime can leverage its private bundle
      storage area. The Web Runtime can construct a special class loader to
      load generated JSP classes such that classes from the bundle class path
      are visible to newly compiled JSP classes.</para>

      <para>The JSP specification does not describe how JSP pages are
      dynamically compiled or reloaded. Various Web Runtime implementations
      handle the aspects in proprietary ways. This specification does not
      bring forward any explicit requirements for supporting dynamic aspects
      of JSP pages.</para>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>The security aspects of this specification are defined by the <xref linkend="i3076808"/>.</para>
  </section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i3110503"><title>Jave Enterprise Edition Release
      5</title>Java 1.5.0 Packages.
      http://www.oracle.com/technetwork/java/javaee/tech/javaee5-jsp-135162.html</bibliomixed>

      <bibliomixed xml:id="i3076362"><title>Java EE Web
      Applications</title>http://www.oracle.com/technetwork/java/javaee/tech/webapps-138511.html</bibliomixed>

      <bibliomixed xml:id="i3076808"><title>Servlet 2.5
      specification</title>http://jcp.org/aboutJava/communityprocess/mrel/jsr154/index.html</bibliomixed>

      <bibliomixed xml:id="i3076835"><title>JSP 2.1
      specification</title>http://jcp.org/aboutJava/communityprocess/final/jsr245/index.html</bibliomixed>

      <bibliomixed xml:id="i3102743"><title>PAX Web
      Extender</title>http://team.ops4j.org/wiki/display/paxweb/Pax+Web</bibliomixed>

      <bibliomixed xml:id="i3079490"><title>Uniform Resource Locators, RFC
      1738</title>http://www.ietf.org/rfc/rfc1738.txt</bibliomixed>

      <bibliomixed xml:id="i3081342"><title>JSR 250 Common Annotations for the
      Java
      Platform</title>http://jcp.org/aboutJava/communityprocess/pfd/jsr250/index.html</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="130" revision="$Id: 900b3dbfed202cdbbcd5142d15b4a2fe22b8aefb $" version="5" xml:id="service.coordinator" xml:base="../130/service.coordinator.xml">
  <title>Coordinator Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.coordinator-version" linkend="org.osgi.service.coordinator"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The OSGi programming model is based on the collaboration of standard
    and custom components. In such a model there is no central authority that
    has global knowledge of the complete application. Though this lack of
    authority can significantly increase reusability (and robustness) there
    are times when the activities of the collaborators must be coordinated.
    For example, a service that is repeatedly called in a task could optimize
    performance by caching intermediate results until it
    <emphasis>knew</emphasis> the task was ended.</para>

    <para>To know when a task involving multiple collaborators has ended is
    the primary purpose of the Coordinator service specification. The
    Coordinator service provides a rendezvous for an initiator to create a
    Coordination where collaborators can decide to participate. When the
    Coordination has ended, all participants are informed.</para>

    <para>This Coordinator service provides an explicit Coordination model,
    the Coordination is explicitly passed as a parameter, and an implicit
    model where the Coordination is associated with the current thread.
    Implicit Coordinations can be nested.</para>

    <para>Coordinators share the coordination aspects of the resource model of
    transactions. However, the model is much lighter-weight because it does
    not support any of the ACID properties.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Coordination</emphasis> - Provide a solution to
          allow multiple collaborators to coordinate the outcome of a task
          initiated by an initiator.</para>
        </listitem>

        <listitem>
          <para><emphasis>Initiator - </emphasis>An initiator must be able to
          initiate a coordination and control the final outcome.</para>
        </listitem>

        <listitem>
          <para><emphasis>Participants</emphasis> - Participants in the task
          must be informed when the coordination has ended or failed as well
          as being able to terminate the Coordination.</para>
        </listitem>

        <listitem>
          <para><emphasis>Time-out</emphasis> - A Coordination should fail
          after a given time-out.</para>
        </listitem>

        <listitem>
          <para><emphasis>Blocking</emphasis> - Provide support for blocking
          and serializing access to Participants.</para>
        </listitem>

        <listitem>
          <para><emphasis>Nesting</emphasis> - It must be possible to nest
          Coordinations.</para>
        </listitem>

        <listitem>
          <para><emphasis>Per Thread Model</emphasis> - Provide a per-thread
          current Coordination model.</para>
        </listitem>

        <listitem>
          <para><emphasis>Variables</emphasis> - Provide a variable space per
          Coordination</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Coordinator</emphasis> - A service that can create
          and enumerate Coordinations.</para>
        </listitem>

        <listitem>
          <para><emphasis>Coordination</emphasis> - Represents the ongoing
          Coordination.</para>
        </listitem>

        <listitem>
          <para><emphasis>Initiator</emphasis> - The party that initiates a
          Coordination.</para>
        </listitem>

        <listitem>
          <para><emphasis>Participant</emphasis> - A party that wants to be
          informed of the outcome of a Coordination.</para>
        </listitem>

        <listitem>
          <para><emphasis>Collaborator</emphasis> - Either a participant or
          initiator.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Class and Service overview</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.100in" contentwidth="7.000in" fileref="coordinator-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>Usage</title>

    <para>This section is an introduction in the usage of the Coordinator
    service. It is not the formal specification, the normative part starts at
    <xref linkend="i3151714"/>. This section leaves out some of the details
    for clarity.</para>

    <section>
      <title>Synopsis</title>

      <para>The Coordinator service provides a mechanism for multiple parties
      to <emphasis>collaborate</emphasis> on a common task without a priori
      knowledge of who will collaborate in that task. A collaborator can
      participate by adding a <emphasis>Participant</emphasis> to the
      Coordination. The Coordination will notify the Participants when the
      coordination is <emphasis>ended</emphasis> or when it is
      <emphasis>failed</emphasis>.</para>

      <para>Each Coordination has an <emphasis>initiator</emphasis> that
      creates the <code>Coordination</code> object through the Coordinator
      service. The initiator can then push this object on a thread-local stack
      to make it an implicit Coordination or it can pass this object around as
      a parameter for <emphasis>explicit</emphasis> Coordinations.
      Collaborators can then use the <emphasis>current</emphasis> Coordination
      on the stack or get it from a parameter. Whenever a bundle wants to
      participate in the Coordination it adds itself to the Coordination as a
      participant. If necessary, a collaborator can initiate a new
      Coordination, which could be a nested Coordination for implicit
      Coordinations.</para>

      <para>A Coordination must be <emphasis>terminated</emphasis>.
      Termination is either a normal end when the initiator calls the
      <code>end</code> method or it is failed when the <code>fail</code>
      method is called. A Coordination can be failed by any of the
      collaborators. A Coordination can also fail independently due to a
      <emphasis>time-out</emphasis> or when the initiator releases its
      Coordinator service. All participants in the Coordination are informed
      in reverse participation order about the outcome in a callback for ended
      or failed Coordinations.</para>

      <para>A typical action diagram with a successful outcome is depicted in
      <xref linkend="service.coordinator-coordination-action"/>.</para>

      <figure xml:id="service.coordinator-coordination-action">
        <title>Action Diagram Implicit Coordination</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.700in" contentwidth="6.241in" fileref="coordination-action.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Explicit Coordination</title>

      <para>The general pattern for an initiator is to create a Coordination
      through the Coordinator service, perform the work in a try block, catch
      any exceptions and fail the Coordination in the catch block, and then
      ensure ending the Coordination in the finally block. The finally block
      can cause an exception. This is demonstrated in the following
      example:</para>

      <programlisting>Coordination c = coordinator.create("com.example.work",0);
try {
    doWork(c);
} catch( Exception e ) { 
    c.fail(e); 
} finally { 
    c.end();   
}</programlisting>

      <para>This deceptively small template is quite robust:</para>

      <itemizedlist>
        <listitem>
          <para>If the <code>doWork</code> method throws an Exception then the
          template fails with a Coordination Exception because it is failed in
          the try block.</para>
        </listitem>

        <listitem>
          <para>Any exceptions thrown in the try block are automatically
          causing the Coordination to fail.</para>
        </listitem>

        <listitem>
          <para>The Coordination is always terminated and removed from the
          stack due to the finally block.</para>
        </listitem>

        <listitem>
          <para>All failure paths, Coordinations that are failed by any of the
          collaborators, time-outs, or other problems are handled by the
          <code>end</code> method in the finally block. It will throw a <xref linkend="org.osgi.service.coordinator.CoordinationException.FAILED" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.coordinator.CoordinationException.PARTIALLY_ENDED" xrefstyle="hyperlink"/> Coordination Exception for any of the
          failures.</para>
        </listitem>
      </itemizedlist>

      <para>The different failure paths and their handling is pictured in
      <xref linkend="i3187111"/>.</para>

      <figure xml:id="i3187111">
        <title>Flow through the Coordination template</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.615in" contentwidth="6.222in" fileref="coordination-flow.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The example shows an explicit Coordination because the
      <code>create</code> method is used, implicit Coordinations are used in
      <xref linkend="i3175342"/>. The parameters of the <code>create</code>
      method are the name of the Coordination and its time-out. The name is
      used for informational purposes as well as security. For security
      reasons, the name must follow the same syntax as the Bundle Symbolic
      Name. In a secure environment the name can be used to limit
      Coordinations to a limited set of bundles. For example, a set of bundles
      signed by a specific signer can use names like <code>com.acme.*</code>
      that are denied to all other bundles.</para>

      <para>The zero time-out specifies that the Coordination will not have a
      time-out. Otherwise it must be a positive long, indicating the number of
      milliseconds the Coordination may take. However, implementations should
      have a configurable time-out to ensure that the system remains
      alive.</para>

      <para>In the <code>doWork</code> method the real work is done in
      conjunction with the collaborators. Explicit Coordinations can be passed
      to other threads if needed. Collaborators can decide to add participants
      whenever they require a notification when the Coordination has been
      terminated. For example, the following code could be called from the
      <code>doWork</code> method:</para>

      <programlisting>void foo(Coordination c) {
  doPrepare();
  c.addParticipant(this);
}</programlisting>

      <para>This method does the preparation work but does not finalize it so
      that next time it can use some intermediate results. For example, the
      <code>prepare</code> method could cache a connection to a database that
      should be reused during the Coordination. The collaborator can assume
      that it will be called back on either the <code>failed</code> or
      <code>ended</code> method. These methods could look like:</para>

      <programlisting>public void ended(Coordination c)  { doFinish(); }
public void failed(Coordination c) { doFailed(); }</programlisting>

      <para>The Coordinator provides the guarantee that this code will always
      call the <code>doFinish</code> method when the Coordination succeeds and
      <code>doFailed</code> method when it failed.</para>

      <para>The Participant must be aware that the <xref linkend="org.osgi.service.coordinator.Participant.ended-Coordination-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.coordinator.Participant.failed-Coordination-" xrefstyle="hyperlink"/> methods can be called on any thread.</para>

      <para>If the <code>doWork</code> method throws an exception it will end
      up in the catch block of the initiator. The catch block will then fail
      the Coordination by calling the <code>fail</code> method with the given
      exception. If the Coordination was already terminated because something
      else already had failed it then the method call is ignored, only the
      first fail is used, later fails are ignored.</para>

      <para>In all cases, the finally block is executed last. The finally
      block ends the Coordination. If this coordination was failed then it
      will throw a Coordination Exception detailing the reason of the failure.
      Otherwise it will terminate it and notify all the participants.</para>

      <para>The Coordination Exception is a Runtime Exception making it
      unnecessary to declare it.</para>
    </section>

    <section>
      <title>Multi Threading</title>

      <para>Explicit Coordinations allow the Coordination objects to be passed
      to many different collaborators who can perform the work on different
      threads. Each collaborator can fail the Coordination at any moment in
      time or the time-out can occur on yet another thread. Participants must
      therefore be aware that the callbacks <code>ended</code> and
      <code>failed</code> can happen on any thread. The following example
      shows a typical case where a task is parallelized. If any thread fails
      the Coordination, all other threads could be notified before they're
      finished.</para>

      <programlisting>Executor executor = ...
final CountDownLatch latch = new CountdownLatch(10);
final Coordination c = coordinator.create("parallel", 0); 
for ( int i=0; i&lt;10; i++) {
  executor.execute(
    new Runnable() {
        public void run() { baz(c); latch.countDown(); }
      });
  }
  latch.await();
  c.end();</programlisting>

      <para>The <code>Coordination</code> object is thread safe so it can be
      freely passed around.</para>
    </section>

    <section xml:id="i3175342">
      <title>Implicit Coordinations</title>

      <para>An explicit Coordination requires that the Coordination is passed
      as a parameter to the <code>doWork</code> method. The Coordinator also
      supports <emphasis>implicit</emphasis> Coordinations. With implicit
      Coordinations the Coordinator maintains a thread local stack of
      Coordinations where the top of this stack is the
      <emphasis>current</emphasis> Coordination for that thread. The usage of
      the implicit Coordination is almost identical to the explicit
      Coordinations except that all the work occurs on a single thread. The
      control flow is almost identical to explicit Coordinations:</para>

      <programlisting>Coordination c = coordinator.begin("com.example.work",0);
try {
    doWork();
} catch( Exception e ) { 
    c.fail(e); 
} finally { 
    c.end();   
}</programlisting>

      <para>See also <xref linkend="i3187111"/>. However, in this case the
      finally block with the call to the end method is even more important.
      With an implicit Coordination the Coordination is put on a thread local
      stack in the <code>begin</code> method and must therefore be popped when
      the Coordination is finished. The finally block ensures therefore the
      proper cleanup of this thread local stack.</para>

      <para>The difference between implicit and explicit Coordinations is that
      the implicit Coordination is not passed as a parameter, instead,
      collaborators use the current Coordination. With implicit Coordinations
      all method invocations in a thread can always access the current
      Coordination, even if they have many intermediates on the stack. The
      implicit model allows a collaborator many levels down the stack to
      detect a current Coordination and register itself without the need to
      modify all intermediate methods to contain a Coordination parameter. The
      explicit model has the advantage of explicitness but requires all APIs
      to be modified to hold the parameter. This model does not support
      passing the parameter through layers that are not aware of the
      Coordination. For example, OSGi services in general do not have a
      Coordination parameter in their methods making the use of explicit
      Coordinations impossible.</para>

      <para>Collaborators can act differently in the presence of a current
      Coordination. For example, a collaborator can optimize its work flow
      depending on the presence of a current Coordination.</para>

      <programlisting>Coordinator coordinator = ...
void foo() {
  doPrepare();
  if ( !coordinator.addParticipant(this))
      doFinish();
}</programlisting>

      <para>The Coordinator service has an <code>addParticipant</code> method
      that makes working with the current Coordination simple. If there is a
      current Coordination then the Coordinator service will add the
      participant and return <code>true</code>, otherwise it returns
      <code>false</code>. It is therefore easy to react differently in the
      presence of a current Coordination. In the previous example, the
      <code>doFinish</code> method will be called immediately if there was no
      current Coordination, otherwise it is delayed until the Coordination
      fails or succeeds. The participant callbacks look the same as in the
      previous section:</para>

      <programlisting>public void ended(Coordination c)  { doFinish(); }
public void failed(Coordination c) { doFailed(); }</programlisting>

      <para>Though the code looks very similar for the implicit and explicit
      Coordinations there are some additional rules for implicit
      Coordinations.</para>

      <para>The <code>end</code> method must be called on the same thread as
      the <code>begin</code> method, trying to end it on another thread
      results in a <xref linkend="org.osgi.service.coordinator.CoordinationException.WRONG_THREAD" xrefstyle="hyperlink"/> Coordination Exception being thrown.</para>

      <para>Even though the <code>end</code> method must be called on the
      initiating thread, the callbacks to the Participants can be done on any
      thread as the specification allows the Coordinator to use multiple
      threads for all callbacks.</para>
    </section>

    <section>
      <title>Partial Ending</title>

      <para>The Coordination is a best effort mechanism to coordinate, not a
      transaction model with integrity guarantees. This means that users of
      the Coordinator service must understand that there are cases where a
      Coordination ends in limbo. This happens when one of the Participants
      throws an Exception in the <code>ended</code> callback. This is similar
      to a transactional resource manager failing to commit in a 2-phase
      commit after it has voted yes in the prepare phase; a problem that is
      the cause of much of the complexity of a transaction manager. The
      Coordinator is limited to use cases that do not require full ACID
      properties and can therefore be much simpler. However, users of the
      Coordinator service must be aware of this limitation.</para>

      <para>If a Participant throws an exception in the ended method, the end
      method that terminated the Coordination must throw a <xref linkend="org.osgi.service.coordinator.CoordinationException.PARTIALLY_ENDED" xrefstyle="hyperlink"/> Coordination Exception. It is then up to the
      initiator to correct the situations. In most cases, this means allowing
      the exception to be re-thrown and handle the failure at the top level.
      Handling in those cases usually implies logging and continuing.</para>

      <para>The following code shows how the <xref linkend="org.osgi.service.coordinator.CoordinationException.PARTIALLY_ENDED" xrefstyle="hyperlink"/> case can be handled more explicitly.</para>

      <programlisting>Coordination c = coordinator.begin("work",0);
try {
  doWork();
} catch( Excption e ) {
  c.fail(e);
} finally {
  try {
    c.end();
  } catch( CoordinationException e ) {
    if ( e.getType() == CoordinationException.PARTIALLY_ENDED) {
      // limbo!
      ...
    }
  }
}</programlisting>
    </section>

    <section>
      <title>Locking</title>

      <para>To participate in a Coordination and receive callbacks a
      collaborator must add a <code>Participant</code> object to the
      Coordination. The <xref linkend="org.osgi.service.coordinator.Coordination.addParticipant-Participant-" xrefstyle="hyperlink"/> method blocks if the given
      <code>Participant</code> object is already used in another Coordination.
      This blocking facility can be used to implement a number of simple
      locking schemes that can simplify maintaining state in a concurrent
      environment.</para>

      <para>Using the <code>Participant</code> object as the key for the lock
      makes it simple to do course grained locking. For example, a service
      implementation could use the service object as a lock, effectively
      serializing access to this service when it is used in a Coordination.
      Coarse grained locking allows all the state to be maintained in the
      coarse object and not having to worry about multiplexing simultaneous
      requests. The following code uses the coarse locking pattern because the
      collaborator implements the <code>Participant</code> interface
      itself:</para>

      <programlisting>public class Collaborator implements Participant{
  public void doWork(Coordination coordination ) {
    ...
    coordination.addParticipant(this);
  }

  public void ended(Coordination c) { ... }
  public void failed(Coordination c) { ... }
}</programlisting>

      <para>The simplicity of the coarse grained locking is at the expense of
      lower performance because tasks are serialized even if it would have no
      contention. Locks can therefore also be made more fine grained, allowing
      more concurrency. In the extreme case, creating a new object for each
      participation makes it possible to never lock. For example, the
      following code never locks because it always creates a new object for
      the Participant:</para>

      <programlisting>    public void doWork(Coordination coordination){
      final State state = ...
      coordination.addParticipant(
         new Participant() {
           public void ended(Coordination c) { state ... }
           public void failed(Coordination c) { state ...}
    } ); }</programlisting>
    </section>

    <section>
      <title>Failing</title>

      <para>Any collaborator can fail an ongoing Coordination by calling the
      <xref linkend="org.osgi.service.coordinator.Coordination.fail-Throwable-" xrefstyle="hyperlink"/> method, the Throwable parameter must not be
      <code>null</code>. When the Coordination has already terminated then
      this is a no-op. The Coordinator service has a convenience method that
      fails the current Coordination if present. The <code>fail</code> methods
      return a boolean that is <code>true</code> when the method call causes
      the termination of the Coordination, in all other cases it is
      <code>false</code>.</para>

      <para>Failing a Coordination will immediately perform the callbacks and
      reject any additional Participants by throwing an <xref linkend="org.osgi.service.coordinator.CoordinationException.ALREADY_ENDED" xrefstyle="hyperlink"/> Coordination Exception. The asynchronous nature
      of the fail method implies that it is possible to have been called even
      before the <xref linkend="org.osgi.service.coordinator.Coordination.addParticipant-Participant-" xrefstyle="hyperlink"/> method has returned. Anybody that has the
      Coordination object can check the failed state with the <xref linkend="org.osgi.service.coordinator.Coordination.getFailure--" xrefstyle="hyperlink"/> method.</para>

      <para>In general, the best and most robust strategy to handle failures
      is to throw an Exception from the collaborator, allowing the initiator
      to catch the exception and properly fail the Coordination.</para>
    </section>

    <section>
      <title>Time-out</title>

      <para>The time-out is specified in the Coordinator <xref linkend="org.osgi.service.coordinator.Coordinator.create-String-long-" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.coordinator.Coordinator.begin-String-long-" xrefstyle="hyperlink"/> methods. A time-out of zero is indefinite,
      otherwise the time-out specifies the number of milliseconds the
      Coordination can take to terminate. A given time-out can be extended
      with the <xref linkend="org.osgi.service.coordinator.Coordination.extendTimeout-long-" xrefstyle="hyperlink"/> method. This method will add an additional
      time-out to the existing deadline if a prior deadline was set. For
      example, the following code extends the time-out with 5 seconds whenever
      a message must be sent to a remote address:</para>

      <programlisting>Object sendMessage(Message m) {
  Coordination c = coordinator.peek();
  Address a = m.getDestination();
  if ( c != null &amp;&amp; a.isRemote() ) {
    c.extendTimeout(5000);
  }
  return sendMessage0(m);
}</programlisting>

      <para>Applications should not rely on the exact time-out of the
      Coordination and only use it as a safety function against deadlocks and
      hanging collaborators.</para>
    </section>

    <section>
      <title>Joining</title>

      <para>When a Coordination is terminated it is not yet completely
      finished, the callback to the Participants happens after the atomic
      termination. In certain cases it is necessary to ensure that a method
      does not progress until all the participants have been notified. It is
      therefore possible to wait for the Coordination to completely finish
      with the <xref linkend="org.osgi.service.coordinator.Coordination.join-long-" xrefstyle="hyperlink"/> method. This method can have a time-out. For
      example:</para>

      <programlisting>void collaborate( final Coordination c ) {
  doWork();
  Thread t = new Thread() {
    public void run(){
      try {
          c.join(0);
          ... // really terminated here, all participantscalled back
      } catch( Exception e) { ... }
    }
  };
  t.start();
}</programlisting>
    </section>

    <section>
      <title>Variables</title>

      <para>A Participant is likely to have to maintain state that is
      particular for the collaboration. This state is usually needed in the
      <code>ended</code> method to properly finalize the work. In general, the
      best place to store this state is in the <code>Participant</code> object
      itself, inner classes and final variables are a good technique for
      storing the state. However, the state can also be stored in a
      Coordination <emphasis>variable</emphasis>. Each Coordination has a
      private set of variables that can be obtained with the <xref linkend="org.osgi.service.coordinator.Coordination.getVariables--" xrefstyle="hyperlink"/> method. The resulting map takes a class as the
      key and returns an Object. The map is not synchronized, any changes to
      the map must be synchronized on the returned Map object to ensure the
      visibility of the changes to other threads. The class used for the key
      is not related to the returned type, it is a <code>Class</code> object
      to provide a convenient namespace.</para>

      <para>The following example shows how the state can be stored with
      variables.</para>

      <programlisting>public void doWork(Coordination coordination){
  Map&lt;Class&lt;?&gt;,Object&gt; map = coordination.getVariables();
  synchronized(map) {
    State state = (State) map.get( SharedWorker.class );
    if ( state == null ) {
      state = new State(this);
      map.put( state );
      ... do initial work
    }
  }
  ... do other work
  coordination.addParticipant( this );
}
public void ended(Coordination c) {
  Map&lt;Class&lt;?&gt;,Object&gt; map = coordination.getVariables();
  synchronized(map) {
    State state = (State) map.get( SharedWorker.class );
    .. finalize
  }  
}
public void failed(Coordination c) {
  Map&lt;Class&lt;?&gt;,Object&gt; map = coordination.getVariables();
  synchronized(map) {
    State state = (State) map.get( SharedWorker.class );
    .. finalize
  }
}</programlisting>
    </section>

    <section>
      <title>Optimizing Example</title>

      <para>For example, a web based system has a charge service:</para>

      <programlisting>public interface Charge {
  void charge( String reason, int amount );
}</programlisting>

      <para>This service is used throughout the system for charging the tasks
      the system performs. Each servlet request can actually create multiple
      Charge Data Records (CDR). For this reason, a Coordination is started
      before the page is constructed. Each part of the page that has an
      associated cost must create a CDR. There are the following issues at
      stake:</para>

      <itemizedlist>
        <listitem>
          <para>Charging should not take place when failing, and</para>
        </listitem>

        <listitem>
          <para>Performance can be optimized to only persist the CDRs once,
          and</para>
        </listitem>

        <listitem>
          <para>The user must be passed to the Charge service.</para>
        </listitem>
      </itemizedlist>

      <para>To begin with the request code:</para>

      <programlisting>public void doGet(HttpServletRequest rq, HttpServletResponsersp) {
  Coordination c = coordinator.begin("com.acme.request", 30000);
  try {
    Principal p = rq.getUserPrincipal();
    Map&lt;Class&lt;?&gt;,Object&gt; map = c.getVariables();
    map.put( Principal.class, p );
    buildPage(rq,rsp);
  } catch( Exception e  ) { c.fail(e); } 
    finally               { c.end(); }
}</programlisting>

      <para>Each method that has a charge will call the Charge service. The
      following code shows an implementation of this Charge service.</para>

      <programlisting>public class ChargeImpl implements Charge,Participant {
  final List&lt;CDR&gt; records = new ArrayList&lt;CDR&gt;();

  public void charge( String reason, int amount ) {
    Coordination c = coordinator.peek();
    if ( c == null ) {
       save( Arrays.asList( new CDR(null, reason, amount)));
    } else {
      Principal p = getPrincipal(c);
      records.add( new CDR(p, reason, amount ) );
      c.addParticipant( this );
    }
  }

  Principal getPrincipal(Coordination c) {
    if ( c == null )
      return null;

    Map&lt;Class&lt;?&gt;,Object&gt; map = c.getVariables();
    synchronized(map) {
      Principal p = (Principal) map.get( Principal.class );
      return p != null ? p : getPrincipal(c.getEnclosingCoordination());
    }
  }

  public void ended(Coordination c) {
    save(records);
    records.clear();
  }
  public void failed(Coordination c) {
    records.clear();
  }

  void save(List&lt;CDR&gt; records) { ... }
}</programlisting>
    </section>

    <section>
      <title>Security Example</title>

      <para>The Coordination Permission is a filter based permission that is
      asserted for many of the methods in the API, the bundle that is checked
      is always the bundle that created the corresponding Coordination. For
      example:</para>

      <programlisting>ALLOW {
     [ BundleSignerCondition "cn=ACME" ]
    ( CoordinationPermission "(signer=cn=ACME)" "*" )
}</programlisting>

      <para>This example allows bundles signed by ACME to perform all
      Coordination actions on Coordinations created by bundles signed by
      ACME.</para>

      <para>The filter can also assert the name of the Coordination:</para>

      <programlisting>coordination.name</programlisting>

      <para>It is therefore possible to create a name based protection scheme.
      By denying all bundles except a select group through the use of a name
      prefix, the use of Coordinations can be restricted to this select
      group:</para>

      <programlisting>DENY {
     [ BundleSignerCondition "cn=ACME" "!" ]
    ( CoordinationPermission "(coordination.name=com.acme.*)""*" )
}
ALLOW {
    ( CoordinationPermission "(coordination.name=*)" "*" )
}</programlisting>

      <para>If a bundle is not signed by ACME it will be denied the use of
      Coordination names starting with <code>com.acme.</code> though it will
      be allowed to use any other name. This effectively enables only bundles
      signed by ACME to create Coordinations with this name prefix.</para>
    </section>
  </section>

  <section xml:id="i3151714">
    <title>Coordinator Service</title>

    <para>The Coordinator service is the entry point for the Coordination. It
    provides the following functions:</para>

    <itemizedlist>
      <listitem>
        <para>Coordination creation</para>
      </listitem>

      <listitem>
        <para>Life cycle management of a Coordination</para>
      </listitem>

      <listitem>
        <para>Thread based Coordinations</para>
      </listitem>

      <listitem>
        <para>Introspection</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Coordination Creation</title>

      <para>A <code>Coordination</code> object is created by an
      <emphasis>initiator</emphasis>. An initiator can create a
      <code>Coordination</code> object with the Coordinator <xref linkend="org.osgi.service.coordinator.Coordinator.create-String-long-" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.coordinator.Coordinator.begin-String-long-" xrefstyle="hyperlink"/> method. Each Coordination when created gets a
      positive long identity that is available with <xref linkend="org.osgi.service.coordinator.Coordination.getId--" xrefstyle="hyperlink"/>. Ids are a unique identifier for a specific
      Coordinator service. The id is always increasing, that is, a
      Coordination with a higher id is created later.</para>

      <para>The create methods specify the name of the Coordination. This name
      is a security concept, see <xref linkend="service.coordinator.security"/>, as well as used for debugging.
      The coordination name must therefore conform to the same syntax as a
      bundle symbolic name:</para>

      <programlisting>coordination-name ::= symbolic-name   // see <xref linkend="intro.core.release" xrefstyle="template:%t"/></programlisting>

      <para>Passing a name that does not conform to this syntax must throw an
      Illegal Argument Exception. There are no constraints on duplicates,
      multiple different Coordinations can use the same name. The name of the
      Coordination is available with the <xref linkend="org.osgi.service.coordinator.Coordination.getName--" xrefstyle="hyperlink"/> method.</para>
    </section>

    <section>
      <title>Adding Participants</title>

      <para>The <code>Coordination</code> object can be passed to
      <emphasis>collaborators</emphasis> as a parameter in a method call. Some
      of these collaborators might be interested in
      <emphasis>participating</emphasis> in the given Coordination, they can
      achieve this by adding a <code>Participant</code> object to the
      Coordination.</para>

      <para>A Participant is a collaborator that requires a callback after the
      Coordination has been terminated, either when it ended or when it
      failed. To participate, it must add a <code>Participant</code> object to
      a Coordination with the <xref linkend="org.osgi.service.coordinator.Coordination.addParticipant-Participant-" xrefstyle="hyperlink"/> method on Coordination. This method throws an
      <xref linkend="org.osgi.service.coordinator.CoordinationException.ALREADY_ENDED" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.coordinator.CoordinationException.FAILED" xrefstyle="hyperlink"/> Coordination Exception when the Coordination has
      been terminated.</para>

      <para>When a Participant is:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Not in any Coordination</emphasis> - Add it to the
          given Coordination and return.</para>
        </listitem>

        <listitem>
          <para><emphasis>In target Coordination</emphasis> - Ignore,
          participant is already present. A Participant can participate in the
          same Coordination multiple times by calling <xref linkend="org.osgi.service.coordinator.Coordination.addParticipant-Participant-" xrefstyle="hyperlink"/> but will only be called back once when the
          Coordination is terminated. Its order must be defined by the first
          addition.</para>
        </listitem>

        <listitem>
          <para><emphasis>In another Coordination</emphasis> - Lock until
          after the other Coordination has notified all the Participants.
          Implementations can detect deadlocks in certain cases and throw a
          Coordination Exception if a dead lock exist, otherwise the deadlock
          is solved when the Coordination times out.</para>
        </listitem>
      </itemizedlist>

      <para>Verifying if a Participant object is already in another
      Coordination must use identity and not equality.</para>
    </section>

    <section>
      <title>Active</title>

      <para>A Coordination is active until it is
      <emphasis>terminated</emphasis>. A Coordination can terminate because it
      is <emphasis>ended</emphasis>, or it is <emphasis>failed</emphasis>. The
      following methods cause a termination:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.coordinator.Coordination.end--" xrefstyle="hyperlink"/> - A normal end. All participants that were
          added before the end call are called back on their <xref linkend="org.osgi.service.coordinator.Participant.ended-Coordination-" xrefstyle="hyperlink"/> method.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.coordinator.Coordination.fail-Throwable-" xrefstyle="hyperlink"/> - The Coordination has failed, this will
          call back the <xref linkend="org.osgi.service.coordinator.Participant.failed-Coordination-" xrefstyle="hyperlink"/> method on the participants. This method can
          be called by the Coordinator, the initiator, or any of the
          collaborators. There are a number of failures that are built in to
          the Coordinator. These failures use singleton Exception instances
          defined in the <code>Coordination</code> interface:</para>

          <itemizedlist>
            <listitem>
              <para><xref linkend="org.osgi.service.coordinator.Coordination.TIMEOUT" xrefstyle="hyperlink"/> - If the Coordination times out the
              Coordination is failed with the <xref linkend="org.osgi.service.coordinator.Coordination.TIMEOUT" xrefstyle="hyperlink"/> exception instance in
              Coordination.</para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.service.coordinator.Coordination.RELEASED" xrefstyle="hyperlink"/> - If the Coordinator that created the
              Coordination was unget, all Coordinations created by it will
              fail with the <xref linkend="org.osgi.service.coordinator.Coordination.RELEASED" xrefstyle="hyperlink"/> exception.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <para>The state diagram for the Coordination is pictured in <xref linkend="i3136697"/>.</para>

      <figure xml:id="i3136697">
        <title>Coordination state diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.550in" contentwidth="6.207in" fileref="state-diagram.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Explicit and Implicit Models</title>

      <para>The Coordinator supports two very different models of usage:
      <emphasis>explicit</emphasis> and <emphasis>implicit</emphasis>. The
      explicit model is when a Coordination is created and passed around as a
      parameter. The second model is the implicit model where the Coordinator
      maintains a thread local stack of Coordinations. Any collaborator can
      then decide to use the top of the stack as the
      <emphasis>current</emphasis> Coordination. The <xref linkend="org.osgi.service.coordinator.Coordinator.peek--" xrefstyle="hyperlink"/> method provides access to the current
      Coordination.</para>

      <para>The <xref linkend="org.osgi.service.coordinator.Coordinator.begin-String-long-" xrefstyle="hyperlink"/> method creates a new Coordination and pushes
      this on the stack, beginning an implicit Coordination. This is identical
      to:</para>

      <programlisting>coordinator.create("work",0).push();</programlisting>

      <para>Once a Coordination is pushed on a stack it is from that moment on
      associated with the current thread. A Coordination can only be pushed
      once, the <xref linkend="org.osgi.service.coordinator.CoordinationException.ALREADY_PUSHED" xrefstyle="hyperlink"/> Coordination Exception must be thrown when the
      Coordination is already associated with one of the thread local stacks
      maintained by the Coordinator service.</para>

      <para>The Coordination is removed from the stack in the <xref linkend="org.osgi.service.coordinator.Coordination.end--" xrefstyle="hyperlink"/> method. The <xref linkend="org.osgi.service.coordinator.Coordination.end--" xrefstyle="hyperlink"/> method must not only terminate itself but it
      must also terminate all nested Coordinations.</para>

      <para>The current Coordination can also be explicitly removed with the
      Coordinator <xref linkend="org.osgi.service.coordinator.Coordinator.pop--" xrefstyle="hyperlink"/> method.</para>

      <para>A Coordination that is pushed on a thread local stack returns the
      associated thread on the <xref linkend="org.osgi.service.coordinator.Coordination.getThread--" xrefstyle="hyperlink"/> method. This method returns <code>null</code>
      for Coordinations not on any stack, that is, explicit
      Coordinations.</para>
    </section>

    <section>
      <title>Termination</title>

      <para>Both the <xref linkend="org.osgi.service.coordinator.Coordination.end--" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.coordinator.Coordination.fail-Throwable-" xrefstyle="hyperlink"/> methods terminate the Coordination if it was not
      already terminated. Termination is atomic, only the <code>end</code> or
      the <code>fail</code> method can terminate the Coordination. Though this
      happens on different threads, a Coordination can never both end and fail
      from any perspective. That is, if a fail races with end then only one of
      them can win and the other provides the feedback that the Coordination
      was already terminated.</para>

      <para>Terminating a Coordination has the following effects:</para>

      <itemizedlist>
        <listitem>
          <para>It is atomic, it can only happen once in a Coordination</para>
        </listitem>

        <listitem>
          <para>It freezes the set of participants, no more participants can
          be added</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Ending</title>

      <para>The <xref linkend="org.osgi.service.coordinator.Coordination.end--" xrefstyle="hyperlink"/> method should always be called at the end of a
      Coordination to ensure proper termination, notification, and cleanup.
      The end method throws a <xref linkend="org.osgi.service.coordinator.CoordinationException.FAILED" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.coordinator.CoordinationException.PARTIALLY_ENDED" xrefstyle="hyperlink"/> Coordination Exception if the Coordination was
      failed before.</para>

      <para>If the Coordination had already been ended before then this is a
      programming error and an <xref linkend="org.osgi.service.coordinator.CoordinationException.ALREADY_ENDED" xrefstyle="hyperlink"/> Configuration Exception is thrown. The <xref linkend="org.osgi.service.coordinator.Coordination.end--" xrefstyle="hyperlink"/> method should never be called twice on the same
      Coordination.</para>

      <para>If the termination succeeds then the participants must be notified
      by calling the <xref linkend="org.osgi.service.coordinator.Participant.ended-Coordination-" xrefstyle="hyperlink"/> method on each Participant that had been
      successfully added to the Coordination. This callback can take place on
      any thread but must be in reverse order of adding. That is, the last
      added Participant is called back first.</para>

      <para>Participants must never make any assumptions about the current
      Coordination in the callback. The Coordination it was added to is
      therefore given as an explicit parameter in the <xref linkend="org.osgi.service.coordinator.Participant.ended-Coordination-" xrefstyle="hyperlink"/> method.</para>

      <para>If a Participant throws an Exception then this must not prevent
      the calling of the remaining participants. The Exception should be
      logged. If a Participant has thrown an Exception then the <xref linkend="org.osgi.service.coordinator.Coordination.end--" xrefstyle="hyperlink"/> method must throw a <xref linkend="org.osgi.service.coordinator.CoordinationException.PARTIALLY_ENDED" xrefstyle="hyperlink"/> Coordination Exception after the last
      Participant has returned from its callback, otherwise the method returns
      normally. Participants should normally not throw Exceptions in their
      callbacks.</para>

      <para>If the Coordination is implicit (it is pushed on a stack) then the
      Coordination must be removed from its stack after the participants have
      been called back. This requires that the ending thread is the same as
      the thread of the Coordination. The end thread is the thread of the
      <xref linkend="org.osgi.service.coordinator.Coordination.end--" xrefstyle="hyperlink"/> method call. If the Coordination's thread is not
      the same as the ending thread then a <xref linkend="org.osgi.service.coordinator.CoordinationException.WRONG_THREAD" xrefstyle="hyperlink"/> Coordination Exception is thrown.</para>

      <para>If the ending Coordination is on the stack but it is not the
      current Coordination then each nested Coordination must be ended before
      the current Coordination, see <xref linkend="i3202535"/> for more
      information.</para>

      <para>The <xref linkend="org.osgi.service.coordinator.Coordination.fail-Throwable-" xrefstyle="hyperlink"/> method must not remove the current Coordination,
      it must remain on the stack. The initiator must always call the <xref linkend="org.osgi.service.coordinator.Coordination.end--" xrefstyle="hyperlink"/> method. Always calling <xref linkend="org.osgi.service.coordinator.Coordination.end--" xrefstyle="hyperlink"/> in a <code>finally</code> block is therefore
      paramount.</para>
    </section>

    <section xml:id="i3142795">
      <title>Failing, TIMEOUT, ORPHANED, and RELEASED</title>

      <para><emphasis>Failing</emphasis> can happen asynchronously during the
      time a Coordination is active. A Coordination is failed by calling <xref linkend="org.osgi.service.coordinator.Coordination.fail-Throwable-" xrefstyle="hyperlink"/>. The Throwable argument must not be
      <code>null</code>, it is the cause of the failure.</para>

      <para>Failing a Coordination must first terminate it. If the
      Coordination was already terminated the <xref linkend="org.osgi.service.coordinator.Coordination.fail-Throwable-" xrefstyle="hyperlink"/> method has no effect. Otherwise, it must
      callback all its added Participants on the <xref linkend="org.osgi.service.coordinator.Participant.failed-Coordination-" xrefstyle="hyperlink"/> callback method. Exceptions thrown from this
      method should be logged and further ignored. The callback can occur on
      any thread, including the caller's.</para>

      <para>Implicit Coordinations must not be popped from its stack in a fail
      nor is it necessary to call the <code>fail</code> method from any
      particular thread. The removal of the Coordination from the stack must
      happen in the <code>end</code> method.</para>

      <para>There are two asynchronous events that can also fail the
      Coordination. If the Coordination times out, it will be treated as a
      <code>fail(</code> <xref linkend="org.osgi.service.coordinator.Coordination.TIMEOUT" xrefstyle="hyperlink"/> <code>)</code> and if the Coordinator is
      ungotten with active Coordinations then each of those Coordinations must
      fail as if <code>fail(</code> <xref linkend="org.osgi.service.coordinator.Coordination.RELEASED" xrefstyle="hyperlink"/> <code>)</code> is called.</para>

      <para>A Coordination can also be <emphasis>orphaned</emphasis>. An
      orphaned Coordination has no longer any outside references. This means
      that the Coordination can no longer be ended or failed. Such
      Coordinations must fail with an <xref linkend="org.osgi.service.coordinator.Coordination.ORPHANED" xrefstyle="hyperlink"/> Exception.</para>
    </section>

    <section xml:id="i3202535">
      <title>Nesting Implicit Coordinations</title>

      <para>Implicit Coordinations can be nested. For this reason, the
      Coordinator maintains a thread local stack of Coordinations where the
      top, accessible with the <xref linkend="org.osgi.service.coordinator.Coordinator.peek--" xrefstyle="hyperlink"/> method, is the current Coordination. Each time a
      new Coordination is begun with the <xref linkend="org.osgi.service.coordinator.Coordinator.begin-String-long-" xrefstyle="hyperlink"/> method, the current Coordination is replaced
      with the newly created Coordination. When that Coordination is ended,
      the previous current Coordination is restored. Nesting is always on the
      same thread, implicit Coordinations are always associated with a single
      thread, available through its <xref linkend="org.osgi.service.coordinator.Coordination.getThread--" xrefstyle="hyperlink"/> method. The end method must be called on the
      same thread as the <xref linkend="org.osgi.service.coordinator.Coordinator.begin-String-long-" xrefstyle="hyperlink"/> or last <xref linkend="org.osgi.service.coordinator.Coordination.push--" xrefstyle="hyperlink"/> method.</para>

      <para>Using the standard model for implicit Coordinations, where the
      initiator always ends the Coordination on the same thread as it begun,
      ensures that nesting is properly handled. However, in certain cases it
      is necessary to manipulate the stack or make implicit Coordinations
      explicit or vice versa. For this reason, it is possible to pop
      Coordinations from the stack with the <xref linkend="org.osgi.service.coordinator.Coordinator.pop--" xrefstyle="hyperlink"/> method. This method disassociates the
      Coordination from the current thread and restores the previous (if any)
      Coordination as the current Thread. A Coordination can then be made the
      current Coordination for a thread by calling the <xref linkend="org.osgi.service.coordinator.Coordination.push--" xrefstyle="hyperlink"/> method. However, a Coordination can be pushed on
      the stack at most once. If a Coordination is pushed a second time, in
      any thread, the <xref linkend="org.osgi.service.coordinator.CoordinationException.ALREADY_PUSHED" xrefstyle="hyperlink"/> Coordination Exception must be thrown.</para>

      <para>The Coordination is removed from its stack when the <xref linkend="org.osgi.service.coordinator.Coordination.end--" xrefstyle="hyperlink"/> method is called. It is therefore highly
      recommended to always end a Coordination in the nesting order. However,
      it is possible that a Coordination is ended that is not the current
      Coordination, it has nested Coordinations that were not properly ended.
      In that case all nested Coordinations must be ended in reverse creation
      order, that is, the current Coordination first, by calling the
      <code>end</code> method on it.</para>

      <para>If any Coordination fails to end properly (including <xref linkend="org.osgi.service.coordinator.CoordinationException.PARTIALLY_ENDED" xrefstyle="hyperlink"/> ) then the remaining Coordinations on the stack
      must fail and chain the exceptions. In pseudo code:</para>

      <programlisting>while (coordinator.peek() != this) {
 try {
     coordinator.peek().end();
 } catch (CoordinationException e) {
      coordinator.peek().fail(e);
 }
}</programlisting>
    </section>

    <section>
      <title>Time-outs</title>

      <para>When a Coordination is created it will receive a time-out. A
      time-out is a positive value or zero. A zero value indicates that the
      Coordination should have no time-out. This does not imply that a
      Coordination will never time-out, implementations are allowed to be
      configured with a limit to the maximum active time for a
      Coordination.</para>

      <para>Collaborators can extend the time out with the <xref linkend="org.osgi.service.coordinator.Coordination.extendTimeout-long-" xrefstyle="hyperlink"/> method. If no time-out was set (0), this method
      will be ignored. Otherwise the given amount (which must be positive) is
      added to the existing deadline. A Coordinator implementation can fail
      the Coordination earlier, however, when configured to do so.</para>

      <para>If a Coordination is timed out, the Coordination is failed with a
      <code>fail(TIMEOUT)</code> method call from an unspecified thread, see
      <xref linkend="i3142795"/>.</para>
    </section>

    <section>
      <title>Released</title>

      <para>The Coordination's life cycle is bound to the Coordinator service
      that created it. If the initiator's bundle ungets this service then the
      Coordinator must fail all the Coordinations created by this Coordinator
      by calling the <code>fail(RELEASED)</code> method.</para>

      <para>Participants from bundles that are stopped are not taken into
      account. This means that it is possible that a participant is called
      while its bundle is stopped. Stopped Participants should fail any
      Coordinations that they participate in.</para>
    </section>

    <section>
      <title>Coordinator Convenience Methods</title>

      <para>The Coordinator contains a number of convenience methods that can
      be used by collaborators to interact with the current
      Coordination.</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.coordinator.Coordinator.begin-String-long-" xrefstyle="hyperlink"/> - Is logically the same as <xref linkend="org.osgi.service.coordinator.Coordinator.create-String-long-" xrefstyle="hyperlink"/>. <xref linkend="org.osgi.service.coordinator.Coordination.push--" xrefstyle="hyperlink"/>.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.coordinator.Coordinator.addParticipant-Participant-" xrefstyle="hyperlink"/> - This method makes it easy to react
          differently to the presence of a current implicit Coordination. If a
          current Coordination exists, the participant is added and
          <code>true</code> is returned (or an exception thrown if the
          Coordination is already terminated), otherwise <code>false</code> is
          returned.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.coordinator.Coordinator.fail-Throwable-" xrefstyle="hyperlink"/> - If there is no current Coordination, this
          method returns false. Otherwise it returns the result of calling
          <xref linkend="org.osgi.service.coordinator.Coordination.fail-Throwable-" xrefstyle="hyperlink"/> on the current Coordination. This method
          therefore only returns <code>true</code> when a current Coordination
          was actually terminated due to this call.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Administrative Access</title>

      <para>The <code>Coordination</code> objects provide a number of methods
      that are used for administrating the Coordinations and the
      Coordinator.</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.coordinator.Coordination.getBundle--" xrefstyle="hyperlink"/> - Provide the bundle that created the
          Coordination. This bundle is the bundle belonging to the Bundle
          Context used to get the Coordinator service.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.coordinator.Coordination.getFailure--" xrefstyle="hyperlink"/> - The Exception that caused this
          Coordination to fail or <code>null</code>. There are two fixed
          exception instances for a time out ( <xref linkend="org.osgi.service.coordinator.Coordination.TIMEOUT" xrefstyle="hyperlink"/> ), when the Coordination is orphaned ( <xref linkend="org.osgi.service.coordinator.Coordination.ORPHANED" xrefstyle="hyperlink"/> ), and when the Coordinator service is
          released ( <xref linkend="org.osgi.service.coordinator.Coordination.RELEASED" xrefstyle="hyperlink"/> ).</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.coordinator.Coordination.getId--" xrefstyle="hyperlink"/> - The Coordination's id.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.coordinator.Coordination.getName--" xrefstyle="hyperlink"/> - The name of the Coordination.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.coordinator.Coordination.getParticipants--" xrefstyle="hyperlink"/> - The current list of participants. This is
          a mutable snapshot of the added participants. Changing the snapshot
          has no effect on the Coordination.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.coordinator.Coordination.getThread--" xrefstyle="hyperlink"/> - Answer the thread associated with an
          implicit Coordination. If the Coordination is not implicit then the
          answer is <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.coordinator.Coordination.getEnclosingCoordination--" xrefstyle="hyperlink"/> - Return the enclosing Coordination.</para>
        </listitem>
      </itemizedlist>

      <para>And for the Coordinator:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.coordinator.Coordinator.getCoordination-long-" xrefstyle="hyperlink"/> - Retrieve a Coordination by its id.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.coordinator.Coordinator.getCoordinations--" xrefstyle="hyperlink"/> - Get a list of active Coordinations</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Summary</title>

      <para>A Coordination can exist in three different states
      <emphasis>ACTIVE</emphasis>, <emphasis>END</emphasis>, and
      <emphasis>FAIL</emphasis>. During its life it will transition from
      ACTIVE to either END or FAIL. The entry (when the state is entered) and
      exit (when the state is left) actions when this transition takes place
      and the effect on the different methods are summarized in the following
      table.</para>

      <table pgwide="1">
        <title>States and transitions</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="0.8*"/>

          <colspec colnum="2" colwidth="0.8*"/>

          <colspec colnum="3" colwidth="1.2*"/>

          <colspec colnum="4" colwidth="1.2*"/>

          <thead>
            <row>
              <entry>State/Method</entry>

              <entry>ACTIVE</entry>

              <entry>END</entry>

              <entry>FAIL</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><para><emphasis role="strong">entry
              action</emphasis></para></entry>

              <entry><para/></entry>

              <entry><para>Notify all the participants by calling the <xref linkend="org.osgi.service.coordinator.Participant.ended-Coordination-" xrefstyle="hyperlink"/> method.</para></entry>

              <entry><para>Notify all the participants by calling the <xref linkend="org.osgi.service.coordinator.Participant.failed-Coordination-" xrefstyle="hyperlink"/> method.</para></entry>
            </row>

            <row>
              <entry><para><emphasis role="strong">exit
              action</emphasis></para></entry>

              <entry><para>Terminate</para></entry>

              <entry><para/></entry>

              <entry><para/></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.coordinator.Coordination.end--" xrefstyle="hyperlink"/></para></entry>

              <entry><para>-&gt; <code>END</code>.</para><para>Can throw <xref linkend="org.osgi.service.coordinator.CoordinationException.PARTIALLY_ENDED" xrefstyle="hyperlink"/></para></entry>

              <entry><para>throws <xref linkend="org.osgi.service.coordinator.CoordinationException.ALREADY_ENDED" xrefstyle="hyperlink"/></para></entry>

              <entry><para>throws <xref linkend="org.osgi.service.coordinator.CoordinationException.FAILED" xrefstyle="hyperlink"/></para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.service.coordinator.Coordination.fail-Throwable-" xrefstyle="hyperlink"/></para></entry>

              <entry><para>-&gt; <code>FAIL</code>, return
              <code>true</code>.</para></entry>

              <entry><para>return <code>false</code>.</para></entry>

              <entry><para>return <code>false</code>.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>

  <section xml:id="service.coordinator.security">
    <title>Security</title>

    <para>This specification provides a Coordination Permission. This
    permission can enforce the name of the coordination as well as assert the
    properties of the initiating bundle, like for example the signer or bundle
    symbolic name. The permission therefore uses a filter as name, as defined
    in the filter based permissions section in <xref linkend="intro.core.release" xrefstyle="template:%t"/>, see <xref linkend="intro.core.release" xrefstyle="template:%t"/>. There is one
    additional parameter for the filter:</para>

    <programlisting>coordination.name</programlisting>

    <para>The value is the given name of the Coordination. Restricting the
    name of a Coordination allows the deployer to limit the use of this name
    to a restricted set of bundles.</para>

    <para>The following actions are defined:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.coordinator.CoordinationPermission.INITIATE" xrefstyle="hyperlink"/> - Required to initiate and control a
        Coordination.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.coordinator.CoordinationPermission.PARTICIPATE" xrefstyle="hyperlink"/> - Required to participate in a
        Coordination.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.coordinator.CoordinationPermission.ADMIN" xrefstyle="hyperlink"/> - Required to administrate a
        Coordinator.</para>
      </listitem>
    </itemizedlist>

    <para>The target bundle of the Coordination Permission is the initiator's
    bundle. This is the bundle that got the Coordinator service to create the
    Coordination. An initiator must therefore have permission to create
    Coordinations for itself.</para>

    <para>There are two constructors available:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.coordinator.CoordinationPermission.CoordinationPermission-String-String-" xrefstyle="hyperlink"/> - The constructor for the granted permission.
        It is given a filter expression and the actions that the permission
        applies to.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.coordinator.CoordinationPermission.CoordinationPermission-String-Bundle-String-" xrefstyle="hyperlink"/> - The constructor for the requested
        permission. It is given the name of the permission, the bundle that
        created the corresponding coordination, and the requested
        actions.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.coordinator" xml:id="org.osgi.service.coordinator" xml:base="../../generated/javadoc/docbook/org.osgi.service.coordinator.xml">
   <title>org.osgi.service.coordinator</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.coordinator-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.coordinator-version.number">1.0</edition>
   </info>
   <para>
Coordinator Package Version 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.coordinator; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.coordinator; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.coordinator.Coordination">
                  <code>Coordination</code>
               </link> - 
A Coordination object is used to coordinate a number of independent
 Participants.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.coordinator.CoordinationException">
                  <code>CoordinationException</code>
               </link> - 
Unchecked exception which may be thrown by a Coordinator implementation.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.coordinator.CoordinationPermission">
                  <code>CoordinationPermission</code>
               </link> - 
A bundle's authority to create or use a <link linkend="org.osgi.service.coordinator.Coordination">Coordination</link>.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.coordinator.Coordinator">
                  <code>Coordinator</code>
               </link> - 
A Coordinator service coordinates activities between different parties.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.coordinator.Participant">
                  <code>Participant</code>
               </link> - 
A Participant participates in a Coordination.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="Coordination" xml:id="org.osgi.service.coordinator.Coordination">
      <title>public interface Coordination</title>
      <para>
A Coordination object is used to coordinate a number of independent
 Participants.
 
 </para>
      <para>
 Once a Coordination is <link linkend="org.osgi.service.coordinator.Coordinator.create-String-long-">created</link>, it
 can be used to add <link linkend="org.osgi.service.coordinator.Participant">Participant</link> objects. When the Coordination is
 ended, the participants are <link linkend="org.osgi.service.coordinator.Participant.ended-Coordination-">notified</link>.
 A Coordination can also fail for various reasons. When this occurs, the
 participants are <link linkend="org.osgi.service.coordinator.Participant.failed-Coordination-">notified</link> of the
 failure.
 
 </para>
      <para>
 A Coordination must be in one of two states, either ACTIVE or TERMINATED. The
 transition between ACTIVE and TERMINATED must be atomic, ensuring that a
 Participant can be guaranteed of either receiving an exception when adding
 itself to a Coordination or of receiving notification the Coordination has
 terminated.
 
 </para>
      <para>
 A Coordination object is thread safe and can be passed as a parameter to
 other parties regardless of the threads these parties use.
 
 </para>
      <para>
 The following example code shows how a Coordination should be used.
 
 </para>
      <programlisting> void foo() {
   Coordination c = coordinator.create("work", 0);
   try {
     doWork(c);
   }
   catch (Exception e) {
     c.fail(e);
   }
   finally {
     c.end();
   }
 }</programlisting>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="field" xreflabel="ORPHANED" xml:id="org.osgi.service.coordinator.Coordination.ORPHANED">
         <title>public static final Exception ORPHANED</title>
         <para>
A singleton exception that will be the failure cause when a Coordination
 has been orphaned.
   </para>
      </section>
      <section role="field" xreflabel="RELEASED" xml:id="org.osgi.service.coordinator.Coordination.RELEASED">
         <title>public static final Exception RELEASED</title>
         <para>
A singleton exception that will be the failure cause when the
 Coordinations created by a bundle are terminated because the bundle
 released the Coordinator service.
   </para>
      </section>
      <section role="field" xreflabel="TIMEOUT" xml:id="org.osgi.service.coordinator.Coordination.TIMEOUT">
         <title>public static final Exception TIMEOUT</title>
         <para>
A singleton exception that will be the failure cause when a Coordination
 times out.
   </para>
      </section>
      <section role="method" xreflabel="addParticipant(Participant)" xml:id="org.osgi.service.coordinator.Coordination.addParticipant-Participant-">
         <title>public void addParticipant(Participant participant)</title>
         <formalpara role="parameter">
            <title>participant</title>
            <para>The Participant to register with this Coordination.
        The participant must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Register a Participant with this Coordination.
 
 </para>
         <para>
 Once a Participant is registered with this Coordination, it is guaranteed
 to receive a notification for either
 <link linkend="org.osgi.service.coordinator.Participant.ended-Coordination-">normal</link> or
 <link linkend="org.osgi.service.coordinator.Participant.failed-Coordination-">failure</link> termination when this
 Coordination is terminated.
 
 </para>
         <para>
 Participants are registered using their object identity. Once a
 Participant is registered with this Coordination, subsequent attempts to
 register the Participant again with this Coordination are ignored and the
 Participant is only notified once when this Coordination is terminated.
 
 </para>
         <para>
 A Participant can only be registered with a single active Coordination at
 a time. If a Participant is already registered with an active
 Coordination, attempts to register the Participation with another active
 Coordination will block until the Coordination the Participant is
 registered with terminates. Notice that in edge cases the notification to
 the Participant that this Coordination has terminated can happen before
 this method returns.
 
 </para>
         <para>
 Attempting to register a Participant with a <link linkend="org.osgi.service.coordinator.Coordination.isTerminated--">terminated</link> Coordination will result in a CoordinationException being
 thrown.
 
 </para>
         <para>
 The ordering of notifying Participants must follow the reverse order in
 which the Participants were registered.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>CoordinationException</code>– If the Participant could not be registered
         with this Coordination. This exception should normally not be
         caught by the caller but allowed to be caught by the initiator of
         this Coordination.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>CoordinationPermission[PARTICIPATE]</code> for this
         Coordination.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="end()" xml:id="org.osgi.service.coordinator.Coordination.end--">
         <title>public void end()</title>
         <para role="description">
Terminate this Coordination normally.
 
 </para>
         <para>
 If this Coordination has been <link linkend="org.osgi.service.coordinator.Coordination.push--">pushed</link> on the thread local
 Coordination stack of another thread, this method does nothing except
 throw a CoordinationException of type
 <link linkend="org.osgi.service.coordinator.CoordinationException.WRONG_THREAD">CoordinationException.WRONG_THREAD</link>.
 
 </para>
         <para>
 If this Coordination has been <link linkend="org.osgi.service.coordinator.Coordination.push--">pushed</link> on the thread local
 Coordination stack of this thread but is not the
 <link linkend="org.osgi.service.coordinator.Coordinator.peek--">current Coordination</link>, then the Coordinations
 on the thread local Coordination stack above this Coordination must be
 terminated and removed from the thread local Coordination stack before
 this Coordination is terminated. Each of these Coordinations, starting
 with the current Coordination, will be <link linkend="org.osgi.service.coordinator.Coordination.end--">terminated normally</link>
 . If the termination throws a <link linkend="org.osgi.service.coordinator.CoordinationException">CoordinationException</link>, then the
 next Coordination on the thread local Coordination stack will be
 <link linkend="org.osgi.service.coordinator.Coordination.fail-Throwable-">terminated as a failure</link> with a failure cause of
 the thrown CoordinationException. At the end of this process, this
 Coordination will be the current Coordination and will have been
 terminated as a failure if any of the terminated Coordinations threw a
 CoordinationException
 
 </para>
         <para>
 If this Coordination is the <link linkend="org.osgi.service.coordinator.Coordinator.peek--">current
 Coordination</link>, then it will be <link linkend="org.osgi.service.coordinator.Coordinator.pop--">removed</link> from the
 thread local Coordination stack.
 
 </para>
         <para>
 If this Coordination is already terminated, a CoordinationException is
 thrown. If this Coordination was terminated as a failure, the
 <link linkend="org.osgi.service.coordinator.Coordination.getFailure--">failure cause</link> will be the cause of the thrown
 CoordinationException.
 
 </para>
         <para>
 Otherwise, this Coordination is terminated normally and then all
 registered <link linkend="org.osgi.service.coordinator.Coordination.getParticipants--">Participants</link> are
 <link linkend="org.osgi.service.coordinator.Participant.ended-Coordination-">notified</link>. Participants should
 finalize any work associated with this Coordination. The successful
 return of this method indicates that the Coordination has terminated
 normally and all registered Participants have been notified of the normal
 termination.
 
 </para>
         <para>
 It is possible that one of the Participants throws an exception during
 notification. If this happens, this Coordination is considered to have
 partially failed and this method must throw a CoordinationException of
 type <link linkend="org.osgi.service.coordinator.CoordinationException.PARTIALLY_ENDED">CoordinationException.PARTIALLY_ENDED</link> after all the
 registered Participants have been notified.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>CoordinationException</code>– If this Coordination has failed, including
         timed out, or partially failed or this Coordination is on the
         thread local Coordination stack of another thread.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>CoordinationPermission[INITIATE]</code> for this Coordination.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="extendTimeout(long)" xml:id="org.osgi.service.coordinator.Coordination.extendTimeout-long-">
         <title>public long extendTimeout(long timeMillis)</title>
         <formalpara role="parameter">
            <title>timeMillis</title>
            <para>The time in milliseconds to extend the current timeout.
        If the initial timeout was specified as 0, no extension must take
        place. A zero must have no effect.</para>
         </formalpara>
         <para role="description">
Extend the time out of this Coordination.
 
 </para>
         <para>
 Participants can call this method to extend the timeout of this
 Coordination with at least the specified time. This can be done by
 Participants when they know a task will take more than normal time.
 
 </para>
         <para>
 This method will return the new deadline if an extension took place or
 the current deadline if, for whatever reason, no extension takes place.
 Note that if a maximum timeout is in effect, the deadline may not be
 extended by as much as was requested, if at all. If there is no deadline,
 zero is returned. Specifying a timeout extension of 0 will return the
 existing deadline.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The new deadline in milliseconds. If the specified time is 0, the
         existing deadline is returned. If this Coordination was created
         with an initial timeout of 0, no timeout is set and 0 is
         returned.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>CoordinationException</code>– If this Coordination
         <link linkend="org.osgi.service.coordinator.Coordination.isTerminated--">is terminated</link>.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified time is negative.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>CoordinationPermission[PARTICIPATE]</code> for this
         Coordination.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="fail(Throwable)" xml:id="org.osgi.service.coordinator.Coordination.fail-Throwable-">
         <title>public boolean fail(Throwable cause)</title>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The failure cause. The failure cause must not be
        <code>null</code>.</para>
         </formalpara>
         <para role="description">
Terminate this Coordination as a failure with the specified failure
 cause.
 
 </para>
         <para>
 If this Coordination is already <link linkend="org.osgi.service.coordinator.Coordination.isTerminated--">terminated</link>, this
 method does nothing and returns <code>false</code>.
 
 </para>
         <para>
 Otherwise, this Coordination is terminated as a failure with the
 specified failure cause and then all registered
 <link linkend="org.osgi.service.coordinator.Coordination.getParticipants--">Participants</link> are
 <link linkend="org.osgi.service.coordinator.Participant.failed-Coordination-">notified</link>. Participants should
 discard any work associated with this Coordination. This method will
 return <code>true</code>.
 
 </para>
         <para>
 If this Coordination has been <link linkend="org.osgi.service.coordinator.Coordination.push--">pushed</link> onto a thread local
 Coordination stack, this Coordination is not removed from the stack. The
 creator of this Coordination must still call <link linkend="org.osgi.service.coordinator.Coordination.end--">end()</link> on this
 Coordination to cause it to be removed from the thread local Coordination
 stack.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this Coordination was active and was terminated
         by this method, otherwise <code>false</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>CoordinationPermission[PARTICIPATE]</code> for this
         Coordination.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getBundle()" xml:id="org.osgi.service.coordinator.Coordination.getBundle--">
         <title>public Bundle getBundle()</title>
         <para role="description">
Returns the bundle that created this Coordination. This is the bundle
 that obtained the <link linkend="org.osgi.service.coordinator.Coordinator">Coordinator</link> service that was used to create
 this Coordination.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The bundle that created this Coordination.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>CoordinationPermission[ADMIN]</code> for this Coordination.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getEnclosingCoordination()" xml:id="org.osgi.service.coordinator.Coordination.getEnclosingCoordination--">
         <title>public Coordination getEnclosingCoordination()</title>
         <para role="description">
Returns the Coordination enclosing this Coordination if this Coordination
 is on the thread local Coordination stack.
 
 </para>
         <para>
 When a Coordination is <link linkend="org.osgi.service.coordinator.Coordination.push--">pushed</link> onto the thread local
 Coordination stack, the former <link linkend="org.osgi.service.coordinator.Coordinator.peek--">current
 Coordination</link>, if any, is the enclosing Coordination of this
 Coordination. When this Coordination is <link linkend="org.osgi.service.coordinator.Coordinator.pop--">removed</link>
 from the thread local Coordination stack, this Coordination no longer has
 an enclosing Coordination.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Coordination enclosing this Coordination if this Coordination
         is on the thread local Coordination stack or <code>null</code> if this
         Coordination is not on the thread local Coordination stack or has
         no enclosing Coordination.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>CoordinationPermission[ADMIN]</code> for this Coordination.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFailure()" xml:id="org.osgi.service.coordinator.Coordination.getFailure--">
         <title>public Throwable getFailure()</title>
         <para role="description">
Returns the failure cause of this Coordination.
 
 </para>
         <para>
 If this Coordination has <link linkend="org.osgi.service.coordinator.Coordination.fail-Throwable-">failed</link>, then this
 method will return the failure cause.
 
 </para>
         <para>
 If this Coordination timed out, this method will return <link linkend="org.osgi.service.coordinator.Coordination.TIMEOUT">TIMEOUT</link>
 as the failure cause. If this Coordination was active when the bundle
 that created it released the <link linkend="org.osgi.service.coordinator.Coordinator">Coordinator</link> service, this method
 will return <link linkend="org.osgi.service.coordinator.Coordination.RELEASED">RELEASED</link> as the failure cause. If the Coordination
 was orphaned, this method will return <link linkend="org.osgi.service.coordinator.Coordination.ORPHANED">ORPHANED</link> as the failure
 cause.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The failure cause of this Coordination or <code>null</code> if this
         Coordination has not terminated as a failure.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>CoordinationPermission[INITIATE]</code> for this Coordination.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getId()" xml:id="org.osgi.service.coordinator.Coordination.getId--">
         <title>public long getId()</title>
         <para role="description">
Returns the id assigned to this Coordination.
 
 The id is assigned by the <link linkend="org.osgi.service.coordinator.Coordinator">Coordinator</link> service which created this
 Coordination and is unique among all the Coordinations created by the
 Coordinator service and must not be reused as long as the Coordinator
 service remains registered. The id must be positive and monotonically
 increases for each Coordination created by the Coordinator service.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The id assigned to this Coordination.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getName()" xml:id="org.osgi.service.coordinator.Coordination.getName--">
         <title>public String getName()</title>
         <para role="description">
Returns the name of this Coordination.
 
 The name is specified when this Coordination was created.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of this Coordination.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getParticipants()" xml:id="org.osgi.service.coordinator.Coordination.getParticipants--">
         <title>public List&lt;Participant&gt; getParticipants()</title>
         <para role="description">
Returns a snapshot of the Participants registered with this Coordination.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A snapshot of the Participants registered with this Coordination.
         If no Participants are registered with this Coordination, the
         returned list will be empty. The list is ordered in the order the
         Participants were registered. The returned list is the property
         of the caller and can be modified by the caller.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>CoordinationPermission[INITIATE]</code> for this Coordination.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getThread()" xml:id="org.osgi.service.coordinator.Coordination.getThread--">
         <title>public Thread getThread()</title>
         <para role="description">
Returns the thread in whose thread local Coordination stack this
 Coordination has been <link linkend="org.osgi.service.coordinator.Coordination.push--">pushed</link>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The thread in whose thread local Coordination stack this
         Coordination has been pushed or <code>null</code> if this Coordination
         is not in any thread local Coordination stack.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>CoordinationPermission[ADMIN]</code> for this Coordination.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getVariables()" xml:id="org.osgi.service.coordinator.Coordination.getVariables--">
         <title>public Map&lt;Class&lt;?&gt;,Object&gt; getVariables()</title>
         <para role="description">
Returns the variable map associated with this Coordination.
 
 Each Coordination has a map that can be used for communicating between
 different Participants. The key of the map is a class, allowing for
 private data to be stored in the map by using implementation classes or
 shared data by using shared interfaces.
 
 The returned map is not synchronized. Users of the map must synchronize
 on the Map object while making changes.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The variable map associated with this Coordination.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>CoordinationPermission[PARTICIPANT]</code> for this
         Coordination.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isTerminated()" xml:id="org.osgi.service.coordinator.Coordination.isTerminated--">
         <title>public boolean isTerminated()</title>
         <para role="description">
Returns whether this Coordination is terminated.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this Coordination is terminated, otherwise
         <code>false</code> if this Coordination is active.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="join(long)" xml:id="org.osgi.service.coordinator.Coordination.join-long-">
         <title>public void join(long timeMillis) throws InterruptedException</title>
         <formalpara role="parameter">
            <title>timeMillis</title>
            <para>Maximum time in milliseconds to wait. Specifying a time
        of 0 will wait until this Coordination is terminated.</para>
         </formalpara>
         <para role="description">
Wait until this Coordination is terminated and all registered
 Participants have been notified.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>InterruptedException</code>– If the wait is interrupted.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified time is negative.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>CoordinationPermission[PARTICIPATE]</code> for this
         Coordination.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="push()" xml:id="org.osgi.service.coordinator.Coordination.push--">
         <title>public Coordination push()</title>
         <para role="description">
Push this Coordination object onto the thread local Coordination stack to
 make it the <link linkend="org.osgi.service.coordinator.Coordinator.peek--">current Coordination</link>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>This Coordination.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>CoordinationException</code>– If this Coordination is already on the any
         thread's thread local Coordination stack or this Coordination
         <link linkend="org.osgi.service.coordinator.Coordination.isTerminated--">is terminated</link>.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>CoordinationPermission[INITIATE]</code> for this Coordination.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="CoordinationException" xml:id="org.osgi.service.coordinator.CoordinationException">
      <title>public class CoordinationException<?line-break?> extends RuntimeException</title>
      <para>
Unchecked exception which may be thrown by a Coordinator implementation.
   </para>
      <section role="field" xreflabel="ALREADY_ENDED" xml:id="org.osgi.service.coordinator.CoordinationException.ALREADY_ENDED">
         <title>public static final int ALREADY_ENDED = 4</title>
         <para>
The Coordination has already terminated normally.
   </para>
      </section>
      <section role="field" xreflabel="ALREADY_PUSHED" xml:id="org.osgi.service.coordinator.CoordinationException.ALREADY_PUSHED">
         <title>public static final int ALREADY_PUSHED = 5</title>
         <para>
The Coordination was already on a thread's thread local Coordination
 stack.
   </para>
      </section>
      <section role="field" xreflabel="DEADLOCK_DETECTED" xml:id="org.osgi.service.coordinator.CoordinationException.DEADLOCK_DETECTED">
         <title>public static final int DEADLOCK_DETECTED = 1</title>
         <para>
Registering a Participant with a Coordination would have resulted in a
 deadlock.
   </para>
      </section>
      <section role="field" xreflabel="FAILED" xml:id="org.osgi.service.coordinator.CoordinationException.FAILED">
         <title>public static final int FAILED = 2</title>
         <para>
The Coordination has terminated as a failure with
 <link linkend="org.osgi.service.coordinator.Coordination.fail-Throwable-">Coordination.fail(Throwable)</link>. When this exception type is used,
 the getCause() method must return a non-null value.
   </para>
      </section>
      <section role="field" xreflabel="LOCK_INTERRUPTED" xml:id="org.osgi.service.coordinator.CoordinationException.LOCK_INTERRUPTED">
         <title>public static final int LOCK_INTERRUPTED = 6</title>
         <para>
The current thread was interrupted while waiting to register a
 Participant with a Coordination.
   </para>
      </section>
      <section role="field" xreflabel="PARTIALLY_ENDED" xml:id="org.osgi.service.coordinator.CoordinationException.PARTIALLY_ENDED">
         <title>public static final int PARTIALLY_ENDED = 3</title>
         <para>
The Coordination has partially ended.
   </para>
      </section>
      <section role="field" xreflabel="UNKNOWN" xml:id="org.osgi.service.coordinator.CoordinationException.UNKNOWN">
         <title>public static final int UNKNOWN = 0</title>
         <para>
Unknown reason for this exception.
   </para>
      </section>
      <section role="field" xreflabel="WRONG_THREAD" xml:id="org.osgi.service.coordinator.CoordinationException.WRONG_THREAD">
         <title>public static final int WRONG_THREAD = 7</title>
         <para>
The Coordination cannot be ended by the calling thread since the
 Coordination is on the thread local Coordination stack of another thread.
   </para>
      </section>
      <section role="method" xreflabel="CoordinationException(String,Coordination,int,Throwable)" xml:id="org.osgi.service.coordinator.CoordinationException.CoordinationException-String-Coordination-int-Throwable-">
         <title>public  CoordinationException(String message,Coordination coordination,int type,Throwable cause)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The detail message for this exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>coordination</title>
            <para>The Coordination associated with this exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause associated with this exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>The type of this exception.</para>
         </formalpara>
         <para role="description">
Create a new Coordination Exception with a cause.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified type is <link linkend="org.osgi.service.coordinator.CoordinationException.FAILED">FAILED</link>
         and the specified cause is <code>null</code>.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="CoordinationException(String,Coordination,int)" xml:id="org.osgi.service.coordinator.CoordinationException.CoordinationException-String-Coordination-int-">
         <title>public  CoordinationException(String message,Coordination coordination,int type)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The detail message for this exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>coordination</title>
            <para>The Coordination associated with this exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>The type of this exception.</para>
         </formalpara>
         <para role="description">
Create a new Coordination Exception.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified type is <link linkend="org.osgi.service.coordinator.CoordinationException.FAILED">FAILED</link>
         .   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getId()" xml:id="org.osgi.service.coordinator.CoordinationException.getId--">
         <title>public long getId()</title>
         <para role="description">
Returns the id of the <link linkend="org.osgi.service.coordinator.Coordination">Coordination</link> associated with this
 exception.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The id of the Coordination associated with this exception or
         <code>-1</code> if no Coordination is associated with this exception.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getName()" xml:id="org.osgi.service.coordinator.CoordinationException.getName--">
         <title>public String getName()</title>
         <para role="description">
Returns the name of the <link linkend="org.osgi.service.coordinator.Coordination">Coordination</link> associated with this
 exception.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of the Coordination associated with this exception or
         <code>"&lt;&gt;"</code> if no Coordination is associated with this
         exception.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.coordinator.CoordinationException.getType--">
         <title>public int getType()</title>
         <para role="description">
Returns the type for this exception.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The type of this exception.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="CoordinationPermission" xml:id="org.osgi.service.coordinator.CoordinationPermission">
      <title>public final class CoordinationPermission<?line-break?> extends BasicPermission</title>
      <para>
A bundle's authority to create or use a <link linkend="org.osgi.service.coordinator.Coordination">Coordination</link>.
 
 </para>
      <para>
         <code>CoordinationPermission</code> has three actions: <code>initiate</code>,
 <code>participate</code> and <code>admin</code>.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="ADMIN" xml:id="org.osgi.service.coordinator.CoordinationPermission.ADMIN">
         <title>public static final String ADMIN = "admin"</title>
         <para>
The action string <code>admin</code>.
   </para>
      </section>
      <section role="field" xreflabel="INITIATE" xml:id="org.osgi.service.coordinator.CoordinationPermission.INITIATE">
         <title>public static final String INITIATE = "initiate"</title>
         <para>
The action string <code>initiate</code>.
   </para>
      </section>
      <section role="field" xreflabel="PARTICIPATE" xml:id="org.osgi.service.coordinator.CoordinationPermission.PARTICIPATE">
         <title>public static final String PARTICIPATE = "participate"</title>
         <para>
The action string <code>participate</code>.
   </para>
      </section>
      <section role="method" xreflabel="CoordinationPermission(String,String)" xml:id="org.osgi.service.coordinator.CoordinationPermission.CoordinationPermission-String-String-">
         <title>public  CoordinationPermission(String filter,String actions)</title>
         <formalpara role="parameter">
            <title>filter</title>
            <para>A filter expression. Filter attribute names are processed
        in a case sensitive manner. A special value of <code>"*"</code> can be
        used to match all coordinations.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>
               <code>admin</code>, <code>initiate</code> or <code>participate</code>
        (canonical order).</para>
         </formalpara>
         <para role="description">
Creates a new granted <code>CoordinationPermission</code> object.
 
 This constructor must only be used to create a permission that is going
 to be checked.
 </para>
         <para>
 Examples:
 
 </para>
         <programlisting> (coordination.name=com.acme.*)
 (&amp;(signer=\*,o=ACME,c=US)(coordination.name=com.acme.*))
 (signer=\*,o=ACME,c=US)</programlisting>
         <para>
 When a signer key is used within the filter expression the signer value
 must escape the special filter chars ('*', '(', ')').
 </para>
         <para>
 The name is specified as a filter expression. The filter gives access to
 the following attributes:
 </para>
         <itemizedlist>
            <listitem>
               <para>signer - A Distinguished Name chain used to sign the exporting
 bundle. Wildcards in a DN are not matched according to the filter string
 rules, but according to the rules defined for a DN chain.</para>
            </listitem>
            <listitem>
               <para>location - The location of the exporting bundle.</para>
            </listitem>
            <listitem>
               <para>id - The bundle ID of the exporting bundle.</para>
            </listitem>
            <listitem>
               <para>name - The symbolic name of the exporting bundle.</para>
            </listitem>
            <listitem>
               <para>coordination.name - The name of the requested coordination.</para>
            </listitem>
         </itemizedlist>
         <para>
 Filter attribute names are processed in a case sensitive manner.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the filter has an invalid syntax.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="CoordinationPermission(String,Bundle,String)" xml:id="org.osgi.service.coordinator.CoordinationPermission.CoordinationPermission-String-Bundle-String-">
         <title>public  CoordinationPermission(String coordinationName,Bundle coordinationBundle,String actions)</title>
         <formalpara role="parameter">
            <title>coordinationName</title>
            <para>The name of the requested Coordination.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>coordinationBundle</title>
            <para>The bundle which
        <link linkend="org.osgi.service.coordinator.Coordination.getBundle--">created</link> the requested
        Coordination.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>
               <code>admin</code>, <code>initiate</code> or <code>participate</code>
        (canonical order).</para>
         </formalpara>
         <para role="description">
Creates a new requested <code>CoordinationPermission</code> object to be used
 by the code that must perform <code>checkPermission</code>.
 <code>CoordinationPermission</code> objects created with this constructor
 cannot be added to an <code>CoordinationPermission</code> permission
 collection.
   </para>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.coordinator.CoordinationPermission.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>The object to test for equality with this
        <code>CoordinationPermission</code> object.</para>
         </formalpara>
         <para role="description">
Determines the equality of two <code>CoordinationPermission</code> objects.
 
 This method checks that specified permission has the same name and
 <code>CoordinationPermission</code> actions as this
 <code>CoordinationPermission</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if <code>obj</code> is a <code>CoordinationPermission</code>,
         and has the same name and actions as this
         <code>CoordinationPermission</code> object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getActions()" xml:id="org.osgi.service.coordinator.CoordinationPermission.getActions--">
         <title>public String getActions()</title>
         <para role="description">
Returns the canonical string representation of the
 <code>CoordinationPermission</code> actions.
 
 </para>
         <para>
 Always returns present <code>CoordinationPermission</code> actions in the
 following order: <code>admin</code>, <code>initiate</code>, <code>participate</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Canonical string representation of the
         <code>CoordinationPermission</code> actions.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.coordinator.CoordinationPermission.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code value for this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A hash code value for this object.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="implies(Permission)" xml:id="org.osgi.service.coordinator.CoordinationPermission.implies-Permission-">
         <title>public boolean implies(Permission p)</title>
         <formalpara role="parameter">
            <title>p</title>
            <para>The requested permission.</para>
         </formalpara>
         <para role="description">
Determines if the specified permission is implied by this object.
 
 </para>
         <para>
 This method checks that the filter of the target is implied by the
 coordination name of this object. The list of
 <code>CoordinationPermission</code> actions must either match or allow for the
 list of the target object to imply the target
 <code>CoordinationPermission</code> action.
 </para>
         <para/>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the specified permission is implied by this
         object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="newPermissionCollection()" xml:id="org.osgi.service.coordinator.CoordinationPermission.newPermissionCollection--">
         <title>public PermissionCollection newPermissionCollection()</title>
         <para role="description">
Returns a new <code>PermissionCollection</code> object suitable for storing
 <code>CoordinationPermission</code> objects.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new <code>PermissionCollection</code> object.</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="Coordinator" xml:id="org.osgi.service.coordinator.Coordinator">
      <title>public interface Coordinator</title>
      <para>
A Coordinator service coordinates activities between different parties.
 
 </para>
      <para>
 A bundle can use the Coordinator service to create <link linkend="org.osgi.service.coordinator.Coordination">Coordination</link>
 objects. Once a Coordination object is created, it can be
 <link linkend="org.osgi.service.coordinator.Coordination.push--">pushed</link> on the thread local Coordination stack to
 be an implicit parameter as the current Coordination for calls to other
 parties, or it can be passed directly to other parties as an argument. The
 current Coordination, which is on the top of the current thread's thread
 local Coordination stack, can be obtained with <link linkend="org.osgi.service.coordinator.Coordinator.peek--">peek()</link>.
 
 </para>
      <para>
 Any active Coordinations created by a bundle must be terminated when the
 bundle releases the Coordinator service. The Coordinator service must
 <link linkend="org.osgi.service.coordinator.Coordination.fail-Throwable-">fail</link> these Coordinations with the
 <link linkend="org.osgi.service.coordinator.Coordination.RELEASED">RELEASED</link> exception.
 
 </para>
      <para>
 A <link linkend="org.osgi.service.coordinator.Participant">Participant</link> can <link linkend="org.osgi.service.coordinator.Coordination.addParticipant-Participant-">register</link> to participate in a Coordination and receive notification of the
 termination of the Coordination.
 
 </para>
      <para>
 The following example code shows a example usage of the Coordinator service.
 
 </para>
      <programlisting> void foo() {
   Coordination c = coordinator.begin("work", 0);
   try {
     doWork();
   } catch (Exception e) {
     c.fail(e);
   } finally {
     c.end();
   }
 }</programlisting>
      <para>
 
 In the <code>doWork</code> method, code can be called that requires notification
 of the termination of the Coordination. The <code>doWork</code> method can then
 register a Participant with the Coordination.
 
 </para>
      <programlisting> void doWork() {
   if (coordinator.addParticipant(this)) {
     beginWork();
   } else {
     beginWork();
     finishWork();
   }
 }
 
 void ended(Coordination c) {
   finishWork();
 }
 
 void failed(Coordination c) {
   undoWork();
 }</programlisting>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="addParticipant(Participant)" xml:id="org.osgi.service.coordinator.Coordinator.addParticipant-Participant-">
         <title>public boolean addParticipant(Participant participant)</title>
         <formalpara role="parameter">
            <title>participant</title>
            <para>The Participant to register with the current
        Coordination. The participant must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Register a Participant with the <link linkend="org.osgi.service.coordinator.Coordinator.peek--">current Coordination</link>.
 
 </para>
         <para>
 If there is no current Coordination, this method does nothing and returns
 <code>false</code>.
 
 </para>
         <para>
 Otherwise, this method calls
 <link linkend="org.osgi.service.coordinator.Coordination.addParticipant-Participant-">Coordination.addParticipant(Participant)</link> with the specified
 Participant on the current Coordination and returns <code>true</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>false</code> if there was no current Coordination, otherwise
         returns <code>true</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>CoordinationException</code>– If the Participant could not be registered
         with the current Coordination. This exception should normally not
         be caught by the caller but allowed to be caught by the initiator
         of this Coordination.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>CoordinationPermission[PARTICIPATE]</code> for the current
         Coordination.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.coordinator.Coordination.addParticipant-Participant-">Coordination.addParticipant(Participant)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="begin(String,long)" xml:id="org.osgi.service.coordinator.Coordinator.begin-String-long-">
         <title>public Coordination begin(String name,long timeMillis)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of this coordination. The name does not have to be
        unique but must follow the <code>symbolic-name</code> syntax from the
        Core specification.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>timeMillis</title>
            <para>Timeout in milliseconds. A value of 0 means no timeout
        is required. If the Coordination is not terminated within the
        timeout, the Coordinator service will
        <link linkend="org.osgi.service.coordinator.Coordination.fail-Throwable-">fail</link> the Coordination with a
        <link linkend="org.osgi.service.coordinator.Coordination.TIMEOUT">TIMEOUT</link> exception.</para>
         </formalpara>
         <para role="description">
Create a new Coordination and make it the <link linkend="org.osgi.service.coordinator.Coordinator.peek--">current
 Coordination</link>.
 
 </para>
         <para>
 This method does that same thing as calling <link linkend="org.osgi.service.coordinator.Coordinator.create-String-long-">create(name, timeMillis)</link>.<link linkend="org.osgi.service.coordinator.Coordination.push--">push()</link>
         </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new Coordination object</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified name does not follow
         the <code>symbolic-name</code> syntax or the specified time is
         negative.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>CoordinationPermission[INITIATE]</code> for the specified name
         and creating bundle.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="create(String,long)" xml:id="org.osgi.service.coordinator.Coordinator.create-String-long-">
         <title>public Coordination create(String name,long timeMillis)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of this coordination. The name does not have to be
        unique but must follow the <code>symbolic-name</code> syntax from the
        Core specification.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>timeMillis</title>
            <para>Timeout in milliseconds. A value of 0 means no timeout
        is required. If the Coordination is not terminated within the
        timeout, the Coordinator service will
        <link linkend="org.osgi.service.coordinator.Coordination.fail-Throwable-">fail</link> the Coordination with a
        <link linkend="org.osgi.service.coordinator.Coordination.TIMEOUT">TIMEOUT</link> exception.</para>
         </formalpara>
         <para role="description">
Create a new Coordination.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The new Coordination object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified name does not follow
         the <code>symbolic-name</code> syntax or the specified time is
         negative.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>CoordinationPermission[INITIATE]</code> for the specified name
         and creating bundle.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="fail(Throwable)" xml:id="org.osgi.service.coordinator.Coordinator.fail-Throwable-">
         <title>public boolean fail(Throwable cause)</title>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The failure cause. The failure cause must not be
        <code>null</code> .</para>
         </formalpara>
         <para role="description">
Terminate the <link linkend="org.osgi.service.coordinator.Coordinator.peek--">current Coordination</link> as a failure with the
 specified failure cause.
 
 </para>
         <para>
 If there is no current Coordination, this method does nothing and returns
 <code>false</code>.
 
 </para>
         <para>
 Otherwise, this method returns the result from calling
 <link linkend="org.osgi.service.coordinator.Coordination.fail-Throwable-">Coordination.fail(Throwable)</link> with the specified failure cause on
 the current Coordination.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>false</code> if there was no current Coordination, otherwise
         returns the result from calling
         <link linkend="org.osgi.service.coordinator.Coordination.fail-Throwable-">Coordination.fail(Throwable)</link> on the current Coordination.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>CoordinationPermission[PARTICIPATE]</code> for the current
         Coordination.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.coordinator.Coordination.fail-Throwable-">Coordination.fail(Throwable)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getCoordination(long)" xml:id="org.osgi.service.coordinator.Coordinator.getCoordination-long-">
         <title>public Coordination getCoordination(long id)</title>
         <formalpara role="parameter">
            <title>id</title>
            <para>The id of the requested Coordination.</para>
         </formalpara>
         <para role="description">
Returns the Coordination with the specified id.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Coordination having with specified id or <code>null</code> if no
         Coordination with the specified id exists, the Coordination with
         the specified id is <link linkend="org.osgi.service.coordinator.Coordination.isTerminated--">terminated</link> or the caller does not have
         <code>CoordinationPermission[ADMIN]</code> for the Coordination with
         the specified id.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getCoordinations()" xml:id="org.osgi.service.coordinator.Coordinator.getCoordinations--">
         <title>public Collection&lt;Coordination&gt; getCoordinations()</title>
         <para role="description">
Returns a snapshot of all active Coordinations.
 
 </para>
         <para>
 Since Coordinations can be terminated at any time, Coordinations in the
 returned collection can be terminated before the caller examines the
 returned collection.
 
 </para>
         <para>
 The returned collection must only contain the Coordinations for which the
 caller has <code>CoordinationPermission[ADMIN]</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A snapshot of all active Coordinations. If there are no active
         Coordinations, the returned list will be empty. The returned
         collection is the property of the caller and can be modified by
         the caller.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="peek()" xml:id="org.osgi.service.coordinator.Coordinator.peek--">
         <title>public Coordination peek()</title>
         <para role="description">
Returns the current Coordination.
 
 </para>
         <para>
 The current Coordination is the Coordination at the top of the thread
 local Coordination stack. If the thread local Coordination stack is
 empty, there is no current Coordination. Each Coordinator service
 maintains thread local Coordination stacks.
 
 </para>
         <para>
 This method does not alter the thread local Coordination stack.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The current Coordination or <code>null</code> if the thread local
         Coordination stack is empty.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="pop()" xml:id="org.osgi.service.coordinator.Coordinator.pop--">
         <title>public Coordination pop()</title>
         <para role="description">
Remove the current Coordination from the thread local Coordination stack.
 
 </para>
         <para>
 The current Coordination is the Coordination at the top of the thread
 local Coordination stack. If the thread local Coordination stack is
 empty, there is no current Coordination. Each Coordinator service
 maintains its own thread local Coordination stacks.
 
 </para>
         <para>
 This method alters the thread local Coordination stack, if it is not
 empty, by removing the Coordination at the top of the thread local
 Coordination stack.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Coordination that was the current Coordination or
         <code>null</code> if the thread local Coordination stack is empty.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>CoordinationPermission[INITIATE]</code> for the current
         Coordination.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Participant" xml:id="org.osgi.service.coordinator.Participant">
      <title>public interface Participant</title>
      <para>
A Participant participates in a Coordination.
 
 </para>
      <para>
 A Participant can participate in a Coordination by
 <link linkend="org.osgi.service.coordinator.Coordination.addParticipant-Participant-">registering</link> itself with the
 Coordination. After successfully registering itself, the Participant is
 notified when the Coordination is terminated.
 
 </para>
      <para>
 If a Coordination terminates <link linkend="org.osgi.service.coordinator.Coordination.end--">normally</link>, then all
 registered Participants are notified on their <link linkend="org.osgi.service.coordinator.Participant.ended-Coordination-">ended(Coordination)</link>
 method. If the Coordination terminates as a
 <link linkend="org.osgi.service.coordinator.Coordination.fail-Throwable-">failure</link>, then all registered
 Participants are notified on their <link linkend="org.osgi.service.coordinator.Participant.failed-Coordination-">failed(Coordination)</link> method.
 
 </para>
      <para>
 Participants are required to be thread safe as notification can be made on
 any thread.
 
 </para>
      <para>
 A Participant can only be registered with a single active Coordination at a
 time. If a Participant is already registered with an active Coordination,
 attempts to register the Participation with another active Coordination will
 block until the Coordination the Participant is registered with terminates.
 Notice that in edge cases the notification to the Participant that the
 Coordination has terminated can happen before the registration method
 returns.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="ended(Coordination)" xml:id="org.osgi.service.coordinator.Participant.ended-Coordination-">
         <title>public void ended(Coordination coordination) throws Exception</title>
         <formalpara role="parameter">
            <title>coordination</title>
            <para>The Coordination that has terminated normally.</para>
         </formalpara>
         <para role="description">
Notification that a Coordination has terminated
 <link linkend="org.osgi.service.coordinator.Coordination.end--">normally</link>.
 
 </para>
         <para>
 This Participant should finalize any work associated with the specified
 Coordination.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– If this Participant throws an exception, the
         <link linkend="org.osgi.service.coordinator.Coordinator">Coordinator</link> service should log the exception. The
         <link linkend="org.osgi.service.coordinator.Coordination.end--">Coordination.end()</link> method which is notifying this
         Participant must continue notification of other registered
         Participants. When this is completed, the
         <link linkend="org.osgi.service.coordinator.Coordination.end--">Coordination.end()</link> method must throw a
         CoordinationException of type
         <link linkend="org.osgi.service.coordinator.CoordinationException.PARTIALLY_ENDED">CoordinationException.PARTIALLY_ENDED</link>.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="failed(Coordination)" xml:id="org.osgi.service.coordinator.Participant.failed-Coordination-">
         <title>public void failed(Coordination coordination) throws Exception</title>
         <formalpara role="parameter">
            <title>coordination</title>
            <para>The Coordination that has terminated as a failure.</para>
         </formalpara>
         <para role="description">
Notification that a Coordination has terminated as a
 <link linkend="org.osgi.service.coordinator.Coordination.fail-Throwable-">failure</link>.
 
 </para>
         <para>
 This Participant should discard any work associated with the specified
 Coordination.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– If this Participant throws an exception, the
         <link linkend="org.osgi.service.coordinator.Coordinator">Coordinator</link> service should log the exception. The
         <link linkend="org.osgi.service.coordinator.Coordination.fail-Throwable-">Coordination.fail(Throwable)</link> method which is notifying
         this Participant must continue notification of other registered
         Participants.   </para>
         </formalpara>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed><title><xref linkend="intro.core.release" xrefstyle="template:%t"/></title>http://www.osgi.org/Specifications/HomePage</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="132" revision="$Id: f1dc188cdbec4eb4fed88fb5fa1013ac59bd78eb $" version="5" xml:id="service.repository" xml:base="../132/service.repository.xml">
  <title>Repository Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.repository-version" linkend="org.osgi.service.repository"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The guiding force behind the OSGi Specifications is a reusable
    component model. The <xref linkend="intro.core.release" xrefstyle="template:%t"/> provides a solid foundation for such a component
    model by providing a component collaboration framework with a
    comprehensive management model. The service specifications provide the
    abstract APIs to allow many different collaborations between components.
    This Repository Service Specification provides the capability to manage
    the external access to components and other resources.</para>

    <para>Though the Repository service can be used as a standalone service to
    search and retrieve general binary artifacts, called resources, it is
    intended to be used in conjunction with the <xref linkend="service.resolver"/>.</para>

    <para>The model of the Repository is based on the generic
    Requirement-Capability model defined in <xref linkend="i3273380"/>, this
    chapter relies on the definitions of the generic model.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>External</emphasis> - Provide access to external
          components and resources.</para>
        </listitem>

        <listitem>
          <para><emphasis>Resolve</emphasis> - The Repository API must be
          closely aligned with the Resolver API since they are intended to be
          used in conjunction.</para>
        </listitem>

        <listitem>
          <para><emphasis>Searching</emphasis> - Support general
          queries.</para>
        </listitem>

        <listitem>
          <para><emphasis>Metadata</emphasis> - Allow resources to provide
          content information.</para>
        </listitem>

        <listitem>
          <para><emphasis>Retrieval</emphasis> - Allow the retrieval of
          Resources from remote locations.</para>
        </listitem>

        <listitem>
          <para><emphasis>Batching</emphasis> - Repositories must be able to
          batch queries.</para>
        </listitem>

        <listitem>
          <para><emphasis>Distribution</emphasis> - Allow Repositories to be
          defined with a simple storage scheme such that Repositories can be
          distributed on a removable media like a CD/DVD.</para>
        </listitem>

        <listitem>
          <para><emphasis>Mirroring</emphasis> - Repositories must be able to
          support selecting a remote site based on the local situation.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Repository</emphasis> - A facade to a (remote) set
          of resources described by capabilities.</para>
        </listitem>

        <listitem>
          <para><emphasis>Resource</emphasis> - An artifact that has
          requirements that must be satisfied before it is available but
          provides capabilities when it becomes available.</para>
        </listitem>

        <listitem>
          <para><emphasis>Requirement</emphasis> - An expression that asserts
          a capability.</para>
        </listitem>

        <listitem>
          <para><emphasis>Capability</emphasis> - Describes a feature of the
          resource so that it can be required by a requirement.</para>
        </listitem>

        <listitem>
          <para><emphasis>Resource Content</emphasis> - Provides access to the
          underlying bytes of the resource in the default format.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Class and Service overview</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.631in" contentwidth="7.000in" fileref="repository-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Synopsis</title>

      <para>There are many different repositories available on the Internet or
      on fixed media. A repository can be made available to bundles by
      providing a Repository service. If such a bundle, for example a
      Management Agent performing a provisioning operation, finds that it has
      an unmatched requirement then it can query the repository services to
      find matching capabilities. The Repository service can implement the
      query in many different ways. It can ship the requirement to a remote
      side to be processed or it can process the query locally.</para>

      <para>This specification also provides an XML schema that can be used to
      describe a Repository. Instances of this schema can be downloaded from a
      remote repository for local indexing or they can be stored for example
      on a DVD together with the resources.</para>
    </section>
  </section>

  <section>
    <title>Using a Repository</title>

    <para>The Repository service provides an abstraction to a, potentially
    remote, set of resources. In the generic Capability-Requirement model,
    resources are modeled to declare capabilities and requirements. The
    primary purpose of a Repository is to enable a management agent that uses
    the Resolver API to leverage a wide array of repositories. This Repository
    service specification allows different Repository providers to be
    installed as bundles, and each bundle can register multiple Repository
    services. The Repository is sufficiently abstract to allow many different
    implementations.</para>

    <para>Repository services are identified by a number of service
    properties:</para>

    <itemizedlist>
      <listitem>
        <para><code>service.pid</code> - A mandatory unique identity for this
        Repository service.</para>
      </listitem>

      <listitem>
        <para><code>service.description</code> - An optional human readable
        name for this Repository.</para>
      </listitem>

      <listitem>
        <para><code>repository.url</code> - Optional URLs to landing pages of
        the repository, if they exist.</para>
      </listitem>
    </itemizedlist>

    <para>In general, the users of the Repository service should aggregate all
    services in the service registry. This strategy allows the deployer to
    control the available Repositories. The following example, using
    Declarative Service annotations to show the dependencies on the service
    registry, shows how to aggregate the different Repository services.</para>

    <programlisting>List&lt;Repository&gt; repos = new CopyOnWriteArrayList&lt;Repository&gt;();

@Reference(
cardinality = ReferenceCardinality.MULTIPLE, 
policy = ReferencePolicy.DYNAMIC)
void addRepository( Repository repo )    { repos.add(repo); }
void removeRepository( Repository repo ) { repos.remove(repo); }</programlisting>

    <para>To access a resource in a Repository service it is necessary to
    construct a requirement, pass this to the Repository service, and then use
    the returned capabilities to satisfy the resolver or to get the resource
    from the capability. The Repository then returns all matching
    capabilities. The requirement matches the capability if their namespaces
    match and the requirement's filter is absent or matches the
    attributes.</para>

    <para>The <xref linkend="org.osgi.service.repository.Repository.findProviders-Collection-" xrefstyle="hyperlink"/> method takes a Collection of requirements. The
    reason for this collection is that it allows the caller to specify
    multiple requirements simultaneously so that Repositories can batch
    requests, the requirements in this collection are further unrelated. That
    is, they do not form an expression in any way. Multiple requirements as
    the parameter means that the result must be a map so that the caller can
    find out what requirement matched what capabilities. For example:</para>

    <programlisting>List&lt;Capability&gt; find( Requirement r ){
  List&lt;Capability&gt; result = new ArrayList&lt;Capability&gt;();

  for ( Repository repo : repos ) {
    Map&lt;Requirement,Collection&lt;Capability&gt;&gt; answer = 
        repo.findProviders( Collections.singleton( r ) );
     result.addAll( answer.get( r ) );
  }
  return result;
}</programlisting>

    <para>Access to resources is indirect since the Repository returns
    capabilities. Each capability is declared in a resource and the
    <code>getResource()</code> method provides access to the underlying
    resource. Since each resource declares an <code>osgi.identity</code>
    capability it is possible to retrieve a resource from a repository if the
    identity name, type, and version are known. For example, to get a bundle
    resource:</para>

    <programlisting>Resource getResource( String type, String name, Version version ) {
  String filter = String.format(
    "(&amp;(type=%s)(osgi.identity=%s)(version=%s))",
    type,
    name,
    version );
  
  RequirementBuilder builder = repo.newRequirementBuilder("osgi.identity");
  builder.addDirective("filter", filter);
  Requirement r = builder.build();

  List&lt;Capability&gt; capabilities = find( r );
  if ( capabilities.isEmpty() ) 
    return null;
  return capabilities.get( 0 ).getResource();
}</programlisting>

    <para>Resources that originate from Repository services must implement the
    <xref linkend="org.osgi.service.repository.RepositoryContent" xrefstyle="hyperlink"/> interface, this interface provides stream access
    to the default storage format. It is therefore possible to get the content
    with the following code.</para>

    <programlisting>InputStream getContent( String type, Stringname, Version version ) {
  Resource r = getResource( type, name, version );
  if ( r == null )
    return null;
  return ((RepositoryContent)r).getContent();
}</programlisting>

    <para>The <xref linkend="org.osgi.service.repository.RepositoryContent.getContent--" xrefstyle="hyperlink"/> method returns an Input Stream in the default
    format for that resource type. Resources from a Repository should also
    have one or more <code>osgi.content</code> capabilities that advertise the
    same resource in the same or different formats. The
    <code>osgi.content</code> capability has a number of attributes that
    provide information about the resource's download format:</para>

    <itemizedlist>
      <listitem>
        <para><code>osgi.content</code> - A unique SHA-256 for the content as
        read from the URL.</para>
      </listitem>

      <listitem>
        <para><code>url</code> - A URL to the content.</para>
      </listitem>

      <listitem>
        <para><code>mime</code> - An IANA MIME type for the content.</para>
      </listitem>

      <listitem>
        <para><code>size</code> - Size in bytes of the content.</para>
      </listitem>
    </itemizedlist>

    <para>It is therefore possible to search for a specific MIME type and
    download that format. For example:</para>

    <programlisting>String getURL( String type, String name, Versionversion, String mime ) 
    throws Exception {
    Resource r = getResource( type, name, version );
    for ( Capability cap : r.getCapabilities( "osgi.content") ) {
        Map&lt;String,Object&gt; attrs = cap.getAttributes();
        String actual = (String) attrs.get("mime");
        if ( actual!=null &amp;&amp; mime.equalsIgnoreCase( actual) ) {
            String url = (String) attrs.get( "url" );
            if ( url != null )
                return url;
        }
   }
   return null;
}</programlisting>

    <para>Since the <code>osgi.content</code> capability contains the SHA-256
    digest as the <code>osgi.content</code> attribute it is possible to verify
    the download that it was correct.</para>

    <para>Every resource has an <code>osgi.identity</code> capability. This
    namespace defines, in <xref linkend="i3272838"/>, the possibility to add
    related resources, for example <emphasis>javadoc</emphasis> or
    <emphasis>sources</emphasis>. A resource then has informational
    requirements to <code>osgi.identity</code> capabilities; these
    requirements are marked with a <code>classifier</code> directive that
    holds the type of <emphasis>relation</emphasis>. The following example
    shows how it would be possible to find such a related resource:</para>

    <programlisting>InputStream getRelated(Resource resource,String classifier) 
    throws Exception {
    for ( Requirement r : resource.getRequirements( "osgi.identity") ) {
        if ( classifier.equals( r.getDirectives().get( "classifier") ) ) {
            Collection&lt;Capability&gt; capabilities =
                 repository.findProviders( Collections.singleton( r )).get( r );

             if ( capabilities.isEmpty())
                continue;

            Capability c = capabilities.iterator().next();
            Resource related = c.getResource();
            return ((RepositoryContent)related).getContent();
        }
    }
    return null;
}</programlisting>

    <section>
      <title>Combining Requirements</title>

      <para>In some cases it may be useful to find resources in the repository
      that satisfy criteria across multiple namespaces.</para>

      <para>A simple Requirement object can contain a filter that makes
      assertions about capability attributes within a single namespace. So for
      example, a single requirement can state that a package
      <code>org.example.mypkg</code> must be exported in a version between
      <code>3.1</code> inclusive and <code>4.0</code> exclusive:</para>

      <programlisting>
  RequirementBuilder rb = repo.newRequirementBuilder("osgi.wiring.package");
  String rf = "(&amp;(osgi.wiring.package=org.example.mypkg)"
              + "(version&gt;=3.1)(!(version&gt;=4.0)))";
  rb.addDirective("filter", rf);
  Requirement r = rb.build();
    </programlisting>

      <para>This requirement contains three conditions on the
      <code>osgi.wiring.package</code> capability.</para>

      <para>In some situations it may be needed to specify requirements that
      cover multiple namespaces. For example a bundle might be needed that
      exports the above package, but the bundle must also have the Apache
      License, Version 2.0 license. A resource's license is available as an
      attribute on the <code>osgi.identity</code> namespace. Constructing a
      constraint that combines requirements from multiple namespaces can be
      done by using an Expression Combiner, which can be obtained from the
      Repository service. The Repository service provides a <xref linkend="org.osgi.service.repository.Repository.findProviders-RequirementExpression-" xrefstyle="hyperlink"/> overload that can take a requirement expression
      and returns a Promise to a collection of matching resources.
      <programlisting>  RequirementBuilder lb = repo.newRequirementBuilder("osgi.identity");
  String lf = "(license=http://opensource.org/licenses/Apache-2.0)";
  lb.addDirective("filter", lf);

  RequirementExpression expr = repo.getExpressionCombiner().and(
    lb.buildExpression(), rb.buildExpression());

  Promise&lt;Collection&lt;Resource&gt;&gt; p = repo.findProviders(expr);

  // Let findProviders() do its work async and update a ui component 
  // once the result is available
  p.then(new Success&lt;Collection&lt;Resource&gt;, Void&gt;() {
    public Promise&lt;Void&gt; call(Promise&lt;Collection&lt;Resource&gt;&gt; resolved) 
        throws Exception {
      ui.update(resolved.getValue());
      return null;
    }
  });

  // Instead of the async chain above its also possiblye to 
  // wait for the promise value synchronously:
  //   Collection&lt;Resource&gt; resources = p.getValue();</programlisting>
      For more details on OSGi Promises, see the <xref linkend="util.promise"/>.</para>
    </section>
  </section>

  <section xml:id="i3222899">
    <title>Repository</title>

    <para>A Repository service provides access to capabilities that satisfy a
    given requirement. A Repository can be the facade of a remote server
    containing a large amount of resources, a repository on removable media,
    or even a collection of bundles inside a ZIP file. A Repository
    communicates in terms of requirements and capabilities as defined in <xref linkend="i3273380"/>. This model is closely aligned with the <xref linkend="service.resolver"/>.</para>

    <para>A Repository service must be registered with the service properties
    given in the following table.</para>

    <table>
      <title>Repository Service Properties</title>

      <tgroup cols="4">
        <colspec colnum="1" colwidth="2*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="4*"/>

        <thead>
          <row>
            <entry>Attribute</entry>

            <entry>Opt</entry>

            <entry>Type</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>service.pid</code></entry>

            <entry><code>mandatory</code></entry>

            <entry><code>String</code></entry>

            <entry><para>A globally unique identifier for this
            Repository.</para></entry>
          </row>

          <row>
            <entry><code>service.description</code></entry>

            <entry><code>optional</code></entry>

            <entry><code>String</code></entry>

            <entry><para>The Repository Name</para></entry>
          </row>

          <row>
            <entry><code>repository.url</code></entry>

            <entry><code>optional</code></entry>

            <entry><code>String+</code></entry>

            <entry><para>URLs related to this Repository.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The Repository implements the following methods:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.repository.Repository.findProviders-Collection-" xrefstyle="hyperlink"/> - For each requirement find all the
        capabilities that match that requirement and return them as a
        <code>Map&lt;Requirement,Collection&lt;Capability&gt;&gt;</code>.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.repository.Repository.findProviders-RequirementExpression-" xrefstyle="hyperlink"/> - Find all resources that match the
        requirement expression. The requirement expression is used to combine
        multiple requirements using the <code>and</code>, <code>or</code> and
        <code>not</code> operators.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.repository.Repository.getExpressionCombiner--" xrefstyle="hyperlink"/> - Obtain an expression combiner. This
        expression combiner is used to produce requirement expressions from
        simple requirements or other requirement expressions.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.repository.Repository.newRequirementBuilder-String-" xrefstyle="hyperlink"/> - Obtain a convenience builder for Requirement
        objects.</para>
      </listitem>
    </itemizedlist>

    <para>A Repository must not perform any namespace specific actions or
    matching. The Repository must therefore match a requirement to a
    capability with the following rules:</para>

    <itemizedlist>
      <listitem>
        <para>The namespace must be identical, and</para>
      </listitem>

      <listitem>
        <para>The requirement's filter is absent or it must match the
        capability's attributes.</para>
      </listitem>
    </itemizedlist>

    <para>Resources originating from a Repository service must
    additionally:</para>

    <itemizedlist>
      <listitem>
        <para>Implement the <xref linkend="org.osgi.service.repository.RepositoryContent" xrefstyle="hyperlink"/> interfaces, see <xref linkend="i3224355"/>.</para>
      </listitem>

      <listitem>
        <para>Provide at least one <code>osgi.content</code> Capability, see
        <xref linkend="i3224340"/>.</para>
      </listitem>
    </itemizedlist>

    <section xml:id="i3224355">
      <title>Repository Content</title>

      <para>Resources originating from a Repository must implement the <xref linkend="org.osgi.service.repository.RepositoryContent" xrefstyle="hyperlink"/> interface. The purpose of this interface is to
      allow users of the Repositories access to an Input Stream that provides
      access to the resource.</para>

      <para>The <xref linkend="org.osgi.service.repository.RepositoryContent" xrefstyle="hyperlink"/> interface provides a single method:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.service.repository.RepositoryContent.getContent--" xrefstyle="hyperlink"/> - Return an Input Stream for the resource,
          if more than one <code>osgi.content</code> capability is present the
          content associated with the first capability is returned.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="i3224340">
    <title>osgi.content Namespace</title>

    <para>A resource is a logical concept, to install a resource in an
    environment it is necessary to get access to its
    <emphasis>contents</emphasis>. A resource can be formatted in different
    ways. It is possible to deliver a bundle as a JAR file, a Pack200 file, or
    some other format. In general, the <xref linkend="org.osgi.service.repository.RepositoryContent" xrefstyle="hyperlink"/> interface provides access to the default
    format.</para>

    <para>The Repository can advertise the different formats with
    <code>osgi.content</code> capabilities. Each of those capabilities is
    identified with a unique SHA-256 checksum and has a URL for the resource
    in the specified format. The <code>size</code> and <code>mime</code>
    attributes provide information the download format, this can be used for
    selection. If more than one <code>osgi.content</code> capability is
    associated with a resource, the first capability must represent the
    default format. If the resource has a standard or widely used format
    (e.g., JAR for bundles and ESA for subsystems), and that format is
    provided as part of the repository, then that format should be the default
    format.</para>

    <para>The <code>osgi.content</code> Namespace supports the attributes
    defined in the following table and <xref linkend="org.osgi.service.repository.ContentNamespace" xrefstyle="hyperlink"/>.</para>

    <table pgwide="1">
      <title>osgi.content definition</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="2*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="4*"/>

        <colspec colnum="6" colwidth="6*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.content</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>[0-9a-fA-F]{64}</code></entry>

            <entry><para>The SHA-256 hex encoded digest for this
            resource</para></entry>
          </row>

          <row>
            <entry><code>url</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>&lt;url&gt;</code></entry>

            <entry><para>The URL to the bytes. This must be an absolute
            URL.</para></entry>
          </row>

          <row>
            <entry><code>size</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>Long</code></entry>

            <entry><code>[0-9]+</code></entry>

            <entry><para>The size of the resource in bytes as it will be read
            from the URL.</para></entry>
          </row>

          <row>
            <entry><code>mime</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>&lt;mime type&gt;</code></entry>

            <entry><para>An IANA defined MIME type for the format of this
            content.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section xml:id="i3247820">
    <title>XML Repository Format</title>

    <para>This is an optional part of the specification since the Repository
    interface does not provide access how the Repository obtains its
    information. However, the purpose of this part of the specification is to
    provide a commonly recognized format for interchanging Repository
    metadata.</para>

    <para>This section therefore describes an XML schema to represent
    Repository content. It is expected that Internet based Repositories can
    provide such an XML file to clients. A Repository XML file can be used as
    a common interchange format between multiple Repository
    implementations.</para>

    <para>The Repository XML describes a number of resources with their
    capabilities and requirements. Additionally the XML can refer to other
    Repository XML files. The XML Schema can be found at its XML namespace,
    see <xref linkend="i3247836"/>. The XML structure, which closely follows
    the Requirement-Capability model, is depicted in <xref linkend="i3227855"/>.</para>

    <figure xml:id="i3227855">
      <title>XML Structure</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.348in" contentwidth="6.253in" fileref="xml-structure.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The different elements are discussed in the following sections. All
    types are derived from the XML Schema types, see <xref linkend="i3273347"/>.</para>

    <section>
      <title>Repository Element</title>

      <para>The <code>repository</code> element is the root of the document.
      The <code>repository</code> element has the following child
      elements:</para>

      <itemizedlist>
        <listitem>
          <para><code>referral*</code> - Referrals to other repositories for a
          federated model, see <xref linkend="i3236527"/>.</para>
        </listitem>

        <listitem>
          <para><code>resource*</code> - Resource definitions, see <xref linkend="i3236496"/>.</para>
        </listitem>
      </itemizedlist>

      <para>The <code>repository</code> element has the attributes defined in
      the following table.</para>

      <table>
        <title>repository element attributes</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1.5*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>name</code></entry>

              <entry><code>NCName</code></entry>

              <entry><para>The name of this Repository. For informational
              purposes.</para></entry>
            </row>

            <row>
              <entry><code>increment</code></entry>

              <entry><code>long</code></entry>

              <entry><para>Counter which increments every time the repository
              is changed. Can be used by clients to check for changes. The
              counter is not required to increase
              monotonically.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="i3236527">
      <title>Referral Element</title>

      <para>The purpose of the <code>referral</code> element is to allow a
      Repository to refer to other Repositories, allowing for federated
      Repositories. Referrals are applied recursively. However, this is not
      always desired. It is therefore possible to limit the depth of
      referrals. If the <code>depth</code> attribute is &gt;= 1, the referred
      repository must be included but it must not follow any referrals from
      the referred repository. If the <code>depth</code> attribute is more
      than one, referrals must be included up to the given depth. Depths of
      referred repositories must also be obeyed, where referred repositories
      may reduce the effective depth but not increase it. For example if a top
      repository specifies a depth of 5 and a level 3 repository has a depth
      of 1 then the repository on level 5 must not be used. If not specified
      then there is no limit to the depth. Referrals that have cycles must be
      ignored, a resource of a given Repository must only occur once in a
      Repository.</para>

      <para>The <code>referral</code> element has the attributes defined in
      the following table.</para>

      <table>
        <title>referral element attributes</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1.5*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>depth</code></entry>

              <entry><code>int</code></entry>

              <entry><para>The max depth of referrals</para></entry>
            </row>

            <row>
              <entry><code>url</code></entry>

              <entry><code>anyURI</code></entry>

              <entry><para>A URL to where the referred repository XML can be
              found. The URL can be absolute or relative to the URI of the
              current XML resource.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="i3236496">
      <title>Resource Element</title>

      <para>The <code>resource</code> element defines a Resource. The
      <code>resource</code> element has the following child elements:</para>

      <itemizedlist>
        <listitem>
          <para><code>requirement*</code> - The requirements of this resource,
          see <xref linkend="i3236553"/>.</para>
        </listitem>

        <listitem>
          <para><code>capability</code>* - The capabilities of this resource,
          see <xref linkend="i3236575"/>.</para>
        </listitem>
      </itemizedlist>

      <para>The Resource element has no attributes.</para>
    </section>

    <section xml:id="i3236575">
      <title>Capability Element</title>

      <para>The <code>capability</code> element maps to a capability, it holds
      the attributes and directives. The <code>capability</code> element has
      the following child elements:</para>

      <itemizedlist>
        <listitem>
          <para><code>directive*</code> - The directives for the capability,
          see <xref linkend="i3236593"/>.</para>
        </listitem>

        <listitem>
          <para><code>attribute*</code> - The attributes for the capability,
          see <xref linkend="i3236601"/>.</para>
        </listitem>
      </itemizedlist>

      <para>The <code>capability</code> element has the attributes defined in
      the following table.</para>

      <table>
        <title>capability element attributes</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1.5*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>namespace</code></entry>

              <entry><code>token</code></entry>

              <entry><para>The namespace of this capability</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="i3236553">
      <title>Requirement Element</title>

      <para>The <code>requirement</code> element maps to a requirement, it
      holds the attributes and directives. The <code>requirement</code>
      element has the following child elements:</para>

      <itemizedlist>
        <listitem>
          <para><code>directive*</code> - The directives for the requirement,
          see <xref linkend="i3236593"/>.</para>
        </listitem>

        <listitem>
          <para><code>attribute*</code> - The attributes for the requirement,
          see <xref linkend="i3236601"/>.</para>
        </listitem>
      </itemizedlist>

      <para>The <code>requirement</code> element has the attributes defined in
      the following table.</para>

      <table>
        <title>requirement element attributes</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1.5*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>namespace</code></entry>

              <entry><code>token</code></entry>

              <entry><para>The namespace of this requirement</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="i3236601">
      <title>Attribute Element</title>

      <para>An <code>attribute</code> element describes an attribute of a
      capability or requirement. Attributes are used to convey information
      about the Capability-Requirement. Attributes for the capability are used
      for matching the requirement's filter. The meaning of attributes is
      described with the documentation of the namespace in which they
      reside.</para>

      <para>Attributes are optionally typed according to the <xref linkend="i3273289"/> specification. The default type is
      <code>String</code>, the value of the <code>value</code> attribute.
      However, if a <code>type</code> attribute is specified and it is not
      <code>String</code> then the value attribute must be converted according
      to the type attribute specifier. The syntax of the type attribute is as
      follows:</para>

      <programlisting>type    ::= list | scalar
list    ::= 'List&lt;' scalar '&gt;'    // no spaces between terminals
scalar  ::= 'String' | 'Version' | 'Long' | 'Double'</programlisting>

      <para>A list conversion requires the value to be broken in tokens
      separated by comma (<code>',' \u002C</code>). Whitespace around the list
      and around commas must be trimmed for non-String types. Each token must
      then be converted to the given type according to the <code>scalar</code>
      type specifier. The exact rules for the comma separated lists are
      defined in <xref linkend="i3273289"/>, see <emphasis>Bundle Capability
      Attributes</emphasis>.</para>

      <para>The conversion of value <code>s</code>, when <code>scalar</code>,
      must take place with the following methods:</para>

      <itemizedlist>
        <listitem>
          <para><code>String</code> - No conversion, use <code>s</code></para>
        </listitem>

        <listitem>
          <para><code>Version</code> -
          <code>Version.parseVersion(s)</code></para>
        </listitem>

        <listitem>
          <para><code>Long</code> - After trimming whitespace,
          <code>Long.parseLong(s)</code></para>
        </listitem>

        <listitem>
          <para><code>Double</code> - After trimming whitespace,
          <code>Double.parseDouble(s)</code></para>
        </listitem>
      </itemizedlist>

      <para>The <code>attribute</code> element has the attributes defined in
      the following table.</para>

      <table>
        <title>attribute element attributes</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1.5*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>name</code></entry>

              <entry><code>token</code></entry>

              <entry><para>The name of the attribute</para></entry>
            </row>

            <row>
              <entry><code>value</code></entry>

              <entry><code>string</code></entry>

              <entry><para>The value of the attribute.</para></entry>
            </row>

            <row>
              <entry><code>type</code></entry>

              <entry><para/></entry>

              <entry><para>The type of the attribute, the syntax is outlined
              in the previous paragraphs.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="i3236593">
      <title>Directive Element</title>

      <para>A <code>directive</code> element describes a directive of a
      capability or a requirement. Directives are used to convey information
      about the Capability-Requirement. The meaning of directives is described
      with the documentation of the namespace in which they reside.</para>

      <para>The <code>directive</code> element has the attributes defined in
      the following table.</para>

      <table>
        <title>directive element attributes</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1.5*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="4*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>name</code></entry>

              <entry><code>token</code></entry>

              <entry><para>The name of the attribute</para></entry>
            </row>

            <row>
              <entry><code>value</code></entry>

              <entry><code>string</code></entry>

              <entry><para>The value of the attribute.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Sample XML File</title>

      <para>The following example shows a very small XML file. The file
      contains one resource.</para>

      <programlisting role="pgwide">&lt;repository name='OSGiRepository'
            increment='13582741'
            xmlns='http://www.osgi.org/xmlns/repository/v1.0.0'&gt;
  &lt;resource&gt;

    &lt;requirement namespace='osgi.wiring.package'&gt;
      &lt;directive name='filter' value=
                           '(&amp;amp;(osgi.wiring.package=org.apache.commons.pool)(version&amp;gt;=1.5.6))'/&gt;
    &lt;/requirement&gt;

    &lt;requirement namespace='osgi.identity'&gt;
      &lt;directive name='effective' value='meta'/&gt;
      &lt;directive name='resolution' value='optional'/&gt;
      &lt;directive name='filter' value=
              '(&amp;(version=1.5.6)(osgi.identity=org.acme.pool-src))'
        &lt;directive name='classifier' value='sources'/&gt;
    &lt;/requirement&gt;

    &lt;capability namespace='osgi.identity'&gt;
      &lt;attribute name='osgi.identity' value='org.acme.pool'/&gt;
      &lt;attribute name='version'type='Version' value='1.5.6'/&gt;
      &lt;attribute name='type' value='osgi.bundle'/&gt;
    &lt;/capability&gt;

    &lt;capability namespace='osgi.content'&gt;
      &lt;attribute name='osgi.content' value='e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
      &lt;attribute name='url' value='http://www.acme.com/repository/org/acme/pool/org.acme.pool-1.5.6.jar'/&gt;
      &lt;attribute name='size' type='Long' value='4405'/&gt;
      &lt;attribute name='mime' value='application/vnd.osgi.bundle'/&gt;
    &lt;/capability&gt;

    &lt;capability namespace='osgi.wiring.bundle'&gt;
      &lt;attribute name='osgi.wiring.bundle' value='org.acme.pool'/&gt;
      &lt;attribute name='bundle-version' type='Version' value='1.5.6'/&gt;
    &lt;/capability&gt;

    &lt;capability namespace='osgi.wiring.package'&gt;
      &lt;attribute name='osgi.wiring.package' value='org.acme.pool'/&gt;
      &lt;attribute name='version' type='Version' value='1.1.2'/&gt;
      &lt;attribute name='bundle-version' type='Version' value='1.5.6'/&gt;
      &lt;attribute name='bundle-symbolic-name' value='org.acme.pool'/&gt;
      &lt;directive name='uses' value='org.acme.pool,org.acme.util'/&gt;
    &lt;/capability&gt;

  &lt;/resource&gt;
&lt;/repository&gt;</programlisting>
    </section>
  </section>

  <section xml:id="i3247836">
    <title>XML Repository Schema</title>

    <para>The namespace of this schema is:</para>

    <programlisting>http://www.osgi.org/xmlns/repository/v1.0.0</programlisting>

    <para>The schema for this namespace can be found at the location implied
    in its name. The recommended prefix for this namespace is
    <code>repo</code>.</para>

    <programlisting role="pgwide">&lt;schema xmlns="http://www.w3.org/2001/XMLSchema" 
    xmlns:repo="http://www.osgi.org/xmlns/repository/v1.0.0"
    targetNamespace="http://www.osgi.org/xmlns/repository/v1.0.0"
    elementFormDefault="unqualified" 
    attributeFormDefault="unqualified"
    version="1.0.1"&gt;
    
    &lt;element name="repository" type="repo:Trepository" /&gt;
    &lt;complexType name="Trepository"&gt;
        &lt;sequence&gt;
            &lt;choice minOccurs="0" maxOccurs="unbounded"&gt;
                &lt;element name="resource" type="repo:Tresource" /&gt;
                &lt;element name="referral" type="repo:Treferral" /&gt;
            &lt;/choice&gt;
            &lt;!-- It is non-deterministic, per W3C XML Schema 1.0: 
            http://www.w3.org/TR/xmlschema-1/#cos-nonambig
            to use name space="##any" below. --&gt;
            &lt;any namespace="##other" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;attribute name="name" type="string"&gt;
            &lt;annotation&gt;
                &lt;documentation xml:lang="en"&gt;
                    The name of the repository. The name may contain
                    spaces and punctuation.
                &lt;/documentation&gt;
            &lt;/annotation&gt;
        &lt;/attribute&gt;
        &lt;attribute name="increment" type="long"&gt;
            &lt;annotation&gt;
                &lt;documentation xml:lang="en"&gt;
                    An indication of when the repository was last changed. Client's can
                    check if a
                    repository has been updated by checking this increment value.
                &lt;/documentation&gt;
            &lt;/annotation&gt;
        &lt;/attribute&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;

    &lt;complexType name="Tresource"&gt;
        &lt;annotation&gt;
            &lt;documentation xml:lang="en"&gt;
                Describes a general resource with
                requirements and capabilities.
            &lt;/documentation&gt;
        &lt;/annotation&gt;
        &lt;sequence&gt;
            &lt;element name="requirement" type="repo:Trequirement" minOccurs="0" maxOccurs="unbounded"/&gt;
            &lt;element name="capability" type="repo:Tcapability" minOccurs="1" maxOccurs="unbounded"/&gt;
            &lt;!-- It is non-deterministic, per W3C XML Schema 1.0: 
            http://www.w3.org/TR/xmlschema-1/#cos-nonambig
            to use name space="##any" below. --&gt;
            &lt;any namespace="##other" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;

    &lt;complexType name="Treferral"&gt;
        &lt;annotation&gt;
            &lt;documentation xml:lang="en"&gt;
                A referral points to another repository XML file. The
                purpose of this element is to create a federation of
                repositories that can be accessed as a single
                repository.
            &lt;/documentation&gt;
        &lt;/annotation&gt;
        &lt;attribute name="depth" type="int" use="optional"&gt;
            &lt;annotation&gt;
                &lt;documentation xml:lang="en"&gt;
                    The depth of referrals this repository acknowledges.
                &lt;/documentation&gt;
            &lt;/annotation&gt;
        &lt;/attribute&gt;
        &lt;attribute name="url" type="anyURI" use="required"&gt;
            &lt;annotation&gt;
                &lt;documentation xml:lang="en"&gt;
                    The URL to the referred repository. The URL can be
                    absolute or relative from the given repository’s
                    URL.
                &lt;/documentation&gt;
            &lt;/annotation&gt;
        &lt;/attribute&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;

    &lt;complexType name="Tcapability"&gt;
        &lt;annotation&gt;
            &lt;documentation xml:lang="en"&gt;
                A named set of type attributes and directives. A capability can be
                used to resolve a requirement if the resource is included.
            &lt;/documentation&gt;
        &lt;/annotation&gt;
        &lt;sequence&gt;
            &lt;choice minOccurs="0" maxOccurs="unbounded"&gt;
                &lt;element name="directive" type="repo:Tdirective" /&gt;
                &lt;element name="attribute" type="repo:Tattribute" /&gt;
            &lt;/choice&gt;
            &lt;!-- It is non-deterministic, per W3C XML Schema 1.0: 
            http://www.w3.org/TR/xmlschema-1/#cos-nonambig
            to use name space="##any" below. --&gt;
            &lt;any namespace="##other" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;attribute name="namespace" type="string"&gt;
            &lt;annotation&gt;
                &lt;documentation xml:lang="en"&gt;
                    Name space of the capability. Only requirements with the
                    same name space must be able to match this capability.
                &lt;/documentation&gt;
            &lt;/annotation&gt;
        &lt;/attribute&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;

    &lt;complexType name="Trequirement"&gt;
        &lt;annotation&gt;
            &lt;documentation xml:lang="en"&gt;
                A filter on a named set of capability attributes.
            &lt;/documentation&gt;
        &lt;/annotation&gt;
        &lt;sequence&gt;
            &lt;choice minOccurs="0" maxOccurs="unbounded"&gt;
                &lt;element name="directive" type="repo:Tdirective" /&gt;
                &lt;element name="attribute" type="repo:Tattribute" /&gt;
            &lt;/choice&gt;
            &lt;!-- It is non-deterministic, per W3C XML Schema 1.0: 
            http://www.w3.org/TR/xmlschema-1/#cos-nonambig
            to use name space="##any" below. --&gt;
            &lt;any namespace="##other" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;attribute name="namespace" type="string"&gt;
            &lt;annotation&gt;
                &lt;documentation xml:lang="en"&gt;
                    Name space of the requirement. Only capabilities within the
                    same name space must be able to match this requirement.
                &lt;/documentation&gt;
            &lt;/annotation&gt;
        &lt;/attribute&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;

    &lt;complexType name="Tattribute"&gt;
        &lt;annotation&gt;
            &lt;documentation xml:lang="en"&gt;
                A named value with an optional type that decorates
                a requirement or capability.
            &lt;/documentation&gt;
        &lt;/annotation&gt;
        &lt;sequence&gt;
            &lt;any namespace="##any" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;attribute name="name" type="string"&gt;
            &lt;annotation&gt;
                &lt;documentation xml:lang="en"&gt;
                    The name of the attribute.
                &lt;/documentation&gt;
            &lt;/annotation&gt;
        &lt;/attribute&gt;
        &lt;attribute name="value" type="string"&gt;
            &lt;annotation&gt;
                &lt;documentation xml:lang="en"&gt;
                    The value of the attribute.
                &lt;/documentation&gt;
            &lt;/annotation&gt;
        &lt;/attribute&gt;
        &lt;attribute name="type" type="repo:TpropertyType" default="String"&gt;
            &lt;annotation&gt;
                &lt;documentation xml:lang="en"&gt;
                    The type of the attribute.
                &lt;/documentation&gt;
            &lt;/annotation&gt;
        &lt;/attribute&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;

    &lt;complexType name="Tdirective"&gt;
        &lt;annotation&gt;
            &lt;documentation xml:lang="en"&gt;
                A named value of type string that instructs a resolver
                how to process a requirement or capability.
            &lt;/documentation&gt;
        &lt;/annotation&gt;
        &lt;sequence&gt;
            &lt;any namespace="##any" processContents="lax" minOccurs="0"
                maxOccurs="unbounded" /&gt;
        &lt;/sequence&gt;
        &lt;attribute name="name" type="string"&gt;
            &lt;annotation&gt;
                &lt;documentation xml:lang="en"&gt;
                    The name of the directive.
                &lt;/documentation&gt;
            &lt;/annotation&gt;
        &lt;/attribute&gt;
        &lt;attribute name="value" type="string"&gt;
            &lt;annotation&gt;
                &lt;documentation xml:lang="en"&gt;
                    The value of the directive.
                &lt;/documentation&gt;
            &lt;/annotation&gt;
        &lt;/attribute&gt;
        &lt;anyAttribute processContents="lax" /&gt;
    &lt;/complexType&gt;

    &lt;simpleType name="TpropertyType"&gt;
        &lt;restriction base="string"&gt;
            &lt;enumeration value="String" /&gt;
            &lt;enumeration value="Version" /&gt;
            &lt;enumeration value="Long" /&gt;
            &lt;enumeration value="Double" /&gt;
            &lt;enumeration value="List&amp;lt;String&amp;gt;" /&gt;
            &lt;enumeration value="List&amp;lt;Version&amp;gt;" /&gt;
            &lt;enumeration value="List&amp;lt;Long&amp;gt;" /&gt;
            &lt;enumeration value="List&amp;lt;Double&amp;gt;" /&gt;
        &lt;/restriction&gt;
    &lt;/simpleType&gt;
    &lt;attribute name="must-understand" type="boolean" default="false"&gt;
        &lt;annotation&gt;
            &lt;documentation xml:lang="en"&gt;
                This attribute should be used by extensions to documents to require that
                the document consumer understand the extension. This attribute must be
                qualified when used.
            &lt;/documentation&gt;
        &lt;/annotation&gt;
    &lt;/attribute&gt;
&lt;/schema&gt;
</programlisting>
  </section>

  <section>
    <title>Capabilities</title>

    <para>Implementations of the Repository Service specification must provide
    the capabilities listed in this section.</para>

    <section>
      <title>osgi.implementation Capability</title>

      <para>The Repository Service implementation bundle must provide the
      <link linkend="service.namespaces-osgi.implementation.namespace"><code>osgi.implementation</code></link>
      capability with name <code>osgi.repository</code>. This capability can
      be used by provisioning tools and during resolution to ensure that a
      Repository Service implementation is present. The capability must also
      declare a uses constraint for the
      <code>org.osgi.service.repository</code> package and provide the version
      of this specification:</para>

      <programlisting>Provide-Capability: osgi.implementation;
       osgi.implementation="osgi.repository";
       uses:="org.osgi.service.repository";
       version:Version="1.1"</programlisting>

      <para>This capability must follow the rules defined for the <xref linkend="service.namespaces-osgi.implementation.namespace"/>.</para>
    </section>

    <section>
      <title>osgi.service Capability</title>

      <para>The Repository Service implementation must provide a capability in
      the <link linkend="service.namespaces-osgi.service.namespace"><code>osgi.service</code></link>
      namespace representing the <xref linkend="org.osgi.service.repository.Repository" xrefstyle="hyperlink"/>
      service. This capability must also declare a uses constraint for the
      <code>org.osgi.service.repository</code> package. For example:</para>

      <programlisting>Provide-Capability: osgi.service;
       objectClass:List&lt;String&gt;="org.osgi.service.repository.Repository";
       uses:="org.osgi.service.repository"</programlisting>

      <para>This capability must follow the rules defined for the <xref linkend="service.namespaces-osgi.service.namespace"/>.</para>
    </section>
  </section>

  <section>
    <title>Security</title>

    <section>
      <title>External Access</title>

      <para>Repositories in general will get their metadata and artifacts from
      an external source, which makes them an attack vector for a malevolent
      Bundle that needs unauthorized external access. Since a Bundle using a
      Repository has no knowledge of what sources the Repository will access
      it will be necessary for the Repository to implement the external access
      in a <code>doPrivileged</code> block. Implementations must ensure that
      callers cannot influence/modify the metadata in such a way that the
      <xref linkend="org.osgi.service.repository.RepositoryContent.getContent--" xrefstyle="hyperlink"/> method could provide access to arbitrary
      Internet resources. This could for example happen if:</para>

      <itemizedlist>
        <listitem>
          <para>The implementation relies on the <code>osgi.content</code>
          namespace to hold the URL</para>
        </listitem>

        <listitem>
          <para>The attributes Map from the <code>osgi.content</code>
          Capability is modifiable</para>
        </listitem>
      </itemizedlist>

      <para>If the malevolent Bundle could change the osgi.content attribute
      it could change it to arbitrary URLs. This example should make it clear
      that Repository implementations must be very careful.</para>
    </section>

    <section>
      <title>Permissions</title>

      <para>Implementations of this specification will need the following
      minimum permissions.</para>

      <programlisting>ServicePermission[...Repository, REGISTER ]
SocketPermission[ ... carefully restrict external access...]</programlisting>

      <para>Users of this specification will need the following minimum
      permissions.</para>

      <programlisting>ServicePermission[...Repository, GET ]</programlisting>
    </section>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.repository" xml:id="org.osgi.service.repository" xml:base="../../generated/javadoc/docbook/org.osgi.service.repository.xml">
   <title>org.osgi.service.repository</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.repository-version">Version 1.1</releaseinfo>
      <edition xml:id="org.osgi.service.repository-version.number">1.1</edition>
   </info>
   <para>
Repository Service Package Version 1.1.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.repository; version="[1.1,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.repository; version="[1.1,1.2)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.repository.AndExpression">
                  <code>AndExpression</code>
               </link> - 
A <link linkend="org.osgi.service.repository.RequirementExpression">RequirementExpression</link> representing the <code>and</code> of a number of
 requirement expressions.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.repository.ContentNamespace">
                  <code>ContentNamespace</code>
               </link> - 
Content Capability and Requirement Namespace.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.repository.ExpressionCombiner">
                  <code>ExpressionCombiner</code>
               </link> - 
An <code>ExpressionCombiner</code> can be used to combine requirement expressions
 into a single complex requirement expression using the <code>and</code>,
 <code>or</code> and <code>not</code> operators.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.repository.IdentityExpression">
                  <code>IdentityExpression</code>
               </link> - 
A <link linkend="org.osgi.service.repository.RequirementExpression">RequirementExpression</link> representing a requirement.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.repository.NotExpression">
                  <code>NotExpression</code>
               </link> - 
A <link linkend="org.osgi.service.repository.RequirementExpression">RequirementExpression</link> representing the <code>not</code> (negation) of a
 requirement expression.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.repository.OrExpression">
                  <code>OrExpression</code>
               </link> - 
A <link linkend="org.osgi.service.repository.RequirementExpression">RequirementExpression</link> representing the <code>or</code> of a number of
 requirement expressions.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.repository.Repository">
                  <code>Repository</code>
               </link> - 
A repository service that contains <link linkend="org.osgi.resource.Resource">resources</link>.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.repository.RepositoryContent">
                  <code>RepositoryContent</code>
               </link> - 
An accessor for the content of a resource.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.repository.RequirementBuilder">
                  <code>RequirementBuilder</code>
               </link> - 
A builder for requirements.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.repository.RequirementExpression">
                  <code>RequirementExpression</code>
               </link> - 
The super interface for all requirement expressions.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="AndExpression" xml:id="org.osgi.service.repository.AndExpression">
      <title>public interface AndExpression<?line-break?> extends RequirementExpression</title>
      <para>
A <link linkend="org.osgi.service.repository.RequirementExpression">RequirementExpression</link> representing the <code>and</code> of a number of
 requirement expressions.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="getRequirementExpressions()" xml:id="org.osgi.service.repository.AndExpression.getRequirementExpressions--">
         <title>public List&lt;RequirementExpression&gt; getRequirementExpressions()</title>
         <para role="description">
Return the requirement expressions that are combined by this
 <code>AndExpression</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable list of requirement expressions that are combined
         by this <code>AndExpression</code>. The list contains the requirement
         expressions in the order they were specified when this
         requirement expression was created.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ContentNamespace" xml:id="org.osgi.service.repository.ContentNamespace">
      <title>public final class ContentNamespace<?line-break?> extends Namespace</title>
      <para>
Content Capability and Requirement Namespace.
 
 </para>
      <para>
 This class defines the names for the attributes and directives for this
 namespace. All unspecified capability attributes are of type <code>String</code>
 and are used as arbitrary matching attributes for the capability. The values
 associated with the specified directive and attribute keys are of type
 <code>String</code>, unless otherwise indicated.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="CAPABILITY_MIME_ATTRIBUTE" xml:id="org.osgi.service.repository.ContentNamespace.CAPABILITY_MIME_ATTRIBUTE">
         <title>public static final String CAPABILITY_MIME_ATTRIBUTE = "mime"</title>
         <para>
The capability attribute that defines the IANA MIME Type/Format for this
 content.
   </para>
      </section>
      <section role="field" xreflabel="CAPABILITY_SIZE_ATTRIBUTE" xml:id="org.osgi.service.repository.ContentNamespace.CAPABILITY_SIZE_ATTRIBUTE">
         <title>public static final String CAPABILITY_SIZE_ATTRIBUTE = "size"</title>
         <para>
The capability attribute that contains the size, in bytes, of the
 content. The value of this attribute must be of type <code>Long</code>.
   </para>
      </section>
      <section role="field" xreflabel="CAPABILITY_URL_ATTRIBUTE" xml:id="org.osgi.service.repository.ContentNamespace.CAPABILITY_URL_ATTRIBUTE">
         <title>public static final String CAPABILITY_URL_ATTRIBUTE = "url"</title>
         <para>
The capability attribute that contains the URL to the content.
   </para>
      </section>
      <section role="field" xreflabel="CONTENT_NAMESPACE" xml:id="org.osgi.service.repository.ContentNamespace.CONTENT_NAMESPACE">
         <title>public static final String CONTENT_NAMESPACE = "osgi.content"</title>
         <para>
Namespace name for content capabilities and requirements.
 
 </para>
         <para>
 Also, the capability attribute used to specify the unique identifier of
 the content. This identifier is the <code>SHA-256</code> hash of the content.</para>
      </section>
   </section>
   <section role="class" xreflabel="ExpressionCombiner" xml:id="org.osgi.service.repository.ExpressionCombiner">
      <title>public interface ExpressionCombiner</title>
      <para>
An <code>ExpressionCombiner</code> can be used to combine requirement expressions
 into a single complex requirement expression using the <code>and</code>,
 <code>or</code> and <code>not</code> operators.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="and(RequirementExpression,RequirementExpression)" xml:id="org.osgi.service.repository.ExpressionCombiner.and-RequirementExpression-RequirementExpression-">
         <title>public AndExpression and(RequirementExpression expr1,RequirementExpression expr2)</title>
         <formalpara role="parameter">
            <title>expr1</title>
            <para>The first requirement expression to combine into the
        returned requirement expression.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>expr2</title>
            <para>The second requirement expression to combine into the
        returned requirement expression</para>
         </formalpara>
         <para role="description">
Combine two <link linkend="org.osgi.service.repository.RequirementExpression">RequirementExpression</link>s into a requirement expression
 using the <code>and</code> operator.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An <link linkend="org.osgi.service.repository.AndExpression">AndExpression</link> representing an <code>and</code> of the
         specified requirement expressions.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="and(RequirementExpression,RequirementExpression,RequirementExpression...)" xml:id="org.osgi.service.repository.ExpressionCombiner.and-RequirementExpression-RequirementExpression-RequirementExpression...-">
         <title>public AndExpression and(RequirementExpression expr1,RequirementExpression expr2,RequirementExpression ... moreExprs)</title>
         <formalpara role="parameter">
            <title>expr1</title>
            <para>The first requirement expression to combine into the
        returned requirement expression.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>expr2</title>
            <para>The second requirement expression to combine into the
        returned requirement expression</para>
         </formalpara>
         <formalpara role="parameter">
            <title>moreExprs</title>
            <para>Optional, additional requirement expressions to combine
        into the returned requirement expression.</para>
         </formalpara>
         <para role="description">
Combine multiple <link linkend="org.osgi.service.repository.RequirementExpression">RequirementExpression</link>s into a requirement
 expression using the <code>and</code> operator.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An <link linkend="org.osgi.service.repository.AndExpression">AndExpression</link> representing an <code>and</code> of the
         specified requirement expressions.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="identity(Requirement)" xml:id="org.osgi.service.repository.ExpressionCombiner.identity-Requirement-">
         <title>public IdentityExpression identity(Requirement req)</title>
         <formalpara role="parameter">
            <title>req</title>
            <para>The requirement to wrap in a requirement expression.</para>
         </formalpara>
         <para role="description">
Wrap a <link linkend="org.osgi.resource.Requirement">Requirement</link> in an <link linkend="org.osgi.service.repository.IdentityExpression">IdentityExpression</link>. This can be
 useful when working with a combination of <code>Requirement</code>s and
 <code>RequirementExpresion</code>s.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An <link linkend="org.osgi.service.repository.IdentityExpression">IdentityExpression</link> representing the specified
         requirement.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="not(RequirementExpression)" xml:id="org.osgi.service.repository.ExpressionCombiner.not-RequirementExpression-">
         <title>public NotExpression not(RequirementExpression expr)</title>
         <formalpara role="parameter">
            <title>expr</title>
            <para>The requirement expression to negate.</para>
         </formalpara>
         <para role="description">
Return the negation of a <link linkend="org.osgi.service.repository.RequirementExpression">RequirementExpression</link>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <link linkend="org.osgi.service.repository.NotExpression">NotExpression</link> representing the <code>not</code> of the
         specified requirement expression.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="or(RequirementExpression,RequirementExpression)" xml:id="org.osgi.service.repository.ExpressionCombiner.or-RequirementExpression-RequirementExpression-">
         <title>public OrExpression or(RequirementExpression expr1,RequirementExpression expr2)</title>
         <formalpara role="parameter">
            <title>expr1</title>
            <para>The first requirement expression to combine into the
        returned requirement expression.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>expr2</title>
            <para>The second requirement expression to combine into the
        returned requirement expression</para>
         </formalpara>
         <para role="description">
Combine two <link linkend="org.osgi.service.repository.RequirementExpression">RequirementExpression</link>s into a requirement expression
 using the <code>or</code> operator.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An <link linkend="org.osgi.service.repository.OrExpression">OrExpression</link> representing an <code>or</code> of the
         specified requirement expressions.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="or(RequirementExpression,RequirementExpression,RequirementExpression...)" xml:id="org.osgi.service.repository.ExpressionCombiner.or-RequirementExpression-RequirementExpression-RequirementExpression...-">
         <title>public OrExpression or(RequirementExpression expr1,RequirementExpression expr2,RequirementExpression ... moreExprs)</title>
         <formalpara role="parameter">
            <title>expr1</title>
            <para>The first requirement expression to combine into the
        returned requirement expression.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>expr2</title>
            <para>The second requirement expression to combine into the
        returned requirement expression</para>
         </formalpara>
         <formalpara role="parameter">
            <title>moreExprs</title>
            <para>Optional, additional requirement expressions to combine
        into the returned requirement expression.</para>
         </formalpara>
         <para role="description">
Combine multiple <link linkend="org.osgi.service.repository.RequirementExpression">RequirementExpression</link>s into a requirement
 expression using the <code>or</code> operator.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An <link linkend="org.osgi.service.repository.OrExpression">OrExpression</link> representing an <code>or</code> of the
         specified requirement expressions.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="IdentityExpression" xml:id="org.osgi.service.repository.IdentityExpression">
      <title>public interface IdentityExpression<?line-break?> extends RequirementExpression</title>
      <para>
A <link linkend="org.osgi.service.repository.RequirementExpression">RequirementExpression</link> representing a requirement.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="getRequirement()" xml:id="org.osgi.service.repository.IdentityExpression.getRequirement--">
         <title>public Requirement getRequirement()</title>
         <para role="description">
Return the <link linkend="org.osgi.resource.Requirement">Requirement</link> contained in this
 <code>IdentityExpression</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The requirement contained in this <code>IdentityExpression</code>.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="NotExpression" xml:id="org.osgi.service.repository.NotExpression">
      <title>public interface NotExpression<?line-break?> extends RequirementExpression</title>
      <para>
A <link linkend="org.osgi.service.repository.RequirementExpression">RequirementExpression</link> representing the <code>not</code> (negation) of a
 requirement expression.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="getRequirementExpression()" xml:id="org.osgi.service.repository.NotExpression.getRequirementExpression--">
         <title>public RequirementExpression getRequirementExpression()</title>
         <para role="description">
Return the requirement expression that is negated by this
 <code>NotExpression</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The requirement expression that is negated by this
         <code>NotExpression</code>.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="OrExpression" xml:id="org.osgi.service.repository.OrExpression">
      <title>public interface OrExpression<?line-break?> extends RequirementExpression</title>
      <para>
A <link linkend="org.osgi.service.repository.RequirementExpression">RequirementExpression</link> representing the <code>or</code> of a number of
 requirement expressions.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="getRequirementExpressions()" xml:id="org.osgi.service.repository.OrExpression.getRequirementExpressions--">
         <title>public List&lt;RequirementExpression&gt; getRequirementExpressions()</title>
         <para role="description">
Return the requirement expressions that are combined by this
 <code>OrExpression</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable list of requirement expressions that are combined
         by this <code>OrExpression</code>. The list contains the requirement
         expressions in the order they were specified when this
         requirement expression was created.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Repository" xml:id="org.osgi.service.repository.Repository">
      <title>public interface Repository</title>
      <para>
A repository service that contains <link linkend="org.osgi.resource.Resource">resources</link>.
 
 </para>
      <para>
 Repositories may be registered as services and may be used as by a resolve
 context during resolver operations.
 
 </para>
      <para>
 Repositories registered as services may be filtered using standard service
 properties.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="field" xreflabel="URL" xml:id="org.osgi.service.repository.Repository.URL">
         <title>public static final String URL = "repository.url"</title>
         <para>
Service property to provide URLs related to this repository.
 
 </para>
         <para>
 The value of this property must be of type <code>String</code>,
 <code>String[]</code>, or <code>Collection&lt;String&gt;</code>.</para>
      </section>
      <section role="method" xreflabel="findProviders(Collection)" xml:id="org.osgi.service.repository.Repository.findProviders-Collection-">
         <title>public Map&lt;Requirement,Collection&lt;Capability&gt;&gt; findProviders(Collection&lt;? extends Requirement&gt; requirements)</title>
         <formalpara role="parameter">
            <title>requirements</title>
            <para>The requirements for which matching capabilities
        should be returned. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Find the capabilities that match the specified requirements.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A map of matching capabilities for the specified requirements.
         Each specified requirement must appear as a key in the map. If
         there are no matching capabilities for a specified requirement,
         then the value in the map for the specified requirement must be
         an empty collection. The returned map is the property of the
         caller and can be modified by the caller. The returned map may be
         lazily populated, so calling <code>size()</code> may result in a long
         running operation.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="findProviders(RequirementExpression)" xml:id="org.osgi.service.repository.Repository.findProviders-RequirementExpression-">
         <title>public Promise&lt;Collection&lt;Resource&gt;&gt; findProviders(RequirementExpression expression)</title>
         <formalpara role="parameter">
            <title>expression</title>
            <para>The <code>RequirementExpression</code> for which matching
        capabilities should be returned. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Find the resources that match the specified requirement expression.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A promise to a collection of matching <code>Resource</code>s. If there
         are no matching resources, an empty collection is returned. The
         returned collection is the property of the caller and can be
         modified by the caller. The returned collection may be lazily
         populated, so calling <code>size()</code> may result in a long running
         operation.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getExpressionCombiner()" xml:id="org.osgi.service.repository.Repository.getExpressionCombiner--">
         <title>public ExpressionCombiner getExpressionCombiner()</title>
         <para role="description">
Return an expression combiner. An expression combiner can be used to
 combine multiple requirement expressions into more complex requirement
 expressions using <link linkend="org.osgi.service.repository.AndExpression">and</link>, <link linkend="org.osgi.service.repository.OrExpression">or</link> and
 <link linkend="org.osgi.service.repository.NotExpression">not</link> operators.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An <code>ExpressionCombiner</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="newRequirementBuilder(String)" xml:id="org.osgi.service.repository.Repository.newRequirementBuilder-String-">
         <title>public RequirementBuilder newRequirementBuilder(String namespace)</title>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace for the requirement to be created.</para>
         </formalpara>
         <para role="description">
Return a new <code>RequirementBuilder</code> which provides a convenient way
 to create a requirement.
 
 </para>
         <para>
 For example:
 
 </para>
         <programlisting> 
 Requirement myReq = repository.newRequirementBuilder("org.foo.ns1").
   addDirective("filter", "(org.foo.ns1=val1)").
   addDirective("cardinality", "multiple").build();</programlisting>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new requirement builder for a requirement in the specified
         namespace.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="RepositoryContent" xml:id="org.osgi.service.repository.RepositoryContent">
      <title>public interface RepositoryContent</title>
      <para>
An accessor for the content of a resource.
 
 All <link linkend="org.osgi.resource.Resource">Resource</link> objects which represent resources in a
 <link linkend="org.osgi.service.repository.Repository">Repository</link> must implement this interface. A user of the resource can
 then cast the <link linkend="org.osgi.resource.Resource">Resource</link> object to this type and then obtain an
 <code>InputStream</code> to the content of the resource.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="getContent()" xml:id="org.osgi.service.repository.RepositoryContent.getContent--">
         <title>public InputStream getContent()</title>
         <para role="description">
Returns a new input stream to the content of this resource. The content
 is represented on the resource through the <code>osgi.content</code>
 capability. If more than one such capability is associated with the
 resource, the first such capability is returned.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new input stream for associated content.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="RequirementBuilder" xml:id="org.osgi.service.repository.RequirementBuilder">
      <title>public interface RequirementBuilder</title>
      <para>
A builder for requirements.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="addAttribute(String,Object)" xml:id="org.osgi.service.repository.RequirementBuilder.addAttribute-String-Object-">
         <title>public RequirementBuilder addAttribute(String name,Object value)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The attribute name.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>value</title>
            <para>The attribute value.</para>
         </formalpara>
         <para role="description">
Add an attribute to the set of attributes.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>This requirement builder.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="addDirective(String,String)" xml:id="org.osgi.service.repository.RequirementBuilder.addDirective-String-String-">
         <title>public RequirementBuilder addDirective(String name,String value)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The directive name.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>value</title>
            <para>The directive value.</para>
         </formalpara>
         <para role="description">
Add a directive to the set of directives.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>This requirement builder.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="build()" xml:id="org.osgi.service.repository.RequirementBuilder.build--">
         <title>public Requirement build()</title>
         <para role="description">
Create a requirement based upon the values set in this requirement
 builder.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A requirement created based upon the values set in this
         requirement builder.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="buildExpression()" xml:id="org.osgi.service.repository.RequirementBuilder.buildExpression--">
         <title>public IdentityExpression buildExpression()</title>
         <para role="description">
Create a requirement expression for a requirement based upon the values
 set in this requirement builder.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A requirement expression created for a requirement based upon the
         values set in this requirement builder.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setAttributes(Map)" xml:id="org.osgi.service.repository.RequirementBuilder.setAttributes-Map-">
         <title>public RequirementBuilder setAttributes(Map&lt;String,Object&gt; attributes)</title>
         <formalpara role="parameter">
            <title>attributes</title>
            <para>The map of attributes.</para>
         </formalpara>
         <para role="description">
Replace all attributes with the attributes in the specified map.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>This requirement builder.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setDirectives(Map)" xml:id="org.osgi.service.repository.RequirementBuilder.setDirectives-Map-">
         <title>public RequirementBuilder setDirectives(Map&lt;String,String&gt; directives)</title>
         <formalpara role="parameter">
            <title>directives</title>
            <para>The map of directives.</para>
         </formalpara>
         <para role="description">
Replace all directives with the directives in the specified map.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>This requirement builder.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setResource(Resource)" xml:id="org.osgi.service.repository.RequirementBuilder.setResource-Resource-">
         <title>public RequirementBuilder setResource(Resource resource)</title>
         <formalpara role="parameter">
            <title>resource</title>
            <para>The resource.</para>
         </formalpara>
         <para role="description">
Set the <code>Resource</code>.
 
 </para>
         <para>
 A resource is optional. This method will replace any previously set
 resource.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>This requirement builder.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="RequirementExpression" xml:id="org.osgi.service.repository.RequirementExpression">
      <title>public interface RequirementExpression</title>
      <para>
The super interface for all requirement expressions. All requirement
 expressions must extend this interface.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i3273289"><title>Framework Module Layer</title>OSGi
      Core, Chapter 3 Module Layer</bibliomixed>

      <bibliomixed xml:id="i3272838"><title>Framework Namespaces</title>OSGi
      Core, Chapter 8, osgi.identity Namespace</bibliomixed>

      <bibliomixed xml:id="i3273380"><title>Resource API
      Specification</title>OSGi Core, Chapter 6 Resource API
      Specification</bibliomixed>

      <bibliomixed xml:id="i3273347"><title>XML Schema Part 2: Data types
      Second Edition</title>http://www.w3.org/TR/xmlschema-2/</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="133" revision="$Id: d84d864df112e7102cf3099a6573171c2a4e584e $" version="5" xml:id="service.loader" xml:base="../133/service.loader.xml">
  <title>Service Loader Mediator Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.serviceloader-version" linkend="org.osgi.service.serviceloader"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>Java SE 6 introduced the <emphasis>Service Loader</emphasis>, a
    simple service-provider loading facility, that attempted to unify the
    different ad-hoc mechanisms used by Java's many factories and builders.
    The design allows a JAR to advertise the name of one or more embedded
    classes that implement a given interface and consumers to obtain instances
    of these implementation classes through the Service Loader API.</para>

    <para>Though the Service Loader is about extensibility, its own design is
    closed and therefore not extendable. It does not support a provider model
    that would allow different ways of finding interface implementations; its
    classes are final and its policy is fixed. Unfortunately, the Service
    Loader's fixed design uses a non-modular class loading policy; it defines
    its visibility scope with a class loader, which in general requires full
    visibility of the application's class path. The Service Loader can
    therefore in OSGi not find implementations from other bundles.
    Additionally, the Service Loader also does not enforce a life cycle;
    objects are handed out forever.</para>

    <para>Since the Service Loader is the only standardized plugin mechanism
    in the JRE it is necessary that the mechanism is supported in OSGi with as
    few changes as possible from the consumer's authors. This specification
    therefore defines a <emphasis>mediator</emphasis> that ensures that the
    Service Loader is useful in an OSGi Framework, allowing programs that
    leverage the Service Loader to be used in OSGi frameworks almost
    as-is.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Compatibility</emphasis> - Allow JARs that run in a
          classic Java SE environment that leverage the Service Loader to run
          in OSGi with only manifest modifications.</para>
        </listitem>

        <listitem>
          <para><emphasis>Services</emphasis> - Register services for Service
          Provider bundles that opt-in.</para>
        </listitem>

        <listitem>
          <para><emphasis>Security</emphasis> - Enforce service permissions
          for the Service Loader objects.</para>
        </listitem>

        <listitem>
          <para><emphasis>Life Cycle - </emphasis>Manage the life cycle
          mismatch between OSGi bundles and the Service Loader's create only
          model.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Service Loader</emphasis> - An API in Java SE that
          allows a Consumer to find an implementation of a Service Type from a
          Service Provider by searching a class loader for Service
          Providers.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service Type</emphasis> - The interface or class
          that the Service Provider must implement/extend.</para>
        </listitem>

        <listitem>
          <para><emphasis>Provider Configuration File</emphasis> - A resource
          in the <code>META-INF/services</code> directory that has the fully
          qualified name of the Service Type and contains one ore more fully
          qualified names of Service Providers.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service Provider</emphasis> - An implementation
          class that implements or extends the Service Type.</para>
        </listitem>

        <listitem>
          <para><emphasis>Consumer</emphasis> - A class that uses the Java SE
          Service Loader inside an OSGi framework.</para>
        </listitem>

        <listitem>
          <para><emphasis>Mediator</emphasis> - An extender that mediates
          between Consumer bundles, the Service Loader API, and Service
          Provider bundles in an OSGi environment. It consists of a Processor
          and a Registrar.</para>
        </listitem>

        <listitem>
          <para><emphasis>Processor</emphasis> - Modifies a bundle that uses
          the Service Loader API so that it works in an OSGi
          environment.</para>
        </listitem>

        <listitem>
          <para><emphasis>Registrar</emphasis> - Registers services on behalf
          of a bundle that contains Service Providers.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>Entities</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.278in" contentwidth="6.209in" fileref="serviceloader-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Synopsis</title>

      <para>This specification defines two different functions that are
      provided by a Mediator extender:</para>

      <itemizedlist>
        <listitem>
          <para>Register OSGi services for each Service Provider.</para>
        </listitem>

        <listitem>
          <para>Allow Consumers that uses the Service Loader API to access
          Service Providers from other bundles that would normally not be
          visible from a bundle.</para>
        </listitem>
      </itemizedlist>

      <para>A Service Provider bundle can provide access to all its Service
      Providers through OSGi services by declaring a requirement on the
      <code>osgi.serviceloader.registrar</code> extender. This requirement
      activates a Mediator to inspect the <code>osgi.serviceloader</code>
      capabilities. If no <code>register</code> directive is used then all
      Service Providers for the given Service Type must be registered.
      Otherwise, each capability can select one Service Provider with the
      <code>register</code> directive. The fully qualified name selects a
      specific Service Provider, allowing different Service Providers to be
      registered with different service properties. The Mediator will then
      register an OSGi service factory for each selected capability. The
      <code>osgi.serviceloader</code> capability's attributes are used to
      decorate the OSGi service registration with service properties. The
      service factory returns a new instance for each service get.</para>

      <para>Consumers are classes that use the Service Loader API to find
      Service Provider instances. Since the Service Loader API requires full
      visibility the Service API fails to work inside an OSGi bundle. A
      <code>osgi.serviceloader.processor</code> extender, which is the
      Mediator, processes bundles that require this capability by modifying
      calls to the Service Loader API to ensures that the Service Loader has
      visibility to published Service Providers.</para>

      <para>A Consumer's bundle by default receives visibility to all
      published Service Providers. Service Providers are published when a
      bundle declares one or more <code>osgi.serviceloader</code> capabilities
      for a Service Type. If the Consumer has an
      <code>osgi.serviceloader</code> requirement for the given Service Type
      then the Mediator must only expose the bundles that are wired to those
      requirements and for each bundle provide all its Service
      Providers.</para>
    </section>
  </section>

  <section xml:id="i3285425">
    <title>Java Service Loader API</title>

    <para>Java is quite unique with its focus on separation of
    <emphasis>specification</emphasis> and
    <emphasis>implementation</emphasis>. Virtually all Java Specification
    Requests (JSR) provide a specification that can be implemented
    independently by different parties. Though this is one of the industry's
    best practices it raises a new problem: how to find the implementation
    available in a Java environment from only the <emphasis>Service
    Type</emphasis>. A Service Type is usually an interface but a base class
    can also be used.</para>

    <para>Finding a Service Provider (the implementation class) from a Service
    Type is the so called <emphasis>instance coupling</emphasis> problem. The
    use of Service Types removed the type coupling between the Consumer of the
    contract and the <emphasis>Service Provider</emphasis> of the contract
    (the implementation) but to make things work there is a need of at least
    one place where the Service Provider is instantiated. The very large
    number of factories in Java reflects that this is a very common
    problem.</para>

    <para>The general pattern for factories to find Service Providers was to
    search the class loaders for classes with constant names, varying the
    package names, often using System properties to extend the different areas
    to be sought. Though a general pattern based on class loading tricks
    emerged in the Java VM and application programs, all these patterns
    differed in details and places where they looked. This became harder and
    harder to maintain and often caused unexpected instances to be
    found.</para>

    <para>The <code>java.util.ServiceLoader</code> class was therefore first
    introduced in Java SE 6 to provide a generic solution to this problem, see
    <xref linkend="i3255894"/>. With this API Service Providers of a
    specification can now <emphasis>advertise</emphasis> their availability by
    creating a <emphasis>Provider Configuration File</emphasis> in their JAR
    in the <code>META-INF/services</code> directory. The name of this resource
    is the fully qualified name of the Service Type, the Service Provider
    provides when instantiated.</para>

    <para>The Provider Configuration File contains a number of lines with
    comments or a class name that implements/extends the Service Type. For
    example:</para>

    <programlisting>org.example.Foo</programlisting>

    <para>A Service Provider must then advertise itself like:</para>

    <programlisting>META-INF/services/org.example.Foo:
    # Foo implementation
    org.acme.impl.FooImplementation</programlisting>

    <para>The Service Loader API finds all advertisers by constructing the
    name of the Provider Configuration File from the Service Type and then
    calling the <code>getResources</code> method on the provided class loader.
    This returns an enumeration of URLs to the advertisements. It then parses
    the contents of the resources; that will provide it with a list of Service
    Providers for the sought Service Type without duplicates. The API will
    return an iterator that will instantiate an object for the next available
    Service Provider.</para>

    <para>To find the Configuration files for a given Service Type, the
    Service Loader uses a class loader. The Consumer can select the following
    class loaders:</para>

    <itemizedlist>
      <listitem>
        <para>A given class loader as an argument in the call to the
        constructor</para>
      </listitem>

      <listitem>
        <para>The Thread Context Class Loader (TCCL)</para>
      </listitem>

      <listitem>
        <para>The system loader (when <code>null</code> is passed or no TCCL
        is set)</para>
      </listitem>
    </itemizedlist>

    <para>The class loader restricts the visibility of the Service Loader to
    only the resources to which the class loader has visibility. If the
    Service Loader has no access to the advertisement of a Service Provider
    then it cannot detect it and it will thus not be found.</para>

    <para>The Service Provider is loaded from the given class loader, however,
    the <code>Class.forName</code> method is used, which stores it in the
    cache of the initiating class loader. This means that Service Providers
    are not garbage collected as long as there is a resolved bundle that used
    the Service Loader to get that Service Provider.</para>

    <para>In the Service Loader API, the class does not have to originate from
    the same JAR file as the advertisement. In OSGi this is more restricted,
    the advertisement must come from the same bundle or must be explicitly
    imported.</para>

    <para>For example, to load a <code>Foo</code> instance the following code
    could be used:</para>

    <programlisting>ServiceLoader&lt;Foo&gt; sl =
    ServiceLoader.load( Foo.class );
Iterator&lt;Foo&gt; it = sl.iterator();
if ( it.hasNext() ) {
    Foo foo = it.next();
    ... 
}</programlisting>

    <para>Though the Service Loader API is about extensibility and contract
    based programming it is in itself not extendable nor replaceable. The
    <code>ServiceLoader</code> class is <code>final</code>, it comes from a
    sealed JAR, and is in a <code>java</code> package. It also does not
    provide an API to provide alternate means to find implementations for a
    Service Type.</para>
  </section>

  <section>
    <title>Consumers</title>

    <para><emphasis>Consumers</emphasis> are classes that are not OSGi aware
    and directly use the <emphasis>Service Loader API</emphasis>. The Service
    Loader has a non-modular design and Consumers therefore run into many
    issues when running in an OSGi framework. Consumers should therefore in
    general be converted to use the OSGi service layer since this solves the
    visibility issues, life cycle impedance mismatch, and other problems. The
    Consumer part of this specification is therefore a last resort to use when
    existing code uses the Service Loader API and cannot be modified to
    leverage the OSGi service layer.</para>

    <section>
      <title>Processing</title>

      <para>The Service Loader Mediator can <emphasis>process</emphasis> the
      Consumer by modifying calls to the Service Loader API. This
      specification does not detail how the Mediator ensures that the Consumer
      has visibility to other Service Providers. However, a Mediator could for
      example set an appropriate Thread Context Class Loader during the call
      to the Service Loader's constructor by weaving the Consumer's byte
      codes.</para>
    </section>

    <section>
      <title>Opting In</title>

      <para>Processing is an opt-in process, the Consumer bundle must declare
      that it is willing to be processed. The opt-in is handled by a
      requirement to the <code>osgi.serviceloader.processor</code> extender.
      This requirement must have a <code>single</code> cardinality (the
      default) since the Mediator uses the wiring to select the Consumer to
      process when multiple Mediators are present.</para>

      <para>For example, the following requirement in a manifest enables a
      bundle to be processed:</para>

      <programlisting>Require-Capability:
    osgi.extender;
        filter:="(&amp;(osgi.extender=osgi.serviceloader.processor)
                 (version&gt;=1.0)(!(version&gt;=2.0)))"</programlisting>

      <para>If the extender <code>osgi.serviceloader.processor</code>
      requirement is satisfied then the wired Mediator must process the
      Consumer.</para>

      <para>The Mediator must give visibility to all bundles with
      <emphasis>published</emphasis> Service Providers unless the Consumer
      restricts the visibility by having <code>osgi.serviceloader</code>
      requirements. Bundles publish a Service Type, meaning all their Service
      Providers for that type, by having at least one
      <code>osgi.serviceloader</code> capability for that Service Type.</para>
    </section>

    <section>
      <title>Restricting Visibility</title>

      <para>A Consumer's bundle can restrict its visibility to certain bundles
      by declaring an <code>osgi.serviceloader</code> requirement for each
      Service Type it wants to use. Only bundles wired from those requirement
      provide their advertised Service Providers. If no such requirements are
      declared then all bundles with the published Service Type become
      available.</para>

      <para>The cardinality can be used to select a single Service Provider's
      bundle or multiple bundles if it needs to see all Service Provider
      bundles. The requirement can be made optional if the Consumer's bundle
      can work also when no Service Provider bundle is available. See <xref linkend="i3280141"/> for more details.</para>

      <para>For example, a requirement that restricts visibility to the
      <code>org.example.Foo</code> Service Providers could look like:</para>

      <programlisting>Require-Capability:                             
    osgi.serviceloader;
    filter:="(osgi.serviceloader=org.example.Foo)";
    cardinality:=multiple</programlisting>

      <para>In this example, any bundle that publishes the
      <code>org.example.Foo</code> Service Type will contribute its Service
      Providers.</para>

      <para>Visibility can also be restricted to bundles that publish with
      capability's attributes. Any bundle that has at least one matching
      capability will then be able to contribute all its Service Providers.
      For example, the following example selects only bundles that have the
      <code>classified</code> property set:</para>

      <programlisting>osgi.serviceloader; filter:="(classified=*)"</programlisting>

      <para>With Service Registrations, see <xref linkend="i3280881"/>, the
      capability can discriminate between multiple Service Providers in the
      same bundle. The Service Loader API does not have this feature: any
      wired requirement has visibility to all Service Providers in the wired
      bundle, regardless of the <code>registered</code> directive.</para>
    </section>

    <section>
      <title>Life Cycle Impedance Mismatch</title>

      <para>A Consumer can only see Service Provider instances of bundles that
      are active during the time the next instance is created. That is, the
      Mediator must treat the life cycle of the Service Provider as if it was
      a service. However, the Service Loader implementations perform extensive
      class loader techniques and cache results. The exact life cycle of the
      Service Provider bundle with respect to the Consumer is therefore
      impossible to enforce.</para>

      <para>The Service Loader API does not have a life cycle, objects are
      assumed to stay alive during the duration of the VM's process and due to
      the use of <code>Class.forName</code> in the Service Loader
      implementations. Therefore a Mediator should refresh a Consumer bundle
      when it is using a Service Provider and that Service Provider's bundle
      becomes stopped otherwise long running applications can run out of
      memory when bundles are regularly updated.</para>
    </section>

    <section xml:id="i3252894">
      <title>Consumer Example</title>

      <para>A legacy JAR for which there is no more source code uses the
      Service Loader API to get access to <code>com.example.Codec</code>
      instances through the Service Loader API.</para>

      <para>It is wrapped in a bundle that then has the following
      manifest:</para>

      <programlisting>Manifest-Version:       1.0
Bundle-ManifestVersion: 2
Bundle-SymbolicName:    com.example.impl
Bundle-Version:         23.98.1.v199101232310.02011
Import-Package:         com.example; version=3.45
Bundle-ClassPath:       legacy.jar</programlisting>

      <para>The manifest must then declare that the bundle must be processed,
      this is triggered by requiring the
      <code>osgi.serviceloader.processor</code> extender:</para>

      <programlisting>Require-Capability:                                         
  osgi.extender;
    filter:="(&amp;(osgi.extender=osgi.serviceloader.processor)
             (version&gt;=1.0)(!(version&gt;=2.0)))"</programlisting>

      <para>With this manifest, the Consumer bundle has full visibility to all
      Service Provider bundles that are published. The following lines can be
      added to restrict the visibility to codecs that have support for
      <code>WAVE</code> formats (although all Service Providers in that bundle
      will be visible to the consumer).</para>

      <programlisting>,
    osgi.serviceloader;
     filter:="(&amp;(format=WAVE)(osgi.serviceloader=com.example.Codec))"</programlisting>
    </section>
  </section>

  <section>
    <title>Service Provider Bundles</title>

    <para>A <emphasis>Service Provider bundle</emphasis> is a bundle that
    contains one or more Service Providers that are usable by the Service
    Loader API. This section shows how Service Provider bundles should be
    constructed and what options they have.</para>

    <section>
      <title>Advertising</title>

      <para><emphasis>Service Providers</emphasis> are implementation classes
      that are <emphasis>advertised</emphasis> under a Service Type according
      to the rules in the Service Loader API. A Service Provider is advertised
      with a <emphasis>Provider Configuration File</emphasis> in a JAR. In an
      OSGi environment the Service Provider must reside in the same bundle as
      the advertisement or be imported. A single Provider Configuration File
      can contain multiple Service Providers. See <xref linkend="i3285425"/>.</para>
    </section>

    <section>
      <title>Publishing the Service Providers</title>

      <para>Service Providers can be used in two different scenarios:</para>

      <itemizedlist>
        <listitem>
          <para>A Service Provider can be used by a processed Consumer as a
          Service Type, or</para>
        </listitem>

        <listitem>
          <para>It can be registered as a service.</para>
        </listitem>
      </itemizedlist>

      <para>A Service Type must be <emphasis>published</emphasis> to allow its
      use it in these scenarios. Publishing a Service Type consists of
      providing one or more <code>osgi.serviceloader</code> capabilities for
      an advertised Service Type, see <xref linkend="i3280141"/>. These
      <code>osgi.serviceloader</code> capabilities must specify a fully
      qualified class name of the Service Type, there is no wildcarding
      allowed. Therefore, publishing a service implicitly makes all
      corresponding Service Providers available to Consumers.</para>

      <para>If a bundle does not provide <code>osgi.serviceloader</code>
      capabilities then it does not publish any Service Providers and its
      Service Providers can therefore not be used by Consumers. They can then
      also not be registered as OSGi services, see <xref linkend="i3285744"/>.
      Tools can use the advertisement of the Service Provider in the JAR to
      automatically generate the <code>osgi.serviceloader</code> capabilities
      in the manifest.</para>

      <para>For example, the following capability publishes all the Service
      Providers in its bundle that advertise the
      <code>com.example.Codec</code> interface:</para>

      <programlisting>Provide-Capability:
  osgi.serviceloader;
    osgi.serviceloader=com.example.Codec;
    uses:="com.example"</programlisting>

      <para>A Service Provider bundle must not require the
      <code>osgi.serviceloader.processor</code> extender unless it needs to be
      processed; publishing a Service Type is sufficient to allow Consumers to
      use the published Service Types.</para>
    </section>

    <section xml:id="i3285744">
      <title>OSGi Services</title>

      <para>The Service Provider can have its <code>osgi.serviceloader</code>
      capabilities be registered as services that provide instances from the
      Service Providers. For this, the Service Provider bundle must require
      the <code>osgi.serviceloader.registrar</code> extender, which is the
      Mediator. For example:</para>

      <programlisting>Require-Capability:
    osgi.extender;
        filter:="(&amp;(osgi.extender=osgi.serviceloader.registrar)
                 (version&gt;=1.0)(!(version&gt;=2.0)))"</programlisting>

      <para>The registrar must then inspect each
      <code>osgi.serviceloader</code> capability and register an associated
      OSGi Service for each Service Provider <emphasis>selected</emphasis> by
      that capability. A Service Provider is selected when:</para>

      <itemizedlist>
        <listitem>
          <para>The capability has no <code>register</code> directive,
          or</para>
        </listitem>

        <listitem>
          <para>The register directive matches the fully qualified name of the
          Service Provider.</para>
        </listitem>
      </itemizedlist>

      <para>A <code>register</code> directive selects a Service Provider if it
      contains the fully qualified name of the Service Provider, that is, the
      implementation class. Selection only works for services, Consumer will
      always see all Service Providers regardless of the <code>register</code>
      directive due to limitations in the Service Loader API.</para>

      <para>For example, the following manifest selects all Service Providers
      of the <code>com.example.Foo</code> Service Type since no
      <code>register</code> directive is present:</para>

      <programlisting>Provide-Capability:
    osgi.serviceloader;
        uses:="com.example";
        osgi.serviceloader=com.example.Foo</programlisting>

      <para>Selected Service Providers must be registered as defined in <xref linkend="i3280881"/>, with the capability's attributes as
      <emphasis>decorating</emphasis> service properties. Private service
      properties (attributes that start with a full stop (<code>'.'
      \u002E</code>) and the defined capability attributes in the
      <code>osgi.serviceloader</code> namespace are not registered as service
      properties.</para>

      <para>The following example would register the <code>format</code>
      service property but not the <code>.hint</code> service property for the
      <code>com.acme.impl.WaveFoo</code> Service Provider.</para>

      <programlisting>    osgi.serviceloader;
        osgi.serviceloader=com.example.Foo;
        uses:="com.example";
        format=WAVE;
        .hint=E5437Qy7;
        register:="com.acme.impl.WaveFoo"</programlisting>

      <para>The Mediator must only register OSGi services for selected Service
      Providers; the Service Provider bundle can therefore decide not to
      register certain Service Providers and register them with another
      mechanism, for example Declarative Services or in a bundle
      activator.</para>

      <para>Since the Mediator must use the bundle context of the Service
      Provider to register the OSGi service the Service Provider bundle must
      have the proper Service Permission <code>REGISTER</code> for the Service
      Type.</para>
    </section>

    <section>
      <title>Service Provider Example</title>

      <para>A Foo Codecs JAR needs to be ported to OSGi, it provides a Service
      Provider for the <code>org.example.Codec</code> Service Type. In this
      example the JAR is given a new manifest:</para>

      <programlisting>Manifest-Version:       1.0
Bundle-ManifestVersion: 2
Bundle-SymbolicName:    com.example.foo.codecs
Import-Package:         com.example; version=3.45</programlisting>

      <para>To ensure that the bundle opts in to registering its services it
      must require the <code>osgi.serviceloader.registrar</code>
      extender.</para>

      <programlisting>Require-Capability:                                         
    osgi.extender; 
        filter:="(&amp;(osgi.extender=osgi.serviceloader.registrar)
                 (version&gt;=1.0)(!(version&gt;=2.0)))"</programlisting>

      <para>To publish two Service Providers for the same type, two
      capabilities must be declared:</para>

      <programlisting>Provide-Capability:
    osgi.serviceloader;
        osgi.serviceloader="com.example.Codec";
        format:List&lt;String&gt;="WAVE,WMF";
      register:="com.acme.impl.FooWaveCodec";
      uses:="com.example,org.apache.common.codecs",
    osgi.serviceloader;
        osgi.serviceloader="com.example.Codec";
        format:List&lt;String&gt;=SINUS;
      register:="com.acme.impl.sinus.FooSinusCodec";
      uses:="com.example"</programlisting>

      <para>This example implicitly publishes the Service Type
      <code>com.example.Codec</code> multiple times with different attributes.
      Consumers that match any of these capabilities will however have
      visibility to all Service Providers since the Service Loader API cannot
      discriminate between different Service Providers from the same
      bundle.</para>
    </section>
  </section>

  <section>
    <title>Service Loader Mediator</title>

    <para>A Mediator is the <code>osgi.serviceloader.processor</code> and
    <code>osgi.serviceloader.registrar</code> extender bundle that has the
    following responsibilities:</para>

    <itemizedlist>
      <listitem>
        <para>It registers selected Service Providers as OSGi services.</para>
      </listitem>

      <listitem>
        <para>It processes any Consumers so that Service Loader API calls have
        proper visibility to published Service Provider bundles.</para>
      </listitem>
    </itemizedlist>

    <section xml:id="i3280881">
      <title>Registering Services</title>

      <para>The Mediator must track bundles that are wired to its
      <code>osgi.extender=osgi.serviceloader.registrar</code> capability.
      These are called the <emphasis>managed</emphasis> bundles. For all
      managed bundles the Mediator must enumerate all
      <code>osgi.serviceloader</code> capabilities and register
      <emphasis>selected</emphasis> Service Providers as OSGi services. A
      Service Provider is selected by an <code>osgi.serviceloader</code>
      capability when:</para>

      <itemizedlist>
        <listitem>
          <para>The advertised Service Type matches the corresponding
          <code>osgi.serviceloader</code> capability's Service Type,
          and</para>
        </listitem>

        <listitem>
          <para>The register directive is absent, or</para>

          <itemizedlist>
            <listitem>
              <para>The <code>register</code> directive contains the fully
              qualified name of the Service Provider.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <para>An <code>osgi.serviceloader</code> capability that selects a
      Service Provider is said to <emphasis>decorate</emphasis> that Service
      Provider. A capability can decorate multiple Service Providers of the
      same Service Type and the same Service Provider can be decorated by
      different capabilities. <xref linkend="i3283346"/> depicts the resulting
      relations and their cardinalities since the relations are
      non-trivial.</para>

      <figure xml:id="i3283346">
        <title>Cardinality Service Type</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.565in" contentwidth="6.237in" fileref="cardinality-service-type.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The OSGi service for each selected Service Provider must be
      registered under the advertised Service Type of the Service Provider,
      which must match the Service Type specified in the capability.</para>
    </section>

    <section>
      <title>OSGi Service Factory</title>

      <para>The Mediator must register an OSGi service factory with the bundle
      context of the Service Provider's bundle. The OSGi service factory must
      be implemented such that it creates a new instance for each bundle that
      gets the service. This behavior is similar, though not quite identical,
      to the <code>ServiceLoader.load()</code> method that gives each consumer
      a separate instance of the service. The difference is that different
      users inside a bundle will share the same instance.</para>

      <para>Each service registration is controlled by a decorating
      <code>osgi.serviceloader</code> capability. The attributes on this
      capability must be registered with the OSGi service as service
      properties, except for:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Private</emphasis> - Private properties, property
          names that start with a full stop (<code>'.' \u002E</code>) must not
          be registered.</para>
        </listitem>
      </itemizedlist>

      <para>The following service property must be registered, overriding any
      identical named properties in the decorating capability:</para>

      <itemizedlist>
        <listitem>
          <para><code>serviceloader.mediator</code> - (<code>Long</code>) The
          bundle id of the mediator.</para>
        </listitem>
      </itemizedlist>

      <para>The Mediator should not verify class space consistency since the
      OSGi framework already enforces this as long as the publishing
      capability specifies the <code>uses</code> directive.</para>

      <para>Any services registered in the OSGi Service Registry must be
      unregistered when the Service Provider's bundle is stopped or the
      Mediator is stopped.</para>
    </section>

    <section>
      <title>Service Loader and Modularity</title>

      <para>The Service Loader API causes issues in a modular environment
      because it requires a class loader that has wide visibility. In a
      modular environment like OSGi the Consumer, the Service Type, and the
      Service Provider can, and should, all reside in different modules
      because they represent different concerns. Best practice requires that
      only the Service Type is shared between these actors. However, for the
      Service Loader to work as it was designed the Consumer must provide a
      class loader that has visibility of the Service Provider. The Service
      Provider is an implementation class, exporting such classes is the
      anathema of modularity. However, since the standard JRE provides
      application wide visibility this was never a major concern.</para>

      <para>The simplest solution is to make the Service Loader aware of OSGi,
      its API clear is mappable to the OSGi service layer. However, the
      Service Loader is not extensible. The result is that using the Service
      Loader in OSGi fails in general because the Service Loader is unable to
      find the Service Providers. The issues are:</para>

      <itemizedlist>
        <listitem>
          <para>The use of the Thread Context Class Loader (TCCL) is not
          defined in an OSGi environment. It should be set by the caller and
          this cannot be enforced. The multi threaded nature of OSGi makes it
          hard to predict what thread a Consumer will use, making it
          impossible to set an appropriate TCCL outside the Consumer.</para>
        </listitem>

        <listitem>
          <para>A bundle cannot import <code>META-INF/services</code> since
          the name is not a package name. Even if it could, the OSGi framework
          can only bind a single exporter to an importer for a given package.
          The Service Loader API requires access to all these pseudo-packages
          via the Class Loader's <code>getResources</code> method, the
          technique used to find Service Providers.</para>
        </listitem>

        <listitem>
          <para>Instantiating a Service Provider requires access to internal
          implementation classes, by exporting these classes, an implementing
          bundle would break its encapsulation.</para>
        </listitem>

        <listitem>
          <para>If a Service Provider was exported then importing this class
          in a Consumer bundle would couple it to a specific implementation
          package; this also violates the principle of loose coupling.</para>
        </listitem>

        <listitem>
          <para>The Service Loader API does assume an eternal life cycle,
          there is no way to signal that a Service Provider is no longer
          available. This is at odds with the dynamic bundle life
          cycle.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Processing Consumers</title>

      <para>Consumers are not written for OSGi and require help to
      successfully use the Service Loader API. It is the Mediator's
      responsibility to ensure that bundles that are wired to published
      Service Types have access to these Service Provider's instances through
      the Service Loader API.</para>

      <para>This specification does not define how this is done. There are a
      number of possibilities and it is up to the Mediator to provide the
      guarantee to the Consumer that it has been properly processed.</para>

      <para>A Mediator must only process Consumer's bundles that are wired to
      the <code>osgi.extender</code> capability for the
      <code>osgi.serviceloader.processor</code> extender. Since Consumers must
      require this extender capability with the default cardinality of 1 there
      can at most be one extender wired to a Consumer.</para>
    </section>

    <section>
      <title>Visibility</title>

      <para>The Mediator must process the Consumer bundle in such a way that
      when the Consumer uses the Service Loader API it receives all the
      Service Providers of bundles that:</para>

      <itemizedlist>
        <listitem>
          <para>Provide one or more <code>osgi.serviceloader</code>
          capabilities for the requested Service Type, and</para>
        </listitem>

        <listitem>
          <para>Are not type space incompatible with the requester for the
          given Service Type, and</para>
        </listitem>

        <listitem>
          <para>Either the Consumer has no <code>osgi.serviceloader</code>
          requirements or one of its requirements is wired to one of the
          <code>osgi.serviceloader</code> capabilities.</para>
        </listitem>
      </itemizedlist>

      <para>The Mediator must verify that the Consumer has Service Permission
      <code>GET</code> for the given Service Type since the Consumer uses the
      Service Type as a service. This specification therefore reuses the
      Service Permission for this purpose. The check must be done with the
      <code>ServicePermission(String,String)</code> constructor using the
      bundle's Access Control Context or the bundle's
      <code>hasPermission</code> method.</para>
    </section>

    <section>
      <title>Life Cycle</title>

      <para>There is a life cycle mismatch between the Service Loader API and
      the dynamic OSGi world. A Service Loader provides a Consumer with an
      object that could come from a bundle that is later stopped and/or
      refreshed. Such an object becomes <emphasis>stale</emphasis>. Mediators
      should attempt to refresh bundles that have access to these stale
      objects.</para>
    </section>
  </section>

  <section xml:id="i3280141">
    <title>osgi.serviceloader Namespace</title>

    <para>The <code>osgi.serviceloader</code> Namespace:</para>

    <itemizedlist>
      <listitem>
        <para>Allows the Consumer's bundle to require the presence of a
        Service Provider for the required Service Type.</para>
      </listitem>

      <listitem>
        <para>Provides the service properties for the service
        registration.</para>
      </listitem>

      <listitem>
        <para>Indicates which Service Providers should be registered as an
        OSGi service.</para>
      </listitem>
    </itemizedlist>

    <para>The namespace is defined in the following table and <xref linkend="org.osgi.service.serviceloader.ServiceLoaderNamespace" xrefstyle="hyperlink"/>, see <xref linkend="service.namespaces"/> for the
    legend of this table.</para>

    <table pgwide="1">
      <title>osgi.serviceloader namespace definition</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="5*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="4*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.serviceloader</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>qname</code></entry>

            <entry><para>The Service Type's fully qualified
            name.</para></entry>
          </row>

          <row>
            <entry><code>*</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>*</code></entry>

            <entry><code>*</code></entry>

            <entry><para>Additional matching attributes are permitted. These
            attributes will be registered as custom service properties unless
            they are private (start with a full stop).</para></entry>
          </row>

          <row>
            <entry><code>register</code></entry>

            <entry><code>CD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>qname</code></entry>

            <entry><para>Use this capability to register a different Service
            Factory under the Service Type for each selected Service Provider.
            </para><para>A Service Provider is selected if the Service Type is
            the advertising Service Type and the Service Provider's fully
            qualified name matches the given name. If no register directive is
            present all advertised Service Providers must be registered. To
            register no Service Providers, because the capability must only be
            used to publish, provide an empty string.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section>
    <title>Use of the osgi.extender Namespace</title>

    <para>This section specifies the extender names for Mediators. They are
    used by both by Consumer and Service Provider bundles to ensure that a
    Mediator is present. Both names are defined for the general
    <code>osgi.extender</code> namespace in <emphasis>osgi.extender
    Namespace</emphasis> in <xref linkend="intro.core.release" xrefstyle="template:%t"/>.</para>

    <para>The <code>osgi.extender</code> namespace requires the use of an
    <emphasis>extender name</emphasis>, the name of the Mediator extenders
    is:</para>

    <programlisting>osgi.serviceloader.processor
osgi.serviceloader.registrar</programlisting>

    <para>The version is for this specification is in both cases:</para>

    <programlisting>1.0.0</programlisting>
  </section>

  <section>
    <title>Security</title>

    <section>
      <title>Mediator</title>

      <para>The Mediator will require significant permissions to perform its
      tasks. First, it will require access to the Bundle Context of the
      Service Provider bundle, which means it must have Admin
      Permission:</para>

      <programlisting>AdminPermission[&lt;Service Provider Bundles&gt;,CONTEXT|METADATA|CLASS]</programlisting>

      <para>Since it will have to register on behalf of the Service Provider
      bundle it must have complete liberty to register services:</para>

      <programlisting>ServicePermission[&lt;Service Type&gt;,REGISTER]</programlisting>

      <para>Depending on the way the Consumers are processed additional
      requirements may be necessary.</para>

      <para>The Mediator connects two parties; it must ensure that neither
      party will receive additional permissions.</para>
    </section>

    <section>
      <title>Consumers</title>

      <para>Consumers must have:</para>

      <programlisting>ServicePermission[&lt;Service Type&gt;,GET] 
PackagePermission[&lt;Service Type's package&gt;,IMPORT]
CapabilityPermission["osgi.extender", REQUIRE]
CapabilityPermission["osgi.serviceloader", REQUIRE]
</programlisting>

      <para>The Mediator must ensure that the Consumer has the
      ServicePermission before it provides the instance. It must use the
      Bundle Context <code>hasPermission</code> method or the bundle's Access
      Control Context to verify this.</para>
    </section>

    <section>
      <title>Service Providers</title>

      <para>Service Providers must have:</para>

      <programlisting>ServicePermission[&lt;Service Type&gt;,REGISTER] 
PackagePermission[&lt;Service Type's package&gt;,IMPORT]
CapabilityPermission["osgi.extender", REQUIRE]
CapabilityPermission["osgi.serviceloader", PROVIDE]
</programlisting>

      <para>The Mediator must ensure that the Service Provider has the
      ServicePermission before it provides the instance. It must use the
      Bundle Context <code>hasPermission</code> method or the bundle's Access
      Control Context to verify this.</para>
    </section>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.serviceloader" xml:id="org.osgi.service.serviceloader" xml:base="../../generated/javadoc/docbook/org.osgi.service.serviceloader.xml">
   <title>org.osgi.service.serviceloader</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.serviceloader-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.serviceloader-version.number">1.0</edition>
   </info>
   <para>
Service Loader Mediator Package Version 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.serviceloader; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.serviceloader; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.serviceloader.ServiceLoaderNamespace">
                  <code>ServiceLoaderNamespace</code>
               </link> - 
Service Loader Capability and Requirement Namespace.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="ServiceLoaderNamespace" xml:id="org.osgi.service.serviceloader.ServiceLoaderNamespace">
      <title>public final class ServiceLoaderNamespace<?line-break?> extends Namespace</title>
      <para>
Service Loader Capability and Requirement Namespace.
 
 </para>
      <para>
 This class defines the names for the attributes and directives for this
 namespace.
 
 </para>
      <para>
 All unspecified capability attributes are of one of the following types:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <code>String</code>
            </para>
         </listitem>
         <listitem>
            <para>
               <code>Version</code>
            </para>
         </listitem>
         <listitem>
            <para>
               <code>Long</code>
            </para>
         </listitem>
         <listitem>
            <para>
               <code>Double</code>
            </para>
         </listitem>
         <listitem>
            <para>
               <code>List&lt;String&gt;</code>
            </para>
         </listitem>
         <listitem>
            <para>
               <code>List&lt;Version&gt;</code>
            </para>
         </listitem>
         <listitem>
            <para>
               <code>List&lt;Long&gt;</code>
            </para>
         </listitem>
         <listitem>
            <para>
               <code>List&lt;Double&gt;</code>
            </para>
         </listitem>
      </itemizedlist>
      <para>
 and are used as arbitrary matching attributes for the capability. The values
 associated with the specified directive and attribute keys are of type
 <code>String</code>, unless otherwise indicated.
 
 </para>
      <para>
 All unspecified capability attributes, unless the attribute name starts with
 full stop (<code>'.'</code> \u002E), are also used as service properties when
 registering a Service Provider as a service.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="CAPABILITY_REGISTER_DIRECTIVE" xml:id="org.osgi.service.serviceloader.ServiceLoaderNamespace.CAPABILITY_REGISTER_DIRECTIVE">
         <title>public static final String CAPABILITY_REGISTER_DIRECTIVE = "register"</title>
         <para>
The capability directive used to specify the implementation classes of
 the service. The value of this attribute must be of type
 <code>List&lt;String&gt;</code>.
 
 </para>
         <para>
 If this directive is not specified, then all advertised Service Providers
 that match the service type name must be registered. If this directive is
 specified, then only Service Providers that match the service type name
 whose implementation class is contained in the value of this attribute
 must be registered. To not register a service for this capability use an
 empty string.</para>
      </section>
      <section role="field" xreflabel="SERVICELOADER_NAMESPACE" xml:id="org.osgi.service.serviceloader.ServiceLoaderNamespace.SERVICELOADER_NAMESPACE">
         <title>public static final String SERVICELOADER_NAMESPACE = "osgi.serviceloader"</title>
         <para>
Namespace name for service loader capabilities and requirements.
 
 </para>
         <para>
 Also, the capability attribute used to specify the fully qualified name
 of the service type.</para>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i3255894"><title>Java Service Loader
      API</title>http://docs.oracle.com/javase/6/docs/api/java/util/ServiceLoader.html</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="134" revision="$Id: 9bdb5bc29728d3687350a5e44de1d198e9ec0f8d $" version="5" xml:id="service.subsystem" xml:base="../134/service.subsystem.xml">
  <title>Subsystem Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.subsystem-version" linkend="org.osgi.service.subsystem"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The <xref linkend="intro.core.release" xrefstyle="template:%t"/>
    specifies a life-cycle model where bundles can be installed, resolved, and
    started in order to provide their own classes and services as well as use
    those provided by other bundles in the system. In the core framework, the
    bundle is the coarsest deployment unit that a management agent is able to
    work with; however, oftentimes it is necessary to work with collections of
    bundles and other types of <emphasis>resources</emphasis>, such as
    subsystems and implementation specific resources. For example, a
    collection of bundles may correspond to a particular feature of a
    middleware product, such as a Web container. The applications deployed to
    that container may also be developed as a collection of bundles that an
    administrator is required to manage as a consistent whole. The Subsystems
    specification provides a declarative model for defining resource
    collections, including bundles, and an API for installing and managing
    those collections of resources.</para>

    <para>Many use cases only require <emphasis>unscoped</emphasis> resource
    collections where all provided capabilities are freely exported to and all
    required capabilities are freely imported from the system. However, in
    some cases, it is important to allow the exporting of provided
    capabilities to be <emphasis>scoped</emphasis> such that they can only be
    used by a subset of resources in the system. It may also be necessary to
    restrict the importing of required capabilities from outside the
    collection to ensure its internal capabilities are always preferred over
    capabilities outside the collection. For example, applications running on
    a Web application server or in a cloud environment may be deployed to the
    same server instance. The side-effects of co-locating applications on the
    same server must be minimized, and scoping is used to ensure each
    application does not use the classes and services of the others.</para>

    <para>The framework provides hooks for influencing resolution, and access
    to bundles and services. These framework hooks may be used to implement
    scoping for a collection of bundles. The Subsystems specification provides
    a higher-level declarative model for defining scoping for collections of
    resources, including bundles.</para>

    <para>When deploying a collection of bundles in an OSGi framework, gaps
    can exist between the requirements of the bundles and the capabilities
    provided by the target runtime. Management agents are responsible for
    ensuring additional bundles are installed to plug these gaps such that the
    collection of bundles will resolve and run. The <xref linkend="service.resolver"/> and <xref linkend="service.repository"/> help
    management agents address these needs but do not cover how deployment
    works for resource collections, especially when those collections are
    scoped. Scoping affects requirement and capability resolution and
    therefore affects the choice of resources. The Subsystems specification
    defines resolution and provisioning rules to help management agents
    consistently deploy collections of resources. The specification also
    defines a format for developers and testers to provide predetermined
    deployment resolutions to help ensure consistency between test and
    production environments.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Collections</emphasis> - Allow the management of a
          collection of resources as a whole.</para>
        </listitem>

        <listitem>
          <para><emphasis>Scoping - </emphasis>Provide support for isolating
          resources in the collection such that a subset of their capabilities
          (for example packages and services) are available to satisfy
          requirements outside the Subsystem and a subset of their
          requirements are able to resolve to capabilities provided outside
          the Subsystem.</para>
        </listitem>

        <listitem>
          <para><emphasis>Sharing</emphasis> - Allow Scoped Subsystems to
          share their resources with others and share resources from
          others.</para>
        </listitem>

        <listitem>
          <para><emphasis>Dynamic</emphasis> - Provide life cycle information
          to users of Subsystems and be able to react to changes in the state
          of the environment in which a Subsystem is deployed.</para>
        </listitem>

        <listitem>
          <para><emphasis>Flexible</emphasis> - Enable a flexible definition
          with subsequent resolution to determine the resources to be
          used.</para>
        </listitem>

        <listitem>
          <para><emphasis>Deterministic</emphasis> - Enable the choice of
          resources deployed for a Subsystem to be determined ahead of
          deployment.</para>
        </listitem>

        <listitem>
          <para><emphasis>Life-cycle</emphasis> - Define a life cycle for a
          Subsystem describing how it affects the Subsystem's resources and
          allow the life cycle to be observed.</para>
        </listitem>

        <listitem>
          <para><emphasis>Reflective</emphasis> - Allow discovery of runtime
          structural and state information.</para>
        </listitem>

        <listitem>
          <para><emphasis>Resolution</emphasis> - Allow the resolution of a
          flexible definition during installation to determine the resources
          to be used.</para>
        </listitem>

        <listitem>
          <para><emphasis>Recursive</emphasis> - Allow Subsystems to be
          defined in terms of other Subsystems.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Subsystem</emphasis> - A collection of resources,
          such as bundles, or other Subsystems, administered as a whole
          through a Subsystem service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Subsystem Manifest</emphasis> - A manifest used to
          provide a Subsystem definition.</para>
        </listitem>

        <listitem>
          <para><emphasis>Deployment Manifest</emphasis> - A manifest used to
          provide a deployment definition for a Subsystem. The definition
          identifies the exact resources to be deployed for the
          Subsystem.</para>
        </listitem>

        <listitem>
          <para><emphasis>Subsystem Archive</emphasis> - A zip file with an
          <code>.esa</code> extension that describes a Subsystem definition.
          It may include the Subsystem Manifest, Deployment Manifest, or
          resource files that constitute the Subsystem.</para>
        </listitem>

        <listitem>
          <para><emphasis>Resource</emphasis> - An element which may be used
          in the composition of a Subsystem, such as a bundle or another
          Subsystem.</para>
        </listitem>

        <listitem>
          <para><emphasis>Repository</emphasis> - A service that is used to
          discover a Subsystem's content and dependencies. The repository
          service is described in the <xref linkend="service.repository"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Resolver</emphasis> - A service used to resolve
          requirements against capabilities to determine the resources
          required by a Subsystem. The resolver service is described in the
          <xref linkend="service.resolver"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Constituent</emphasis> - A resource that belongs to
          one or more Subsystems.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Entities org.osgi.service.subsystem</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.618in" contentwidth="6.209in" fileref="subsystem-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Synopsis</title>

      <para>The OSGi framework does not provide any support for managing
      collections of resources. Management of collections of resources is
      enabled by a Subsystems implementation. When a Subsystems implementation
      is installed into the framework, it registers a Subsystem service. This
      service represents the framework as the <emphasis>Root
      Subsystem</emphasis>, which is a Subsystem that provides the capability
      to install and manage other <emphasis>child Subsystems</emphasis>, and
      is the parent of those Subsystems, but does not itself have a
      parent.</para>

      <para>A Subsystem Archive provides a definition of a Subsystem that is
      read by the Subsystem implementation as part of installation. The
      Subsystem is packaged in a Subsystem Archive (<code>.esa</code>) file
      which is the Subsystem equivalent of a bundle <code>.jar</code> file.
      The Subsystem definition can be described using a Subsystem Manifest or
      defaulted based on the name and contents of the Subsystem Archive.
      Installing a new Subsystem results in another Subsystem service being
      registered to represent that Subsystem in the runtime. Each Subsystem
      service enables management and reflection of the Subsystem it
      represents.</para>

      <para>A Subsystem Manifest allows flexibility in the identification of
      the Subsystem's content resources through version ranges and
      optionality. The exact versions to be deployed and any required
      <emphasis>dependencies</emphasis> (resources required to satisfy
      unresolved requirements of the Subsystem's content resources) can be
      identified in an optional Deployment Manifest. The corresponding
      resource binaries can be packaged in the Subsystem Archive, or found in
      a repository. Depending on the type of Subsystem the Subsystem Manifest
      may describe a <emphasis>sharing policy</emphasis> for the Subsystem,
      such as the packages or services the Subsystem exports or
      imports.<emphasis> </emphasis>The Deployment Manifest also describes the
      <emphasis>sharing policy</emphasis> details for the Subsystem and is
      defined by the type of Subsystem and the <emphasis>sharing
      policy</emphasis> described in the Subsystem Manifest.</para>

      <para>A Subsystem that does not have a Deployment Manifest has its
      deployment details calculated during installation. This may be done
      using the <xref linkend="service.resolver"/>, if available. The starting
      set of requirements to be resolved are those identifying the Subsystem
      content (that is, requirements for content resources). The Subsystems
      implementation provides a resolve context that implements the policy for
      the Subsystem and consults the configured Repository services to find
      candidates to satisfy requirements.</para>

      <para>This resolve context can also represent the target deployment
      environment, which might be a live framework, or a static definition of
      a target runtime. The resulting resolution is used to determine the
      exact resources to provision, equivalent to those identified in the
      deployment manifest. If any of the Repository or Resolver services are
      unavailable, then a Subsystem implementation can use its own means to
      determine the deployment, or fail the installation.</para>

      <para>A Subsystem definition includes sharing policy configuration to
      scope requirements and capabilities visibility into and out of a
      Subsystem. The Subsystems specification defines the concept of Subsystem
      types to help simplify the configuration of sharing policies. Each type
      has its own default sharing policy, for example, to forbid the sharing
      of capabilities out, or to share all capabilities in. Three Subsystem
      types are defined in the Subsystems specification:
      <emphasis>application</emphasis>, <emphasis>composite</emphasis> and
      <emphasis>feature</emphasis>.</para>

      <para>An <emphasis>Application Subsystem </emphasis>is a Scoped
      Subsystem with a sharing policy associated with what is often considered
      to be an application. An application does not share (export) any
      capabilities. Any requirements that are not satisfied by the
      application's contents are automatically imported from outside the
      application.</para>

      <para>A <emphasis>Composite Subsystem</emphasis> is a Scoped Subsystem
      with a fully explicit sharing policy. Capabilities may be explicitly
      imported into, or exported out of, the Composite Subsystem.</para>

      <para>A <emphasis>Feature Subsystem </emphasis>is an Unscoped Subsystem
      and so all its requirements and capabilities are shared.</para>

      <para>This specification allows for other types to be defined, including
      ones outside this specification.</para>
    </section>
  </section>

  <section xml:id="i3345962">
    <title>Subsystems</title>

    <para>This specification defines a unit of installation called a
    <emphasis>Subsystem</emphasis>. A Subsystem is comprised of resources,
    including OSGi bundles and other Subsystems, which together can provide
    functions to end users.</para>

    <para>A Subsystem is deployed as a Subsystem Archive (<code>.esa</code>)
    file. Subsystem Archives are used to store Subsystems and optionally their
    resources in a standard ZIP-based file format. This format is defined in
    <xref linkend="i3321126"/>. Subsystems normally use the Subsystem Archive
    extension of <code>.esa</code> but are not required to. However there is a
    special MIME type reserved for OSGi Subsystems that can be used to
    distinguish Subsystems from normal ZIP files. This MIME type is:</para>

    <programlisting>application/vnd.osgi.subsystem</programlisting>

    <para>The type is defined in <xref linkend="i3321186"/>. A Subsystem is a
    ZIP file that:</para>

    <itemizedlist>
      <listitem>
        <para>Contains zero or more resources. These resources may be OSGi
        bundles or other Subsystems. Subsystems may be nested or included to
        any depth.</para>
      </listitem>

      <listitem>
        <para>Contains an optional Subsystem Manifest named
        <code>OSGI-INF/SUBSYSTEM.MF</code>. The Subsystem Manifest describes
        the contents of the Subsystem Archive and provides information about
        the Subsystem. The Subsystem Archive uses headers to specify
        information that the Subsystems implementation needs to install,
        resolve and start the Subsystem correctly. For example, it can state
        the list of content resources that comprise the Subsystem and the
        Subsystem's type.</para>
      </listitem>

      <listitem>
        <para>Contains an optional Deployment Manifest file named
        <code>OSGI-INF/DEPLOYMENT.MF</code>. The Deployment Manifest describes
        the content resources, dependencies, and sharing policy that need to
        be provisioned to satisfy the Subsystem definition and ultimately
        allow it to resolve at runtime.</para>
      </listitem>
    </itemizedlist>

    <para>The Subsystem and Deployment Manifest follow the JAR manifest format
    (version 1.0), but with the following relaxed rules:</para>

    <itemizedlist>
      <listitem>
        <para>No limit on the line length. Lines are allowed to exceed the JAR
        manifest maximum of 72 bytes.</para>
      </listitem>

      <listitem>
        <para>The last line is not required to be a carriage-return new-line
        combination.</para>
      </listitem>

      <listitem>
        <para>There is only one section in the manifest (the main section). A
        Subsystems implementation is free to ignore other sections of the
        manifest.</para>
      </listitem>
    </itemizedlist>

    <para>Once a Subsystem is started, its functionality is provided.
    Depending on the type of Subsystem it may expose capabilities, such as
    packages and services, to other resources installed in the OSGi
    framework.</para>

    <section>
      <title>Subsystem Manifest Headers</title>

      <para>A Subsystem can carry descriptive information about itself in the
      Subsystem manifest file contained in its Subsystem Archive under the
      name <code>OSGI-INF/SUBSYSTEM.MF</code>. This specification defines
      Subsystem manifest headers, such as Subsystem-SymbolicName and
      Subsystem-Version, which Subsystem developers use to supply descriptive
      information about a Subsystem. A Subsystems implementation must:</para>

      <itemizedlist>
        <listitem>
          <para>Process the main section of the manifest. Any other sections
          of the manifest can be ignored.</para>
        </listitem>

        <listitem>
          <para>Ignore unknown manifest headers. The Subsystem developer can
          define additional manifest headers as needed.</para>
        </listitem>

        <listitem>
          <para>Ignore unknown attributes and directives.</para>
        </listitem>
      </itemizedlist>

      <para>All specified manifest headers are listed in the following
      sections. All headers are optional. Example values are provided to help
      explain each header (e.g. Export-Package: org.acme.logging;
      version=1.0).</para>

      <section>
        <title>Export-Package: org.acme.logging; version=1.0</title>

        <para>The Export-Package header declares the exported packages for a
        Scoped Subsystem. See <xref linkend="i3321359"/>.</para>
      </section>

      <section>
        <title>Import-Package: org.osgi.util.tracker; version="[1.4,
        2.0)"</title>

        <para>The Import-Package header declares the imported packages for a
        Scoped Subsystem. See <xref linkend="i3321439"/>.</para>
      </section>

      <section>
        <title>Preferred-Provider: com.acme.logging</title>

        <para>The Preferred-Provider header declares a list bundles and
        Subsystems which are the providers of capabilities that are preferred
        when wiring the requirements of a Scoped Subsystem. See <xref linkend="i3321603"/>.</para>
      </section>

      <section>
        <title>Provide-Capability: com.acme.dict; from=nl; to=de;
        version:Version=1.2</title>

        <para>The Provide-Capability header declares the capabilities exported
        for a Scoped Subsystem. See <xref linkend="i3394044"/>.</para>
      </section>

      <section>
        <title>Require-Bundle: com.acme.chess; version= "[1.0, 2.0)"</title>

        <para>The Require-Bundle header declares the required bundles for a
        Scoped Subsystem. See <xref linkend="i3321711"/>.</para>
      </section>

      <section>
        <title>Require-Capability: osgi.ee; filter:="(osgi.ee=*)"</title>

        <para>The Require-Capability header declares the required capabilities
        for a Scoped Subsystem. See <xref linkend="i3394044"/>.</para>
      </section>

      <section>
        <title>Subsystem-Category: osgi, test, nursery</title>

        <para>The Subsystem-Category header identifies the categories of the
        subsystem as a comma-delimited list.</para>
      </section>

      <section>
        <title>Subsystem-ContactAddress: 2400 Oswego Road, Austin, TX
        74563</title>

        <para>The Subsystem-ContactAddress header identifies the contact
        address where problems with the subsystem may be reported; for
        example, an email address.</para>
      </section>

      <section>
        <title>Subsystem-Content: com.acme.logging</title>

        <para>The Subsystem-Content header lists requirements for resources
        that are considered to be the contents of this Subsystem. See <xref linkend="i3321875"/>.</para>
      </section>

      <section>
        <title>Subsystem-Copyright: OSGi (c) 2014</title>

        <para>The Subsystem-Copyright header identifies the subsystem's
        copyright information.</para>
      </section>

      <section>
        <title>Subsystem-Description: The ACME Account Admin
        Application</title>

        <para>The Subsystem-Description header defines a human-readable
        description for this Subsystem, which can potentially be
        localized.</para>
      </section>

      <section>
        <title>Subsystem-DocURL: http://www.example.com/Firewall/doc</title>

        <para>The Subsystem-DocURL header identifies the subsystem's
        documentation URL, from which further information about the subsystem
        may be obtained.</para>
      </section>

      <section>
        <title>Subsystem-ExportService: org.acme.billing.Account;
        filter:="(user=bob)"</title>

        <para>The Subsystem-ExportService header specifies the exported
        services for a Scoped Subsystem. See <xref linkend="i3321933"/>.</para>
      </section>

      <section>
        <title>Subsystem-Icon: /icons/acme-logo.png; size=64</title>

        <para>The optional Subsystem-Icon header provides a list of URLs to
        icons representing this subsystem in different sizes. The following
        attribute is permitted: <itemizedlist>
            <listitem>
              <para>size - (integer) Specifies the size of the icon in pixels
              horizontal. It is recommended to always include a 64x64
              icon.</para>
            </listitem>
          </itemizedlist> The URLs are interpreted as relative to the
        subsystem archive. That is, if a URL with a scheme is provided, then
        this is taken as an absolute URL. Otherwise, the path points to an
        entry in the subsystem archive file.</para>
      </section>

      <section>
        <title>Subsystem-ImportService: org.acme.billing.Account;
        filter:="(type=premium)"</title>

        <para>The Subsystem-ImportService header specifies the imported
        services for a Scoped Subsystem. See <xref linkend="i3322018"/>.</para>
      </section>

      <section>
        <title>Subsystem-License:
        http://www.opensource.org/licenses/jabberpl.php</title>

        <para>The Subsystem-License header provides an optional machine
        readable form of license information. The purpose of this header is to
        automate some of the license processing required by many organizations
        like for example license acceptance before a subsystem is used. The
        header is structured to provide the use of unique license naming to
        merge acceptance requests, as well as links to human readable
        information about the included licenses. This header is purely
        informational for management agents and must not be processed by the
        Subsystems implementation.</para>

        <para>The syntax for this header is as follows:</para>

        <programlisting>Subsystem-License ::= '&lt;&lt;EXTERNAL&gt;&gt;' | 
                      ( license ( ',' license ) * )
license        ::= name ( ';' license-attr ) *
license-attr   ::= description | link
description    ::= 'description' '=' string
link           ::= 'link' '=' &lt;url&gt;</programlisting>

        <para>This header has the following attributes:</para>

        <itemizedlist>
          <listitem>
            <para><code>name</code> - Provides a globally unique name for this
            license, preferably world wide, but it should at least be unique
            with respect to the other clauses. The magic name
            <code>&lt;&lt;EXTERNAL&gt;&gt;</code> is used to indicate that
            this artifact does not contain any license information but that
            licensing information is provided in some other way. This is also
            the default contents of this header.</para>

            <para>Clients of this subsystem can assume that licenses with the
            same name refer to the same license. This can for example be used
            to minimize the click through licenses. This name should be the
            canonical URL of the license, it must not be localized by the
            translator. This URL does not have to exist but must not be used
            for later versions of the license. It is recommended to use URLs
            from <xref linkend="subsystems.osi"/>. Other licenses should use
            the following structure, but this is not mandated:</para>
          </listitem>
        </itemizedlist>

        <programlisting>  http://&lt;domain-name&gt;/licenses/
            &lt;license-name&gt;-&lt;version&gt;.&lt;extension&gt;</programlisting>

        <itemizedlist>
          <listitem>
            <para><code>description</code> - (optional) Provide the
            description of the license. This is a short description that is
            usable in a list box on a UI to select more information about the
            license.</para>
          </listitem>

          <listitem>
            <para><code>link</code> - (optional) Provide a URL to a page that
            defines or explains the license. If this link is absent, the name
            field is used for this purpose. The URL is relative to the root of
            the bundle. That is, it is possible to refer to a file inside the
            bundle.</para>
          </listitem>
        </itemizedlist>

        <para>If the Subsystem-License statement is absent, then this does not
        mean that the subsystem is not licensed. Licensing could be handled
        outside the subsystem and the <code>&lt;&lt;EXTERNAL&gt;&gt;</code>
        form should be assumed. This header is informational and may not have
        any legal bearing. Consult a lawyer before using this header to
        automate licensing processing.</para>
      </section>

      <section>
        <title>Subsystem-Localization: OSGI-INF/l10n/subsystem</title>

        <para>The Subsystem-Localization header identifies the default base
        name of the localization properties files contained in the subsystem
        archive. The default value is <code>OSGI-INF/l10n/subsystem</code>.
        Translations are therefore, by default,
        <code>OSGI-INF/l10n/subsystem_de.properties </code>,
        <code>OSGI-INF/l10n/subsystem_nl.properties</code>, and so on. The
        location is relative to the root of the subsystem archive. See <xref linkend="service.subsystem-subsystem.localization.detail"/></para>
      </section>

      <section>
        <title>Subsystem-ManifestVersion: 1</title>

        <para>The Subsystem-ManifestVersion header defines that the Subsystem
        follows the rules of a Subsystems Specification. It is 1 (the default)
        for this version of the specification. Future versions of the
        Subsystems Specification can define higher numbers for this
        header.</para>
      </section>

      <section>
        <title>Subsystem-Name: Account Application</title>

        <para>The Subsystem-Name header defines a short, human-readable name
        for this Subsystem which may be localized. This should be a short,
        human-readable name that can contain spaces.</para>
      </section>

      <section>
        <title>Subsystem-SymbolicName: com.acme.subsystem.logging</title>

        <para>The Subsystem-SymbolicName header specifies a non-localizable
        name for this Subsystem. The Subsystem symbolic name together with a
        version identify a Subsystem Definition though a Subsystem can be
        installed multiple times in a framework. The Subsystem symbolic name
        should be based on the reverse domain name convention. See <xref linkend="i3322062"/>.</para>
      </section>

      <section>
        <title>Subsystem-Type: osgi.subsystem.application</title>

        <para>The Subsystem-Type header specifies the type for this Subsystem.
        Three types of Subsystems must be supported:
        <code>osgi.subsystem.application</code>,
        <code>osgi.subsystem.composite</code> and
        <code>osgi.subsystem.feature</code>. See <xref linkend="i3322207"/>
        for details about the three different types of Subsystems. See <xref linkend="i3322247"/> for more information about the values for the
        Subsystem-Type header.</para>
      </section>

      <section>
        <title>Subsystem-Vendor: OSGi Alliance</title>

        <para>The Subsystem-Vendor header contains a human-readable
        description of the subsystem vendor.</para>
      </section>

      <section>
        <title>Subsystem-Version: 1.0</title>

        <para>The Subsystem-Version header specifies the version of this
        Subsystem. See <xref linkend="i3322283"/>.</para>
      </section>
    </section>

    <section xml:id="i3322207">
      <title>Subsystem Identifiers and Type</title>

      <para>A Subsystem is identified by a number of names that vary in their
      Scope:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Subsystem identifier</emphasis> - A long that is a
          Subsystems implementation assigned unique identifier for the full
          lifetime of an installed Subsystem, even if the framework or the
          Subsystem's implementation is restarted. Its purpose is to
          distinguish Subsystems installed in a framework. Subsystem
          identifiers are assigned in ascending order to Subsystems when they
          are installed. The <xref linkend="org.osgi.service.subsystem.Subsystem.getSubsystemId--" xrefstyle="hyperlink"/> method returns a Subsystem's
          identifier.</para>
        </listitem>

        <listitem>
          <para><emphasis>Subsystem location</emphasis> - A name assigned by a
          management agent to a Subsystem during the installation. This string
          is normally interpreted as a URL to the Subsystem Archive but this
          is not mandatory. Within a particular framework, a Subsystem
          location must be unique. A location string uniquely identifies a
          Subsystem. The <xref linkend="org.osgi.service.subsystem.Subsystem.getLocation--" xrefstyle="hyperlink"/> method returns a Subsystem's
          location.</para>
        </listitem>

        <listitem>
          <para><emphasis>Subsystem Symbolic Name and Subsystem
          Version</emphasis> - A name and version assigned by the developer.
          The combination of a Subsystem symbolic name and Subsystem version
          is intended to provide a globally unique identifier for a Subsystem
          Archive or Subsystem definition. The <xref linkend="org.osgi.service.subsystem.Subsystem.getSymbolicName--" xrefstyle="hyperlink"/> method returns the assigned Subsystem name.
          The <xref linkend="org.osgi.service.subsystem.Subsystem.getVersion--" xrefstyle="hyperlink"/> method returns the assigned version. Though
          this pair is intended to be unique, it is developer assigned and
          there is no verification at runtime that the pair uniquely
          identifies a Subsystem Archive. It is possible to install a
          Subsystem multiple times as long as the multiple Subsystem symbolic
          name and version pairs are isolated from each other by Subsystem
          sharing policies.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i3322062">
      <title>Subsystem-SymbolicName Header</title>

      <para>The Subsystem-SymbolicName header specifies the symbolic name of
      the Subsystem. The Subsystem-SymbolicName header may also specify
      arbitrary matching attributes. Subsystem-SymbolicName is an optional
      header; the default value is derived as described in <xref linkend="i3322503"/>.</para>

      <para>The Subsystem-SymbolicName header must conform to the following
      syntax:</para>

      <programlisting>Subsystem-SymbolicName ::= symbolic-name(';' parameter )*</programlisting>

      <para>No directives are defined by this specification for the
      Subsystem-SymbolicName header. The header allows the use of arbitrary
      attributes that can be required by the Subsystem-Content header.</para>
    </section>

    <section xml:id="i3322283">
      <title>Subsystem-Version Header</title>

      <para>The Subsystem-Version header is optional and must conform to the
      following syntax:</para>

      <programlisting>Subsystem-Version ::= version</programlisting>

      <para>If the Subsystem-Version header is not specified then the default
      value is derived as described in <xref linkend="i3322503"/>.</para>
    </section>

    <section xml:id="i3322247">
      <title>Subsystem-Type Header</title>

      <para>The Subsystem-Type header specifies the <emphasis>type</emphasis>
      of the Subsystem. Three types of Subsystems are defined by this
      specification:</para>

      <itemizedlist>
        <listitem>
          <para><code>osgi.subsystem.application</code></para>
        </listitem>

        <listitem>
          <para><code>osgi.subsystem.composite</code></para>
        </listitem>

        <listitem>
          <para><code>osgi.subsystem.feature</code></para>
        </listitem>
      </itemizedlist>

      <para>See <xref linkend="i3322905"/> for details about the three
      different types of Subsystems. Subsystem-Type is an optional header; the
      default value is <code>osgi.subsystem.application</code>.</para>

      <para>The following directive must be recognized for the Subsystem-Type
      header:</para>

      <itemizedlist>
        <listitem>
          <para><code>provision-policy</code> -
          (<code>rejectDependencies|acceptDependencies</code>) Directive used
          to declare if the Subsystem is willing to accept dependencies as
          <emphasis>constituents</emphasis>. A
          <emphasis>constituent</emphasis> is the term used to refer to a
          resource that belongs to one or more Subsystems. It can belong to a
          Subsystem as a result of being listed as content or, as described
          here, can have been provisioned into the Subsystem as a dependency.
          The default policy is <code>rejectDependencies</code>. See <xref linkend="i3323024"/> for installing and tracking dependencies. The
          value <code>acceptDependencies</code> must not be used for Feature
          Subsystems. If a Feature Subsystem attempts to use the
          <code>acceptDependencies</code> policy then the Subsystem
          installation must fail. If the <code>provision-policy</code>
          directive is declared and has any other value besides
          <code>acceptDependencies</code> or <code>rejectDependencies</code>
          then the Subsystem installation must fail.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i3322503">
      <title>Deriving the Subsystem Identity</title>

      <para>If the Subsystem-SymbolicName and Subsystem-Version are not
      specified, then the following rules are defined for deriving the values
      of the Subsystem's symbolic name and version. If not otherwise
      specified, the default value of the version is
      <code>0.0.0</code>.</para>

      <para>When installing a Subsystem, the following URI syntax must be used
      as the location string in order to specify default values.</para>

      <programlisting>subsystem-uri ::= 'subsystem://' url? '?' params?
params        ::= param ( '&amp;' param )*
param         ::= key '=' value
key           ::= unreserved | escaped
value         ::= unreserved | escaped
url           ::= &lt;see <xref linkend="i3323132"/>&gt; 
escaped       ::= &lt;see <xref linkend="i3323360"/>&gt;
unreserved    ::= &lt;see <xref linkend="i3323360"/>&gt;</programlisting>

      <para>The query parameters represent Subsystem Manifest header names and
      values. Implementations must support the Subsystem-SymbolicName and
      Subsystem-Version parameters. Implementations can support additional
      parameters but must fail the installation if any unsupported parameters
      are included.</para>

      <para>As an example, the following Subsystem URI has an embedded URL
      of:</para>

      <programlisting>http://www.foo.com/sub#system.esa</programlisting>

      <para>It includes a default symbolic name of <code>com.acme.foo</code>
      and default version of <code>1.0.0</code>.</para>

      <programlisting>subsystem://http%3A%2F%2Fwww.foo.com%2Fsub%2523system.esa? «
    Subsystem-SymbolicName=com.acme.foo&amp;Subsystem-Version=1.0.0</programlisting>

      <para>When installing a Subsystem containing other Subsystem Archives
      with no symbolic name or version, values will be derived from the
      Subsystem Archive file or resource name. The syntax is as
      follows:</para>

      <programlisting>subsystem-archive ::= symbolic-name ( '@'version ) '.esa'</programlisting>

      <para>If the symbolic name is not provided in the manifest and cannot be
      computed by any other means then the Subsystem must fail to
      install.</para>
    </section>

    <section>
      <title>Subsystem Identity Capability</title>

      <para>The Subsystem's symbolic name, version, type and the arbitrary
      matching attributes specified on the Subsystem-SymbolicName header
      compose the <code>osgi.identity</code> capability for a Subsystem
      resource. The <code>osgi.identity</code> capability is provided by a
      Subsystem resource when contained within a Repository service, see <xref linkend="service.repository"/>. For example:</para>

      <programlisting>Subsystem-SymbolicName: org.acme.billing;category=banking
Subsystem-Version:      1.0.0
Subsystem-Type:         osgi.subsystem.composite</programlisting>

      <para>The above headers are used to declare a Subsystem of type
      <code>osgi.subsystem.composite</code> with the symbolic name of
      <code>org.acme.billing</code>, version of 1.0.0 and arbitrary matching
      attribute <code>category</code> of <code>banking</code>. This
      information will also be reflected in the <code>osgi.identity</code>
      capability of the Subsystem's Resource
      (<code>org.osgi.resource.Resource</code>). The following
      <code>osgi.identity</code> capability would be generated for a Subsystem
      resource from the above headers using the Provide-Capability header
      syntax. For example:</para>

      <programlisting>osgi.identity;
osgi.identity=org.acme.billing;
 version:Version=1.0.0;
 type=osgi.subsystem.composite;
 category=banking</programlisting>

      <para>This allows for requirements to be used to search a repository for
      Subsystems. The following requirement could be used to search for all
      Subsystems of type <code>osgi.subsystem.composite</code> using the
      Require-Capability header syntax. For example:</para>

      <programlisting>osgi.identity; filter:="(type=osgi.subsystem.composite)"</programlisting>
    </section>

    <section xml:id="service.subsystem-subsystem.localization.detail">
      <title>Subsystem-Localization Header</title>

      <para>For consistency and ease of comprehension, the design for
      localizing subsystem manifest headers follows the approach used by
      bundles.</para>

      <section>
        <title>Localization Properties</title>

        <para>A localization entry contains key/value entries for localized
        information. All headers in a subsystem's manifest can be localized.
        However, the subsystems implementation must always use the
        non-localized versions of headers that have subsystem semantics. Note
        that the use of localization on certain such headers, such as
        Subsystem-SymbolicName, may cause errors as a value with a % sign will
        not be valid.</para>

        <para>A localization key can be specified as the value of a
        subsystem's manifest header using the following syntax:</para>

        <programlisting>header-value ::= ’%’text
text ::= &lt; any value which is both a valid manifest header value and a valid
    property key name &gt;</programlisting>

        <para>For example, consider the following subsystem manifest
        entries:</para>

        <programlisting>Subsystem-Name: %acme subsystem
Subsystem-Description: %acme description
Subsystem-SymbolicName: acme.Subsystem
Acme-Defined-Header: %acme special header</programlisting>

        <para>User-defined headers can also be localized. Spaces in the
        localization keys are explicitly allowed.</para>

        <para>The previous example manifest entries could be localized by the
        following entries in the manifest localization entry <code>
        OSGI-INF/l10n/subsystem.properties</code>.</para>

        <programlisting># subsystem.properties
acme\ subsystem=The ACME Subsystem
acme\ description=The ACME Subsystem provides all of the ACME \ services
acme\ special\ header=user-defined Acme Data</programlisting>

        <para>The above manifest entries could also have French localizations
        in the manifest localization entry:</para>

        <programlisting>OSGI-INF/l10n/subsystem_fr_FR.properties.</programlisting>
      </section>

      <section>
        <title>Locating Localization Entries</title>

        <para>The Subsystems implementation must search for localization
        entries by appending suffixes to the localization base name according
        to a specified locale and finally appending the .properties suffix. If
        a translation is not found, the locale must be made more generic by
        first removing the variant, then the country and finally the language
        until an entry is found that contains a valid translation. For
        example, looking up a translation for the locale
        <code>en_GB_welsh</code> will search in the following order:</para>

        <programlisting>OSGI-INF/l10n/subsystem_en_GB_welsh.properties
OSGI-INF/l10n/subsystem_en_GB.properties
OSGI-INF/l10n/subsystem_en.properties
OSGI-INF/l10n/subsystem.properties</programlisting>
      </section>
    </section>
  </section>

  <section>
    <title>Subsystem Region</title>

    <para>A <emphasis>Region</emphasis> provides isolation for a group of one
    or more Subsystems. Each Subsystem installed must be a member of one and
    only one Region. A Region consists of one and only one Scoped Subsystem
    and optionally a set of Unscoped Subsystems. Every Region has one and only
    one Parent Region, with the exception of the Root Region which has no
    Parent Region. The Region parent <phrase role="symbol">→</phrase> child
    connections form the <emphasis>Region Tree</emphasis>, which by definition
    contains no cycles.</para>

    <para>Each Region, except the Root Region, has a <emphasis>sharing
    policy</emphasis> associated with it which is defined by a Scoped
    Subsystem. A <emphasis>sharing policy</emphasis> consists of two
    parts:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Export Policy</emphasis> - Defines the set of
        capabilities provided by the constituents contained in the Region that
        are made available to the parent Region.</para>
      </listitem>

      <listitem>
        <para><emphasis>Import Policy</emphasis> - Defines the set of
        capabilities which are available in the parent Region that are made
        available to the child Region.</para>
      </listitem>
    </itemizedlist>

    <para><xref linkend="i3296632"/> illustrates a set of Regions that contain
    capabilities and requirements for a capability. For the purposes of this
    illustration the Subsystems and resources have been omitted.</para>

    <figure xml:id="i3296632">
      <title>Regions and Import/Export</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.700in" contentwidth="6.209in" fileref="regions-import-export.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>In this example some constituent of Region <code>S1Region</code>
    provide a capability <code>S1</code><phrase role="symbol">→</phrase><code>X</code>. The <code>S1Region</code>'s
    sharing policy exports the capability <code>S1</code><phrase role="symbol">→</phrase><code>X</code> to its parent
    <code>RootRegion</code>. The <code>RootRegion</code> contains a
    constituent which has a requirement <code>Root</code><phrase role="symbol">→</phrase><code>X</code>. The export sharing policy of
    <code>S1Region</code> allows visibility to the capability
    <code>S1</code><phrase role="symbol">→</phrase><code>X</code> from the
    <code>RootRegion</code> which allows requirement <code>Root</code><phrase role="symbol">→</phrase><code>X</code> to be satisfied by the capability
    <code>S1</code><phrase role="symbol">→</phrase><code>X</code>. The
    <code>S2Region</code> also contains a constituent which has a requirement
    on <code>S2</code><phrase role="symbol">→</phrase><code>X</code>. The
    sharing policy of <code>S2Region</code> imports the capability
    <code>X</code> from its parent Region <code>RootRegion</code>. Since
    <code>RootRegion</code> has visibility to the capability
    <code>S1</code><phrase role="symbol">→</phrase><code>X</code> this allows
    <code>S2Region</code> to also have visibility to capability
    <code>S1</code><phrase role="symbol">→</phrase><code>X</code> through its
    import sharing policy which allows requirement <code>S2</code><phrase role="symbol">→</phrase><code>X</code> to be satisfied by the capability
    <code>S1</code><phrase role="symbol">→</phrase><code>X</code>.</para>

    <para>Sharing policies of the Regions allow for a capability to be shared
    across an arbitrary number of Regions. For those familiar with the Region
    digraph, see <xref linkend="i3324343"/>, the connections between Subsystem
    Regions is more restrictive than what the full Region digraph
    specification allows. A <emphasis>visibility path </emphasis>is the path
    over the sharing policies of the Region tree from a requirement to a
    capability that allows a requirement to get wired to a capability. Since
    all (non-Root) Regions have one and only one Parent Region the
    <emphasis>visibility paths</emphasis> over the sharing policies between a
    requirement and a capability is limited to 0 or 1. <xref linkend="i3297602"/> is another figure that illustrates a capability being
    shared across many different Regions.</para>

    <figure xml:id="i3297602">
      <title>Regions and Sharing Capabilities</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.491in" contentwidth="6.209in" fileref="regions-sharing-capabilities.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>In this example the capability <code>S3</code><phrase role="symbol">→</phrase><code>X</code> is exported by the
    <code>S3Region</code> sharing policy to its parent <code>S1Region</code>.
    <code>S1Region</code> also exports <code>X</code> to its parent
    <code>RootRegion</code>. Then <code>S2Region</code> imports <code>X</code>
    from its parent <code>RootRegion</code> and finally <code>S4Region</code>
    imports <code>X</code> from its parent <code>S2Region</code>. The
    visibility path from requirement <code>S4</code><phrase role="symbol">→</phrase><code>X</code> to capability
    <code>S3</code><phrase role="symbol">→</phrase><code>X</code> is the
    following: <code>S4</code> <phrase role="symbol">→</phrase>
    <code>S2</code> <phrase role="symbol">→</phrase> <code>Root</code> <phrase role="symbol">→</phrase> <code>S1</code> <phrase role="symbol">→</phrase>
    <code>S3</code>.</para>

    <para>Notice that in this example the <code>S5Region</code> also has a
    sharing policy that imports <code>X</code> from its parent
    <code>S3Region</code>. Child Regions are allowed to import any capability
    to which the Parent Region has visibility. This is true even if the Parent
    Region does not export the capability. Regions can selectively choose what
    capabilities they want to expose (or export) to their Parent Region. Child
    Regions also can selectively choose what capabilities they want to be
    exposed to (or import) from their Parent Region. A Parent Region has no
    control over what capabilities its children have visibility. Similarly a
    Parent Region has no control over what capabilities a Child Region is
    allowed to export to the Parent Region. In other words, a Parent Region
    must give a Child Region everything the Child Region asks for (if the
    Parent Region has access to it) and a Parent Region must accept everything
    a Child Region offers to the Parent Region.</para>
  </section>

  <section>
    <title>Subsystem Relationships</title>

    <para>Subsystems installed into a framework become part of the
    <emphasis>Subsystem graph</emphasis>. The Subsystem graph may be thought
    of as is directed acyclic graph with one and only one source vertex, which
    is the Root Subsystem. The edges have the child as the head and parent as
    the tail (parent<phrase role="symbol">→</phrase>child). This is depicted
    in <xref linkend="i3298109"/>.</para>

    <figure xml:id="i3298109">
      <title>Parent Child Relationship</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.207in" contentwidth="6.209in" fileref="parent-child-relationship.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>A Subsystem installed into or included within one or more Subsystems
    is called a <emphasis>child Subsystem</emphasis>. A Subsystem which has
    one or more child Subsystem(s) installed or included in it is called a
    <emphasis>parent Subsystem</emphasis>. Note that a Subsystem may be both a
    parent and child Subsystem. The Subsystem graph has the following
    rules:</para>

    <itemizedlist>
      <listitem>
        <para>There is one and only one source vertex (i.e. a Subsystem with
        no parents), which is the <emphasis>Root Subsystem</emphasis>.</para>
      </listitem>

      <listitem>
        <para>The Root Subsystem is considered a Scoped Subsystem of type
        <code>application</code> with a <code>provision-policy</code> of
        <code>acceptDependencies</code>.</para>
      </listitem>

      <listitem>
        <para>The Root Subsystem has a symbolic name of
        <code>org.osgi.service.subsystem.root</code>, version 1.0.0, Subsystem
        identifier of 0, and a location of <programlisting>subsystem://?Subsystem-SymbolicName=org.osgi.service.subsystem.root&amp; «
    Subsystem-Version=1.0.0</programlisting></para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>The Root Subsystem always exists when a Subsystems
        implementation is active, even if no other Subsystems are installed
        and all initial bundles installed into the framework along with the
        Subsystems implementation are considered content resources of the Root
        Subsystem.</para>
      </listitem>

      <listitem>
        <para>All other (non-root) Subsystems must have one or more parent
        Subsystems. This implies that there are no orphan Subsystems (except
        the Root Subsystem) and the Subsystem graph is fully connected.</para>
      </listitem>

      <listitem>
        <para>All parents of a Subsystem belong to the same Region.</para>
      </listitem>

      <listitem>
        <para>An Unscoped Subsystem must belong to the same Region to which
        its parents belong.</para>
      </listitem>

      <listitem>
        <para>A Scoped Subsystem (other than the Root Subsystem) must belong
        to a child Region of the Region to which the Subsystem's parents
        belong.</para>
      </listitem>
    </itemizedlist>

    <para>When a Subsystem is installed using a Subsystem service <xref linkend="org.osgi.service.subsystem.Subsystem.install-String-" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.subsystem.Subsystem.install-String-InputStream-" xrefstyle="hyperlink"/> method the <emphasis>Subsystem resource
    </emphasis>becomes a constituent of the Subsystem which the
    <code>install</code> method was called on. The <emphasis>Subsystem
    resource </emphasis>is the Subsystem Archive and may be retrieved by
    calling the Subsystem service <xref linkend="org.osgi.service.subsystem.Subsystem.getConstituents--" xrefstyle="hyperlink"/> method. <xref linkend="i3298109"/> illustrates the
    Root Subsystem with initial bundles <code>A</code>, <code>B</code>,
    <code>SI</code> (Subsystems implementation, may be multiple bundles), and
    the system bundle (identifier 0).</para>

    <figure xml:id="i3298464">
      <title>Subsystem resources</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="0.938in" contentwidth="6.209in" fileref="subsystem-resources.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>In <xref linkend="i3298464"/> Bundles <code>A</code>, <code>B</code>
    and <code>SI</code> are considered constituents of the Root Subsystem. The
    system bundle is also considered to be a constituent of the Root Subsystem
    (bundle zero). A Subsystem service <code>R</code> is registered that
    represents the Root Subsystem. When Subsystems are installed using the
    Root Subsystem then these Subsystem resources become constituents of the
    Root Subsystem and the Subsystems become child Subsystems of the Root
    Subsystem. For example, <xref linkend="i3328151"/> illustrates the Root
    Subsystem with Scoped Subsystem <code>S1</code> with constituent bundles
    <code>C</code> and <code>D</code> and Scoped Subsystem <code>S2</code>
    with constituent bundles <code>E</code> and <code>F</code>:</para>

    <figure xml:id="i3328151">
      <title>Subsystems</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.565in" contentwidth="6.209in" fileref="subsystems.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The two Subsystems <code>S1</code> and <code>S2</code> have the same
    parent and Subsystems <code>S1</code> and <code>S2</code> are children of
    the Root Subsystem. <xref linkend="i3328220"/> shows a more complicated
    tree that has both Scoped and Unscoped Subsystems installed. This figure
    omits the constituent resources and Subsystem services:</para>

    <figure xml:id="i3328220">
      <title>Parent Child Relationship with Unscoped Subsystems</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.310in" contentwidth="6.209in" fileref="parent-child-unscoped.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <section>
      <title>Prevent Cycles and Recursion</title>

      <para>It is possible to end up with cycles in the parent <phrase role="symbol">→</phrase> child relationships between Subsystems
      contained in the same Region. <xref linkend="i3328641"/> illustrates
      this.</para>

      <figure xml:id="i3328641">
        <title>Subsystems and cycles</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.095in" contentwidth="6.209in" fileref="subsystems-cycles.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>In this example Subsystem S1 has been installed. The Scoped
      Subsystem <code>S1</code> has included in its constituents the Unscoped
      Subsystems <code>U1</code> and <code>U2</code>. Furthermore<code>
      U1</code> has included the Unscoped Subsystem <code>U2</code> as a
      constituent and <code>U2</code> has included the Unscoped Subsystem
      <code>U1</code> as a constituent. This causes Unscoped Subsystem
      <code>U1</code> to have parents <code>S1</code> and <code>U2</code> and
      Unscoped Subsystem <code>U2</code> to have parents <code>S1</code> and
      <code>U1</code>. There is now a cycle between the Subsystems
      <code>U1</code> and <code>U2</code>. Subsystems implementations must
      detect this cycle and fail the installation of such a degenerative
      Subsystem. The top level Subsystem being installed must fail the install
      operation by throwing a Subsystem Exception. In this case the install
      operation of the <code>S1</code> Subsystem must fail with a Subsystem
      Exception being thrown.</para>

      <para>Cycles may also exist in the definition of Scoped Subsystems which
      includes other child Subsystems. <xref linkend="i3329066"/> illustrates
      this.</para>

      <figure xml:id="i3329066">
        <title>Scoped Subsystems and cycles</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="0.556in" contentwidth="6.209in" fileref="scoped-subsystems-cycles.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>In this example the Scoped Subsystem <code>S1</code> includes as a
      child the Scoped Subsystem <code>S2</code>. The <code>S2</code>
      Subsystem also includes as a child the Scoped Subsystem <code>S1</code>.
      Subsystems implementations must detect this and fail the installation of
      such a degenerative Subsystem. The top level Subsystem being installed
      must fail the install operation by throwing a Subsystem Exception. In
      this case the install operation of the first <code>S1</code> Subsystem
      must fail by throwing a Subsystem Exception.</para>
    </section>
  </section>

  <section xml:id="i3346687">
    <title>Determining Content</title>

    <para>A Subsystem definition may declare different types of
    <emphasis>content resources</emphasis>. A Subsystems implementation may
    support additional types, but the following types must be
    supported:</para>

    <itemizedlist>
      <listitem>
        <para><code>osgi.bundle</code></para>
      </listitem>

      <listitem>
        <para><code>osgi.fragment</code></para>
      </listitem>

      <listitem>
        <para><code>osgi.subsystem.application</code></para>
      </listitem>

      <listitem>
        <para><code>osgi.subsystem.feature</code></para>
      </listitem>

      <listitem>
        <para><code>osgi.subsystem.composite</code></para>
      </listitem>
    </itemizedlist>

    <para>A Subsystems implementation is free to support additional content
    types as value-add, but an implementation is required to fail the
    installation of a Subsystem which declares content resource types which
    are not recognized by the implementation.</para>

    <para>The individual content resources may be specified in the following
    ways:</para>

    <itemizedlist>
      <listitem>
        <para>The Subsystem-Content header, or</para>
      </listitem>

      <listitem>
        <para>The entries of the Subsystem Local Repository, see <xref linkend="i3385009"/>.</para>
      </listitem>
    </itemizedlist>

    <section xml:id="i3321875">
      <title>Subsystem-Content Header</title>

      <para>The Subsystem-Content header contains a list of symbolic names,
      with optional attribute and directive assertions. Each element specifies
      a single resource that is to be a content resource of the Subsystem. See
      also <xref linkend="i3329153"/>. The Subsystem-Content header must
      conform to the following syntax:</para>

      <programlisting>Subsystem-Content ::= resource ( ','resource )*
resource          ::= symbolic-name ( ';' parameter )*</programlisting>

      <para>The Subsystem-Content header may specify the following
      directives:</para>

      <itemizedlist>
        <listitem>
          <para><code>resolution</code> - (<code>mandatory</code>|
          <code>optional</code>) A <code>mandatory</code> content resource
          prevents the Subsystem from successfully installing when the
          constituent cannot be found (or satisfied); an optional content
          resource allows a Subsystem to successfully install even if the
          content cannot be found (or satisfied). The default value is
          <code>mandatory</code>.</para>
        </listitem>

        <listitem>
          <para><code>start-order</code> - (<code>Integer &gt;= 1</code>)
          Specifies the start order of the content resource in relation to
          other content resources of the Subsystem. See <xref linkend="i3329174"/>.</para>
        </listitem>
      </itemizedlist>

      <para>The Subsystem-Content header may specify the following architected
      matching attributes as well as any arbitrary matching attributes:</para>

      <itemizedlist>
        <listitem>
          <para><code>version</code> - (<code>Version</code>) A version range
          used to select the version of the resource to use. This follows the
          OSGi version range scheme, including the default value of
          0.0.0.</para>
        </listitem>

        <listitem>
          <para><code>type</code> - Indicates the type of the content. It is
          recommended that a reverse domain name convention is used unless
          those types and their processing is standardized by the OSGi
          Alliance, for example bundles. The default type is
          <code>osgi.bundle</code>. A Subsystems implementation may support
          additional types, but the following types must be supported:</para>

          <itemizedlist>
            <listitem>
              <para><code>osgi.bundle</code></para>
            </listitem>

            <listitem>
              <para><code>osgi.fragment</code></para>
            </listitem>

            <listitem>
              <para><code>osgi.subsystem.application</code></para>
            </listitem>

            <listitem>
              <para><code>osgi.subsystem.composite</code></para>
            </listitem>

            <listitem>
              <para><code>osgi.subsystem.feature</code></para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <para>For example, the following header specifies three Subsystem
      constituents:</para>

      <programlisting>Subsystem-Content:
    org.acme.billing.impl;
        type=osgi.bundle;
        version=1.0,
    org.acme.billing.frag;
        type=osgi.fragment;
        version=1.0,
    org.acme.billing.credit.subsystem;
        type=osgi.subsystem.composite;
        version=1.0</programlisting>

      <para>The above header specifies three content resources of a
      Subsystem:</para>

      <itemizedlist>
        <listitem>
          <para>A bundle resource with the symbolic name
          <code>org.acme.billing.impl</code> at <code>version</code> 1.0 or
          greater</para>
        </listitem>

        <listitem>
          <para>A fragment resource with the symbolic name
          <code>org.acme.billing.frag</code> at <code>version</code> 1.0 or
          greater</para>
        </listitem>

        <listitem>
          <para>A child composite Subsystem resource with the symbolic name
          <code>org.acme.billing.credit.subsystem</code> at
          <code>version</code> 1.0 or greater</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i3329687">
      <title>Subsystem-Content Requirements</title>

      <para>Each element of the Subsystem-Content header is used to locate a
      resource that is to be used as content of the Subsystem. One way of
      describing the elements of the Subsystem-Content header is in terms of a
      Requirement using the <code>osgi.identity</code> namespace. The
      Requirement is defined in <xref linkend="i3394044"/>. To illustrate, a
      single Subsystem-Content element:</para>

      <programlisting>org.acme.billing.impl; 
    type=osgi.bundle;
    version=1.0</programlisting>

      <para>This Subsystem-Content header can be converted into the following
      <code>osgi.identity</code> Requirement with the Require-Capability
      syntax for illustration:</para>

      <programlisting>osgi.identity;
    filter:="(&amp;
        (osgi.identity=org.acme.billing.impl)
        (type=osgi.bundle)
        (version&gt;=1.0)
    )"</programlisting>

      <para>All directives specified on the Subsystem-Content header, except
      <code>start-order</code>, should be included in the Requirement. All
      attributes should be included in the <code>filter</code> directive of
      the Requirement. Notice that the <code>version</code> attribute is a
      range and must be converted into a proper filter. The
      <code>VersionRange.toFilter</code> method can be used to do this
      conversion. All other matching attributes are treated as type String and
      use an equality operation in the filter. Here is an example of a more
      complex transformation to Requirement:</para>

      <programlisting>org.acme.billing.credit.subsystem;
    type=osgi.subsystem.composite;
    version="[1.0, 1.1)";
    category=banking;
    resolution:=optional;
    start-order:=1</programlisting>

      <para>The above Subsystem-Content element converts into the following
      <code>osgi.identity</code> Requirement:</para>

      <programlisting>osgi.identity; 
    filter:="(&amp;
        (osgi.identity=org.acme.billing.impl)
        (type=osgi.subsystem.composite)
        (&amp;(version&gt;=1.0)(!(version&gt;=1.1))
            (category=banking)
        )"
    resolution:=optional</programlisting>
    </section>

    <section xml:id="i3321603">
      <title>Preferred-Provider Header</title>

      <para>The Preferred-Provider header contains a list of symbolic names,
      with optional attributes assertions. Each element specifies a single
      bundle or Subsystem resource that is to be preferred when resolving the
      requirements of the Subsystem content resources. The Preferred-Provider
      header must conform to the following syntax:</para>

      <programlisting>Preferred-Provider ::= resource (',' resource )*
resource           ::= symbolic-name ( ';' attribute )*</programlisting>

      <para>The Preferred-Provider header may specify the following
      architected matching attributes:</para>

      <itemizedlist>
        <listitem>
          <para><code>version</code> - (<code>Version</code>) A version range
          used to select the version of the bundle or Subsystem to use. This
          follows the OSGi version range scheme, including the default value
          of 0.0.0.</para>
        </listitem>

        <listitem>
          <para><code>type</code> - (String) Indicates the type of the
          provider. Valid types are:</para>

          <itemizedlist>
            <listitem>
              <para><code>osgi.bundle</code></para>
            </listitem>

            <listitem>
              <para><code>osgi.subsystem.composite</code></para>
            </listitem>

            <listitem>
              <para><code>osgi.subsystem.feature</code></para>
            </listitem>
          </itemizedlist>

          <para>The default type is <code>osgi.subsystem.composite</code>.
          Specifying an unsupported type results in an installation
          failure.</para>
        </listitem>
      </itemizedlist>

      <para>Each element of the Preferred-Provider header is used to locate a
      resource that is to be used as a preferred provider of the Subsystem.
      The Preferred-Provider header elements are converted to Requirements
      using the <code>osgi.identity</code> namespace just like the
      Subsystem-Content header except the default type is
      <code>osgi.subsystem.composite</code>. See <xref linkend="i3329687"/>.</para>

      <para>Because this header influences resolution, it is only valid for it
      to be used on a Scoped Subsystem. If a Subsystems implementation
      encounters this header on an Unscoped Subsystem, it must fail the
      installation of the Subsystem.</para>

      <para>The Preferred-Provider header has the effect of influencing the
      import policy into the Region representing the Scoped Subsystem that
      specified the header. If there are multiple candidate capabilities for a
      requirement and one or more of those capabilities is from a bundle or
      Subsystem identified in the Preferred-Provider header, then the Region
      import policy must prefer the capabilities from the preferred bundle or
      Subsystem.</para>

      <para>A resource may be considered as a preferred provider only if it is
      a constituent of either the Scoped Subsystem's or any ancestor's
      Region.</para>
    </section>

    <section xml:id="i3385009">
      <title>Resource Repositories</title>

      <para>When a Subsystem is installed the Subsystems implementation is
      responsible for provisioning resources that are associated with the
      Subsystem. For example, the Subsystem's content resources as well as any
      resources that are needed to satisfy dependencies of a Subsystem's
      content resources. During the Subsystem install process the Subsystems
      implementation uses a defined set of repositories to find the required
      resources needed to install a Subsystem. This set of repositories
      includes the following:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Local Repository</emphasis> - Contains the resources
          included in the Subsystem Archive, see <xref linkend="i3329832"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>System Repository</emphasis> - Contains the
          resources currently installed, see <xref linkend="i3329893"/></para>
        </listitem>

        <listitem>
          <para><emphasis>Repository Services</emphasis> - The set of
          repositories registered as OSGi services, see <xref linkend="i3329894"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Content Repository</emphasis> - The set of resources
          that comprise the Subsystem content, see <xref linkend="i3329906"/></para>
        </listitem>

        <listitem>
          <para><emphasis>Preferred Repository</emphasis> - The set of
          resources that are considered preferred providers, see <xref linkend="i3329932"/>.</para>
        </listitem>
      </itemizedlist>

      <section xml:id="i3329832">
        <title>Local Repository</title>

        <para>The Root of the Subsystem Archive contains 0 or more resources.
        The Subsystems implementation must read all entries (except directory
        entries) in the Root of the Subsystem Archive and treat each entry as
        a potential resource. One way of describing the resource entries
        contained in the Root of the Subsystem Archive is in the terms of an
        <code>Repository</code> implementation. For the purpose of this
        specification these resources are referred to as the Subsystem's
        <emphasis>Local Repository</emphasis>. The Local Repositories must not
        be registered as an OSGi Repository service. Also, it is not required
        that the Subsystem implementation actually implement a Local
        Repository as a concrete implementation of the Repository service
        interface.</para>
      </section>

      <section xml:id="i3329893">
        <title>System Repository</title>

        <para>The term <emphasis>System Repository</emphasis> is used to
        describe the set of resources that are constituents of one or more of
        the currently installed Subsystems. The System Repository must not be
        registered as an OSGi service. Also it is not required that System
        Repository be implemented as a concrete implementation of the
        Repository service. There is a single System Repository representing
        the resources installed in the OSGi framework.</para>
      </section>

      <section xml:id="i3329894">
        <title>Repository Services</title>

        <para>The repositories which are registered as Repository services,
        see <xref linkend="service.repository"/>. These Repositories are used
        to discover Subsystem content resources and dependencies. A Subsystems
        implementation searches registered Repository services by service
        ranking order.</para>
      </section>

      <section xml:id="i3329906">
        <title>Content Repository</title>

        <para>The set of content resources for a Subsystem is referred to as
        the Subsystem's Content Repository. Similar to the Local and System
        Repositories, the Content Repositories must not be registered as an
        OSGi service and it is not required that the Subsystems implementation
        actually implement a Content Repository as a concrete implementation
        of the Repository service. There are two types of resources that can
        exist in a Subsystem's Content Repository:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>Installable Content</emphasis> - A content
            resource which must be installed and result in a distinct resource
            at runtime. That is, a distinct bundle or Subsystem
            installation.</para>
          </listitem>

          <listitem>
            <para><emphasis>Shared Content</emphasis> - A content resource
            which is already installed and is a constituent of one or more
            already installed Subsystems that belong to the same Region as the
            Subsystem that the Subsystem content repository is for. This
            resource must be reused, the Subsystems implementation must not
            install another instance of the resource.</para>
          </listitem>
        </itemizedlist>

        <para>Details on how the content resources are discovered for the
        Content Repository are discussed in <xref linkend="i3329153"/>.</para>
      </section>

      <section xml:id="i3329932">
        <title>Preferred Repository</title>

        <para>The set of resources which are considered preferred providers of
        capabilities required by a Subsystem is referred to as the Preferred
        Provider Repository for the Subsystem. The Preferred Provider
        Repository for a Subsystem must not be registered as an OSGi service
        and it is not required that the Subsystems implementation actually
        implement the Preferred Provider Repository as a concrete
        implementation of the Repository service.</para>

        <para>The following steps must be followed to discover the resources
        of the preferred provider repository for a Subsystem:</para>

        <orderedlist>
          <listitem>
            <para>The Preferred-Provider header is parsed into a list of
            elements where each element specifies a single
            <code>osgi.identity</code> requirement, see <xref linkend="i3321603"/>.</para>
          </listitem>

          <listitem>
            <para>For each <code>osgi.identity</code> requirement a
            <code>Requirement</code> object is created and used to search
            Repositories for preferred provider resources.</para>
          </listitem>

          <listitem>
            <para>The System Repository is searched. For each capability found
            in the System Repository; if the resource providing the
            <code>osgi.identity</code> capability is a constituent contained
            in the parent Region of the Scoped Subsystem's Region then the
            providing Resource of the Capability is considered a preferred
            provider and the search stops; otherwise continue to the next
            step.</para>
          </listitem>

          <listitem>
            <para>The Subsystem's Local Repository is searched. If a
            capability is found then the providing resource is used as a
            preferred provider and the search stops; otherwise continue to the
            next step.</para>
          </listitem>

          <listitem>
            <para>The registered Repository services are searched. If a
            repository service finds a capability then the providing resource
            is used as a preferred provider and the search stops; otherwise
            the preferred provider is not found.</para>
          </listitem>
        </orderedlist>
      </section>
    </section>

    <section xml:id="i3329153">
      <title>Discovering Content Resources</title>

      <para>When a Subsystem is installed the Subsystems implementation must
      determine the set of resources that compose the content of the
      Subsystem. The content resources of a Subsystem may be specified in the
      following ways:</para>

      <itemizedlist>
        <listitem>
          <para>The values of the Subsystem-Content header must be used if it
          is present. See <xref linkend="i3321875"/>.</para>
        </listitem>

        <listitem>
          <para>The content of the Subsystem's Local Repository, if the
          Subsystem-Content header is not present.</para>
        </listitem>
      </itemizedlist>

      <para>When a Deployment Manifest is not present, <xref linkend="i3330073"/>, the Subsystems implementation must use this
      information to discover the content resources for a Subsystem as
      described in the following sections.</para>

      <section>
        <title>Declared Subsystem-Content</title>

        <para>If the Subsystem-Content manifest header is declared then the
        following steps must be followed to discover the Subsystem's
        contents:</para>

        <itemizedlist>
          <listitem>
            <para>The Subsystem-Content header is parsed into a list of
            elements where each element specifies a single
            <code>osgi.identity</code> requirement. For each
            <code>osgi.identity</code> requirement element a Requirement is
            created and used to search Repositories for content
            resources.</para>

            <itemizedlist>
              <listitem>
                <para>If the Subsystem is a Scoped Subsystem then continue to
                the next step; otherwise if the Subsystem is an Unscoped
                Subsystem then the System Repository must be searched in order
                to discover any currently installed resources that match the
                content Requirement. For each matching capability found it
                must be determined if the capability provider Resource is a
                constituent of a Subsystem which is in the same Region as the
                installing Subsystem; if so then the provider Resource must be
                used as an <emphasis>shared content</emphasis> resource. If no
                <emphasis>shared content</emphasis> resource is found then
                continue to the next step; otherwise the search stops.</para>
              </listitem>

              <listitem>
                <para>The Subsystem's Local Repository is searched to find a
                matching Capability for the content Requirement. If a
                Capability is found then the providing Resource of the
                Capability is used as an <emphasis>installable
                content</emphasis> resource of the Subsystem. If no
                <emphasis>installable content</emphasis> resource is found
                then continue to the next step, otherwise the search
                stops.</para>
              </listitem>

              <listitem>
                <para>The registered Repository services are searched to find
                a matching capability for the content Requirement. If a
                Repository finds a provider for the content requirement then
                the provider Resource of the capability is used as an
                <emphasis>installable content</emphasis> resource of the
                Subsystem. If no matching provider is found then the discovery
                of the content resource has failed.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Use Subsystem Local Repository</title>

        <para>If the Subsystem-Content header is not declared then the list of
        content resources is defined as all the Resources within the
        Subsystem's Local Repository which provide an
        <code>osgi.identity</code> capability with the type attribute
        of:</para>

        <itemizedlist>
          <listitem>
            <para><code>osgi.bundle</code></para>
          </listitem>

          <listitem>
            <para><code>osgi.fragment</code></para>
          </listitem>

          <listitem>
            <para><code>osgi.subsystem.application</code></para>
          </listitem>

          <listitem>
            <para><code>osgi.subsystem.composite</code></para>
          </listitem>

          <listitem>
            <para><code>osgi.subsystem.feature</code></para>
          </listitem>

          <listitem>
            <para>Any other type that is supported by the
            implementation.</para>
          </listitem>
        </itemizedlist>

        <para>If a resource is found to be an unsupported type then
        installation of the Subsystem must fail.</para>

        <para>For Scoped Subsystems this list is used as is and each Resource
        is considered an installable content resource. For Unscoped Subsystems
        the System Repository must be searched in order to determine if there
        are any already installed contents resources which may be used as a
        <emphasis>shared content</emphasis> resources. If no shared content
        resource can be found then the resource is considered an
        <emphasis>installable content</emphasis> resource.</para>
      </section>
    </section>
  </section>

  <section xml:id="i3330142">
    <title>Determining Dependencies</title>

    <para>When a Subsystem is installed the Subsystems implementation
    determines the set of resources that compose the content of the Subsystem.
    Content resources may have requirements on capabilities that are not
    provided by any of the content resources for the Subsystem. When a
    Subsystem is installed the Subsystems implementation must determine the
    set of additional resources that are required in order to allow the
    Subsystem's content resources to resolve. These additional resources are
    called <emphasis>dependencies</emphasis>. When a Subsystem is installed
    the set of dependencies contains two types of resources:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Installable Dependency</emphasis> - A resource which
        must be installed and result in a distinct resource at runtime. That
        is, a distinct bundle or Subsystem installation.</para>
      </listitem>

      <listitem>
        <para><emphasis>Preinstalled Dependency</emphasis> - A resource which
        is already installed and is a constituent of one or more already
        installed Subsystems and the required capabilities provided by the
        resource are accessible according to the sharing policies of the
        Subsystems. This resource must be reused, the Subsystems
        implementation must not install another instance of the
        resource.</para>
      </listitem>
    </itemizedlist>

    <para>When a Deployment Manifest is not present, see <xref linkend="i3330073"/>, the Subsystems implementation must determine the set
    of dependencies for the Subsystem. To determine the set of dependencies
    the Subsystems implementation should attempt to resolve the Subsystem
    content resources before installing the content resources. One possible
    way of resolving the content resources, before installing them, is to use
    a Resolver service, see <xref linkend="service.resolver"/>. This
    specification illustrates the behavior of dependency resource discovery
    using terms defined by the Resolver service. A Subsystems implementation
    is not required to use the Resolver service to accomplish dependency
    resource discovery. Other mechanisms may be used to accomplish the same
    goal as long as the resolution results in a valid class space. Subsystems
    implementations need not guarantee to find a solution to every resolution
    problem, but if a valid solution is not found, then discovery of the
    dependencies must fail, resulting in an installation failure.</para>

    <para>In order to use the Resolver service the Subsystems implementation
    has to provide a <code>ResolveContext</code> object that represents the
    currently installed Subsystems and their constituent resources. This
    resolve context must search Repositories in the following order when
    searching for capabilities to satisfy content dependencies within the
    <code>ResolveContext.findProviders</code> method. The Content Repository,
    Preferred Provider Repository, System Repository and Local Repository must
    all be searched and all the results presented to the Resolver with a
    corresponding preference. If a result was found in these repositories,
    searching the registered Repository services is optional, but if no result
    was found yet, the registered Repository services must be searched. The
    order of matching capabilities presented to the Resolver must coincide
    with the Repository search order.</para>

    <orderedlist>
      <listitem xml:id="service.subsystem-determiningdependencies1">
        <para>The Content Repository.</para>
      </listitem>

      <listitem>
        <para>The Preferred Provider Repository.</para>
      </listitem>

      <listitem>
        <para>The System Repository. For each matching capability found in the
        System Repository the Subsystems implementation must determine if the
        capability is accessible to the content resources of the installing
        Subsystem according to the sharing policy of the Subsystem. See <xref linkend="i3328531"/> for more details on Subsystem types and their
        sharing policies.</para>
      </listitem>

      <listitem>
        <para>The Local Repository. This allows a Subsystem Archive to
        optionally include dependencies.</para>
      </listitem>

      <listitem>
        <para>The registered Repository services.</para>
      </listitem>
    </orderedlist>

    <para>Any matching capabilities found in the steps after step <xref linkend="service.subsystem-determiningdependencies1"/> above are
    considered to be provided by potential dependencies for the Subsystem. The
    capabilities found in the System Repository are provided by already
    installed resources, referred to as potential <emphasis>pre-installed
    dependencies</emphasis>. The capabilities found which are provided by
    other potential dependencies must be installed in order to resolve the
    Subsystem content resources, referred to as <emphasis>installable
    dependencies</emphasis>.</para>

    <para>The Resolver's job is to select one of the potential capabilities
    returned by the <code>findProviders</code> method as the capability to
    satisfy a Requirement. At the end of a resolve operation a result
    (<code>Map&lt;Resource, List&lt;Wire&gt;</code>) is returned which
    contains the Resources that got resolved and a list containing the Wires
    for the resolved Resource. The Subsystems implementation uses this
    resolution result in order to determine which resolved Resources are
    content resources, pre-installed dependencies, or installable
    dependencies. The installable dependencies must be installed as described
    in <xref linkend="i3323024"/>. The pre-installed dependencies must have
    their reference count incremented as described in <xref linkend="i3365854"/>.</para>
  </section>

  <section xml:id="i3323024">
    <title>Accepting Dependencies</title>

    <para>When a Subsystem is installed the Subsystems implementation must
    determine the set of installable dependencies as described in <xref linkend="i3330142"/>. The Subsystems implementation must also determine
    what Subsystem is willing to accept the installable dependency as a
    constituent, referred to as an <emphasis>accepted dependency
    constituent</emphasis>. A Subsystem declares that it is willing to accept
    dependencies as constituents by specifying the
    <code>provision-policy</code> directive with the
    <code>acceptDependencies</code> value on the Subsystem-Type header, see
    <xref linkend="i3322247"/>.</para>

    <para>The <code>acceptDependencies</code> provision policy is useful for
    creating isolation layers that do not pollute parent Regions with
    dependencies. For example, an application container may be implemented as
    a Subsystem. Such a container Subsystem could be installed into something
    called a kernel Subsystem. Applications are installed as Subsystems into
    the container Subsystem. In this case the container Subsystem would likely
    use the <code>acceptDependencies</code> provision policy so that any
    applications installed into the container Subsystem do not end up
    polluting the kernel Subsystem with the application's dependencies.</para>

    <para>A dependency becomes an accepted dependency constituent of the
    Subsystem with a provision policy of <code>acceptDependencies</code> and
    that lies on the longest path between the Root Subsystem and the Subsystem
    being installed, inclusively. Note that a Subsystem that has
    <code>acceptDependencies</code> provision policy will accept its own
    installable dependencies as constituents since it lies on the longest path
    between the Root Subsystem and itself, inclusively.</para>

    <para>The following figure illustrates a simple example of accepting
    dependency constituents. A Scoped Subsystem <code>S2</code> is being
    installed into another Scoped Subsystem <code>S1</code> and
    <code>S1</code> has a <code>provision-policy</code> of
    <code>acceptDependencies</code>. When <code>S2</code> is being installed
    the Subsystems implementation discovers content resources <code>A</code>
    and <code>B</code> and installable dependencies <code>C</code> and
    <code>D</code>. This is depicted in <xref linkend="i3330314"/>.</para>

    <figure xml:id="i3330314">
      <title>Provision Policy</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="0.830in" contentwidth="6.209in" fileref="provision-policy1.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>In the previous example the Subsystem with a
    <code>provision-policy</code> of <code>acceptDependencies</code> and that
    lies on the longest path between the Root Subsystem and the Subsystem
    being installed is <code>S1</code>. Therefore the installable dependencies
    <code>C</code> and <code>D</code> become accepted dependency constituents
    of <code>S1</code>.</para>

    <para><xref linkend="i3354897"/> illustrates the same example but with
    <code>S2</code> also having a <code>provision-policy</code> of
    <code>acceptDependencies</code></para>

    <figure xml:id="i3354897">
      <title>Provision Policy</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.112in" contentwidth="6.209in" fileref="provision-policy2.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>In this example the Subsystem with a <code>provision-policy</code>
    of <code>acceptDependencies</code> and that lies on the longest path
    between the Root Subsystem and the Subsystem being installed is
    <code>S2</code> itself. Therefore the installable dependencies
    <code>C</code> and <code>D</code> become accepted dependency constituents
    of <code>S2</code>.</para>

    <para><xref linkend="i3331477"/> illustrates the same example but with
    <code>S1</code> and <code>S2</code> not defining the
    <code>provision-policy</code> (default is
    <code>rejectDependencies</code>). The Root Subsystem always has a
    <code>provision-policy</code> of <code>acceptDependencies</code>:</para>

    <figure xml:id="i3331477">
      <title>Subsystems and acceptDependencies</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="0.797in" contentwidth="6.209in" fileref="acceptdependencies.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>In this example the Subsystem with a provision policy of
    acceptDependencies and that lies on the longest path between the Root
    Subsystem and the Subsystem being installed is the Root Subsystem.
    Therefore the installable dependencies <code>C</code> and <code>D</code>
    become accepted dependency constituents of the Root Subsystem.</para>
  </section>

  <section xml:id="i3328531">
    <title>Sharing Capabilities</title>

    <para>Scoped Subsystems define a sharing policy for the Region they are
    contained in. A sharing policy controls access to capabilities between
    parent <phrase role="symbol">→</phrase> child Region boundaries. For
    Subsystems, a sharing policy is composed of two parts: an import policy
    and an export policy:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Export Policy</emphasis> - Defines the set of
        capabilities provided by the constituents contained in the Region that
        are made available to the parent Region.</para>
      </listitem>

      <listitem>
        <para><emphasis>Import Policy</emphasis> - Defines the set of
        capabilities which are available in the parent Region that are made
        available to the child Region.</para>
      </listitem>
    </itemizedlist>

    <para>The import sharing policies of a Subsystem's ancestor parent chain
    may prevent a Subsystem from accessing the required capabilities provided
    by a dependency. <xref linkend="i3333158"/> illustrates this.</para>

    <figure xml:id="i3333158">
      <title>Sharing Capabilities</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.408in" contentwidth="6.209in" fileref="sharing-capabilities.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>In this example the <code>C</code> and <code>D</code> provide
    capabilities that are required by <code>A</code> and <code>B</code>
    respectively. The import sharing policy of <code>S</code>2 allows the
    capabilities to be imported into <code>S2</code>, but the import sharing
    policy for <code>S1</code> denies the import of one of the capabilities
    and allows the other. In order for <code>A</code> or <code>B</code> to
    access capabilities provided by <code>C</code> or <code>D</code> they must
    traverse both the import sharing policy of <code>S2</code> and
    <code>S1</code>. Ultimately <code>S1</code> sharing policy prevents the
    necessary access to the dependencies necessary to resolve <code>S2</code>.
    Such a situation must be detected during the discovery of the installable
    dependencies and result in a failure to install the dependencies. This
    must result in the failure to install the Subsystem that requires the
    dependency, in this case <code>S2</code>.</para>

    <section xml:id="i3321523">
      <title>Preferred Provider</title>

      <para>The sharing policy for a Scoped Subsystem may specify a set of
      preferred providers. If a capability is provided by a preferred provider
      then that capability must be used to resolve a Scoped Subsystem's import
      policy. <xref linkend="i3333158"/> illustrates this.</para>

      <figure>
        <title>Preferred Provider</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="0.968in" contentwidth="6.209in" fileref="preferred-provider.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>In this example constituent <code>B</code> of the Root Region
      provides the capability <code>X</code> (called <code>Root</code><phrase role="symbol">→</phrase><code>X</code>). Also constituent <code>C</code>
      of <code>S2Region</code> provides the capability <code>S2</code><phrase role="symbol">→</phrase><code>X</code>. The export sharing policy of
      <code>S2</code> policy exports the capability <code>S2</code><phrase role="symbol">→</phrase><code>X</code> to its parent Region, the
      <code>RootRegion</code>. The <code>S1Region</code> contains a
      constituent A that has a requirement on <code>S1</code><phrase role="symbol">→</phrase><code>X</code>. The two capabilities,
      <code>Root</code><phrase role="symbol">→</phrase><code>X</code> and
      <code>S2</code><phrase role="symbol">→</phrase><code>X</code>, are
      available to satisfy the requirement <code>S1</code><phrase role="symbol">→</phrase><code>X</code>. The <code>S1Region</code>'s
      import sharing policy imports capability <code>X</code> and has a
      preferred provider of <code>S2</code>. This means that the capability
      <code>S2</code><phrase role="symbol">→</phrase><code>X</code> must be
      used to satisfy the requirement <code>S1</code><phrase role="symbol">→</phrase><code>X</code>.</para>
    </section>

    <section>
      <title>System Capabilities</title>

      <para>The <code>osgi.ee</code> and <code>osgi.native</code> namespaces
      are used by the System Bundle to describe capabilities for the Java
      execution environment and the native environment. These capabilities
      must only be provided by the System Bundle. A Subsystems implementation
      must allow access to the <code>osgi.ee</code> and
      <code>osgi.native</code> capabilities provided by the System Bundle to
      every Subsystem installed. This includes scoped subsystems which may or
      may not already have an import sharing policy configured to import these
      namespaces from the System Bundle.</para>
    </section>
  </section>

  <section xml:id="i3345965">
    <title>Region Context Bundle</title>

    <para>The Region context bundle provides a perspective from a constituent
    of a Subsystem contained in the Region. When a Scoped Subsystem is
    installed the Subsystems implementation must generate the Region context
    bundle and install it as a constituent bundle of the Subsystem. The Region
    context bundle has the following characteristics:</para>

    <itemizedlist>
      <listitem>
        <para>Has a symbolic name of
        <code>org.osgi.service.subsystem.region.context.&lt;subsystem
        id&gt;</code></para>
      </listitem>

      <listitem>
        <para>Version 1.0.0</para>
      </listitem>

      <listitem>
        <para>Has a location string of <code>&lt;subsystem
        location&gt;/&lt;subsystem id&gt;</code></para>
      </listitem>

      <listitem>
        <para>Must always be allowed to resolve and start (i.e. has no
        requirements, imports or bundle activator).</para>
      </listitem>

      <listitem>
        <para>Has a start-level of 1 and is persistently started.</para>
      </listitem>

      <listitem>
        <para>Is installed and started before the Subsystem service is
        registered.</para>
      </listitem>
    </itemizedlist>

    <para>This bundle is installed and must remain active as long as the
    Subsystem is installed. If the Region context bundle is stopped, updated
    or uninstalled then the Subsystem runtime should log an error and may
    ensure the context bundle is installed and restarted.</para>

    <para>When the Subsystems implementation is active it must establish the
    Root Subsystem, see <xref linkend="i3333429"/>. In establishing the Root
    Subsystem the Subsystems implementation must ensure that there is a Region
    context bundle available for the Root Region. This Root Region context
    bundle will have a symbolic name of
    <code>org.osgi.service.subsystem.region.context.0</code>.</para>

    <para>Typically the Region's context bundle would be used to obtain a
    bundle context with the <xref linkend="org.osgi.service.subsystem.Subsystem.getBundleContext--" xrefstyle="hyperlink"/> method, which has a perspective as a constituent
    of the Region. This is useful in the following ways:</para>

    <itemizedlist>
      <listitem>
        <para>Implementing Subsystem aware extenders. Such extenders need to
        be able to register listeners and monitor the inside of a Region in
        order to react to the constituent bundles of a Region.</para>
      </listitem>

      <listitem>
        <para>Monitoring of internal events.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="i3346786">
    <title>Explicit and Implicit Resources</title>

    <para>Depending on how a resource is installed the Subsystems
    implementation considers the resource to be either an <emphasis>explicit
    resource </emphasis>or <emphasis> implicit resource</emphasis>. An
    <emphasis>explicit resource</emphasis> is a resource whose installation
    was initiated by an agent outside of the Subsystems implementation.
    An<emphasis> implicit resource</emphasis> is a resource whose installation
    was initiated by the Subsystems implementation during the explicit
    installation of a Subsystem, including the content and dependencies of the
    explicitly installed Subsystem.</para>

    <section xml:id="i3339411">
      <title>Explicit Resources</title>

      <para>An explicit resource is a resource that was installed
      programmatically, by an agent outside of the Subsystems implementation,
      using some resource specific API. This specification defines two types
      of resources that can be installed explicitly:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Subsystem resource</emphasis> - A Subsystem resource
          may be installed explicitly by using the Subsystem service. Note
          that content and dependencies of an explicitly installed Subsystem
          are not considered to be explicit resources themselves since they
          were implicitly installed by the Subsystems implementation.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle resource</emphasis> - A bundle resource may
          be installed explicitly by using a bundle context. This includes
          fragments.</para>
        </listitem>
      </itemizedlist>

      <section>
        <title>Explicit Bundle Resources</title>

        <para>When a bundle is installed explicitly with a bundle context, the
        Subsystems implementation must determine the Subsystem of which a
        bundle becomes a constituent. The following rules are followed when a
        bundle is installed explicitly with a bundle context:</para>

        <orderedlist>
          <listitem>
            <para>Determine the bundle performing the install. This is the
            bundle whose Bundle Context is performing the install
            operation.</para>
          </listitem>

          <listitem>
            <para>Determine the target Region. This is the Region to which the
            bundle performing the install operation belongs.</para>
          </listitem>

          <listitem>
            <para>If a bundle with the same symbolic name and version already
            exists in the target Region then the bundle installation must fail
            unless the same location string is used. If the same location is
            used then the existing bundle is returned. This may be
            accomplished by the use of a bundle collision hook.</para>
          </listitem>

          <listitem>
            <para>Determine the Subsystem(s) of which the bundle performing
            the install is a constituent. The bundle performing the install
            may be a shared resource. In that case the bundle performing the
            install is a constituent of two or more Subsystems.</para>
          </listitem>

          <listitem>
            <para>The newly installed bundle must become a constituent of all
            the Subsystems of which the bundle performing the install is a
            constituent.</para>
          </listitem>
        </orderedlist>
      </section>

      <section>
        <title>Explicit Subsystem Resources</title>

        <para>When a Subsystem is installed explicitly with a Subsystem
        service, the Subsystems implementation must determine what
        Subsystem(s) the Subsystem resource and its children will become a
        constituent of. The following rules are followed when a Subsystem is
        installed:</para>

        <orderedlist>
          <listitem>
            <para>Determine the target Subsystem. This is the Subsystem
            service which is performing the install operation or the Subsystem
            which includes another Subsystem as part of its content, see <xref linkend="i3346687"/>.</para>
          </listitem>

          <listitem>
            <para>Determine the target Region. This is the Region to which the
            target Subsystem belongs.</para>
          </listitem>

          <listitem>
            <para>If no Subsystem resource with the same location exists then
            continue to the next step; otherwise do the following:</para>

            <itemizedlist>
              <listitem>
                <para>If the existing Subsystem is not a part of the target
                Region then fail the install operation by throwing a Subsystem
                Exception; otherwise continue to the next step.</para>
              </listitem>

              <listitem>
                <para>If the existing Subsystem symbolic name, version and
                type is not the same as the Subsystem being installed then
                fail the install operation by throwing a Subsystem Exception;
                otherwise continue to the next step.</para>
              </listitem>

              <listitem>
                <para>If the existing Subsystem is already a constituent of
                the target Subsystem then return the existing Subsystem from
                the install method; otherwise the existing Subsystem resource
                becomes a shared resource by increasing the reference count of
                the existing Subsystem by one, see <xref linkend="i3365854"/>,
                and the existing Subsystem becomes a constituent of the target
                Subsystem; finally, the existing Subsystem is returned from
                the install method.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>If no Subsystem resource with the same symbolic-name and
            version already exists in the target Region then the Subsystem
            resource being installed becomes a constituent of the Subsystem
            target; otherwise do the following:</para>

            <itemizedlist>
              <listitem>
                <para>If the existing Subsystem type is not the same as the
                type of the Subsystem being installed then fail the install
                operation by throwing a Subsystem Exception; otherwise
                continue to the next sub-step.</para>
              </listitem>

              <listitem>
                <para>If the existing Subsystem is already a constituent of
                the target Subsystem then return the existing Subsystem from
                the install method; otherwise the existing Subsystem resource
                becomes a shared resource by increasing the reference count of
                the existing Subsystem by one and the existing Subsystem
                becomes a constituent of the target Subsystem; finally, the
                existing Subsystem is returned from the install method.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </orderedlist>
      </section>
    </section>

    <section>
      <title>Explicit Resource Example</title>

      <para>A scenario is used to illustrate the rules for determining which
      Subsystem an explicitly installed resource is a constituent. <xref linkend="i3336223"/> illustrates the Root Subsystem with initial content
      bundles <code>A</code>, <code>SI</code> (Subsystems implementation) and
      the system bundle (id = 0) installed.</para>

      <figure xml:id="i3336223">
        <title>Explicit Resource Example</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.067in" contentwidth="6.209in" fileref="explicit-resource-example.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>If bundle <code>A</code> uses its own Bundle Context to explicitly
      install bundle <code>B</code> then bundle <code>B</code> becomes a
      constituent of the Root Subsystem. If bundle <code>A</code> uses
      Subsystem <code>R</code> to install Scoped Subsystem <code>S1</code>
      then the <code>S1</code> resource becomes a constituent of the
      <code>Root</code> Subsystem and <code>S1</code> Subsystem becomes a
      child of the <code>Root</code> Subsystem. <code>S1</code> contains
      constituent bundles <code>C</code> and <code>D</code>. Also, if bundle
      <code>B</code> uses Subsystem <code>R</code> to install Scoped Subsystem
      <code>S2</code> then the <code>S2</code> resource becomes a constituent
      of the <code>Root</code> Subsystem and the <code>S2</code> Subsystem
      becomes a child of the <code>Root</code> Subsystem. <code>S2</code>
      contains constituent bundles <code>E</code> and <code>F</code>. <xref linkend="i3361375"/> illustrates this.</para>

      <figure xml:id="i3361375">
        <title>Subsystems and Resources</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.408in" contentwidth="6.209in" fileref="subsystems-resources1.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Then if bundle <code>C</code> uses its own Bundle Context to
      install bundle <code>F</code> (using a different location string from
      constituent bundle <code>S2</code><phrase role="symbol">→</phrase><code>F</code>) then the bundle becomes a
      constituent of <code>S1</code>. If bundle <code>E</code> uses Subsystem
      service <code>S2</code> to install Unscoped Subsystem <code>U1</code>
      (with constituents <code>G</code> and <code>H</code>) and installs
      Unscoped Subsystem <code>U2</code> (with constituents <code>H</code> and
      <code>J</code>) then both Subsystem bundles <code>U1</code> and
      <code>U2</code> become constituents of <code>S2</code>. The
      <code>S2</code> Subsystem also becomes the parent Subsystem for both
      <code>U1</code> and <code>U2</code> Subsystems, see <xref linkend="i3336802"/>.</para>

      <figure xml:id="i3336802">
        <title>Subsystems and Resources</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.040in" contentwidth="6.209in" fileref="subsystems-resources2.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>In this scenario bundle H is a shared constituent of both U1 and
      U2 Subsystems. If bundle H installs a bundle K with its bundle context
      then bundle K becomes a shared constituent of both U1 and U2 Subsystems.
      Also, if Subsystem service U1 is used to install Scoped Subsystem S3 and
      Subsystem service U2 is also used to install Subsystem S3 then S3
      resource becomes a shared constituent of both Unscoped Subsystems U1 and
      U2. The following illustrates this:</para>

      <figure pgwide="1">
        <title>Subsystems and Resources</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.969in" contentwidth="6.209in" fileref="subsystems-resources3.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Since the S3 Subsystem resource is a shared constituent of both
      Subsystems U1 and U2 the S3 Subsystem has two parents: U1 and U2. In
      this case S3 Subsystem has two parent Subsystems but the S3Region still
      must only have one parent of S2Region. This is enforced by the rule that
      requires all of the parents of a Subsystem to belong to the same Region.
      For Scoped Subsystems the Region which contains all of the Subsystem's
      parents is parent Region.</para>

      <para>So far the examples have illustrated cases where the Root
      Subsystem has Scoped Subsystem children. It is also acceptable for an
      Unscoped Subsystem to be installed into the Root Region as the following
      figure illustrates:</para>

      <figure>
        <title>Subsystems and Resources</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.932in" contentwidth="6.209in" fileref="subsystems-resources4.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section xml:id="i3339635">
    <title>Resource References</title>

    <para>A Subsystems implementation must track the resources which are
    installed and determine which Subsystems reference a resource.
    The<emphasis> reference count</emphasis> indicates the number of installed
    Subsystems which reference an installed resource. The resource references
    and reference counts are used by the Subsystems implementation to
    determine if an installed resource is eligible for garbage collection and
    also plays a role in determining when a resource should be started and
    stopped, see <xref linkend="i3339345"/> ; the term reference count is only
    used to illustrate these concepts. The reference count of a resource is
    not exposed in the API of Subsystems. The following types of resources are
    referenced by a Subsystem:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Content Resources</emphasis> - These are the content
        resources which were installed when the Subsystem was installed, that
        is the resources declared in the Subsystem-Content header or from the
        Local Repository when the Subsystem-Content header is not specified,
        see <xref linkend="i3346687"/>. Content Resources are considered to be
        implicit resources.</para>
      </listitem>

      <listitem>
        <para><emphasis>Explicit Resources</emphasis> - These are constituent
        resources which are installed explicitly, see <xref linkend="i3339411"/>.</para>
      </listitem>

      <listitem>
        <para><emphasis>Dependencies</emphasis> - These resources provide
        capabilities required to satisfy requirements for a Subsystem's
        content resources, see <xref linkend="i3330142"/>. Dependencies are
        considered to be implicit resources.</para>
      </listitem>
    </itemizedlist>

    <para>Accepted dependency constituents are not defined as being referenced
    by the Subsystem of which they are a constituent unless constituent
    resource is a dependency for that Subsystem. Parent Subsystems are also
    not defined as being referenced by a child Subsystem.</para>

    <section xml:id="i3365854">
      <title>Reference Count</title>

      <para>When a Subsystem is being installed the Subsystems implementation
      must determine what resources are referenced by the Subsystem being
      installed. Each resource that is referenced by the Subsystem being
      installed will have its reference count incremented by 1. A top-level
      Subsystem being installed may contain child Subsystems. Each resource
      that is referenced by the child Subsystem being installed will have its
      reference count incremented by 1.</para>

      <para>When a Subsystem is being uninstalled the Subsystems
      implementation must determine what resources are referenced by the
      Subsystem being uninstalled. Each resource that is referenced by the
      Subsystem being uninstalled will have its reference count decremented by
      1. A top-level Subsystem being uninstalled may contain child Subsystems.
      Each resource that is referenced by each child Subsystem being
      uninstalled will have its reference count decremented by 1.</para>

      <para>When a reference count gets set to zero then the resource is
      eligible for garbage collection and will be uninstalled. A Subsystems
      implementation may perform the garbage collection immediately or
      postpone the garbage collection for later. If garbage collection is
      postponed then the Subsystems implementation must prevent any additional
      usage of capabilities provided by the resource which is to be
      uninstalled. The garbage collection must occur in a reasonable period of
      time.</para>

      <para>Bundle resources (including fragments) and Subsystem resources may
      be uninstalled explicitly. For example, uninstalling a Subsystem
      resource through the Subsystem service, or by other means outside of the
      Subsystems API such as uninstalling a bundle using a Bundle object. Each
      of the following must occur when a resource is explicitly
      uninstalled:</para>

      <itemizedlist>
        <listitem>
          <para>If the resource being explicitly uninstalled was not itself
          installed explicitly then an error must be logged indicating that
          the explicitly uninstalled resource still has one or more Subsystems
          referencing it.</para>
        </listitem>

        <listitem>
          <para>If the resource being explicitly uninstalled was itself
          installed explicitly and the reference count is greater than 1 then
          an error must be logged indicating that the explicitly uninstalled
          resource still has one or more Subsystems referencing it.</para>
        </listitem>

        <listitem>
          <para>The resource being explicitly uninstalled has its reference
          count set to 0 and finally the resource is uninstalled.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="i3339345">
    <title>Starting and Stopping Resources</title>

    <para>A Subsystem can be started by calling the Subsystem <emphasis>start
    </emphasis>method or the Subsystems implementation can automatically start
    the Subsystem if the Subsystem is <emphasis>ready </emphasis>and the
    <emphasis>autostart setting </emphasis>of the Subsystem indicates that it
    must be started.</para>

    <para>A Subsystem is <emphasis>ready</emphasis> if the Subsystem's parent
    is in the process of starting or is active. A started Subsystem may need
    to be automatically started again by the Subsystems implementation after a
    restart. The Subsystems implementation therefore maintains a persistent
    <emphasis>autostart setting</emphasis> for each Subsystem. This
    <emphasis>autostart setting</emphasis> can have the following
    values:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Stopped</emphasis> - The Subsystem should not be
        started.</para>
      </listitem>

      <listitem>
        <para><emphasis>Started</emphasis> - The Subsystem must be started
        once it is ready.</para>
      </listitem>
    </itemizedlist>

    <para>Subsystem resources which are installed as content resources, see
    <xref linkend="i3329153"/>, of one or more Subsystems must have their
    <emphasis>autostart setting</emphasis> set to
    <emphasis>started</emphasis>.</para>

    <para>When a Subsystem is started and stopped then the resources the
    Subsystem references may be started and stopped. See for details <xref linkend="i3365470"/> and <xref linkend="i3348344"/>.</para>

    <para>The Subsystems implementation must track the resources which are
    installed and be able to determine when a resource must be started and
    stopped. To describe this behavior the term<emphasis> active use
    count</emphasis> is used. A active use count indicates the number of
    active Subsystems which reference a resource. The active use count is used
    by the Subsystems implementation in order to determine when a resource is
    started and stopped. The term active use count is only used to illustrate
    the starting and stopping of resources. The active use count of a resource
    is not exposed in the API of Subsystems.</para>

    <para>Resource starting and stopping only applies to resources for which
    it is valid to start and stop. For example, it is not valid to start or
    stop resources of type <code>osgi.fragment</code> and a Subsystems
    implementation must not attempt to start or stop such resources.</para>

    <section xml:id="i3329174">
      <title>Start Order</title>

      <para>A Subsystem's Subsystem-Content header, see <xref linkend="i3321875"/>, can use the optional <code>start-order</code>
      directive for each content resource it declares. The
      <code>start-order</code> directive specifies the start order of the
      content resource in relation to other content resources of the
      Subsystem. Content resources are started in ascending order and stopped
      in descending order according to the start-order directive values.
      Content resources with the same start-order value may be started and
      stopped in any order in relation to each other. There is no default
      value for <code>start-order</code>. If the <code>start-order</code> is
      not specified then a Subsystem implementation is free to start the
      resource in any order. For example, the following header specifies four
      Subsystem content resources:</para>

      <programlisting>Subsystem-SymbolicName: S1
Subsystem-Type: osgi.subsystem.composite
Subsystem-Content: 
    A;
        <code>type=osgi.bundle;</code>
        version=1.0;
        start-order:=3,
    <code>B;</code>
        type=osgi.bundle;
        version=1.0;
        start-order:=2,
    <code>C;</code>
        type=osgi.bundle;
        version=1.0;
        start-order:=1,
    D;
        type=osgi.bundle;
        <code>version=1.0;</code>
        start-order:=2</programlisting>

      <para>The above headers specify a Subsystem <code>S1</code> with four
      content resources: <code>A</code>, <code>B</code>, <code>C</code> and
      <code>D</code>. The <code>start-order</code> directive is used to sort
      the content resources to determine the order to start or stop them when
      the Subsystem is started or stopped. The content resources are sorted
      from lowest to highest start-order. Content resources that have the same
      <code>start-order</code> value may be started and stopped in any order
      in relation to each other. In this example the content resources are
      sorted into the list <code>[C]</code>, <code>[B, D]</code>,
      <code>[A]</code>. <code>C</code> has the lowest start-order, therefore
      it is the first in the list. <code>B</code> and <code>D</code> have the
      same <code>start-order</code> and therefore can be started in any order
      in relation to each other. Finally <code>A</code> is last in the list
      because it has the highest start-order.</para>

      <para>When the Subsystem <code>S1</code> is started the content resource
      <code>C</code> must be started first, followed by the starting of
      <code>B</code> and <code>D</code> in any order, finally resource
      <code>A</code> is started last. When the Subsystem <code>S1</code> is
      stopped the content resource A must be stopped first, followed by the
      stopping of <code>B</code> and <code>D</code> in any order, finally
      resource <code>C</code> is stopped last.</para>

      <para>Resources that do not specify a start-order can be started and
      stopped in any order.</para>
    </section>

    <section xml:id="i3365590">
      <title>Active Use Count</title>

      <para>When a Subsystem is being started the Subsystems implementation
      must increment the active use count of every resource which is
      referenced by the Subsystem being started, see <xref linkend="i3339635"/>. After incrementing the active use counts of the
      resources referenced by a Subsystem, the Subsystems implementation must
      determine which referenced resources need to be started. For each
      resource referenced by the Subsystem which is valid to be started; if
      the active use count is greater than zero and the resource is not
      currently active then the resource must be started. The collection of
      dependencies are started before the Subsystem's content resources. The
      start order for the individual resources contained in the collection of
      dependencies is not specified. See <xref linkend="i3329174"/>.</para>

      <para>When a Subsystem is being stopped the Subsystems implementation
      must decrement the active use count of every resource which is
      referenced by the Subsystem being stopped. After decrementing the active
      use counts of the resources referenced by a Subsystem, the Subsystems
      implementation must determine which referenced resources need to be
      stopped. For each resource referenced by the Subsystem which is valid to
      be started; if the active use count equals zero and the resource is
      currently active then the resource must be stopped. The Subsystem
      content resources are stopped before the collection of dependencies.
      <xref linkend="i3329174"/> describes the stop order of the Subsystem's
      content resources. The stop order of the individual resources contained
      in the collection of dependencies is not specified.</para>

      <para>When starting the resource types supported by this specification
      the following rules apply:</para>

      <itemizedlist>
        <listitem>
          <para><code>osgi.bundle</code> - The bundle must be transiently
          started using the activation policy of the bundle, that is with the
          <code>Bundle.START_ACTIVATION_POLICY</code>.</para>
        </listitem>

        <listitem>
          <para><code>osgi.fragment</code> - fragments cannot be started, this
          is a no-op.</para>
        </listitem>

        <listitem>
          <para><code>osgi.subsystem.application</code>,
          <code>osgi.subsystem.composite</code>,
          <code>osgi.subsystem.feature</code> - The Subsystem must be
          transiently started if its <emphasis>autostart setting</emphasis> is
          set to <emphasis>started</emphasis>.</para>
        </listitem>
      </itemizedlist>

      <para>When stopping the resource types supported by this specification
      the following rules apply:</para>

      <itemizedlist>
        <listitem>
          <para><code>osgi.bundle</code> - The bundle must be persistently
          stopped.</para>
        </listitem>

        <listitem>
          <para><code>osgi.fragment</code> - Fragments cannot be stopped, this
          is a no-op.</para>
        </listitem>

        <listitem>
          <para><code>osgi.subsystem.application</code>,
          <code>osgi.subsystem.composite</code>,
          <code>osgi.subsystem.feature</code> - The Subsystem must be
          transiently stopped. Its <emphasis>autostart setting</emphasis> must
          not be changed.</para>
        </listitem>
      </itemizedlist>

      <para>Note that for resources referenced by a stopped Subsystem; bundle
      resources are persistently stopped and Subsystem resources are
      transiently stopped. This is a safeguard to handle cases where a
      constituent bundle is eagerly started by some other agent outside of the
      Subsystems implementation. Persistently started bundles will get auto
      started by the framework according to the start-level of the bundle.
      This can cause a constituent bundle to be stopped even though the
      Subsystem it is a constituent of is not active. To avoid this situation
      the Subsystems implementation always clears the persistent autostart
      setting of the bundle resources.</para>

      <para>Subsystem resources which are referenced by a Subsystem are
      started or stopped transiently. There is no API to transiently start or
      stop a Subsystem. The Subsystems implementation must perform the
      starting or stopping of a referenced Subsystem normally except the
      starting or stopping process does not change the <emphasis>autostart
      setting</emphasis> for the referenced Subsystem.</para>
    </section>
  </section>

  <section xml:id="i3333429">
    <title>Subsystem Service</title>

    <para>The Subsystem service represents an Subsystem Archive resource that
    is installed in an OSGi Framework. The installation of a Subsystem can
    only be performed by using the Subsystem service API or through
    implementation specific means. The Subsystem interface's methods and
    service properties can be divided into the following categories:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis> Information</emphasis> - Access to information about
        the Subsystem itself as well as other Subsystems that are
        installed.</para>
      </listitem>

      <listitem>
        <para><emphasis> Life Cycle</emphasis> - The possibility to install
        other Subsystems and start, stop, and uninstall Subsystems.</para>
      </listitem>
    </itemizedlist>

    <para>For each Subsystem installed, the Subsystems implementation must
    register an associated Subsystem object as a service. The Subsystem
    service is used for monitoring the state of the Subsystem, for controlling
    the life cycle of the installed Subsystem and for installing child
    Subsystems.</para>

    <section>
      <title>Root Subsystem</title>

      <para>A Subsystems implementation must register the Root Subsystem
      service. When a Subsystems implementation is started for the first time
      it must establish the Root Subsystem. The following steps are required
      to establish the Root Subsystem.</para>

      <orderedlist>
        <listitem>
          <para>The Root Subsystem has a symbolic name
          <code>org.osgi.service.subsystem.root</code>, <code>version
          1.0.0</code> (the version of the Subsystems specification), a
          Subsystem <code>id</code> of 0 and a location of</para>

          <programlisting>subsystem://?Subsystem-SymbolicName=org.osgi.service.subsystem.root&amp; «
 Subsystem-Version=1.0.0</programlisting>
        </listitem>

        <listitem>
          <para>The Root Subsystem has no parent Subsystem. More specifically
          the Root Subsystem is the only source vertex in the Subsystem
          graph.</para>
        </listitem>

        <listitem>
          <para>The Root Subsystem is considered a Scoped Subsystem of type
          <code>application</code>, with <code>provision-policy</code> of
          <code>acceptDependencies</code>. Since the Root Subsystem has no
          parent it does not import or export any capabilities.</para>
        </listitem>

        <listitem>
          <para>The Subsystem content is the set of bundles installed in the
          framework that do not belong to any other Subsystem.</para>
        </listitem>

        <listitem>
          <para>The root subsystem has a region context bundle as described in
          <xref linkend="i3345965"/>.</para>
        </listitem>
      </orderedlist>

      <para>The Root Subsystem always exists when a Subsystems implementation
      is present and active, even if no other Subsystems are installed The
      Root Subsystem is used as the starting point for installing Subsystems
      as child Subsystems. The Root Subsystem cannot be stopped or uninstalled
      by calling the Subsystem service stop or uninstall methods. Any attempt
      to do so must result in a Subsystem Exception.</para>
    </section>

    <section xml:id="i3346175">
      <title>Subsystem Service Properties</title>

      <para>The primary means of discovering and monitoring a Subsystem is the
      Subsystem service. A Subsystems implementation must register one
      Subsystem service for each Subsystem installed. The Subsystem service is
      used for monitoring and controlling the life-cycle of the installed
      Subsystem. Service properties on the Subsystem service carry most of the
      information required to monitor Subsystem life cycle operations and the
      current state of a Subsystem. The following table describes the service
      properties of a Subsystem:</para>

      <table>
        <title>Subsystem Mandatory Service Properties</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="2*"/>

          <colspec colnum="2" colwidth="1.5*"/>

          <colspec colnum="3" colwidth="3*"/>

          <thead>
            <row>
              <entry>Key Name</entry>

              <entry>Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>subsystem.id</code></entry>

              <entry><code>Long</code></entry>

              <entry><para>The Subsystem id of the Subsystem</para></entry>
            </row>

            <row>
              <entry><code>subsystem.symbolicName</code></entry>

              <entry><code>String</code></entry>

              <entry><para>The symbolic name of the Subsystem</para></entry>
            </row>

            <row>
              <entry><code>subsystem.version</code></entry>

              <entry><code>Version</code></entry>

              <entry><para>The version of the Subsystem</para></entry>
            </row>

            <row>
              <entry><code>subsystem.type</code></entry>

              <entry><code>String</code></entry>

              <entry><para>The type of Subsystem.</para></entry>
            </row>

            <row>
              <entry><code>subsystem.state</code></entry>

              <entry><xref linkend="org.osgi.service.subsystem.Subsystem.State" xrefstyle="hyperlink"/></entry>

              <entry><para>Contains the current state of the
              Subsystem</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Subsystem States</title>

      <para>The Subsystem service property <code>subsystem.state</code>
      contains the current state of the Subsystem (this is referred to as the
      <emphasis>subsystem state</emphasis>). All Subsystem states are defined
      by the <code>Subsystem.State</code> <code>enum</code>, for example,
      <code>INSTALLED</code>. The possible values of a
      <code>subsystem.state</code> are shown in the table below:</para>

      <table pgwide="1">
        <title>Subsystem States</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="4*"/>

          <thead>
            <row>
              <entry>subsystem.state</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><xref linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLING" xrefstyle="hyperlink"/></entry>

              <entry><para>When a Subsystem is first installed the Subsystems
              implementation must register a Subsystem service with the
              initial <code>subsystem.state</code> of <xref linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLING" xrefstyle="hyperlink"/>. The <code>subsystem.state</code> must
              remain in the <xref linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLING" xrefstyle="hyperlink"/> state until all of the Subsystem
              constituents are installed successfully.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLED" xrefstyle="hyperlink"/></entry>

              <entry><para>When all contents of a Subsystem has been
              successfully provisioned then the <code>subsystem.state</code>
              is set to <xref linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLED" xrefstyle="hyperlink"/>.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED" xrefstyle="hyperlink"/></entry>

              <entry><para>Indicates that some failure occurred while
              attempting to install the Subsystem's contents.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVING" xrefstyle="hyperlink"/></entry>

              <entry><para>Starting a Subsystem triggers the resolution of a
              Subsystem if the <code>subsystem.state</code> is <xref linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLED" xrefstyle="hyperlink"/>. A <xref linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVING" xrefstyle="hyperlink"/> state indicates that a resolve process
              is occurring in an attempt to resolve all of the subsystem's
              content resources.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVED" xrefstyle="hyperlink"/></entry>

              <entry><para>Indicates that the Subsystem is resolved. A
              Subsystem is resolved if all of its content resources are
              resolved.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.subsystem.Subsystem.State.STARTING" xrefstyle="hyperlink"/></entry>

              <entry><para>Indicates that the Subsystem is in the process of
              being started. During this state the resources the Subsystem
              references which are eligible for starting are started, see
              <xref linkend="i3339345"/>. Once all the eligible resources are
              successfully started then the <code>subsystem.state</code> is
              set to <xref linkend="org.osgi.service.subsystem.Subsystem.State.ACTIVE" xrefstyle="hyperlink"/>.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.subsystem.Subsystem.State.ACTIVE" xrefstyle="hyperlink"/></entry>

              <entry><para>The <xref linkend="org.osgi.service.subsystem.Subsystem.State.ACTIVE" xrefstyle="hyperlink"/> state indicates that all eligible
              resources referenced by the Subsystem were successfully started
              during the starting process.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.subsystem.Subsystem.State.STOPPING" xrefstyle="hyperlink"/></entry>

              <entry><para>Indicates that the Subsystem is in the process of
              being stopped. During this state the resources referenced by the
              Subsystem are stopped if appropriate.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLING" xrefstyle="hyperlink"/></entry>

              <entry><para>Indicates that the Subsystem is in the process of
              being uninstalled. During this state the resources referenced by
              the Subsystem are marked for garbage collection if they are
              eligible, see <xref linkend="i3339635"/>.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED" xrefstyle="hyperlink"/></entry>

              <entry><para>When all of the resources referenced by the
              Subsystem which are eligible for garbage collection have been
              uninstalled then the <code>subsystem.state</code> is set to
              <xref linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED" xrefstyle="hyperlink"/>.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="i3346431">
      <title>Subsystem Service Registrations</title>

      <para>The Subsystems implementation must register one Subsystem service
      for each Subsystem installed. The Subsystems implementation must provide
      access to every Subsystem service from the Root Region. Every other
      Region must have access to the following Subsystem Services:</para>

      <itemizedlist>
        <listitem>
          <para>Subsystem service representing the Scoped Subsystem of the
          Region.</para>
        </listitem>

        <listitem>
          <para>All Unscoped Subsystem services contained in the
          Region.</para>
        </listitem>

        <listitem>
          <para>All Subsystems which are children of a Subsystem contained in
          the Region.</para>
        </listitem>
      </itemizedlist>

      <para>A Region is granted access to the Subsystem services listed above
      automatically by the Subsystems implementation regardless of the sharing
      policy defined by the Scoped Subsystem of that Region. Additional
      Subsystem services may be imported into a Region from its parent Region
      by the sharing policy defined by the Scoped Subsystem of that
      Region.</para>

      <para>For example, a Root Subsystem and <code>Root</code> Region that
      has two Scoped Subsystem children, <code>S1</code> and <code>S2</code>.
      All Subsystem services are registered by the Subsystems implementation
      and are visible in the <code>Root</code> Region. The <code>S1</code>
      Subsystem service is also implicitly visible in the <code>S1</code>
      Region because it represents the Scoped Subsystem <code>S1</code>
      contained in that Region. Similarly the <code>S2</code> Subsystem
      service is also implicitly visible from the <code>S2</code> Region. This
      example is depicted in <xref linkend="i3378540"/>.</para>

      <figure xml:id="i3378540">
        <title>Root, attached to Scoped Subsystems S1, S2</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.408in" contentwidth="6.209in" fileref="root-attached-scoped.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para><xref linkend="i3344569"/> defines a more complicated scenario
      where Subsystems and multiple children are involved.</para>

      <figure pgwide="1" xml:id="i3344569">
        <title>Complex example Subsystem scoping</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.329in" contentwidth="6.209in" fileref="complex-scoping.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>All Subsystem services are visible in the <code>Root</code>
      Region. The <code>S1</code> Subsystem service is also implicitly visible
      in the <code>S1</code> Region because it represents the Scoped Subsystem
      <code>S1</code> contained in that Region. The <code>S1</code> Region
      also has visibility to the <code>U1</code> and <code>U2</code> Subsystem
      services because these Unscoped Subsystems are contained in the
      <code>S1</code> Region. Similarly the <code>S2</code> Subsystem service
      is also implicitly visible from the <code>S2</code> Region. The
      <code>S2</code> Region also has visibility to the <code>U3</code> and
      <code>U4</code> Subsystem services because these Unscoped Subsystems are
      contained in the <code>S2</code> Region. The <code>S2</code> Region also
      has visibility to the <code>S3</code> Subsystem service because the
      <code>S3</code> Subsystem is a child of a Subsystem contained in the
      <code>S2</code> Region. Finally, the <code>S3</code> Region has implicit
      visibility to the <code>S3</code> Subsystem service and it has
      visibility to the <code>U5</code> Subsystem service because the Unscoped
      Subsystem is contained in the <code>S3</code> Region.</para>

      <para>Note that a Scoped Subsystem's import sharing policy may grant its
      Region visibility to additional Subsystem services.</para>
    </section>

    <section>
      <title>Subsystem Manifest Headers</title>

      <para>The Subsystem service interface has the <xref linkend="org.osgi.service.subsystem.Subsystem.getSubsystemHeaders-Locale-" xrefstyle="hyperlink"/> method which returns the values of the
      Subsystem's manifest headers. The headers returned by this method
      includes the values specified in the Subsystem manifest file and the
      values derived by the Subsystems implementation. Certain manifest
      headers may be derived at install time by the Subsystems implementation
      if they were not specified in the Subsystem manifest file. When a
      Subsystem manifest value is derived then the derived value must be
      included in the headers returned by the method <xref linkend="org.osgi.service.subsystem.Subsystem.getSubsystemHeaders-Locale-" xrefstyle="hyperlink"/>. The following Subsystem manifest headers may be
      derived by the Subsystems implementation:</para>

      <itemizedlist>
        <listitem>
          <para><code>Subsystem-SymbolicName</code></para>
        </listitem>

        <listitem>
          <para><code>Subsystem-Version</code></para>
        </listitem>

        <listitem>
          <para><code>Subsystem-Content</code></para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Subsystem Life Cycle</title>

    <para>The Subsystems specification provides an API to control the life
    cycle operations of a Subsystem. For each Subsystem installed there is an
    associated <code>Subsystem</code> object (also registered as a Subsystem
    service). A Subsystem's life-cycle is controlled by operations performed
    on the <code>Subsystem</code> object. Operations performed on the
    Subsystem may also cause equivalent operations on the resources referenced
    by the Subsystem. For example starting a Subsystem will cause all of its
    content resources to start if appropriate.</para>

    <para>For Scoped Subsystems the export and import sharing policies are
    initially disabled at runtime and get enabled at runtime by the Subsystems
    implementation depending on the state of the Scoped Subsystem which
    defines the sharing policy. When an import sharing policy is disabled at
    runtime, none of the installed resources contained in the Region
    associated with the Scoped Subsystem have visibility to capabilities
    available in the parent Region. Once an import policy is enabled at
    runtime the installed resources contained in the Region have visibility to
    capabilities available in the parent Region according to what the import
    sharing policy specifies. When an export sharing policy is disabled at
    runtime, none of the capabilities provided by installed resources
    contained in the Region associated with the Scoped Subsystem are visible
    in the parent Region. Once an export policy is enabled at runtime the
    capabilities provided by installed resources contained in the Region are
    visible in the parent Region according to what the export sharing policy
    specifies.</para>

    <para>The <code>subsystem.state</code> is a reflection of the last action
    performed on the Subsystem through the Subsystem service. The use of any
    other API to change the state of a resource referenced by a Subsystem
    directly does not result in a change of the <code>subsystem.state</code>
    (i.e. calling stop on a bundle). For example, uninstalling a Subsystem
    content resource which is a bundle does not cause the Subsystem to be
    uninstalled, but it does result in an error being logged.</para>

    <para>All references to changing the state of this Subsystem include both
    changing the state of the <code>Subsystem</code> object as well as the
    state property of the Subsystem service.</para>

    <para>The following figure illustrates the life cycle of a
    Subsystem:</para>

    <figure xml:id="i3314824">
      <title>State diagram Subsystems</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="3.517in" contentwidth="7.125in" fileref="subsystem-state.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <section xml:id="i3330130">
      <title>Installing</title>

      <para>A Subsystem's install process is initiated using one of the
      Subsystem service's <emphasis>install </emphasis>methods. The Subsystems
      implementation must assign a unique Subsystem identifier that is higher
      than any previous installed Subsystem identifier. Previously installed
      Subsystem identifiers include Subsystems which were uninstalled in a
      previous session of the framework. The installation of a Subsystem must
      be:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Persistent</emphasis> - The Subsystem must remain
          installed across framework and Java VM invocations until the
          Subsystem is explicitly uninstalled.</para>
        </listitem>

        <listitem>
          <para><emphasis>Atomic</emphasis> - The install method must
          completely install the Subsystem or, if installation fails, the
          Subsystems implementation must leave the framework in the same state
          as it was before the method was called.</para>
        </listitem>
      </itemizedlist>

      <para>Once a Subsystem has been installed, a <code>Subsystem</code>
      object is created and all remaining life cycle operations for the
      installed Subsystem must be performed upon this object. The returned
      <code>Subsystem</code> object can be used to start, stop, and uninstall
      the Subsystem as well as install child Subsystems.</para>

      <para>When a Subsystem is being installed the Subsystems implementation
      must perform the following operations synchronously before returning
      from the install method:</para>

      <orderedlist>
        <listitem>
          <para>Determine the symbolic name, version, and type for the
          Subsystem being installed as defined in <xref linkend="i3345962"/>.
          If the Subsystem name, version or type are invalid then the install
          fails and a Subsystem Exception is thrown.</para>
        </listitem>

        <listitem>
          <para>Determine the Subsystems for which the Subsystem being
          installed will become a constituent of by following the steps in
          <xref linkend="i3346786"/>.</para>
        </listitem>

        <listitem>
          <para>Determine the Subsystem identifier. Subsystem identifiers are
          unique and assigned by the Subsystems implementation.</para>
        </listitem>

        <listitem>
          <para>If the Subsystem is a Scoped Subsystem then create the new
          Region for the Subsystem and install and start the Region context
          bundle. See <xref linkend="i3345965"/> for the Region context
          bundle.</para>
        </listitem>

        <listitem>
          <para>Register a Subsystem service with the initial
          <code>subsystem.state</code> service property set to <xref linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLING" xrefstyle="hyperlink"/>. This Subsystem service represents the
          Subsystem resource. See <xref linkend="i3346175"/> and <xref linkend="i3346431"/> for more details.</para>
        </listitem>

        <listitem>
          <para>Determine the Subsystem content resources. See <xref linkend="i3346687"/> for details on how the Subsystem contents are
          determined. If the contents cannot be discovered successfully and
          the content is not optional then an installation failure occurs and
          a Subsystem Exception is thrown. Otherwise continue to the next
          step.</para>
        </listitem>

        <listitem>
          <para>Determine the Subsystem dependencies. See <xref linkend="i3330142"/> for details on determining the Subsystem's
          dependencies. If the dependencies cannot be determined successfully
          then an installation failure occurs and a Subsystem Exception is
          thrown. Otherwise continue to the next step.</para>
        </listitem>

        <listitem>
          <para>Install the dependencies. The Subsystems implementation must
          prevent resolution of dependency wires to the capabilities provided
          by the installed dependencies until the Subsystem has successfully
          entered <xref linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLED" xrefstyle="hyperlink"/> state. See <xref linkend="i3346786"/> for
          details on where dependencies are installed and see <xref linkend="i3339635"/> for how they are tracked. If any dependency
          fails to install then an installation failure occurs and a Subsystem
          Exception is thrown. Otherwise continue to the next step.</para>
        </listitem>

        <listitem>
          <para>Install content resources. The content resources must be
          disabled from resolving until the Subsystem has successfully entered
          <xref linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLED" xrefstyle="hyperlink"/> state. If any content resource fails to
          install then and installation failure occurs and a Subsystem
          Exception is thrown. Otherwise continue to the next step.</para>
        </listitem>

        <listitem>
          <para>If the Subsystem is scoped, enable the import sharing policy
          for the Region. See <xref linkend="i3328531"/>.</para>
        </listitem>

        <listitem>
          <para>Enable resolution for all of the Subsystem content and any
          dependencies installed. Set the <code>subsystem.state</code> to
          <xref linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLED" xrefstyle="hyperlink"/> and return the installed
          <code>Subsystem</code> object.</para>
        </listitem>
      </orderedlist>

      <para>The state <xref linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED" xrefstyle="hyperlink"/> is used to inform about an installation failure.
      All installation failures use the following steps:</para>

      <orderedlist>
        <listitem>
          <para>When a Subsystem fails to install it enters the <xref linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED" xrefstyle="hyperlink"/> state.</para>
        </listitem>

        <listitem>
          <para>Immediately transition the Subsystem to the <xref linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLING" xrefstyle="hyperlink"/> state.</para>
        </listitem>

        <listitem>
          <para>All content and dependencies which may have been installed by
          the Subsystem installing process must be uninstalled.</para>
        </listitem>

        <listitem>
          <para>Transition the Subsystem to the <xref linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED" xrefstyle="hyperlink"/> state.</para>
        </listitem>

        <listitem>
          <para>Unregister the Subsystem service.</para>
        </listitem>

        <listitem>
          <para>If the Subsystem is scoped then, uninstall the Region context
          bundle.</para>
        </listitem>

        <listitem>
          <para>Throw a Subsystem Exception indicating an install
          failure.</para>
        </listitem>
      </orderedlist>
    </section>

    <section>
      <title>Resolving</title>

      <para>A Subsystem's resolve process is initiated by performing a start
      operation on a Subsystem whose <code>subsystem.state</code> is currently
      set to <xref linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLED" xrefstyle="hyperlink"/>. There is no explicit operation for initiating
      the resolve process of a Subsystem. The Subsystems implementation is
      free to initiate the resolve process for a Subsystem for any reason. For
      example, the Subsystems implementation may choose to try to resolve all
      currently installed Subsystems when the start operation is performed on
      a single Subsystem.</para>
    </section>

    <section xml:id="i3365470">
      <title>Starting</title>

      <para>A Subsystem can be started by calling the Subsystem <xref linkend="org.osgi.service.subsystem.Subsystem.start--" xrefstyle="hyperlink"/> method or the Subsystems implementation can
      automatically start the Subsystem if the Subsystem is <emphasis>ready
      </emphasis>and the <emphasis>autostart setting </emphasis>of the
      Subsystem indicates that it must be started. When a Subsystem is being
      started the Subsystems implementation must perform the following
      operations synchronously before returning from the <xref linkend="org.osgi.service.subsystem.Subsystem.start--" xrefstyle="hyperlink"/> method:</para>

      <orderedlist>
        <listitem>
          <para>If the <code>subsystem.state</code> is <xref linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED" xrefstyle="hyperlink"/>, or <xref linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLING" xrefstyle="hyperlink"/>, then an Illegal State Exception is
          thrown.</para>
        </listitem>

        <listitem>
          <para>Set the Subsystems <emphasis>autostart setting </emphasis>to
          <emphasis>started</emphasis>.</para>
        </listitem>

        <listitem>
          <para>If the <code>subsystem.state</code> is <xref linkend="org.osgi.service.subsystem.Subsystem.State.ACTIVE" xrefstyle="hyperlink"/> then the start method returns
          immediately.</para>
        </listitem>

        <listitem>
          <para>If the Subsystem is not <emphasis>ready </emphasis>to be
          started then the start method returns immediately.</para>
        </listitem>

        <listitem>
          <para>If this <code>subsystem.state</code> is <xref linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVING" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.subsystem.Subsystem.State.STARTING" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.subsystem.Subsystem.State.STOPPING" xrefstyle="hyperlink"/>, then the start method must wait for
          starting or stopping to complete before continuing. If this does not
          occur in a reasonable time, a Subsystem Exception is thrown to
          indicate the Subsystem was unable to be started.</para>
        </listitem>

        <listitem>
          <para>If the <code>subsystem.state</code> is <xref linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVED" xrefstyle="hyperlink"/> then continue to the next step; otherwise if
          the <code>subsystem.state</code> is <xref linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLED" xrefstyle="hyperlink"/> then the <code>subsystem.state</code> is set
          to <xref linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVING" xrefstyle="hyperlink"/> and an attempt is made to resolve all of the
          Subsystem's content resources. If all contents are resolved then set
          the <code>subsystem.state</code> to <xref linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVED" xrefstyle="hyperlink"/>, enable the export sharing policy and
          continue to the next step; otherwise a starting failure occurs and a
          Subsystem Exception is thrown.</para>
        </listitem>

        <listitem>
          <para>Set the <code>subsystem.state</code> to <xref linkend="org.osgi.service.subsystem.Subsystem.State.STARTING" xrefstyle="hyperlink"/>.</para>
        </listitem>

        <listitem>
          <para>Start all resources referenced by the Subsystem according to
          <xref linkend="i3339345"/>. If all of the resources start
          successfully then continue to the next step; otherwise a start
          failure occurs.</para>
        </listitem>

        <listitem>
          <para>Set the <code>subsystem.state</code> to <xref linkend="org.osgi.service.subsystem.Subsystem.State.ACTIVE" xrefstyle="hyperlink"/> and return.</para>
        </listitem>
      </orderedlist>

      <para>All start failures use the following steps:</para>

      <orderedlist>
        <listitem>
          <para>If the subsystem state is <xref linkend="org.osgi.service.subsystem.Subsystem.State.STARTING" xrefstyle="hyperlink"/> then change the state to <xref linkend="org.osgi.service.subsystem.Subsystem.State.STOPPING" xrefstyle="hyperlink"/>.</para>
        </listitem>

        <listitem>
          <para>Stop all resources that were started as part of this
          operation.</para>
        </listitem>

        <listitem>
          <para>Change the state to <xref linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLED" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVED" xrefstyle="hyperlink"/> depending on if the Subsystem was
          resolved.</para>
        </listitem>

        <listitem>
          <para>Throw a Subsystem Exception indicating the cause of the start
          failure.</para>
        </listitem>
      </orderedlist>
    </section>

    <section xml:id="i3348344">
      <title>Stopping</title>

      <para>A Subsystem's stop process is initiated using the Subsystem
      service's <xref linkend="org.osgi.service.subsystem.Subsystem.stop--" xrefstyle="hyperlink"/> method. When a Subsystem is being stopped the
      Subsystems implementation must perform the following operations
      synchronously before returning from the <xref linkend="org.osgi.service.subsystem.Subsystem.stop--" xrefstyle="hyperlink"/> method:</para>

      <orderedlist>
        <listitem>
          <para>If the <code>subsystem.state</code> is <xref linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED" xrefstyle="hyperlink"/>, or <xref linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLING" xrefstyle="hyperlink"/>, then an Illegal State Exception is
          thrown.</para>
        </listitem>

        <listitem>
          <para>Set the Subsystems <emphasis>autostart setting </emphasis>to
          <emphasis>stopped</emphasis>.</para>
        </listitem>

        <listitem>
          <para>If the <code>subsystem.state</code> is <xref linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVED" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLED" xrefstyle="hyperlink"/> then the <xref linkend="org.osgi.service.subsystem.Subsystem.stop--" xrefstyle="hyperlink"/> method returns immediately.</para>
        </listitem>

        <listitem>
          <para>If this <code>subsystem.state</code> is <xref linkend="org.osgi.service.subsystem.Subsystem.State.STARTING" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.subsystem.Subsystem.State.STOPPING" xrefstyle="hyperlink"/>, then the stop method must wait for starting
          or stopping to complete before continuing. If this does not occur in
          a reasonable time, a Subsystem Exception is thrown to indicate the
          Subsystem was unable to be stopped.</para>
        </listitem>

        <listitem>
          <para>Set the <code>subsystem.state</code> to <xref linkend="org.osgi.service.subsystem.Subsystem.State.STOPPING" xrefstyle="hyperlink"/>.</para>
        </listitem>

        <listitem>
          <para>Stop all resources referenced by the Subsystem according to
          <xref linkend="i3339345"/>. If any error occurs while stopping a
          resource the Subsystems implementation must continue to stop the
          remaining resources that are eligible to stop.</para>
        </listitem>

        <listitem>
          <para>Set the <code>subsystem.state</code> to <xref linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVED" xrefstyle="hyperlink"/>.</para>
        </listitem>
      </orderedlist>

      <para>With regard to error handling while stopping resources referenced
      by the Subsystem, errors subsequent to the first should be logged. Once
      the stop process has completed, a Subsystem Exception must be thrown
      with the initial error as the specified cause.</para>
    </section>

    <section>
      <title>Uninstalling</title>

      <para>A Subsystem's uninstall process is initiated using the Subsystem
      service's <xref linkend="org.osgi.service.subsystem.Subsystem.uninstall--" xrefstyle="hyperlink"/> method. To whatever extent possible, the
      Subsystems implementation must determine the resources referenced by the
      Subsystem which are eligible for garbage collection, <xref linkend="i3365854"/>. This method must always uninstall the Subsystem
      from the persistent storage of the Subsystems implementation.</para>

      <para>Once this method returns, the state of the platform must be the
      same as if the Subsystem had never been installed, unless some bundle
      resource which was uninstalled has exported package which are being used
      by other bundles still installed in the platform. All old exports must
      remain available for existing bundles and future resolves until the
      uninstalled bundle is refreshed or the framework is restarted.</para>

      <para>When a Subsystem is being uninstalled the Subsystems
      implementation must perform the following operations before returning
      from the <xref linkend="org.osgi.service.subsystem.Subsystem.uninstall--" xrefstyle="hyperlink"/> method:</para>

      <orderedlist>
        <listitem>
          <para>If the <code>subsystem.state</code> is <xref linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED" xrefstyle="hyperlink"/> then this method returns immediately.</para>
        </listitem>

        <listitem>
          <para>If the <code>subsystem.state</code> is <xref linkend="org.osgi.service.subsystem.Subsystem.State.STARTING" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.subsystem.Subsystem.State.STOPPING" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.subsystem.Subsystem.State.ACTIVE" xrefstyle="hyperlink"/> then the Subsystem is stopped according to
          <xref linkend="i3348344"/>. Otherwise continue to the next
          step.</para>
        </listitem>

        <listitem>
          <para>If the <code>subsystem.state</code> is <xref linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLING" xrefstyle="hyperlink"/> and the installing process is interruptible,
          fail the install process; otherwise, wait until the installation is
          complete.</para>
        </listitem>

        <listitem>
          <para>If the <code>subsystem.state</code> is in the <xref linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED" xrefstyle="hyperlink"/> state then skip to step <xref linkend="service.subsystem-subsystemuninstalling6"/>.</para>
        </listitem>

        <listitem>
          <para>Set the <code>subsystem.state</code> to <xref linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLED" xrefstyle="hyperlink"/>.</para>
        </listitem>

        <listitem xml:id="service.subsystem-subsystemuninstalling6">
          <para>Set the <code>subsystem.state</code> to <xref linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLING" xrefstyle="hyperlink"/>.</para>
        </listitem>

        <listitem>
          <para>Determine the resources referenced by the Subsystem which are
          eligible for garbage collection according to <xref linkend="i3365854"/>. If a Subsystems implementation does garbage
          collection synchronously and any error occurs while uninstalling a
          resource the Subsystems implementation must continue to uninstall
          the remaining resources that are eligible to garbage collect.</para>
        </listitem>

        <listitem>
          <para>Set the <code>subsystem.state</code> to <xref linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED" xrefstyle="hyperlink"/>.</para>
        </listitem>

        <listitem>
          <para>Unregister the Subsystem service.</para>
        </listitem>

        <listitem>
          <para>If the Subsystem is a Scoped Subsystem then uninstall the
          Region context bundle. At this point the Region no longer
          exists.</para>
        </listitem>
      </orderedlist>

      <para>With regard to error handling while synchronously uninstalling
      resources eligible for garbage collection, errors subsequent to the
      first should be logged. Once the uninstall process has completed, a
      Subsystem Exception must be thrown with the initial error as the
      specified cause.</para>
    </section>
  </section>

  <section xml:id="i3330073">
    <title>Pre-Calculated Deployment</title>

    <para>A pre-calculated deployment in the form of a deployment manifest can
    be included as part of a Subsystem Archive or provided by a deployer at
    installation time. Manifests provided at install time override those
    included within an archive, and those within an archive override
    calculated ones. The deployment manifest defines the precise deployment of
    the Subsystem. Providing a deployment manifest means a Subsystem can be
    deployed and the exact resources that are installed are known ahead of
    time. This allows test teams to test specific deployments and these same
    deployments can then be used in production. The deployment manifest is a
    locking down of the variability in a Subsystem manifest (or the equivalent
    if the Subsystem definition is calculated during deployment based on the
    Subsystem Archive). The deployment manifest follows the same syntax rules
    as the Subsystem manifest but uses different headers for
    deployment-specific information. A deployment manifest describes the
    following:</para>

    <itemizedlist>
      <listitem>
        <para>The exact versions for content resources</para>
      </listitem>

      <listitem>
        <para>Any dependencies required to resolve the Subsystem's content
        that are not satisfied by the target runtime</para>
      </listitem>

      <listitem>
        <para>Sharing policy for requirements and capabilities shared into or
        out of the Subsystem.</para>
      </listitem>
    </itemizedlist>

    <para>Because a Deployment Manifest's dependencies bridge between the
    requirements of the Subsystem and the capabilities of the target runtime,
    it is not guaranteed to be portable. If available, the Subsystem service
    implementation must first attempt to use the Deployment Manifest to deploy
    the Subsystem. If the Deployment Manifest is found not to work, for
    example, the chosen resources do not resolve for the target runtime, then
    the Subsystem's implementation must fail the installation of the
    Subsystem.</para>

    <section>
      <title>Deployment Headers</title>

      <para>A Subsystem can carry descriptive information about its deployment
      in the Deployment Manifest file contained in its Subsystem Archive under
      the name <code>OSGI-INF/DEPLOYMENT.MF</code>. This specification defines
      Deployment Manifest headers such as Deployed-Content, which Subsystem
      deployers (typically tools) use to supply deployment information about a
      Subsystem. A Subsystems implementation must:</para>

      <itemizedlist>
        <listitem>
          <para>Process the main section of the manifest. Individual section
          of the manifest are ignored.</para>
        </listitem>

        <listitem>
          <para>Ignore unknown manifest headers. The Subsystem deployer can
          define additional manifest headers as needed.</para>
        </listitem>

        <listitem>
          <para>Ignore unknown attributes and directives.</para>
        </listitem>
      </itemizedlist>

      <para>All specified manifest headers are listed in the following
      sections, and include example values. All headers are optional, unless
      specifically indicated.</para>

      <section>
        <title>Deployment-ManifestVersion: 1</title>

        <para>The Deployment-ManifestVersion header defines that the
        deployment manifest follows the rules of a Subsystems Specification.
        It is 1 (the default) for this version of the specification. Future
        versions of the Subsystems Specification can define higher numbers for
        this header.</para>
      </section>

      <section>
        <title>Subsystem-SymbolicName: com.acme.subsystem.logging</title>

        <para>The Subsystem-SymbolicName header specifies a non-localizable
        name for the Subsystem that the deployment manifest is for. The
        Subsystem symbolic name together with a version must identify a unique
        Subsystem though it can be installed multiple times in a framework.
        See <xref linkend="i3348566"/>.</para>
      </section>

      <section>
        <title>Subsystem-Version: 1.0</title>

        <para>The Subsystem-Version header specifies the version of this
        Subsystem that the deployment manifest is for. See <xref linkend="i3348566"/>.</para>
      </section>

      <section>
        <title>Deployed-Content:
        com.acme.logging;type=osgi.bundle;deployed-version=1.0.0</title>

        <para>The Deployed-Content header lists requirements for the exact
        resources that are considered to be the contents of this Subsystem.
        This header identifies the exact versions of the resources listed in
        the Subsystem-Content header. See <xref linkend="i3348639"/>.</para>
      </section>

      <section>
        <title>Provision-Resource:
        com.acme.logging;type=osgi.bundle;deployed-version=1.0.0</title>

        <para>The Provision-Resource header lists requirements for the exact
        resources to be installed in order to satisfy requirements from the
        Deployed-Content resources that are not satisfied by the capabilities
        of the target runtime. See <xref linkend="i3348654"/>.</para>
      </section>

      <section>
        <title>Import-Package: com.acme.api;version="[1.0,1.1)"</title>

        <para>The Import-Package header lists package requirements for
        capabilities that are to be imported into a Scoped Subsystem. See
        <xref linkend="i3321439"/>.</para>
      </section>

      <section>
        <title>Export-Package: com.acme.api;version=1.0.1</title>

        <para>The Export-Package header lists package capabilities that are to
        be exported out of a Scoped Subsystem. See <xref linkend="i3321359"/>.</para>
      </section>

      <section>
        <title>Require-Bundle: com.acme.logging;version="[1.0, 1.1)"</title>

        <para>The Require-Bundle header lists bundle requirements for bundle
        capabilities that are to be imported into a Scoped Subsystem. See
        <xref linkend="i3321711"/>.</para>
      </section>

      <section>
        <title>Provide-Capability: com.acme.dict; from=nl; to=de;
        version:Version=1.2</title>

        <para>The Provide-Capability header declares the capabilities exported
        for a Scoped Subsystem. See <xref linkend="i3394044"/>.</para>
      </section>

      <section>
        <title>Require-Capability: osgi.ee; filter:="(osgi.ee=*)"</title>

        <para>The Require-Capability header declares the required capabilities
        for a Scoped Subsystem. See <xref linkend="i3394044"/>.</para>
      </section>

      <section>
        <title>Subsystem-ImportService: com.acme.service.Logging</title>

        <para>The Subsystem-ImportService header lists service requirements
        for service capabilities that are to be imported into a Scoped
        Subsystem. See <xref linkend="i3348699"/>.</para>
      </section>

      <section xml:id="i3321913">
        <title>Subsystem-ExportService: com.acme.service.Logging</title>

        <para>The Subsystem-ExportService header lists service requirements
        that are matched against service capabilities provided by the
        Deployed-Content resources. Any matching capabilities are exported out
        of the Scoped Subsystem.</para>
      </section>
    </section>

    <section xml:id="i3348566">
      <title>Validating Subsystem Identity</title>

      <para>The Subsystem to which the deployment manifest applies is
      identified by the Subsystem's symbolic name and version headers. These
      headers are identical to those specific in the Subsystem manifest. A
      Subsystem runtime must validate that the headers specified in the
      deployment manifest match those of the Subsystem manifest, taking into
      account Subsystem manifest defaulting rules. This allows the two
      manifests to be managed by teams separately during development or
      testing whilst ensuring no mistakes have been made when they are brought
      together for deployment. If the headers do not match, then the runtime
      must not use the deployment manifest and must fail the
      installation.</para>
    </section>

    <section xml:id="i3348639">
      <title>Deployed-Content</title>

      <para>The Deployed-Content header lists the exact constituents to be
      installed for the Subsystem. For each mandatory entry in the
      Subsystem-Content header, there must be a corresponding Deployed-Content
      entry. If a content resources is identified as optional and there is a
      corresponding entry in the deployment manifest, then it must be
      deployed. If there is no corresponding entry in the deployment manifest
      then no resource must be deployed for it. The Deployed-Content entry
      identifies the exact version of the constituent whereas the
      Subsystem-Content entry may specify a version range. Each
      Deployed-Content entry is identified by symbolic name, version and type
      (an osgi identity).</para>

      <programlisting>Deployed-Content:
    com.acme.logging;
        deployed-version=1.0,
    com.acme.persistence;
        deployed-version=1.1;
        type=osgi.subsystem.composite </programlisting>

      <para>Each entry must uniquely identify the resource to be provisioned
      as a constituent of the Subsystem.</para>

      <para>The following mandatory matching attributes must be applied to
      each entry:</para>

      <itemizedlist>
        <listitem>
          <para><code>deployed-version</code> - The exact version of the
          resource to be deployed. Deployed version is a specific version, not
          a version range, hence the use of a new attribute name. There is no
          default value for this attribute.</para>
        </listitem>
      </itemizedlist>

      <para>The following architected matching attribute as well as any
      arbitrary matching attributes can be applied to each entry:</para>

      <para><code>type</code> - The type of the constituent. It is recommended
      that a reverse domain name convention is used unless those types and
      their processing is standardized by the OSGi Alliance (e.g. bundles).
      The default value is <code>osgi.bundle</code>. A Subsystems
      implementation may support additional types, but the following types
      must be supported:</para>

      <itemizedlist>
        <listitem>
          <para><code>osgi.bundle</code></para>
        </listitem>

        <listitem>
          <para><code>osgi.fragment</code></para>
        </listitem>

        <listitem>
          <para><code>osgi.subsystem.application</code></para>
        </listitem>

        <listitem>
          <para><code>osgi.subsystem.composite</code></para>
        </listitem>

        <listitem>
          <para><code>osgi.subsystem.feature</code></para>
        </listitem>
      </itemizedlist>

      <para>The value of this directive must match the type directive for the
      corresponding entry in the Subsystem-Content header, including taking
      into account defaulting. If the type does not match, then the
      installation must fail.</para>

      <para>The following directive can be applied to each entry:</para>

      <itemizedlist>
        <listitem>
          <para><code>start-order</code> - The precedence the constituent
          should have during the start sequence. Resources with lower
          <code>start-order</code> values are started before resources with
          higher values. Resources with the same <code>start-order</code>
          value may be started sequentially or in parallel. The value of this
          directive must match the <code>start-order</code> directive for the
          corresponding entry in the Subsystem-Content header, including
          taking into account defaulting.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i3348654">
      <title>Provision-Resource</title>

      <para>The Provision-Resource header lists the resources to be
      provisioned in support of the Subsystem's dependencies. The exact
      location in the Subsystem hierarchy where the resources are installed is
      determined by the <code>provision-policy</code> of the Subsystem or its
      parents.</para>

      <para>The Provision-Resource header must result in a transitively
      complete deployment. For example, if a resource added to
      Provision-Resource brings in additional unsatisfied requirements,
      further resources must be added to satisfy these, until there are no
      unresolved requirements remaining.</para>

      <para>Provision resource has one required matching attribute:</para>

      <itemizedlist>
        <listitem>
          <para><code>deployed-version</code> - The exact version of the
          resource to be deployed. Deployed version is a specific version, not
          a version range, hence the use of a new attribute name. There is no
          default value for this attribute.</para>
        </listitem>
      </itemizedlist>

      <para>The following architected matching attributes as well as any
      arbitrary matching attributes can be applied to each entry:</para>

      <para><code>type</code> - The type of the resource. It is recommended
      that a reverse domain name convention is used unless those types and
      their processing is standardized by the OSGi Alliance (e.g. bundles).
      The default type is <code>osgi.bundle</code>. A Subsystems
      implementation may support additional types, but the following types
      must be supported:</para>

      <itemizedlist>
        <listitem>
          <para><code>osgi.bundle</code></para>
        </listitem>

        <listitem>
          <para><code>osgi.fragment</code></para>
        </listitem>

        <listitem>
          <para><code>osgi.subsystem.application</code></para>
        </listitem>

        <listitem>
          <para><code>osgi.subsystem.composite</code></para>
        </listitem>

        <listitem>
          <para><code>osgi.subsystem.feature</code></para>
        </listitem>
      </itemizedlist>

      <para>The list of the Provision-Resource entries is determined by
      resolving the Subsystem's requirements. The way in which the Subsystem's
      requirements are resolved is dependent on the Subsystem's sharing
      policy.</para>

      <para>For a Scoped Subsystem the provision resources header must
      identify a set of resources necessary to satisfy the requirements into
      the Subsystem that are not satisfied by the target deployment
      environment. These requirements may be for packages, services, or other
      types of requirements, and are those identified in the deployment
      manifest using headers such as Import-Package and
      Subsystem-ImportService.</para>

      <para>For an Unscoped Subsystem any mandatory requirements that are not
      satisfied by capabilities provided by the target environment may be
      satisfied by other constituents or a resource added to the
      Provision-Resource header. The resolution process for Unscoped
      Subsystems has no propensity to resolve to capabilities provided by the
      Subsystem's constituents and so a resource listed in Provision-Resource
      may provide capabilities that are also provided by a constituent
      resource.</para>
    </section>

    <section xml:id="i3321439">
      <title>Import-Package</title>

      <para>Scoped Subsystems describe the exact packages they import in their
      Deployment Manifests. They do this using the bundle Import-Package
      header. Any packages that match the Import-Package statement must be
      allowed into the Scoped Subsystem by its associated Region's sharing
      policy.</para>

      <para>Unscoped Subsystems have a sharing policy that shares all packages
      and therefore their deployment manifests do not use this header to
      describe the sharing of individual packages. If this header is present
      and the Subsystem is unscoped, then the runtime must fail the
      installation of the Subsystem.</para>
    </section>

    <section xml:id="i3321359">
      <title>Export-Package</title>

      <para>Scoped Subsystems describe the exact packages they export in their
      deployment manifests. They do this using the bundle Export-Package
      header. Any packages that match the Export-Package statement must be
      made available outside the Subsystem by its associated Region's sharing
      policy.</para>

      <para>Unscoped Subsystems have a sharing policy that shares all packages
      and therefore their deployment manifests do not use this header to
      describe the sharing of individual packages. If this header is present
      and the Subsystem is unscoped, then the runtime must fail the
      installation of the Subsystem.</para>
    </section>

    <section xml:id="i3321711">
      <title>Require-Bundle</title>

      <para>Scoped Subsystems can have Require-Bundle requirements satisfied
      by bundles outside the Subsystem. These bundle requirements are
      described using the bundle Require-Bundle header. Any bundles that match
      the Require-Bundle statement must be allowed into the Scoped Subsystem
      by its associated Region's sharing policy. If a bundle matches the
      Require-Bundle requirement then it becomes available as a candidate for
      wiring any Require-Bundle requirements inside the Subsystem. However,
      any packages the matching bundle provides are not made available to
      satisfy Import-Package requirements by the Region's sharing policy. If
      the packages are also required then they must be listed in the
      deployment manifest's Import-Package header.</para>

      <para>Unscoped Subsystems have a sharing policy that shares all bundles
      and therefore their deployment manifests do not use this header to
      describe the sharing of specific bundles. If this header is present and
      the Subsystem is unscoped, then the runtime must fail the installation
      of the Subsystem.</para>
    </section>

    <section xml:id="i3348699">
      <title>Services</title>

      <para>Scoped Subsystems can import and export services using the
      Subsystem-ImportService and Subsystem-ExportService headers
      respectively. These two headers must conform to the following
      syntax:</para>

      <programlisting>Subsystem-ImportService ::= service( ',' service )*
Subsystem-ExportService ::= service ( ',' service )*
service                 ::= qname ( ';' parameter )*</programlisting>

      <para>Both headers support the following directive:</para>

      <itemizedlist>
        <listitem>
          <para><code>filter</code> - A filter expression that is used to
          match against the service properties of services registered using
          the specified <code>qname</code> of the service's object class. The
          <code>filter</code> directive is optional. If no <code>filter</code>
          directive is defined then all services registered using the
          specified <code>qname</code> match the service statement.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i3322018">
      <title>Subsystem-ImportService</title>

      <para>Scoped Subsystems describe the services they import in their
      deployment manifests. They do this using the Subsystem-ImportService
      header. Subsystem-ImportService header defines a list of OSGi service
      filters that are matched against the services visible inside the Scoped
      Subsystem's parent Region. Each service visible in the Subsystem's
      parent Region that matches one or more Subsystem-ImportService
      statements must be allowed into the Scoped Subsystem by its associated
      Region's sharing policy. The following example imports services
      registered under the <code>com.acme.logging.Log</code>interface with a
      service property <code>threshold=error</code>.</para>

      <programlisting>Subsystem-ImportService: com.acme.logging.Log;filter:="(threshold=error)"</programlisting>

      <para>Unscoped Subsystems have a sharing policy that shares all services
      and therefore their deployment manifests do not use this header to
      describe the sharing of specific services. If this header is present and
      the Subsystem is unscoped, then the runtime must fail the installation
      of the Subsystem.</para>
    </section>

    <section xml:id="i3321933">
      <title>Subsystem-ExportService</title>

      <para>Scoped Subsystems describe the services they export in their
      deployment manifests. They do this using the Subsystem-ExportService
      header. The Subsystem-ExportService header defines a list of OSGi
      service filters that are matched against the services visible inside the
      Scoped Subsystem's Region. Each service visible in the Scoped
      Subsystem's Region that matches one or more Subsystem-ExportService
      statements must be allowed by its associated Region's sharing policy
      into the Scoped Subsystem's parent Region. The following example exports
      services registered under the <code>com.acme.logging.Log</code>
      interface with a service property <code>threshold=error</code>.</para>

      <programlisting>Subsystem-ExportService: com.acme.logging.Log;filter:="(threshold=error)"</programlisting>

      <para>Unscoped Subsystems have a sharing policy that shares all services
      and therefore their Deployment Manifests do not use this header to
      describe the sharing of specific services. If this header is present and
      the Subsystem is unscoped, then the runtime must fail the installation
      of the Subsystem.</para>
    </section>
  </section>

  <section xml:id="i3322905">
    <title>Subsystem Types</title>

    <para>Subsystem types simplify the configuration of sharing policies. The
    type of Subsystem is specified using the Subsystem-Type header. Each type
    has its own default sharing policy, for example, to forbid the sharing of
    capabilities out, or to share all capabilities in. This specification
    defines three Subsystem types:</para>

    <itemizedlist>
      <listitem>
        <para><code>osgi.subsystem.application</code></para>
      </listitem>

      <listitem>
        <para><code>osgi.subsystem.composite</code></para>
      </listitem>

      <listitem>
        <para><code>osgi.subsystem.feature</code></para>
      </listitem>
    </itemizedlist>

    <para>Other, non-standard, types are permitted. The specifics of each
    standard type are describe below.</para>

    <section>
      <title>Application</title>

      <para>An application is a Scoped Subsystem with a sharing policy
      associated with what is often considered to be an application. An
      application does not share (export) any capabilities to other bundles or
      Subsystems. It also does not explicitly import any capabilities. Any
      required capabilities that are not satisfied by the application's
      constituents are automatically shared in (imported) from the parent
      Subsystem.</para>

      <para>A Subsystem is identified as an application by specifying a
      Subsystem type value of <code>osgi.subsystem.application</code> in the
      Subsystem manifest.</para>

      <programlisting>Subsystem-Type: osgi.subsystem.application</programlisting>
    </section>

    <section>
      <title>Application Deployment</title>

      <para>Application Subsystems are not configured using additional
      requirement or capability headers, such as Import-Package. Applications
      do not export any capabilities. If an application Subsystem contains any
      capability exports then the Subsystem runtime should log an error and
      must fail.</para>

      <para>Any imported capabilities are derived from the application
      Subsystem content. An application Subsystem implicitly imports any
      capabilities required to satisfy requirements from the Subsystem
      contents that are not satisfied by the capabilities of the Subsystem
      content.</para>

      <para>Unsatisfied mandatory requirements result in a subsystem
      installation failure. Unsatisfied optional requirements do not. However,
      implementations must ensure any unsatisfied optional requirements are
      added to the sharing policy.</para>

      <section>
        <title>Package Imports</title>

        <para>Application resolution is required to prefer packages provided
        by content bundles over those provided outside the application. For
        this reason, the application Subsystem sharing policy only imports
        packages corresponding to Import-Package statements from the content
        bundles that are not satisfied when resolving the application contents
        in isolation. This is equivalent to first resolving the
        Subsystem-Content requirements to determine the Deployed-Content and
        then based on this set of resources, determining which Import-Package
        requirements remain unsatisfied.</para>

        <para>A deployment manifest for an application Subsystem would list
        these package imports using the Import-Package header.</para>
      </section>

      <section>
        <title>Service Imports</title>

        <para>Application resolution is required to prefer services provided
        by content bundles over those provided outside the application. For
        this reason, the application Subsystem sharing policy only imports
        services required by the Subsystem's content bundles that are not also
        provided by the content bundles. This specification provides a means
        of declaratively identifying the services a bundle provides or
        requires using the <code>Provide-Capability</code> and
        <code>Require-Capability</code> headers with the
        <code>osgi.service</code> namespace. See <xref linkend="service.namespaces-osgi.service.namespace"/></para>

        <para>An example of a bundle providing the service and declaring it
        using the <code>Provide-Capability</code> header is as follows:</para>

        <programlisting>Provide-Capability: osgi.service;
 objectClass:List&lt;String&gt;="com.foo.MyService";
 uses:="com.foo"</programlisting>

        <para>Note that declaring a provided service in this manner only
        affects resolution. It does not affect service visibility at runtime.
        In other words, a subsystem that imports service
        <code>com.acme.Foo</code> will see all of the corresponding service
        registrations that its parent sees regardless of whether or not the
        provider declared this service in the <code>Provide-Capability</code>
        header.</para>

        <para>An example of a bundle requiring a service and declaring the
        requirement using the <code>Require-Capability</code> header is as
        follows:</para>

        <programlisting>Require-Capability: osgi.service;
 filter:="(objectClass=com.foo.MyService)";
 effective:="active"</programlisting>

        <para>These headers can be hand-written (e.g., to declare programmatic
        use of an OSGi service) or generated by a tool (e.g., BND) based on a
        declarative component model configuration (e.g., Declarative Services
        or Blueprint). A Subsystems implementation must assume these headers,
        if present, declare all of the service dependencies. Implementations
        must therefore not search the bundle for additional dependencies from
        other sources.</para>

        <para>A deployment manifest for an application Subsystem would list
        these service imports using the Subsystem-ImportService header.</para>
      </section>

      <section>
        <title>Bundle Requirements</title>

        <para>Application resolution is required to prefer bundle capabilities
        provided by content bundles over those provided outside the
        application. For this reason, the application Subsystem sharing policy
        only requires bundle capabilities corresponding to Require-Bundle
        statements from the content bundles that are not satisfied when
        resolving the application contents in isolation. This is equivalent to
        first resolving the Subsystem-Content requirements to determine the
        Deployed-Content and then based on this set of resources, determining
        which Require-Bundle requirements remain unsatisfied.</para>

        <para>A Deployment Manifest for an application Subsystem would list
        these bundle requirements using the Require-Bundle header.</para>
      </section>

      <section>
        <title>Generic Requirements</title>

        <para>Application resolution is required to prefer generic
        capabilities provided by content bundles over those provided outside
        the application. For this reason, the application Subsystem sharing
        policy only generic requirements corresponding to Require-Capability
        statements from the content bundles that are not satisfied by
        Provide-Capability statements of the content bundles when resolving
        the application contents in isolation. This is equivalent to first
        resolving the Subsystem-Content requirements to determine the
        Deployed-Content and then based on this set of resources, determining
        which Require-Capability statements remain unsatisfied.</para>

        <para>An deployment manifest for an application Subsystem would list
        these generic requirements using the Require-Capability header.</para>
      </section>

      <section>
        <title>Dependencies</title>

        <para>Application Subsystems' implicit requirements are determined as
        described in the Application Deployment section in <xref linkend="i3330142"/>. Any mandatory requirements from constituents
        that are not satisfied by capabilities provided by the target
        environment or other constituents must be satisfied by additional
        dependencies. The Subsystem runtime is responsible for provisioning
        these based on the Subsystem's provision policy or those of its scoped
        parents. If the application Subsystem has an associated deployment
        manifest, then these resources are described in the Provision-Resource
        header.</para>
      </section>
    </section>

    <section>
      <title>Composite</title>

      <para>A composite is a Scoped Subsystem with a sharing policy that by
      default does not share anything with its parent and therefore all
      sharing is fully explicit. Capabilities, such as packages and services,
      may be explicitly imported into or exported out of the composite.</para>

      <para>A Subsystem is identified as an composite by specifying a
      Subsystem type value of <code>osgi.subsystem.composite</code> in the
      Subsystem manifest.</para>

      <programlisting>Subsystem-Type: osgi.subsystem.composite</programlisting>

      <section>
        <title>Subsystem Content</title>

        <para>The Subsystem-Content header allows version ranges for content
        resources. For composite Subsystems, this value must be a fixed
        version range (e.g. <code>[1.0, 1.0]</code>) for resources of type
        <code>osgi.bundle</code>, <code>osgi.fragment</code>,
        <code>osgi.subsystem.application</code>,
        <code>osgi.subsystem.composite</code>, and
        <code>osgi.subsystem.feature</code>. This is due to the fact that
        there is an inextricable link between the versions on the explicit
        import and export statements made on a composite and the chosen
        versions of the content bundles. Allowing variability in the content
        versions for these types of resources risks introducing
        incompatibilities with sharing policy for the composite. If a
        composite Subsystem does not use strict version ranges then the
        composite Subsystem must fail to install.</para>
      </section>

      <section>
        <title>Package Imports</title>

        <para>A composite Subsystem explicitly states the packages it imports
        using the Import-Package header. If the composite includes a
        deployment manifest then the Import-Package header is used to describe
        these and they must be identical (logically, not syntactically) to the
        Import-Package headers in the composite's Subsystem manifest. If the
        imports are not the same then the Subsystem runtime should log an
        error and must fail the installation.</para>
      </section>

      <section>
        <title>Package Exports</title>

        <para>A composite Subsystem explicitly states the packages it exports
        using the Export-Package header. If the composite includes a
        deployment manifest then the Export-Package header is used to describe
        these and they must be identical (logically, not syntactically) to the
        Export-Package headers in the composite's Subsystem manifest. If the
        exports are not the same then the Subsystem runtime should log an
        error and must fail the installation.</para>
      </section>

      <section>
        <title>Service Imports</title>

        <para>A composite Subsystem explicitly states the services it imports
        using the Subsystem-ImportService header (see <xref linkend="i3322018"/> ). For example:</para>

        <programlisting>Subsystem-ImportService: com.acme.logging.Log</programlisting>

        <para>If the composite includes a deployment manifest then the
        Subsystem-ImportService header is used to describe these and they must
        be identical (logically, not syntactically) to the
        Subsystem-ImportService headers in the composite's Subsystem manifest.
        If the imports are not the same then the Subsystem runtime should log
        an error and must fail the installation.</para>
      </section>

      <section>
        <title>Service Exports</title>

        <para>A composite Subsystem explicitly states the services it exports
        using the Subsystem-ExportService header (see <xref linkend="i3321933"/> ). For example:</para>

        <programlisting>Subsystem-ServiceExport: com.acme.logging.Log</programlisting>

        <para>If the composite includes a deployment manifest then the
        Subsystem-ExportService header is used to describe these and they must
        be identical (logically, not syntactically) to the
        Subsystem-ExportService headers in the composite's Subsystem manifest.
        If the exports are not the same then the Subsystem runtime should log
        an error and must fail the installation.</para>
      </section>

      <section>
        <title>Bundle Requirements</title>

        <para>A composite Subsystem explicitly states the bundles it requires
        using the Require-Bundle header.</para>

        <para>If the composite includes a deployment manifest then the
        Require-Bundle header is used to describe these and the requirements
        must be identical (logically, not syntactically) to the Require-Bundle
        requirements in the composite's Subsystem manifest. If the
        requirements are not the same then the Subsystem runtime should log an
        error and must fail the installation.</para>
      </section>

      <section>
        <title>Generic Requirements</title>

        <para>A composite Subsystem explicitly states the generic capabilities
        it requires using the Require-Capability header.</para>

        <para>If the composite includes a deployment manifest then the
        Require-Capability header is used to describe these and they must be
        identical (logically, not syntactically) to the Require-Capability
        headers in the composite's Subsystem manifest. If the capability
        requirements are not the same then the Subsystem runtime should log an
        error and must fail the installation.</para>
      </section>

      <section>
        <title>Generic Capabilities</title>

        <para>A composite Subsystem explicitly states the generic capabilities
        it provides using the Provide-Capability header.</para>

        <para>If the composite includes a deployment manifest then the
        Provide-Capability header is used to describe these and they must be
        identical (logically, not syntactically) to the Provide-Capability
        headers in the composite's Subsystem manifest. If the capabilities are
        not the same then the Subsystem runtime should log an error and must
        fail the installation.</para>
      </section>

      <section>
        <title>Dependencies</title>

        <para>A composite Subsystem's explicit requirements are stated in the
        Subsystem manifest. Any mandatory requirements that are not satisfied
        by capabilities provided by the target environment must be satisfied
        by additional dependencies. The Subsystem runtime is responsible for
        provisioning these based on the Subsystem's provision policy or the
        provision policy of its scoped parents. If the composite Subsystem has
        an associated deployment manifest, then these resources are described
        in the Provision-Resource header.</para>
      </section>
    </section>

    <section>
      <title>Feature</title>

      <para>A feature is an Unscoped Subsystem and therefore provides no
      isolation of its own. A feature does however always exist in the context
      of one and only one Region which can restrict the capabilities a feature
      can see and the extent to which a feature's capabilities are
      shared.</para>

      <para>A Subsystem is identified as a feature by specifying a Subsystem
      type value of <code>osgi.subsystem.feature</code> in the Subsystem
      manifest.</para>

      <programlisting>Subsystem-Type: osgi.subsystem.feature</programlisting>

      <section>
        <title>Explicit Requirements and Capabilities</title>

        <para>A feature Subsystem implicitly imports and exports all
        requirements and capabilities. If the feature Subsystem include any
        headers designed to modify the sharing policy of a Subsystem, such as
        Import-Package or Subsystem-ImportService, then the Subsystem runtime
        should log an error and must fail the installation of the
        Subsystem.</para>
      </section>

      <section>
        <title>Dependencies</title>

        <para>Feature Subsystems implicitly import all capabilities. A
        Subsystem runtime is responsible for provisioning any dependencies
        necessary for the Subsystem's constituents to resolve. The calculation
        of the dependencies can also take into account capabilities provided
        by the target runtime. The dependencies can include resources that
        provide capabilities equivalent to those provided by one or more of
        the constituent resources where the dependency's capability is a
        considered a better match in the context of some resolution. The
        Subsystem runtime is responsible for provisioning the dependencies
        based on the Subsystem's provision policy or the provision policy of
        its scoped parents. If the feature Subsystem has an associated
        deployment manifest, then these dependencies are described in the
        Provision-Resource header.</para>
      </section>
    </section>
  </section>

  <section>
    <title>Weaving Hooks</title>

    <para>Subsystems implementations must ensure that dynamic package imports
    added by weaving hooks are available to subsystems whose classes have been
    woven by updating the sharing policies.</para>

    <para>Dynamic package imports added by weaving hooks are observed by
    registering a <code>WovenClassListener</code> service and receiving
    notifications via the <code>WovenClassListener.modified(WovenClass)</code>
    method. The sharing policy must be updated while the woven class is in the
    <code>TRANSFORMED</code> state so that it takes effect before the bundle
    wiring is updated during the transition to <code>DEFINED</code>;
    otherwise, the class would fail to load.</para>

    <para>The bundle containing the woven class can be obtained by calling the
    <code>WovenClass.getBundleWiring().getBundle()</code> method. A bundle
    might be a constituent of multiple subsystems, but never more than one
    scoped subsystem. The rest are features, which have no sharing policies to
    update. It's possible the bundle will not be a constituent of a scoped
    subsystem. The scoped subsystem, if any, containing the bundle as a
    constituent is retrieved.</para>

    <para>It's possible for a class load request to occur on a bundle in an
    unresolved subsystem because the framework is free to resolve bundles
    whenever it desires. A resolved bundle can potentially receive a class
    load request. For example, a <code>BundleEventListener</code> registered
    with the system bundle context could receive the <code>RESOLVED</code>
    event and, for whatever reason, load a class. Also, a resolved bundle in
    an unresolved feature might get wired to another bundle. If this is the
    case, the subsystem must be resolved in order to guarantee the dynamic
    imports will not effect the resolution and, therefore, potentially create
    a wiring inconsistent with the deployment manifest. Just as the framework
    is free to resolve bundles at anytime and for whatever reason, Subsystems
    implementations are free to resolve subsystems.</para>

    <para>The sharing policy is only updated if the dynamic import cannot be
    completely satisfied from within the subsystem. Note that all dynamic
    imports with a wildcard must always be added to the sharing policy.</para>
  </section>

  <section>
    <title>Stopping and Uninstalling Subsystems Implementation</title>

    <para>When the Subsystems implementation is stopped all of the installed
    Subsystems must be persistently stored and present when the Subsystems
    implementation becomes active again. This includes any bundles that got
    installed as part of a Subsystem installation. The Subsystems
    implementation is not required to do any additional cleanup when the
    Subsystems implementation is stopped or uninstalled. All bundles that got
    installed as a result of installing a Subsystem may still be installed
    after stopping or uninstalling the Subsystems implementation bundle. If it
    is important to clean up the bundles associated with a Subsystem
    installation then the Subsystem should be uninstalled before uninstalling
    the Subsystems implementation.</para>
  </section>

  <section xml:id="service.subsystem-capabilities">
    <title>Capabilities</title>

    <para>Implementations of the Subsystem Service specification must provide
    the following capabilities.</para>

    <itemizedlist>
      <listitem>
        <para>A capability in the <link linkend="service.namespaces-osgi.implementation.namespace"><code>osgi.implementation</code></link>
        namespace declaring the implemented specification to be
        <code>osgi.subsystem</code>. This capability must also declare a uses
        constraint for the <code>org.osgi.service.subsystem</code> package.
        For example:</para>

        <programlisting>Provide-Capability: osgi.implementation;
    osgi.implementation="osgi.subsystem";
    version:Version="1.1";
    uses:="org.osgi.service.subsystem"</programlisting>

        <para>This capability must follow the rules defined for the <xref linkend="service.namespaces-osgi.implementation.namespace"/>.</para>
      </listitem>

      <listitem>
        <para>A capability in the <link linkend="service.namespaces-osgi.service.namespace"><code>osgi.service</code></link>
        namespace representing the <xref linkend="org.osgi.service.subsystem.Subsystem" xrefstyle="hyperlink"/>
        service. This capability must also declare a uses constraint for the
        <code>org.osgi.service.subsystem</code> package. For example:</para>

        <programlisting>Provide-Capability: osgi.service;
    objectClass:List&lt;String&gt;="org.osgi.service.subsystem.Subsystem";
    uses:="org.osgi.service.subsystem"</programlisting>

        <para>This capability must follow the rules defined for the <xref linkend="service.namespaces-osgi.service.namespace"/>.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Security</title>

    <section>
      <title>Subsystem Permission</title>

      <para>The Subsystem Permission is a permission used to grant the right
      to manage Subsystems with the option to restrict this right to a subset
      of Subsystems, called targets. For example, an operator can give a
      bundle the right to only manage Subsystems with a symbolic-name prefix
      of <code>com.acme.</code>:</para>

      <programlisting>...SubsystemPermission("<code>(name=com.acme.*)",
...)</code></programlisting>

      <para>The actions of Subsystem Permission are fine-grained. They allow a
      deployer to assign only the permissions that are necessary for a bundle.
      For example, a bundle may be granted only the permission to start and
      stop all Subsystems:</para>

      <programlisting>...SubsystemPermission["*", <code>EXECUTE]</code></programlisting>

      <para>Code that needs to check Subsystem Permission must always use the
      constructor that takes a Subsystem as a parameter:
      <code>SubsystemPermission(Subsystem, String)</code> with a single
      action.</para>

      <para>For example, the implementation of <code>Subsystem.start</code>
      method must check that the caller has access to execute the
      Subsystem:</para>

      <programlisting>public class SubsystemImpl implements Subsystem{
    public void start() {
        securityManager.checkPermission(new SubsystemPermission(this,"execute"));
    }
}</programlisting>

      <para>The Subsystem Permission takes a Filter as its name argument.
      Filter based permissions are described in <xref linkend="i3394869"/>.
      Subsystem Archives are not signed and therefore the <code>signer</code>
      key is not supported. The keys have the following meaning for the
      Subsystem Permission:</para>

      <itemizedlist>
        <listitem>
          <para>id - The Subsystem ID of a Subsystem. For example
          <code>(id=23)</code></para>
        </listitem>

        <listitem>
          <para><code>location</code> - The location of a Subsystem. For
          example<code>
          (location=https://www.acme.com/download/*)</code></para>
        </listitem>

        <listitem>
          <para><code>name</code> - The symbolic name of a Subsystem. For
          example <code>(name=com.acme.*)</code></para>
        </listitem>
      </itemizedlist>

      <para>The name parameter of the permission can also be a single wildcard
      character (<code>'*' \u002a</code>). In that case all Subsystems must
      match.</para>
    </section>

    <section>
      <title>Actions</title>

      <para>The action parameter of Subsystem Permission will specify the
      subset of privileged Subsystem management operations that are allowed.
      The actions that are architected are listed below. Future versions of
      the specification can add additional actions. The given set should
      therefore not be assumed to be a closed set.</para>

      <table>
        <title>Actions</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="4*"/>

          <thead>
            <row>
              <entry>Action</entry>

              <entry>Used in</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>CONTEXT</code></entry>

              <entry><para><code>Subsystem.getBundleContext</code></para></entry>
            </row>

            <row>
              <entry><code>METADATA</code></entry>

              <entry><para><code>Subsystem.getSubsystemHeaders</code></para><para><code>Subsystem.getLocation</code></para></entry>
            </row>

            <row>
              <entry><code>LIFECYCLE</code></entry>

              <entry><para><code>Subsystem.install</code></para><para><code>Subsystem.uninstall</code></para></entry>
            </row>

            <row>
              <entry><code>EXECUTE</code></entry>

              <entry><para><code>Subsystem.start</code></para><para><code>Subsystem.stop</code></para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Required Permissions</title>

      <para>A Subsystems implementation must check the caller for the
      appropriate Subsystem Permission before initiating a Subsystem
      management operation (e.g. install, start, stop, uninstall). Once the
      Subsystem Permission is checked against the caller the Subsystems
      implementation will proceed with the actual Subsystem operation. This
      operation will require a number of other permissions to complete. For
      example, the Admin Permission will be needed to install, start, stop,
      and uninstall resources of type osgi.bundle for a Subsystem. The
      Subsystems implementation must isolate the caller from such permission
      checks by use of a proper <code>doPrivileged</code> block.</para>
    </section>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.subsystem" xml:id="org.osgi.service.subsystem" xml:base="../../generated/javadoc/docbook/org.osgi.service.subsystem.xml">
   <title>org.osgi.service.subsystem</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.subsystem-version">Version 1.1</releaseinfo>
      <edition xml:id="org.osgi.service.subsystem-version.number">1.1</edition>
   </info>
   <para>
Subsystem Service Package Version 1.1.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.subsystem; version="[1.1,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.subsystem; version="[1.1,1.2)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.subsystem.Subsystem">
                  <code>Subsystem</code>
               </link> - 
A subsystem is a collection of resources constituting a logical, possibly
 isolated, unit of functionality.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.subsystem.Subsystem.State">
                  <code>Subsystem.State</code>
               </link> - 
An enumeration of the possible states of a subsystem.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.subsystem.SubsystemConstants">
                  <code>SubsystemConstants</code>
               </link> - 
Defines the constants used by Subsystem service property, manifest header,
 attribute and directive keys.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.subsystem.SubsystemException">
                  <code>SubsystemException</code>
               </link> - 
A Subsystem exception used to indicate a problem.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.subsystem.SubsystemPermission">
                  <code>SubsystemPermission</code>
               </link> - 
A bundle's authority to perform specific privileged administrative operations
 on or to get sensitive information about a subsystem.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="Subsystem" xml:id="org.osgi.service.subsystem.Subsystem">
      <title>public interface Subsystem</title>
      <para>
A subsystem is a collection of resources constituting a logical, possibly
 isolated, unit of functionality.
 
 </para>
      <para>
 A subsystem may be <emphasis>scoped</emphasis> or <emphasis>unscoped</emphasis>. Scoped subsystems are
 isolated by implicit or explicit sharing policies. Unscoped subsystems are
 not isolated and, therefore, have no sharing policy. There are three standard
 <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE">types</link> of subsystems.
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION">Application</link> - An
 implicitly scoped subsystem. Nothing is exported, and imports are computed
 based on any unsatisfied content requirements.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE">Composite</link> - An
 explicitly scoped subsystem. The sharing policy is defined by metadata within
 the subsystem archive.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_FEATURE">Feature</link> - An unscoped
 subsystem.</para>
         </listitem>
      </itemizedlist>
      <para>
 Conceptually, a subsystem may be thought of as existing in an isolated region
 along with zero or more other subsystems. Each region has one and only one
 scoped subsystem, which dictates the sharing policy. The region may, however,
 have many unscoped subsystems. It is, therefore, possible to have shared
 constituents across multiple subsystems within a region. Associated with each
 region is a bundle whose context may be <link linkend="org.osgi.service.subsystem.Subsystem.getBundleContext--">retrieved</link>
 from any subsystem within that region. This context may be used to monitor
 activity occurring within the region.
 
 </para>
      <para>
 A subsystem may have <link linkend="org.osgi.service.subsystem.Subsystem.getChildren--">children</link> and, unless it's the
 root subsystem, must have at least one <link linkend="org.osgi.service.subsystem.Subsystem.getParents--">parent</link>.
 Subsystems become children of the subsystem in which they are installed.
 Unscoped subsystems have more than one parent if they are installed in more
 than one subsystem within the same region. The subsystem graph may be thought
 of as an <link xlink:href="http://en.wikipedia.org/wiki/Directed_acyclic_graph">acyclic
 digraph</link> with one and only one source vertex, which is the root subsystem.
 The edges have the child as the head and parent as the tail.
 
 </para>
      <para>
 A subsystem has several identifiers.
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.subsystem.Subsystem.getLocation--">Location</link> - An identifier specified by the client
 as part of installation. It is guaranteed to be unique within the same
 framework.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.subsystem.Subsystem.getSubsystemId--">ID</link> - An identifier generated by the
 implementation as part of installation. It is guaranteed to be unique within
 the same framework.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.subsystem.Subsystem.getSymbolicName--">Symbolic Name</link>/<link linkend="org.osgi.service.subsystem.Subsystem.getVersion--">Version</link> -
 The combination of symbolic name and version is guaranteed to be unique
 within the same region. Although <link linkend="org.osgi.service.subsystem.Subsystem.getType--">type</link> is not formally part
 of the identity, two subsystems with the same symbolic names and versions but
 different types are not considered to be equal.</para>
         </listitem>
      </itemizedlist>
      <para>
 A subsystem has a well-defined <link linkend="org.osgi.service.subsystem.Subsystem.State">life cycle</link>. Which stage a
 subsystem is in may be obtained from the subsystem's <link linkend="org.osgi.service.subsystem.Subsystem.getState--">state</link> and is dependent on which life cycle operation is currently active or
 was last invoked.
 
 </para>
      <para>
 A subsystem archive is a ZIP file having an <code>.esa</code> extension and
 containing metadata describing the subsystem. The form of the metadata may be
 a subsystem or deployment manifest, as well as any content resource files.
 The manifests are optional and will be computed if not present. The subsystem
 manifest headers may be <link linkend="org.osgi.service.subsystem.Subsystem.getSubsystemHeaders-Locale-">retrieved</link> in raw
 or localized forms. There are five standard
 <link linkend="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE">types</link> of resources that
 may be included in a subsystem.
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.namespace.IdentityNamespace.TYPE_BUNDLE">Bundle</link> - A bundle that is not a
 fragment.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.namespace.IdentityNamespace.TYPE_FRAGMENT">Fragment</link> - A fragment bundle.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION">Application
 Subsystem</link> - An application subsystem.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE">Composite Subsystem</link> -
 A composite subsystem.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_FEATURE">Feature Subsystem</link> - A
 feature subsystem.</para>
         </listitem>
      </itemizedlist>
      <para>
 Resources contained by a subsystem are called <link linkend="org.osgi.service.subsystem.Subsystem.getConstituents--">constituents</link>. There are several ways a resource may become a constituent of
 a subsystem:
 </para>
      <itemizedlist>
         <listitem>
            <para>A resource is listed as part of the subsystem's content.</para>
         </listitem>
         <listitem>
            <para>A subsystem resource is a child of the subsystem.</para>
         </listitem>
         <listitem>
            <para>The subsystem has a provision policy of accept dependencies.</para>
         </listitem>
         <listitem>
            <para>A bundle resource is installed using the region bundle context.</para>
         </listitem>
         <listitem>
            <para>A bundle resource is installed using the bundle context of another
 resource contained by the subsystem.</para>
         </listitem>
      </itemizedlist>
      <para>
 In addition to invoking one of the install methods, a subsystem instance may
 be obtained through the service registry. Each installed subsystem has a
 corresponding service registration. A subsystem service has the following
 properties.
 
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_ID_PROPERTY">ID</link> - The ID of the
 subsystem.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_SYMBOLICNAME_PROPERTY">Symbolic Name</link>
 - The symbolic name of the subsystem.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_VERSION_PROPERTY">Version</link> - The
 version of the subsystem.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_PROPERTY">Type</link> - The type of the
 subsystem.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_STATE_PROPERTY">State</link> - The state of
 the subsystem.</para>
         </listitem>
      </itemizedlist>
      <para>
 Because a subsystem must be used to install other subsystems, a root
 subsystem is provided as a starting point. The root subsystem may only be
 obtained as a service and has the following characteristics.
 
 </para>
      <itemizedlist>
         <listitem>
            <para>The ID is <code>0</code>.</para>
         </listitem>
         <listitem>
            <para>The symbolic name is
 <link linkend="org.osgi.service.subsystem.SubsystemConstants.ROOT_SUBSYSTEM_SYMBOLICNAME">org.osgi.service.subsystem.root</link>.</para>
         </listitem>
         <listitem>
            <para>The version matches this specification's version.</para>
         </listitem>
         <listitem>
            <para>It has no parents.</para>
         </listitem>
         <listitem>
            <para>All existing bundles, including the system and subsystem implementation
 bundles, are constituents.</para>
         </listitem>
         <listitem>
            <para>The type is <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION">osgi.subsystem.application</link> with no imports.</para>
         </listitem>
         <listitem>
            <para>The provision policy is
 <link linkend="org.osgi.service.subsystem.SubsystemConstants.PROVISION_POLICY_ACCEPT_DEPENDENCIES">acceptDependencies</link>.</para>
         </listitem>
      </itemizedlist>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="getBundleContext()" xml:id="org.osgi.service.subsystem.Subsystem.getBundleContext--">
         <title>public BundleContext getBundleContext()</title>
         <para role="description">
Returns the bundle context of the region within which this subsystem
 resides.
 </para>
         <para>
 The bundle context offers the same perspective of any resource contained
 by a subsystem within the region. It may be used, for example, to monitor
 events internal to the region as well as external events visible to the
 region. All subsystems within the same region have the same bundle
 context. If this subsystem is in a state where the bundle context would
 be invalid, <code>null</code> is returned.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The bundle context of the region within which this subsystem
         resides or <code>null</code> if this subsystem's state is in
         <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED">INSTALL_FAILED</link>,
         <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">UNINSTALLED</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <link linkend="org.osgi.service.subsystem.SubsystemPermission">SubsystemPermission</link>[this,CONTEXT], and the runtime
         supports permissions.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getChildren()" xml:id="org.osgi.service.subsystem.Subsystem.getChildren--">
         <title>public Collection&lt;Subsystem&gt; getChildren()</title>
         <para role="description">
Returns the child subsystems of this subsystem.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The child subsystems of this subsystem. The returned collection
         is an unmodifiable snapshot of all subsystems that are installed
         in this subsystem. The collection will be empty if no subsystems
         are installed in this subsystem.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this subsystem's state is in
         <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED">INSTALL_FAILED</link>,
         <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">UNINSTALLED</link>.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getConstituents()" xml:id="org.osgi.service.subsystem.Subsystem.getConstituents--">
         <title>public Collection&lt;Resource&gt; getConstituents()</title>
         <para role="description">
Returns the constituent resources of this subsystem.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The constituent resources of this subsystem. The returned
         collection is an unmodifiable snapshot of the constituent
         resources of this subsystem. If this subsystem has no
         constituents, the collection will be empty.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this subsystem's state is in
         <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED">INSTALL_FAILED</link>,
         <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">UNINSTALLED</link>.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getDeploymentHeaders()" xml:id="org.osgi.service.subsystem.Subsystem.getDeploymentHeaders--">
         <title>public Map&lt;String,String&gt; getDeploymentHeaders()</title>
         <para role="description">
Returns the headers for this subsystem's deployment manifest.
 </para>
         <para>
 Each key in the map is a header name and the value of the key is the
 corresponding header value. Because header names are case-insensitive,
 the methods of the map must treat the keys in a case-insensitive manner.
 If the header name is not found, <code>null</code> is returned. Both original
 and derived headers will be included in the map.
 </para>
         <para>
 This method must continue to return the headers while this subsystem is
 in the <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED">INSTALL_FAILED</link> or
 <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">UNINSTALLED</link> states.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The headers for this subsystem's deployment manifest. The
         returned map is unmodifiable.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <link linkend="org.osgi.service.subsystem.SubsystemPermission">SubsystemPermission</link>[this,METADATA], and the runtime
         supports permissions.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getLocation()" xml:id="org.osgi.service.subsystem.Subsystem.getLocation--">
         <title>public String getLocation()</title>
         <para role="description">
Returns the location identifier of this subsystem.
 </para>
         <para>
 The location identifier is the <code>location</code> that was passed to the
 <link linkend="org.osgi.service.subsystem.Subsystem.install-String-InputStream-">install</link> method of the
 <link linkend="org.osgi.service.subsystem.Subsystem.getParents--">parent</link> subsystem. It is unique within the
 framework.
 </para>
         <para>
 This method must continue to return this subsystem's headers while this
 subsystem is in the <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED">INSTALL_FAILED</link> or
 <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">UNINSTALLED</link> states.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The location identifier of this subsystem.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <link linkend="org.osgi.service.subsystem.SubsystemPermission">SubsystemPermission</link>[this,METADATA], and the runtime
         supports permissions.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getParents()" xml:id="org.osgi.service.subsystem.Subsystem.getParents--">
         <title>public Collection&lt;Subsystem&gt; getParents()</title>
         <para role="description">
Returns the parent subsystems of this subsystem.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The parent subsystems of this subsystem. The returned collection
         is an unmodifiable snapshot of all subsystems in which this
         subsystem is installed. The collection will be empty for the root
         subsystem; otherwise, it must contain at least one parent. Scoped
         subsystems always have only one parent. Unscoped subsystems may
         have multiple parents.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this subsystem's state is in
         <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED">INSTALL_FAILED</link>,
         <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">UNINSTALLED</link>.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getState()" xml:id="org.osgi.service.subsystem.Subsystem.getState--">
         <title>public Subsystem.State getState()</title>
         <para role="description">
Returns the current state of this subsystem.
 </para>
         <para>
 This method must continue to return this subsystem's state while this
 subsystem is in the <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED">INSTALL_FAILED</link> or
 <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">UNINSTALLED</link> states.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The current state of this subsystem.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getSubsystemHeaders(Locale)" xml:id="org.osgi.service.subsystem.Subsystem.getSubsystemHeaders-Locale-">
         <title>public Map&lt;String,String&gt; getSubsystemHeaders(Locale locale)</title>
         <formalpara role="parameter">
            <title>locale</title>
            <para>The locale for which translations are desired. The header
        values are translated according to the specified locale. If the
        specified locale is <code>null</code> or not supported, the raw values
        are returned. If the translation for a particular header is not
        found, the raw value is returned.</para>
         </formalpara>
         <para role="description">
Returns the headers for this subsystem's subsystem manifest.
 </para>
         <para>
 Each key in the map is a header name and the value of the key is the
 corresponding header value. Because header names are case-insensitive,
 the methods of the map must treat the keys in a case-insensitive manner.
 If the header name is not found, <code>null</code> is returned. Both original
 and derived headers will be included in the map.
 </para>
         <para>
 This method must continue to return the headers while this subsystem is
 in the <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED">INSTALL_FAILED</link> or
 <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">UNINSTALLED</link> states.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The headers for this subsystem's subsystem manifest. The returned
         map is unmodifiable.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <link linkend="org.osgi.service.subsystem.SubsystemPermission">SubsystemPermission</link>[this,METADATA], and the runtime
         supports permissions.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getSubsystemId()" xml:id="org.osgi.service.subsystem.Subsystem.getSubsystemId--">
         <title>public long getSubsystemId()</title>
         <para role="description">
Returns the identifier of this subsystem.
 </para>
         <para>
 The identifier is a monotonically increasing, non-negative integer
 automatically generated at installation time and guaranteed to be unique
 within the framework. The identifier of the root subsystem is zero.
 </para>
         <para>
 This method must continue to return this subsystem's identifier while
 this subsystem is in the <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED">INSTALL_FAILED</link> or
 <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">UNINSTALLED</link> states.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The identifier of this subsystem.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getSymbolicName()" xml:id="org.osgi.service.subsystem.Subsystem.getSymbolicName--">
         <title>public String getSymbolicName()</title>
         <para role="description">
Returns the symbolic name of this subsystem.
 </para>
         <para>
 The subsystem symbolic name conforms to the same grammar rules as the
 bundle symbolic name and is derived from one of the following, in order.
 </para>
         <itemizedlist>
            <listitem>
               <para>The value of the <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_SYMBOLICNAME">Subsystem-SymbolicName</link> header, if specified.</para>
            </listitem>
            <listitem>
               <para>The subsystem URI if passed as the <code>location</code> along with the
 <code>content</code> to the <link linkend="org.osgi.service.subsystem.Subsystem.install-String-InputStream-">install</link>
 method.</para>
            </listitem>
            <listitem>
               <para>Optionally generated in an implementation specific way.</para>
            </listitem>
         </itemizedlist>
         <para>
 The combination of subsystem symbolic name and <link linkend="org.osgi.service.subsystem.Subsystem.getVersion--">version</link> is unique within a region. The symbolic name of the root
 subsystem is <link linkend="org.osgi.service.subsystem.SubsystemConstants.ROOT_SUBSYSTEM_SYMBOLICNAME">org.osgi.service.subsystem.root</link>.
 </para>
         <para>
 This method must continue to return this subsystem's symbolic name while
 this subsystem is in the <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED">INSTALL_FAILED</link> or
 <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">UNINSTALLED</link> states.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The symbolic name of this subsystem.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getType()" xml:id="org.osgi.service.subsystem.Subsystem.getType--">
         <title>public String getType()</title>
         <para role="description">
Returns the <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE">type</link> of this
 subsystem.
 </para>
         <para>
 This method must continue to return this subsystem's type while this
 subsystem is in the <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED">INSTALL_FAILED</link> or
 <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">UNINSTALLED</link> states.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The type of this subsystem.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getVersion()" xml:id="org.osgi.service.subsystem.Subsystem.getVersion--">
         <title>public Version getVersion()</title>
         <para role="description">
Returns the <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_VERSION">version</link> of this
 subsystem.
 </para>
         <para>
 The subsystem version conforms to the same grammar rules as the bundle
 version and is derived from one of the following, in order.
 </para>
         <itemizedlist>
            <listitem>
               <para>The value of the <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_VERSION">Subsystem-Version</link> header, if specified.</para>
            </listitem>
            <listitem>
               <para>The subsystem URI if passed as the <code>location</code> along with the
 <code>content</code> to the <link linkend="org.osgi.service.subsystem.Subsystem.install-String-InputStream-">install</link>
 method.</para>
            </listitem>
            <listitem>
               <para>Defaults to <code>0.0.0</code>.</para>
            </listitem>
         </itemizedlist>
         <para>
 The combination of subsystem <link linkend="org.osgi.service.subsystem.Subsystem.getSymbolicName--">symbolic name</link> and
 version is unique within a region. The version of the root subsystem
 matches this specification's version.
 </para>
         <para>
 This method must continue to return this subsystem's version while this
 subsystem is in the <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED">INSTALL_FAILED</link> or
 <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">UNINSTALLED</link> states.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The version of this subsystem.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="install(String)" xml:id="org.osgi.service.subsystem.Subsystem.install-String-">
         <title>public Subsystem install(String location)</title>
         <formalpara role="parameter">
            <title>location</title>
            <para>The location identifier of the subsystem to install.</para>
         </formalpara>
         <para role="description">
Installs a subsystem from the specified location identifier.
 </para>
         <para>
 This method performs the same function as calling
 <link linkend="org.osgi.service.subsystem.Subsystem.install-String-InputStream-">install(String, InputStream)</link> with the specified location
 identifier and <code>null</code> as the content.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The installed subsystem.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this subsystem's state is in
         <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLING">INSTALLING</link>, <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED">INSTALL_FAILED</link>, <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLING">UNINSTALLING</link>,
         <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">UNINSTALLED</link>.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SubsystemException</code>– If the installation failed.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <link linkend="org.osgi.service.subsystem.SubsystemPermission">SubsystemPermission</link>[installed subsystem,LIFECYCLE], and
         the runtime supports permissions.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.subsystem.Subsystem.install-String-InputStream-">install(String, InputStream)</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="install(String,InputStream)" xml:id="org.osgi.service.subsystem.Subsystem.install-String-InputStream-">
         <title>public Subsystem install(String location,InputStream content)</title>
         <formalpara role="parameter">
            <title>location</title>
            <para>The location identifier of the subsystem to be installed.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>content</title>
            <para>The input stream from which this subsystem will be read or
        <code>null</code> to indicate the input stream must be created from the
        specified location identifier. The input stream will always be
        closed when this method completes, even if an exception is thrown.</para>
         </formalpara>
         <para role="description">
Installs a subsystem from the specified content.
 </para>
         <para>
 The specified location will be used as an identifier of the subsystem.
 Every installed subsystem is uniquely identified by its location, which
 is typically in the form of a URI. If the specified location conforms to
 the <code>subsystem-uri</code> grammar, the required symbolic name and
 optional version information will be used as default values.
 </para>
         <para>
 If the specified content is <code>null</code>, a new input stream must be
 created from which to read the subsystem by interpreting, in an
 implementation dependent manner, the specified location.
 </para>
         <para>
 A subsystem installation must be persistent. That is, an installed
 subsystem must remain installed across Framework and VM restarts.
 </para>
         <para>
 All references to changing the state of this subsystem include both
 changing the state of the subsystem object as well as the state property
 of the subsystem service registration.
 </para>
         <para>
 The following steps are required to install a subsystem.
 </para>
         <orderedlist>
            <listitem>
               <para>If an installed subsystem with the specified location identifier
 already exists, return the installed subsystem.</para>
            </listitem>
            <listitem>
               <para>Read the specified content in order to determine the symbolic name,
 version, and type of the installing subsystem. If an error occurs while
 reading the content, an installation failure results.</para>
            </listitem>
            <listitem>
               <para>If an installed subsystem with the same symbolic name and version
 already exists within this subsystem's region, complete the installation
 with one of the following.
 </para>
               <itemizedlist>
                  <listitem>
                     <para>If the installing and installed subsystems' types are not equal, an
 installation failure results.</para>
                  </listitem>
                  <listitem>
                     <para>If the installing and installed subsystems' types are equal, and the
 installed subsystem is already a child of this subsystem, return the
 installed subsystem.</para>
                  </listitem>
                  <listitem>
                     <para>If the installing and installed subsystems' types are equal, and the
 installed subsystem is not already a child of this subsystem, add the
 installed subsystem as a child of this subsystem, increment the installed
 subsystem's reference count by one, and return the installed subsystem.</para>
                  </listitem>
               </itemizedlist>
            </listitem>
            <listitem>
               <para>Create a new subsystem based on the specified location and content.</para>
            </listitem>
            <listitem>
               <para>If the subsystem is scoped, install and start a new region context
 bundle.</para>
            </listitem>
            <listitem>
               <para>Change the state to <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLING">INSTALLING</link> and register
 a new subsystem service.</para>
            </listitem>
            <listitem>
               <para>Discover the subsystem's content resources. If any mandatory resource
 is missing, an installation failure results.</para>
            </listitem>
            <listitem>
               <para>Discover the dependencies required by the content resources. If any
 mandatory dependency is missing, an installation failure results.</para>
            </listitem>
            <listitem>
               <para>Using a framework <code>ResolverHook</code>, disable runtime resolution
 for the resources.</para>
            </listitem>
            <listitem>
               <para>For each resource, increment the reference count by one. If the
 reference count is one, install the resource. If an error occurs while
 installing a resource, an install failure results with that error as the
 cause.</para>
            </listitem>
            <listitem>
               <para>If the subsystem is scoped, enable the import sharing policy.</para>
            </listitem>
            <listitem>
               <para>Enable runtime resolution for the resources.</para>
            </listitem>
            <listitem>
               <para>Change the state of the subsystem to <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLED">INSTALLED</link>.</para>
            </listitem>
            <listitem>
               <para>Return the new subsystem.</para>
            </listitem>
         </orderedlist>
         <para>
 Implementations should be sensitive to the potential for long running
 operations and periodically check the current thread for interruption. An
 interrupted thread should result in a <link linkend="org.osgi.service.subsystem.SubsystemException">SubsystemException</link> with an
 InterruptedException as the cause and be treated as an installation
 failure.
 </para>
         <para>
 All installation failure flows include the following, in order.
 </para>
         <orderedlist>
            <listitem>
               <para>Change the state to <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED">INSTALL_FAILED</link>.</para>
            </listitem>
            <listitem>
               <para>Change the state to <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLING">UNINSTALLING</link>.</para>
            </listitem>
            <listitem>
               <para>All content and dependencies which may have been installed by the
 installing process must be uninstalled.</para>
            </listitem>
            <listitem>
               <para>Change the state to <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">UNINSTALLED</link>.</para>
            </listitem>
            <listitem>
               <para>Unregister the subsystem service.</para>
            </listitem>
            <listitem>
               <para>If the subsystem is a scoped subsystem then, uninstall the region
 context bundle.</para>
            </listitem>
            <listitem>
               <para>Throw a <link linkend="org.osgi.service.subsystem.SubsystemException">SubsystemException</link> with the cause of the installation
 failure.</para>
            </listitem>
         </orderedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The installed subsystem.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this subsystem's state is in
         <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLING">INSTALLING</link>, <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED">INSTALL_FAILED</link>, <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLING">UNINSTALLING</link>,
         <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">UNINSTALLED</link>.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SubsystemException</code>– If the installation failed.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <link linkend="org.osgi.service.subsystem.SubsystemPermission">SubsystemPermission</link>[installed subsystem,LIFECYCLE], and
         the runtime supports permissions.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="install(String,InputStream,InputStream)" xml:id="org.osgi.service.subsystem.Subsystem.install-String-InputStream-InputStream-">
         <title>public Subsystem install(String location,InputStream content,InputStream deploymentManifest)</title>
         <formalpara role="parameter">
            <title>location</title>
            <para>The location identifier of the subsystem to be installed.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>content</title>
            <para>The input stream from which this subsystem will be read or
        <code>null</code> to indicate the input stream must be created from the
        specified location identifier. The input stream will always be
        closed when this method completes, even if an exception is thrown.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>deploymentManifest</title>
            <para>The deployment manifest to use in lieu of the
        one in the archive, if any, or a computed one.</para>
         </formalpara>
         <para role="description">
Installs a subsystem from the specified content according to the
 specified deployment manifest.
 </para>
         <para>
 This method installs a subsystem using the provided deployment manifest
 instead of the one in the archive, if any, or a computed one. If the
 deployment manifest is <code>null</code>, the behavior is exactly the same as
 in the <link linkend="org.osgi.service.subsystem.Subsystem.install-String-InputStream-">install(String, InputStream)</link> method. Implementations must
 support deployment manifest input streams in the format described by
 section 134.2 of the Subsystem Service Specification. If the deployment
 manifest does not conform to the subsystem manifest (see 134.15.2), the
 installation fails.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The installed subsystem.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this subsystem's state is in
         <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLING">INSTALLING</link>, <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED">INSTALL_FAILED</link>, <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLING">UNINSTALLING</link>,
         <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">UNINSTALLED</link>.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SubsystemException</code>– If the installation failed.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <link linkend="org.osgi.service.subsystem.SubsystemPermission">SubsystemPermission</link>[installed subsystem,LIFECYCLE], and
         the runtime supports permissions.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="start()" xml:id="org.osgi.service.subsystem.Subsystem.start--">
         <title>public void start()</title>
         <para role="description">
Starts this subsystem.
 </para>
         <para>
 The following table shows which actions are associated with each state.
 An action of <code>Wait</code> means this method will block until a state
 transition occurs, upon which the new state will be evaluated in order to
 determine how to proceed. If a state transition does not occur in a
 reasonable time while waiting then no action is taken and a
 SubsystemException is thrown to indicate the subsystem was unable to be
 started. An action of <code>Return</code> means this method returns
 immediately without taking any other action.
 </para>
         <informaltable>
            <tr>
               <th>State</th>
               <th>Action</th>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLING">INSTALLING</link>
               </td>
               <td>
                  <code>Wait</code>
               </td>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLED">INSTALLED</link>
               </td>
               <td>
                  <code>Resolve</code>, <code>Start</code>
               </td>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED">INSTALL_FAILED</link>
               </td>
               <td>
                  <code>IllegalStateException</code>
               </td>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVING">RESOLVING</link>
               </td>
               <td>
                  <code>Wait</code>
               </td>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVED">RESOLVED</link>
               </td>
               <td>
                  <code>Start</code>
               </td>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.STARTING">STARTING</link>
               </td>
               <td>
                  <code>Wait</code>
               </td>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.ACTIVE">ACTIVE</link>
               </td>
               <td>
                  <code>Return</code>
               </td>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.STOPPING">STOPPING</link>
               </td>
               <td>
                  <code>Wait</code>
               </td>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLING">UNINSTALLING</link>
               </td>
               <td>
                  <code>IllegalStateException</code>
               </td>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">UNINSTALLED</link>
               </td>
               <td>
                  <code>IllegalStateException</code>
               </td>
            </tr>
         </informaltable>
         <para>
 All references to changing the state of this subsystem include both
 changing the state of the subsystem object as well as the state property
 of the subsystem service registration.
 </para>
         <para>
 A subsystem must be persistently started. That is, a started subsystem
 must be restarted across Framework and VM restarts, even if a start
 failure occurs.
 </para>
         <para>
 The following steps are required to start this subsystem.
 </para>
         <orderedlist>
            <listitem>
               <para>Set the subsystem <emphasis>autostart setting</emphasis> to <emphasis>started</emphasis>.</para>
            </listitem>
            <listitem>
               <para>If this subsystem is in the <link linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVED">RESOLVED</link> state,
 proceed to step 7.</para>
            </listitem>
            <listitem>
               <para>Change the state to <link linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVING">RESOLVING</link>.</para>
            </listitem>
            <listitem>
               <para>Resolve the content resources. A resolution failure results in a
 start failure with a state of <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLED">INSTALLED</link>.</para>
            </listitem>
            <listitem>
               <para>Change the state to <link linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVED">RESOLVED</link>.</para>
            </listitem>
            <listitem>
               <para>If this subsystem is scoped, enable the export sharing policy.</para>
            </listitem>
            <listitem>
               <para>Change the state to <link linkend="org.osgi.service.subsystem.Subsystem.State.STARTING">STARTING</link>.</para>
            </listitem>
            <listitem>
               <para>For each eligible resource, increment the active use count by one. If
 the active use count is one, start the resource. All dependencies must be
 started before any content resource, and content resources must be
 started according to the specified
 <link linkend="org.osgi.service.subsystem.SubsystemConstants.START_ORDER_DIRECTIVE">start order</link>. If an error
 occurs while starting a resource, a start failure results with that error
 as the cause.</para>
            </listitem>
            <listitem>
               <para>Change the state to <link linkend="org.osgi.service.subsystem.Subsystem.State.ACTIVE">ACTIVE</link>.</para>
            </listitem>
         </orderedlist>
         <para>
 Implementations should be sensitive to the potential for long running
 operations and periodically check the current thread for interruption. An
 interrupted thread should be treated as a start failure with an
 <code>InterruptedException</code> as the cause.
 </para>
         <para>
 All start failure flows include the following, in order.
 </para>
         <orderedlist>
            <listitem>
               <para>If the subsystem state is <link linkend="org.osgi.service.subsystem.Subsystem.State.STARTING">STARTING</link> then change
 the state to <link linkend="org.osgi.service.subsystem.Subsystem.State.STOPPING">STOPPING</link> and stop all resources that
 were started as part of this operation.</para>
            </listitem>
            <listitem>
               <para>Change the state to either <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLED">INSTALLED</link> or
 <link linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVED">RESOLVED</link>.</para>
            </listitem>
            <listitem>
               <para>Throw a SubsystemException with the specified cause.</para>
            </listitem>
         </orderedlist>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SubsystemException</code>– If this subsystem fails to start.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this subsystem's state is in
         <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED">INSTALL_FAILED</link>,
         <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLING">UNINSTALLING</link>, or
         <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">UNINSTALLED</link>, or if the state of at
         least one of this subsystem's parents is not in
         <link linkend="org.osgi.service.subsystem.Subsystem.State.STARTING">STARTING</link>, <link linkend="org.osgi.service.subsystem.Subsystem.State.ACTIVE">ACTIVE</link>.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <link linkend="org.osgi.service.subsystem.SubsystemPermission">SubsystemPermission</link>[this,EXECUTE], and the runtime
         supports permissions.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="stop()" xml:id="org.osgi.service.subsystem.Subsystem.stop--">
         <title>public void stop()</title>
         <para role="description">
Stops this subsystem.
 </para>
         <para>
 The following table shows which actions are associated with each state.
 An action of <code>Wait</code> means this method will block until a state
 transition occurs, upon which the new state will be evaluated in order to
 determine how to proceed. If a state transition does not occur in a
 reasonable time while waiting then no action is taken and a
 SubsystemException is thrown to indicate the subsystem was unable to be
 stopped. An action of <code>Return</code> means this method returns
 immediately without taking any other action.
 </para>
         <informaltable>
            <tr>
               <th>State</th>
               <th>Action</th>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLING">INSTALLING</link>
               </td>
               <td>
                  <code>Wait</code>
               </td>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLED">INSTALLED</link>
               </td>
               <td>
                  <code>Return</code>
               </td>
               <td/>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED">INSTALL_FAILED</link>
               </td>
               <td>
                  <code>IllegalStateException</code>
               </td>
               <td/>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVING">RESOLVING</link>
               </td>
               <td>
                  <code>Wait</code>
               </td>
               <td/>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVED">RESOLVED</link>
               </td>
               <td>
                  <code>Return</code>
               </td>
               <td/>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.STARTING">STARTING</link>
               </td>
               <td>
                  <code>Wait</code>
               </td>
               <td/>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.ACTIVE">ACTIVE</link>
               </td>
               <td>
                  <code>Stop</code>
               </td>
               <td/>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.STOPPING">STOPPING</link>
               </td>
               <td>
                  <code>Wait</code>
               </td>
               <td/>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLING">UNINSTALLING</link>
               </td>
               <td>
                  <code>IllegalStateException</code>
               </td>
               <td/>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">UNINSTALLED</link>
               </td>
               <td>
                  <code>IllegalStateException</code>
               </td>
               <td/>
            </tr>
         </informaltable>
         <para>
 A subsystem must be persistently stopped. That is, a stopped subsystem
 must remain stopped across Framework and VM restarts.
 </para>
         <para>
 All references to changing the state of this subsystem include both
 changing the state of the subsystem object as well as the state property
 of the subsystem service registration.
 </para>
         <para>
 The following steps are required to stop this subsystem.
 </para>
         <orderedlist>
            <listitem>
               <para>Set the subsystem <emphasis>autostart setting</emphasis> to <emphasis>stopped</emphasis>.</para>
            </listitem>
            <listitem>
               <para>Change the state to <link linkend="org.osgi.service.subsystem.Subsystem.State.STOPPING">STOPPING</link>.</para>
            </listitem>
            <listitem>
               <para>For each eligible resource, decrement the active use count by one. If
 the active use count is zero, stop the resource. All content resources
 must be stopped before any dependencies, and content resources must be
 stopped in reverse <link linkend="org.osgi.service.subsystem.SubsystemConstants.START_ORDER_DIRECTIVE">start
 order</link>.</para>
            </listitem>
            <listitem>
               <para>Change the state to <link linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVED">RESOLVED</link>.</para>
            </listitem>
         </orderedlist>
         <para>
 With regard to error handling, once this subsystem has transitioned to
 the <link linkend="org.osgi.service.subsystem.Subsystem.State.STOPPING">STOPPING</link> state, every part of each step above
 must be attempted. Errors subsequent to the first should be logged. Once
 the stop process has completed, a SubsystemException must be thrown with
 the initial error as the specified cause.
 </para>
         <para>
 Implementations should be sensitive to the potential for long running
 operations and periodically check the current thread for interruption, in
 which case a SubsystemException with an InterruptedException as the cause
 should be thrown. If an interruption occurs while waiting, this method
 should terminate immediately. Once the transition to the
 <link linkend="org.osgi.service.subsystem.Subsystem.State.STOPPING">STOPPING</link> state has occurred, however, this method
 must not terminate due to an interruption until the stop process has
 completed.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SubsystemException</code>– If this subsystem fails to stop cleanly.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this subsystem's state is in
         <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED">INSTALL_FAILED</link>,
         <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLING">UNINSTALLING</link>, or
         <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">UNINSTALLED</link>.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <link linkend="org.osgi.service.subsystem.SubsystemPermission">SubsystemPermission</link>[this,EXECUTE], and the runtime
         supports permissions.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="uninstall()" xml:id="org.osgi.service.subsystem.Subsystem.uninstall--">
         <title>public void uninstall()</title>
         <para role="description">
Uninstalls this subsystem.
 </para>
         <para>
 The following table shows which actions are associated with each state.
 An action of <code>Wait</code> means this method will block until a state
 transition occurs, upon which the new state will be evaluated in order to
 determine how to proceed. If a state transition does not occur in a
 reasonable time while waiting then no action is taken and a
 SubsystemException is thrown to indicate the subsystem was unable to be
 uninstalled. An action of <code>Return</code> means this method returns
 immediately without taking any other action.
 </para>
         <informaltable>
            <tr>
               <th>State</th>
               <th>Action</th>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLING">INSTALLING</link>
               </td>
               <td>
                  <code>Wait</code>
               </td>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLED">INSTALLED</link>
               </td>
               <td>
                  <code>Uninstall</code>
               </td>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED">INSTALL_FAILED</link>
               </td>
               <td>
                  <code>Wait</code>
               </td>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVING">RESOLVING</link>
               </td>
               <td>
                  <code>Wait</code>
               </td>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVED">RESOLVED</link>
               </td>
               <td>
                  <code>Uninstall</code>
               </td>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.STARTING">STARTING</link>
               </td>
               <td>
                  <code>Wait</code>
               </td>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.ACTIVE">ACTIVE</link>
               </td>
               <td>
                  <code>Stop</code>, <code>Uninstall</code>
               </td>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.STOPPING">STOPPING</link>
               </td>
               <td>
                  <code>Wait</code>
               </td>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLING">UNINSTALLING</link>
               </td>
               <td>
                  <code>Wait</code>
               </td>
            </tr>
            <tr>
               <td>
                  <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">UNINSTALLED</link>
               </td>
               <td>
                  <code>Return</code>
               </td>
            </tr>
         </informaltable>
         <para>
 All references to changing the state of this subsystem include both
 changing the state of the subsystem object as well as the state property
 of the subsystem service registration.
 </para>
         <para>
 The following steps are required to uninstall this subsystem after being
 stopped if necessary.
 </para>
         <orderedlist>
            <listitem>
               <para>Change the state to <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLED">INSTALLED</link>.</para>
            </listitem>
            <listitem>
               <para>Change the state to <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLING">UNINSTALLING</link>.</para>
            </listitem>
            <listitem>
               <para>For each referenced resource, decrement the reference count by one.
 If the reference count is zero, uninstall the resource. All content
 resources must be uninstalled before any dependencies.</para>
            </listitem>
            <listitem>
               <para>Change the state to <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">UNINSTALLED</link>.</para>
            </listitem>
            <listitem>
               <para>Unregister the subsystem service.</para>
            </listitem>
            <listitem>
               <para>If the subsystem is scoped, uninstall the region context bundle.</para>
            </listitem>
         </orderedlist>
         <para>
 With regard to error handling, once this subsystem has transitioned to
 the <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLING">UNINSTALLING</link> state, every part of each
 step above must be attempted. Errors subsequent to the first should be
 logged. Once the uninstall process has completed, a
 <code>SubsystemException</code> must be thrown with the specified cause.
 </para>
         <para>
 Implementations should be sensitive to the potential for long running
 operations and periodically check the current thread for interruption, in
 which case a <code>SubsystemException</code> with an
 <code>InterruptedException</code> as the cause should be thrown. If an
 interruption occurs while waiting, this method should terminate
 immediately. Once the transition to the <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLING">UNINSTALLING</link> state has occurred, however, this method must not terminate
 due to an interruption until the uninstall process has completed.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SubsystemException</code>– If this subsystem fails to uninstall cleanly.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <link linkend="org.osgi.service.subsystem.SubsystemPermission">SubsystemPermission</link>[this,LIFECYCLE], and the runtime
         supports permissions.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Subsystem.State" xml:id="org.osgi.service.subsystem.Subsystem.State">
      <title>enum Subsystem.State</title>
      <para>
An enumeration of the possible states of a subsystem.
 
 </para>
      <para>
 These states are a reflection of what constituent resources are permitted
 to do and not an aggregation of constituent resource states.</para>
      <section role="field" xreflabel="INSTALLING" xml:id="org.osgi.service.subsystem.Subsystem.State.INSTALLING">
         <title>INSTALLING</title>
         <para>
The subsystem is in the process of installing.
 </para>
         <para>
 A subsystem is in the <code>INSTALLING</code> state when the
 <link linkend="org.osgi.service.subsystem.Subsystem.install-String-InputStream-">install</link> method of its
 parent is active, and attempts are being made to install its content
 resources. If the install method completes without exception, then
 the subsystem has successfully installed and must move to the
 <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALLED">INSTALLED</link> state. Otherwise, the subsystem has failed to
 install and must move to the <link linkend="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED">INSTALL_FAILED</link> state.</para>
      </section>
      <section role="field" xreflabel="INSTALLED" xml:id="org.osgi.service.subsystem.Subsystem.State.INSTALLED">
         <title>INSTALLED</title>
         <para>
The subsystem is installed but not yet resolved.
 </para>
         <para>
 A subsystem is in the <code>INSTALLED</code> state when it has been
 installed in a parent subsystem but is not or cannot be resolved.
 This state is visible if the dependencies of the subsystem's content
 resources cannot be resolved.</para>
      </section>
      <section role="field" xreflabel="INSTALL_FAILED" xml:id="org.osgi.service.subsystem.Subsystem.State.INSTALL_FAILED">
         <title>INSTALL_FAILED</title>
         <para>
The subsystem failed to install.
 </para>
         <para>
 A subsystem is in the <code>INSTALL_FAILED</code> state when an
 unrecoverable error occurred during installation. The subsystem is in
 an unusable state but references to the subsystem object may still be
 available and used for introspection.</para>
      </section>
      <section role="field" xreflabel="RESOLVING" xml:id="org.osgi.service.subsystem.Subsystem.State.RESOLVING">
         <title>RESOLVING</title>
         <para>
The subsystem is in the process of resolving.
 </para>
         <para>
 A subsystem is in the <code>RESOLVING</code> state when attempts are being
 made to resolve its content resources. If the resolve process
 completes without exception, then the subsystem has successfully
 resolved and must move to the <link linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVED">RESOLVED</link> state. Otherwise, the
 subsystem has failed to resolve and must move to the INSTALLED state.</para>
      </section>
      <section role="field" xreflabel="RESOLVED" xml:id="org.osgi.service.subsystem.Subsystem.State.RESOLVED">
         <title>RESOLVED</title>
         <para>
The subsystem is resolved and able to be started.
 </para>
         <para>
 A subsystem is in the <code>RESOLVED</code> state when all of its content
 resources are resolved. Note that the subsystem is not active yet.</para>
      </section>
      <section role="field" xreflabel="STARTING" xml:id="org.osgi.service.subsystem.Subsystem.State.STARTING">
         <title>STARTING</title>
         <para>
The subsystem is in the process of starting.
 </para>
         <para>
 A subsystem is in the <code>STARTING</code> state when its
 <link linkend="org.osgi.service.subsystem.Subsystem.start--">start</link> method is active, and attempts are
 being made to start its content and dependencies. If the start method
 completes without exception, then the subsystem has successfully
 started and must move to the <link linkend="org.osgi.service.subsystem.Subsystem.State.ACTIVE">ACTIVE</link> state. Otherwise, the
 subsystem has failed to start and must move to the <link linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVED">RESOLVED</link>
 state.</para>
      </section>
      <section role="field" xreflabel="ACTIVE" xml:id="org.osgi.service.subsystem.Subsystem.State.ACTIVE">
         <title>ACTIVE</title>
         <para>
The subsystem is now running.
 </para>
         <para>
 A subsystem is in the <code>ACTIVE</code> state when its content and
 dependencies have been successfully started.</para>
      </section>
      <section role="field" xreflabel="STOPPING" xml:id="org.osgi.service.subsystem.Subsystem.State.STOPPING">
         <title>STOPPING</title>
         <para>
The subsystem is in the process of stopping.
 </para>
         <para>
 A subsystem is in the <code>STOPPING</code> state when its
 <link linkend="org.osgi.service.subsystem.Subsystem.stop--">stop</link> method is active, and attempts are
 being made to stop its content and dependencies. When the stop method
 completes, the subsystem is stopped and must move to the
 <link linkend="org.osgi.service.subsystem.Subsystem.State.RESOLVED">RESOLVED</link> state.</para>
      </section>
      <section role="field" xreflabel="UNINSTALLING" xml:id="org.osgi.service.subsystem.Subsystem.State.UNINSTALLING">
         <title>UNINSTALLING</title>
         <para>
The subsystem is in the process of uninstalling.
 </para>
         <para>
 A subsystem is in the <code>UNINSTALLING</code> state when its
 <link linkend="org.osgi.service.subsystem.Subsystem.uninstall--">uninstall</link> method is active, and
 attempts are being made to uninstall its constituent and
 dependencies. When the uninstall method completes, the subsystem is
 uninstalled and must move to the <link linkend="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">UNINSTALLED</link> state.</para>
      </section>
      <section role="field" xreflabel="UNINSTALLED" xml:id="org.osgi.service.subsystem.Subsystem.State.UNINSTALLED">
         <title>UNINSTALLED</title>
         <para>
The subsystem is uninstalled and may not be used.
 </para>
         <para>
 The <code>UNINSTALLED</code> state is only visible after a subsystem's
 constituent and dependencies are uninstalled. The subsystem is in an
 unusable state but references to the subsystem object may still be
 available and used for introspection.</para>
      </section>
   </section>
   <section role="class" xreflabel="SubsystemConstants" xml:id="org.osgi.service.subsystem.SubsystemConstants">
      <title>public class SubsystemConstants</title>
      <para>
Defines the constants used by Subsystem service property, manifest header,
 attribute and directive keys.
 </para>
      <para>
 The values associated with these keys are of type <code>String</code>, unless
 otherwise indicated.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="DEPLOYED_CONTENT" xml:id="org.osgi.service.subsystem.SubsystemConstants.DEPLOYED_CONTENT">
         <title>public static final String DEPLOYED_CONTENT = "Deployed-Content"</title>
         <para>
Manifest header identifying the resources to be deployed.
   </para>
      </section>
      <section role="field" xreflabel="DEPLOYED_VERSION_ATTRIBUTE" xml:id="org.osgi.service.subsystem.SubsystemConstants.DEPLOYED_VERSION_ATTRIBUTE">
         <title>public static final String DEPLOYED_VERSION_ATTRIBUTE = "deployed-version"</title>
         <para>
Manifest header attribute identifying the deployed version.
   </para>
      </section>
      <section role="field" xreflabel="DEPLOYMENT_MANIFESTVERSION" xml:id="org.osgi.service.subsystem.SubsystemConstants.DEPLOYMENT_MANIFESTVERSION">
         <title>public static final String DEPLOYMENT_MANIFESTVERSION = "Deployment-ManifestVersion"</title>
         <para>
Manifest header identifying the deployment manifest version. If not
 present, the default value is <code>1</code>.
   </para>
      </section>
      <section role="field" xreflabel="PREFERRED_PROVIDER" xml:id="org.osgi.service.subsystem.SubsystemConstants.PREFERRED_PROVIDER">
         <title>public static final String PREFERRED_PROVIDER = "Preferred-Provider"</title>
         <para>
Manifest header used to express a preference for particular resources to
 satisfy implicit package dependencies.
   </para>
      </section>
      <section role="field" xreflabel="PROVISION_POLICY_ACCEPT_DEPENDENCIES" xml:id="org.osgi.service.subsystem.SubsystemConstants.PROVISION_POLICY_ACCEPT_DEPENDENCIES">
         <title>public static final String PROVISION_POLICY_ACCEPT_DEPENDENCIES = "acceptDependencies"</title>
         <para>
A value for the <link linkend="org.osgi.service.subsystem.SubsystemConstants.PROVISION_POLICY_DIRECTIVE">provision-policy</link>
 directive indicating the subsystem accepts dependency resources. The root
 subsystem has this provision policy.
   </para>
      </section>
      <section role="field" xreflabel="PROVISION_POLICY_DIRECTIVE" xml:id="org.osgi.service.subsystem.SubsystemConstants.PROVISION_POLICY_DIRECTIVE">
         <title>public static final String PROVISION_POLICY_DIRECTIVE = "provision-policy"</title>
         <para>
Manifest header directive identifying the provision policy. The default
 value is <link linkend="org.osgi.service.subsystem.SubsystemConstants.PROVISION_POLICY_REJECT_DEPENDENCIES">rejectDependencies</link>
         </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.subsystem.SubsystemConstants.PROVISION_POLICY_ACCEPT_DEPENDENCIES">PROVISION_POLICY_ACCEPT_DEPENDENCIES</link>, <link linkend="org.osgi.service.subsystem.SubsystemConstants.PROVISION_POLICY_REJECT_DEPENDENCIES">PROVISION_POLICY_REJECT_DEPENDENCIES</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="PROVISION_POLICY_REJECT_DEPENDENCIES" xml:id="org.osgi.service.subsystem.SubsystemConstants.PROVISION_POLICY_REJECT_DEPENDENCIES">
         <title>public static final String PROVISION_POLICY_REJECT_DEPENDENCIES = "rejectDependencies"</title>
         <para>
A value for the <link linkend="org.osgi.service.subsystem.SubsystemConstants.PROVISION_POLICY_DIRECTIVE">provision-policy</link>
 directive indicating the subsystem does not accept dependency resources.
 This is the default value.
   </para>
      </section>
      <section role="field" xreflabel="PROVISION_RESOURCE" xml:id="org.osgi.service.subsystem.SubsystemConstants.PROVISION_RESOURCE">
         <title>public static final String PROVISION_RESOURCE = "Provision-Resource"</title>
         <para>
Manifest header identifying the resources to be deployed to satisfy the
 dependencies of a subsystem.
   </para>
      </section>
      <section role="field" xreflabel="ROOT_SUBSYSTEM_SYMBOLICNAME" xml:id="org.osgi.service.subsystem.SubsystemConstants.ROOT_SUBSYSTEM_SYMBOLICNAME">
         <title>public static final String ROOT_SUBSYSTEM_SYMBOLICNAME = "org.osgi.service.subsystem.root"</title>
         <para>
The symbolic name of the root subsystem.
   </para>
      </section>
      <section role="field" xreflabel="START_ORDER_DIRECTIVE" xml:id="org.osgi.service.subsystem.SubsystemConstants.START_ORDER_DIRECTIVE">
         <title>public static final String START_ORDER_DIRECTIVE = "start-order"</title>
         <para>
Manifest header directive identifying the start order of subsystem
 contents. There is no default value. Specified values are of type
 <code>String</code> and must represent an integer.
   </para>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_CATEGORY" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_CATEGORY">
         <title>public static final String SUBSYSTEM_CATEGORY = "Subsystem-Category"</title>
         <para>
Manifest header identifying the categories of a subsystem as a
 comma-delimited list.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_CONTACTADDRESS" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_CONTACTADDRESS">
         <title>public static final String SUBSYSTEM_CONTACTADDRESS = "Subsystem-ContactAddress"</title>
         <para>
Manifest header identifying the contact address where problems with a
 subsystem may be reported; for example, an email address.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_CONTENT" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_CONTENT">
         <title>public static final String SUBSYSTEM_CONTENT = "Subsystem-Content"</title>
         <para>
Manifest header identifying the list of subsystem contents identified by
 a symbolic name and version.
   </para>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_COPYRIGHT" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_COPYRIGHT">
         <title>public static final String SUBSYSTEM_COPYRIGHT = "Subsystem-Copyright"</title>
         <para>
Manifest header identifying a subsystem's copyright information.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_DESCRIPTION" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_DESCRIPTION">
         <title>public static final String SUBSYSTEM_DESCRIPTION = "Subsystem-Description"</title>
         <para>
Manifest header identifying the human readable description.
   </para>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_DOCURL" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_DOCURL">
         <title>public static final String SUBSYSTEM_DOCURL = "Subsystem-DocURL"</title>
         <para>
Manifest header identifying a subsystem's documentation URL, from which
 further information about the subsystem may be obtained.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_EXPORTSERVICE" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_EXPORTSERVICE">
         <title>public static final String SUBSYSTEM_EXPORTSERVICE = "Subsystem-ExportService"</title>
         <para>
Manifest header identifying services offered for export.
   </para>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_ICON" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_ICON">
         <title>public static final String SUBSYSTEM_ICON = "Subsystem-Icon"</title>
         <para>
Manifest header identifying the icon URL for the subsystem.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_ID_PROPERTY" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_ID_PROPERTY">
         <title>public static final String SUBSYSTEM_ID_PROPERTY = "subsystem.id"</title>
         <para>
The name of the service property for the
 <link linkend="org.osgi.service.subsystem.Subsystem.getSubsystemId--">subsystem ID</link>. The value of this
 property must be of type <code>Long</code>.
   </para>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_IMPORTSERVICE" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_IMPORTSERVICE">
         <title>public static final String SUBSYSTEM_IMPORTSERVICE = "Subsystem-ImportService"</title>
         <para>
Manifest header identifying services required for import.
   </para>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_LICENSE" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_LICENSE">
         <title>public static final String SUBSYSTEM_LICENSE = "Subsystem-License"</title>
         <para>
Manifest header identifying a subsystem's license.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_LOCALIZATION" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_LOCALIZATION">
         <title>public static final String SUBSYSTEM_LOCALIZATION = "Subsystem-Localization"</title>
         <para>
Manifest header identifying the base name of a subsystem's localization
 entries.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_LOCALIZATION_DEFAULT_BASENAME" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_LOCALIZATION_DEFAULT_BASENAME">
         <title>public static final String SUBSYSTEM_LOCALIZATION_DEFAULT_BASENAME = "OSGI-INF/l10n/subsystem"</title>
         <para>
Default value for the <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_LOCALIZATION">Subsystem-Localization</link> manifest header.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_MANIFESTVERSION" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_MANIFESTVERSION">
         <title>public static final String SUBSYSTEM_MANIFESTVERSION = "Subsystem-ManifestVersion"</title>
         <para>
Manifest header identifying the subsystem manifest version. If not
 present, the default value is <code>1</code>.
   </para>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_NAME" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_NAME">
         <title>public static final String SUBSYSTEM_NAME = "Subsystem-Name"</title>
         <para>
Manifest header identifying the human readable subsystem name.
   </para>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_STATE_PROPERTY" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_STATE_PROPERTY">
         <title>public static final String SUBSYSTEM_STATE_PROPERTY = "subsystem.state"</title>
         <para>
The name of the service property for the subsystem
 <link linkend="org.osgi.service.subsystem.Subsystem.getState--">state</link>. The value of this property must be of
 type <link linkend="org.osgi.service.subsystem.Subsystem.State">Subsystem.State</link>.
   </para>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_SYMBOLICNAME" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_SYMBOLICNAME">
         <title>public static final String SUBSYSTEM_SYMBOLICNAME = "Subsystem-SymbolicName"</title>
         <para>
Manifest header value identifying the symbolic name for the subsystem.
 Must be present.
   </para>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_SYMBOLICNAME_PROPERTY" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_SYMBOLICNAME_PROPERTY">
         <title>public static final String SUBSYSTEM_SYMBOLICNAME_PROPERTY = "subsystem.symbolicName"</title>
         <para>
The name of the service property for the subsystem
 <link linkend="org.osgi.service.subsystem.Subsystem.getSymbolicName--">symbolic name</link>.
   </para>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_TYPE" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE">
         <title>public static final String SUBSYSTEM_TYPE = "Subsystem-Type"</title>
         <para>
Manifest header identifying the subsystem type.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION">SUBSYSTEM_TYPE_APPLICATION</link>, <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE">SUBSYSTEM_TYPE_COMPOSITE</link>, <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_FEATURE">SUBSYSTEM_TYPE_FEATURE</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_TYPE_APPLICATION" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION">
         <title>public static final String SUBSYSTEM_TYPE_APPLICATION = "osgi.subsystem.application"</title>
         <para>
The resource type value identifying an application subsystem.
 
 </para>
         <para>
 This value is used for the <code>osgi.identity</code> capability attribute
 <code>type</code>, the <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE">SUBSYSTEM_TYPE</link> manifest header and the
 <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_PROPERTY">SUBSYSTEM_TYPE_PROPERTY</link> service property.</para>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_TYPE_COMPOSITE" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE">
         <title>public static final String SUBSYSTEM_TYPE_COMPOSITE = "osgi.subsystem.composite"</title>
         <para>
The resource type value identifying an composite subsystem.
 
 </para>
         <para>
 This value is used for the <code>osgi.identity</code> capability attribute
 <code>type</code>, the <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE">SUBSYSTEM_TYPE</link> manifest header and the
 <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_PROPERTY">SUBSYSTEM_TYPE_PROPERTY</link> service property.</para>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_TYPE_FEATURE" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_FEATURE">
         <title>public static final String SUBSYSTEM_TYPE_FEATURE = "osgi.subsystem.feature"</title>
         <para>
The resource type value identifying an feature subsystem.
 
 </para>
         <para>
 This value is used for the <code>osgi.identity</code> capability attribute
 <code>type</code>, the <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE">SUBSYSTEM_TYPE</link> manifest header and the
 <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_PROPERTY">SUBSYSTEM_TYPE_PROPERTY</link> service property.</para>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_TYPE_PROPERTY" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_PROPERTY">
         <title>public static final String SUBSYSTEM_TYPE_PROPERTY = "subsystem.type"</title>
         <para>
The name of the service property for the <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE">subsystem
 type</link>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION">SUBSYSTEM_TYPE_APPLICATION</link>, <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE">SUBSYSTEM_TYPE_COMPOSITE</link>, <link linkend="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_FEATURE">SUBSYSTEM_TYPE_FEATURE</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_VENDOR" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_VENDOR">
         <title>public static final String SUBSYSTEM_VENDOR = "Subsystem-Vendor"</title>
         <para>
Manifest header identifying a subsystem's vendor.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_VERSION" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_VERSION">
         <title>public static final String SUBSYSTEM_VERSION = "Subsystem-Version"</title>
         <para>
Manifest header value identifying the version of the subsystem. If not
 present, the default value is <code>0.0.0</code>.
   </para>
      </section>
      <section role="field" xreflabel="SUBSYSTEM_VERSION_PROPERTY" xml:id="org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_VERSION_PROPERTY">
         <title>public static final String SUBSYSTEM_VERSION_PROPERTY = "subsystem.version"</title>
         <para>
The name of the service property for the subsystem
 <link linkend="org.osgi.service.subsystem.Subsystem.getVersion--">version</link>. The value of this property must
 be of type <code>Version</code>.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="SubsystemException" xml:id="org.osgi.service.subsystem.SubsystemException">
      <title>public class SubsystemException<?line-break?> extends RuntimeException</title>
      <para>
A Subsystem exception used to indicate a problem.
   </para>
      <section role="method" xreflabel="SubsystemException()" xml:id="org.osgi.service.subsystem.SubsystemException.SubsystemException--">
         <title>public  SubsystemException()</title>
         <para role="description">
Construct a Subsystem exception with no message.
   </para>
      </section>
      <section role="method" xreflabel="SubsystemException(String)" xml:id="org.osgi.service.subsystem.SubsystemException.SubsystemException-String-">
         <title>public  SubsystemException(String message)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The message to include in the exception.</para>
         </formalpara>
         <para role="description">
Construct a Subsystem exception specifying a message.
   </para>
      </section>
      <section role="method" xreflabel="SubsystemException(Throwable)" xml:id="org.osgi.service.subsystem.SubsystemException.SubsystemException-Throwable-">
         <title>public  SubsystemException(Throwable cause)</title>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of the exception.</para>
         </formalpara>
         <para role="description">
Construct a Subsystem exception specifying a cause.
   </para>
      </section>
      <section role="method" xreflabel="SubsystemException(String,Throwable)" xml:id="org.osgi.service.subsystem.SubsystemException.SubsystemException-String-Throwable-">
         <title>public  SubsystemException(String message,Throwable cause)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The message to include in the exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of the exception.</para>
         </formalpara>
         <para role="description">
Construct a Subsystem exception specifying a message and a cause.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="SubsystemPermission" xml:id="org.osgi.service.subsystem.SubsystemPermission">
      <title>public final class SubsystemPermission<?line-break?> extends BasicPermission</title>
      <para>
A bundle's authority to perform specific privileged administrative operations
 on or to get sensitive information about a subsystem. The actions for this
 permission are:
 
 </para>
      <programlisting> Action    Methods
 context   Subsystem.getBundleContext
 execute   Subsystem.start
           Subsystem.stop
 lifecycle Subsystem.install
           Subsystem.uninstall
 metadata  Subsystem.getSubsystemHeaders
           Subsystem.getLocation</programlisting>
      <para>
 The name of this permission is a filter expression. The filter gives access
 to the following attributes:
 </para>
      <itemizedlist>
         <listitem>
            <para>location - The location of a subsystem.</para>
         </listitem>
         <listitem>
            <para>id - The subsystem ID of the designated subsystem.</para>
         </listitem>
         <listitem>
            <para>name - The symbolic name of a subsystem.</para>
         </listitem>
      </itemizedlist>
      <para>
 Filter attribute names are processed in a case sensitive manner.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="CONTEXT" xml:id="org.osgi.service.subsystem.SubsystemPermission.CONTEXT">
         <title>public static final String CONTEXT = "context"</title>
         <para>
The action string <code>context</code>.
   </para>
      </section>
      <section role="field" xreflabel="EXECUTE" xml:id="org.osgi.service.subsystem.SubsystemPermission.EXECUTE">
         <title>public static final String EXECUTE = "execute"</title>
         <para>
The action string <code>execute</code>.
   </para>
      </section>
      <section role="field" xreflabel="LIFECYCLE" xml:id="org.osgi.service.subsystem.SubsystemPermission.LIFECYCLE">
         <title>public static final String LIFECYCLE = "lifecycle"</title>
         <para>
The action string <code>lifecycle</code>.
   </para>
      </section>
      <section role="field" xreflabel="METADATA" xml:id="org.osgi.service.subsystem.SubsystemPermission.METADATA">
         <title>public static final String METADATA = "metadata"</title>
         <para>
The action string <code>metadata</code>.
   </para>
      </section>
      <section role="method" xreflabel="SubsystemPermission(String,String)" xml:id="org.osgi.service.subsystem.SubsystemPermission.SubsystemPermission-String-String-">
         <title>public  SubsystemPermission(String filter,String actions)</title>
         <formalpara role="parameter">
            <title>filter</title>
            <para>A filter expression that can use, location, id, and name
        keys. Filter attribute names are processed in a case sensitive
        manner. A special value of <code>"*"</code> can be used to match all
        subsystems.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>
               <code>execute</code>, <code>lifecycle</code>, <code>metadata</code>, or
        <code>context</code>.</para>
         </formalpara>
         <para role="description">
Create a new SubsystemPermission.
 
 This constructor must only be used to create a permission that is going
 to be checked.
 </para>
         <para>
 Examples:
 
 </para>
         <programlisting> (name=com.acme.*)(location=http://www.acme.com/subsystems/*))
 (id&gt;=1)</programlisting>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the filter has an invalid syntax.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="SubsystemPermission(Subsystem,String)" xml:id="org.osgi.service.subsystem.SubsystemPermission.SubsystemPermission-Subsystem-String-">
         <title>public  SubsystemPermission(Subsystem subsystem,String actions)</title>
         <formalpara role="parameter">
            <title>subsystem</title>
            <para>A subsystem.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>
               <code>execute</code>, <code>lifecycle</code>, <code>metadata</code>, or
        <code>context</code>.</para>
         </formalpara>
         <para role="description">
Creates a new requested <code>SubsystemPermission</code> object to be used by
 the code that must perform <code>checkPermission</code>.
 <code>SubsystemPermission</code> objects created with this constructor cannot
 be added to an <code>SubsystemPermission</code> permission collection.
   </para>
      </section>
      <section role="method" xreflabel="equals(Object)" xml:id="org.osgi.service.subsystem.SubsystemPermission.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>The object being compared for equality with this object.</para>
         </formalpara>
         <para role="description">
Determines the equality of two <code>SubsystemPermission</code> objects.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if <code>obj</code> is equivalent to this
         <code>SubsystemPermission</code>; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="getActions()" xml:id="org.osgi.service.subsystem.SubsystemPermission.getActions--">
         <title>public String getActions()</title>
         <para role="description">
Returns the canonical string representation of the
 <code>SubsystemPermission</code> actions.
 
 </para>
         <para>
 Always returns present <code>SubsystemPermission</code> actions in the
 following order: <code>execute</code>, <code>lifecycle</code>, <code>metadata</code>,
 <code>context</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Canonical string representation of the
         <code>SubsystemPermission</code> actions.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="hashCode()" xml:id="org.osgi.service.subsystem.SubsystemPermission.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code value for this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Hash code value for this object.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="implies(Permission)" xml:id="org.osgi.service.subsystem.SubsystemPermission.implies-Permission-">
         <title>public boolean implies(Permission p)</title>
         <formalpara role="parameter">
            <title>p</title>
            <para>The requested permission.</para>
         </formalpara>
         <para role="description">
Determines if the specified permission is implied by this object. This
 method throws an exception if the specified permission was not
 constructed with a subsystem.
 
 </para>
         <para>
 This method returns <code>true</code> if the specified permission is a
 SubsystemPermission AND
 </para>
         <itemizedlist>
            <listitem>
               <para>this object's filter matches the specified permission's subsystem ID,
 subsystem symbolic name, and subsystem location OR</para>
            </listitem>
            <listitem>
               <para>this object's filter is "*"</para>
            </listitem>
         </itemizedlist>
         <para>
 AND this object's actions include all of the specified permission's
 actions.
 </para>
         <para>
 Special case: if the specified permission was constructed with "*"
 filter, then this method returns <code>true</code> if this object's filter is
 "*" and this object's actions include all of the specified permission's
 actions</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the specified permission is implied by this
         object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="newPermissionCollection()" xml:id="org.osgi.service.subsystem.SubsystemPermission.newPermissionCollection--">
         <title>public PermissionCollection newPermissionCollection()</title>
         <para role="description">
Returns a new <code>PermissionCollection</code> object suitable for storing
 <code>SubsystemPermission</code>s.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new <code>PermissionCollection</code> object.</para>
         </formalpara>
         <para/>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i3394869"><title>Filter Based
      Permissions</title>OSGi Core, Chapter 2, Filter Based
      Permissions</bibliomixed>

      <bibliomixed><title>Core Service Hooks</title>OSGi Core, Chapter 55
      Service Hook Service Specification</bibliomixed>

      <bibliomixed xml:id="i3394044"><title>Resource and Wiring</title>OSGi
      Core, Chapter 6 Resource API Specification</bibliomixed>

      <bibliomixed xml:id="i3321126"><title>Zip File Format</title>The Zip
      file format as defined by the java.util.zip package.</bibliomixed>

      <bibliomixed xml:id="i3321186"><title>IANA
      application/vnd.osgi.subsystem</title>www.iana.org/assignments/media-types/application/vnd.osgi.subsystem</bibliomixed>

      <bibliomixed xml:id="i3323132"><title>RFC 1738 Uniform Resource
      Locators</title>http://www.ietf.org/rfc/rfc1738.txt</bibliomixed>

      <bibliomixed xml:id="i3323360"><title>Uniform Resource Identifiers
      (URI): Generic
      Syntax</title>http://www.ietf.org/rfc/rfc2396.txt</bibliomixed>

      <bibliomixed xml:id="i3324343"><title>Equinox Region
      Digraph</title>http://underlap.blogspot.com/2011/02/stumbling-towards-better-design.html</bibliomixed>

      <bibliomixed xml:id="subsystems.osi"><title>Open Source
      initiative</title> http://www.opensource.org/</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="135" revision="$Id: 45c3744f05790eff8f996dbec881006066ad1afb $" version="5" xml:id="service.namespaces" xml:base="../135/service.namespaces.xml">
  <title>Common Namespaces Specification</title>

  <info>
    <releaseinfo xml:id="service.namespaces-version">Version 1.1</releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>A key aspect of the OSGi general dependency model based on
    requirements and capabilities is the concept of a
    <emphasis>Namespace</emphasis>. A Namespace defines the semantics of a
    Requirement-Capability pair. The generic model is defined in the <xref linkend="i1777721"/>. This section defines a number of Namespaces that are
    not part of the <xref linkend="intro.core.release" xrefstyle="template:%t"/> specification. Unless an attribute is
    specifically overridden, all Namespaces inherit the attributes and
    directives of the default Namespace as defined <xref linkend="i1777761"/>.</para>

    <para>Each Namespace is defined with the following items:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Name</emphasis> - the name of an attribute or
        directive</para>
      </listitem>

      <listitem>
        <para><emphasis>Kind</emphasis> - Defines where the attribute or
        directive can be used</para>

        <itemizedlist>
          <listitem>
            <para><code>CA</code> - Capability Attribute</para>
          </listitem>

          <listitem>
            <para><code>CD</code> - Capability Directive</para>
          </listitem>

          <listitem>
            <para><code>RA</code> - Requirement Attribute</para>
          </listitem>

          <listitem>
            <para><code>RD</code> - Requirement Directive</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis>M/O</emphasis> - Mandatory (<code>M</code>) or
        Optional (<code>O</code>)</para>
      </listitem>

      <listitem>
        <para><emphasis>Type</emphasis> - The data type</para>
      </listitem>

      <listitem>
        <para><emphasis>Syntax</emphasis> - Any syntax rules. The syntax
        refers in general to the syntaxes defined in <xref linkend="i1777866"/> and <xref linkend="i1777884"/>.</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Versioning</title>

      <para>In general, capabilities in a Namespace are versioned using
      Semantic Versioning. See <xref linkend="service.namespaces-coresemver"/>. Therefore, a capability will
      specify a single version and a requirement will specify a version range.
      See <xref linkend="service.namespaces-osgi.extender.namespace" xrefstyle="template:%t"/> for an example.</para>

      <para>For some Namespaces, capabilities are not versioned using Semantic
      Versioning. The versioning scheme used in those Namespaces will be
      described in the specification for the Namespace.</para>
    </section>
  </section>

  <section xml:id="service.namespaces-osgi.extender.namespace">
    <title>osgi.extender Namespace</title>

    <para>An <emphasis>Extender</emphasis> is a bundle that uses the life
    cycle events from another bundle, the <emphasis>extendee</emphasis>, to
    extend that bundle's functionality when that bundle is active. It can use
    metadata (headers, or files inside the extendee) to control its
    functionality. Extendees therefore have a dependency on the Extender that
    can be modeled with the <code>osgi.extender</code> Namespace. The
    definition for this Namespace can be found in the following table and the
    <xref linkend="org.osgi.namespace.extender.ExtenderNamespace" xrefstyle="hyperlink"/> class.</para>

    <table pgwide="1">
      <title>osgi.extender Namespace</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="3*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="3*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.extender</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>symbolic-name</code></entry>

            <entry><para>A symbolic name for the extender. These names are
            defined in their respective specifications and should in general
            use the specification top level package name. For example,
            <code>org.acme.foo</code>. The OSGi Alliance reserves names that
            start with "<code>osgi.</code>".</para></entry>
          </row>

          <row>
            <entry><code>version</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>Version</code></entry>

            <entry><code>version</code></entry>

            <entry><para>A version. This version must correspond to the
            specification of the extender.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Specifications for extenders (Blueprint, Declarative Services, etc.)
    should specify the values for these attributes. Extenders that provide
    such a capability should list the packages that they use in their
    specification in the <code>uses</code> directive of that capability to
    ensure class space consistency. For example a Declarative Services
    implementation could declare its capability with the following manifest
    header:</para>

    <programlisting>Provide-Capability: osgi.extender; 
   osgi.extender="osgi.component";
   uses:="org.osgi.service.component";
   version:Version="1.3"</programlisting>

    <para>A bundle that depends on a Declarative Services implementation
    should require such an extender with the following manifest header:</para>

    <programlisting>Require-Capability: osgi.extender;
  filter:="(&amp;(osgi.extender=osgi.component)(version&gt;=1.3)(!(version&gt;=2.0)))"</programlisting>

    <para>Extenders can extend an extendee bundle even if that bundle does not
    require the extender, unless the extender's specification explicitly
    forbids this. It is recommended that an extender should only extend a
    bundle if one of the following is true:</para>

    <itemizedlist>
      <listitem>
        <para>The bundle's wiring has a required wire for at least one
        <code>osgi.extender</code> capability with the name of the extender
        and the first of these required wires is wired to the extender.</para>
      </listitem>

      <listitem>
        <para>The bundle's wiring has no required wire for an
        <code>osgi.extender</code> capability with the name of the
        extender.</para>
      </listitem>
    </itemizedlist>

    <para>Otherwise, the extender should not extend the bundle.</para>

    <section>
      <title>Extenders and Framework Hooks</title>

      <para>The Framework provides a number of hooks that allow groups of
      bundles to be scoped. For example, the <emphasis>Subsystem Service
      Specification</emphasis>. An extender may want to extend the complete
      set of bundles installed in the Framework even when extendee bundles are
      hidden from the extender. The system bundle context provides a complete
      view of the bundles and services available in the Framework even if
      Framework hooks are used to scope groups of bundles. The system bundle
      context can be used by an extender to track all bundles installed in the
      Framework regardless of how Framework hooks are used to scope groups of
      bundles. This is useful in scenarios where several scoped groups contain
      bundles that require an extender. Instead of requiring an extender to be
      installed in each scoped group of bundles, a single extender that uses
      the system bundle context to track extendees can be installed to extend
      all scoped groups of bundles.</para>
    </section>
  </section>

  <section xml:id="service.namespaces-osgi.contract.namespace">
    <title>osgi.contract Namespace</title>

    <para>Products or technologies often have a number of related APIs
    consisting of a large set of packages. Some IDEs have not optimized for
    OSGi and requires work for each imported package. In these development
    environments using modularized systems tends to require a significant
    amount of manual effort to manage the imported packages.</para>

    <para>The <code>osgi.contract</code> Namespace addresses this IDE
    deficiency. It allows a developer to specify a single name and version for
    a contract that can then be expanded to a potentially large number of
    packages. For example, a developer can then specify a dependency on Java
    Enterprise Edition 6 contract that can be provided by an application
    server.</para>

    <para>The <code>osgi.contract</code> Namespace provides such a name and
    binds it to a set of packages with the uses constraint. The bundle that
    declares this contract must then import or export each of the listed
    packages with the correct versioning. Such a bundle is called a
    <emphasis>contract bundle</emphasis>. The contract bundle must ensure that
    it is bound to the correct versions of the packages contained within the
    contract it is providing. If the contract bundle imports the packages
    which are specified as part of the contract then proper matching
    attributes must be used to make sure it is bound to the correct versions
    of the packages.</para>

    <para>Additionally, the <code>osgi.contract</code> Namespace can be used
    in cases where API is defined by parties that do not use Semantic
    Versioning. In those cases, the version of the exported package can be
    unclear and so it is difficult to specify a meaningful version range for
    the package import. In such cases, importing the package
    <emphasis>without</emphasis> specifying a version range and specifying a
    requirement in the <code>osgi.contract</code> Namespace can provide a way
    to create portable bundles that use the API. OSGi has defined contract
    names for a number of such APIs. See <xref linkend="service.namespaces-portable.java.contracts.ref"/> for more
    information.</para>

    <para>An <code>osgi.contract</code> capability can then be used in the
    following ways:</para>

    <itemizedlist>
      <listitem>
        <para>IDEs can use the information in the <code>uses</code> directive
        to make all those packages available on the build path. In this case
        the developer no longer has to specify each package separately.</para>
      </listitem>

      <listitem>
        <para>During run time the <code>uses</code> clause is used to enforce
        that all packages in the contract form a consistent class
        space.</para>
      </listitem>
    </itemizedlist>

    <para>The <code>uses</code> directive will make it impossible to get wired
    to packages that are not valid for the contract. Since the uses constrains
    enforce the consistency, it is in principle not necessary to version the
    imported packages on client bundles since only the correctly versioned
    packages can be used. Contracts are aggregates and therefore make clients
    depend on the whole and all their transitive dependencies, even if the
    client only uses a single package of the contract.</para>

    <para>The recommended way of using contracts is to create a contract
    bundle that provides the <code>osgi.contract</code> capability and imports
    the packages with their required version range. For example:</para>

    <programlisting>Provide-Capability: osgi.contract;
    osgi.contract=JavaServlet;
    version:Version=2.5;
    uses:="javax.servlet,javax.servlet.http"
Export-Package:
    javax.servlet;      version="2.5",
    javax.servlet.http; version="2.5"</programlisting>

    <para>A contract may support multiple versions of a named contract. Such a
    contract must use a single capability for the contract name that specifies
    a list of all the versions that are supported. For example, the
    JavaServlet 3.1 contract capability would be specified with the
    following:</para>

    <programlisting>Provide-Capability: osgi.contract;
    osgi.contract=JavaServlet;
    version:List&lt;Version&gt;="2.5,3.0,3.1";
    uses:=
        "javax.servlet,
        javax.servlet.annotation,
        javax.servlet.descriptor,
        javax.servlet.http"
Export-Package:
    javax.servlet;            version="3.1",
    javax.servlet.annotation; version="3.1",
    javax.servlet.descriptor; version="3.1",
    javax.servlet.http;       version="3.1"</programlisting>

    <para>A client bundle that requires the Servlet 2.5 contract can then have
    the following manifest:</para>

    <programlisting>Require-Capability: osgi.contract;
    filter:="(&amp;(osgi.contract=JavaServlet)(version=2.5))",
Import-Package:
    javax.servlet, javax.servlet.http</programlisting>

    <para>The client bundle will be constrained by the contract's uses
    constraints and automatically gets the correct packages. In this example,
    no semantic versioning is used for the contract because the Servlet
    Specifications do not use semantic versioning (version 3.0 is backward
    compatible with 2.X).</para>

    <para>In this model it is even possible to use the normally not
    recommended DynamicImport-Package header with a wild card since also this
    header is constrained by the uses constraints. However, using a full
    wildcard can also dynamically import packages that are not part of the
    contract. To prevent these unwanted dynamic imports, the exporter could
    include an attribute on the exports. For example:</para>

    <programlisting>Require-Capability: osgi.contract;
    filter:="(&amp;(osgi.contract=JavaServlet)(version=2.5))"
DynamicImport-Package: 
    *;JavaServlet=contract</programlisting>

    <para>However, this model requires the exporter to specify an agreed
    attribute. The contract bundle does not require such coordination; it also
    allows the package exporters to reside in different and unrelated
    bundles.</para>

    <para>The definition of the <code>osgi.contract</code> Namespace is in the
    following table and in the <xref linkend="org.osgi.namespace.contract.ContractNamespace" xrefstyle="hyperlink"/> class. See <xref linkend="service.namespaces-portable.java.contracts.ref"/>.</para>

    <table pgwide="1">
      <title>osgi.contract Namespace</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="2.5*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="3.5*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.contract</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>symbolic-name</code></entry>

            <entry><para>A symbolic name for the contract.</para></entry>
          </row>

          <row>
            <entry><code>version</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>Version+</code></entry>

            <entry><code>version</code></entry>

            <entry><para>A list of versions for the contract. A contract that
            supports multiple versions must use a single capability with a
            version attribute that lists all versions
            supported.</para></entry>
          </row>

          <row>
            <entry><code>uses</code></entry>

            <entry><code>CD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><para><code>package-name</code></para><para><code>( ','
            package-name )</code></para></entry>

            <entry><para>For a contract, the standard uses clause is used to
            indicate which packages are part of the contract. The imports or
            exports of those packages link these packages to a particular
            version.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <section>
      <title>Versioning</title>

      <para>As the <code>osgi.contract</code> Namespace follows the versioning
      of the associated contract, capabilities in this Namespace are
      <emphasis>not</emphasis> semantically versioned. The associated
      contracts are often versioned using marketing or other versioning
      schemes and therefore the version number cannot be used as an indication
      of backwards compatibility.</para>

      <para>As a result, capabilities in the <code>osgi.contract</code>
      Namespace use a <emphasis>discrete</emphasis> versioning scheme. In such
      a versioning scheme, each version is treated as separate without any
      implied relation to another version. A capability lists
      <emphasis>all</emphasis> compatible versions. A requirement only selects
      a single version.</para>
    </section>
  </section>

  <section xml:id="service.namespaces-osgi.service.namespace">
    <title>osgi.service Namespace</title>

    <para>The Service Namespace is intended to be used for:</para>

    <itemizedlist>
      <listitem>
        <para>Preventing a bundle from resolving if there is not at least one
        bundle that potentially can register a specific service.</para>
      </listitem>

      <listitem>
        <para>Providing a hint to the provisioning agent that the bundle
        requires a given service.</para>
      </listitem>

      <listitem>
        <para>Used as template for specifications like Blueprint and
        Declarative Services to express their provided and referenced services
        in the Repository model, see the <emphasis>Repository Service
        Specification</emphasis>.</para>
      </listitem>
    </itemizedlist>

    <para>A bundle providing this capability indicates that it can register
    such a service with at least the given custom attributes as service
    properties. At resolve time this is a promise since there is no guarantee
    that during runtime the bundle will actually register such a service;
    clients must handle this with the normal runtime dependency managers like
    Blueprint, Declarative Services, or others.</para>

    <para>See the following table and the <xref linkend="org.osgi.namespace.service.ServiceNamespace" xrefstyle="hyperlink"/> class for this Namespace definition.</para>

    <table pgwide="1">
      <title>osgi.service Namespace</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="3*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="3*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>objectClass</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><para><code>List</code></para><para><code>&lt;String&gt;</code></para></entry>

            <entry><para><code>qname</code></para><para><code>(','
            qname)*</code></para></entry>

            <entry><para>The fully qualified name of the object class of the
            service.</para></entry>
          </row>

          <row>
            <entry><code>*</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>*</code></entry>

            <entry><code>*</code></entry>

            <entry><para>Custom attributes that will be provided as service
            properties if they do not conflict with the service properties
            rules and are not private service properties. Private properties
            start with a full
            stop (<code>'.' \u002E</code>).</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <section>
      <title>Versioning</title>

      <para>Capabilities in the <code>osgi.service</code> Namespace are
      <emphasis>not</emphasis> versioned. The package of a service's object
      class is generally versioned and the package can be associated with the
      capability via the <code>uses</code> directive.</para>
    </section>
  </section>

  <section xml:id="service.namespaces-osgi.implementation.namespace">
    <title>osgi.implementation Namespace</title>

    <para>The Implementation Namespace is intended to be used for:</para>

    <itemizedlist>
      <listitem>
        <para>Preventing a bundle from resolving if there is not at least one
        bundle that provides an implementation of the specified specification
        or contract.</para>
      </listitem>

      <listitem>
        <para>Providing uses constraints to ensure that bundles which require
        an implementation of a specification or contract will be wired
        appropriately by the framework.</para>
      </listitem>

      <listitem>
        <para>Providing a hint to the provisioning agent that the bundle
        requires a given specification or contract implementation.</para>
      </listitem>

      <listitem>
        <para>Used as a general capability Namespace for specifications or
        contracts to express their provided function in the Repository model,
        see the <emphasis>Repository Service Specification</emphasis>.</para>
      </listitem>
    </itemizedlist>

    <para>A bundle providing this capability indicates that it implements a
    specification or contract with the specified name and version. For
    example, the <emphasis>Asynchronous Service Specification</emphasis> would
    provide the following capability:</para>

    <programlisting>Provide-Capability: osgi.implementation;
    osgi.implementation="osgi.async";
    version:Version="1.0";
    uses:="org.osgi.service.async"</programlisting>

    <para>See the following table and the <xref linkend="org.osgi.namespace.implementation.ImplementationNamespace" xrefstyle="hyperlink"/> class for this Namespace definition.</para>

    <table pgwide="1">
      <title>osgi.implementation Namespace</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="3.5*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="2.5*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.implementation</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><para><code>String</code></para></entry>

            <entry><para><code>symbolic-name</code></para></entry>

            <entry><para>The symbolic name of the specification or contract.
            The OSGi Alliance reserves names that start with
            "<code>osgi.</code>".</para></entry>
          </row>

          <row>
            <entry><code>version</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><para><code>Version</code></para></entry>

            <entry><para><code>version</code></para></entry>

            <entry><para>The version of the implemented specification or
            contract. </para></entry>
          </row>

          <row>
            <entry><code>*</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>*</code></entry>

            <entry><code>*</code></entry>

            <entry><para>Custom attributes that can be used to further
            identify the implementation</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.namespace.contract" xml:id="org.osgi.namespace.contract" xml:base="../../generated/javadoc/docbook/org.osgi.namespace.contract.xml">
   <title>org.osgi.namespace.contract</title>
   <info>
      <releaseinfo xml:id="org.osgi.namespace.contract-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.namespace.contract-version.number">1.0</edition>
   </info>
   <para>
Contract Namespace Package Version 1.0.
 
 </para>
   <para>
 Bundles should not need to import this package at runtime since all
 the types in this package just contain constants for capability and 
 requirement namespaces specified by the OSGi Alliance.</para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.namespace.contract.ContractNamespace">
                  <code>ContractNamespace</code>
               </link> - 
Contract Capability and Requirement Namespace.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="ContractNamespace" xml:id="org.osgi.namespace.contract.ContractNamespace">
      <title>public final class ContractNamespace<?line-break?> extends Namespace</title>
      <para>
Contract Capability and Requirement Namespace.
 
 </para>
      <para>
 This class defines the names for the attributes and directives for this
 namespace. All unspecified capability attributes are of type <code>String</code>
 and are used as arbitrary matching attributes for the capability. The values
 associated with the specified directive and attribute keys are of type
 <code>String</code>, unless otherwise indicated.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="CAPABILITY_VERSION_ATTRIBUTE" xml:id="org.osgi.namespace.contract.ContractNamespace.CAPABILITY_VERSION_ATTRIBUTE">
         <title>public static final String CAPABILITY_VERSION_ATTRIBUTE = "version"</title>
         <para>
The capability attribute contains the <code>Version</code> of the
 specification of the contract. The value of this attribute must be of
 type <code>Version</code>.
   </para>
      </section>
      <section role="field" xreflabel="CONTRACT_NAMESPACE" xml:id="org.osgi.namespace.contract.ContractNamespace.CONTRACT_NAMESPACE">
         <title>public static final String CONTRACT_NAMESPACE = "osgi.contract"</title>
         <para>
Namespace name for contract capabilities and requirements.
 
 </para>
         <para>
 Also, the capability attribute used to specify the name of the contract.</para>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.namespace.extender" xml:id="org.osgi.namespace.extender" xml:base="../../generated/javadoc/docbook/org.osgi.namespace.extender.xml">
   <title>org.osgi.namespace.extender</title>
   <info>
      <releaseinfo xml:id="org.osgi.namespace.extender-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.namespace.extender-version.number">1.0</edition>
   </info>
   <para>
Extender Namespace Package Version 1.0.
 
 </para>
   <para>
 Bundles should not need to import this package at runtime since all
 the types in this package just contain constants for capability and 
 requirement namespaces specified by the OSGi Alliance.</para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.namespace.extender.ExtenderNamespace">
                  <code>ExtenderNamespace</code>
               </link> - 
Extender Capability and Requirement Namespace.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="ExtenderNamespace" xml:id="org.osgi.namespace.extender.ExtenderNamespace">
      <title>public final class ExtenderNamespace<?line-break?> extends Namespace</title>
      <para>
Extender Capability and Requirement Namespace.
 
 </para>
      <para>
 This class defines the names for the attributes and directives for this
 namespace. All unspecified capability attributes are of type <code>String</code>
 and are used as arbitrary matching attributes for the capability. The values
 associated with the specified directive and attribute keys are of type
 <code>String</code>, unless otherwise indicated.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="CAPABILITY_VERSION_ATTRIBUTE" xml:id="org.osgi.namespace.extender.ExtenderNamespace.CAPABILITY_VERSION_ATTRIBUTE">
         <title>public static final String CAPABILITY_VERSION_ATTRIBUTE = "version"</title>
         <para>
The capability attribute contains the <code>Version</code> of the
 specification of the extender. The value of this attribute must be of
 type <code>Version</code>.
   </para>
      </section>
      <section role="field" xreflabel="EXTENDER_NAMESPACE" xml:id="org.osgi.namespace.extender.ExtenderNamespace.EXTENDER_NAMESPACE">
         <title>public static final String EXTENDER_NAMESPACE = "osgi.extender"</title>
         <para>
Namespace name for extender capabilities and requirements.
 
 </para>
         <para>
 Also, the capability attribute used to specify the name of the extender.</para>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.namespace.service" xml:id="org.osgi.namespace.service" xml:base="../../generated/javadoc/docbook/org.osgi.namespace.service.xml">
   <title>org.osgi.namespace.service</title>
   <info>
      <releaseinfo xml:id="org.osgi.namespace.service-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.namespace.service-version.number">1.0</edition>
   </info>
   <para>
Service Namespace Package Version 1.0.
 
 </para>
   <para>
 Bundles should not need to import this package at runtime since all
 the types in this package just contain constants for capability and 
 requirement namespaces specified by the OSGi Alliance.</para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.namespace.service.ServiceNamespace">
                  <code>ServiceNamespace</code>
               </link> - 
Service Capability and Requirement Namespace.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="ServiceNamespace" xml:id="org.osgi.namespace.service.ServiceNamespace">
      <title>public final class ServiceNamespace<?line-break?> extends Namespace</title>
      <para>
Service Capability and Requirement Namespace.
 
 </para>
      <para>
 This class defines the names for the attributes and directives for this
 namespace.
 
 </para>
      <para>
 All unspecified capability attributes are of one of the following types:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <code>String</code>
            </para>
         </listitem>
         <listitem>
            <para>
               <code>Version</code>
            </para>
         </listitem>
         <listitem>
            <para>
               <code>Long</code>
            </para>
         </listitem>
         <listitem>
            <para>
               <code>Double</code>
            </para>
         </listitem>
         <listitem>
            <para>
               <code>List&lt;String&gt;</code>
            </para>
         </listitem>
         <listitem>
            <para>
               <code>List&lt;Version&gt;</code>
            </para>
         </listitem>
         <listitem>
            <para>
               <code>List&lt;Long&gt;</code>
            </para>
         </listitem>
         <listitem>
            <para>
               <code>List&lt;Double&gt;</code>
            </para>
         </listitem>
      </itemizedlist>
      <para>
 and are used as arbitrary matching attributes for the capability. The values
 associated with the specified directive and attribute keys are of type
 <code>String</code>, unless otherwise indicated.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="CAPABILITY_OBJECTCLASS_ATTRIBUTE" xml:id="org.osgi.namespace.service.ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE">
         <title>public static final String CAPABILITY_OBJECTCLASS_ATTRIBUTE = "objectClass"</title>
         <para>
The capability attribute used to specify the types of the service. The
 value of this attribute must be of type <code>List&lt;String&gt;</code>.
 
 </para>
         <para>
 A <code>ServiceNamespace</code> capability should express a
 <link linkend="org.osgi.resource.Namespace.CAPABILITY_USES_DIRECTIVE">uses constraint</link> for all the
 packages mentioned in the value of this attribute.</para>
      </section>
      <section role="field" xreflabel="SERVICE_NAMESPACE" xml:id="org.osgi.namespace.service.ServiceNamespace.SERVICE_NAMESPACE">
         <title>public static final String SERVICE_NAMESPACE = "osgi.service"</title>
         <para>
Namespace name for service capabilities and requirements.
   </para>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.namespace.implementation" xml:id="org.osgi.namespace.implementation" xml:base="../../generated/javadoc/docbook/org.osgi.namespace.implementation.xml">
   <title>org.osgi.namespace.implementation</title>
   <info>
      <releaseinfo xml:id="org.osgi.namespace.implementation-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.namespace.implementation-version.number">1.0</edition>
   </info>
   <para>
Implementation Namespace Package Version 1.0.
 
 </para>
   <para>
 Bundles should not need to import this package at runtime since all
 the types in this package just contain constants for capability and 
 requirement namespaces specified by the OSGi Alliance.</para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.namespace.implementation.ImplementationNamespace">
                  <code>ImplementationNamespace</code>
               </link> - 
Implementation Capability and Requirement Namespace.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="ImplementationNamespace" xml:id="org.osgi.namespace.implementation.ImplementationNamespace">
      <title>public final class ImplementationNamespace<?line-break?> extends Namespace</title>
      <para>
Implementation Capability and Requirement Namespace.
 
 </para>
      <para>
 This class defines the names for the attributes and directives for this
 namespace.
 
 </para>
      <para>
 This class defines the names for the attributes and directives for this
 namespace. All unspecified capability attributes are of type <code>String</code>
 and are used as arbitrary matching attributes for the capability. The values
 associated with the specified directive and attribute keys are of type
 <code>String</code>, unless otherwise indicated.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="field" xreflabel="CAPABILITY_VERSION_ATTRIBUTE" xml:id="org.osgi.namespace.implementation.ImplementationNamespace.CAPABILITY_VERSION_ATTRIBUTE">
         <title>public static final String CAPABILITY_VERSION_ATTRIBUTE = "version"</title>
         <para>
The capability attribute contains the <code>Version</code> of the
 specification or contract being implemented. The value of this attribute
 must be of type <code>Version</code>.
   </para>
      </section>
      <section role="field" xreflabel="IMPLEMENTATION_NAMESPACE" xml:id="org.osgi.namespace.implementation.ImplementationNamespace.IMPLEMENTATION_NAMESPACE">
         <title>public static final String IMPLEMENTATION_NAMESPACE = "osgi.implementation"</title>
         <para>
Namespace name for "implementation" capabilities and requirements.
 
 This is also the capability attribute used to specify the name of the
 specification or contract being implemented.
 
 </para>
         <para>
 A <code>ImplementationNamespace</code> capability should express a
 <link linkend="org.osgi.resource.Namespace.CAPABILITY_USES_DIRECTIVE">uses constraint</link> for the
 appropriate packages defined by the specification/contract the packages
 mentioned in the value of this attribute.</para>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i1772882"><title>Specification
      References</title>http://www.osgi.org/Specifications/Reference</bibliomixed>

      <bibliomixed xml:id="service.namespaces-portable.java.contracts.ref"><title>Portable
      Java Contract
      Definitions</title>http://www.osgi.org/Specifications/ReferenceContract</bibliomixed>

      <bibliomixed xml:id="i1777721"><title>Resources API
      Specification</title>OSGi Core, Chapter 6 Resource API
      Specification</bibliomixed>

      <bibliomixed xml:id="i1777761"><title>Framework Namespaces
      Specification</title>OSGi Core, Chapter 8 Framework Namespaces
      Specification</bibliomixed>

      <bibliomixed xml:id="i1777866"><title>General Syntax
      Definitions</title>OSGi Core, General Syntax Definitions</bibliomixed>

      <bibliomixed xml:id="i1777884"><title>Common Headers</title>OSGi Core,
      Chapter 3, Common Header Syntax</bibliomixed>

      <bibliomixed xml:id="service.namespaces-coresemver"><title>Semantic
      Versioning</title>OSGi Core, Chapter 3, Semantic
      Versioning</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="136" revision="$Id: db19fe056306399c3f05bd23481f75dbdb455720 $" version="5" xml:id="service.resolver" xml:base="../136/service.resolver.xml">
  <title>Resolver Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.resolver-version" linkend="org.osgi.service.resolver"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>Today very few applications are self contained, the predominant
    development model is that applications are built from (external)
    components, which are often open source. Application developers add
    business logic, glue code, and assemble the diverse components into a
    resource that provides the desired capabilities when installed in an
    environment. Designing the assembly has long been a manual and error prone
    process, partly due to the complexity of external dependencies. Although
    the direct dependencies are often given, the largest number of
    dependencies are usually the transitive dependencies: the dependencies of
    the dependencies. Modern applications can end up with hundreds to
    thousands of external dependencies. Numbers that make tooling
    inevitable.</para>

    <para>The OSGi framework is the first specification that provides a
    foundation for automating a significant part of this assembly process. The
    Requirement-Capability model defined in <xref linkend="i3333846"/>
    provides a dependency model that allows resources to express dependencies,
    constraints, and capabilities. If a resource's constraints are met it
    provides capabilities that can satisfy further requirements. The OSGi
    dependency model is fully generic and is not limited to bundles. Resources
    can be bundles but also certificates, plugged in devices, etc.</para>

    <para>Resolving transitive dependencies is a non-trivial process that
    requires careful design to achieve the required performance since the
    underlying problem is NP-complete. OSGi frameworks have always included
    such resolvers but these were built into the frameworks. They were not
    usable outside the framework for tooling, for example automatically
    finding the dependencies of a bundle that needs to be installed.</para>

    <para>The number of dependencies is rapidly reaching a threshold where
    manual methods no longer can provide reliable results. This specification
    therefore provides the <emphasis>Resolver service</emphasis>, a service
    that can be the base for provisioning, deployment, build, and diagnostic
    tooling. The service can take a requirement and resolve it to a wiring of
    resources. For example, with cloud computing a new requirement can be
    translated into a new OSGi framework instance being started on a node and
    provisioned with the set of bundles that satisfy the given requirement.
    The OSGi Resolver service is intended be a corner stone of such an
    auto-provisioning tool.</para>

    <para>However, the OSGi Resolver service is not limited to these higher
    end schemes. Build tools can use the Resolver to find components for the
    build path and/or run time environment and predict the results of
    installing a set of bundles on a target environment. The OSGi Resolver
    service is an essential part of a software model where applications are
    built out of independent components.</para>

    <para>This specification is based on the concepts and API defined in the
    <xref linkend="i3333846"/>, <xref linkend="i3335981"/>, and the <xref linkend="i3333826"/>. These specifications are required reading for
    understanding this specification. This specification is for highly
    specialized use, it is not intended to be used in applications, the
    Resolver API is a low level service intended for system developers with
    deep knowledge of the OSGi module layer.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Transitive</emphasis> - From a requirement, find a
          consistent set of resources that satisfy that requirement.</para>
        </listitem>

        <listitem>
          <para><emphasis>Diagnostics</emphasis> - Provide diagnostic
          information when no resolution can be found.</para>
        </listitem>

        <listitem>
          <para><emphasis>Scoped Repositories</emphasis> - Allow the
          environment to control the repositories to use.</para>
        </listitem>

        <listitem>
          <para><emphasis>Build Tools</emphasis> - Must be useful in
          establishing build and run time class paths.</para>
        </listitem>

        <listitem>
          <para><emphasis>Provisioning</emphasis> - Must be useful to find a
          set of bundles that can be installed in a system without running
          into unresolved dependencies.</para>
        </listitem>

        <listitem>
          <para><emphasis>OSGi</emphasis> - Provide the semantics of all the
          OSGi namespaces, including the uses constraints.</para>
        </listitem>

        <listitem>
          <para><emphasis>API</emphasis> - The API for the Resolver must
          provide the base for the Framework Bundle Wiring API.</para>
        </listitem>

        <listitem>
          <para><emphasis>Performant</emphasis> - Enable highly performant
          implementations.</para>
        </listitem>

        <listitem>
          <para><emphasis>Frameworks</emphasis> - Allow Frameworks to provide
          their resolver as a service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Scalable</emphasis> - Allow access to, and use of,
          very large repositories.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i3331037">
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Environment</emphasis> - A container or framework
          that can install resources and uses a Resolver to wire these
          resources.</para>
        </listitem>

        <listitem>
          <para><emphasis>Resolve Context</emphasis> - An interface
          implemented by the management agent to provide the context of the
          resolution.</para>
        </listitem>

        <listitem>
          <para><emphasis>Wiring</emphasis> - Represents the state of a
          resource's wires, requirements, and capabilities in an
          environment.</para>
        </listitem>

        <listitem>
          <para><emphasis>Resolver</emphasis> - A service that can find a set
          of wires that can be applied to an existing wiring state where a set
          of initial resources have all their mandatory requirements
          satisfied.</para>
        </listitem>

        <listitem>
          <para><emphasis>Wire</emphasis> - Links requirement to a
          capability.</para>
        </listitem>

        <listitem>
          <para><emphasis>Resource</emphasis> -An artifact with requirements
          that need to be provisioned and resolved to provide its
          capabilities.</para>
        </listitem>

        <listitem>
          <para><emphasis>Requirement</emphasis> - A necessity for a given
          resource before it can provide its capabilities; expressed as a
          filter expression on the attributes of a capability in a given
          namespace.</para>
        </listitem>

        <listitem>
          <para><emphasis>Capability</emphasis> - A set of attributes and
          directives defined by a namespace, describes what a resource
          provides when resolved.</para>
        </listitem>

        <listitem>
          <para><emphasis>Hosted Capability</emphasis> - Pairs a resource with
          a capability to model hosting capabilities in another
          resource.</para>
        </listitem>

        <listitem>
          <para><emphasis>Namespace</emphasis> - The type for a capability and
          requirement.</para>
        </listitem>

        <listitem>
          <para><emphasis>Resolution</emphasis> - The result of a resolve
          operation.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>Class and Service overview</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.743in" contentwidth="7.000in" fileref="resolver-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Synopsis</title>

      <para>The Resolver service can find a complete and consistent set of
      transitive dependencies starting with an initial set of mandatory and
      optional resources. Such a set can be used to install resources in the
      environment from local or remote repositories. To use the Resolver
      service, the client must provide a <xref linkend="org.osgi.service.resolver.ResolveContext" xrefstyle="hyperlink"/> object. This complex object represents the
      context of a resolution; it provides the initial resources (optional and
      mandatory), defines a number of namespaces specific policies, and
      provides the state of the environment.</para>

      <para>A resolution can be based on an existing wiring in the
      environment, for example the current framework state. For the framework,
      the Resolve Context can find this existing state via the <xref linkend="i3335981"/>. The Resolver must then satisfy all the
      requirements of the mandatory resources. The Resolver must always ask
      the Resolve Context to find additional capabilities for the unsatisfied
      requirements. A capability is always associated with a resource, which
      is subsequently associated with additional requirements. The final
      resolution must contain a set of resources that include the initial set
      of mandatory resources, has no unsatisfied mandatory requirements, and
      is consistent with the implied constraints. Otherwise it fails.</para>

      <para>The Requirement-Capability model is fully generic but provides
      special semantics through the use of namespaces. The Resolver must
      implement the standard OSGi namespaces as described in <xref linkend="i3335981"/>, which includes the <code>uses</code> constraints.
      Part of the semantics of the OSGi namespaces are delegated to the
      Resolve Context so that it can implement different policies. Singletons,
      ordering of capabilities, and matching are the responsibility of the
      Resolve Context; the Resolver never matches a requirement to a
      capability.</para>

      <para>Requirements have an <code>effective</code> directive that
      indicates in what situations the requirement must be resolved. Also
      here, the Resolve Context decides if a particular requirement is
      effective or not. Only effective requirements are wired in the
      resolution.</para>

      <para>Since capabilities are declared by resources that have additional
      requirements, the Resolver must create a set of resources where all
      transitive requirements are satisfied or fail with a Resolution
      Exception. This Resolution Exception can provide additional details why
      the resolution failed, if possible.</para>

      <para>At the end of a successful resolve operation the Resolver returns
      a <code>Map&lt;Resource,List&lt;Wire&gt;&gt;</code>. These wires are a
      delta on the existing state, if any. The wires can then be used to
      provision missing resources or to provide diagnostic feedback.</para>
    </section>
  </section>

  <section>
    <title>The Resolve Context</title>

    <para>Provisioning is the process of providing a framework with the
    necessary resources to allow it to operate according to set goals. In OSGi
    terms, this consists of installing bundles and ensuring that the
    configuration is set up correctly. With OSGi, bundles explicitly describe
    their capabilities and requirements as manifest headers. This can range
    from Export-Package (a capability) to a generic Provide-Capability
    header.</para>

    <para>OSGi Frameworks have a <emphasis>resolving</emphasis> stage that
    ensures requirements are satisfied before a bundle is allowed to provide
    code to the shared space. As long as the requirements are not met, the
    bundle remains in the <code>INSTALLED</code> state and is thus prohibited
    from contributing capabilities. Once all the mandatory requirements are
    met, the bundle becomes <code>RESOLVED</code>. That is, a framework
    combines two decisions when it resolves bundles:</para>

    <itemizedlist>
      <listitem>
        <para>Find a resolution based on the existing set of installed
        bundles.</para>
      </listitem>

      <listitem>
        <para>Move the bundles that have all their mandatory requirements
        satisfied to the <code>RESOLVED</code> state.</para>
      </listitem>
    </itemizedlist>

    <para>The <emphasis>Resolver service</emphasis> separates these two stages
    and thus allows a third party, the <emphasis>management agent</emphasis>,
    to define the <emphasis>environment</emphasis> of the resolution. A
    management agent can interact with the Resolver service while it is
    searching for a resolution because the Resolver service calls back the
    management agent through a <xref linkend="org.osgi.service.resolver.ResolveContext" xrefstyle="hyperlink"/>
    object. The Resolver service will therefore allow the management agent to
    handle more scenarios, better diagnostics, etc.</para>

    <para>The Resolve Context is provided by the management agent, it is an
    abstract base class and must therefore be extended. It is a non-trivial
    class to implement since it is tightly coupled to the rules of the
    environment; it represents the policies of the management agent for that
    environment. For OSGi framework resolvers, the Resolve Context must
    understand and implement a part of the OSGi framework namespaces.</para>

    <para>With the Resolver service, a management agent can try out
    resolutions before any bundle can see the result of such a resolution but
    it can also include extra bundles or other resources on demand. The
    Resolver service will also allow resolutions to be calculated for other
    frameworks.</para>

    <para>For example, a management agent could use a Resolver service to find
    missing dependencies and install them on demand from a local directory
    with bundles. Such a Provisioner could have the following skeleton:</para>

    <programlisting>public class Provisioner {
  File                 bundles   = ...;
  Map&lt;String,Resource&gt; resources = ...;
  Resolver             resolver  = ...;
  BundleContext        context   = ...;

  public void install(String location) {
    Resource resource = resources.get( location );
    if ( resource == null ) error(...);
    
    try {
       ResolveContextImpl rc = ...
       rc.addMandatory( resource );
      Set&lt;Resource&gt; provision = resolver.resolve( rc ).keySet();

      for ( Resource rb : provision ) {
        String location = getLocation( rb );
        
        Bundle bundle = context.installBundle( location );
            if ( !isFragment( bundle ) )
            bundle.start();
      }
    } catch(ResolutionException re) {
      ... // diagnostics
    } catch(BundleException be) {
      ... // diagnostics
    }
  }
}</programlisting>

    <section>
      <title>Mandatory and Optional Resources</title>

      <para>The Resolve Context provides all the parameters for the resolve
      operation, the Resolver does not maintain any state between invocations.
      The Resolve Context must therefore provide the mandatory and optional
      resources, which are essentially the input parameters to the resolve
      operation. The resolver must find a solution that includes at least the
      initial mandatory resources and should include the optional
      resources.</para>
    </section>

    <section xml:id="i3344409">
      <title>Finding Capabilities</title>

      <para>The Resolve Context's <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method must be implemented in such a way that it
      returns an ordered list of capabilities. The Resolver will treat the
      order of the capabilities as preferences, the first element is more
      preferred than a later element. The Resolver cannot guarantee that the
      wiring obeys this preference since there can be other constraints.
      However, a Resolver must use this preference order for simple cases and
      try to use it in more constrained situations.</para>

      <para>The Resolver does not make any assumptions, this means that the
      <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method must do all the matching. Even though the
      Resolver gets the mandatory and optional resources it will not search
      these for capabilities to satisfy requirements. If the <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method does not search these resources then
      their capabilities will not be used. The same is true for the existing
      wiring state used.</para>

      <para>Since this section describes the Resolver with respect to a
      provisioning agent, the set of resources is not limited to the installed
      set. That is, normally when a framework is resolved the Resolver only
      has to include installed resources. However, for a provisioning agent it
      is possible to retrieve external resources. The <xref linkend="service.repository"/> provides access to resource repositories
      but a management agent is free to find capabilities by any alternative
      means.</para>

      <para>For resolving an OSGi framework the specifications outlines a
      number of heuristics that guide the order of wiring bundles and
      packages:</para>

      <orderedlist>
        <listitem>
          <para>A resource that is already resolved, that is, it is already
          wired</para>
        </listitem>

        <listitem>
          <para>The highest version</para>
        </listitem>

        <listitem>
          <para>The lowest bundle id</para>
        </listitem>
      </orderedlist>

      <para>The Resolver can, and likely will, use the returned list to
      maintain its internal state during the resolve operation while trying
      out different potential solutions. It can add and remove capabilities at
      will. The returned list must therefore be mutable and not reused, after
      it is returned; it becomes owned by the Resolver. However, the Resolver
      can call back later with the <xref linkend="org.osgi.service.resolver.ResolveContext.insertHostedCapability-List-HostedCapability-" xrefstyle="hyperlink"/> method, giving back the returned list as the
      first parameter, see <xref linkend="i3344346"/>.</para>

      <para>For example, assume that all possible resources in the previous
      example can be gotten with the <code>getSortedResources</code> method in
      the preferred resource order. This list contains all installed resources
      as well as any potentially installable resources. This list is sorted
      once on the given ordering criteria, this only has to be done once and
      not for each <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method invocation. The following code, which
      does not order by capability versions, could then be a simple skeleton
      for the <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method on the <code>ResolveContextImpl</code>
      inner class:</para>

      <programlisting>public List&lt;Capability&gt; findProviders(Requirement requirement ) {
  List&lt;Capability&gt; result = new ArrayList&lt;Capability&gt;();

  for ( Resource r : getSortedResources() )
    for ( Capability c : r.getCapabilities( null ) )
      if ( match( requirement, c ) )
          result.add( c );

  return result;
}</programlisting>
    </section>

    <section>
      <title>Matching</title>

      <para>The <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method is responsible for only returning the
      capabilities that the management agent wants to be considered by the
      Resolver. Since the Resolver must never match any requirements to
      capabilities it allows the management agent to fully control the
      matching. However, in an OSGi environment the following matching
      behavior is expected:</para>

      <itemizedlist>
        <listitem>
          <para>Requirements and capabilities must be in the same
          namespace.</para>
        </listitem>

        <listitem>
          <para>Only requirements and capabilities that have no
          <code>effective</code> directive or have the directive set to
          <code>resolve</code> should be considered.</para>
        </listitem>

        <listitem>
          <para>The requirement's filter must match the capability's
          attributes.</para>
        </listitem>

        <listitem>
          <para>If the namespace is an <code>osgi.wiring.*</code> namespace
          then the <code>mandatory</code> directive on the capability must be
          supported. Mandatory attributes are defined with a
          <code>mandatory</code> directive on a capability, they contain a
          list of attribute names. Each of these attributes must be used in
          the filter. Since the filter must be constructed from the
          corresponding manifest header it is sufficient to search the filter
          string with a regular expression that detects the usage of an
          attribute name.</para>
        </listitem>
      </itemizedlist>

      <para>The following example shows a skeleton <code>match</code> method
      that provides OSGi semantics:</para>

      <programlisting>boolean match(Requirement r, Capability c){
  if ( !r.getNamespace().equals( c.getNamespace() ) )
    return false;

  String effective = c.getDirectives().get("effective");
  if ( !(effective == null || effective.equals( "resolve") ) ) 
    return false;

  String f = r.getDirectives().get( "filter" );
  if ( f  != null ) {
    Filter filter = context.createFilter( f );
    if ( !filter.matches( c.getAttributes() ) )
      return false;
  }

  if ( !c.getNamespace().startsWith( "osgi.wiring." ) )
    return true;

  String mandatory = c.getDirectives().get("mandatory");
  if ( mandatory == null)
    return true;

  List&lt;String&gt; attrs = 
    Arrays.asList( mandatory.toLowerCase().split( "\\s*,\\s*") );

  Matcher m = FILTER_ASSERT_PATTERN.matcher( f == null ? "": f );
  while( m.find() )
    attrs.remove(m.group(1)); // the attribute name

  return mandatory.isEmpty();
}</programlisting>
    </section>

    <section>
      <title>Repositories</title>

      <para>Resolving to provision a framework is different than a framework
      resolving itself. During provisioning remote repositories can be
      consulted to find external resources while the framework only resolves a
      limited set (the installed bundles). These repositories generally
      contain magnitudes more bundles than what is installed in a
      framework.</para>

      <para>Repositories do not implement any namespace specific semantics and
      therefore do not understand any directives. Repositories only verify the
      requirement's filter (if any) against the capability's attributes. The
      Resolver expects the Resolve Context to do the namespace specific
      matching. The <xref linkend="service.repository"/> provides the details
      for a service that abstracts a Requirement-Capability aware
      repository.</para>

      <para>With such a repository service the <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method can be implemented as follows:</para>

      <programlisting>List&lt;Repository&gt; repositories = new CopyOnWriteArrayList&lt;Repository&gt;();

void addRepository(  Repository repository) { repositories.add(repository);}
void removeRepository(Repository repository){ repositories.remove(repository);}

public List&lt;Capability&gt; findProviders( Requirement requirement) {
  List&lt;Capability&gt; result = new ArrayList&lt;Capability&gt;();

  // previous findProviders that searches the initial resources

  for ( Repository repository : repositories ) {
     Collection&lt;Capability&gt; capabilities = repository.findProviders(
            Collections.singleton( requirement ) ).get( requirement);
     for ( Capability c : capabilities )
       if ( match( requirement, c ) )
           result.add( c );
  }
  return result;
}</programlisting>
    </section>

    <section>
      <title>Existing Wiring State</title>

      <para>The Resolver service always creates a list of wires that should be
      added to an existing state. To get the existing state, the <xref linkend="org.osgi.service.resolver.ResolveContext" xrefstyle="hyperlink"/> interface specifies the <xref linkend="org.osgi.service.resolver.ResolveContext.getWirings--" xrefstyle="hyperlink"/> method. This method must return the existing
      state as a <code>Map&lt;Resource,Wiring&gt;</code>. A
      <code>Wiring</code> is an object that reflects the wired state of a
      resource in the environment. From this object, all declared and hosted
      capabilities and requirements can be found, including their wires if
      any. The Resolver needs this existing state to create a consistent
      resolution. For example, uses constraints require access to the existing
      state.</para>

      <para>The Resolver service API is based on the generic
      Requirement-Capability model. This API is implemented by the OSGi
      framework to reflect its internal wiring, see <xref linkend="i3335981"/>. When the Resolver service is used for an OSGi
      framework then the Resolve Context can provide the existing wiring state
      based on the Framework Wiring API. The interfaces used in the
      <code>org.osgi.framework.wiring</code> package all extend their
      counterpart in the <code>org.osgi.resource</code> package (the generic
      model). For example, the <code>BundleCapability</code> interface extends
      the <code>Capability</code> interface.</para>

      <para>The framework wiring API models all the power and complexities of
      the OSGi framework. One of those aspects is <emphasis>removal
      pending</emphasis>. Each installed bundle is represented by one or more
      bundle revisions. Each bundle revision is a <code>Resource</code> object
      but only one is the current bundle revision. During a resolve operation
      a framework can actually wire to the current bundle revision but is not
      forbidden to also select the pending removal bundle revisions. The
      Resolve Context must therefore decide if it provides only the current
      bundle revisions or all. The best policy solution in this case is to
      always refresh after a (batch) of install operations and only resolve
      when there are no pending-removal bundle revisions. However, certain
      management agents attempt to manage a system that is in this half-way
      state and will then be required to include the pending-removal
      revisions.</para>

      <para>The following example code shows a possible implementation of the
      <xref linkend="org.osgi.service.resolver.ResolveContext.getWirings--" xrefstyle="hyperlink"/> method. It only uses the current wiring and
      ignores removal pending bundle revisions:</para>

      <programlisting>public Map&lt;Resource,Wiring&gt; getWirings(){
    Map&lt;Resource,Wiring&gt; wirings = new HashMap&lt;Resource,Wiring&gt;();

   for ( Bundle b : context.getBundles() ) {
     BundleRevision revision = b.adapt( BundleRevision.class);
     if ( revision != null ) {
       Wiring wiring = revision.getWiring();
       if ( wiring != null )
           wirings.put( revision, wiring );
     }
   }
   return wirings;
}</programlisting>
    </section>

    <section>
      <title>Effective</title>

      <para>The Resolver service is designed to work with OSGi frameworks but
      the scope is broader; its design allows many alternative usages. The
      <code>effective</code> directive on the capabilities and requirements is
      meant to allow requirements and capabilities to be effective in
      different phases. The default is <code>resolve</code>, the value for an
      OSGi framework resolving process. Bundles and other OSGi defined
      artifacts must declare their capabilities and requirements in the
      <code>resolve</code> effective time to be considered by an OSGi
      resolver.</para>

      <para>However, Resolvers can use the <code>effective</code> directive to
      run the Resolver at other times than the standard OSGi framework
      resolve. For example, it could be possible to define an <emphasis>active
      time</emphasis> to resolve the service dependencies.</para>

      <para>For this reason, the Resolver is designed to be agnostic for this
      directive, it will always ask the <xref linkend="org.osgi.service.resolver.ResolveContext" xrefstyle="hyperlink"/> if a requirement is effective. It does this with
      the <xref linkend="org.osgi.service.resolver.ResolveContext.isEffective-Requirement-" xrefstyle="hyperlink"/> method. Since the Resolver service never matches
      requirements to capabilities it is also up to the Resolve Context to
      decide how to treat the <code>effective</code> directive. For an OSGi
      resolve operation, capabilities should also have an effective time value
      of <code>resolve</code> (or not set since <code>resolve</code> is the
      default).</para>

      <para>To make requirements effective during the resolving of bundles it
      will be necessary to implement the <xref linkend="org.osgi.service.resolver.ResolveContext.isEffective-Requirement-" xrefstyle="hyperlink"/> method similar to:</para>

      <programlisting>public boolean isEffective( Requirement requirement) {
  String e = requirement.getDirectives().get( "effective");
  return e==null || "resolve".equals( e );
}</programlisting>
    </section>

    <section xml:id="i3344346">
      <title>Insert Hosted Capabilities</title>

      <para>One of the complex aspects of resolving for an OSGi framework is
      handling fragments. For fragments, the declared capabilities are going
      to be hosted by their hosts. The <code>Requirement</code> and
      <code>Capability</code> objects have a <code>getResource</code> method
      that returns the associated resource. For hosted capabilities and
      requirements this must be the hosting resource and for others the
      declaring resource.</para>

      <para>The <xref linkend="org.osgi.service.resolver.HostedCapability" xrefstyle="hyperlink"/> interface defines the interface for allowing the
      hosting resource to be returned instead of the declaring resource. Since
      the Resolver service creates these Hosted Capabilities the Resolver
      needs a way to add them to the lists of capabilities returned from <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/>. The Resolver service cannot add them itself
      since this list has a preference order, the Resolver service must
      therefore ask the Resolve Context to insert this new capability to allow
      the Resolve Context to maintain the desired order.</para>

      <para>The Resolve Context must therefore implement an <xref linkend="org.osgi.service.resolver.ResolveContext.insertHostedCapability-List-HostedCapability-" xrefstyle="hyperlink"/> method. The given list must have been returned
      earlier from a <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method invocation. The Resolve Context must find
      the appropriate position to insert the <xref linkend="org.osgi.service.resolver.HostedCapability" xrefstyle="hyperlink"/> object, insert it, and return the index of the
      inserted object.</para>

      <para>It is the responsibility of the Resolve Context to find the proper
      position. In <xref linkend="i3344409"/> it was discussed how the <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method must return an ordered list. The <xref linkend="org.osgi.service.resolver.ResolveContext.insertHostedCapability-List-HostedCapability-" xrefstyle="hyperlink"/> has that same responsibility.</para>

      <para>The following example shows how the Hosted Capability is inserted
      based on the index of the hosted resource's index in the sorted list of
      resources the management agent maintained. The example iterates through
      the capabilities and compares the index of sorted resources to indicate
      preference. If it finds a capability from a resource that was later in
      the list of sorted resources then it inserts it at that position. A real
      implementation should also take the version of the capability into
      account.</para>

      <programlisting>public int insertHostedCapability( 
    List&lt;Capability&gt; caps, HostedCapability hc ) {

    List&lt;Resource&gt; resources = getSortedResources();
    int index = resources.indexOf( hc.getResource() );

    for ( int i =0; i &lt; caps.size(); i++ ) {
        Capability c = caps.get( i );
        int otherIndex = resources.indexOf( c.getResource() );
        if ( otherIndex &gt; index ) {
            caps.add( i, hc );
            return i;
        }
    }
    caps.add( hc );
    return caps.size()-1;
}</programlisting>
    </section>

    <section xml:id="i3347565">
      <title>Fragments</title>

      <para>Fragments are resources that have an <code>osgi.wiring.host</code>
      requirement that must match a capability from one or more host bundles.
      However, for example an Export-Package in a fragment must be merged with
      its attached hosts. These capabilities and requirements from namespaces
      that appear as if they come from the host bundle are called
      <emphasis>hosted</emphasis>.</para>

      <para>Since fragments are not required by the host bundle, there will be
      no resource requiring the fragment bundles. The Resolver will therefore
      never ask the Resolve Context to provide fragments. However, fragments
      will require their hosts. A Resolver should attach any fragments
      available in a resolution to suitable hosts.</para>

      <para>Since fragments will not be discovered from their hosts, it can be
      necessary to run the resolver twice in certain scenarios. The first
      resolve operation finds a resolution that is then used to find fragments
      that could be attached to the included bundles. These fragments can then
      be added to set of mandatory or optional resources for an additional
      resolve operation.</para>

      <para>Fragments can of course also be found by the normal finding of
      capabilities.</para>
    </section>

    <section>
      <title>Singleton Capabilities</title>

      <para>A resource can be marked as a <emphasis>singleton</emphasis>. A
      singleton resource has the <code>singleton</code> directive set to true
      on the <code>osgi.identity</code> capability. A singleton resource
      <emphasis>conflicts</emphasis> with another singleton resource
      if:</para>

      <itemizedlist>
        <listitem>
          <para>They have the same <code>osgi.identity</code>, and</para>
        </listitem>

        <listitem>
          <para>They have the same <code>type</code>, and</para>
        </listitem>

        <listitem>
          <para>They have a different or identical version.</para>
        </listitem>
      </itemizedlist>

      <para>This constraint is not enforced by the Resolver service to give
      more flexibility to management agents. The Resolve Context must ensure
      that it does not return capabilities from conflicting singleton
      resources from the <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method. When the Resolver is used with a limited
      set of resources then it is possible to enumerate all singletons ahead
      of time and use permutations. However, when repositories are used an
      incremental method works better because the scope is so much
      larger.</para>

      <para>When the <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method is called for a requirement that selects
      a capability declared in a singleton then it is likely that repositories
      will return multiple versions of this singleton including the resource
      with the highest available version for conflicting resources. It is
      therefore possible to maintain a white list of singletons
      incrementally.</para>

      <para>Once the <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method has created a result list, it is possible
      to prune this list of conflicting singletons. This can be an incremental
      process, the first time a singleton is encountered in such a list of
      capabilities the highest version can be <emphasis>selected</emphasis> as
      the singleton. Other singletons that are in that list or come in other
      invocations of <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> can then no longer provide capabilities. For
      example:</para>

      <programlisting>    Map&lt;String,Resource&gt; whitelist = new HashMap&lt;String,Resource&gt;();
    
    void prune( List&lt;Capability&gt; list ) {
        Map&lt;String,Resource&gt; singletons = new HashMap&lt;String,Resource&gt;();

        for ( Capability c : list) {
            Resource r = c.getResource();
            Version now = getVersion( r );
            String identity = getIdentity( r );

            if ( isSingleton( r ) &amp;&amp; !whitelist.containsKey(identity ) ) {
                Resource selected = singletons.get( identity );
                if ( selected == null )
                    singletons.put( identity, r );
                else {
                    Version old = getVersion( selected );
                    if ( now.compareTo( old )&gt; 0 )
                        singletons.put( identity, r );
                }
            }
      }

      this.whitelist.putAll( singletons );
        
        for ( Iterator&lt;Capability&gt; i=list.iterator(); i.hasNext();) {
            Capability c = i.next();
            Resource r = c.getResource();
            String identity = getIdentity( r );
            Resource selected = this.whitelist.get( identity );
            if ( selected != null &amp;&amp; !selected.equals( r ))
                i.remove();
        }
  }</programlisting>
    </section>

    <section>
      <title>Diagnostics</title>

      <para>The Resolver service throws a <xref linkend="org.osgi.service.resolver.ResolutionException" xrefstyle="hyperlink"/> when the <code>resolve</code> operation cannot
      find a solution. This Exception provides the standard human readable
      message. However, there is also the <xref linkend="org.osgi.service.resolver.ResolutionException.getUnresolvedRequirements--" xrefstyle="hyperlink"/> method. With this method it is possible to find
      what requirements could not be matched. Though this is very useful in
      many cases it must be realized that resolving is a complicated process.
      It is not possible to establish the exact set of missing requirements
      because any unresolved resolution can have many, different, sets of
      unresolved requirements. This is an intrinsic part of the resolution
      problem. There is also no guarantee that providing capabilities that
      satisfy these requirements will give a successful resolution. There
      could still be other constraints that cannot be satisfied. In general,
      the Resolve Context can already detect any unresolved mandatory
      requirements when it cannot find a matching capability in the <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method.</para>

      <para>That said, the <xref linkend="org.osgi.service.resolver.ResolutionException.getUnresolvedRequirements--" xrefstyle="hyperlink"/> can often point to a potential solution.</para>
    </section>

    <section>
      <title>Complexity</title>

      <para>Implementing a Resolve Context is a non-trivial task that requires
      extensive knowledge of the OSGi framework, especially the module layer.
      Though this section contains numerous code examples, they are not
      sufficient to implement a real Resolve Context since this would require
      too much code for a specification.</para>
    </section>
  </section>

  <section>
    <title>Resolver Service</title>

    <para>The <emphasis>Resolver</emphasis> service is an interface to a
    generic constraint solver based on the
    <emphasis>Require-Capability</emphasis> model defined in <xref linkend="i3333846"/>. This model defines a constraint-solving language
    that is used by the Framework, see <xref linkend="i3333826"/>, to create
    the mesh of class loaders. However, the Resolver service has been designed
    to be useful in solving other types of constraint problems.</para>

    <para>The task of the Resolver is to find a
    <emphasis>resolution</emphasis>. The resolve method returns a
    <emphasis>delta</emphasis> on an <emphasis>existing wiring
    state</emphasis>. The total of existing wiring state and the applied delta
    is the resolution. The delta is a set of wires between requirements and
    capabilities.</para>

    <section>
      <title>Variables</title>

      <para>The <xref linkend="org.osgi.service.resolver.Resolver.resolve-ResolveContext-" xrefstyle="hyperlink"/> method uses a Resolve Context to provide the
      context and parameters of the resolution. During the resolution process
      the Resolver service can callback the Resolve Context to retrieve the
      following information:</para>

      <informaltable>
        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="5*"/>

          <colspec colnum="3" colwidth="6*"/>

          <tbody>
            <row>
              <entry><emphasis>R</emphasis><subscript>m</subscript></entry>

              <entry><code>Collection&lt;Resource&gt;</code></entry>

              <entry><xref linkend="org.osgi.service.resolver.ResolveContext.getMandatoryResources--" xrefstyle="hyperlink"/></entry>
            </row>

            <row>
              <entry><emphasis>R</emphasis><subscript>o</subscript></entry>

              <entry><code>Collection&lt;Resource&gt;</code></entry>

              <entry><xref linkend="org.osgi.service.resolver.ResolveContext.getOptionalResources--" xrefstyle="hyperlink"/></entry>
            </row>

            <row>
              <entry><emphasis>C</emphasis><subscript>env</subscript></entry>

              <entry><code>Map&lt;Requirement,List&lt;Capability&gt;&gt;</code></entry>

              <entry>Combined answers from the <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method</entry>
            </row>

            <row>
              <entry><emphasis>Q</emphasis><subscript>eff</subscript></entry>

              <entry><code>Collection&lt;Requirement&gt;</code></entry>

              <entry>Set of effective requirements as defined by the <xref linkend="org.osgi.service.resolver.ResolveContext.isEffective-Requirement-" xrefstyle="hyperlink"/> method</entry>
            </row>

            <row>
              <entry>X</entry>

              <entry><code>Map&lt;Resource,Wiring&gt;</code></entry>

              <entry>An existing Wiring state, <xref linkend="org.osgi.service.resolver.ResolveContext.getWirings--" xrefstyle="hyperlink"/></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>The Resolver service returns the following:</para>

      <informaltable>
        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="5*"/>

          <colspec colnum="3" colwidth="6*"/>

          <tbody>
            <row>
              <entry><emphasis>D</emphasis></entry>

              <entry><code>Map&lt;Resource,List&lt;Wire&gt;&gt;</code></entry>

              <entry>The resolution, a delta on the existing state</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>The <xref linkend="org.osgi.service.resolver.Resolver.resolve-ResolveContext-" xrefstyle="hyperlink"/> method returns a resolution <code>D</code> that
      is a delta on the existing Wiring state <code>X</code>. It is up to the
      Resolve Context to ensure that the delta <code>D</code> is installed. In
      for example the OSGi framework the framework hooks can be used to guide
      the framework's resolving process.</para>
    </section>

    <section>
      <title>Resolving</title>

      <para>The goal of the Resolver is to provide a set of wires between a
      set of <emphasis>resolved</emphasis> resources. A resource is resolved
      when all its <emphasis>mandatory</emphasis> and
      <emphasis>effective</emphasis> requirements are satisfied by
      capabilities from resolved resources. A Resolver must not return wires
      between resources that have unsatisfied mandatory requirements.</para>

      <para>A <emphasis>mandatory</emphasis> requirement has a
      <code>resolution</code> directive that is not set or that is set to
      <code>mandatory</code>. The <emphasis>effectiveness</emphasis> of a
      requirement is defined by the Resolve Context, a Resolver service must
      call the <xref linkend="org.osgi.service.resolver.ResolveContext.isEffective-Requirement-" xrefstyle="hyperlink"/> method to establish if a requirement is
      effective for a given resolve operation. A Resolver must never create a
      wire from a requirement that is not effective.</para>

      <para>To find a resolution, the Resolver must use the Resolve Context to
      find <emphasis>candidate</emphasis> capabilities for the requirements
      declared in the resources that it needs to resolve. A candidate
      capability is a capability that <emphasis>satisfies</emphasis> the
      requirement. From the perspective of the Resolver service, a requirement
      is satisfied by a capability when that capability is returned from the
      <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method. A Resolver has no alternative way to
      find out if a requirement is satisfied by a capability and must
      therefore not make any assumptions about matching. Any matching rules
      like for example the <code>osgi.wiring.*</code> <code>mandatory</code>
      directive must be implemented by the Resolve Context. A Resolve Context
      must always return the same capabilities during a resolving operation
      when given the same requirement.</para>

      <para>Since the resolver cannot match requirements and capabilities the
      Resolve Context must return capabilities for all possible resources,
      this must include:</para>

      <itemizedlist>
        <listitem>
          <para>The given mandatory resources <emphasis>R</emphasis>
          <subscript>m</subscript></para>
        </listitem>

        <listitem>
          <para>The given optional resources <emphasis>R</emphasis>
          <subscript>o</subscript></para>
        </listitem>

        <listitem>
          <para>The existing Wiring state X</para>
        </listitem>
      </itemizedlist>

      <para>It can include additional resources that were indirectly returned
      through the <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method.</para>

      <para>The existing wiring X provides an existing set of constraints that
      the Resolver service must abide by. It can get this state with the <xref linkend="org.osgi.service.resolver.ResolveContext.getWirings--" xrefstyle="hyperlink"/> method. The purpose of the existing state is to
      ensure that any wires are compatible with existing wiring. For an OSGi
      framework it is crucial that the uses constraints are maintained for the
      resolution, see <xref linkend="i3333826"/>.</para>

      <para>The Resolver service can wire new requirements to existing
      capabilities but it can never create wires for an existing requirement
      from the existing wiring.</para>

      <para>If the Resolver service attaches a hosted resource like a
      fragment, and thereby needs to add new <xref linkend="org.osgi.service.resolver.HostedCapability" xrefstyle="hyperlink"/> objects to a previously returned list from <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> then it must call the Resolve Context's <xref linkend="org.osgi.service.resolver.ResolveContext.insertHostedCapability-List-HostedCapability-" xrefstyle="hyperlink"/> method.</para>

      <para>Fragments can be attached from resolved resources or from
      resources that declare the capabilities returned from <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/>, that is,
      <emphasis>C</emphasis><subscript>env.</subscript></para>

      <para>This specification does not define the detailed rules and
      constraints associated with resolving; these rules are defined in their
      namespaces. An OSGi Resolver service must support at least all
      namespaces defined in <xref linkend="i3332036"/> except for the
      following directives:</para>

      <itemizedlist>
        <listitem>
          <para><code>mandatory</code> - Mandatory attributes on the
          <code>osgi.wiring.*</code> namespaces must be implemented by the
          Resolve Context. The Resolve Context should not return capabilities
          from <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> unless the rules of the OSGi
          <code>mandatory</code> directive are followed.</para>
        </listitem>

        <listitem>
          <para><code>singleton</code> - Singletons are not implemented by the
          Resolver, the Resolve Context must not return capabilities from
          <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> from conflicting singleton resources.</para>
        </listitem>

        <listitem>
          <para><code>effective</code> - The Resolve Context decides what
          requirements are effective in the <xref linkend="org.osgi.service.resolver.ResolveContext.isEffective-Requirement-" xrefstyle="hyperlink"/> method.</para>
        </listitem>
      </itemizedlist>

      <para>A Resolver service must support the uses constraints and any
      applicable rule defined in the <xref linkend="i3333826"/> for the
      <code>osgi.wiring.*</code> namespaces.</para>

      <para>The Resolver must return a delta wiring to the existing state
      (potentially empty) or throw an Exception. The resolution:</para>

      <itemizedlist>
        <listitem>
          <para>Must contain all mandatory resources
          <emphasis>R</emphasis><subscript>m </subscript>as provided by <xref linkend="org.osgi.service.resolver.ResolveContext.getMandatoryResources--" xrefstyle="hyperlink"/>.</para>
        </listitem>

        <listitem>
          <para>Must have all resources resolved.</para>
        </listitem>

        <listitem>
          <para>Must have no wired capabilities that are declared or hosted in
          resources that are not resolved.</para>
        </listitem>

        <listitem>
          <para>Should include optional resources <emphasis>R</emphasis>
          <subscript>o </subscript>as provided by <xref linkend="org.osgi.service.resolver.ResolveContext.getOptionalResources--" xrefstyle="hyperlink"/>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Resolution Exception</title>

      <para>If the Resolver cannot find a solution or it runs into problems
      then it must throw a Resolution Exception, which is a Runtime
      Exception.</para>

      <para>The <xref linkend="org.osgi.service.resolver.ResolutionException" xrefstyle="hyperlink"/> provides the <xref linkend="org.osgi.service.resolver.ResolutionException.getUnresolvedRequirements--" xrefstyle="hyperlink"/> method. If the resolution failed then it is
      possible that this was caused because it failed to find matches for
      certain requirements. The information in this method can be very helpful
      to find a solution that will work, however, there are a number of
      caveats.</para>

      <para>Resolving is an NP-complete problem. For these problems there
      exists no algorithm that can infer a solution from the desired outcome.
      Therefore, the Resolver tries a potential solution and if that solution
      does not match the constraints it will backtrack and attempt another
      solution. An unavoidable aspect of such solutions is that it is
      impossible to pin-point a single failure point if the algorithm fails to
      find a solution, in general the algorithm gives up after having
      exhausted its search space. However, during its search it might have
      been very close to a solution, for example it only missed a single
      requirement, but its final failure missed many requirements.</para>

      <para>The implication is that the reported missing requirements neither
      give a guarantee for a resolution when satisfied nor indicate that this
      is the smallest set of missing requirements.</para>

      <para>Therefore, <xref linkend="org.osgi.service.resolver.ResolutionException.getUnresolvedRequirements--" xrefstyle="hyperlink"/> is intended for human consumption and not for
      automated solutions.</para>
    </section>
  </section>

  <section xml:id="i3331809">
    <title>Security</title>

    <section>
      <title>Resolving</title>

      <para>The Resolver service is a pure function that has no state. The
      Resolve Context maintains the state and is therefore the actor that
      requires most permissions. In general, it will require access to the
      Wiring API and Repositories.</para>

      <para>Since the Resolver requires no external access it does not have to
      be a trusted service. Resolve Contexts that support security must ensure
      that the callbacks are executed in a privileged block.</para>
    </section>

    <section>
      <title>Minimum Implementation Permissions</title>

      <programlisting>PackagePermission[org.osgi.service.resolver,IMPORT]
ServicePermission[...Resolver, REGISTER ]</programlisting>
    </section>

    <section>
      <title>Minimum Using Permissions</title>

      <programlisting>PackagePermission[org.osgi.service.repository,IMPORT]
PackagePermission[org.osgi.service.resolver,IMPORT]
PackagePermission[org.osgi.resource,IMPORT]
PackagePermission[org.osgi.framework.wiring,IMPORT]
PackagePermission[org.osgi.framework.namespaces,IMPORT]
ServicePermission[...Resolver, GET ]
... likely needs AdaptPermissions and ServicePermission[...Repository,GET]</programlisting>
    </section>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.resolver" xml:id="org.osgi.service.resolver" xml:base="../../generated/javadoc/docbook/org.osgi.service.resolver.xml">
   <title>org.osgi.service.resolver</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.resolver-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.resolver-version.number">1.0</edition>
   </info>
   <para>
Resolver Service Package Version 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.resolver; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.resolver; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resolver.HostedCapability">
                  <code>HostedCapability</code>
               </link> - 
A capability hosted by a resource.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resolver.ResolutionException">
                  <code>ResolutionException</code>
               </link> - 
Indicates failure to resolve a set of requirements.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resolver.ResolveContext">
                  <code>ResolveContext</code>
               </link> - 
A resolve context provides resources, options and constraints to the
 potential solution of a <link linkend="org.osgi.service.resolver.Resolver.resolve-ResolveContext-">resolve</link>
 operation.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resolver.Resolver">
                  <code>Resolver</code>
               </link> - 
A resolver service resolves the specified resources in the context supplied
 by the caller.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="HostedCapability" xml:id="org.osgi.service.resolver.HostedCapability">
      <title>public interface HostedCapability<?line-break?> extends Capability</title>
      <para>
A capability hosted by a resource.
 
 </para>
      <para>
 A HostedCapability is a Capability where the <link linkend="org.osgi.service.resolver.HostedCapability.getResource--">getResource()</link> method
 returns a Resource that hosts this Capability instead of declaring it. This
 is necessary for cases where the declaring Resource of a Capability does not
 match the runtime state. For example, this is the case for fragments attached
 to a host. Most fragment declared capabilities and requirements become hosted
 by the host resource. Since a fragment can attach to multiple hosts, a single
 capability can actually be hosted multiple times.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="getDeclaredCapability()" xml:id="org.osgi.service.resolver.HostedCapability.getDeclaredCapability--">
         <title>public Capability getDeclaredCapability()</title>
         <para role="description">
Return the Capability hosted by the Resource.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Capability hosted by the Resource.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getResource()" xml:id="org.osgi.service.resolver.HostedCapability.getResource--">
         <title>public Resource getResource()</title>
         <para role="description">
Return the Resource that hosts this Capability.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Resource that hosts this Capability.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ResolutionException" xml:id="org.osgi.service.resolver.ResolutionException">
      <title>public class ResolutionException<?line-break?> extends Exception</title>
      <para>
Indicates failure to resolve a set of requirements.
 
 </para>
      <para>
 If a resolution failure is caused by a missing mandatory dependency a
 resolver may include any requirements it has considered in the resolution
 exception. Clients may access this set of dependencies via the
 <link linkend="org.osgi.service.resolver.ResolutionException.getUnresolvedRequirements--">getUnresolvedRequirements()</link> method.
 
 </para>
      <para>
 Resolver implementations may extend this class to provide extra state
 information about the reason for the resolution failure.</para>
      <section role="method" xreflabel="ResolutionException(String,Throwable,Collection)" xml:id="org.osgi.service.resolver.ResolutionException.ResolutionException-String-Throwable-Collection-">
         <title>public  ResolutionException(String message,Throwable cause,Collection&lt;Requirement&gt; unresolvedRequirements)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>unresolvedRequirements</title>
            <para>The unresolved mandatory requirements from
        mandatory resources or <code>null</code> if no unresolved requirements
        information is provided.</para>
         </formalpara>
         <para role="description">
Create a <code>ResolutionException</code> with the specified message, cause
 and unresolved requirements.
   </para>
      </section>
      <section role="method" xreflabel="ResolutionException(String)" xml:id="org.osgi.service.resolver.ResolutionException.ResolutionException-String-">
         <title>public  ResolutionException(String message)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The message.</para>
         </formalpara>
         <para role="description">
Create a <code>ResolutionException</code> with the specified message.
   </para>
      </section>
      <section role="method" xreflabel="ResolutionException(Throwable)" xml:id="org.osgi.service.resolver.ResolutionException.ResolutionException-Throwable-">
         <title>public  ResolutionException(Throwable cause)</title>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception.</para>
         </formalpara>
         <para role="description">
Create a <code>ResolutionException</code> with the specified cause.
   </para>
      </section>
      <section role="method" xreflabel="getUnresolvedRequirements()" xml:id="org.osgi.service.resolver.ResolutionException.getUnresolvedRequirements--">
         <title>public Collection&lt;Requirement&gt; getUnresolvedRequirements()</title>
         <para role="description">
Return the unresolved requirements, if any, for this exception.
 
 </para>
         <para>
 The unresolved requirements are provided for informational purposes and
 the specific set of unresolved requirements that are provided after a
 resolve failure is not defined.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A collection of the unresolved requirements for this exception.
         The returned collection may be empty if no unresolved
         requirements information is available.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="ResolveContext" xml:id="org.osgi.service.resolver.ResolveContext">
      <title>public abstract class ResolveContext</title>
      <para>
A resolve context provides resources, options and constraints to the
 potential solution of a <link linkend="org.osgi.service.resolver.Resolver.resolve-ResolveContext-">resolve</link>
 operation.
 
 </para>
      <para>
 Resolve Contexts:
 </para>
      <itemizedlist>
         <listitem>
            <para>Specify the mandatory and optional resources to resolve. The mandatory
 and optional resources must be consistent and correct. For example, they must
 not violate the singleton policy of the implementer.</para>
         </listitem>
         <listitem>
            <para>Provide <link linkend="org.osgi.resource.Capability">capabilities</link> that the Resolver can use to
 satisfy <link linkend="org.osgi.resource.Requirement">requirements</link> via the
 <link linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-">findProviders(Requirement)</link> method</para>
         </listitem>
         <listitem>
            <para>Constrain solutions via the <link linkend="org.osgi.service.resolver.ResolveContext.getWirings--">getWirings()</link> method. A wiring
 consists of a map of existing <link linkend="org.osgi.resource.Resource">resources</link> to <link linkend="org.osgi.resource.Wiring">wiring</link>.</para>
         </listitem>
         <listitem>
            <para>Filter requirements that are part of a resolve operation via the
 <link linkend="org.osgi.service.resolver.ResolveContext.isEffective-Requirement-">isEffective(Requirement)</link>.</para>
         </listitem>
      </itemizedlist>
      <para>
 A resolver may call the methods on the resolve context any number of times
 during a resolve operation using any thread. Implementors should ensure that
 this class is properly thread safe.
 
 </para>
      <para>
 Except for <link linkend="org.osgi.service.resolver.ResolveContext.insertHostedCapability-List-HostedCapability-">insertHostedCapability(List, HostedCapability)</link>, the
 resolve context methods must be <emphasis>idempotent</emphasis>. This means that resources
 must have constant capabilities and requirements and the resolve context must
 return a consistent set of capabilities, wires and effective requirements.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="ResolveContext()" xml:id="org.osgi.service.resolver.ResolveContext.ResolveContext--">
         <title>public  ResolveContext()</title>
         <para/>
      </section>
      <section role="method" xreflabel="findProviders(Requirement)" xml:id="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-">
         <title>public abstract List&lt;Capability&gt; findProviders(Requirement requirement)</title>
         <formalpara role="parameter">
            <title>requirement</title>
            <para>The requirement that a resolver is attempting to
        satisfy. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Find Capabilities that match the given Requirement.
 </para>
         <para>
 The returned list contains <link linkend="org.osgi.resource.Capability">Capability</link> objects where the Resource
 must be the declared Resource of the Capability. The Resolver can then
 add additional <link linkend="org.osgi.service.resolver.HostedCapability">HostedCapability</link> objects with the
 <link linkend="org.osgi.service.resolver.ResolveContext.insertHostedCapability-List-HostedCapability-">insertHostedCapability(List, HostedCapability)</link> method when it,
 for example, attaches fragments. Those <link linkend="org.osgi.service.resolver.HostedCapability">HostedCapability</link> objects
 will then use the host's Resource which likely differs from the declared
 Resource of the corresponding Capability.
 
 </para>
         <para>
 The returned list is in priority order such that the Capabilities with a
 lower index have a preference over those with a higher index. The
 resolver must use the
 <link linkend="org.osgi.service.resolver.ResolveContext.insertHostedCapability-List-HostedCapability-">insertHostedCapability(List, HostedCapability)</link> method to add
 additional Capabilities to maintain priority order. In general, this is
 necessary when the Resolver uses Capabilities declared in a Resource but
 that must originate from an attached host.
 
 </para>
         <para>
 Each returned Capability must match the given Requirement. This means
 that the filter in the Requirement must match as well as any namespace
 specific directives. For example, the mandatory attributes for the
 <code>osgi.wiring.package</code> namespace.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A list of <link linkend="org.osgi.resource.Capability">Capability</link> objects that match the specified
         requirement.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getMandatoryResources()" xml:id="org.osgi.service.resolver.ResolveContext.getMandatoryResources--">
         <title>public Collection&lt;Resource&gt; getMandatoryResources()</title>
         <para role="description">
Return the resources that must be resolved for this resolve context.
 
 </para>
         <para>
 The default implementation returns an empty collection.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A collection of the resources that must be resolved for this
         resolve context. May be empty if there are no mandatory
         resources. The returned collection may be unmodifiable.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getOptionalResources()" xml:id="org.osgi.service.resolver.ResolveContext.getOptionalResources--">
         <title>public Collection&lt;Resource&gt; getOptionalResources()</title>
         <para role="description">
Return the resources that the resolver should attempt to resolve for this
 resolve context. Inability to resolve one of the specified resources will
 not result in a resolution exception.
 
 </para>
         <para>
 The default implementation returns an empty collection.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A collection of the resources that the resolver should attempt to
         resolve for this resolve context. May be empty if there are no
         optional resources. The returned collection may be unmodifiable.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getWirings()" xml:id="org.osgi.service.resolver.ResolveContext.getWirings--">
         <title>public abstract Map&lt;Resource,Wiring&gt; getWirings()</title>
         <para role="description">
Returns the wirings for existing resolved resources.
 
 </para>
         <para>
 For example, if this resolve context is for an OSGi framework, then the
 result would contain all the currently resolved bundles with each
 bundle's current wiring.
 
 </para>
         <para>
 Multiple calls to this method for this resolve context must return the
 same result.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The wirings for existing resolved resources. The returned map is
         unmodifiable.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="insertHostedCapability(List,HostedCapability)" xml:id="org.osgi.service.resolver.ResolveContext.insertHostedCapability-List-HostedCapability-">
         <title>public abstract int insertHostedCapability(List&lt;Capability&gt; capabilities,HostedCapability hostedCapability)</title>
         <formalpara role="parameter">
            <title>capabilities</title>
            <para>The list returned from
        <link linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-">findProviders(Requirement)</link>. Must not be <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>hostedCapability</title>
            <para>The HostedCapability to insert in the specified
        list. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Add a <link linkend="org.osgi.service.resolver.HostedCapability">HostedCapability</link> to the list of capabilities returned from
 <link linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-">findProviders(Requirement)</link>.
 
 </para>
         <para>
 This method is used by the <link linkend="org.osgi.service.resolver.Resolver">Resolver</link> to add Capabilities that are
 hosted by another Resource to the list of Capabilities returned from
 <link linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-">findProviders(Requirement)</link>. This function is necessary to allow
 fragments to attach to hosts, thereby changing the origin of a
 Capability. This method must insert the specified HostedCapability in a
 place that makes the list maintain the preference order. It must return
 the index in the list of the inserted <link linkend="org.osgi.service.resolver.HostedCapability">HostedCapability</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The index in the list of the inserted HostedCapability.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isEffective(Requirement)" xml:id="org.osgi.service.resolver.ResolveContext.isEffective-Requirement-">
         <title>public abstract boolean isEffective(Requirement requirement)</title>
         <formalpara role="parameter">
            <title>requirement</title>
            <para>The Requirement to test. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Test if a given requirement should be wired in the resolve operation. If
 this method returns <code>false</code>, then the resolver should ignore this
 requirement during the resolve operation.
 
 </para>
         <para>
 The primary use case for this is to test the <code>effective</code> directive
 on the requirement, though implementations are free to use any effective
 test.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the requirement should be considered as part of
         the resolve operation.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Resolver" xml:id="org.osgi.service.resolver.Resolver">
      <title>public interface Resolver</title>
      <para>
A resolver service resolves the specified resources in the context supplied
 by the caller.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="resolve(ResolveContext)" xml:id="org.osgi.service.resolver.Resolver.resolve-ResolveContext-">
         <title>public Map&lt;Resource,List&lt;Wire&gt;&gt; resolve(ResolveContext context) throws ResolutionException</title>
         <formalpara role="parameter">
            <title>context</title>
            <para>The resolve context for the resolve operation. Must not be
        <code>null</code>.</para>
         </formalpara>
         <para role="description">
Resolve the specified resolve context and return any new resources and
 wires to the caller.
 
 </para>
         <para>
 The resolver considers two groups of resources:
 </para>
         <itemizedlist>
            <listitem>
               <para>Mandatory - any resource in the
 <link linkend="org.osgi.service.resolver.ResolveContext.getMandatoryResources--">mandatory group</link> must be
 resolved. A failure to satisfy any mandatory requirement for these
 resources will result in throwing a <link linkend="org.osgi.service.resolver.ResolutionException">ResolutionException</link>
               </para>
            </listitem>
            <listitem>
               <para>Optional - any resource in the
 <link linkend="org.osgi.service.resolver.ResolveContext.getOptionalResources--">optional group</link> may be
 resolved. A failure to satisfy a mandatory requirement for a resource in
 this group will not fail the overall resolution but no resources or wires
 will be returned for that resource.</para>
            </listitem>
         </itemizedlist>
         <para>
 The resolve method returns the delta between the start state defined by
 <link linkend="org.osgi.service.resolver.ResolveContext.getWirings--">ResolveContext.getWirings()</link> and the end resolved state. That is,
 only new resources and wires are included.
 
 </para>
         <para>
 The behavior of the resolver is not defined if the specified resolve
 context supplies inconsistent information.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The new resources and wires required to satisfy the specified
         resolve context. The returned map is the property of the caller
         and can be modified by the caller.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ResolutionException</code>– If the resolution cannot be satisfied.   </para>
         </formalpara>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i3333826"><title>Framework Module Layer</title>OSGi
      Core, Chapter 3 Module Layer</bibliomixed>

      <bibliomixed xml:id="i3335981"><title>Framework Wiring API
      (Core)</title>OSGi Core, Chapter 7 Bundle Wiring API
      Specification</bibliomixed>

      <bibliomixed xml:id="i3333846"><title>Framework Resource API
      (Core)</title>OSGi Core, Chapter 6 Resource API
      Specification</bibliomixed>

      <bibliomixed xml:id="i3332036"><title>Framework Namespace
      (Core)</title>OSGi Core, Chapter 8 Framework Namespaces
      Specification</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="137" revision="$Id: b3640995eb23a9d76c40a0173b8ed0bf8b532164 $" version="5" xml:id="service.rest" xml:base="../137/service.rest.xml">
  <title>REST Management Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.rest-version" linkend="org.osgi.service.rest"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>Cloud computing is a continuing trend in the IT industry. Due to its
    service model which embraces dynamism as opposed to masking it, OSGi
    appears to be an ideal base for building scalable and dependable
    applications for the cloud where changes in the deployment, network
    topology, and service availability are the norm rather than the exception.
    One of the possible scenarios for OSGi to be successfully applied to cloud
    computing is using it in a Platform as a Service (PaaS) spirit. Users
    write their bundles and can deploy them to a provided OSGi instance
    running in the cloud. This, however, requires the platform provider to
    expose the OSGi management API to the end user and make them available
    through a network protocol. One of the popular approaches in cloud
    computing to remote communication is the use of RESTful web
    services.</para>

    <para>Representational State Transfer (REST) is the architectural style of
    the world wide web. It can be described as a set of constraints that
    govern the interactions between the main components of the Internet.
    Recently, REST style interaction has gained popularity as a architecture
    for web services (RESTful web services), mainly to overcome the perceived
    complexity and verbosity of SOAP-based web services. This specification
    describes a REST interface for framework management, client-side Java and
    JavaScript APIs, and an extension mechanism through which other bundles
    can contribute their own RESTful management APIs and make them
    discoverable by clients.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Client-Server</emphasis> - A separation of concern
          between the entity responsible for the user-interaction (client) and
          the other entity (server) responsible for data storage. For
          instance, in the original world wide web the browser is the client
          rendering and presenting the content delivered by one or more web
          servers. As a result, web content becomes more portable and content
          providers more scalable.</para>
        </listitem>

        <listitem>
          <para><emphasis>Stateless</emphasis> - State is entirely kept at the
          client side. Therefore, every request must contain all state
          required for the server to accomplish the transaction and deliver
          content. The main rationale behind this design constraint is to
          again improve the scalability since in a pure stateless design the
          server resources are not burdened with maintaining any client state.
          Another perceived advantage is that the failure models of stateless
          interactions is simpler and fault tolerance easier to
          achieve.</para>
        </listitem>

        <listitem>
          <para><emphasis>Cacheable</emphasis> - Content marked as cacheable
          can be temporarily stored and used to immediately answer future
          equivalent requests and improve efficiency and reduce network
          utilization and access latencies. Due to the end-to-end principle,
          caches can be placed where necessary, e.g., at the client
          (forward-proxy), at the server side (backward-proxy), or somewhere
          in-between for example in a content delivery network. Content marked
          as non-cacheable must be freshly retrieved with every request even
          in the presence of caches.</para>
        </listitem>

        <listitem>
          <para><emphasis>Layered</emphasis> - Layering introduces natural
          boundaries to coupling since every layer only accesses the services
          provided by the lower layer and provides services to the next higher
          layer.</para>
        </listitem>

        <listitem>
          <para><emphasis>Uniform Interface</emphasis> - Generality of
          component interfaces provides a natural decoupling of implementation
          and interface. REST furthermore encourages the separation of
          identifiable resources (addressing) and their representation
          (content delivery).</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Resource</emphasis> - A resource is an abstract
          piece of information that can be addressed by a resource identifier.
          The mapping of a resource to a concrete set of entities can vary
          over time.</para>
        </listitem>

        <listitem>
          <para><emphasis>Representation</emphasis> - A representation is a
          sequence of bytes plus associated meta-data that describe the state
          of a resource. The data format of a representation is called the
          media-type. Every concrete representation of a resource is just one
          of arbitrarily many possible representations. The selection of a
          concrete representation of a resource can be made according to the
          media types supported by both the client and the server.</para>
        </listitem>

        <listitem>
          <para><emphasis>REST Management Service</emphasis> - The management
          service exposes a REST API for remotely managing an OSGi framework
          through the network in a lightweight and portable fashion.</para>
        </listitem>

        <listitem>
          <para><emphasis>Client</emphasis> - The client is a machine using
          the management service by issuing REST requests through the network.
          It can do so either directly or indirectly, i.e., through
          client-side libraries using the REST calls internally.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Synopsis</title>

      <para>The manageable entities of an OSGi framework are mapped to
      resources accessible through resource identifiers. These identifiers are
      relative to the (usually externally accessible) root URL of the
      management service. Clients can either discover this root URL or receive
      it through configuration. Subsequently, a client is able to introspect
      the state of the framework and perform management operations.</para>

      <para>The internal state of a framework resource is expressed and
      transmitted as a representation. The format of the representation is
      subject to a mutual agreement between client and management service
      regarding media types commonly supported by both endpoints. This
      specification describes two representation formats: JSON and XML.</para>
    </section>
  </section>

  <section>
    <title>Interacting with the REST Management Service</title>

    <para>The REST Management Service is not a traditional OSGi service and it
    does not appear in the service registry. Its purpose is to expose a
    management interface to clients which can perform operations on the
    framework through a network connection. Therefore, it is ideally suited
    for situations where the user of an OSGi framework does not have direct
    access to the machine it is running on, a typical situation in
    Infrastructure as a Service (IaaS) or Platform as a Service (PaaS).
    However, even in other domains having a lightweight and easily accessible
    management solution can be of benefit, e.g., for embedded devices. The
    advantage of REST is that it uses HTTP and therefore does usually not
    interfere with firewalls. Furthermore, the REST format is easily
    embeddable into client-side scripting technologies like JavaScript and can
    be consumed in web browsers.</para>

    <para>Much of the value of the REST Management Service lies in client-side
    libraries which can use the REST protocol and interact with the OSGi
    framework through the Management Service. Therefore, this specification
    contains API for two clients, a <link linkend="org.osgi.service.rest.client">Java Client API</link> and a <link linkend="service.rest-javascript.api">JavaScript Client API</link>.</para>

    <section xml:id="service.rest-resource.identifiers">
      <title>Resource Identifier Overview</title>

      <para>The REST Management Service comprises of a set of resources that
      can be retrieved and in some cases also modified through REST requests.
      These resources need to be made available under well-defined paths so
      that clients can interact with them. As the initial entry point a client
      receives a URL to the REST Management Service. This can be done, e.g.,
      as part of the creation of a cloud-based OSGi framework, and the precise
      mechanism would be proprietary to the cloud platform used. Relative to
      this URL the client can access the resources through the following
      resource identifiers:</para>

      <programlisting>framework
framework/state
framework/startlevel
framework/bundles

framework/bundles/representations

framework/bundle/{bundleid}
framework/bundle/{bundleid}/state
framework/bundle/{bundleid}/startlevel
framework/bundle/{bundleid}/header
framework/services

framework/services/representations

framework/service/{serviceid}</programlisting>

      <para><code>framework/bundle/0/state</code> is an alias for
      <code>framework/state</code></para>

      <para>Extensions to the REST Management Service can be discovered by
      visiting the Extensions Resource at:</para>

      <programlisting>extensions</programlisting>

      <para>For more details on the extension mechanism see <xref linkend="service.rest-extensions"/></para>
    </section>

    <section xml:id="service.rest-resource.filters">
      <title>Filtering Results</title>

      <para>The <code>bundles</code>, <code>bundles/representations</code>,
      <code>services</code>, and <code>services/representations</code>
      resources allow the use of a query parameter which specifies a filter to
      restrict the result set. The filter expression follows the Core
      Specifications <emphasis>Framework Filter Syntax</emphasis>; see <xref linkend="service.rest-corefilter"/>.</para>

      <para>Filters on services are matched against the service attributes.
      The query parameter is of the form:</para>

      <para><code>framework/services?filter=ldap-filter</code></para>

      <para>Filters on bundles are matched against the attributes of
      capabilities in the respective namespaces. Filters on bundles have the
      form:</para>

      <para><code>framework/bundles?namespace1=ldap-filter1&amp;namespace2=ldap-filter2&amp;...</code></para>

      <para>If multiple capabilities for a given namespace are present, then a
      filter succeeds when one of these capabilities matches. When multiple
      filter expressions across namespaces are given, these are combined with
      the <emphasis>and</emphasis> operator.</para>
    </section>

    <section>
      <title>Content Type Matching</title>

      <para>Resources can present themselves through different representation
      variants. An implementation of this specification must support at least
      the JSON representation and the XML representation of resources. Clients
      can support a subset of representations. Matching the clients
      capabilities to understand certain representation formats with the
      servers supported formats follows the typical HTTP pattern of content
      negotiation and requires the client to set corresponding HTTP Accept
      headers for supported formats in the form of their media types. This
      specification describes the format and media types for representations
      in JSON and XML format in <xref linkend="service.rest-representation"/>.</para>

      <para>Implementations of the REST Management Service offering different
      variants of representations must return the best matching variant based
      on the HTTP accept header. In addition, they must respect the file
      extensions defined for the different media types as specified in the
      respective IETF RFC (e.g., ".xml" as specified in IETF RFC 3032 and
      ".json" as specified in IETF RFC 4627). If a file extension is appended
      to the resource, an implementation must return the variant mandated by
      the file extension provided that it supports this content type.</para>
    </section>
  </section>

  <section>
    <title>Resources</title>

    <para>The framework and its state is mapped to a set of different
    resources. Each resource is accessible through a resource identifier, as
    summarized in <xref linkend="service.rest-resource.identifiers"/>.</para>

    <section>
      <title>Framework Startlevel Resource</title>

      <para><code>framework/startlevel</code></para>

      <para>The startlevel resource represents the active start level of the
      framework. It supports the GET and PUT requests.</para>

      <section>
        <title>GET</title>

        <para>The GET request retrieves a <xref linkend="service.rest-framework.startlevel.representation" xrefstyle="template:%t"/> from the REST management service. The
        request can return the following status codes:</para>

        <itemizedlist>
          <listitem>
            <para>200 (OK): the request has been served successfully and the
            body of the response is a startlevel representation.</para>
          </listitem>

          <listitem>
            <para>406 (NOT ACCEPTABLE): the REST management service does not
            support any of the requested representations.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>PUT</title>

        <para>The PUT request sets the target framework startlevel. The body
        of the request needs to be a <xref linkend="service.rest-framework.startlevel.representation" xrefstyle="template:%t"/>. The request can return the following status
        codes:</para>

        <itemizedlist>
          <listitem>
            <para>204 (NO CONTENT): the request was received and valid. The
            framework will asynchronously start to adjust the framework
            startlevel until the target startlevel has been reached.</para>
          </listitem>

          <listitem>
            <para>415 (UNSUPPORTED MEDIA TYPE): the request had a media type
            that is not supported by the REST management service.</para>
          </listitem>

          <listitem>
            <para>400 (BAD REQUEST): the REST management service received an
            IllegalArgumentException when trying to adjust the framework
            startlevel, e.g., because the requested startlevel was zero or
            negative.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section>
      <title>Bundles Resource</title>

      <para><code>framework/bundles</code></para>

      <para>The bundles resource represents the list of all bundles installed
      on the managed framework. It supports the GET request and two
      syntactically different forms of POST requests which are used to install
      new bundles to the framework.</para>

      <para>Results for this resource can be filtered as described in <xref linkend="service.rest-resource.filters"/>.</para>

      <section>
        <title>GET</title>

        <para>The GET request retrieves a <xref linkend="service.rest-bundle.list.representation" xrefstyle="template:%t"/> from the REST management service. The
        request can return the following status codes:</para>

        <itemizedlist>
          <listitem>
            <para>200 (OK): the request has been served successfully and the
            body of the response is a bundle list representation.</para>
          </listitem>

          <listitem>
            <para>406 (NOT ACCEPTABLE): the REST management service does not
            support any of the requested representations.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section xml:id="service.rest-bundles.post.location">
        <title>POST with Location String</title>

        <para>The POST request installs a new bundle to the managed framework
        and thereby logically appends it to the bundles resource. The new
        bundle to be installed is referenced by a location string which is
        passed as the body of the request. In order to disambiguate the
        request from the other form of POST, the content type must be set to
        text/plain. In practice, the location string is usually a URL. Since
        the framework will use the location retrieving the physical bundle, it
        needs to be accessible from the remotely managed framework and not
        necessarily from the managing client.</para>

        <para>The management service implementation must check if the result
        of the install request matches the requested bundle since the OSGi
        framework will return an existing bundle object as the return value of
        an install call if there was already one with the same location string
        installed. One way of doing it is comparing the last modification
        timestamp. A detected collision is indicated to the requesting clients
        through an error code 409.</para>

        <para>The body of the response is <xref linkend="service.rest-bundle.representation" xrefstyle="template:%t"/>
        of the newly installed bundle. The following status codes can be
        returned:</para>

        <itemizedlist>
          <listitem>
            <para>200 (OK): the bundle has been successfully installed and the
            body of the response contains the URI.</para>
          </listitem>

          <listitem>
            <para>400 (BAD REQUEST): the REST management service received a
            BundleException when trying to install. The body of the message is
            a <xref linkend="service.rest-bundle.exception.representation" xrefstyle="template:%t"/> describing the reason why the
            installation did not succeed.</para>
          </listitem>

          <listitem>
            <para>409 (CONFLICT): there is already a bundle installed with the
            same location string.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section xml:id="service.rest-bundles.post.bundle">
        <title>POST with Bundle</title>

        <para>This variant of the POST request uploads the bundle as the body
        of the request. The media type of the request should be set to
        application/vnd.osgi.bundle which must be supported by all REST
        management services. Implementations are free to accept other media
        types for this request with the exception of text/plain. For instance,
        they can opt to additionally support application/zip or
        application/x-jar.</para>

        <para>Clients should use the HTTP Content-Location field to set a
        bundle location. If no content location is given, REST management
        service implementations must generate a unique location string in
        order to avoid unintended collisions between unrelated bundles.</para>

        <para>The body of the response is <xref linkend="service.rest-bundle.representation" xrefstyle="template:%t"/>
        of the newly installed bundle. The following status codes can be
        returned:</para>

        <itemizedlist>
          <listitem>
            <para>200 (OK): the bundle has been successfully installed and the
            body of the response contains the URI.</para>
          </listitem>

          <listitem>
            <para>400 (BAD REQUEST): the REST management service received a
            BundleException when trying to install. The body of the message is
            a <xref linkend="service.rest-bundle.exception.representation" xrefstyle="template:%t"/> describing the reason why the
            installation did not succeed.</para>
          </listitem>

          <listitem>
            <para>409 (CONFLICT): there is already a bundle installed with the
            same location string.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section>
      <title>Bundles Representations Resource</title>

      <para><code>framework/bundles/representations</code></para>

      <section>
        <title>GET of the Representations</title>

        <para>The <code>bundles</code> resource returns a list of the URIs of
        all bundles installed on the framework. For clients interested in the
        details of multiple bundles there is also the possibility to retrieve
        the bundle representation of each installed bundle with a single
        request through the <emphasis>bundles/representations</emphasis>
        resource.</para>

        <para>The body of the response is a <xref linkend="service.rest-bundle.representations.list.representation" xrefstyle="template:%t"/>. The request can return the following status
        codes:</para>

        <para>Results for this resource can be filtered as described in <xref linkend="service.rest-resource.filters"/>.</para>

        <itemizedlist>
          <listitem>
            <para>200 (OK): the request has been served successfully and the
            body of the response is a bundle list representation.</para>
          </listitem>

          <listitem>
            <para>406 (NOT ACCEPTABLE): the REST management service does not
            support any of the requested representations.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section>
      <title>Bundle Resource</title>

      <para><code>framework/bundle/{bundleid}</code></para>

      <para>The bundle resource represents a single, distinct bundle in the
      system. Hence, it has to be qualified by a bundle id. The resource
      supports the GET, two variants of PUT, and the DELETE requests.</para>

      <section>
        <title>GET</title>

        <para>The GET request retrieves a <xref linkend="service.rest-bundle.representation" xrefstyle="template:%t"/>
        from the REST management service. The request can return the following
        status codes:</para>

        <itemizedlist>
          <listitem>
            <para>200 (OK): the request has been served successfully and the
            body of the response is a bundle representation.</para>
          </listitem>

          <listitem>
            <para>404 (NOT FOUND): there is not bundle with the given bundle
            id.</para>
          </listitem>

          <listitem>
            <para>406 (NOT ACCEPTABLE): the REST management service does not
            support any of the requested representations.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>PUT with Location String</title>

        <para>The PUT request updates the bundle with a new version,
        referenced by a location string which is passed as the body of the
        request. In order to disambiguate the request from the other form of
        PUT, the content type must be set to text/plain. The same rationale
        applies as for <xref linkend="service.rest-bundles.post.location" xrefstyle="template:%t"/> and <xref linkend="service.rest-bundles.post.bundle"/>, if a location string is
        given it must point to a location reachable by the managed framework.
        If no location string is passed as the body of the request, the
        framework will perform an update based on the existing bundle's
        location string.</para>

        <para>The body of the response is <xref linkend="service.rest-bundle.representation" xrefstyle="template:%t"/>
        of the updated bundle. The following status codes can be
        returned:</para>

        <itemizedlist>
          <listitem>
            <para>204 (NO CONTENT): the request was received and valid and the
            framework has issued the update.</para>
          </listitem>

          <listitem>
            <para>400 (BAD REQUEST): the REST management service received a
            BundleException when trying to update. The body of the message is
            a <xref linkend="service.rest-bundle.exception.representation" xrefstyle="template:%t"/> describing the reason why the update did
            not succeed.</para>
          </listitem>

          <listitem>
            <para>404 (NOT FOUND): there is not bundle with the given bundle
            id.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>PUT with Bundle</title>

        <para>The PUT request updates the bundle with a new version, uploaded
        as the body of the request. The media type of the request should be
        set to application/vnd.osgi.bundle which must be supported by all REST
        management services. Implementations are free to accept other media
        types for this request with the exception of text/plain. For instance,
        they can opt to additionally support application/zip or
        application/x-jar.</para>

        <para>The body of the response is <xref linkend="service.rest-bundle.representation" xrefstyle="template:%t"/>
        of the updated bundle. The following status codes can be
        returned:</para>

        <itemizedlist>
          <listitem>
            <para>204 (NO CONTENT): the request was received and valid and the
            framework has issued the update.</para>
          </listitem>

          <listitem>
            <para>400 (BAD REQUEST): the REST management service received a
            BundleException when trying to update. The body of the message is
            a <xref linkend="service.rest-bundle.exception.representation" xrefstyle="template:%t"/> describing the reason why the update did
            not succeed.</para>
          </listitem>

          <listitem>
            <para>404 (NOT FOUND): there is not bundle with the given bundle
            id.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>DELETE</title>

        <para>The DELETE request uninstalls the bundle from the
        framework.</para>

        <para>The body of the response is <xref linkend="service.rest-bundle.representation" xrefstyle="template:%t"/>
        of the uninstalled bundle, where the bundle state will be UNINSTALLED.
        The following status codes can be returned:</para>

        <itemizedlist>
          <listitem>
            <para>204 (NO CONTENT): the request was received and valid and the
            framework has uninstalled the bundle.</para>
          </listitem>

          <listitem>
            <para>400 (BAD REQUEST): the REST management service received a
            BundleException when trying to uninstall. The body of the message
            is a <xref linkend="service.rest-bundle.exception.representation" xrefstyle="template:%t"/> describing the reason why the
            uninstallation did not succeed.</para>
          </listitem>

          <listitem>
            <para>404 (NOT FOUND): there is not bundle with the given bundle
            id.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section>
      <title>Bundle State Resource</title>

      <para><code>framework/bundle/{bundleid}/state</code></para>

      <para>The bundle state resource represents the internal state of an
      installed bundle qualified through its bundle id. It supports the GET
      and PUT requests.</para>

      <section>
        <title>GET</title>

        <para>The GET request retrieves a <xref linkend="service.rest-bundle.state.representation" xrefstyle="template:%t"/> from the REST management service. The
        request can return the following status codes:</para>

        <itemizedlist>
          <listitem>
            <para>200 (OK): the request has been served successfully and the
            body of the response is a bundle state representation.</para>
          </listitem>

          <listitem>
            <para>404 (NOT FOUND): there is not bundle with the given bundle
            id.</para>
          </listitem>

          <listitem>
            <para>406 (NOT ACCEPTABLE): the REST management service does not
            support any of the requested representations.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>PUT</title>

        <para>The PUT request sets the target state for the given bundle. This
        can, e.g., be state=32 for transitioning the bundle to started, or
        state=4 for stopping the bundle and transitioning it to resolved. The
        body of the request needs to be a <xref linkend="service.rest-bundle.state.representation" xrefstyle="template:%t"/>. Not all state transitions are valid. The
        body of the response is the new <xref linkend="service.rest-bundle.state.representation" xrefstyle="template:%t"/>. The request can return the following status
        codes:</para>

        <itemizedlist>
          <listitem>
            <para>200 (OK): the request was received and valid. The framework
            has performed a state change and the new bundle state is contained
            in the body.</para>
          </listitem>

          <listitem>
            <para>400 (BAD REQUEST): the REST management service received a
            BundleException when trying to perform the state transition. The
            body of the message is a <xref linkend="service.rest-bundle.exception.representation" xrefstyle="template:%t"/> describing the reason why the operation
            did not succeed.</para>
          </listitem>

          <listitem>
            <para>402 (PRECONDITION FAILED): the requested target state is not
            reachable from the current bundle state or is not a target state.
            An example such state is the STOPPING state.</para>
          </listitem>

          <listitem>
            <para>404 (NOT FOUND): there is not bundle with the given bundle
            id.</para>
          </listitem>

          <listitem>
            <para>415 (UNSUPPORTED MEDIA TYPE): the request had a media type
            that is not supported by the REST management service.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section>
      <title>Bundle Header Resource</title>

      <para><code>framework/bundle/{bundleid}/header</code></para>

      <para>The bundle header resource represents manifest header of a bundle
      which is qualified by its bundle id. It can only be read through a GET
      request.</para>

      <section>
        <title>GET</title>

        <para>The GET request retrieves a <xref linkend="service.rest-bundle.header.representation" xrefstyle="template:%t"/> from the REST management service. The raw
        header value is used unless an <code>Accept-Language</code> header is
        set on the HTTP request. If multiple accepted languages are set only
        the first is used to localize the header. The request can return the
        following status codes:</para>

        <itemizedlist>
          <listitem>
            <para>200 (OK): the request has been served successfully and the
            body of the response is a bundle header representation.</para>
          </listitem>

          <listitem>
            <para>404 (NOT FOUND): there is not bundle with the given bundle
            id.</para>
          </listitem>

          <listitem>
            <para>406 (NOT ACCEPTABLE): the REST management service does not
            support any of the requested representations.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section>
      <title>Bundle Startlevel Resource</title>

      <para><code>framework/bundle/{bundleid}/startlevel</code></para>

      <para>The bundle startlevel resource represents the start level of the
      bundle qualified by its bundle id. It supports the GET and PUT
      requests.</para>

      <section>
        <title>GET</title>

        <para>The GET request retrieves a <xref linkend="service.rest-bundle.startlevel.representation" xrefstyle="template:%t"/> from the REST management service. The
        request can return the following status codes:</para>

        <itemizedlist>
          <listitem>
            <para>200 (OK): the request has been served successfully and the
            body of the response is a bundle startlevel representation.</para>
          </listitem>

          <listitem>
            <para>404 (NOT FOUND): there is not bundle with the given bundle
            id.</para>
          </listitem>

          <listitem>
            <para>406 (NOT ACCEPTABLE): the REST management service does not
            support any of the requested representations.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>PUT</title>

        <para>The PUT request sets the target bundle startlevel. The body of
        the request needs to be a <xref linkend="service.rest-bundle.startlevel.representation" xrefstyle="template:%t"/>, however only the <code>startLevel</code>
        property is used. The request can return the following status
        codes:</para>

        <itemizedlist>
          <listitem>
            <para>200 (OK): the request was received and valid. The REST
            management service has changed the bundle startlevel according to
            the target value. The body of the response is the new bundle
            startlevel representation.</para>
          </listitem>

          <listitem>
            <para>400 (BAD REQUEST): either the target startlevel state
            involved invalid values, e.g., a startlevel smaller or equal to
            zero and the REST management service got an
            IllegalArgumentException, or the REST management service received
            a BundleException when trying to perform the startlevel change. In
            the latter case, the body of the message is a <xref linkend="service.rest-bundle.exception.representation" xrefstyle="template:%t"/> describing the reason why the operation
            did not succeed.</para>
          </listitem>

          <listitem>
            <para>404 (NOT FOUND): there is not bundle with the given bundle
            id.</para>
          </listitem>

          <listitem>
            <para>415 (UNSUPPORTED MEDIA TYPE): the request had a media type
            that is not supported by the REST management service.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section>
      <title>Services Resource</title>

      <para><code>framework/services</code></para>

      <para>The services resource represents the set of all services available
      on the framework, optionally constrained by a filter expression. It is
      read-only and therefore only supports the GET request.</para>

      <para>Results for this resource can be filtered as described in <xref linkend="service.rest-resource.filters"/>.</para>

      <section>
        <title>GET</title>

        <para>The GET request retrieves a <xref linkend="service.rest-service.list.representation" xrefstyle="template:%t"/> from the REST management service. The
        request can return the following status codes:</para>

        <itemizedlist>
          <listitem>
            <para>200 (OK): the request has been served successfully and the
            body of the response is a service list representation.</para>
          </listitem>

          <listitem>
            <para>400 (BAD REQUEST): the provided filter expression was not
            valid.</para>
          </listitem>

          <listitem>
            <para>406 (NOT ACCEPTABLE): the REST management service does not
            support any of the requested representations.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section>
      <title>Services Representations Resource</title>

      <para><code>framework/services/representations</code></para>

      <section>
        <title>GET of the Representations</title>

        <para>The services resource returns a list of the URIs of all services
        registered on the framework. For clients interested in the details of
        multiple services there is also the possibility to retrieve the
        service representation of each available service with a single request
        through the <emphasis>services/representations</emphasis> resource.
        The body of the response is a <xref linkend="service.rest-service.representations.list.representation" xrefstyle="template:%t"/> from the REST management service. The
        request can return the following status codes:</para>

        <para>Results for this resource can be filtered as described in <xref linkend="service.rest-resource.filters"/>.</para>

        <itemizedlist>
          <listitem>
            <para>200 (OK): the request has been served successfully and the
            body of the response is a service list representation.</para>
          </listitem>

          <listitem>
            <para>400 (BAD REQUEST): the provided filter expression was not
            valid.</para>
          </listitem>

          <listitem>
            <para>406 (NOT ACCEPTABLE): the REST management service does not
            support any of the requested representations.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section>
      <title>Service Resource</title>

      <para><code>framework/service/{serviceid}</code></para>

      <para>The service resource represents a single, distinct service in the
      framework. Hence, it has to be qualified by a service id. Services can
      only be read through the REST Management Service and therefore only
      support the GET request.</para>

      <section>
        <title>GET</title>

        <para>The GET request retrieves a <xref linkend="service.rest-service.representation" xrefstyle="template:%t"/> . The request can return the following
        status codes:</para>

        <itemizedlist>
          <listitem>
            <para>200 (OK): the request has been served successfully and the
            body of the response is a service representation.</para>
          </listitem>

          <listitem>
            <para>404 (NOT FOUND): there is not service with the given service
            id.</para>
          </listitem>

          <listitem>
            <para>406 (NOT ACCEPTABLE): the REST management service does not
            support any of the requested representations.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
  </section>

  <section xml:id="service.rest-representation">
    <title>Representations</title>

    <section xml:id="service.rest-bundle.representation">
      <title>Bundle Representation</title>

      <section>
        <title>JSON</title>

        <para><code>Content-Type:
        application/org.osgi.bundle+json</code></para>

        <programlisting>{
   "id":0,
   "lastModified":1314999275542,
   "state":32,
   "symbolicName":"org.eclipse.osgi",
   "version":"3.7.0.v20110613"
}</programlisting>
      </section>

      <section>
        <title>XML</title>

        <para><code>Content-Type:
        application/org.osgi.bundle+xml</code></para>

        <programlisting>&lt;bundle&gt;
   &lt;id&gt;0&lt;/id&gt;
   &lt;lastModified&gt;1314999275542&lt;/lastModified&gt;
   &lt;state&gt;32&lt;/state&gt;
   &lt;symbolicName&gt;org.eclipse.osgi&lt;/symbolicName&gt;
   &lt;version&gt;3.7.0.v20110613&lt;/version&gt;
&lt;/bundle&gt;</programlisting>
      </section>
    </section>

    <section>
      <title>Bundles Representations</title>

      <section xml:id="service.rest-bundle.list.representation">
        <title>Bundle List Representation</title>

        <section>
          <title>JSON</title>

          <para><code>Content-Type:
          application/org.osgi.bundles+json</code></para>

          <programlisting>{
   [bundleURI, bundleURI, ..., bundleURI]
}</programlisting>
        </section>

        <section>
          <title>XML</title>

          <para><code>Content-Type:
          application/org.osgi.bundles+xml</code></para>

          <programlisting>&lt;bundles&gt;
   &lt;uri&gt;bundleURI&lt;/uri&gt;
   &lt;uri&gt;bundleURI&lt;/uri&gt;
   ...
   &lt;uri&gt;bundleURI&lt;/uri&gt;
&lt;/bundles&gt;</programlisting>
        </section>
      </section>

      <section xml:id="service.rest-bundle.representations.list.representation">
        <title>Bundle Representations List Representation</title>

        <section>
          <title>JSON</title>

          <para><code>Content-Type:
          application/org.osgi.bundles.representations+json</code></para>

          <programlisting>{
    [BUNDLE REPRESENTATION, BUNDLE REPRESENTATION, ..., BUNDLE REPRESENTATION]
}</programlisting>
        </section>

        <section>
          <title>XML</title>

          <para><code>Content-Type:
          application/org.osgi.bundles.representations+xml</code></para>

          <programlisting>&lt;bundles&gt;
   BUNDLE REPRESENTATION
   BUNDLE REPRESENTATION
   ...
   BUNDLE REPRESENTATION
&lt;/bundles&gt;</programlisting>
        </section>
      </section>
    </section>

    <section xml:id="service.rest-bundle.state.representation">
      <title>Bundle State Representation</title>

      <section>
        <title>JSON</title>

        <para><code>Content-Type:
        application/org.osgi.bundlestate+json</code></para>

        <programlisting>{
   "state":32
   "options":1
}</programlisting>

        <para>The options are used in start or stop calls. Valid options
        include, e.g., Bundle.START_TRANSIENT and
        Bundle.START_ACTIVATION_POLICY.</para>
      </section>

      <section>
        <title>XML</title>

        <para><code>Content-Type:
        application/org.osgi.bundlestate+xml</code></para>

        <programlisting>&lt;bundleState&gt;
   &lt;state&gt;32&lt;/state&gt;
   &lt;options&gt;1&lt;/options&gt;
&lt;/bundleState&gt;</programlisting>
      </section>
    </section>

    <section xml:id="service.rest-bundle.header.representation">
      <title>Bundle Header Representation</title>

      <section>
        <title>JSON</title>

        <para><code>Content-Type:
        application/org.osgi.bundleheader+json</code></para>

        <programlisting>{
   key:value,
   key:value,
   ...
   key:value
}</programlisting>
      </section>

      <section>
        <title>XML</title>

        <para><code>Content-Type:
        application/org.osgi.bundleheader+xml</code></para>

        <programlisting>&lt;bundleHeader&gt;
   &lt;entry key="key" value="value"/&gt;
   &lt;entry key="key" value="value"/&gt;
   ...
   &lt;entry key="key" value="value"/&gt;
&lt;bundleHeader&gt;</programlisting>
      </section>
    </section>

    <section xml:id="service.rest-framework.startlevel.representation">
      <title>Framework Startlevel Representation</title>

      <section>
        <title>JSON</title>

        <para><code>Content-Type:
        application/org.osgi.frameworkstartlevel+json</code></para>

        <programlisting>{
    "startLevel":6,
    "initialBundleStartLevel":4
}</programlisting>
      </section>

      <section>
        <title>XML</title>

        <para><code>Content-Type:
        application/org.osgi.frameworkstartlevel+xml</code></para>

        <programlisting>&lt;frameworkStartLevel&gt;
    &lt;startLevel&gt;6&lt;/startLevel&gt;
    &lt;initialBundleStartLevel&gt;4&lt;/initialBundleStartLevel&gt;
&lt;/frameworkStartLevel&gt;</programlisting>
      </section>
    </section>

    <section xml:id="service.rest-bundle.startlevel.representation">
      <title>Bundle Startlevel Representation</title>

      <section>
        <title>JSON</title>

        <para><code>Content-Type:
        application/org.osgi.bundlestartlevel+json</code></para>

        <programlisting>{
   "startLevel":6

   "activationPolicyUsed":true
   "persistentlyStarted":false
}</programlisting>
      </section>

      <section>
        <title>XML</title>

        <para><code>Content-Type:
        application/org.osgi.bundlestartlevel+xml</code></para>

        <programlisting>&lt;bundleStartLevel&gt;
    &lt;startLevel&gt;6&lt;/startLevel&gt;

    &lt;activationPolicyUsed&gt;true&lt;/actiovationPolicyUsed&gt;
    &lt;persistentlyStarted&gt;false&lt;/persistentlyStarted&gt;
&lt;/bundleStartLevel&gt;</programlisting>
      </section>
    </section>

    <section xml:id="service.rest-service.representation">
      <title>Service Representation</title>

      <section>
        <title>JSON</title>

        <para><code>Content-Type:
        application/org.osgi.service+json</code></para>

        <programlisting>{
   "id":10,
   "properties":
   {
      "prop1":"val1",
      "prop2":2.82,
      ...
      "prop3":true
   },
   "bundle":bundleURI,
   "usingBundles":[bundleURI, bundleURI, ... bundleURI]
}</programlisting>

        <para><emphasis>Note:</emphasis> service properties are converted to
        JSON-supported data types where possible: <code>"string"</code>,
        number or boolean <code>(true|false)</code>. If there is no conversion
        to JSON data types is possible the <code>toString()</code> result is
        used as a string value.</para>
      </section>

      <section>
        <title>XML</title>

        <para><code>Content-Type:
        application/org.osgi.service+xml</code></para>

        <programlisting>&lt;service&gt;
   &lt;id&gt;10&lt;/id&gt;
   &lt;properties&gt;
      &lt;property name="prop1" value="val1"/&gt;
      &lt;property name="prop2" type="Float" value="2.82"/&gt;
      ...
      &lt;property name="prop3" type="Boolean" value="true"/&gt;
   &lt;/properties&gt;
   &lt;bundle&gt;bundleURI&lt;/bundle&gt;
   &lt;usingBundles&gt;
      &lt;bundle&gt;bundleURI&lt;/bundle&gt;
      &lt;bundle&gt;bundleURI&lt;/bundle&gt;
      ...
      &lt;bundle&gt;bundleURI&lt;/bundle&gt;
   &lt;/usingBundles&gt;
&lt;/service&gt;</programlisting>

        <para><emphasis>Note:</emphasis> service properties are represented
        using the same method as used for the <code>property</code> XML
        element in the Declarative Services specification, see <xref linkend="service.component-property.properties.elements"/>. Service
        properties that cannot be represented using the supported data types,
        will be represented as String values obtained via the
        <code>toString()</code> method.</para>
      </section>
    </section>

    <section>
      <title>Services Representations</title>

      <section xml:id="service.rest-service.list.representation">
        <title>Service List Representation</title>

        <section>
          <title>JSON</title>

          <para><code>Content-Type:
          application/org.osgi.services+json</code></para>

          <programlisting>{
   [serviceURI, serviceURI, ..., serviceURI]
}</programlisting>
        </section>

        <section>
          <title>XML</title>

          <para><code>Content-Type:
          application/org.osgi.services+xml</code></para>

          <programlisting>&lt;services&gt;
   &lt;uri&gt;serviceURI&lt;/uri&gt;
   &lt;uri&gt;serviceURI&lt;/uri&gt;
   ...
   &lt;uri&gt;serviceURI&lt;/uri&gt;
&lt;/services&gt;</programlisting>
        </section>
      </section>

      <section xml:id="service.rest-service.representations.list.representation">
        <title>Service Representations List Representation</title>

        <section>
          <title>JSON</title>

          <para><code>Content-Type:
          org.osgi.services.representations+json</code></para>

          <programlisting>{
   [SERVICE REPRESENTATION, SERVICE REPRESENTATION, ..., SERVICE REPRESENTATION]
}</programlisting>
        </section>

        <section>
          <title>XML</title>

          <para><code>Content-Type:
          application/org.osgi.services.representations+xml</code></para>

          <programlisting>&lt;services&gt;
   SERVICE REPRESENTATION
   SERVICE REPRESENTATION
   ...
   SERVICE REPRESENTATION
&lt;/services&gt;</programlisting>
        </section>
      </section>
    </section>

    <section xml:id="service.rest-bundle.exception.representation">
      <title>Bundle Exception Representation</title>

      <section>
        <title>JSON</title>

        <para><code>Content-Type:
        application/org.osgi.bundleexception+json</code></para>

        <programlisting>{
   "typecode": 5,
   "message": "BundleException: Bundle activation error"
}</programlisting>
      </section>

      <section>
        <title>XML</title>

        <para><code>Content-Type:
        application/org.osgi.bundleexception+xml</code></para>

        <programlisting>&lt;bundleexception&gt;
   &lt;typecode&gt;5&lt;/typecode&gt;
   &lt;message&gt;BundleException: Bundle activation error&lt;/message&gt;
&lt;/bundleexception&gt;</programlisting>
      </section>
    </section>
  </section>

  <section>
    <title>Clients</title>

    <para>The REST service can be used by a variety of clients directly. In
    addition this specification describes Client APIs built over this REST
    protocol to facilitate use from Java and JavaScript clients.</para>

    <section>
      <title>Java Client</title>

      <para>The Java Client provides a Java API over the REST API providing a
      convenient and portable way to use this API from a Java
      application.</para>

      <para>To use the Java Client, obtain the <xref linkend="org.osgi.service.rest.client.RestClientFactory" xrefstyle="hyperlink"/> service. Create a client by providing the root
      URL of the REST service, for example: <programlisting>RestClientFactory restClientFactory = ... // from Service Registry
RestClient restClient = restClientFactory.createRestClient(
    new URI("http://localhost:8080/restendpoint"));

// Now we can start interacting
Collection&lt;String&gt; bundles = restClient.getBundlePaths();
BundleDTO newBundle = restClient.installBundle(bundleLocation, bundleStream);
restClient.startBundle(newBundle.id);</programlisting></para>

      <para>The more details on the Java Client can be found in the <xref linkend="org.osgi.service.rest.client" xrefstyle="hyperlink"/> API
      documentation section.</para>
    </section>

    <section>
      <title>JavaScript Client</title>

      <para>This specification also describes a JavaScript client to the REST
      Management service. This client makes it easy to manage an OSGi
      framework from any JavaScript environment, including Web
      Browsers.</para>

      <para>The JavaScript client follows the <emphasis>promises</emphasis>
      programming style; the request is made asynchronously and a
      <code>success()</code> or <code>failure()</code> callback is made when
      the response arrives.</para>

      <para>To use the JavaScript client create an instance of
      <code>OSGiRestClient</code> providing the root URL of the REST service.
      <programlisting>var client = new OSGiRestClient('http://localhost:8080/restendpoint');
client.installBundle({
  success : function(res) {
    // Start the bundle once the install has finished
    client.startBundle(res.id);
  },
  failure : function(httpCode, res) {
    // handle failure
  }
});</programlisting></para>

      <para>More details on the JavaScript Client can be found in the <xref linkend="service.rest-javascript.api" xrefstyle="hyperlink"/> API
      documentation section.</para>
    </section>
  </section>

  <section xml:id="service.rest-extensions">
    <title>Extending the REST Management Service</title>

    <para>This specification describes a REST-based management interface for
    Core Framework functionality. Other services in the framework might also
    benefit from management access through REST. This can involve services
    specified by the OSGi Alliance as part of the Core Framework, Compendium,
    or Enterprise Specifications but also application-specific functionality
    provided by the developer. It is desirable to expose such management
    services as extensions of the REST Management Service.</para>

    <para>This REST service can be implemented by using various technologies
    such as Java Servlets, Restlet, JAX-RS, and others. Therefore, it might
    not always be possible to integrate extensions at the implementation level
    because they might use other underlying technologies to implement their
    REST interface. Defining a format for delegating requests between the REST
    Management Service and extensions would furthermore necessarily expose
    implementation details and is therefore not feasible either. As a
    consequence, this specification only describes how to logically integrate
    extensions with the REST Management Service. Implementations of this
    specification might offer mechanisms for tighter integration for the case
    that extensions are developed using the same underlying technology.</para>

    <para>The main purpose of the extension mechanism is to advertise
    extensions to the core REST implementation, which makes them discoverable
    for clients. This mechanism can be used to check if a REST interface
    exists for a specific service. This is done through the <xref linkend="service.rest-extensions.resource" xrefstyle="template:%t"/> which
    contains a description and a path for every extension currently available.
    Implementations that want to contribute their extensions to the REST
    Management Service can do so by registering the <xref linkend="org.osgi.service.rest.RestApiExtension" xrefstyle="hyperlink"/>
    service using the <xref linkend="service.rest-whiteboard.pattern.ref"/>.
    The extension interface is only a marker and the relevant information is
    exposed through the <xref linkend="org.osgi.service.rest.RestApiExtension.NAME" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.rest.RestApiExtension.URI_PATH" xrefstyle="hyperlink"/> and optionally <xref linkend="org.osgi.service.rest.RestApiExtension.SERVICE" xrefstyle="hyperlink"/> properties. Note that it is the responsibility of
    the extension to ensure that the endpoint announced via the
    <code>RestApiExtension</code> service is actually present. The Whiteboard
    service does not realize the extension endpoint; it purely announces it to
    the main REST implementation for inclusion in the Extensions
    Resource.</para>

    <para>In order to be discoverable REST interface extensions to OSGi Core,
    Compendium, or Enterprise services must use their canonical package name
    as advertised name. E.g., the name of the REST interface for the User
    Admin must be <code>org.osgi.service.useradmin</code>. This way, a client
    is able to check if there is a given extension available on a host.
    User-defined extensions should use the package name of the service they
    provide management capabilities for.</para>

    <section xml:id="service.rest-extensions.resource">
      <title>Extensions Resource</title>

      <para><code>extensions</code></para>

      <para>The extensions resource enumerates all extensions currently
      registered through the Whiteboard Pattern. It is read-only and therefore
      only supports the GET request.</para>

      <section>
        <title>GET</title>

        <para>The GET request retrieves a <xref linkend="service.rest-extensions.representation" xrefstyle="template:%t"/> . The request can return the following
        status codes:</para>

        <itemizedlist>
          <listitem>
            <para>200 (OK): the request has been served successfully and the
            body of the response is a extension list representation.</para>
          </listitem>

          <listitem>
            <para>406 (NOT ACCEPTABLE): the REST management service does not
            support any of the requested representations.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section xml:id="service.rest-extensions.representation">
      <title>Extensions Representation</title>

      <section>
        <title>JSON</title>

        <para><code>Content-Type:
        application/org.osgi.extensions+json</code></para>

        <programlisting>{ 
   [ { "name" : "org.osgi.service.event", "path" : "contributions/eventadmin", 
       "service" : 12 }, ... ]
}</programlisting>
      </section>

      <section>
        <title>XML</title>

        <para><code>Content-Type:
        application/org.osgi.extensions+xml</code></para>

        <programlisting>&lt;extensions&gt;
   &lt;extension&gt;
      &lt;name&gt;org.osgi.service.event&lt;/name&gt;
      &lt;path&gt;contributions/eventadmin&lt;/path&gt;
      &lt;service&gt;12&lt;/service&gt;
   &lt;/extension&gt;
&lt;/extensions&gt;</programlisting>
      </section>
    </section>
  </section>

  <section>
    <title>XML Schema</title>

    <para>The namespace for XML representations is:</para>

    <programlisting>http://www.osgi.org/xmlns/rest/v1.0.0</programlisting>

    <para>The recommended prefix for this namespace is
    <code>rest</code>.</para>

    <programlisting role="pgwide">&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"
    xmlns:rest="http://www.osgi.org/xmlns/rest/v1.0.0"
    targetNamespace="http://www.osgi.org/xmlns/rest/v1.0.0"
    elementFormDefault="unqualified"
    attributeFormDefault="unqualified"
    version="1.0.0"&gt;

    &lt;annotation&gt;
        &lt;documentation xml:lang="en"&gt;
            This is the XML Schema for
            XML representations used by
            the REST Management Service
            Specification.
        &lt;/documentation&gt;
    &lt;/annotation&gt;

    &lt;element name="bundle" type="rest:Tbundle"&gt;
        &lt;annotation&gt;
            &lt;documentation xml:lang="en"&gt;
                Representation for the
                application/org.osgi.bundle+xml content type.
            &lt;/documentation&gt;
        &lt;/annotation&gt;
    &lt;/element&gt;
    &lt;complexType name="Tbundle"&gt;
        &lt;all&gt;
            &lt;element name="id" type="long" /&gt;
            &lt;element name="lastModified" type="long" /&gt;
            &lt;element name="state" type="integer" /&gt;
            &lt;element name="symbolicName" type="string" /&gt;
            &lt;element name="version" type="string" /&gt;
        &lt;/all&gt;
    &lt;/complexType&gt;

    &lt;element name="bundles" type="rest:Tbundles"&gt;
        &lt;annotation&gt;
            &lt;documentation xml:lang="en"&gt;
                Representation for the
                application/org.osgi.bundles+xml and
                application/org.osgi.bundles.representations+xml content
                types.
            &lt;/documentation&gt;
        &lt;/annotation&gt;
    &lt;/element&gt;
    &lt;complexType name="Tbundles"&gt;
        &lt;choice&gt;
            &lt;element name="uri" type="string" minOccurs="0"
                maxOccurs="unbounded"&gt;
                &lt;annotation&gt;
                    &lt;documentation xml:lang="en"&gt;
                        Representation for the
                        application/org.osgi.bundles+xml content type.
                    &lt;/documentation&gt;
                &lt;/annotation&gt;
            &lt;/element&gt;
            &lt;element name="bundle" type="rest:Tbundle"
                minOccurs="0" maxOccurs="unbounded"&gt;
                &lt;annotation&gt;
                    &lt;documentation xml:lang="en"&gt;
                        Representation for the
                        application/org.osgi.bundles.representations+xml
                        content type.
                    &lt;/documentation&gt;
                &lt;/annotation&gt;
            &lt;/element&gt;
        &lt;/choice&gt;
    &lt;/complexType&gt;

    &lt;element name="bundleState" type="rest:TbundleState"&gt;
        &lt;annotation&gt;
            &lt;documentation xml:lang="en"&gt;
                Representation for the
                application/org.osgi.bundlestate+xml content type.
            &lt;/documentation&gt;
        &lt;/annotation&gt;
    &lt;/element&gt;
    &lt;complexType name="TbundleState"&gt;
        &lt;all&gt;
            &lt;element name="state" type="integer" /&gt;
            &lt;element name="options" type="integer" /&gt;
        &lt;/all&gt;
    &lt;/complexType&gt;

    &lt;element name="bundleHeader" type="rest:TbundleHeader"&gt;
        &lt;annotation&gt;
            &lt;documentation xml:lang="en"&gt;
                Representation for the
                application/org.osgi.bundleheader+xml content type.
            &lt;/documentation&gt;
        &lt;/annotation&gt;
    &lt;/element&gt;
    &lt;complexType name="TbundleHeader"&gt;
        &lt;sequence&gt;
            &lt;element name="entry" minOccurs="0" maxOccurs="unbounded"&gt;
                &lt;complexType&gt;
                    &lt;attribute name="key" type="string" use="required" /&gt;
                    &lt;attribute name="value" type="string" use="required" /&gt;
                &lt;/complexType&gt;
            &lt;/element&gt;
        &lt;/sequence&gt;
    &lt;/complexType&gt;

    &lt;element name="frameworkStartLevel" type="rest:TframeworkStartLevel"&gt;
        &lt;annotation&gt;
            &lt;documentation xml:lang="en"&gt;
                Representation for the
                application/org.osgi.frameworkstartlevel+xml content
                type.
            &lt;/documentation&gt;
        &lt;/annotation&gt;
    &lt;/element&gt;
    &lt;complexType name="TframeworkStartLevel"&gt;
        &lt;all&gt;
            &lt;element name="startLevel" type="integer" /&gt;
            &lt;element name="initialBundleStartLevel" type="integer" /&gt;
        &lt;/all&gt;
    &lt;/complexType&gt;

    &lt;element name="bundleStartLevel" type="rest:TbundleStartLevel"&gt;
        &lt;annotation&gt;
            &lt;documentation xml:lang="en"&gt;
                Representation for the
                application/org.osgi.bundlestartlevel+xml content type.
            &lt;/documentation&gt;
        &lt;/annotation&gt;
    &lt;/element&gt;
    &lt;complexType name="TbundleStartLevel"&gt;
        &lt;all&gt;
            &lt;element name="startLevel" type="integer" /&gt;
            &lt;element name="activationPolicyUsed" type="boolean" /&gt;
            &lt;element name="persistentlyStarted" type="boolean" /&gt;
        &lt;/all&gt;
    &lt;/complexType&gt;

    &lt;element name="service" type="rest:Tservice"&gt;
        &lt;annotation&gt;
            &lt;documentation xml:lang="en"&gt;
                Representation for the
                application/org.osgi.service+xml content type.
            &lt;/documentation&gt;
        &lt;/annotation&gt;
    &lt;/element&gt;
    &lt;complexType name="Tservice"&gt;
        &lt;all&gt;
            &lt;element name="id" type="long" /&gt;
            &lt;element name="properties"&gt;
                &lt;complexType&gt;
                    &lt;sequence&gt;
                        &lt;element name="property" minOccurs="0"
                            maxOccurs="unbounded"&gt;
                            &lt;complexType&gt;
                                &lt;simpleContent&gt;
                                    &lt;extension base="string"&gt;
                                        &lt;attribute name="name"
                                            type="string" use="required" /&gt;
                                        &lt;attribute name="value"
                                            type="string" use="optional" /&gt;
                                        &lt;attribute name="type"
                                            default="String" use="optional"&gt;
                                            &lt;simpleType&gt;
                                                &lt;restriction
                                                    base="string"&gt;
                                                    &lt;enumeration
                                                        value="String" /&gt;
                                                    &lt;enumeration
                                                        value="Long" /&gt;
                                                    &lt;enumeration
                                                        value="Double" /&gt;
                                                    &lt;enumeration
                                                        value="Float" /&gt;
                                                    &lt;enumeration
                                                        value="Integer" /&gt;
                                                    &lt;enumeration
                                                        value="Byte" /&gt;
                                                    &lt;enumeration
                                                        value="Character" /&gt;
                                                    &lt;enumeration
                                                        value="Boolean" /&gt;
                                                    &lt;enumeration
                                                        value="Short" /&gt;
                                                &lt;/restriction&gt;
                                            &lt;/simpleType&gt;
                                        &lt;/attribute&gt;
                                    &lt;/extension&gt;
                                &lt;/simpleContent&gt;
                            &lt;/complexType&gt;
                        &lt;/element&gt;
                    &lt;/sequence&gt;
                &lt;/complexType&gt;
            &lt;/element&gt;
            &lt;element name="bundle" type="string" /&gt;
            &lt;element name="usingBundles"&gt;
                &lt;complexType&gt;
                    &lt;sequence&gt;
                        &lt;element name="bundle" type="string"
                            minOccurs="0" maxOccurs="unbounded" /&gt;
                    &lt;/sequence&gt;
                &lt;/complexType&gt;
            &lt;/element&gt;
        &lt;/all&gt;
    &lt;/complexType&gt;

    &lt;element name="services" type="rest:Tservices"&gt;
        &lt;annotation&gt;
            &lt;documentation xml:lang="en"&gt;
                Representation for the
                application/org.osgi.services+xml and
                application/org.osgi.services.representations+xml
                content types.
            &lt;/documentation&gt;
        &lt;/annotation&gt;
    &lt;/element&gt;
    &lt;complexType name="Tservices"&gt;
        &lt;choice&gt;
            &lt;element name="uri" type="string" minOccurs="0"
                maxOccurs="unbounded"&gt;
                &lt;annotation&gt;
                    &lt;documentation xml:lang="en"&gt;
                        Representation for the
                        application/org.osgi.services+xml content type.
                    &lt;/documentation&gt;
                &lt;/annotation&gt;
            &lt;/element&gt;
            &lt;element name="service" type="rest:Tservice"
                minOccurs="0" maxOccurs="unbounded"&gt;
                &lt;annotation&gt;
                    &lt;documentation xml:lang="en"&gt;
                        Representation for the
                        application/org.osgi.services.representations+xml
                        content type.
                    &lt;/documentation&gt;
                &lt;/annotation&gt;
            &lt;/element&gt;
        &lt;/choice&gt;
    &lt;/complexType&gt;

    &lt;element name="bundleexception" type="rest:Tbundleexception"&gt;
        &lt;annotation&gt;
            &lt;documentation xml:lang="en"&gt;
                Representation for the
                application/org.osgi.bundleexception+xml content type.
            &lt;/documentation&gt;
        &lt;/annotation&gt;
    &lt;/element&gt;
    &lt;complexType name="Tbundleexception"&gt;
        &lt;all&gt;
            &lt;element name="typecode" type="integer" /&gt;
            &lt;element name="message" type="string" /&gt;
        &lt;/all&gt;
    &lt;/complexType&gt;

    &lt;element name="extensions" type="rest:Textensions"&gt;
        &lt;annotation&gt;
            &lt;documentation xml:lang="en"&gt;
                Representation for the
                application/org.osgi.extensions+xml content type.
            &lt;/documentation&gt;
        &lt;/annotation&gt;
    &lt;/element&gt;
    &lt;complexType name="Textensions"&gt;
        &lt;sequence&gt;
            &lt;element name="extension" minOccurs="0" maxOccurs="unbounded"&gt;
                &lt;complexType&gt;
                    &lt;all&gt;
                        &lt;element name="name" type="string" /&gt;
                        &lt;element name="path" type="string" /&gt;
                        &lt;element name="service" type="long" minOccurs="0" /&gt;
                    &lt;/all&gt;
                &lt;/complexType&gt;
            &lt;/element&gt;
        &lt;/sequence&gt;
    &lt;/complexType&gt;
&lt;/schema&gt;
</programlisting>

    <para>The schema is also available in digital form from <xref linkend="service.rest-reference.xml.schemas"/>.</para>
  </section>

  <section>
    <title>Capabilities</title>

    <section>
      <title>osgi.implementation Capability</title>

      <para>An implementation of this specification must provide the <link linkend="service.namespaces-osgi.implementation.namespace"><code>osgi.implementation</code></link>
      capability with name <code>osgi.rest</code>. This capability can be used
      by provisioning tools and during resolution to ensure that a REST
      Management implementation is present to handle REST requests defined in
      this specification. The capability must also declare a uses constraint
      on the <code>org.osgi.service.rest</code> package:</para>

      <programlisting>Provide-Capability: osgi.implementation;
  osgi.implementation="osgi.rest";
  uses:="org.osgi.service.rest";
  version:Version="1.0"</programlisting>

      <para>This capability must follow the rules defined for the <xref linkend="service.namespaces-osgi.implementation.namespace"/>.</para>
    </section>

    <section>
      <title>osgi.service Capability</title>

      <para>A bundle providing the <xref linkend="org.osgi.service.rest.client.RestClientFactory" xrefstyle="hyperlink"/> service as described by this specification must
      inform tools about this service by providing the <link linkend="service.namespaces-osgi.service.namespace"><code>osgi.service</code></link>
      capability representing this service. This capability must also declare
      a uses constraint for the <code>org.osgi.service.rest.client</code>
      package:</para>

      <programlisting>Provide-Capability: osgi.service;
  objectClass:List&lt;String&gt;="org.osgi.service.rest.client.RestClientFactory";
  uses:="org.osgi.service.rest.client"</programlisting>

      <para>This capability must follow the rules defined for the <xref linkend="service.namespaces-osgi.service.namespace"/>.</para>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>Like any externally visible management interface, the REST interface
    exposes privileged operations and hence requires access control. Since
    REST builds upon the HTTP(s) protocol, authentication mechanisms and
    encryption can be applied the same way as usually done for web servers:
    they can be layered below the REST protocol. E.g., confidentiality of the
    transmitted commands can be ensured by using HTTPS as the underlying
    transport. Authentication can be added by requiring, e.g., basic
    authentication prior to accepting a REST command. The REST interface
    should only be implemented by a trusted bundle. Implementations of this
    specification require all Admin Permissions and all Service
    Permissions.</para>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.rest" xml:id="org.osgi.service.rest" xml:base="../../generated/javadoc/docbook/org.osgi.service.rest.xml">
   <title>org.osgi.service.rest</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.rest-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.rest-version.number">1.0</edition>
   </info>
   <para>
Rest Service Package Version 1.0.
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.rest.RestApiExtension">
                  <code>RestApiExtension</code>
               </link> - 
Marker interface for registering extensions to the Rest API service.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="RestApiExtension" xml:id="org.osgi.service.rest.RestApiExtension">
      <title>public interface RestApiExtension</title>
      <para>
Marker interface for registering extensions to the Rest API service.
 
 </para>
      <para>
 The REST service provides a RESTful interface to clients that need to manage
 an OSGi framework through a network connection. Other components running
 on the same framework can contribute their own specific REST
 interface and make it available and discoverable by registering this marker
 service using the Whiteboard pattern.
 </para>
      <para>
 Integration of third-party REST interfaces with the framework REST service on
 the implementation level might not always be possible since it requires
 knowledge about the underlying implementation and an extension mechanism on
 that level. Specific technologies such as servlets might support
 this but the REST service could as well be implemented without the use of a
 supporting abstraction layer and not offer extensibility.
 </para>
      <para>
 Using this marker service, the REST service includes the advertised service
 in the Extensions Resource, allowing clients to discover it and 
 use the extension's functionality.
 </para>
      <section role="field" xreflabel="NAME" xml:id="org.osgi.service.rest.RestApiExtension.NAME">
         <title>public static final String NAME = "org.osgi.rest.name"</title>
         <para>
This service property describes the package name of the technology 
 manageable by this REST API extension. Services specified in OSGi
 specifications must use their canonical package name as the name.
 Third-party technologies should also use their package names. The type of this
 property is <code>java.lang.String</code> and the property is mandatory.
   </para>
      </section>
      <section role="field" xreflabel="SERVICE" xml:id="org.osgi.service.rest.RestApiExtension.SERVICE">
         <title>public static final String SERVICE = "org.osgi.rest.service"</title>
         <para>
This service property refers to the id of the service the REST API
 extension provides management capabilities for. This can be useful if more
 than one service of a given type is present in the framework. For example
 if more than one Http Service is available this property is used to 
 associate a REST extension managing the Http Service with a specific 
 service instance.
 The type of the property is
 <code>java.lang.Long</code> and the property is optional; if the REST
 extension is not directly associated with a service in the service 
 registry, the property should not be set.
   </para>
      </section>
      <section role="field" xreflabel="URI_PATH" xml:id="org.osgi.service.rest.RestApiExtension.URI_PATH">
         <title>public static final String URI_PATH = "org.osgi.rest.uri.path"</title>
         <para>
This service property describes a URI to the REST extension on this local
 machine. It is either an fully qualified URI with a different port if no
 integration with the framework REST service is possible or a relative URI
 implicitly using the same port if integration is possible. 
 The type of this property is
 <code>java.lang.String</code> and the property is mandatory.
   </para>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.service.rest.client" xml:id="org.osgi.service.rest.client" xml:base="../../generated/javadoc/docbook/org.osgi.service.rest.client.xml">
   <title>org.osgi.service.rest.client</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.rest.client-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.rest.client-version.number">1.0</edition>
   </info>
   <para>
Rest Service Client Package Version 1.0.
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.rest.client.RestClient">
                  <code>RestClient</code>
               </link> - 
A Java client API for a REST service endpoint.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.rest.client.RestClientFactory">
                  <code>RestClientFactory</code>
               </link> - 
Factory to construct new REST client instances.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="RestClient" xml:id="org.osgi.service.rest.client.RestClient">
      <title>public interface RestClient</title>
      <para>
A Java client API for a REST service endpoint.
 
 </para>
      <para>
 Provides a Java client API for accessing and managing a remote OSGi framework
 through the REST API. Implementations of this interface will usually take the
 URL to the remote REST Management Service instance as an argument in their
 constructor. Further arguments might be needed, for example, if the cloud
 provider requires URL signing.</para>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="getBundle(long)" xml:id="org.osgi.service.rest.client.RestClient.getBundle-long-">
         <title>public BundleDTO getBundle(long id) throws Exception</title>
         <formalpara role="parameter">
            <title>id</title>
            <para>Addresses the bundle by its identifier.</para>
         </formalpara>
         <para role="description">
Retrieve the bundle representation for a given bundle Id.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <link linkend="org.osgi.framework.dto.BundleDTO">BundleDTO</link> for the requested bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getBundle(String)" xml:id="org.osgi.service.rest.client.RestClient.getBundle-String-">
         <title>public BundleDTO getBundle(String bundlePath) throws Exception</title>
         <formalpara role="parameter">
            <title>bundlePath</title>
            <para>Addresses the bundle by its URI path.</para>
         </formalpara>
         <para role="description">
Retrieve the bundle representation for a given bundle path.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <link linkend="org.osgi.framework.dto.BundleDTO">BundleDTO</link> for the requested bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getBundleHeaders(long)" xml:id="org.osgi.service.rest.client.RestClient.getBundleHeaders-long-">
         <title>public Map&lt;String,String&gt; getBundleHeaders(long id) throws Exception</title>
         <formalpara role="parameter">
            <title>id</title>
            <para>Addresses the bundle by its identifier.</para>
         </formalpara>
         <para role="description">
Get the header for a bundle given by its bundle Id.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns the map of headers entries.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getBundleHeaders(String)" xml:id="org.osgi.service.rest.client.RestClient.getBundleHeaders-String-">
         <title>public Map&lt;String,String&gt; getBundleHeaders(String bundlePath) throws Exception</title>
         <formalpara role="parameter">
            <title>bundlePath</title>
            <para>Addresses the bundle by its URI path.</para>
         </formalpara>
         <para role="description">
Get the header for a bundle given by its URI path.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns the map of headers entries.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getBundlePaths()" xml:id="org.osgi.service.rest.client.RestClient.getBundlePaths--">
         <title>public Collection&lt;String&gt; getBundlePaths() throws Exception</title>
         <para role="description">
Get the bundles currently installed on the managed framework.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns a collection of the bundle URIs in the form of Strings.
         The URIs are relative to the REST API root URL and can be used to
         retrieve bundle representations.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getBundles()" xml:id="org.osgi.service.rest.client.RestClient.getBundles--">
         <title>public Collection&lt;BundleDTO&gt; getBundles() throws Exception</title>
         <para role="description">
Get the bundle representations for all bundles currently installed in the
 managed framework.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns a collection of BundleDTO objects.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getBundleStartLevel(long)" xml:id="org.osgi.service.rest.client.RestClient.getBundleStartLevel-long-">
         <title>public BundleStartLevelDTO getBundleStartLevel(long id) throws Exception</title>
         <formalpara role="parameter">
            <title>id</title>
            <para>Addresses the bundle by its identifier.</para>
         </formalpara>
         <para role="description">
Get the start level for a bundle given by its bundle Id.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns a <link linkend="org.osgi.framework.startlevel.dto.BundleStartLevelDTO">BundleStartLevelDTO</link> describing the current
         start level of the bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getBundleStartLevel(String)" xml:id="org.osgi.service.rest.client.RestClient.getBundleStartLevel-String-">
         <title>public BundleStartLevelDTO getBundleStartLevel(String bundlePath) throws Exception</title>
         <formalpara role="parameter">
            <title>bundlePath</title>
            <para>Addresses the bundle by its URI path.</para>
         </formalpara>
         <para role="description">
Get the start level for a bundle given by its URI path.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns a <link linkend="org.osgi.framework.startlevel.dto.BundleStartLevelDTO">BundleStartLevelDTO</link> describing the current
         start level of the bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getBundleState(long)" xml:id="org.osgi.service.rest.client.RestClient.getBundleState-long-">
         <title>public int getBundleState(long id) throws Exception</title>
         <formalpara role="parameter">
            <title>id</title>
            <para>Addresses the bundle by its identifier.</para>
         </formalpara>
         <para role="description">
Get the state for a given bundle Id.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns the current bundle state as defined in (@link
         org.osgi.framework.Bundle}.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getBundleState(String)" xml:id="org.osgi.service.rest.client.RestClient.getBundleState-String-">
         <title>public int getBundleState(String bundlePath) throws Exception</title>
         <formalpara role="parameter">
            <title>bundlePath</title>
            <para>Addresses the bundle by its URI path.</para>
         </formalpara>
         <para role="description">
Get the state for a given bundle path.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns the current bundle state as defined in (@link
         org.osgi.framework.Bundle}.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFrameworkStartLevel()" xml:id="org.osgi.service.rest.client.RestClient.getFrameworkStartLevel--">
         <title>public FrameworkStartLevelDTO getFrameworkStartLevel() throws Exception</title>
         <para role="description">
Retrieves the current framework start level.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns the current framework start level in the form of a
         <link linkend="org.osgi.framework.startlevel.dto.FrameworkStartLevelDTO">FrameworkStartLevelDTO</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getServicePaths()" xml:id="org.osgi.service.rest.client.RestClient.getServicePaths--">
         <title>public Collection&lt;String&gt; getServicePaths() throws Exception</title>
         <para role="description">
Gets a collection of URI paths to all installed services.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns a collection of URI paths to the installed services.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getServicePaths(String)" xml:id="org.osgi.service.rest.client.RestClient.getServicePaths-String-">
         <title>public Collection&lt;String&gt; getServicePaths(String filter) throws Exception</title>
         <formalpara role="parameter">
            <title>filter</title>
            <para>Passes a filter to restrict the result set.</para>
         </formalpara>
         <para role="description">
Gets a collection of URI paths to all installed services.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns a collection of URI paths to the installed services.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getServiceReference(long)" xml:id="org.osgi.service.rest.client.RestClient.getServiceReference-long-">
         <title>public ServiceReferenceDTO getServiceReference(long id) throws Exception</title>
         <formalpara role="parameter">
            <title>id</title>
            <para>Addresses the service by its identifier.</para>
         </formalpara>
         <para role="description">
Get the service representation for a service given by its service Id.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The service representation as <link linkend="org.osgi.framework.dto.ServiceReferenceDTO">ServiceReferenceDTO</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getServiceReference(String)" xml:id="org.osgi.service.rest.client.RestClient.getServiceReference-String-">
         <title>public ServiceReferenceDTO getServiceReference(String servicePath) throws Exception</title>
         <formalpara role="parameter">
            <title>servicePath</title>
            <para>Addresses the service by its URI path.</para>
         </formalpara>
         <para role="description">
Get the service representation for a service given by its URI path.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The service representation as <link linkend="org.osgi.framework.dto.ServiceReferenceDTO">ServiceReferenceDTO</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getServiceReferences()" xml:id="org.osgi.service.rest.client.RestClient.getServiceReferences--">
         <title>public Collection&lt;ServiceReferenceDTO&gt; getServiceReferences() throws Exception</title>
         <para role="description">
Get the service representations for all services.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns the service representations in the form of
         <link linkend="org.osgi.framework.dto.ServiceReferenceDTO">ServiceReferenceDTO</link> objects.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getServiceReferences(String)" xml:id="org.osgi.service.rest.client.RestClient.getServiceReferences-String-">
         <title>public Collection&lt;ServiceReferenceDTO&gt; getServiceReferences(String filter) throws Exception</title>
         <formalpara role="parameter">
            <title>filter</title>
            <para>Passes a filter to restrict the result set.</para>
         </formalpara>
         <para role="description">
Get the service representations for all services.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns the service representations in the form of
         <link linkend="org.osgi.framework.dto.ServiceReferenceDTO">ServiceReferenceDTO</link> objects.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="installBundle(String)" xml:id="org.osgi.service.rest.client.RestClient.installBundle-String-">
         <title>public BundleDTO installBundle(String location) throws Exception</title>
         <formalpara role="parameter">
            <title>location</title>
            <para>Passes the location string to retrieve the bundle content
        from.</para>
         </formalpara>
         <para role="description">
Install a new bundle given by an externally reachable location string,
 typically describing a URL.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns the <link linkend="org.osgi.framework.dto.BundleDTO">BundleDTO</link> of the newly installed bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="installBundle(String,InputStream)" xml:id="org.osgi.service.rest.client.RestClient.installBundle-String-InputStream-">
         <title>public BundleDTO installBundle(String location,InputStream in) throws Exception</title>
         <formalpara role="parameter">
            <title>location</title>
            <para>Passes the location string to be used to install the new
        bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>in</title>
            <para>Passes the input stream to a bundle.</para>
         </formalpara>
         <para role="description">
Install a new bundle given by an InputStream to a bundle content.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns the <link linkend="org.osgi.framework.dto.BundleDTO">BundleDTO</link> of the newly installed bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setBundleStartLevel(long,int)" xml:id="org.osgi.service.rest.client.RestClient.setBundleStartLevel-long-int-">
         <title>public void setBundleStartLevel(long id,int startLevel) throws Exception</title>
         <formalpara role="parameter">
            <title>id</title>
            <para>Addresses the bundle by its identifier.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>startLevel</title>
            <para>The target start level.</para>
         </formalpara>
         <para role="description">
Set the start level for a bundle given by its bundle Id.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setBundleStartLevel(String,int)" xml:id="org.osgi.service.rest.client.RestClient.setBundleStartLevel-String-int-">
         <title>public void setBundleStartLevel(String bundlePath,int startLevel) throws Exception</title>
         <formalpara role="parameter">
            <title>bundlePath</title>
            <para>Addresses the bundle by its URI path.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>startLevel</title>
            <para>The target start level.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
         <para/>
      </section>
      <section role="method" xreflabel="setFrameworkStartLevel(FrameworkStartLevelDTO)" xml:id="org.osgi.service.rest.client.RestClient.setFrameworkStartLevel-FrameworkStartLevelDTO-">
         <title>public void setFrameworkStartLevel(FrameworkStartLevelDTO startLevel) throws Exception</title>
         <formalpara role="parameter">
            <title>startLevel</title>
            <para>set the framework start level to this target.</para>
         </formalpara>
         <para role="description">
Sets the current framework start level.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="startBundle(long)" xml:id="org.osgi.service.rest.client.RestClient.startBundle-long-">
         <title>public void startBundle(long id) throws Exception</title>
         <formalpara role="parameter">
            <title>id</title>
            <para>Addresses the bundle by its identifier.</para>
         </formalpara>
         <para role="description">
Start a bundle given by its bundle Id.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="startBundle(String)" xml:id="org.osgi.service.rest.client.RestClient.startBundle-String-">
         <title>public void startBundle(String bundlePath) throws Exception</title>
         <formalpara role="parameter">
            <title>bundlePath</title>
            <para>Addresses the bundle by its URI path.</para>
         </formalpara>
         <para role="description">
Start a bundle given by its URI path.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="startBundle(long,int)" xml:id="org.osgi.service.rest.client.RestClient.startBundle-long-int-">
         <title>public void startBundle(long id,int options) throws Exception</title>
         <formalpara role="parameter">
            <title>id</title>
            <para>Addresses the bundle by its identifier.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>options</title>
            <para>Passes additional options as defined in
        <link linkend="org.osgi.framework.Bundle.start-int-">org.osgi.framework.Bundle.start(int)</link>
            </para>
         </formalpara>
         <para role="description">
Start a bundle given by its bundle Id.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="startBundle(String,int)" xml:id="org.osgi.service.rest.client.RestClient.startBundle-String-int-">
         <title>public void startBundle(String bundlePath,int options) throws Exception</title>
         <formalpara role="parameter">
            <title>bundlePath</title>
            <para>Addresses the bundle by its URI path.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>options</title>
            <para>Passes additional options as defined in
        <link linkend="org.osgi.framework.Bundle.start-int-">org.osgi.framework.Bundle.start(int)</link>
            </para>
         </formalpara>
         <para role="description">
Start a bundle given by its URI path.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="stopBundle(long)" xml:id="org.osgi.service.rest.client.RestClient.stopBundle-long-">
         <title>public void stopBundle(long id) throws Exception</title>
         <formalpara role="parameter">
            <title>id</title>
            <para>Addresses the bundle by its identifier.</para>
         </formalpara>
         <para role="description">
Stop a bundle given by its bundle Id.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="stopBundle(String)" xml:id="org.osgi.service.rest.client.RestClient.stopBundle-String-">
         <title>public void stopBundle(String bundlePath) throws Exception</title>
         <formalpara role="parameter">
            <title>bundlePath</title>
            <para>Addresses the bundle by its URI path.</para>
         </formalpara>
         <para role="description">
Stop a bundle given by its URI path.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="stopBundle(long,int)" xml:id="org.osgi.service.rest.client.RestClient.stopBundle-long-int-">
         <title>public void stopBundle(long id,int options) throws Exception</title>
         <formalpara role="parameter">
            <title>id</title>
            <para>Addresses the bundle by its identifier.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>options</title>
            <para>Passes additional options as defined in
        <link linkend="org.osgi.framework.Bundle.stop-int-">org.osgi.framework.Bundle.stop(int)</link>
            </para>
         </formalpara>
         <para role="description">
Stop a bundle given by its bundle Id.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="stopBundle(String,int)" xml:id="org.osgi.service.rest.client.RestClient.stopBundle-String-int-">
         <title>public void stopBundle(String bundlePath,int options) throws Exception</title>
         <formalpara role="parameter">
            <title>bundlePath</title>
            <para>Addresses the bundle by its URI path.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>options</title>
            <para>Passes additional options as defined in
        <link linkend="org.osgi.framework.Bundle.stop-int-">org.osgi.framework.Bundle.stop(int)</link>
            </para>
         </formalpara>
         <para role="description">
Stop a bundle given by its URI path.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="uninstallBundle(long)" xml:id="org.osgi.service.rest.client.RestClient.uninstallBundle-long-">
         <title>public BundleDTO uninstallBundle(long id) throws Exception</title>
         <formalpara role="parameter">
            <title>id</title>
            <para>Addresses the bundle by its identifier.</para>
         </formalpara>
         <para role="description">
Uninstall a bundle given by its bundle Id.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns the <link linkend="org.osgi.framework.dto.BundleDTO">BundleDTO</link> of the uninstalled bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="uninstallBundle(String)" xml:id="org.osgi.service.rest.client.RestClient.uninstallBundle-String-">
         <title>public BundleDTO uninstallBundle(String bundlePath) throws Exception</title>
         <formalpara role="parameter">
            <title>bundlePath</title>
            <para>Addresses the bundle by its URI path.</para>
         </formalpara>
         <para role="description">
Uninstall a bundle given by its URI path.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns the <link linkend="org.osgi.framework.dto.BundleDTO">BundleDTO</link> of the uninstalled bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="updateBundle(long)" xml:id="org.osgi.service.rest.client.RestClient.updateBundle-long-">
         <title>public BundleDTO updateBundle(long id) throws Exception</title>
         <formalpara role="parameter">
            <title>id</title>
            <para>Addresses the bundle by its identifier.</para>
         </formalpara>
         <para role="description">
Updates a bundle given by its bundle Id using the bundle-internal update
 location.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns the <link linkend="org.osgi.framework.dto.BundleDTO">BundleDTO</link> of the updated bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="updateBundle(long,String)" xml:id="org.osgi.service.rest.client.RestClient.updateBundle-long-String-">
         <title>public BundleDTO updateBundle(long id,String url) throws Exception</title>
         <formalpara role="parameter">
            <title>id</title>
            <para>Addresses the bundle by its identifier.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>url</title>
            <para>The URL whose content is to be used to update the bundle.</para>
         </formalpara>
         <para role="description">
Updates a bundle given by its URI path using the content at the specified
 URL.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns the <link linkend="org.osgi.framework.dto.BundleDTO">BundleDTO</link> of the updated bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="updateBundle(long,InputStream)" xml:id="org.osgi.service.rest.client.RestClient.updateBundle-long-InputStream-">
         <title>public BundleDTO updateBundle(long id,InputStream in) throws Exception</title>
         <formalpara role="parameter">
            <title>id</title>
            <para>Addresses the bundle by its identifier.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>in</title>
            <para>Passes an input stream to the new bundle content.</para>
         </formalpara>
         <para role="description">
Updates a bundle given by its bundle Id and passing the new bundle
 content in the form of an InputStream.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns the <link linkend="org.osgi.framework.dto.BundleDTO">BundleDTO</link> of the updated bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception representing a failure in the underlying
         REST call.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="RestClientFactory" xml:id="org.osgi.service.rest.client.RestClientFactory">
      <title>public interface RestClientFactory</title>
      <para>
Factory to construct new REST client instances. Each instance is specific to
 a REST service endpoint.
 
 </para>
      <para>
 Implementations can choose to extend this interface to add additional
 creation methods, where additional arguments are needed for request signing,
 etc.
 
 </para>
      <para>
 In OSGi environments, this factory is registered as a service.</para>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="createRestClient(URI)" xml:id="org.osgi.service.rest.client.RestClientFactory.createRestClient-URI-">
         <title>public RestClient createRestClient(URI uri)</title>
         <formalpara role="parameter">
            <title>uri</title>
            <para>The URI to the REST service endpoint.</para>
         </formalpara>
         <para role="description">
Create a new REST client instance.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new REST client instance for the specified REST service
         endpoint.</para>
         </formalpara>
      </section>
   </section>
</section>

  <section xmlns:ns6="http://www.w3.org/1999/xlink" xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" role="package" version="5" xreflabel="JavaScript Client API" xml:id="service.rest-javascript.api" xml:base="../137/js-client.xml">
  <title>JavaScript Client API</title>

  <para>REST JavaScript Client API Version 1.0</para>

  <section role="summary">
    <title>Summary</title>

    <itemizedlist>
      <listitem>
        <para><link linkend="OSGiRestClient"> <code>OSGiRestClient</code>
        </link> - A JavaScript client API for accessing and managing a remote
        OSGi framework through the REST API.</para>
      </listitem>

      <listitem>
        <para><link linkend="OSGiRestCallback"> <code>OSGiRestCallback</code>
        </link> - Callback object provided to the <code>OSGiRestClient</code>
        functions. Invoked on completion of the remote invocation.</para>
      </listitem>
    </itemizedlist>

    <para>JavaScript does not support the concept of interfaces and therefore
    implementations of the JavaScript client specification can provide objects
    of any type as long as they conform to the to the signatures described in
    this specification.</para>

    <para>To facilitate documenting the JavaScript APIs <emphasis>Web
    IDL</emphasis> is used; see <xref linkend="service.rest-webidl"/>. This
    clarifies the accepted arguments and return types for otherwise untyped
    functions. Web IDL is only used for documentation purposes and has no
    bearing on the implementation of this API.</para>

    <para><emphasis>Note:</emphasis> some data types in Web IDL have slightly
    different names than commonly used in languages like Java or JavaScript.
    For example a <code>String</code> is called <code>DOMString</code> and the
    equivalent of a Java <code>long</code> is called <code>long long</code>.
    Additionally, when a representation as defined in this specification is
    passed to one of the JavaScript client APIs this representation is
    provided as a JavaScript object. Following the recommendations for mapping
    these to Web IDL, these JavaScript Object parameters are described using
    the <code>dictionary</code> data type. For more information see the Web
    IDL specification.</para>
  </section>

  <section role="class" xreflabel="OSGiRestClient" xml:id="OSGiRestClient">
    <title>interface OSGiRestClient</title>

    <para>Provides a JavaScript client API for accessing and managing a remote
    OSGi framework through the REST API. Implementations will provide a
    proprietary constructor to create objects of this signature. Once created
    the object can be used from JavaScript environments to manage the
    framework.</para>

    <section role="method">
      <title>void getBundle((DOMString or long long) bundle, OSGiRestCallback
      cb)</title>

      <formalpara role="parameter">
        <title>bundle</title>

        <para>The bundle, either the numeric bundle ID or the bundle URI
        path.</para>
      </formalpara>

      <formalpara role="parameter">
        <title>cb</title>

        <para>The callbacks invoked on completion of the remote invocation. On
        success the <code>success()</code> callback is invoked with the Bundle
        representation as JavaScript object.</para>
      </formalpara>

      <para role="description">Get the Bundle representation of a specific
      bundle.</para>
    </section>

    <section role="method">
      <title>void getBundleHeader((DOMString or long long) bundle,
      OSGiRestCallback cb)</title>

      <formalpara role="parameter">
        <title>bundle</title>

        <para>The bundle, either the numeric bundle ID or the bundle URI
        path.</para>
      </formalpara>

      <formalpara role="parameter">
        <title>cb</title>

        <para>The callbacks invoked on completion of the remote invocation. On
        success the <code>success()</code> callback is invoked with the Bundle
        Header representation as JavaScript object.</para>
      </formalpara>

      <para role="description">Get the Bundle Header representation of a
      specific bundle.</para>
    </section>

    <section role="method">
      <title>void getBundleRepresentations(OSGiRestCallback cb)</title>

      <formalpara role="parameter">
        <title>cb</title>

        <para>The callbacks invoked on completion of the remote invocation. On
        success the <code>success()</code> callback is invoked with the Bundle
        Representations List representation as JavaScript object.</para>
      </formalpara>

      <para role="description">List the bundles details.</para>
    </section>

    <section role="method">
      <title>void getBundles(OSGiRestCallback cb)</title>

      <formalpara role="parameter">
        <title>cb</title>

        <para>The callbacks invoked on completion of the remote invocation. On
        success the <code>success()</code> callback is invoked with the Bundle
        List representation as JavaScript object.</para>
      </formalpara>

      <para role="description">List the bundles.</para>
    </section>

    <section role="method">
      <title>void getBundleStartLevel((DOMString or long long) bundle,
      OSGiRestCallback cb)</title>

      <formalpara role="parameter">
        <title>bundle</title>

        <para>The bundle, either the numeric bundle ID or the bundle URI
        path.</para>
      </formalpara>

      <formalpara role="parameter">
        <title>cb</title>

        <para>The callbacks invoked on completion of the remote invocation. On
        success the <code>success()</code> callback is invoked with the Bundle
        Start Level representation as JavaScript object.</para>
      </formalpara>

      <para role="description">Get the Bundle Start Level representation of a
      specific bundle.</para>
    </section>

    <section role="method">
      <title>void getBundleState((DOMString or long long) bundle,
      OSGiRestCallback cb)</title>

      <formalpara role="parameter">
        <title>bundle</title>

        <para>The bundle, either the numeric bundle ID or the bundle URI
        path.</para>
      </formalpara>

      <formalpara role="parameter">
        <title>cb</title>

        <para>The callbacks invoked on completion of the remote invocation. On
        success the <code>success()</code> callback is invoked with the Bundle
        State representation as JavaScript object.</para>
      </formalpara>

      <para role="description">Get the Bundle State representation of a
      specific bundle.</para>
    </section>

    <section role="method">
      <title>void getFrameworkStartLevel(OSGiRestCallback cb)</title>

      <formalpara role="parameter">
        <title>cb</title>

        <para>The callbacks invoked on completion of the remote invocation. On
        success the <code>success()</code> callback is invoked with the
        Framework Start Level representation as JavaScript object.</para>
      </formalpara>

      <para role="description">Obtain the Framework Start Level.</para>
    </section>

    <section role="method">
      <title>void getService((DOMString or long long) service,
      OSGiRestCallback cb)</title>

      <formalpara role="parameter">
        <title>service</title>

        <para>The service, either the numeric service ID or the service URI
        path.</para>
      </formalpara>

      <formalpara role="parameter">
        <title>cb</title>

        <para>The callbacks invoked on completion of the remote invocation. On
        success the <code>success()</code> callback is invoked with the
        Service representation as JavaScript object.</para>
      </formalpara>

      <para role="description">Get a service representation.</para>
    </section>

    <section role="method">
      <title>void getServiceRepresentations(OSGiRestCallback cb)</title>

      <formalpara role="parameter">
        <title>cb</title>

        <para>The callbacks invoked on completion of the remote invocation. On
        success the <code>success()</code> callback is invoked with the
        Service Representations List representation as JavaScript
        object.</para>
      </formalpara>

      <para role="description">Get all services representations.</para>
    </section>

    <section role="method">
      <title>void getServices(OSGiRestCallback cb)</title>

      <formalpara role="parameter">
        <title>cb</title>

        <para>The callbacks invoked on completion of the remote invocation. On
        success the <code>success()</code> callback is invoked with the
        Service List representation as JavaScript object.</para>
      </formalpara>

      <para role="description">Get all services URIs.</para>
    </section>

    <section role="method">
      <title>void installBundle((DOMString or ArrayBuffer) bundle,
      OSGiRestCallback cb)</title>

      <formalpara role="parameter">
        <title>bundle</title>

        <para>The Bundle to install, either represented as a URL or as an
        ArrayBuffer of</para>
      </formalpara>

      <formalpara role="parameter">
        <title>cb</title>

        <para>The callbacks invoked on completion of the remote invocation. On
        success the <code>success()</code> callback is invoked with the Bundle
        representation of the newly installed Bundle. This parameter is
        optional.</para>
      </formalpara>

      <para role="description">Install a bundle from a URI or by value.</para>
    </section>

    <section role="method">
      <title>void setBundleStartLevel((DOMString or long long) bundle,
      dictionary bsl, OSGiRestCallback cb)</title>

      <formalpara role="parameter">
        <title>bundle</title>

        <para>The bundle, either the numeric bundle ID or the bundle URI
        path.</para>
      </formalpara>

      <formalpara role="parameter">
        <title>bsl</title>

        <para>A Bundle Start Level representation dictionary with the desired
        state.</para>
      </formalpara>

      <formalpara role="parameter">
        <title>cb</title>

        <para>The callbacks invoked on completion of the remote invocation. On
        success the <code>success()</code> callback is invoked with the
        resulting Framework Start Level representation as JavaScript object.
        This parameter is optional.</para>
      </formalpara>

      <para role="description">Change the Framework Start Level and/or initial
      bundle start level.</para>
    </section>

    <section role="method">
      <title>void setBundleState((DOMString or long long) bundle, dictionary
      state, OSGiRestCallback cb)</title>

      <formalpara role="parameter">
        <title>bundle</title>

        <para>The bundle, either the numeric bundle ID or the bundle URI
        path.</para>
      </formalpara>

      <formalpara role="parameter">
        <title>state</title>

        <para>Bundle State representation dictionary with the desired
        state.</para>
      </formalpara>

      <formalpara role="parameter">
        <title>cb</title>

        <para>The callbacks invoked on completion of the remote invocation. On
        success the <code>success()</code> callback is invoked with the
        resulting Bundle Start Level representation as JavaScript object. This
        parameter is optional.</para>
      </formalpara>

      <para role="description">Change the Bundle Start Level and/or other
      options defined in the Bundle Start Level representation.</para>
    </section>

    <section role="method">
      <title>void setFrameworkStartLevel(dictionary fwsl, OSGiRestCallback
      cb)</title>

      <formalpara role="parameter">
        <title>fwsl</title>

        <para>Framework Start Level representation dictionary with the desired
        state.</para>
      </formalpara>

      <formalpara role="parameter">
        <title>cb</title>

        <para>The callbacks invoked on completion of the remote invocation. On
        success the <code>success()</code> callback is invoked with the
        resulting Framework Start Level representation as JavaScript object.
        This parameter is optional.</para>
      </formalpara>

      <para role="description">Change the Framework Start Level and/or initial
      bundle start level.</para>
    </section>

    <section role="method">
      <title>void startBundle((DOMString or long long) bundle,
      OSGiRestCallback cb)</title>

      <formalpara role="parameter">
        <title>bundle</title>

        <para>The bundle, either the numeric bundle ID or the bundle URI
        path.</para>
      </formalpara>

      <formalpara role="parameter">
        <title>cb</title>

        <para>The callbacks invoked on completion of the remote invocation. On
        success the <code>success()</code> callback is invoked with the Bundle
        State representation as JavaScript object. This parameter is
        optional.</para>
      </formalpara>

      <para role="description">Start a bundle.</para>
    </section>

    <section role="method">
      <title>void startBundle((DOMString or long long) bundle, long options,
      OSGiRestCallback cb)</title>

      <formalpara role="parameter">
        <title>bundle</title>

        <para>The bundle, either the numeric bundle ID or the bundle URI
        path.</para>
      </formalpara>

      <formalpara role="parameter">
        <title>options</title>

        <para>The options passed to the bundle's start method as a
        number.</para>
      </formalpara>

      <formalpara role="parameter">
        <title>cb</title>

        <para>The callbacks invoked on completion of the remote invocation. On
        success the <code>success()</code> callback is invoked with the Bundle
        State representation as JavaScript object. This parameter is
        optional.</para>
      </formalpara>

      <para role="description">Start a bundle.</para>
    </section>

    <section role="method">
      <title>void stopBundle((DOMString or long long) bundle, OSGiRestCallback
      cb)</title>

      <formalpara role="parameter">
        <title>bundle</title>

        <para>The bundle, either the numeric bundle ID or the bundle URI
        path.</para>
      </formalpara>

      <formalpara role="parameter">
        <title>cb</title>

        <para>The callbacks invoked on completion of the remote invocation. On
        success the <code>success()</code> callback is invoked with the Bundle
        State representation as JavaScript object. This parameter is
        optional.</para>
      </formalpara>

      <para role="description">Stop a bundle.</para>
    </section>

    <section role="method">
      <title>void stopBundle((DOMString or long long) bundle, long options,
      OSGiRestCallback cb)</title>

      <formalpara role="parameter">
        <title>bundle</title>

        <para>The bundle, either the numeric bundle ID or the bundle URI
        path.</para>
      </formalpara>

      <formalpara role="parameter">
        <title>options</title>

        <para>The options passed to the bundle's start method as a
        number.</para>
      </formalpara>

      <formalpara role="parameter">
        <title>cb</title>

        <para>The callbacks invoked on completion of the remote invocation. On
        success the <code>success()</code> callback is invoked with the Bundle
        State representation as JavaScript object. This parameter is
        optional.</para>
      </formalpara>

      <para role="description">Stop a bundle.</para>
    </section>

    <section role="method">
      <title>void uninstallBundle((DOMString or long long) bundle,
      OSGiRestCallback cb)</title>

      <formalpara role="parameter">
        <title>bundle</title>

        <para>The bundle, either the numeric bundle ID or the bundle URI
        path.</para>
      </formalpara>

      <formalpara role="parameter">
        <title>cb</title>

        <para>The callbacks invoked on completion of the remote invocation. On
        success the <code>success()</code> callback is invoked with the Bundle
        representation of the uninstalled Bundle. This parameter is
        optional.</para>
      </formalpara>

      <para role="description">Uninstall a bundle.</para>
    </section>

    <section role="method">
      <title>void updateBundle((DOMString or long long) bundle, (DOMString or
      ArrayBuffer) updated, OSGiRestCallback cb)</title>

      <formalpara role="parameter">
        <title>bundle</title>

        <para>The bundle, either the numeric bundle ID or the bundle URI
        path.</para>
      </formalpara>

      <formalpara role="parameter">
        <title>updated</title>

        <para>The Bundle to update, either represented as a URL or as an
        ArrayBuffer of</para>
      </formalpara>

      <formalpara role="parameter">
        <title>cb</title>

        <para>The callbacks invoked on completion of the remote invocation. On
        success the <code>success()</code> callback is invoked with the Bundle
        representation of the updated Bundle. This parameter is
        optional.</para>
      </formalpara>

      <para role="description">Update a bundle from a URI or by value.</para>
    </section>
  </section>

  <section role="class" xreflabel="OSGiRestCallback" xml:id="OSGiRestCallback">
    <title>callback interface OSGiRestCallback</title>

    <para>Objects implementing this signature are provided by users of the
    <code>OSGiRestClient</code> as callbacks. One of the callback functions is
    invoked on completion of a REST invocation.</para>

    <section role="method">
      <title>void success(object response)</title>

      <formalpara role="parameter">
        <title>response</title>

        <para>The result of the invocation. The type of this parameter is
        depends on the function being invoked. It can be found in the
        documentation of the function.</para>
      </formalpara>

      <para role="description">Called when the invocation completes
      successfully.</para>
    </section>

    <section role="method">
      <title>void failure(short httpCode, object response)</title>

      <formalpara role="parameter">
        <title>httpCode</title>

        <para>The HTTP code returned. If no HTTP code is associated with the
        failure this parameter is set to <code>-1</code>.</para>
      </formalpara>

      <formalpara role="parameter">
        <title>response</title>

        <para>The failure response.</para>
      </formalpara>

      <para role="description">Called when the invocation failed.</para>
    </section>
  </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="service.rest-corefilter"><title>Framework Filter
      Syntax</title>OSGi Core, Chapter 3.2.7 Filter Syntax</bibliomixed>

      <bibliomixed xml:id="service.rest-webidl"><title>Web
      IDL</title>http://www.w3.org/TR/WebIDL/</bibliomixed>

      <bibliomixed xml:id="service.rest-reference.xml.schemas"><title>OSGi XML
      Schemas</title>http://www.osgi.org/Specifications</bibliomixed>

      <bibliomixed xml:id="service.rest-whiteboard.pattern.ref"><title>Whiteboard
      Pattern</title>http://www.osgi.org/wiki/uploads/Links/whiteboard.pdf</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="138" revision="$Id:" version="5" xml:id="service.async" xml:base="../138/service.async.xml">
  <title>Asynchronous Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.async-version" linkend="org.osgi.service.async"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>OSGi Bundles collaborate using loosely coupled services registered
    in the OSGi service registry. This is a powerful and flexible model, and
    allows for the dynamic replacement of services at runtime. OSGi services
    are therefore a very common interaction pattern within OSGi.</para>

    <para>As with most Java APIs and Objects, OSGi services are primarily
    synchronous in operation. This has several benefits; synchronous APIs are
    typically easier to write and to use than asynchronous ones; synchronous
    APIs provide immediate feedback; synchronous implementations typically
    have a less complex threading model.</para>

    <para>Asynchronous APIs, however, have different advantages. Asynchronous
    APIs can reduce bottlenecks by encouraging more effective use of
    parallelism, improving the responsiveness of the application. In many
    cases high throughput systems can be written more simply and elegantly
    using asynchronous programming techniques.</para>

    <para>The <xref linkend="util.promise"/> provides powerful primitives for
    asynchronous programming, including the ability to compose flows in a
    functional style. There are, however, many existing services that do not
    use the Promise API. The purpose of the Asynchronous Service is to bridge
    the gap between these existing, primarily synchronous, services in the
    OSGi service registry, and asynchronous programming. The Asynchronous
    Service therefore provides a way to invoke arbitrary OSGi services
    asynchronously, providing results and failure notifications through the
    Promise API.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Async Invocation</emphasis> - A single method call
          that is to be executed without blocking the requesting
          thread.</para>
        </listitem>

        <listitem>
          <para><emphasis>Client</emphasis> - Application code that wishes to
          invoke one or more OSGi services asynchronously.</para>
        </listitem>

        <listitem>
          <para><emphasis>Async Service</emphasis> - The OSGi service
          representing the Asynchronous Services implementation. Used by the
          Client to make one or more Async Invocations.</para>
        </listitem>

        <listitem>
          <para><emphasis>Async Mediator</emphasis> - A mediator object
          created by the Async Service which represents the target service.
          Used by the Client to register Async Invocations.</para>
        </listitem>

        <listitem>
          <para><emphasis>Success Callback</emphasis> - A callback made when
          an Async Invocation completes with a normal return value.</para>
        </listitem>

        <listitem>
          <para><emphasis>Failure Callback</emphasis> - A callback made when
          an Async Invocation completes with an exception.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Async Service</emphasis> - A service that can create
          Async Mediators and run Async Invocations.</para>
        </listitem>

        <listitem>
          <para><emphasis>Target Service</emphasis> - A service that is to be
          called asynchronously by the Client.</para>
        </listitem>

        <listitem>
          <para><emphasis>Client</emphasis> - The code that makes Async
          Invocations using the Async Service</para>
        </listitem>

        <listitem>
          <para><emphasis>Promise</emphasis> - A promise, representing the
          result of the Async Invocation.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Class and Service overview</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.100in" contentwidth="7.000in" fileref="async-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>Usage</title>

    <para>This section is an introduction in the usage of the Async Service.
    It is not the formal specification, the normative part starts at <xref linkend="service.async-main.body"/>. This section leaves out some of the
    details for clarity.</para>

    <section>
      <title>Synopsis</title>

      <para>The Async Service provides a mechanism for a client to
      <emphasis>asynchronously</emphasis> invoke methods on a target service.
      The service may be aware of the asynchronous nature of the call and
      actively participate in it, or be unaware and execute normally. In
      either case the client's thread will not block, and will continue
      executing its next instructions. Clients are notified of the completion
      of their task, and whether it was successful or not, through the use of
      the Promise API.</para>

      <para>Each async invocation is registered by the client making a method
      call on an <emphasis>Async Mediator</emphasis>, and then started by
      making a call to the Async Service that created the mediator. This call
      returns a Promise that will eventually be resolved with the return value
      from the async invocation.</para>

      <para>An Async Mediator can be created by the client, either from an
      Object, or directly from a Service Reference. Using a service reference
      has the advantage that the mediator will track the underlying service.
      This means that if the service is unregistered before the asynchronous
      call begins then the Promise will resolve with a failure, rather than
      continuing using an invalid service object.</para>
    </section>

    <section>
      <title>Making Async Invocations</title>

      <para>The general pattern for a client is to obtain the Async Service,
      and a service reference for the target service. The client then creates
      an Async Mediator for the target service, invokes a method on the
      mediator, then starts the asynchronous call. This is demonstrated in the
      following example:</para>

      <programlisting>
      
private Async asyncService;
private ServiceReference&lt;Foo&gt; fooRef;
private Foo mediated;

@Reference
void setAsync(Async async) {
    asyncService = async;
}

@Reference(service = Foo.class)
void setList(ServiceReference&lt;Foo&gt; foo) {
    fooRef = foo;
}

@Activate
void start() {
    mediated = asyncService.mediate(fooRef, Foo.class);
}

public synchronized void doStuff() {
    Promise&lt;Boolean&gt; promise = asyncService
           .call(mediated.booleanMethod(“aValue”));
    ...
}

      </programlisting>

      <para>This example demonstrates how simply clients can make asynchronous
      calls using the Async Service. The eventual result can be obtained from
      the promise using one of the relevant callbacks.</para>

      <para>One important thing to note is that whilst the call to <xref linkend="org.osgi.service.async.Async.call--" xrefstyle="hyperlink"/> or
      <xref linkend="org.osgi.service.async.Async.call-R-" xrefstyle="hyperlink"/> causes the async invocation to begin, the actual
      execution of the underlying task may be queued until a thread is
      available to run it. If the service has been unregistered before the
      execution actually begins then the promise will be resolved with a
      Service Exception. The type of the Service Exception will be
      <code>ASYNC_ERROR</code>.</para>
    </section>

    <section>
      <title>Async Invocations of Void Methods</title>

      <para>The return value of the mediator method call is used to provide
      type information to the Async Service. This, however, does not work for
      <code>void</code> methods that have no return value. In this case the
      client can either pass an arbitrary object to the <xref linkend="org.osgi.service.async.Async.call-R-" xrefstyle="hyperlink"/>
      method, or use the zero argument <xref linkend="org.osgi.service.async.Async.call--" xrefstyle="hyperlink"/>
      method. In either case the returned promise will eventually resolve with
      a value of <code>null</code>. This is demonstrated in the following
      example.</para>

      <programlisting>
private Async asyncService;
private ServiceReference&lt;Foo&gt; fooRef;
private Foo mediated;

@Reference
void setAsync(Async async) {
    asyncService = async;
}

@Reference(service = Foo.class)
void setList(ServiceReference&lt;Foo&gt; foo) {
    fooRef = foo;
}

@Activate
void start() {
    mediated = asyncService.mediate(fooRef, Foo.class);
}

public synchronized void doStuff() {
    mediated.voidMethod();
    Promise&lt;?&gt; promise = asyncService
           .call();
    ...
}</programlisting>
    </section>

    <section>
      <title>Fire and Forget Calls</title>

      <para>Sometimes a client does not require any notification that an async
      invocation has completed. In this case the client could use one of the
      <xref linkend="org.osgi.service.async.Async.call--" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.async.Async.call-R-" xrefstyle="hyperlink"/>
      methods and simply discard the returned Promise object. This, however,
      can be wasteful of resources. The act of resolving the Promise object
      may be expensive, for example it may involve serializing the return
      value over a network if the remote call was asynchronous.</para>

      <para>If the client knows that no Promise object representing the result
      of the asynchronous task is needed then it can signal this to the Async
      Service. This allows the Async Service to better optimize the async
      invocation by not providing a result.</para>

      <para>To indicate that the client wants to make a fire-and-forget style
      call the client invokes the mediator as normal, but then begins the
      asynchronous invocation using the <xref linkend="org.osgi.service.async.Async.execute--" xrefstyle="hyperlink"/>
      method as show below.</para>

      <programlisting>
private Async asyncService;
private ServiceReference&lt;Foo&gt; fooRef;

private Foo mediated;

@Reference
void setAsync(Async async) {
    asyncService = async;
}

@Reference(service = Foo.class)
void setList(ServiceReference&lt;Foo&gt; foo) {
    fooRef = foo;
}

@Activate
void start() {
    mediated = asyncService.mediate(fooRef, Foo.class);
}

public synchronized void doStuff() {
    mediated.someMethod();
    asyncService.execute();
    ...
}</programlisting>

      <para>Note that the <xref linkend="org.osgi.service.async.Async.execute--" xrefstyle="hyperlink"/>
      method does still return a Promise. This Promise is not the same as the
      ones returned by <xref linkend="org.osgi.service.async.Async.call--" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.async.Async.call-R-" xrefstyle="hyperlink"/>,
      its resolution value does not provide access to the result, but instead
      indicates whether the fire-and-forget call could be successfully
      started. If there is a failure which prevents the task from being
      executed then this is used to fail the returned promise.</para>
    </section>

    <section>
      <title>Multi Threading</title>

      <para>By their very definition asynchronous tasks do not run inline, and
      typically they will not run on the same thread as the caller. This is
      not, however, a guarantee. A valid implementation of the Async Service
      may have only one worker thread, which may be the thread currently
      running in the client code. Async invocations also have the same
      threading model as the Promise API. This means that callbacks may run on
      arbitrary threads, which may, or may not, be the same as the client
      thread, or the thread which executed the asynchronous work.</para>

      <para>It is important for multi-threaded clients to note that calls to
      the mediator and Async Service must occur on the same thread. For
      example it is not supported to invoke a mediator using one thread, and
      then to begin the async invocation by calling the <xref linkend="org.osgi.service.async.Async.call--" xrefstyle="hyperlink"/>,
      <xref linkend="org.osgi.service.async.Async.call-R-" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.async.Async.execute--" xrefstyle="hyperlink"/>
      method on a different thread.</para>
    </section>
  </section>

  <section xml:id="service.async-main.body">
    <title>Async Service</title>

    <para>The Async Service is the primary interaction point between a client
    and the Async Service implementation. An Async Service implementation must
    expose a service implementing the <xref linkend="org.osgi.service.async.Async" xrefstyle="hyperlink"/> interface.
    Clients obtain an instance of the Async Service using the normal OSGi
    service registry mechanisms, either directly using the OSGi framework API,
    or using dependency injection.</para>

    <para>The Async Service is used to:</para>

    <itemizedlist>
      <listitem>
        <para>Create async mediators</para>
      </listitem>

      <listitem>
        <para>Begin async invocations</para>
      </listitem>

      <listitem>
        <para>Obtain Promise objects representing the result of the async
        invocation</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Using the Async Service</title>

      <para>The first action that a client wishing to make an async invocation
      must take is to create an async mediator using one of the
      <code>mediate</code> methods. Once created the client invokes the method
      that should be run asynchronously, supplying the arguments that should
      be used. This call records the invocation, but does not start the
      asynchronous task. The asynchronous task begins when the client invokes
      one of the <code>call</code> or <code>execute</code> methods on the
      Async Service. The <code>call</code> methods must return a Promise
      representing the async invocation. The promise must resolve with the
      value returned by the async invocation, or fail with the failure thrown
      by the async invocation.</para>

      <para>If the client attempts to begin an async invocation without first
      having called a method on the mediator object then the Async Service
      must detect this usage error and throw an
      <code>IllegalStateException</code> to the client. This applies to all
      methods that begin an async invocation.</para>
    </section>

    <section xml:id="service.async-main.failures">
      <title>Asynchronous Failures</title>

      <para>There are a variety of reasons that async invocations may be
      started correctly by the client, but then fail without running the
      asynchronous task. In any of these cases the Promise representing the
      async invocation must fail with a Service Exception. This Service
      Exception must be initialized with a type of <code>ASYNC_ERROR</code>.
      If there is no promise representing the async invocation then there is
      no way to notify the client of the failure, therefore the Service
      Exception must be logged by the Async Service using all available Log
      Service implementations.</para>

      <para>The following list of scenarios is not exhaustive, but indicates
      failure scenarios that must result in a Service Exception with a type of
      async</para>

      <itemizedlist>
        <listitem>
          <para>If the client is using a service reference backed mediator and
          the client bundle's bundle context becomes invalid before looking up
          the target service.</para>
        </listitem>

        <listitem>
          <para>If the client is using a service reference backed mediator and
          the service is unregistered before making the async
          invocation.</para>
        </listitem>

        <listitem>
          <para>If the client is using a service reference backed mediator and
          the service lookup returns <code>null</code></para>
        </listitem>

        <listitem>
          <para>If the Async Service is unable to accept new work, for example
          it is in the process of being shut down.</para>
        </listitem>

        <listitem>
          <para>If the type of the mediator object does not match the type of
          the service object to be invoked.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Thread Safety and Instance Sharing</title>

      <para>Implementations of the Async Service must be thread safe and may
      be used simultaneously across multiple clients and from multiple threads
      within the same client. Whilst the Async Service is able to be used
      across multiple threads, if a client wishes to make an async invocation
      then the call to the mediator and the call to begin the async invocation
      must occur on the same thread. The returned Promise may then be shared
      between threads if required.</para>

      <para>It is expected, although not required, that the Async Service
      implementation will use a Service Factory to create customized
      implementations for each client bundle. This simplifies the tracking of
      the relevant client bundle context to use when performing service
      lookups on the client bundle's behalf. Clients should therefore not
      share instances of the Async Service with other bundles. Instead both
      bundles should obtain their own instances from the service
      registry.</para>
    </section>

    <section>
      <title>Service Object Lifecycle Management</title>

      <para>If the Async Service is being used to call an OSGi service object
      and the service reference is available then the service object should be
      looked up immediately before the asynchronous task begins executing.
      This ensures that the service is still available at the point it is
      eventually called. Any call to <code>getService</code> must have a
      corresponding call to <code>ungetService</code> after the mediated
      method invoked has returned and, if available, the promise is resolved,
      but before the asynchronous task releases its thread of
      execution.</para>
    </section>
  </section>

  <section>
    <title>The Async Mediator</title>

    <para>Async mediators are dynamically created objects that have the same
    type or interface as the object being mediated, and are used to record
    method invocations and arguments. Mediator objects are specific to an
    Async Service implementation, and must only be used in conjunction with
    the Async Service object that they were created by.</para>

    <para>Mediators may be created either from a <code>ServiceReference</code>
    or from a service object. The actions and overall result are similar for
    both the <xref linkend="org.osgi.service.async.Async.mediate-ServiceReference-Class-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.async.Async.mediate-T-Class-" xrefstyle="hyperlink"/> methods, with the primary difference being that
    mediated objects created from a <code>ServiceReference</code> will
    validate whether the service object is still available immediately before
    the asynchronous task is executed.</para>

    <section>
      <title>Building the Mediator Object</title>

      <para>The client passes in a <code>Class</code> indicating the type that
      should be mediated. If the class object represents an interface type
      then the generated mediator object must implement that interface. If the
      class object represents a Java class type then the mediator object must
      either be an instance of that type or extend it.</para>

      <para>When building a mediator object the Async Service has the
      opportunity to detect numerous problems, for example if the referenced
      service to be mediated has been unregistered. Although fail-fast
      behavior is usually preferable, in this case it would force the client
      to handle errors in two places; both when creating the mediator, and for
      the returned Promise. To simplify client usage, error cases detected
      when creating a mediator must not prevent the mediator from being
      created and must not result in an exception being thrown. The only
      reason that the Async Service may fail to create a mediator is if the
      class object passed in cannot be mediated.</para>

      <para>There are three reasons why the Async Service may not be able to
      mediate a class type:</para>

      <itemizedlist>
        <listitem>
          <para>The class object passed in represents a final type.</para>
        </listitem>

        <listitem>
          <para>The class object passed in represents a type that has no
          zero-argument constructor.</para>
        </listitem>

        <listitem>
          <para>The class object passed in represents a type which has one or
          more public final methods present in its type hierarchy (other than
          those declared by <code>java.lang.Object</code>).</para>
        </listitem>
      </itemizedlist>

      <para>If any of these constraints are violated and prevent the Async
      Service from creating a mediator then the Async Service must throw an
      IllegalArgumentException.</para>
    </section>

    <section>
      <title>Async Mediator Behaviors</title>

      <para>When invoked, the Async mediator must record the method call, and
      its arguments, and then return rapidly and should avoid performing
      blocking operations. The values returned by the mediator object are
      opaque, and the client should not attempt to interpret the returned
      value. The value may be null (or null-like in the case of primitives) or
      contain implementation specific information. If the mediated method call
      has a return type, specifically it is non-void, then this object must be
      passed to the Async Service's <code>call</code> method when beginning
      the async invocation</para>

      <para>Async mediators should make a best-effort attempt to detect
      incorrect API usage from the client. If this incorrect usage is detected
      then the mediator object must throw an IllegalStateException when
      invoked. An example of incorrect usage that must be detected is when a
      client makes multiple invocations on a single mediator object from the
      same thread without making any calls to the Async Service.</para>

      <para>After a usage error has been detected and an IllegalStateException
      has been thrown the mediator object must be reset so that a subsequent
      invocation from the client thread can proceed normally.</para>
    </section>

    <section>
      <title>Thread Safety and Instance Sharing</title>

      <para>Async mediators, like instances of the Async Service, are required
      to be thread safe. Clients may therefore share mediator objects across
      threads, and can safely store them as instance fields. Whilst mediators
      are thread safe, if a client wishes to make an async invocation then the
      call to the mediator and the call to <xref linkend="org.osgi.service.async.Async.call--" xrefstyle="hyperlink"/> or
      <xref linkend="org.osgi.service.async.Async.call-R-" xrefstyle="hyperlink"/> must occur on the same thread. The returned
      Promise may then be shared between threads if required.</para>

      <para>Async mediators created from <code>ServiceReference</code> objects
      remain directly associated with the service reference and client bundle
      after creation. Clients should therefore not share mediator objects with
      other bundles. Instead each bundle should create its own
      mediator.</para>
    </section>
  </section>

  <section>
    <title>Fire and Forget Invocations</title>

    <para>The Async Service provides <xref linkend="org.osgi.service.async.Async.call--" xrefstyle="hyperlink"/> and
    <xref linkend="org.osgi.service.async.Async.call-R-" xrefstyle="hyperlink"/> methods for clients to use when they wish to
    receive results from asynchronous tasks. Clients that do not need the
    result can simply discard the returned Promise object. This, however, can
    be wasteful of resources. The act of resolving the Promise object may be
    expensive, for example it may involve serializing the return value over a
    network.</para>

    <para>To address this use case the Async Service provides the <xref linkend="org.osgi.service.async.Async.execute--" xrefstyle="hyperlink"/>
    method, which behaves similarly to <xref linkend="org.osgi.service.async.Async.call--" xrefstyle="hyperlink"/> and
    <xref linkend="org.osgi.service.async.Async.call-R-" xrefstyle="hyperlink"/>, but does not provide access to the eventual
    result. Instead the <xref linkend="org.osgi.service.async.Async.execute--" xrefstyle="hyperlink"/> method returns a <code>Promise</code> that
    indicates whether the fire-and-forget call is able to be successfully
    started.</para>

    <para>The returned Promise must be resolved with <code>null</code> if the
    asynchronous task begins executing successfully. There is no
    <emphasis>happens-before</emphasis> relationship required, meaning that if
    the Promise resolves successfully then the task may, or may not, have
    started or finished. The primary usage of the Promise is actually to
    detect failures. If the fire-and-forget task cannot be executed for some
    reason, for example the backing service has been unregistered, then the
    returned promise must be failed appropriately using the same rules as
    defined in <xref linkend="service.async-main.failures"/>. If the returned
    Promise is failed then the fire-and-forget task has not executed and will
    not execute in the future.</para>
  </section>

  <section>
    <title>Delegating to Asynchronous Implementations</title>

    <para>Some service APIs are already asynchronous in operation, and others
    are partly asynchronous, in that some methods run asynchronously and
    others do not. There are also services which have a synchronous API, but
    could run asynchronously because they are a proxy to another service. A
    good example of this kind of service is a remote service. Remote services
    are local views of a remote endpoint, and depending upon the
    implementation of the endpoint it may be possible to make the remote call
    asynchronously, optimizing the thread usage of any local asynchronous
    call.</para>

    <para>Services that already have some level of asynchronous support may
    advertise this to clients and to the Async Service by having their service
    object be an <code>instanceof</code> <xref linkend="org.osgi.service.async.delegate.AsyncDelegate" xrefstyle="hyperlink"/>. The service object can be cast to <xref linkend="org.osgi.service.async.delegate.AsyncDelegate" xrefstyle="hyperlink"/> to be used by the Async Service implementation, or
    by the client directly, to make an asynchronous call on the
    service.</para>

    <para>Because the Async Delegate behavior is transparently handled by the
    Async Service, clients of the Async Service do not need to know whether
    the service object is an <code>instanceof</code> <xref linkend="org.osgi.service.async.delegate.AsyncDelegate" xrefstyle="hyperlink"/> or not. Their usage pattern can remain
    unchanged.</para>

    <para>When making an async invocation, the Async Service must check to see
    whether the service object is an <code>instanceof</code> <xref linkend="org.osgi.service.async.delegate.AsyncDelegate" xrefstyle="hyperlink"/>. If the service object is an
    <code>instanceof</code> <xref linkend="org.osgi.service.async.delegate.AsyncDelegate" xrefstyle="hyperlink"/>, then the Async Service must attempt to delegate
    the asynchronous call. The exact delegation operation depends on whether a
    Promise result is required.</para>

    <section>
      <title>Obtaining a Promise from an Async Delegate</title>

      <para>If the result of the method invocation is needed by the client,
      then the Async Service must attempt to delegate to the <xref linkend="org.osgi.service.async.delegate.AsyncDelegate.async-Method-Object---" xrefstyle="hyperlink"/> method. The delegation proceeds as
      follows:</para>

      <itemizedlist>
        <listitem>
          <para>If the call to the Async Delegate returns a Promise, then the
          Promise returned by the Async Service must be resolved with that
          Promise.</para>
        </listitem>

        <listitem>
          <para>If the call to the Async Delegate throws an exception, then
          the Promise returned by the Async Service must be failed with the
          exception.</para>
        </listitem>

        <listitem>
          <para>If the Async Delegate is unable to optimize the call and
          returns <code>null</code> from the <xref linkend="org.osgi.service.async.delegate.AsyncDelegate.async-Method-Object---" xrefstyle="hyperlink"/> method, the Async Service must continue
          processing the async invocation, treating the service as a normal
          service object.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Delegating Fire and Forget Calls to an Async Delegate</title>

      <para>If the result of the method invocation is not needed by the
      client, then the Async Service must attempt to delegate to the <xref linkend="org.osgi.service.async.delegate.AsyncDelegate.execute-Method-Object---" xrefstyle="hyperlink"/> method. This gives the Async Delegate
      implementation the opportunity to further optimize its processing. The
      delegation proceeds as follows:</para>

      <itemizedlist>
        <listitem>
          <para>If the call to the Async Delegate returns <code>true</code>,
          then the Promise returned by the Async Service must be resolved with
          <code>null</code>.</para>
        </listitem>

        <listitem>
          <para>If the call to the Async Delegate throws an exception, then
          the Promise returned by the Async Service must be failed with the
          exception.</para>
        </listitem>

        <listitem>
          <para>If the Async Delegate is unable to optimize the call and
          returns <code>false</code> from the <xref linkend="org.osgi.service.async.delegate.AsyncDelegate.execute-Method-Object---" xrefstyle="hyperlink"/> method, the Async Service must continue
          processing the async invocation, treating the service as a normal
          service object.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Lifecycle for Service Objects When Delegating</title>

      <para>If an Async Delegate implementation accepts an asynchronous task,
      via a call to either <xref linkend="org.osgi.service.async.delegate.AsyncDelegate.execute-Method-Object---" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.async.delegate.AsyncDelegate.async-Method-Object---" xrefstyle="hyperlink"/>, then it is responsible for continuing to
      process the work until completion. This means that if the service
      implementing Async Delegate is unregistered for some reason, then the
      task must be properly cleaned up and succeed or fail as
      appropriate.</para>

      <para>If the Async Service implementation used a service reference to
      obtain the service, then it must release the service object after the
      task has been accepted. This means that if the service object is
      provided by a service factory, then the service object should take extra
      care not to destroy its internal state when released. The service object
      must remain valid until all executing asynchronous tasks associated with
      the service object are either completed or failed.</para>

      <para>If an Async Delegate implementation rejects an asynchronous task,
      by returning <code>false</code> or <code>null</code>, the Async Service
      implementation must take over the asynchronous invocation of the method.
      In this case, if the Async Service implementation used a service
      reference to obtain the service, the Async Service must not release the
      service object until the asynchronous task is completed.</para>

      <para>If an Async Delegate implementation throws an exception and the
      Async Service implementation used a service reference to obtain the
      service, then the service object must be released immediately.</para>
    </section>
  </section>

  <section xml:id="service.async-capabilities">
    <title>Capabilities</title>

    <para>Implementations of the Asynchronous Service specification must
    provide the following capabilities.</para>

    <itemizedlist>
      <listitem>
        <para>A capability in the <link linkend="service.namespaces-osgi.implementation.namespace"><code>osgi.implementation</code></link>
        namespace declaring the implemented specification to be
        <code>osgi.async</code>. This capability must also declare a uses
        constraint for the <code>org.osgi.service.async</code> and
        <code>org.osgi.service.async.delegate</code> packages. For
        example:</para>

        <programlisting>Provide-Capability: osgi.implementation;
    osgi.implementation="osgi.async";
    version:Version="1.0";
    uses:="org.osgi.service.async,org.osgi.service.async.delegate"</programlisting>

        <para>This capability must follow the rules defined for the <xref linkend="service.namespaces-osgi.implementation.namespace"/>.</para>
      </listitem>

      <listitem>
        <para>A capability in the <link linkend="service.namespaces-osgi.service.namespace"><code>osgi.service</code></link>
        namespace representing the <xref linkend="org.osgi.service.async.Async" xrefstyle="hyperlink"/>
        service. This capability must also declare a uses constraint for the
        <code>org.osgi.service.async</code> package. For example:</para>

        <programlisting>Provide-Capability: osgi.service;
    objectClass:List&lt;String&gt;="org.osgi.service.async.Async";
    uses:="org.osgi.service.async"</programlisting>

        <para>This capability must follow the rules defined for the <xref linkend="service.namespaces-osgi.service.namespace"/>.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="service.async-security">
    <title>Security</title>

    <para>Asynchronous Services implementations must be careful to avoid
    elevating the privileges of client bundles when calling services
    asynchronously, and also to avoid restricting the privileges of clients
    that are permitted to make a call. This means that the implementation
    must:</para>

    <itemizedlist>
      <listitem>
        <para>Be granted <code>AllPermission</code>. As the Async Service will
        always be on the stack when invoking a service object asynchronously
        it must be granted <code>AllPermission</code> so that it does not
        interfere with security any checks made by the service object.</para>
      </listitem>

      <listitem>
        <para>Establish the caller's <code>AccessControlContext</code> in a
        worker thread before starting to call the service object. This
        prevents a bundle from being able to call a service asynchronously
        that it would not normally be able to call. The
        <code>AccessControlContext</code> must be collected during any call to
        <xref linkend="org.osgi.service.async.Async.call--" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.service.async.Async.call-R-" xrefstyle="hyperlink"/>
        or <xref linkend="org.osgi.service.async.Async.execute--" xrefstyle="hyperlink"/>.</para>
      </listitem>

      <listitem>
        <para>Use a <code>doPrivileged</code> block when mediating a concrete
        type. A no-args constructor in a concrete type may perform actions
        that the client may not have permission to perform. This should not
        prevent the client from mediating the object, as the client is not
        directly performing these actions.</para>
      </listitem>

      <listitem>
        <para>If the mediator object was created using a service reference,
        then the Async Services implementation must use the client's bundle
        context when retrieving the target service. If the service lookup
        occurs on a worker thread, then the lookup must use the
        <code>AccessControlContext</code> collected during the call to <xref linkend="org.osgi.service.async.Async.call--" xrefstyle="hyperlink"/>,
        <xref linkend="org.osgi.service.async.Async.call-R-" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.service.async.Async.execute--" xrefstyle="hyperlink"/>. This prevents the client bundle from being
        able to make calls on a service object that they do not have
        permission to obtain, and ensures that an appropriately customized
        object is returned if the service is implemented using a service
        factory.</para>
      </listitem>
    </itemizedlist>

    <para>Further security considerations can be addressed using normal OSGi
    security rules. For example access to the Async Service can be controlled
    using <code>ServicePermission[...Async, GET]</code>.</para>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.async" xml:id="org.osgi.service.async" xml:base="../../generated/javadoc/docbook/org.osgi.service.async.xml">
   <title>org.osgi.service.async</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.async-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.async-version.number">1.0</edition>
   </info>
   <para>
Asynchronous Services Package Version 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.async; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.async; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.async.Async">
                  <code>Async</code>
               </link> - 
The Asynchronous Execution Service.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="Async" xml:id="org.osgi.service.async.Async">
      <title>public interface Async</title>
      <para>
The Asynchronous Execution Service. This can be used to make asynchronous
 invocations on OSGi services and objects through the use of a mediator
 object.
 
 </para>
      <para>
 Typical usage:
 
 </para>
      <programlisting>   Async async = ctx.getService(asyncRef);
   
   ServiceReference&lt;MyService&gt; ref = ctx.getServiceReference(MyService.class);
   
   MyService mediator = async.mediate(ref, MyService.class);
   
   Promise&lt;BigInteger&gt; result = async.call(mediator.getSumOverAllValues());</programlisting>
      <para>
 The <link linkend="org.osgi.util.promise.Promise">Promise</link> API allows callbacks to be made when asynchronous tasks
 complete, and can be used to chain Promises.
 
 </para>
      <para>
 Multiple asynchronous tasks can be started concurrently, and will run in
 parallel if the Async Service has threads available.</para>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="call(R)" xml:id="org.osgi.service.async.Async.call-R-">
         <title>public Promise&lt;R&gt; call(R r)</title>
         <formalpara role="parameter">
            <title>Type Arguments</title>
            <para>
               <code>&lt;R&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>r</title>
            <para>The return value of the mediated call, used for type
        information.</para>
         </formalpara>
         <para role="description">
Invoke the last method call registered by a mediated object as an
 asynchronous task. The result of the task can be obtained using the
 returned Promise.
 
 </para>
         <para>
 Typically the parameter for this method will be supplied inline like
 this:
 
 </para>
         <programlisting> ServiceReference&lt;I&gt; s = ...;
 I i = async.mediate(s, I.class);
 Promise&lt;String&gt; p = async.call(i.foo());</programlisting>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Promise which can be used to retrieve the result of the
         asynchronous task.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="call()" xml:id="org.osgi.service.async.Async.call--">
         <title>public Promise&lt;?&gt; call()</title>
         <para role="description">
Invoke the last method call registered by a mediated object as an
 asynchronous task. The result of the task can be obtained using the
 returned Promise.
 
 </para>
         <para>
 Generally it is preferable to use <link linkend="org.osgi.service.async.Async.call-R-">call(Object)</link> like this:
 
 </para>
         <programlisting> ServiceReference&lt;I&gt; s = ...;
 I i = async.mediate(s, I.class);
 Promise&lt;String&gt; p = async.call(i.foo());</programlisting>
         <para>
 However this pattern does not work for void methods. Void methods can
 therefore be handled like this:
 
 </para>
         <programlisting> ServiceReference&lt;I&gt; s = ...;
 I i = async.mediate(s, I.class);
 i.voidMethod()
 Promise&lt;?&gt; p = async.call();</programlisting>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Promise which can be used to retrieve the result of the
         asynchronous task.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="execute()" xml:id="org.osgi.service.async.Async.execute--">
         <title>public Promise&lt;Void&gt; execute()</title>
         <para role="description">
Invoke the last method call registered by a mediated object as a
 "fire-and-forget" asynchronous task. This method should be used by
 clients in preference to <link linkend="org.osgi.service.async.Async.call--">call()</link> and <link linkend="org.osgi.service.async.Async.call-R-">call(Object)</link> when
 no callbacks, or other features of <link linkend="org.osgi.util.promise.Promise">Promise</link>, are needed.
 
 </para>
         <para>
 The advantage of this method is that it allows for greater optimization
 of the underlying asynchronous task. Clients are therefore likely to see
 better performance when using this method compared to using
 <link linkend="org.osgi.service.async.Async.call-R-">call(Object)</link> or <link linkend="org.osgi.service.async.Async.call--">call()</link> and ignoring the returned
 Promise. The <link linkend="org.osgi.util.promise.Promise">Promise</link> returned by this method is different from
 the Promise returned by <link linkend="org.osgi.service.async.Async.call-R-">call(Object)</link> or <link linkend="org.osgi.service.async.Async.call--">call()</link>, in that
 the returned Promise will resolve when the fire-and-forget task is
 successfully started, or fail if the task cannot be started. Note that
 there is no <emphasis>happens-before</emphasis> relationship and the returned Promise
 may resolve before or after the fire-and-forget task starts, or
 completes.
 
 </para>
         <para>
 Typically this method is used like <link linkend="org.osgi.service.async.Async.call--">call()</link>:
 
 </para>
         <programlisting> ServiceReference&lt;I&gt; s = ...;
 I i = async.mediate(s, I.class);
 i.someMethod()
 Promise&lt;Void&gt; p = async.execute();</programlisting>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Promise representing whether the fire-and-forget task was able
         to start.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="mediate(T,Class)" xml:id="org.osgi.service.async.Async.mediate-T-Class-">
         <title>public T mediate(T target,Class&lt;T&gt; iface)</title>
         <formalpara role="parameter">
            <title>Type Arguments</title>
            <para>
               <code>&lt;T&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>target</title>
            <para>The service object to mediate.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>iface</title>
            <para>The type that the mediated object should provide.</para>
         </formalpara>
         <para role="description">
Create a mediator for the specified object. The mediator is a generated
 object that registers the method calls made against it. The registered
 method calls can then be run asynchronously using either the
 <link linkend="org.osgi.service.async.Async.call-R-">call(Object)</link>, <link linkend="org.osgi.service.async.Async.call--">call()</link>, or <link linkend="org.osgi.service.async.Async.execute--">execute()</link> method.
 
 </para>
         <para>
 The values returned by method calls made on a mediated object are opaque
 and should not be interpreted.
 
 </para>
         <para>
 Normal usage:
 
 </para>
         <programlisting> I s = ...;
 I i = async.mediate(s, I.class);
 Promise&lt;String&gt; p = async.call(i.foo());</programlisting>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A mediator for the service object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the type represented by iface cannot
         be mediated.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="mediate(ServiceReference,Class)" xml:id="org.osgi.service.async.Async.mediate-ServiceReference-Class-">
         <title>public T mediate(ServiceReference&lt;? extends T&gt; target,Class&lt;T&gt; iface)</title>
         <formalpara role="parameter">
            <title>Type Arguments</title>
            <para>
               <code>&lt;T&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>target</title>
            <para>The service reference to mediate.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>iface</title>
            <para>The type that the mediated object should provide.</para>
         </formalpara>
         <para role="description">
Create a mediator for the specified service. The mediator is a generated
 object that registers the method calls made against it. The registered
 method calls can then be run asynchronously using either the
 <link linkend="org.osgi.service.async.Async.call-R-">call(Object)</link>, <link linkend="org.osgi.service.async.Async.call--">call()</link>, or <link linkend="org.osgi.service.async.Async.execute--">execute()</link> method.
 
 </para>
         <para>
 The values returned by method calls made on a mediated object are opaque
 and should not be interpreted.
 
 </para>
         <para>
 This method differs from <link linkend="org.osgi.service.async.Async.mediate-T-Class-">mediate(Object, Class)</link> in that it can
 track the availability of the specified service. This is recommended as
 the preferred option for mediating OSGi services as asynchronous tasks
 may not start executing until some time after they are requested.
 Tracking the validity of the <link linkend="org.osgi.framework.ServiceReference">ServiceReference</link> for the service
 ensures that these tasks do not proceed with an invalid object.
 
 </para>
         <para>
 Normal usage:
 
 </para>
         <programlisting> ServiceReference&lt;I&gt; s = ...;
 I i = async.mediate(s, I.class);
 Promise&lt;String&gt; p = async.call(i.foo());</programlisting>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A mediator for the service object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the type represented by iface cannot
         be mediated.   </para>
         </formalpara>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.service.async.delegate" xml:id="org.osgi.service.async.delegate" xml:base="../../generated/javadoc/docbook/org.osgi.service.async.delegate.xml">
   <title>org.osgi.service.async.delegate</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.async.delegate-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.async.delegate-version.number">1.0</edition>
   </info>
   <para>
Asynchronous Services Delegation Package Version 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package contains only
 interfaces that are implemented by consumers.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.async.delegate; version="[1.0,2.0)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.async.delegate.AsyncDelegate">
                  <code>AsyncDelegate</code>
               </link> - 
This interface is used by services to allow them to optimize Asynchronous
 calls where they are capable of executing more efficiently.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="AsyncDelegate" xml:id="org.osgi.service.async.delegate.AsyncDelegate">
      <title>public interface AsyncDelegate</title>
      <para>
This interface is used by services to allow them to optimize Asynchronous
 calls where they are capable of executing more efficiently.
 
 </para>
      <para>
 This may mean that the service has access to its own thread pool, or that it
 can delegate work to a remote node, or act in some other way to reduce the
 load on the Asynchronous Services implementation when making an asynchronous
 call.</para>
      <section role="method" xreflabel="async(Method,Object[])" xml:id="org.osgi.service.async.delegate.AsyncDelegate.async-Method-Object---">
         <title>public Promise&lt;?&gt; async(Method m,Object[] args) throws Exception</title>
         <formalpara role="parameter">
            <title>m</title>
            <para>The method to be asynchronously invoked.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>args</title>
            <para>The arguments to be used to invoke the method.</para>
         </formalpara>
         <para role="description">
Invoke the specified method as an asynchronous task with the specified
 arguments.
 
 </para>
         <para>
 This method can be used by clients, or the Async Service, to optimize
 Asynchronous execution of methods.
 
 </para>
         <para>
 When called, this method should invoke the supplied method using the
 supplied arguments asynchronously, returning a Promise that can be used
 to access the result.
 
 </para>
         <para>
 If the method cannot be executed asynchronously by this method then
 <code>null</code> must be returned.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Promise representing the asynchronous result, or <code>null</code>
         if this method cannot be asynchronously invoked.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception should be thrown only if there was a
         serious error that prevented the asynchronous task from starting.
         For example, the specified method does not exist on this object.
         Exceptions must not be thrown to indicate that the call does not
         support asynchronous invocation. Instead this method must return
         <code>null</code>. Exceptions must also not be thrown to indicate a
         failure from the execution of the underlying method. This must be
         handled by failing the returned Promise.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="execute(Method,Object[])" xml:id="org.osgi.service.async.delegate.AsyncDelegate.execute-Method-Object---">
         <title>public boolean execute(Method m,Object[] args) throws Exception</title>
         <formalpara role="parameter">
            <title>m</title>
            <para>The method to be asynchronously invoked.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>args</title>
            <para>The arguments to be used to invoke the method.</para>
         </formalpara>
         <para role="description">
Invoke the specified method as a "fire-and-forget" asynchronous task with
 the specified arguments.
 
 </para>
         <para>
 This method can be used by clients, or the Async Service, to optimize
 Asynchronous execution of methods.
 
 </para>
         <para>
 When called, this method should invoke the specified method using the
 specified arguments asynchronously. This method differs from
 <link linkend="org.osgi.service.async.delegate.AsyncDelegate.async-Method-Object---">async(Method, Object[])</link> in that it does not return a Promise.
 This method therefore allows the implementation to perform more
 aggressive optimizations because the end result of the invocation does
 not need to be returned to the caller.
 
 </para>
         <para>
 If the method cannot be executed asynchronously by this method then
 <code>false</code> must be returned.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the asynchronous execution request has been
         accepted, or <code>false</code> if this method cannot be
         asynchronously invoked by the AsyncDelegate.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– An exception should be thrown only if there was a
         serious error that prevented the asynchronous task from starting.
         For example, the specified method does not exist on this object.
         Exceptions must not be thrown to indicate that the call does not
         support asynchronous invocation. Instead this method must return
         <code>false</code>. Exceptions must also not be thrown to indicate a
         failure from the execution of the underlying method.   </para>
         </formalpara>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed><title><xref linkend="intro.core.release" xrefstyle="template:%t"/></title>http://www.osgi.org/Specifications/HomePage</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="140" revision="$Id: 4f3277d57789eacff9a8c6fca0986e244106d0af $" version="5" xml:id="service.http.whiteboard" xml:base="../140/service.http.whiteboard.xml">
  <title>Http Whiteboard Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.http.whiteboard-version" linkend="org.osgi.service.http.whiteboard"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>Servlets have become a popular and widely supported mechanism for
    providing dynamic content on the Internet. While servlets are defined in
    the <xref linkend="service.http.whiteboard-i21217577"/>, the OSGi Http
    Whiteboard Specification provides a light and convenient way of using
    servlets, servlet filters, servlet listeners and web resources in an OSGi
    environment through the use of the <xref linkend="service.http.whiteboard-whiteboard.pattern.ref"/>.</para>

    <para>The Http Whiteboard specification supports:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Registering Servlets</emphasis> - Registering a
        servlet in the Service Registry makes it available to be bound to an
        endpoint to serve content over the network.</para>
      </listitem>

      <listitem>
        <para><emphasis>Registering Servlet Filters</emphasis> - Servlet
        filters support pre- and post-processing of servlet requests and
        responses. Servlet filters can be registered in the Service Registry
        to include them in the handling pipeline.</para>
      </listitem>

      <listitem>
        <para><emphasis>Registering Resources</emphasis> - Resources such as
        HTML files, JavaScript, image files, and other static resources can be
        made available over the network by registering resource
        services.</para>
      </listitem>

      <listitem>
        <para><emphasis>Registering Servlet Listeners</emphasis> - The servlet
        specification defines a variety of listeners, which receive callbacks
        when certain events take place.</para>
      </listitem>
    </itemizedlist>

    <para>Implementations of this specification can support the following
    versions of the HTTP protocol:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="service.http.whiteboard-i21231452"/></para>
      </listitem>

      <listitem>
        <para><xref linkend="service.http.whiteboard-i21215926"/></para>
      </listitem>

      <listitem>
        <para><xref linkend="service.http.whiteboard-http2"/></para>
      </listitem>
    </itemizedlist>

    <para>Alternatively, implementations of this service can support other
    protocols if these protocols can conform to the semantics of the Java
    Servlet API.</para>

    <para>Http Whiteboard implementations must support version 3.1 of the Java
    Servlet API.</para>

    <section>
      <title>Entities</title>

      <para>This specification defines the following entities:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Http Whiteboard service</emphasis> - An object
          registered in the Service Registry under one of the Whiteboard
          service interfaces defined by this specification.</para>
        </listitem>

        <listitem>
          <para><emphasis>Http Whiteboard implementation</emphasis> - An
          implementation that processes Http Whiteboard services.</para>
        </listitem>

        <listitem>
          <para><emphasis>Http Service Runtime service</emphasis> - Service
          providing runtime introspection into the Http Whiteboard
          implementation.</para>
        </listitem>

        <listitem>
          <para><emphasis>Listener</emphasis> - Various listeners can be
          registered to receive notifications about servlet or Http Session
          events.</para>
        </listitem>

        <listitem>
          <para><emphasis>Resource Service</emphasis> - A service thats binds
          static resources.</para>
        </listitem>

        <listitem>
          <para><emphasis>Servlet</emphasis> - Component that dynamically
          generates web pages or other resources provided over the
          network.</para>
        </listitem>

        <listitem>
          <para><emphasis>Servlet Context Helper</emphasis> - A service to
          control the behavior of the Servlet Context.</para>
        </listitem>

        <listitem>
          <para><emphasis>Servlet Filter</emphasis> - Can be used to augment
          or transform web resources or for cross-cutting functionality such
          as security, common widgets or otherwise.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>Http Whiteboard Overview Diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.313in" contentwidth="5.496in" fileref="overall.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section xml:id="service.http.whiteboard.servletcontext">
    <title>The Servlet Context</title>

    <para>The servlet specification defines the <code>ServletContext</code>
    which is provided to servlets at runtime by the container. Whiteboard
    services defined by this specification are also provided with a
    <code>ServletContext</code>. The behavior of this Servlet Context can be
    influenced by providing a <xref linkend="org.osgi.service.http.context.ServletContextHelper" xrefstyle="hyperlink"/> service. A custom
    <code>ServletContextHelper</code> can provide resources, mime-types,
    handle security and supports a number of methods from the
    <code>ServletContext</code>.</para>

    <para>The Http Whiteboard implementation must create a separate
    <code>ServletContext</code> instance for each
    <code>ServletContextHelper</code> service. Whiteboard services can be
    associated with the Servlet Context Helper by using the
    <code>osgi.http.whiteboard.context.select</code> property. If this
    property is not set, the <emphasis>default</emphasis> Servlet Context
    Helper is used.</para>

    <para>To achieve the required behavior for
    <code>ServletContext.getClassLoader()</code> each bundle must be provided
    with a separate Servlet Context instance to serve the classloader of the
    Whiteboard services for that bundle. For more information see
    <code>getClassLoader()</code> in <xref linkend="service.http.whiteboard.servletcontext.methods" xrefstyle="template:Table %n on page %p"/>.</para>

    <para>Some implementations of the <code>ServletContextHelper</code> may be
    implemented using a Service Factory, for example to provide resources from
    the associated bundle, as the <emphasis>default</emphasis> implementation
    does. Therefore the Whiteboard implementation must get the Servlet Context
    Helper using the Bundle Context of the bundle that registered the
    Whiteboard service.</para>

    <para>Some environments may use <xref linkend="service.http.whiteboard-service.hook.ref"/> to isolate
    <code>ServletContextHelper</code> service registrations. For example,
    <xref linkend="service.subsystem"/>. The Whiteboard implementation must
    check that the bundle registering the Whiteboard service has the ability
    to find the <code>ServletContextHelper</code> service before allowing the
    Whiteboard service to bind to the Servlet Context Helper. This can be done
    by calling one of the <code>getServiceReferences</code> methods on the
    Bundle Context of bundle that registered the Whiteboard service.</para>

    <table pgwide="1" xml:id="service.http.whiteboard.servletcontext.helper.properties">
      <title>Service registration properties for
      <code>ServletContextHelper</code> services.</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="2.2*"/>

        <colspec colnum="2" colwidth="0.6*"/>

        <colspec colnum="3" colwidth="3.5*"/>

        <thead>
          <row>
            <entry>Service Property Name</entry>

            <entry>Type</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><para><code>osgi.http.whiteboard.context.name</code></para></entry>

            <entry><para><code>String</code></para><para><emphasis>required</emphasis></para></entry>

            <entry><para>Name of the Servlet Context Helper. This name can be
            referred to by Whiteboard services via the
            <code>osgi.http.whiteboard.context.select</code> property. The
            syntax of the name is the same as the syntax for a Bundle Symbolic
            Name. The default Servlet Context Helper is named
            <code>default</code>. To override the default, register a custom
            <code>ServletContextHelper</code> service with the name
            <code>default</code>. If multiple Servlet Context Helper services
            are registered with the same name, the one with the highest
            Service Ranking is used. In case of a tie, the service with the
            lowest service ID wins. In other words, the normal OSGi service
            ranking applies.</para> <para>Registrations with an invalid or
            unspecified name are not used and reflected in the failure DTOs.
            See <xref linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_NAME" xrefstyle="hyperlink"/>.</para></entry>
          </row>

          <row>
            <entry><para><code>osgi.http.whiteboard.context.path</code></para></entry>

            <entry><para><code>String</code></para><para><emphasis>required</emphasis></para></entry>

            <entry><para>Additional prefix to the context path for servlets.
            This property is mandatory. Valid characters are specified in IETF
            RFC 3986, section 3.3. The context path of the default Servlet
            Context Helper is <code>/</code>. A custom default Servlet Context
            Helper may use an alternative path. If the path is invalid or
            unspecified, the service is not used and reflected in the failure
            DTOs. See <xref linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_PATH" xrefstyle="hyperlink"/>.</para></entry>
          </row>

          <row>
            <entry><code>context.init.*</code></entry>

            <entry><para><code>String</code></para><para><emphasis>optional</emphasis></para></entry>

            <entry><para>Properties starting with this prefix are provided as
            init parameters through the
            <code>ServletContext.getInitParameter()</code> and
            <code>ServletContext.getInitParameterNames()</code> methods. The
            <code>context.init.</code> prefix is removed from the parameter
            name. See <xref linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_INIT_PARAM_PREFIX" xrefstyle="hyperlink"/>.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Multiple <code>ServletContextHelper</code> services can have
    identical or overlapping <code>osgi.http.whiteboard.context.path</code>
    values. A matching servlet or resource is located as follows: <orderedlist>
        <listitem>
          <para>The Servlet Context Helper service with the longest matching
          path is matched first.</para>
        </listitem>

        <listitem>
          <para>In the case of two Servlet Context Helpers with the same path,
          the service with the highest ranking is searched first for a match.
          In the case of a tie, the lowest service ID is searched
          first.</para>
        </listitem>
      </orderedlist></para>

    <para>For example, if two <code>ServletContextHelper</code> services are
    registered as follows <programlisting>osgi.http.whiteboard.context.path = /foo
osgi.http.whiteboard.context.path = /foo/bar</programlisting> Then a request
    for <code>http://localhost/foo/bar/someServlet</code> is looked up in the
    following order: <orderedlist>
        <listitem>
          <para><code>/foo/bar</code> context looking for a pattern to match
          <code>/someServlet</code></para>
        </listitem>

        <listitem>
          <para><code>/foo</code> context looking for a pattern to match
          <code>/bar/someServlet</code></para>
        </listitem>
      </orderedlist> Note that whole path segments must match. Therefore the
    following request can only be handled by the Servlet Context Helper
    registered under the /foo path:
    <code>http://localhost/foo/bars/someOtherServlet</code>.</para>

    <para>For details on the association process between servlet, servlet
    filter, resource and listener services and the
    <code>ServletContextHelper</code> see <xref linkend="service.http.whiteboard.common.properties"/>.</para>

    <para>If a Servlet Context Helper can not be used, for example because it
    is shadowed by another Servlet Context Helper service with the same name,
    but with a higher ranking, this is reflected in the <xref linkend="org.osgi.service.http.runtime.dto.FailedServletContextDTO" xrefstyle="hyperlink"/>. Similarly, if an alternative <code>default</code>
    Servlet Context Helper is provided, the default Servlet Context Helper
    provided by the Http Whiteboard implementation is not used and represented
    in a failure DTO.</para>

    <para>An example Servlet Context Helper defined using Declarative Services
    annotations can be found below, it prefixes the path with
    <code>/myapp</code> for any associated whiteboard service. Additionally,
    it serves static resources from a non-standard location, a content
    delivery network. Other methods use the default
    <code>ServletContextHelper</code> implementation.</para>

    <programlisting>@Component(service = ServletContextHelper.class,
   scope = ServiceScope.BUNDLE,     
   property = {
       "osgi.http.whiteboard.context.name=my-context",
       "osgi.http.whiteboard.context.path=/myapp"})
public class CDNServletContextHelper extends ServletContextHelper {
    public URL getResource(String name) {
        try {
            return new URL("http://acmecdn.com/myapp/" + name);
        } catch (MalformedURLException e) {
            return null;
        }
    }
}</programlisting>

    <para>The following sections outline the methods a custom <xref linkend="org.osgi.service.http.context.ServletContextHelper" xrefstyle="hyperlink"/> can override and the behavior of the
    <emphasis>default</emphasis> implementation.</para>

    <section>
      <title>String getMimeType(String)</title>

      <para>Called to provide the MIME type for a resource.</para>

      <para><emphasis>Default Behavior</emphasis> - Always returns
      <code>null</code>.</para>
    </section>

    <section>
      <title>String getRealPath(String)</title>

      <para>Called to support the <code>ServletContext.getRealPath()</code>
      method.</para>

      <para><emphasis>Default Behavior</emphasis> - Always returns
      <code>null</code>.</para>
    </section>

    <section>
      <title>URL getResource(String)</title>

      <para>Obtain a URL for a given resource request.</para>

      <para><emphasis>Default Behavior</emphasis> - Assumes the resources are
      in the bundle registering the Whiteboard service. Its
      <code>Bundle.getEntry()</code> method is called to obtain a URL to the
      resource. The default Servlet Context Helper implementation assumes the
      path to be relative to the bundle's root.</para>
    </section>

    <section>
      <title>Set&lt;String&gt; getResourcePaths(String)</title>

      <para>Called to support the
      <code>ServletContext.getResourcePaths()</code> method. Returns all the
      matching resources for the path.</para>

      <para><emphasis>Default Behavior</emphasis> - Assumes the resources are
      in the bundle registering the Whiteboard service. Its
      <code>Bundle.findEntries()</code> method is called to obtain the
      listing.</para>
    </section>

    <section>
      <title>boolean handleSecurity(HttpServletRequest,
      HttpServletResponse)</title>

      <para>This method is invoked to handle implementation-defined security
      on the request. It is invoked before the request is sent to the
      filter-servlet pipeline.</para>

      <para><emphasis>Default Behavior</emphasis> - Always returns
      <code>true</code>.</para>
    </section>

    <section>
      <title>Behavior of the Servlet Context</title>

      <para>The <code>ServletContext</code> provided to Whiteboard services is
      based on the associated <code>ServletContextHelper</code>, Whiteboard
      service registration properties and the underlying servlet
      container.</para>

      <para>Methods to programmatically add servlets, servlet filters and
      listeners are not supported on the <code>ServletContext</code>. Such
      functionality is available by registering these entities as Whiteboard
      services.</para>

      <table xml:id="service.http.whiteboard.servletcontext.methods">
        <title>Behavior of <code>ServletContext</code> methods.</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="2.5*"/>

          <colspec colnum="2" colwidth="0.7*"/>

          <colspec colnum="3" colwidth="3.3*"/>

          <thead>
            <row>
              <entry>ServletContext method</entry>

              <entry>Since</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>addFilter(...)</code></entry>

              <entry><para>3.0</para></entry>

              <entry><para>Throws
              <code>UnsupportedOperationException</code>.</para></entry>
            </row>

            <row>
              <entry><code>addListener(...)</code></entry>

              <entry><para>3.0</para></entry>

              <entry><para>Throws
              <code>UnsupportedOperationException</code>.</para></entry>
            </row>

            <row>
              <entry><code>addServlet(...)</code></entry>

              <entry><para>3.0</para></entry>

              <entry><para>Throws
              <code>UnsupportedOperationException</code>.</para></entry>
            </row>

            <row>
              <entry><code>createFilter(Class)</code></entry>

              <entry><para>3.0</para></entry>

              <entry><para>Throws
              <code>UnsupportedOperationException</code>.</para></entry>
            </row>

            <row>
              <entry><code>createListener(Class)</code></entry>

              <entry><para>3.0</para></entry>

              <entry><para>Throws
              <code>UnsupportedOperationException</code>.</para></entry>
            </row>

            <row>
              <entry><code>createServlet(Class)</code></entry>

              <entry><para>3.0</para></entry>

              <entry><para>Throws
              <code>UnsupportedOperationException</code>.</para></entry>
            </row>

            <row>
              <entry><code>declareRoles(String ...)</code></entry>

              <entry><para>3.0</para></entry>

              <entry><para>Throws
              <code>UnsupportedOperationException</code>.</para></entry>
            </row>

            <row>
              <entry><code>getAttribute(String)</code></entry>

              <entry><para>2.0</para></entry>

              <entry><para>Stored per <code>ServletContextHelper</code>. The
              Servlet Context keeps a set of attributes per Servlet Context
              Helper.</para></entry>
            </row>

            <row>
              <entry><code>getAttributeNames()</code></entry>

              <entry><para>2.1</para></entry>

              <entry><para>Stored per <code>ServletContextHelper</code>. The
              Servlet Context keeps a set of attributes per Servlet Context
              Helper.</para></entry>
            </row>

            <row>
              <entry><code>getClassLoader()</code></entry>

              <entry><para>3.0</para></entry>

              <entry><para>Returns the class loader of the bundle that
              registered the Whiteboard service. An implementation of this
              specification can achieve this by returning separate façades of
              the ServletContext to each Whiteboard service. Each façade
              accesses the Whiteboard service's Bundle Wiring to obtain its
              classloader. </para></entry>
            </row>

            <row>
              <entry><code>getContext(String)</code></entry>

              <entry><para>2.1</para></entry>

              <entry><para>Backed by the Servlet Container.</para></entry>
            </row>

            <row>
              <entry><code>getContextPath()</code></entry>

              <entry><para>2.5</para></entry>

              <entry><para>Return the web context path of the Servlet Context.
              This takes into account the
              <code>osgi.http.whiteboard.context.path</code> of the Servlet
              Context Helper and the path of the Http runtime.</para></entry>
            </row>

            <row>
              <entry><code>getDefaultSessionTrackingModes()</code></entry>

              <entry><para>3.0</para></entry>

              <entry><para>Backed by the Servlet Container.</para></entry>
            </row>

            <row>
              <entry><code>getEffectiveMajorVersion()</code></entry>

              <entry><para>3.0</para></entry>

              <entry><para>Backed by the Servlet Container.</para></entry>
            </row>

            <row>
              <entry><code>getEffectiveMinorVersion()</code></entry>

              <entry><para>3.0</para></entry>

              <entry><para>Backed by the Servlet Container.</para></entry>
            </row>

            <row>
              <entry><code>getEffectiveSessionTrackingModes()</code></entry>

              <entry><para>3.0</para></entry>

              <entry><para>Backed by the Servlet Container.</para></entry>
            </row>

            <row>
              <entry><code>getFilterRegistration(String)</code></entry>

              <entry><para>3.0</para></entry>

              <entry><para>Backed by the Servlet Container.</para></entry>
            </row>

            <row>
              <entry><code>getFilterRegistrations()</code></entry>

              <entry><para>3.0</para></entry>

              <entry><para>Backed by the Servlet Container.</para></entry>
            </row>

            <row>
              <entry><code>getInitParameter(String)</code></entry>

              <entry><para>2.2</para></entry>

              <entry><para>From <code>context.init.*</code> service
              registration properties.</para></entry>
            </row>

            <row>
              <entry><code>getInitParameterNames()</code></entry>

              <entry><para>2.2</para></entry>

              <entry><para>From <code>context.init.*</code> service
              registration properties.</para></entry>
            </row>

            <row>
              <entry><code>getJspConfigDescriptor()</code></entry>

              <entry><para>3.0</para></entry>

              <entry><para>Returns <code>null</code>.</para></entry>
            </row>

            <row>
              <entry><code>getMajorVersion()</code></entry>

              <entry><para>2.1</para></entry>

              <entry><para>Backed by the Servlet Container.</para></entry>
            </row>

            <row>
              <entry><code>getMimeType(String)</code></entry>

              <entry><para>2.1</para></entry>

              <entry><para>Backed by the
              <code>ServletContextHelper</code>.</para></entry>
            </row>

            <row>
              <entry><code>getMinorVersion()</code></entry>

              <entry><para>2.1</para></entry>

              <entry><para>Backed by the Servlet Container.</para></entry>
            </row>

            <row>
              <entry><code>getNamedDispatcher(String)</code></entry>

              <entry><para>2.2</para></entry>

              <entry><para>Provides the Whiteboard servlet with the specified
              name, provided through the
              <code>osgi.http.whiteboard.servlet.name</code> property, if
              associated with this Servlet Context Helper. If multiple
              servlets have the same name and are associated with this Servlet
              Context Helper then the highest ranked servlet is used. In the
              case of a tie, the one with the lowest service ID is
              used.</para></entry>
            </row>

            <row>
              <entry><code>getRealPath(String)</code></entry>

              <entry><para>2.0</para></entry>

              <entry><para>Backed by the
              <code>ServletContextHelper</code>.</para></entry>
            </row>

            <row>
              <entry><code>getResource(String)</code></entry>

              <entry><para>2.1</para></entry>

              <entry><para>Backed by the
              <code>ServletContextHelper</code>.</para></entry>
            </row>

            <row>
              <entry><code>getRequestDispatcher(String)</code></entry>

              <entry><para>2.1</para></entry>

              <entry><para>If the argument matches a servlet associated with
              this Servlet Context Helper, this will be
              returned.</para></entry>
            </row>

            <row>
              <entry><code>getResourceAsStream(String)</code></entry>

              <entry><para>2.1</para></entry>

              <entry><para>Backed by the
              <code>ServletContextHelper</code>.</para></entry>
            </row>

            <row>
              <entry><code>getResourcePaths(String)</code></entry>

              <entry><para>2.3</para></entry>

              <entry><para>Backed by the
              <code>ServletContextHelper</code>.</para></entry>
            </row>

            <row>
              <entry><code>getServlet(String)</code></entry>

              <entry><para>2.0</para></entry>

              <entry><para>Deprecated. Backed by the Servlet
              Container.</para></entry>
            </row>

            <row>
              <entry><code>getServletContextName()</code></entry>

              <entry><para>2.2</para></entry>

              <entry><para>The name of the <code>ServletContextHelper</code>
              provided via the <code>osgi.http.whiteboard.context.name</code>
              service property.</para></entry>
            </row>

            <row>
              <entry><code>getServletNames()</code></entry>

              <entry><para>2.0</para></entry>

              <entry><para>Deprecated. Backed by the Servlet
              Container.</para></entry>
            </row>

            <row>
              <entry><code>getServletRegistration(String)</code></entry>

              <entry><para>3.0</para></entry>

              <entry><para>Backed by the Servlet Container.</para></entry>
            </row>

            <row>
              <entry><code>getServletRegistrations()</code></entry>

              <entry><para>3.0</para></entry>

              <entry><para>Backed by the Servlet Container.</para></entry>
            </row>

            <row>
              <entry><code>getServlets()</code></entry>

              <entry><para>2.0</para></entry>

              <entry><para>Deprecated. Backed by the Servlet
              Container.</para></entry>
            </row>

            <row>
              <entry><code>getServerInfo()</code></entry>

              <entry><para>2.0</para></entry>

              <entry><para>Backed by the Servlet Container.</para></entry>
            </row>

            <row>
              <entry><code>getSessionCookieConfig()</code></entry>

              <entry><para>3.0</para></entry>

              <entry><para>Returns a <code>SessionCookieConfig</code> object.
              This object is read-only and all setters throw a
              <code>IllegalStateException</code>.</para></entry>
            </row>

            <row>
              <entry><code>getVirtualServerName()</code></entry>

              <entry><para>3.1</para></entry>

              <entry><para>Backed by the Servlet Container.</para></entry>
            </row>

            <row>
              <entry><code>log(String)</code></entry>

              <entry><para>2.0</para></entry>

              <entry><para>Backed by the Servlet Container.</para></entry>
            </row>

            <row>
              <entry><code>log(Exception, String)</code></entry>

              <entry><para>2.0</para></entry>

              <entry><para>Deprecated. Backed by the Servlet
              Container.</para></entry>
            </row>

            <row>
              <entry><code>log(String, Throwable)</code></entry>

              <entry><para>2.1</para></entry>

              <entry><para>Backed by the Servlet Container.</para></entry>
            </row>

            <row>
              <entry><code>removeAttribute(String)</code></entry>

              <entry><para>2.1</para></entry>

              <entry><para>Stored per <code>ServletContextHelper</code>. The
              Servlet Context keeps a set of attributes per Servlet Context
              Helper.</para></entry>
            </row>

            <row>
              <entry><code>setAttribute(String, Object)</code></entry>

              <entry><para>2.1</para></entry>

              <entry><para>Stored per <code>ServletContextHelper</code>. The
              Servlet Context keeps a set of attributes per Servlet Context
              Helper.</para></entry>
            </row>

            <row>
              <entry><code>setInitParameter(String, String)</code></entry>

              <entry><para>3.0</para></entry>

              <entry><para>Throws <code>IllegalStateException</code>. The
              <code>ServletContext</code> has already been
              initialized.</para></entry>
            </row>

            <row>
              <entry><code>setSessionTrackingModes(Set)</code></entry>

              <entry><para>3.0</para></entry>

              <entry><para>Throws <code>IllegalStateException</code>. The
              <code>ServletContext</code> has already been
              initialized.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Relation to the Servlet Container</title>

      <para>Implementations of this specification will often be backed by
      existing servlet containers or a Java EE application server. There may
      also exist implementations which bridge into a servlet container into
      which the OSGi Framework has been deployed as a Web Application.</para>

      <para>In bridged situations the Http Whiteboard implementation will live
      in one servlet context and all Whiteboard services registered by this
      implementation will be backed by the same underlying Servlet Context.
      However, to exhibit the behavior described in <xref linkend="service.http.whiteboard.servletcontext.methods" xrefstyle="template:Table %n on page %p"/> different Servlet Context
      objects may be required. Therefore an implementation of this
      specification may need to create additional <code>ServletContext</code>
      objects which delegate certain functionality to the
      <code>ServletContextHelper</code> and other functionality to the Servlet
      Context of the Web Application, yet further functionality can be
      obtained otherwise. In such cases the relationship may look like the
      below figure.</para>

      <figure pgwide="1">
        <title>Servlet Context entities and their relation</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.313in" contentwidth="6in" fileref="servletcontext.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Where <xref linkend="service.http.whiteboard.servletcontext.methods" xrefstyle="template:Table %n on page %p"/> states <emphasis>Backed by
      the Servlet Container</emphasis> and the Http Whiteboard implementation
      is deployed in bridged mode, the API call can be forwarded to the
      top-level Servlet Context. If the Http Whiteboard implementation is not
      deployed in bridged mode, it must provide another means to handle these
      APIs.</para>

      <para>In bridged deployments, the implementation needs to ensure the
      following: <orderedlist>
          <listitem>
            <para>That Whiteboard services are provided with the correct
            <code>ServletContext</code> keeping in mind that each distinct
            <code>ServletContextHelper</code> should be associated with a
            separate <code>ServletContext</code> object, which in turn may
            delegate certain requests to the underlying shared
            <code>ServletContext</code> as described in the table
            above.</para>
          </listitem>

          <listitem>
            <para>That Http Sessions are not shared amongst servlets
            registered with different <code>ServletContextHelper</code>s. That
            is, <code>HttpRequest.getSession()</code> calls must provide
            different sessions per associated
            <code>ServletContextHelper</code>. Http Sessions are defined in
            chapter 7 of the <xref linkend="service.http.whiteboard-i21217577"/>.</para>
          </listitem>
        </orderedlist></para>
    </section>
  </section>

  <section xml:id="service.http.whiteboard.common.properties">
    <title>Common Whiteboard Properties</title>

    <para>Whiteboard servlet, servlet filter, resource and listener services
    support common service registration properties to associate them with a
    <code>ServletContextHelper</code> and/or a Http Whiteboard
    implementation.</para>

    <table xml:id="service.http.whiteboard.common.properties.table">
      <title>Common properties</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="2.5*"/>

        <colspec colnum="2" colwidth="0.7*"/>

        <colspec colnum="3" colwidth="3.3*"/>

        <thead>
          <row>
            <entry>Service Property Name</entry>

            <entry>Type</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.http.whiteboard.context.select</code></entry>

            <entry><para><code>String</code></para><para><emphasis>optional</emphasis></para></entry>

            <entry><para>An LDAP-style filter to select the associated <xref linkend="org.osgi.service.http.context.ServletContextHelper" xrefstyle="hyperlink"/> service to use. Any service property of
            the Servlet Context Helper can be filtered on. If this property is
            missing the default Servlet Context Helper is
            used.</para><para>For example, to select a Servlet Context Helper
            with name <code>myCTX</code> provide the following
            value:</para><programlisting>(osgi.http.whiteboard.context.name=myCTX)</programlisting><para>To
            select all Servlet Context Helpers provide the following
            value:</para><programlisting>(osgi.http.whiteboard.context.name=*)</programlisting><para>If
            no matching context exists this is reflected in the failure DTOs.
            See <xref linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_SELECT" xrefstyle="hyperlink"/>.</para></entry>
          </row>

          <row>
            <entry><code>osgi.http.whiteboard.target</code></entry>

            <entry><para><code>String</code></para><para><emphasis>optional</emphasis></para></entry>

            <entry><para>The value of this service property is an LDAP-style
            filter expression to select the Http Whiteboard implementation(s)
            to handle this Whiteboard service. The LDAP filter is used to
            match <xref linkend="org.osgi.service.http.runtime.HttpServiceRuntime" xrefstyle="hyperlink"/> services. Each Http Whiteboard
            <emphasis>implementation</emphasis> exposes exactly one
            <code>HttpServiceRuntime</code> service. This property is used to
            associate the Whiteboard service with the Http Whiteboard
            implementation that registered the <code>HttpServiceRuntime</code>
            service. If this property is not specified, all Http Whiteboard
            implementations can handle the service. See <xref linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_TARGET" xrefstyle="hyperlink"/>.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>If multiple Servlet Context Helper services match the
    <code>osgi.http.whiteboard.context.select</code> property the servlet,
    filter, resource or listener will be registered with all these Servlet
    Context Helpers. To avoid multiple <code>init()</code> and
    <code>destroy()</code> calls on the same instance, servlets and filters
    should be registered as Prototype Service Factory.</para>
  </section>

  <section xml:id="service.http.whiteboard-i21223311">
    <title>Registering Servlets</title>

    <para>Servlets can be registered with the Http Whiteboard implementation
    by registering them as Whiteboard services. This means that
    <code>Servlet</code> implementations are registered in the Service
    Registry under the <code>javax.servlet.Servlet</code> interface.</para>

    <para>Servlets are registered with one or more pattern through the
    <code>osgi.http.whiteboard.servlet.pattern</code> service property. Each
    pattern defines the URL context that will trigger the servlet to handle
    the request. They are defined by the <xref linkend="service.http.whiteboard-i21217577"/> in section 12.2,
    <emphasis>Specification of Mappings</emphasis>. Note that these mapping
    rules are slightly different than those defined in the <xref linkend="service.http"/>. The mapping rules are:</para>

    <itemizedlist>
      <listitem>
        <para>A string beginning with a '/' character and ending with a "/*"
        suffix is used for path mapping.</para>
      </listitem>

      <listitem>
        <para>A string beginning with a "*." prefix is used as an extension
        mapping.</para>
      </listitem>

      <listitem>
        <para>The empty string ("") is a special URL pattern that exactly maps
        to the application's context root. That is, requests of the form
        http://host:port/&lt;context-root&gt;/. In this case the path info is
        "/" and the servlet path and context path are the empty string
        ("").</para>
      </listitem>

      <listitem>
        <para>A string containing only the '/' character indicates the
        "default" servlet of the application. In this case, the servlet path
        is the request URI minus the context path and the path info is
        null.</para>
      </listitem>

      <listitem>
        <para>All other strings are used for exact matches only.</para>
      </listitem>
    </itemizedlist>

    <para><code>Servlet</code> and resource service registrations associated
    with a single Servlet Context share the same namespace. In case of
    identical registration patterns, service ranking rules are used to select
    the service handling a request. That is, Whiteboard servlets that have
    patterns shadowed by other Whiteboard services associated with the
    <emphasis>same</emphasis> Servlet Context are represented in the failure
    DTOs.</para>

    <para>The above rules can cause servlets that are already bound becoming
    unbound if a better match arrives. This ensures a predictable end result
    regardless of the order in which services are registered.</para>

    <para>A servlet may be registered with the property
    <code>osgi.http.whiteboard.servlet.name</code> which can be used by
    servlet filters to address this servlet. If the servlet service does not
    have this property, the servlet name defaults to the fully qualified class
    name of the service object.</para>

    <para>With implementations that both implement this specification as well
    as the <xref linkend="service.http"/>, situations can arise where a
    servlet is registered for the same pattern with the Http Service as well
    as with the Http Whiteboard. The Servlet Context of the Http Service is
    treated in the same way as all contexts managed by the Whiteboard
    implementation. The highest ranking is associated with the context of the
    Http Service. For a request, contexts are processed in the order as
    described in section <xref linkend="service.http.whiteboard.servletcontext"/>.</para>

    <para>For example, if the Http Whiteboard implementation is listening on
    port 80 on the machine <code>www.acme.com</code> and the
    <code>Servlet</code> object is registered with the pattern
    <code>"/servlet"</code>, then the <code>Servlet</code> object's
    <code>service()</code> method is called when the following URL is used
    from a web browser:</para>

    <programlisting>http://www.acme.com/servlet</programlisting>

    <para>The following table describes the properties that can be used by
    <code>Servlet</code>s registered as Whiteboard services. Additionally, the
    common properties listed in <xref linkend="service.http.whiteboard.common.properties.table" xrefstyle="template:Table %n on page %p"/> are supported.</para>

    <table>
      <title>Service properties for <code>Servlet</code> Whiteboard
      services.</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="2.2*"/>

        <colspec colnum="2" colwidth="0.6*"/>

        <colspec colnum="3" colwidth="3.5*"/>

        <thead>
          <row>
            <entry>Service Property Name</entry>

            <entry>Type</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><para><code>osgi.http.whiteboard.servlet.«</code></para><para><code> asyncSupported</code></para></entry>

            <entry><para><code>String</code></para><para><emphasis>optional</emphasis></para></entry>

            <entry><para>Declares whether the servlet supports the
            asynchronous operation mode. Allowed values are <code>true</code>
            and <code>false</code> independent of case. Defaults to
            <code>false</code>. See <xref linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_ASYNC_SUPPORTED" xrefstyle="hyperlink"/>.</para></entry>
          </row>

          <row>
            <entry><para><code>osgi.http.whiteboard.servlet.«</code></para><para><code> errorPage</code></para></entry>

            <entry><para><code>String+</code></para><para><emphasis>optional</emphasis></para></entry>

            <entry><para>Register the servlet as an error page for the error
            code and/or exception specified; the value may be a fully
            qualified exception type name or a three-digit HTTP status code in
            the range <code>400-599</code>. Special values <code>4xx</code>
            and <code>5xx</code> can be used to match value ranges. Any value
            not being a three-digit number is assumed to be a fully qualified
            exception class name. See <xref linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_ERROR_PAGE" xrefstyle="hyperlink"/>.</para></entry>
          </row>

          <row>
            <entry><para><code>osgi.http.whiteboard.servlet.«</code></para><para><code> name</code></para></entry>

            <entry><para><code>String</code></para><para><emphasis>optional</emphasis></para></entry>

            <entry><para>The name of the servlet. This name is used as the
            value of the
            <code>javax.servlet.ServletConfig.getServletName()</code> method
            and defaults to the fully qualified class name of the service
            object. See <xref linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_NAME" xrefstyle="hyperlink"/>.</para></entry>
          </row>

          <row>
            <entry><para><code>osgi.http.whiteboard.servlet.«</code></para><para><code> pattern</code></para></entry>

            <entry><para><code>String+</code></para><para><emphasis>required</emphasis></para></entry>

            <entry><para>Registration pattern(s) for the servlet. See <xref linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_PATTERN" xrefstyle="hyperlink"/>.</para></entry>
          </row>

          <row>
            <entry><code>servlet.init.*</code></entry>

            <entry><para><code>String</code></para><para><emphasis>optional</emphasis></para></entry>

            <entry><para>Properties starting with this prefix are provided as
            init parameters to the <code>javax.servlet.Servlet.init()</code>
            method. The <code>servlet.init.</code> prefix is removed from the
            parameter name. See <xref linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_INIT_PARAM_PREFIX" xrefstyle="hyperlink"/>.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para><code>Servlet</code> objects are initialized by a Http Whiteboard
    implementation before they start serving requests. The initialization is
    done by calling the <code>Servlet</code> object's
    <code>Servlet.init(ServletConfig)</code> method. The
    <code>ServletConfig</code> parameter provides access to the initialization
    parameters specified when the <code>Servlet</code> object was registered.
    Once the servlet is no longer used by the Http Whiteboard implementation
    the <code>destroy()</code> method is called. Failure during
    <code>Servlet.init()</code> will prevent the servlet from being used,
    which is reflected using a failure DTO. In such a case the system does
    <emphasis>not</emphasis> attempt to find an alternative servlet which
    might be present in the system with a lower ranking.</para>

    <para>If the service properties of the servlet Whiteboard service are
    modified, the <code>destroy()</code> method is called. Subsequently the
    servlet is re-initialized. If a Prototype Service Factory is used for the
    servlet this re-initialization is done on a new service object.</para>

    <para>When multiple Http Whiteboard implementations are present all of
    them can potentially process the <code>Servlet</code>. In such situations
    it can be useful to associate the servlet with a specific implementation
    by specifying the <code>osgi.http.whiteboard.target</code> property on the
    <code>Servlet</code> service to match its <code>HttpServiceRuntime</code>
    service.</para>

    <para>If more than one Http Service Runtime matches the
    <code>osgi.http.whiteboard.target</code> property or the property is not
    set, the <code>Servlet</code> will be processed by all the matching
    implementations. A <code>Servlet</code> service that is processed by more
    than one Http Whiteboard implementation will have its <code>init()</code>
    method called for each implementation that processes this
    <code>Servlet</code>. Similarly, the <code>destroy()</code> method is
    called once when the <code>Servlet</code> is shut down once for each
    implementation that processed it. As multiple <code>init()</code> and
    <code>destroy()</code> calls on the same <code>Servlet</code> instance are
    generally not desirable, <code>Servlet</code> implementations should be
    registered as Prototype Service Factories as defined in the <xref linkend="intro.core.release" xrefstyle="template:%t"/>. This will ensure
    that each Http Whiteboard implementation processing the
    <code>Servlet</code> will use a separate instance, ensuring that only one
    <code>init()</code> and <code>destroy()</code> call is made per
    <code>Servlet</code> object. Servlets not registered as a Prototype
    Service Factory may received <code>init()</code> and
    <code>destroy()</code> calls multiple times on the same service
    object.</para>

    <para>The following example code uses Declarative Services annotations to
    register a servlet whiteboard service.</para>

    <programlisting xml:id="service.http.whiteboard-i21223332">@Component(service = Servlet.class,
    scope = ServiceScope.PROTOTYPE,
    property = {
        "osgi.http.whiteboard.servlet.pattern=/myservlet",
        "servlet.init.myname=value"})
public class MyServlet extends HttpServlet {
    private String name = "&lt;not set&gt;";

    public void init(ServletConfig config) {
        name = config.getInitParameter("myname");
    }

    protected void doGet(HttpServletRequest req, HttpServletResponse resp) 
            throws IOException {
        resp.setContentType("text/plain");
        resp.getWriter().println("Servlet name: " + name);
    }
}</programlisting>

    <para>This example registers the servlet at: <code>/myservlet</code>.
    Requests for <code>http://www.acme.com/myservlet</code> map to the
    servlet, whose <code>service</code> method is called to process the
    request.</para>

    <para>To associate the above example servlet with the example
    <code>ServletContextHelper</code> in <xref linkend="service.http.whiteboard.servletcontext"/>, add the following
    service property:</para>

    <programlisting>osgi.http.whiteboard.context.select=(osgi.http.whiteboard.context.name=my-context)</programlisting>

    <para>This will cause the servlet to move to
    <code>http://www.acme.com/myapp/myservlet</code> as configured by the
    custom Servlet Context Handler.</para>

    <section>
      <title>Error Pages</title>

      <para>Servlets can be used to serve Error Pages. These are invoked when
      an exception is thrown during processing or if a servlet uses the
      <code>sendError()</code> method with a status code between
      <code>400</code> and <code>599</code>.</para>

      <para>For a servlet service to handle error situations the service
      property <code>osgi.http.whiteboard.servlet.errorPage</code> must be
      set. This property can have multiple values, allowing a single servlet
      to handle a variety of error situations. Possible values are 3-digit
      HTTP error codes and fully qualified exception names.</para>

      <para>Two special error code values are recognized. The special value
      <code>4xx</code> means every error code in the 400-499 range. The
      special value <code>5xx</code> means every error code in the 500-599
      range. To override such wildcard error page for a specific error,
      register an error page with the specific error code and a higher service
      ranking. Error pages shadowed by other error pages are reported via the
      failure DTOs. A <code>4xx/5xx</code> wildcard error page is only
      reported in the failure DTOs if it is shadowed by another wildcard
      page.</para>

      <para>Matching exceptions follows the exception hierarchy. First the
      most specific exception class - the actual class of the exception - is
      looked up. If no matching error page for the most specific exception is
      found, the error page for the super class of the exception is looked up
      and so on. The process ends by looking up an error page for the
      <code>java.lang.Throwable</code> class.</para>

      <para>While not being common practice, it is possible to combine the
      <code>osgi.http.whiteboard.servlet.errorPage</code> and
      <code>osgi.http.whiteboard.servlet.pattern</code> properties. If a
      single servlet registration has both these registration properties it is
      considered both an ordinary servlet as well as an error page.</para>

      <para>If an error or exception occurs for which an error page servlet
      can be matched, it is invoked to render the error page. If the error
      page servlet causes an error or exception while handling the request, an
      implementation built-in error page is returned.</para>

      <para>For example:</para>

      <programlisting>@Component(service = Servlet.class,
    scope = ServiceScope.PROTOTYPE,
    property = {
        "osgi.http.whiteboard.servlet.errorPage=java.io.IOException",
        "osgi.http.whiteboard.servlet.errorPage=500"})
public class MyErrorServlet extends HttpServlet {
   ...
}</programlisting>

      <para>The example servlet is invoked in case of a <code>500</code> error
      code, or if an <code>IOException</code> (or subclass) occurs. If there
      is more than one error page registered for the same exception or error
      code, service ranking rules are used to select the handling
      servlet.</para>
    </section>

    <section>
      <title>Asynchronous request handling</title>

      <para>Servlets can use the asynchronous request handling feature, as
      defined by the servlet specification.</para>

      <para>A servlet or servlet filter supporting the asynchronous mode must
      declare this with the appropriate service property
      <code>osgi.http.whiteboard.servlet.asyncSupported</code> or
      <code>osgi.http.whiteboard.filter.asyncSupported</code>.</para>

      <para>An example simple asynchronous servlet that handles the servlet
      requests in a thread from a custom thread pool rather than in the thread
      provided by the servlet container:</para>

      <programlisting>@Component(service = Servlet.class,
    scope = ServiceScope.PROTOTYPE,
    property = {
        "osgi.http.whiteboard.servlet.pattern=/as",
        "osgi.http.whiteboard.servlet.asyncSupported=true"})
public class AsyncServlet extends HttpServlet {
    ExecutorService executor = Executors.newCachedThreadPool(
        r -&gt; new Thread(r, "Pooled Thread"));

    protected void doGet(HttpServletRequest req, HttpServletResponse resp) 
            throws IOException {
        doGetAsync(req.startAsync());
    }

    private void doGetAsync(AsyncContext asyncContext) {
        executor.submit(() -&gt; {
            try {
                PrintWriter writer = asyncContext.getResponse().getWriter();
                writer.print("Servlet executed async in: " +
                    Thread.currentThread()); // writes 'Pooled Thread'
            } finally {
                asyncContext.complete();
            }
            return null;
        });
    }
}</programlisting>
    </section>

    <section>
      <title>Annotations</title>

      <para>Annotations defined in the Servlet API Specifications are ignored
      by an implementation of the Http Whiteboard Specification. The OSGi
      service model is used instead by this specification.</para>

      <para>Implementations of this specification <emphasis>may</emphasis>
      support these annotations through a proprietary opt-in mechanism.</para>
    </section>
  </section>

  <section>
    <title>Registering Servlet Filters</title>

    <para>Servlet filters provide a mechanism to intercept servlet
    invocations. They support modifying the <code>ServletRequest</code> and
    <code>ServletResponse</code> objects and are often used to augment web
    pages generated by servlets, for example with a common header or footer.
    Servlet filters can also be used to handle security, do logging or
    transform the content produced by a servlet to a certain format.</para>

    <para>Similar to servlets, servlet filters are registered as Whiteboard
    services, by registering a <code>javax.servlet.Filter</code> instance in
    the Service Registry. The following table describes the supported service
    properties. In addition the common properties as described in <xref linkend="service.http.whiteboard.common.properties.table" xrefstyle="template:Table %n on page %p"/> are supported.</para>

    <table>
      <title>Service properties for <code>Filter</code> Whiteboard
      services.</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="2.4*"/>

        <colspec colnum="2" colwidth="0.7*"/>

        <colspec colnum="3" colwidth="3.4*"/>

        <thead>
          <row>
            <entry>Service Property Name</entry>

            <entry>Type</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><para><code>osgi.http.whiteboard.filter.«</code></para><para><code> asyncSupported</code></para></entry>

            <entry><para><code>String</code></para><para><emphasis>optional</emphasis></para></entry>

            <entry><para>Declares whether the servlet filter supports
            asynchronous operation mode. Allowed values are <code>true</code>
            and <code>false</code> independent of case. Defaults to
            <code>false</code>. See <xref linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_ASYNC_SUPPORTED" xrefstyle="hyperlink"/>.</para></entry>
          </row>

          <row>
            <entry><para><code>osgi.http.whiteboard.filter.«</code></para><para><code> dispatcher</code></para></entry>

            <entry><para><code>String+</code></para><para><emphasis>optional</emphasis></para></entry>

            <entry><para>Select the dispatcher configuration when the servlet
            filter should be called. Allowed string values are
            <code>REQUEST</code>, <code>ASYNC</code>, <code>ERROR</code>,
            <code>INCLUDE</code>, and <code>FORWARD</code>. The default for a
            filter is <code>REQUEST</code>. See <xref linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_DISPATCHER" xrefstyle="hyperlink"/>.</para></entry>
          </row>

          <row>
            <entry><code>osgi.http.whiteboard.filter.name</code></entry>

            <entry><para><code>String</code></para><para><emphasis>optional</emphasis></para></entry>

            <entry><para>The name of a servlet filter. This name is used as
            the value of the <code>FilterConfig.getFilterName()</code> method
            and defaults to the fully qualified class name of the service
            object. See <xref linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_NAME" xrefstyle="hyperlink"/>.</para></entry>
          </row>

          <row>
            <entry><code>osgi.http.whiteboard.filter.pattern</code></entry>

            <entry><para><code>String+</code></para><para><emphasis>optional†</emphasis></para></entry>

            <entry><para>Apply this servlet filter to the specified URL path
            patterns. The format of the patterns is specified in the servlet
            specification. See <xref linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_PATTERN" xrefstyle="hyperlink"/>.</para></entry>
          </row>

          <row>
            <entry><code>osgi.http.whiteboard.filter.regex</code></entry>

            <entry><para><code>String+</code></para><para><emphasis>optional†</emphasis></para></entry>

            <entry><para>Apply this servlet filter to the specified URL paths.
            The paths are specified as regular expressions following the
            syntax defined in the <code>java.util.regex.Pattern</code> class.
            See <xref linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_REGEX" xrefstyle="hyperlink"/>.</para></entry>
          </row>

          <row>
            <entry><code>osgi.http.whiteboard.filter.servlet</code></entry>

            <entry><para><code>String+</code></para><para><emphasis>optional†</emphasis></para></entry>

            <entry><para>Apply this servlet filter to the referenced
            servlet(s) by name. See <xref linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_SERVLET" xrefstyle="hyperlink"/>.</para></entry>
          </row>

          <row>
            <entry><code>filter.init.*</code></entry>

            <entry><para><code>String+</code></para><para><emphasis>optional</emphasis></para></entry>

            <entry><para>Properties starting with this prefix are passed as
            init parameters to the <code>Filter.init()</code>method. The
            <code>filter.init.</code> prefix is removed from the parameter
            name. See <xref linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_INIT_PARAM_PREFIX" xrefstyle="hyperlink"/>.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para><emphasis>†</emphasis> Note that at least one of the following
    properties <emphasis>must</emphasis> be specified on <code>Filter</code>
    Whiteboard services: <programlisting>    osgi.http.whiteboard.filter.pattern
    osgi.http.whiteboard.filter.regex
    osgi.http.whiteboard.filter.servlet</programlisting></para>

    <para>Similar to servlets, <code>Filter</code> objects are initialized by
    a Http Whiteboard implementation before they start filtering requests. The
    initialization is done by calling the
    <code>Filter.init(FilterConfig)</code> method. The
    <code>FilterConfig</code> parameter provides access to
    <code>filter.init.*</code> properties on the servlet filter service
    registration. Once the <code>Filter</code> is no longer used by the Http
    Whiteboard implementation, the <code>destroy()</code> method is called.
    When the service properties on the servlet filter are modified, the
    <code>destroy()</code> method is called and the servlet filter is
    subsequently re-initialized, if it can still be associated with a Http
    Whiteboard implementation after the modification. By default, a servlet
    filter can be used with any Servlet Context Helper or Http Whiteboard
    implementation. To restrict a servlet filter to a single implementation or
    a specific Servlet Context Helper, the <xref linkend="service.http.whiteboard.common.properties"/> can be used.</para>

    <para>To deal with the dynamicity of the Whiteboard service lifecycle, it
    is recommended to implement a servlet filter as Prototype Service Factory
    service. This will ensure that one single servlet filter instance only
    receives one <code>init()</code> and one <code>destroy()</code> call.
    Otherwise a single servlet filter instance can receive multiple such
    calls. This is similar to the behavior recommended for Servlet Whiteboard
    services.</para>

    <para>Multiple servlet filters can process the same servlet
    request/response. If more than one <code>Filter</code> matches, the order
    in which they are processed is governed by their service ranking. The
    servlet filter with the highest ranking is processed first in the filter
    chain, while the servlet filter with the lowest ranking is processed last,
    before the <code>Servlet.service()</code> method is called. In the case of
    a service ranking tie, the servlet filter with the lowest
    <code>service.id</code> is processed first. After the servlet completes
    its <code>service()</code> method the filter chain is unwound in reverse
    order.</para>

    <para>Servlet filters are only applied to servlet requests if they are
    bound to the same Servlet Context Helper and the same Http Whiteboard
    implementation.</para>

    <para>The example Filter below adds some text before and after the content
    generated by a servlet:</para>

    <programlisting>@Component(scope = ServiceScope.PROTOTYPE,
    property = "osgi.http.whiteboard.filter.pattern=/*")
public class MyFilter implements Filter {
    public void init(FilterConfig filterConfig) throws ServletException {}

    public void doFilter(ServletRequest request, ServletResponse response, 
            FilterChain chain) throws IOException, ServletException {
        response.getWriter().write("before");
        chain.doFilter(request, response);
        response.getWriter().write("after");
    }

    public void destroy() {}
}</programlisting>
  </section>

  <section>
    <title>Registering Resources</title>

    <para>A resource is a file containing images, static HTML pages,
    JavaScript, CSS, sounds, movies, etc. Resources do not require any
    handling from the bundle. They are transferred directly from their source
    - usually the JAR file that contains the code for the bundle - to the
    requester.</para>

    <para>Resources can be served by registering a service of any type with a
    service registration property that marks it as a resource service:
    <code>osgi.http.whiteboard.resource.pattern</code>. The actual service
    object registered is not used to serve resources, it is merely used to
    inform the Http Whiteboard implementation to serve resources from a
    certain source.</para>

    <para>The following table describes the supported service properties. In
    addition the common properties as described in <xref linkend="service.http.whiteboard.common.properties.table" xrefstyle="template:Table %n on page %p"/> are supported.</para>

    <table>
      <title>Service properties for resource services.</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="2.5*"/>

        <colspec colnum="2" colwidth="0.7*"/>

        <colspec colnum="3" colwidth="3.3*"/>

        <thead>
          <row>
            <entry>Service Property Name</entry>

            <entry>Type</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><para><code>osgi.http.whiteboard.resource.«</code></para><para><code> pattern</code></para></entry>

            <entry><para><code>String+</code></para><para><emphasis>required</emphasis></para></entry>

            <entry><para>The pattern(s) to be used to serve resources. As
            defined by the <xref linkend="service.http.whiteboard-i21217577"/>
            in section 12.2, <emphasis>Specification of
            Mappings</emphasis>.</para><para>This property marks the service
            as a resource service. </para><para>See <xref linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_RESOURCE_PATTERN" xrefstyle="hyperlink"/>.</para></entry>
          </row>

          <row>
            <entry><para><code>osgi.http.whiteboard.resource.«</code></para><para><code> prefix</code></para></entry>

            <entry><para><code>String</code></para><para><emphasis>required</emphasis></para></entry>

            <entry><para>The prefix used to map a requested resource to the
            bundle's entries. If the request's path info is not null, it is
            appended to this prefix. The resulting string is passed to the
            <xref linkend="org.osgi.service.http.context.ServletContextHelper.getResource-String-" xrefstyle="hyperlink"/> method of the associated Servlet Context
            Helper. </para><para>See <xref linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_RESOURCE_PREFIX" xrefstyle="hyperlink"/>.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The examples below use Declarative Services annotations to register
    a resources service. Note that this service is purely used to convey
    information to the Http Whiteboard implementation and is never
    invoked.</para>

    <programlisting>@Component(service = MyResourceService.class,
    property = {
        "osgi.http.whiteboard.resource.pattern=/files/*",
        "osgi.http.whiteboard.resource.prefix=/www"})
public class MyResourceService {}</programlisting>

    <para>A Http Whiteboard implementation configured on port 80 will serve a
    request for <code>http://localhost/files/cheese.html</code> from the
    location <code>/www/cheese.html</code>.</para>

    <para>The following example maps requests for <code>/favicon.ico</code> to
    serve the <code>/logo.png</code> resource. Note that the pattern is not
    appended to the prefix as the path info in this case is null.</para>

    <programlisting>@Component(service = SomeResourceService.class,
    property = {
        "osgi.http.whiteboard.resource.pattern=/favicon.ico",
        "osgi.http.whiteboard.resource.prefix=/logo.png"})
public class SomeResourceService {}</programlisting>

    <para>The above examples use the default <code>ServletContextHelper</code>
    implementation, which loads these resources from the bundle that
    registered the resource service. For more control around serving
    resources, a resources service can be associated to a custom
    <code>ServletContextHelper</code>. For example, a custom Servlet Context
    Helper can serve resources from locations other than the current
    bundle.</para>

    <section>
      <title>Overlapping Resource and Servlet registrations</title>

      <para>Resources and servlets registered with the same Servlet Context
      share a single URI namespace. This means that the value specified in
      <code>osgi.http.whiteboard.resource.pattern</code> competes with the
      <code>osgi.http.whiteboard.servlet.pattern</code> property specified on
      servlets. If these values overlap, the rules as outlined in <xref linkend="service.http.whiteboard-i21223311"/> are used to resolve
      conflicts, where resource services are treated just like servlets.
      Shadowed resource patterns are reported as <xref linkend="org.osgi.service.http.runtime.dto.FailedResourceDTO" xrefstyle="hyperlink"/>.</para>
    </section>
  </section>

  <section>
    <title>Registering Listeners</title>

    <para>The servlet specification defines listener interfaces that can be
    implemented to receive a variety of servlet-related events. When using the
    Http Whiteboard implementation these listeners can be registered as
    Whiteboard services.</para>

    <itemizedlist>
      <listitem>
        <para><code>ServletContextListener</code> - Receive notifications when
        Servlet Contexts are initialized and destroyed.</para>
      </listitem>

      <listitem>
        <para><code>ServletContextAttributeListener</code> - Receive
        notifications for Servlet Context attribute changes.</para>
      </listitem>

      <listitem>
        <para><code>ServletRequestListener</code> - Receive notifications for
        servlet requests coming in and being destroyed.</para>
      </listitem>

      <listitem>
        <para><code>ServletRequestAttributeListener</code> - Receive
        notifications when servlet Request attributes change.</para>
      </listitem>

      <listitem>
        <para><code>HttpSessionListener</code> - Receive notifications when
        Http Sessions are created or destroyed.</para>
      </listitem>

      <listitem>
        <para><code>HttpSessionAttributeListener</code> - Receive
        notifications when Http Session attributes change.</para>
      </listitem>

      <listitem>
        <para><code>HttpSessionIdListener</code> - Receive notifications when
        Http Session ID changes.</para>
      </listitem>
    </itemizedlist>

    <para>Events are sent to listeners registered in the Service Registry with
    the <code>osgi.http.whiteboard.listener</code> service property set to
    <code>true</code>, independent of case. Listeners can be associated with a
    <code>ServletContextHelper</code> as described in <xref linkend="service.http.whiteboard.common.properties"/>. Listeners not
    specifically associated with a Servlet Context Helper will receive events
    relating to the <emphasis>default</emphasis> Servlet Context
    Helper.</para>

    <para>Multiple listeners of the same type registered with a given Servlet
    Context Helper are invoked in sequence, service ranking rules are used to
    determine the order.</para>

    <table>
      <title>Service properties for listener services.</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="2.5*"/>

        <colspec colnum="2" colwidth="0.7*"/>

        <colspec colnum="3" colwidth="3.3*"/>

        <thead>
          <row>
            <entry>Service Property Name</entry>

            <entry>Type</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><para><code>osgi.http.whiteboard.listener</code></para></entry>

            <entry><para><code>String</code></para><para><emphasis>required</emphasis></para></entry>

            <entry><para>When set to <code>true</code> this listener service
            is handled by the Http Whiteboard implementation. When not set or
            set to <code>false</code> the service is ignored. Any other value
            is invalid and will be reflected in a <xref linkend="org.osgi.service.http.runtime.dto.FailedListenerDTO" xrefstyle="hyperlink"/>. Note the property value is case
            independent. See <xref linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_LISTENER" xrefstyle="hyperlink"/>.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>An example listener that reports on client requests being
    initialized and destroyed is listed below:</para>

    <programlisting>@Component(property = "osgi.http.whiteboard.listener=true")
public class MyServletRequestListener implements ServletRequestListener {
    public void requestInitialized(ServletRequestEvent sre) {
        System.out.println("Request initialized for client: " + 
            sre.getServletRequest().getRemoteAddr());
    }

    public void requestDestroyed(ServletRequestEvent sre) {
        System.out.println("Request destroyed for client: " + 
            sre.getServletRequest().getRemoteAddr());
    }
}</programlisting>

    <para>For more details on the behavior of the listeners see the <xref linkend="service.http.whiteboard-i21217577"/>.</para>
  </section>

  <section>
    <title>Lifecycle</title>

    <para>If a Whiteboard service is used by a Http Whiteboard implementation,
    the following order of actions are performed:</para>

    <orderedlist>
      <listitem>
        <para>The service is obtained from the service registry.</para>
      </listitem>

      <listitem>
        <para>For servlets and servlet filters, <code>init()</code> is
        called.</para>
      </listitem>
    </orderedlist>

    <para>When the service is not used anymore, these actions are
    performed:</para>

    <orderedlist continuation="continues">
      <listitem>
        <para>For servlets and servlet filters, <code>destroy()</code> is
        called.</para>
      </listitem>

      <listitem>
        <para>The service is released.</para>
      </listitem>
    </orderedlist>

    <para>Note that some of the above actions may not be performed
    immediately, allowing an implementation to utilize lazy or asynchronous
    behavior.</para>

    <para>As servlets and servlet filters services might come and go as well
    as <code>ServletContextHelper</code> services might come and go, use of
    the Whiteboard services can be very dynamic. Therefore servlet and servlet
    filter services might transition between bound to a Http Whiteboard
    implementation to being unbound and back to be bound. For example, when a
    matching Servlet Context Helper with the same name arrives with a higher
    ranking than the currently bound Servlet Context Helper, the servlet will
    be destroyed and re-initialized, bound to this better matching Servlet
    Context Helper. This is to ensure that timing issues cannot dictate the
    topology of the system.</para>

    <para>As <code>init()</code> and <code>destroy()</code> are called each
    time the service life cycle changes, the recommended way to register
    services is to use the Prototype Service scope as defined in the <xref linkend="intro.core.release" xrefstyle="template:%t"/>. This ensures a new
    instance is created for each time such service is re-initialized. If the
    prototype scope is not used, the service should be prepared that after a
    call to <code>destroy()</code> a new initialization through
    <code>init()</code> might follow.</para>

    <section>
      <title>Whiteboard Service Dynamics and Active Requests</title>

      <para>When the Http Whiteboard implementation receives a network request
      it establishes the processing pipeline based on the available Whiteboard
      services (servlets, servlet filters and resource services) and executes
      this pipeline. Between establishing the pipeline and finishing the
      processing, services used in this pipeline might become unregistered. It
      is up to the Http Whiteboard implementation whether it completes the
      active request or throws a Servlet Exception in this case.</para>
    </section>
  </section>

  <section>
    <title>The Http Service Runtime Service</title>

    <para>The <xref linkend="org.osgi.service.http.runtime.HttpServiceRuntime" xrefstyle="hyperlink"/> service represents the runtime state information
    of a Http Whiteboard implementation. This information is provided through
    Data Transfer Objects (DTOs). The architecture of OSGi DTOs is described
    in <xref linkend="intro.core.release" xrefstyle="template:%t"/>.</para>

    <para>Each Http Whiteboard implementation registers exactly one
    <code>HttpServiceRuntime</code> service which can be used to target
    Whiteboard services defined in this specification to a specific Http
    Whiteboard implementation.</para>

    <para>Implementations of this specification that also implement the <xref linkend="service.http"/> can provide runtime information for servlets
    registered using the <code>HttpService</code> via the
    <code>HttpServiceRuntime</code> as well. In this case the
    <code>osgi.http.service.id</code> service property must be set to
    associate the <code>HttpServiceRuntime</code> service with the
    <code>HttpService</code>.</para>

    <para>The <code>HttpServiceRuntime</code> provides service registration
    properties to declare its underlying Http Whiteboard implementation. These
    service properties can include implementation-specific key-value pairs.
    They also include the following:</para>

    <table>
      <title>Service properties for the <code>HttpServiceRuntime</code>
      service</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="1.5*"/>

        <colspec colnum="2" colwidth="1.7*"/>

        <colspec colnum="3" colwidth="3.3*"/>

        <thead>
          <row>
            <entry>Service Property Name</entry>

            <entry>Type</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.http.endpoint</code></entry>

            <entry><code>String+</code></entry>

            <entry><para> Endpoint(s) where this Http Whiteboard
            implementation is listening. Registered Whiteboard services are
            made available here. Values could be provided as URLs e.g.
            <code>http://192.168.1.10:8080/</code> or relative paths, e.g.
            <code>/myapp/</code>. Relative paths may be used if the scheme and
            authority parts of the URLs are not known such as in a bridged
            Http Service implementation. If the Http Service is serving the
            root context and scheme and authority are not known, the value of
            the property is <code>/</code>. Each entry must end with a
            slash.</para><para>See <xref linkend="org.osgi.service.http.runtime.HttpServiceRuntimeConstants.HTTP_SERVICE_ENDPOINT" xrefstyle="hyperlink"/>.</para></entry>
          </row>

          <row>
            <entry><code>osgi.http.service.id</code></entry>

            <entry><para><code>Collection&lt;Long&gt;</code></para></entry>

            <entry><para> If this Http Whiteboard implementation also
            implements the <xref linkend="service.http"/>, this property is
            set to hold the <code>service.id</code> values of all the
            <code>HttpService</code> services provided by this
            implementation.</para><para>See <xref linkend="org.osgi.service.http.runtime.HttpServiceRuntimeConstants.HTTP_SERVICE_ID" xrefstyle="hyperlink"/>.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The Http Service Runtime service provides information on registered
    Whiteboard services through the <xref linkend="org.osgi.service.http.runtime.dto.RuntimeDTO" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.http.runtime.dto.RequestInfoDTO" xrefstyle="hyperlink"/>. The <xref linkend="org.osgi.service.http.runtime.dto.RuntimeDTO" xrefstyle="hyperlink"/> provides information on services that have been
    successfully registered as well as information about the Whiteboard
    services that were not successfully registered. Whiteboard services that
    have the required properties set but cannot be processed, are reflected in
    the failure DTOs. Whiteboard services of interfaces described in this
    specification that do not have the required properties set are ignored and
    not reflected in the failure DTOs.</para>

    <para>The Runtime DTO can be obtained using the <xref linkend="org.osgi.service.http.runtime.HttpServiceRuntime.getRuntimeDTO--" xrefstyle="hyperlink"/> method. The Runtime DTO provided has the following
    structure:</para>

    <figure pgwide="1">
      <title>Runtime DTO Overview Diagram</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="3.313in" contentwidth="6.496in" fileref="runtimedto.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Handlers for a given request path can be found with the <xref linkend="org.osgi.service.http.runtime.HttpServiceRuntime.calculateRequestInfoDTO-String-" xrefstyle="hyperlink"/> method. This method returns a <xref linkend="org.osgi.service.http.runtime.dto.RequestInfoDTO" xrefstyle="hyperlink"/> with the following structure:</para>

    <figure pgwide="1">
      <title>Request Info DTO Overview Diagram</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="3.313in" contentwidth="3in" fileref="requestinfodto.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Where servlets registered via the <xref linkend="service.http"/> are
    returned via this service, the Servlet DTO will report negative service
    IDs for these servlets to distinguish them from Servlet Whiteboard
    services.</para>
  </section>

  <section>
    <title>Configuration Properties</title>

    <para>If the Http Whiteboard implementation does not have its port values
    configured through some other means, the implementation should use the
    following Framework properties to determine the port values to listen
    on.</para>

    <itemizedlist>
      <listitem>
        <para><code>org.osgi.service.http.port</code> - This property
        specifies the port used for servlets and resources accessible via
        HTTP. The default value for this property is 80.</para>
      </listitem>

      <listitem>
        <para><code>org.osgi.service.http.port.secure</code> - This property
        specifies the port used for servlets and resources accessible via
        HTTPS. The default value for this property is 443.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Capabilities</title>

    <section>
      <title>osgi.implementation Capability</title>

      <para>The Http Whiteboard implementation bundle must provide the <link linkend="service.namespaces-osgi.implementation.namespace"><code>osgi.implementation</code></link>
      capability with name <code>osgi.http</code>. This capability can be used
      by provisioning tools and during resolution to ensure that a Http
      Whiteboard implementation is present to process the Whiteboard services
      defined in this specification. The capability must also declare a uses
      constraint for the Servlet and OSGi Http Whiteboard packages and provide
      the version of this specification:</para>

      <programlisting>Provide-Capability: osgi.implementation;
       osgi.implementation="osgi.http";
       uses:="javax.servlet, javax.servlet.http, 
              org.osgi.service.http.context, org.osgi.service.http.whiteboard";
       version:Version="1.0"</programlisting>

      <para>This capability must follow the rules defined for the <xref linkend="service.namespaces-osgi.implementation.namespace"/>.</para>
    </section>

    <section>
      <title>osgi.contract Capability</title>

      <para>The Http Whiteboard implementation must provide a capability in
      the <link linkend="service.namespaces-osgi.contract.namespace"><code>osgi.contract</code></link>
      namespace with name <code>JavaServlet</code> if it exports the
      <code>javax.servlet</code> and <code>javax.servlet.http</code> packages.
      See <xref linkend="service.http.whiteboard-portable.java.contracts.ref"/>.</para>

      <para>Providing the <code>osgi.contract</code> capability enables
      developer to build portable bundles for packages that are not versioned
      under OSGi Semantic Versioning rules. For more details see <xref linkend="service.namespaces-osgi.contract.namespace"/>.</para>

      <para>If the Servlet API is provided by another bundle, the Http
      Whiteboard implementation should be a consumer of the API and require
      the contract.</para>
    </section>

    <section>
      <title>osgi.service Capability</title>

      <para>The bundle providing the <xref linkend="org.osgi.service.http.runtime.HttpServiceRuntime" xrefstyle="hyperlink"/> service must provide a capability in the <link linkend="service.namespaces-osgi.service.namespace"><code>osgi.service</code></link>
      namespace representing this service. This capability must also declare a
      uses constraint for the <code>org.osgi.service.http.runtime</code> and
      <code>org.osgi.service.http.runtime.dto</code> packages:</para>

      <programlisting>Provide-Capability: osgi.service;
  objectClass:List&lt;String&gt;="org.osgi.service.http.runtime.HttpServiceRuntime";
  uses:="org.osgi.service.http.runtime,org.osgi.service.http.runtime.dto"</programlisting>

      <para>This capability must follow the rules defined for the <xref linkend="service.namespaces-osgi.service.namespace"/>.</para>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>This section only applies when executing in an OSGi environment
    which is enforcing Java permissions.</para>

    <section>
      <title>Service Permissions</title>

      <para>Bundles that need to register Http Whiteboard services must be
      granted <code>ServicePermission[interfaceName, REGISTER]</code> where
      interface name is the Http Whiteboard service interface name.</para>

      <para>The Http Whiteboard implementation must be granted
      <code>ServicePermission[interfaceName, GET]</code> to retrieve the Http
      Whiteboard services from the service registry.</para>
    </section>

    <section>
      <title>Introspection</title>

      <para>Bundles that need to introspect the state of the Http runtime will
      need
      <code>ServicePermission[org.osgi.service.http.runtime.HttpServiceRuntime,
      GET]</code> to obtain the HttpServiceRuntime service and access the DTO
      types.</para>
    </section>

    <section>
      <title>Accessing Resources with the Default Servlet Context Helper
      Implementation</title>

      <para>The Http Whiteboard implementation must be granted
      <code>AdminPermission[*,RESOURCE]</code> so that bundles may use the
      default <code>ServletContextHelper</code> implementation. This is
      necessary because the implementation of the default
      <code>ServletContextHelper</code> must call <code>Bundle.getEntry</code>
      to access the resources of a bundle and this method requires the caller
      to have <code>AdminPermission[bundle,RESOURCE]</code>.</para>

      <para>Any bundle may access resources in its own bundle by calling
      <code>Class.getResource</code>. This operation is privileged. The
      resulting <code>URL</code> object may then be passed to the Http
      Whiteboard implementation as the result of a
      <code>ServletContextHelper.getResource</code> call. No further
      permission checks are performed when accessing bundle entry or resource
      <code>URL</code> objects, so the Http Whiteboard implementation does not
      need to be granted any additional permissions.</para>
    </section>

    <section>
      <title>Accessing Other Types of Resources</title>

      <para>In order to access resources that were not returned from the
      default <code>ServletContextHelper</code> implementation, the Http
      Whiteboard implementation must be granted sufficient privileges to
      access these resources. For example, if the <code>getResource</code>
      method of a <code>ServletContextHelper</code> service returns a file
      URL, the Http Whiteboard implementation requires the corresponding
      <code>FilePermission</code> to read the file. Similarly, if the
      <code>getResource</code> method of a <code>ServletContextHelper</code>
      service returns an HTTP URL, the Http Whiteboard implementation requires
      the corresponding <code>SocketPermission</code> to connect to the
      resource.</para>

      <para>Therefore, in most cases, the Http Whiteboard implementation
      should be a privileged service that is granted sufficient permission to
      serve any bundle's resources, no matter where these resources are
      located. Therefore, the Http Whiteboard implementation must capture the
      <code>AccessControlContext</code> object of the bundle registering a
      <code>ServletContextHelper</code> service, and then use the captured
      <code>AccessControlContext</code> object when accessing resources
      returned by the <code>ServletContextHelper</code> service. This
      situation prevents a bundle from supplying resources that it does not
      have permission to access.</para>

      <para>Therefore, the Http Whiteboard implementation should follow a
      scheme like the following example. When using a
      <code>ServletContextHelper</code> service, it should capture the
      context.</para>

      <programlisting>ServiceReference&lt;ServletContextHelper&gt; servletContextHelperReference = ...
AccessControlContext acc = servletContextHelperReference.getBundle()
    .adapt(AccessControlContext.class);</programlisting>

      <para>When a URL returned by the <code>getResource</code> method of a
      <code>ServletContextHelper</code> service is used by the Http Whiteboard
      implementation, the implementation must use the URL in a
      <code>doPrivileged</code> construct using the
      <code>AccessControlContext</code> object of the registering
      bundle:</para>

      <programlisting>AccessController.doPrivileged(
    new PrivilegedExceptionAction() {
        public Object run() throws Exception {
        ...
        }
    }, acc);</programlisting>

      <para>This ensures the Http Whiteboard implementation can only use the
      URL if the bundle registering the <code>ServletContextHelper</code>
      service that returned the URL also has permission to use the URL. The
      use of a captured <code>AccessControlContext</code> only applies when
      accessing URL objects returned by the <code>getResource</code> method of
      the <code>ServletContextHelper</code> service.</para>
    </section>

    <section>
      <title>Calling Http Whiteboard Services</title>

      <para>This specification does not require that the Http Whiteboard
      implementation is granted All Permission or wraps calls to the Http
      Whiteboard services in a <code>doPrivileged</code> block. Therefore, it
      is the responsibility of the Http Whiteboard service implementations to
      use a <code>doPrivileged</code> block when performing privileged
      operations.</para>
    </section>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.service.http.context" xml:id="org.osgi.service.http.context" xml:base="../../generated/javadoc/docbook/org.osgi.service.http.context.xml">
   <title>org.osgi.service.http.context</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.http.context-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.http.context-version.number">1.0</edition>
   </info>
   <para>
Http Whiteboard Context Package Version 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.http.context; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.http.context; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.context.ServletContextHelper">
                  <code>ServletContextHelper</code>
               </link> - 
Helper service for a servlet context used by a Http Whiteboard implementation
 to serve HTTP requests.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="ServletContextHelper" xml:id="org.osgi.service.http.context.ServletContextHelper">
      <title>public abstract class ServletContextHelper</title>
      <para>
Helper service for a servlet context used by a Http Whiteboard implementation
 to serve HTTP requests.

 </para>
      <para>
 This service defines methods that the Http Whiteboard implementation may call
 to get information for a request when dealing with whiteboard services.
 
 </para>
      <para>
 Each <code>ServletContextHelper</code> is registered with a
 <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_NAME">"osgi.http.whiteboard.context.name"</link> service property containing a name to
 reference by servlets, servlet filters, resources, and listeners. If there is
 more than one <code>ServletContextHelper</code> registered with the same context
 name, the one with the highest service ranking is active, the others are
 inactive.
 
 </para>
      <para>
 A context is registered with the
 <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_PATH">"osgi.http.whiteboard.context.path"</link> service property to define a path under
 which all services registered with this context are reachable. If there is
 more than one <code>ServletContextHelper</code> registered with the same path,
 each duplicate context path is searched by service ranking order according to
 <link linkend="org.osgi.framework.ServiceReference.compareTo-Object-">org.osgi.framework.ServiceReference.compareTo(Object)</link> until a
 matching servlet or resource is found.
 
 </para>
      <para>
 Servlets, servlet filters, resources, and listeners services may be
 associated with a <code>ServletContextHelper</code> service with the
 <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_SELECT">"osgi.http.whiteboard.context.select"</link> service property. If the referenced
 <code>ServletContextHelper</code> service does not exist or is currently not
 active, the whiteboard services for that <code>ServletContextHelper</code> are not
 active either.
 
 </para>
      <para>
 If no <code>ServletContextHelper</code> service is associated, that is no
 <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_SELECT">"osgi.http.whiteboard.context.select"</link> service property is configured for a
 whiteboard service, a default <code>ServletContextHelper</code> is used.
 
 </para>
      <para>
 Those whiteboard services that are associated with the same
 <code>ServletContextHelper</code> object will share the same
 <code>ServletContext</code> object.
 
 </para>
      <para>
 The behavior of the methods on the default <code>ServletContextHelper</code> is
 defined as follows:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.context.ServletContextHelper.getMimeType-String-">getMimeType</link> - Always returns <code>null</code>.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.context.ServletContextHelper.handleSecurity-javax.servlet.http.HttpServletRequest-javax.servlet.http.HttpServletResponse-">handleSecurity</link> - Always returns <code>true</code>.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.context.ServletContextHelper.getResource-String-">getResource</link> - Assumes the named resource is
 in the bundle of the whiteboard service, addressed from the root. This method
 calls the whiteboard service bundle's <code>Bundle.getEntry</code> method, and
 returns the appropriate URL to access the resource. On a Java runtime
 environment that supports permissions, the Http Whiteboard implementation
 needs to be granted <code>org.osgi.framework.AdminPermission[*,RESOURCE]</code>.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.context.ServletContextHelper.getResourcePaths-String-">getResourcePaths</link> - Assumes that the
 resources are in the bundle of the whiteboard service. This method calls
 <code>Bundle.findEntries</code> method, and returns the found entries. On a Java
 runtime environment that supports permissions, the Http Whiteboard
 implementation needs to be granted
 <code>org.osgi.framework.AdminPermission[*,RESOURCE]</code>.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.context.ServletContextHelper.getRealPath-String-">getRealPath</link> - Always returns <code>null</code>.</para>
         </listitem>
      </itemizedlist>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_NAME">HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_NAME</link>, <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_PATH">HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_PATH</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="AUTHENTICATION_TYPE" xml:id="org.osgi.service.http.context.ServletContextHelper.AUTHENTICATION_TYPE">
         <title>public static final String AUTHENTICATION_TYPE = "org.osgi.service.http.authentication.type"</title>
         <para>
            <code>HttpServletRequest</code> attribute specifying the scheme used in
 authentication. The value of the attribute can be retrieved by
 <code>HttpServletRequest.getAuthType</code>.
   </para>
      </section>
      <section role="field" xreflabel="AUTHORIZATION" xml:id="org.osgi.service.http.context.ServletContextHelper.AUTHORIZATION">
         <title>public static final String AUTHORIZATION = "org.osgi.service.useradmin.authorization"</title>
         <para>
            <code>HttpServletRequest</code> attribute specifying the <code>Authorization</code>
 object obtained from the <code>org.osgi.service.useradmin.UserAdmin</code>
 service. The value of the attribute can be retrieved by
 <code>HttpServletRequest.getAttribute(ServletContextHelper.AUTHORIZATION)</code>
 .
   </para>
      </section>
      <section role="field" xreflabel="REMOTE_USER" xml:id="org.osgi.service.http.context.ServletContextHelper.REMOTE_USER">
         <title>public static final String REMOTE_USER = "org.osgi.service.http.authentication.remote.user"</title>
         <para>
            <code>HttpServletRequest</code> attribute specifying the name of the
 authenticated user. The value of the attribute can be retrieved by
 <code>HttpServletRequest.getRemoteUser</code>.
   </para>
      </section>
      <section role="method" xreflabel="ServletContextHelper()" xml:id="org.osgi.service.http.context.ServletContextHelper.ServletContextHelper--">
         <title>public  ServletContextHelper()</title>
         <para role="description">
Construct a new context helper.
 
 </para>
         <para>
 If needed, the subclass will have to handle the association with a
 specific bundle.</para>
      </section>
      <section role="method" xreflabel="ServletContextHelper(Bundle)" xml:id="org.osgi.service.http.context.ServletContextHelper.ServletContextHelper-Bundle-">
         <title>public  ServletContextHelper(Bundle bundle)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The bundle to be associated with this context helper.</para>
         </formalpara>
         <para role="description">
Construct a new context helper associated with the specified bundle.
   </para>
      </section>
      <section role="method" xreflabel="getMimeType(String)" xml:id="org.osgi.service.http.context.ServletContextHelper.getMimeType-String-">
         <title>public String getMimeType(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name for which to determine the MIME type.</para>
         </formalpara>
         <para role="description">
Maps a name to a MIME type.
 
 </para>
         <para>
 Called by the Http Whiteboard implementation to determine the MIME type
 for the specified name. For whiteboard services, the Http Whiteboard
 implementation will call this method to support the
 <code>ServletContext</code> method <code>getMimeType</code>. For resource servlets,
 the Http Whiteboard implementation will call this method to determine the
 MIME type for the <code>Content-Type</code> header in the response.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The MIME type (e.g. text/html) of the specified name or
         <code>null</code> to indicate that the Http Whiteboard implementation
         should determine the MIME type itself.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRealPath(String)" xml:id="org.osgi.service.http.context.ServletContextHelper.getRealPath-String-">
         <title>public String getRealPath(String path)</title>
         <formalpara role="parameter">
            <title>path</title>
            <para>The virtual path to be translated to a real path.</para>
         </formalpara>
         <para role="description">
Gets the real path corresponding to the given virtual path.
 
 </para>
         <para>
 Called by the Http Whiteboard implementation to support the
 <code>ServletContext</code> method <code>getRealPath</code> for whiteboard
 services.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The real path, or <code>null</code> if the translation cannot be
         performed.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getResource(String)" xml:id="org.osgi.service.http.context.ServletContextHelper.getResource-String-">
         <title>public URL getResource(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the requested resource.</para>
         </formalpara>
         <para role="description">
Maps a resource name to a URL.
 
 </para>
         <para>
 Called by the Http Whiteboard implementation to map the specified
 resource name to a URL. For servlets, the Http Whiteboard implementation
 will call this method to support the <code>ServletContext</code> methods
 <code>getResource</code> and <code>getResourceAsStream</code>. For resources, the
 Http Whiteboard implementation will call this method to locate the named
 resource.
 
 </para>
         <para>
 The context can control from where resources come. For example, the
 resource can be mapped to a file in the bundle's persistent storage area
 via <code>BundleContext.getDataFile(name).toURI().toURL()</code> or to a
 resource in the context's bundle via <code>getClass().getResource(name)</code>
         </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A URL that a Http Whiteboard implementation can use to read the
         resource or <code>null</code> if the resource does not exist.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getResourcePaths(String)" xml:id="org.osgi.service.http.context.ServletContextHelper.getResourcePaths-String-">
         <title>public Set&lt;String&gt; getResourcePaths(String path)</title>
         <formalpara role="parameter">
            <title>path</title>
            <para>The partial path used to match the resources, which must
        start with a /.</para>
         </formalpara>
         <para role="description">
Returns a directory-like listing of all the paths to resources within the
 web application whose longest sub-path matches the supplied path
 argument.
 
 </para>
         <para>
 Called by the Http Whiteboard implementation to support the
 <code>ServletContext</code> method <code>getResourcePaths</code> for whiteboard
 services.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Set containing the directory listing, or <code>null</code> if there
         are no resources in the web application whose path begins with
         the supplied path.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="handleSecurity(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" xml:id="org.osgi.service.http.context.ServletContextHelper.handleSecurity-javax.servlet.http.HttpServletRequest-javax.servlet.http.HttpServletResponse-">
         <title>public boolean handleSecurity(HttpServletRequest request,HttpServletResponse response) throws IOException</title>
         <formalpara role="parameter">
            <title>request</title>
            <para>The HTTP request.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>response</title>
            <para>The HTTP response.</para>
         </formalpara>
         <para role="description">
Handles security for the specified request.
 
 </para>
         <para>
 The Http Whiteboard implementation calls this method prior to servicing
 the specified request. This method controls whether the request is
 processed in the normal manner or an error is returned.
 
 </para>
         <para>
 If the request requires authentication and the <code>Authorization</code>
 header in the request is missing or not acceptable, then this method
 should set the <code>WWW-Authenticate</code> header in the response object,
 set the status in the response object to Unauthorized(401) and return
 <code>false</code>. See also <link xlink:href="http://www.ietf.org/rfc/rfc2617.txt">RFC
 2617: HTTP Authentication: Basic and Digest Access Authentication</link>.
 
 </para>
         <para>
 If the request requires a secure connection and the <code>getScheme</code>
 method in the request does not return 'https' or some other acceptable
 secure protocol, then this method should set the status in the response
 object to Forbidden(403) and return <code>false</code>.
 
 </para>
         <para>
 When this method returns <code>false</code>, the Http Whiteboard
 implementation will send the response back to the client, thereby
 completing the request. When this method returns <code>true</code>, the Http
 Whiteboard implementation will proceed with servicing the request.
 
 </para>
         <para>
 If the specified request has been authenticated, this method must set the
 <link linkend="org.osgi.service.http.context.ServletContextHelper.AUTHENTICATION_TYPE">AUTHENTICATION_TYPE</link> request attribute to the type of
 authentication used, and the <link linkend="org.osgi.service.http.context.ServletContextHelper.REMOTE_USER">REMOTE_USER</link> request attribute to
 the remote user (request attributes are set using the
 <code>setAttribute</code> method on the request). If this method does not
 perform any authentication, it must not set these attributes.
 
 </para>
         <para>
 If the authenticated user is also authorized to access certain resources,
 this method must set the <link linkend="org.osgi.service.http.context.ServletContextHelper.AUTHORIZATION">AUTHORIZATION</link> request attribute to the
 <code>Authorization</code> object obtained from the
 <code>org.osgi.service.useradmin.UserAdmin</code> service.
 
 </para>
         <para>
 The servlet responsible for servicing the specified request determines
 the authentication type and remote user by calling the
 <code>getAuthType</code> and <code>getRemoteUser</code> methods, respectively, on
 the request.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the request should be serviced, <code>false</code> if
         the request should not be serviced and Http Whiteboard
         implementation will send the response back to the client.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– May be thrown by this method. If this occurs,
         the Http Whiteboard implementation will terminate the request and
         close the socket.   </para>
         </formalpara>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.service.http.runtime" xml:id="org.osgi.service.http.runtime" xml:base="../../generated/javadoc/docbook/org.osgi.service.http.runtime.xml">
   <title>org.osgi.service.http.runtime</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.http.runtime-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.http.runtime-version.number">1.0</edition>
   </info>
   <para>
Http Runtime Package Version 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.http.runtime; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.http.runtime; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.runtime.HttpServiceRuntime">
                  <code>HttpServiceRuntime</code>
               </link> - 
The HttpServiceRuntime service represents the runtime information of an Http
 Whiteboard implementation.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.runtime.HttpServiceRuntimeConstants">
                  <code>HttpServiceRuntimeConstants</code>
               </link> - 
Defines standard names for Http Runtime Service constants.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="HttpServiceRuntime" xml:id="org.osgi.service.http.runtime.HttpServiceRuntime">
      <title>public interface HttpServiceRuntime</title>
      <para>
The HttpServiceRuntime service represents the runtime information of an Http
 Whiteboard implementation.

 </para>
      <para>
 It provides access to DTOs representing the current state of the service.
 </para>
      <para>
 The HttpServiceRuntime service must be registered with the
 <link linkend="org.osgi.service.http.runtime.HttpServiceRuntimeConstants.HTTP_SERVICE_ENDPOINT">HttpServiceRuntimeConstants.HTTP_SERVICE_ENDPOINT</link> service
 property.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="calculateRequestInfoDTO(String)" xml:id="org.osgi.service.http.runtime.HttpServiceRuntime.calculateRequestInfoDTO-String-">
         <title>public RequestInfoDTO calculateRequestInfoDTO(String path)</title>
         <formalpara role="parameter">
            <title>path</title>
            <para>The request path, relative to the root of the Http Whiteboard
        implementation.</para>
         </formalpara>
         <para role="description">
Return a request info DTO containing the services involved with
 processing a request for the specified path.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The request info DTO for the specified path.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getRuntimeDTO()" xml:id="org.osgi.service.http.runtime.HttpServiceRuntime.getRuntimeDTO--">
         <title>public RuntimeDTO getRuntimeDTO()</title>
         <para role="description">
Return the runtime DTO representing the current state.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The runtime DTO.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="HttpServiceRuntimeConstants" xml:id="org.osgi.service.http.runtime.HttpServiceRuntimeConstants">
      <title>public final class HttpServiceRuntimeConstants</title>
      <para>
Defines standard names for Http Runtime Service constants.
   </para>
      <section role="field" xreflabel="HTTP_SERVICE_ENDPOINT" xml:id="org.osgi.service.http.runtime.HttpServiceRuntimeConstants.HTTP_SERVICE_ENDPOINT">
         <title>public static final String HTTP_SERVICE_ENDPOINT = "osgi.http.endpoint"</title>
         <para>
Http Runtime Service service property specifying the endpoints upon which
 the Http Whiteboard implementation is listening.
 
 </para>
         <para>
 An endpoint value is a URL or a relative path, to which the Http
 Whiteboard implementation is listening. For example,
 <code>http://192.168.1.10:8080/</code> or <code>/myapp/</code>. A relative path may
 be used if the scheme and authority parts of the URL are not known, e.g.
 in a bridged Http Whiteboard implementation. If the Http Whiteboard
 implementation is serving the root context and neither scheme nor
 authority is known, the value of the property is "/". Both, a URL and a
 relative path, must end with a slash.
 </para>
         <para>
 An Http Whiteboard implementation can be listening on multiple endpoints.
 
 </para>
         <para>
 The value of this service property must be of type <code>String</code>,
 <code>String[]</code>, or <code>Collection&lt;String&gt;</code>.</para>
      </section>
      <section role="field" xreflabel="HTTP_SERVICE_ID" xml:id="org.osgi.service.http.runtime.HttpServiceRuntimeConstants.HTTP_SERVICE_ID">
         <title>public static final String HTTP_SERVICE_ID = "osgi.http.service.id"</title>
         <para>
Http Runtime Service service property to associate the Http Runtime
 Service with one or more HttpService services.
 
 </para>
         <para>
 If this Http Whiteboard implementation also implements the Http Service
 Specification, this service property is set to a collection of
 <code>service.id</code> for the <code>HttpService</code> services registered by
 this implementation.
 
 </para>
         <para>
 The value of this service property must be of type
 <code>Collection&lt;Long&gt;</code>.</para>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.service.http.runtime.dto" xml:id="org.osgi.service.http.runtime.dto" xml:base="../../generated/javadoc/docbook/org.osgi.service.http.runtime.dto.xml">
   <title>org.osgi.service.http.runtime.dto</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.http.runtime.dto-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.http.runtime.dto-version.number">1.0</edition>
   </info>
   <para>
Http Runtime DTO Package Version 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.http.runtime.dto; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.http.runtime.dto; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.BaseServletDTO">
                  <code>BaseServletDTO</code>
               </link> - 
Represents common information about a <code>javax.servlet.Servlet</code> service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.DTOConstants">
                  <code>DTOConstants</code>
               </link> - 
Defines standard constants for the DTOs.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.ErrorPageDTO">
                  <code>ErrorPageDTO</code>
               </link> - 
Represents a <code>javax.servlet.Servlet</code> for handling errors and currently
 being used by a servlet context.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.FailedErrorPageDTO">
                  <code>FailedErrorPageDTO</code>
               </link> - 
Represents a <code>javax.servlet.Servlet</code> service registered as an error
 page but currently not being used by a servlet context due to a problem.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.FailedFilterDTO">
                  <code>FailedFilterDTO</code>
               </link> - 
Represents a servlet <code>Filter</code> service which is currently not being used
 by a servlet context due to a problem.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.FailedListenerDTO">
                  <code>FailedListenerDTO</code>
               </link> - 
Represents a listener service which is currently not being used by a servlet
 context due to a problem.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.FailedResourceDTO">
                  <code>FailedResourceDTO</code>
               </link> - 
Represents a resource definition which is currently not being used by a
 servlet context due to a problem.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.FailedServletContextDTO">
                  <code>FailedServletContextDTO</code>
               </link> - 
Represents a servlet context that is currently not used due to some problem.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.FailedServletDTO">
                  <code>FailedServletDTO</code>
               </link> - 
Represents a <code>javax.servlet.Servlet</code> service which is currently not
 being used by a servlet context due to a problem.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.FilterDTO">
                  <code>FilterDTO</code>
               </link> - 
Represents a servlet <code>javax.servlet.Filter</code> service currently being
 used for by a servlet context.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.ListenerDTO">
                  <code>ListenerDTO</code>
               </link> - 
Represents a listener currently being used by a servlet context.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.RequestInfoDTO">
                  <code>RequestInfoDTO</code>
               </link> - 
Represents the services used to process a specific request.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.ResourceDTO">
                  <code>ResourceDTO</code>
               </link> - 
Represents a resource definition currently being used by a servlet context.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.RuntimeDTO">
                  <code>RuntimeDTO</code>
               </link> - 
Represents the state of a Http Service Runtime.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.ServletContextDTO">
                  <code>ServletContextDTO</code>
               </link> - 
Represents a <code>javax.servlet.ServletContext</code> created for servlets,
 resources, servlet Filters, and listeners associated with that servlet
 context.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.ServletDTO">
                  <code>ServletDTO</code>
               </link> - 
Represents a <code>javax.servlet.Servlet</code> currently being used by a servlet
 context.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="BaseServletDTO" xml:id="org.osgi.service.http.runtime.dto.BaseServletDTO">
      <title>public abstract class BaseServletDTO<?line-break?> extends DTO</title>
      <para>
Represents common information about a <code>javax.servlet.Servlet</code> service.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="asyncSupported" xml:id="org.osgi.service.http.runtime.dto.BaseServletDTO.asyncSupported">
         <title>public boolean asyncSupported</title>
         <para>
Specifies whether the servlet supports asynchronous processing.
   </para>
      </section>
      <section role="field" xreflabel="initParams" xml:id="org.osgi.service.http.runtime.dto.BaseServletDTO.initParams">
         <title>public Map&lt;String,String&gt; initParams</title>
         <para>
The servlet initialization parameters as provided during registration of
 the servlet. Additional parameters like the Http Service Runtime
 attributes are not included. If the service has no initialization
 parameters, the map is empty.
   </para>
      </section>
      <section role="field" xreflabel="name" xml:id="org.osgi.service.http.runtime.dto.BaseServletDTO.name">
         <title>public String name</title>
         <para>
The name of the servlet. This value is never <code>null</code>.
   </para>
      </section>
      <section role="field" xreflabel="serviceId" xml:id="org.osgi.service.http.runtime.dto.BaseServletDTO.serviceId">
         <title>public long serviceId</title>
         <para>
Service property identifying the servlet. In the case of a servlet
 registered in the service registry and picked up by a Http Whiteboard
 Implementation, this value is not negative and corresponds to the service
 id in the registry. If the servlet has not been registered in the service
 registry, the value is negative and a unique negative value is generated
 by the Http Service Runtime in this case.
   </para>
      </section>
      <section role="field" xreflabel="servletContextId" xml:id="org.osgi.service.http.runtime.dto.BaseServletDTO.servletContextId">
         <title>public long servletContextId</title>
         <para>
The service id of the servlet context for the servlet represented by this
 DTO.
   </para>
      </section>
      <section role="field" xreflabel="servletInfo" xml:id="org.osgi.service.http.runtime.dto.BaseServletDTO.servletInfo">
         <title>public String servletInfo</title>
         <para>
The information string from the servlet.
 </para>
         <para>
 This is the value returned by the <code>Servlet.getServletInfo()</code>
 method.</para>
      </section>
      <section role="method" xreflabel="BaseServletDTO()" xml:id="org.osgi.service.http.runtime.dto.BaseServletDTO.BaseServletDTO--">
         <title>public  BaseServletDTO()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="DTOConstants" xml:id="org.osgi.service.http.runtime.dto.DTOConstants">
      <title>public final class DTOConstants</title>
      <para>
Defines standard constants for the DTOs.
   </para>
      <section role="field" xreflabel="FAILURE_REASON_EXCEPTION_ON_INIT" xml:id="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_EXCEPTION_ON_INIT">
         <title>public static final int FAILURE_REASON_EXCEPTION_ON_INIT = 4</title>
         <para>
An exception occurred during initializing of the service.
 </para>
         <para>
 This reason can only happen for servlets and servlet filters.</para>
      </section>
      <section role="field" xreflabel="FAILURE_REASON_NO_SERVLET_CONTEXT_MATCHING" xml:id="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_NO_SERVLET_CONTEXT_MATCHING">
         <title>public static final int FAILURE_REASON_NO_SERVLET_CONTEXT_MATCHING = 1</title>
         <para>
No matching <code>ServletContextHelper</code>.
   </para>
      </section>
      <section role="field" xreflabel="FAILURE_REASON_SERVICE_IN_USE" xml:id="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_SERVICE_IN_USE">
         <title>public static final int FAILURE_REASON_SERVICE_IN_USE = 7</title>
         <para>
The service is not registered as a prototype scoped service and is
 already in use with a servlet context and therefore can't be used with
 another servlet context.
   </para>
      </section>
      <section role="field" xreflabel="FAILURE_REASON_SERVICE_NOT_GETTABLE" xml:id="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_SERVICE_NOT_GETTABLE">
         <title>public static final int FAILURE_REASON_SERVICE_NOT_GETTABLE = 5</title>
         <para>
The service is registered in the service registry but getting the service
 fails as it returns <code>null</code>.
   </para>
      </section>
      <section role="field" xreflabel="FAILURE_REASON_SERVLET_CONTEXT_FAILURE" xml:id="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_SERVLET_CONTEXT_FAILURE">
         <title>public static final int FAILURE_REASON_SERVLET_CONTEXT_FAILURE = 2</title>
         <para>
Matching <code>ServletContextHelper</code>, but the context is not used due to
 a problem with the context.
   </para>
      </section>
      <section role="field" xreflabel="FAILURE_REASON_SHADOWED_BY_OTHER_SERVICE" xml:id="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_SHADOWED_BY_OTHER_SERVICE">
         <title>public static final int FAILURE_REASON_SHADOWED_BY_OTHER_SERVICE = 3</title>
         <para>
Service is shadowed by another service.
 </para>
         <para>
 For example, a service with the same service properties but a higher
 service ranking.</para>
      </section>
      <section role="field" xreflabel="FAILURE_REASON_UNKNOWN" xml:id="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_UNKNOWN">
         <title>public static final int FAILURE_REASON_UNKNOWN = 0</title>
         <para>
Failure reason is unknown.
   </para>
      </section>
      <section role="field" xreflabel="FAILURE_REASON_VALIDATION_FAILED" xml:id="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_VALIDATION_FAILED">
         <title>public static final int FAILURE_REASON_VALIDATION_FAILED = 6</title>
         <para>
The service is registered in the service registry but the service
 properties are invalid.
   </para>
      </section>
   </section>
   <section role="class" xreflabel="ErrorPageDTO" xml:id="org.osgi.service.http.runtime.dto.ErrorPageDTO">
      <title>public class ErrorPageDTO<?line-break?> extends BaseServletDTO</title>
      <para>
Represents a <code>javax.servlet.Servlet</code> for handling errors and currently
 being used by a servlet context.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="errorCodes" xml:id="org.osgi.service.http.runtime.dto.ErrorPageDTO.errorCodes">
         <title>public long[] errorCodes</title>
         <para>
The error codes the error page is used for. This array might be
 empty.
   </para>
      </section>
      <section role="field" xreflabel="exceptions" xml:id="org.osgi.service.http.runtime.dto.ErrorPageDTO.exceptions">
         <title>public String[] exceptions</title>
         <para>
The exceptions the error page is used for. This array might be
 empty.
   </para>
      </section>
      <section role="method" xreflabel="ErrorPageDTO()" xml:id="org.osgi.service.http.runtime.dto.ErrorPageDTO.ErrorPageDTO--">
         <title>public  ErrorPageDTO()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="FailedErrorPageDTO" xml:id="org.osgi.service.http.runtime.dto.FailedErrorPageDTO">
      <title>public class FailedErrorPageDTO<?line-break?> extends ErrorPageDTO</title>
      <para>
Represents a <code>javax.servlet.Servlet</code> service registered as an error
 page but currently not being used by a servlet context due to a problem.
 </para>
      <para>
 As the servlet represented by this DTO is not used due to a failure, the
 field <link linkend="org.osgi.service.http.runtime.dto.BaseServletDTO.servletContextId">FailedErrorPageDTO.servletContextId</link> always returns <code>0</code>
 and does not point to an existing <code>ServletContextHelper</code>.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="failureReason" xml:id="org.osgi.service.http.runtime.dto.FailedErrorPageDTO.failureReason">
         <title>public int failureReason</title>
         <para>
The reason why the servlet represented by this DTO is not used.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_UNKNOWN">DTOConstants.FAILURE_REASON_UNKNOWN</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_EXCEPTION_ON_INIT">DTOConstants.FAILURE_REASON_EXCEPTION_ON_INIT</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_NO_SERVLET_CONTEXT_MATCHING">DTOConstants.FAILURE_REASON_NO_SERVLET_CONTEXT_MATCHING</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_SERVICE_NOT_GETTABLE">DTOConstants.FAILURE_REASON_SERVICE_NOT_GETTABLE</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_SERVLET_CONTEXT_FAILURE">DTOConstants.FAILURE_REASON_SERVLET_CONTEXT_FAILURE</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_SHADOWED_BY_OTHER_SERVICE">DTOConstants.FAILURE_REASON_SHADOWED_BY_OTHER_SERVICE</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="FailedErrorPageDTO()" xml:id="org.osgi.service.http.runtime.dto.FailedErrorPageDTO.FailedErrorPageDTO--">
         <title>public  FailedErrorPageDTO()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="FailedFilterDTO" xml:id="org.osgi.service.http.runtime.dto.FailedFilterDTO">
      <title>public class FailedFilterDTO<?line-break?> extends FilterDTO</title>
      <para>
Represents a servlet <code>Filter</code> service which is currently not being used
 by a servlet context due to a problem.
 </para>
      <para>
 As the service represented by this DTO is not used due to a failure, the
 field <link linkend="org.osgi.service.http.runtime.dto.FilterDTO.servletContextId">FailedFilterDTO.servletContextId</link> always returns <code>0</code> and
 does not point to an existing servlet context.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="failureReason" xml:id="org.osgi.service.http.runtime.dto.FailedFilterDTO.failureReason">
         <title>public int failureReason</title>
         <para>
The reason why the servlet filter represented by this DTO is not used.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_UNKNOWN">DTOConstants.FAILURE_REASON_UNKNOWN</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_EXCEPTION_ON_INIT">DTOConstants.FAILURE_REASON_EXCEPTION_ON_INIT</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_NO_SERVLET_CONTEXT_MATCHING">DTOConstants.FAILURE_REASON_NO_SERVLET_CONTEXT_MATCHING</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_SERVICE_NOT_GETTABLE">DTOConstants.FAILURE_REASON_SERVICE_NOT_GETTABLE</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_SERVLET_CONTEXT_FAILURE">DTOConstants.FAILURE_REASON_SERVLET_CONTEXT_FAILURE</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_SHADOWED_BY_OTHER_SERVICE">DTOConstants.FAILURE_REASON_SHADOWED_BY_OTHER_SERVICE</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="FailedFilterDTO()" xml:id="org.osgi.service.http.runtime.dto.FailedFilterDTO.FailedFilterDTO--">
         <title>public  FailedFilterDTO()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="FailedListenerDTO" xml:id="org.osgi.service.http.runtime.dto.FailedListenerDTO">
      <title>public class FailedListenerDTO<?line-break?> extends ListenerDTO</title>
      <para>
Represents a listener service which is currently not being used by a servlet
 context due to a problem.
 </para>
      <para>
 As the listener represented by this DTO is not used due to a failure, the
 field <link linkend="org.osgi.service.http.runtime.dto.BaseServletDTO.servletContextId">FailedErrorPageDTO.servletContextId</link> always returns <code>0</code>
 and does not point to an existing servlet context.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="failureReason" xml:id="org.osgi.service.http.runtime.dto.FailedListenerDTO.failureReason">
         <title>public int failureReason</title>
         <para>
The reason why the listener represented by this DTO is not used.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_UNKNOWN">DTOConstants.FAILURE_REASON_UNKNOWN</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_EXCEPTION_ON_INIT">DTOConstants.FAILURE_REASON_EXCEPTION_ON_INIT</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_NO_SERVLET_CONTEXT_MATCHING">DTOConstants.FAILURE_REASON_NO_SERVLET_CONTEXT_MATCHING</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_SERVICE_NOT_GETTABLE">DTOConstants.FAILURE_REASON_SERVICE_NOT_GETTABLE</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_SERVLET_CONTEXT_FAILURE">DTOConstants.FAILURE_REASON_SERVLET_CONTEXT_FAILURE</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_SHADOWED_BY_OTHER_SERVICE">DTOConstants.FAILURE_REASON_SHADOWED_BY_OTHER_SERVICE</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="FailedListenerDTO()" xml:id="org.osgi.service.http.runtime.dto.FailedListenerDTO.FailedListenerDTO--">
         <title>public  FailedListenerDTO()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="FailedResourceDTO" xml:id="org.osgi.service.http.runtime.dto.FailedResourceDTO">
      <title>public class FailedResourceDTO<?line-break?> extends ResourceDTO</title>
      <para>
Represents a resource definition which is currently not being used by a
 servlet context due to a problem.
 </para>
      <para>
 As the resource represented by this DTO is not used due to a failure, the
 field <link linkend="org.osgi.service.http.runtime.dto.ResourceDTO.servletContextId">FailedResourceDTO.servletContextId</link> always returns <code>0</code> and
 does not point to an existing servlet context.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="failureReason" xml:id="org.osgi.service.http.runtime.dto.FailedResourceDTO.failureReason">
         <title>public int failureReason</title>
         <para>
The reason why the resource represented by this DTO is not used.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_UNKNOWN">DTOConstants.FAILURE_REASON_UNKNOWN</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_EXCEPTION_ON_INIT">DTOConstants.FAILURE_REASON_EXCEPTION_ON_INIT</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_NO_SERVLET_CONTEXT_MATCHING">DTOConstants.FAILURE_REASON_NO_SERVLET_CONTEXT_MATCHING</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_SERVICE_NOT_GETTABLE">DTOConstants.FAILURE_REASON_SERVICE_NOT_GETTABLE</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_SERVLET_CONTEXT_FAILURE">DTOConstants.FAILURE_REASON_SERVLET_CONTEXT_FAILURE</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_SHADOWED_BY_OTHER_SERVICE">DTOConstants.FAILURE_REASON_SHADOWED_BY_OTHER_SERVICE</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="FailedResourceDTO()" xml:id="org.osgi.service.http.runtime.dto.FailedResourceDTO.FailedResourceDTO--">
         <title>public  FailedResourceDTO()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="FailedServletContextDTO" xml:id="org.osgi.service.http.runtime.dto.FailedServletContextDTO">
      <title>public class FailedServletContextDTO<?line-break?> extends ServletContextDTO</title>
      <para>
Represents a servlet context that is currently not used due to some problem.
 
 The following fields return an empty array for a
 <code>FailedServletContextDTO</code>:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.ServletContextDTO.servletDTOs">ServletContextDTO.servletDTOs</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.ServletContextDTO.resourceDTOs">ServletContextDTO.resourceDTOs</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.ServletContextDTO.filterDTOs">ServletContextDTO.filterDTOs</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.ServletContextDTO.errorPageDTOs">ServletContextDTO.errorPageDTOs</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.ServletContextDTO.listenerDTOs">ServletContextDTO.listenerDTOs</link>
            </para>
         </listitem>
      </itemizedlist>
      <para>
 The method <link linkend="org.osgi.service.http.runtime.dto.ServletContextDTO.attributes">ServletContextDTO.attributes</link> returns an empty map for a
 <code>FailedServletContextDTO</code>.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="failureReason" xml:id="org.osgi.service.http.runtime.dto.FailedServletContextDTO.failureReason">
         <title>public int failureReason</title>
         <para>
The reason why the servlet context represented by this DTO is not used.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_UNKNOWN">DTOConstants.FAILURE_REASON_UNKNOWN</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_EXCEPTION_ON_INIT">DTOConstants.FAILURE_REASON_EXCEPTION_ON_INIT</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_NO_SERVLET_CONTEXT_MATCHING">DTOConstants.FAILURE_REASON_NO_SERVLET_CONTEXT_MATCHING</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_SERVICE_NOT_GETTABLE">DTOConstants.FAILURE_REASON_SERVICE_NOT_GETTABLE</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_SERVLET_CONTEXT_FAILURE">DTOConstants.FAILURE_REASON_SERVLET_CONTEXT_FAILURE</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_SHADOWED_BY_OTHER_SERVICE">DTOConstants.FAILURE_REASON_SHADOWED_BY_OTHER_SERVICE</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="FailedServletContextDTO()" xml:id="org.osgi.service.http.runtime.dto.FailedServletContextDTO.FailedServletContextDTO--">
         <title>public  FailedServletContextDTO()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="FailedServletDTO" xml:id="org.osgi.service.http.runtime.dto.FailedServletDTO">
      <title>public class FailedServletDTO<?line-break?> extends ServletDTO</title>
      <para>
Represents a <code>javax.servlet.Servlet</code> service which is currently not
 being used by a servlet context due to a problem.
 </para>
      <para>
 As the servlet represented by this DTO is not used due to a failure, the
 field <link linkend="org.osgi.service.http.runtime.dto.BaseServletDTO.servletContextId">FailedErrorPageDTO.servletContextId</link> always returns <code>0</code>
 and does not point to an existing servlet context.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="failureReason" xml:id="org.osgi.service.http.runtime.dto.FailedServletDTO.failureReason">
         <title>public int failureReason</title>
         <para>
The reason why the servlet represented by this DTO is not used.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_UNKNOWN">DTOConstants.FAILURE_REASON_UNKNOWN</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_EXCEPTION_ON_INIT">DTOConstants.FAILURE_REASON_EXCEPTION_ON_INIT</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_NO_SERVLET_CONTEXT_MATCHING">DTOConstants.FAILURE_REASON_NO_SERVLET_CONTEXT_MATCHING</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_SERVICE_NOT_GETTABLE">DTOConstants.FAILURE_REASON_SERVICE_NOT_GETTABLE</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_SERVLET_CONTEXT_FAILURE">DTOConstants.FAILURE_REASON_SERVLET_CONTEXT_FAILURE</link>, <link linkend="org.osgi.service.http.runtime.dto.DTOConstants.FAILURE_REASON_SHADOWED_BY_OTHER_SERVICE">DTOConstants.FAILURE_REASON_SHADOWED_BY_OTHER_SERVICE</link>
            </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="FailedServletDTO()" xml:id="org.osgi.service.http.runtime.dto.FailedServletDTO.FailedServletDTO--">
         <title>public  FailedServletDTO()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="FilterDTO" xml:id="org.osgi.service.http.runtime.dto.FilterDTO">
      <title>public class FilterDTO<?line-break?> extends DTO</title>
      <para>
Represents a servlet <code>javax.servlet.Filter</code> service currently being
 used for by a servlet context.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="asyncSupported" xml:id="org.osgi.service.http.runtime.dto.FilterDTO.asyncSupported">
         <title>public boolean asyncSupported</title>
         <para>
Specifies whether the servlet filter supports asynchronous processing.
   </para>
      </section>
      <section role="field" xreflabel="dispatcher" xml:id="org.osgi.service.http.runtime.dto.FilterDTO.dispatcher">
         <title>public String[] dispatcher</title>
         <para>
The dispatcher associations for the servlet filter.
 
 </para>
         <para>
 The specified names are used to determine in what occasions the servlet
 filter is called. This array is never <code>null</code>.</para>
      </section>
      <section role="field" xreflabel="initParams" xml:id="org.osgi.service.http.runtime.dto.FilterDTO.initParams">
         <title>public Map&lt;String,String&gt; initParams</title>
         <para>
The servlet filter initialization parameters as provided during
 registration of the servlet filter. Additional parameters like the Http
 Service Runtime attributes are not included. If the servlet filter has
 not initialization parameters, this map is empty.
   </para>
      </section>
      <section role="field" xreflabel="name" xml:id="org.osgi.service.http.runtime.dto.FilterDTO.name">
         <title>public String name</title>
         <para>
The name of the servlet filter. This field is never <code>null</code>.
   </para>
      </section>
      <section role="field" xreflabel="patterns" xml:id="org.osgi.service.http.runtime.dto.FilterDTO.patterns">
         <title>public String[] patterns</title>
         <para>
The request mappings for the servlet filter.
 
 </para>
         <para>
 The specified patterns are used to determine whether a request is mapped
 to the servlet filter. This array might be empty.</para>
      </section>
      <section role="field" xreflabel="regexs" xml:id="org.osgi.service.http.runtime.dto.FilterDTO.regexs">
         <title>public String[] regexs</title>
         <para>
The request mappings for the servlet filter.
 
 </para>
         <para>
 The specified regular expressions are used to determine whether a request
 is mapped to the servlet filter. This array might be empty.</para>
      </section>
      <section role="field" xreflabel="serviceId" xml:id="org.osgi.service.http.runtime.dto.FilterDTO.serviceId">
         <title>public long serviceId</title>
         <para>
Service property identifying the servlet filter. In the case of a servlet
 filter registered in the service registry and picked up by a Http
 Whiteboard Implementation, this value is not negative and corresponds to
 the service id in the registry. If the servlet filter has not been
 registered in the service registry, the value is negative and a unique
 negative value is generated by the Http Service Runtime in this case.
   </para>
      </section>
      <section role="field" xreflabel="servletContextId" xml:id="org.osgi.service.http.runtime.dto.FilterDTO.servletContextId">
         <title>public long servletContextId</title>
         <para>
The service id of the servlet context for the servlet filter represented
 by this DTO.
   </para>
      </section>
      <section role="field" xreflabel="servletNames" xml:id="org.osgi.service.http.runtime.dto.FilterDTO.servletNames">
         <title>public String[] servletNames</title>
         <para>
The servlet names for the servlet filter.
 
 </para>
         <para>
 The specified names are used to determine the servlets whose requests are
 mapped to the servlet filter. This array might be empty.</para>
      </section>
      <section role="method" xreflabel="FilterDTO()" xml:id="org.osgi.service.http.runtime.dto.FilterDTO.FilterDTO--">
         <title>public  FilterDTO()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="ListenerDTO" xml:id="org.osgi.service.http.runtime.dto.ListenerDTO">
      <title>public class ListenerDTO<?line-break?> extends DTO</title>
      <para>
Represents a listener currently being used by a servlet context.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="serviceId" xml:id="org.osgi.service.http.runtime.dto.ListenerDTO.serviceId">
         <title>public long serviceId</title>
         <para>
Service property identifying the listener. In the case of a Listener
 registered in the service registry and picked up by a Http Whiteboard
 Implementation, this value is not negative and corresponds to the service
 id in the registry. If the listener has not been registered in the
 service registry, the value is negative and a unique negative value is
 generated by the Http Service Runtime in this case.
   </para>
      </section>
      <section role="field" xreflabel="servletContextId" xml:id="org.osgi.service.http.runtime.dto.ListenerDTO.servletContextId">
         <title>public long servletContextId</title>
         <para>
The service id of the servlet context for the listener represented by
 this DTO.
   </para>
      </section>
      <section role="field" xreflabel="types" xml:id="org.osgi.service.http.runtime.dto.ListenerDTO.types">
         <title>public String[] types</title>
         <para>
The fully qualified type names the listener. This array is never empty.
   </para>
      </section>
      <section role="method" xreflabel="ListenerDTO()" xml:id="org.osgi.service.http.runtime.dto.ListenerDTO.ListenerDTO--">
         <title>public  ListenerDTO()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="RequestInfoDTO" xml:id="org.osgi.service.http.runtime.dto.RequestInfoDTO">
      <title>public class RequestInfoDTO<?line-break?> extends DTO</title>
      <para>
Represents the services used to process a specific request.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="filterDTOs" xml:id="org.osgi.service.http.runtime.dto.RequestInfoDTO.filterDTOs">
         <title>public FilterDTO[] filterDTOs</title>
         <para>
The servlet filters processing this request. If no servlet filters are
 called for processing this request, an empty array is returned.
   </para>
      </section>
      <section role="field" xreflabel="path" xml:id="org.osgi.service.http.runtime.dto.RequestInfoDTO.path">
         <title>public String path</title>
         <para>
The path of the request relative to the root.
   </para>
      </section>
      <section role="field" xreflabel="resourceDTO" xml:id="org.osgi.service.http.runtime.dto.RequestInfoDTO.resourceDTO">
         <title>public ResourceDTO resourceDTO</title>
         <para>
The resource processing this request. If the request is processed by a
 resource, this field points to the DTO of the resource. If the request is
 processed by another type of component like a servlet, this field is
 <code>null</code>.
   </para>
      </section>
      <section role="field" xreflabel="servletContextId" xml:id="org.osgi.service.http.runtime.dto.RequestInfoDTO.servletContextId">
         <title>public long servletContextId</title>
         <para>
The service id of the servlet context processing the request represented
 by this DTO.
   </para>
      </section>
      <section role="field" xreflabel="servletDTO" xml:id="org.osgi.service.http.runtime.dto.RequestInfoDTO.servletDTO">
         <title>public ServletDTO servletDTO</title>
         <para>
The servlet processing this request. If the request is processed by a
 servlet, this field points to the DTO of the servlet. If the request is
 processed by another type of component like a resource, this field is
 <code>null</code>.
   </para>
      </section>
      <section role="method" xreflabel="RequestInfoDTO()" xml:id="org.osgi.service.http.runtime.dto.RequestInfoDTO.RequestInfoDTO--">
         <title>public  RequestInfoDTO()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="ResourceDTO" xml:id="org.osgi.service.http.runtime.dto.ResourceDTO">
      <title>public class ResourceDTO<?line-break?> extends DTO</title>
      <para>
Represents a resource definition currently being used by a servlet context.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="patterns" xml:id="org.osgi.service.http.runtime.dto.ResourceDTO.patterns">
         <title>public String[] patterns</title>
         <para>
The request mappings for the resource.
 
 </para>
         <para>
 The specified patterns are used to determine whether a request is mapped
 to the resource. This value is never <code>null</code>.</para>
      </section>
      <section role="field" xreflabel="prefix" xml:id="org.osgi.service.http.runtime.dto.ResourceDTO.prefix">
         <title>public String prefix</title>
         <para>
The prefix of the resource.
   </para>
      </section>
      <section role="field" xreflabel="serviceId" xml:id="org.osgi.service.http.runtime.dto.ResourceDTO.serviceId">
         <title>public long serviceId</title>
         <para>
Service property identifying the resource. In the case of a resource
 registered in the service registry and picked up by a Http Whiteboard
 Implementation, this value is not negative and corresponds to the service
 id in the registry. If the resource has not been registered in the
 service registry, the value is negative and a unique negative value is
 generated by the Http Service Runtime in this case.
   </para>
      </section>
      <section role="field" xreflabel="servletContextId" xml:id="org.osgi.service.http.runtime.dto.ResourceDTO.servletContextId">
         <title>public long servletContextId</title>
         <para>
The service id of the servlet context for the resource represented by
 this DTO.
   </para>
      </section>
      <section role="method" xreflabel="ResourceDTO()" xml:id="org.osgi.service.http.runtime.dto.ResourceDTO.ResourceDTO--">
         <title>public  ResourceDTO()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="RuntimeDTO" xml:id="org.osgi.service.http.runtime.dto.RuntimeDTO">
      <title>public class RuntimeDTO<?line-break?> extends DTO</title>
      <para>
Represents the state of a Http Service Runtime.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="failedErrorPageDTOs" xml:id="org.osgi.service.http.runtime.dto.RuntimeDTO.failedErrorPageDTOs">
         <title>public FailedErrorPageDTO[] failedErrorPageDTOs</title>
         <para>
Returns the representations of the error page
 <code>javax.servlet.Servlet</code> services associated with this runtime but
 currently not used due to some problem. The returned array may be empty.
   </para>
      </section>
      <section role="field" xreflabel="failedFilterDTOs" xml:id="org.osgi.service.http.runtime.dto.RuntimeDTO.failedFilterDTOs">
         <title>public FailedFilterDTO[] failedFilterDTOs</title>
         <para>
Returns the representations of the servlet <code>javax.servlet.Filter</code>
 services associated with this runtime but currently not used due to some
 problem. The returned array may be empty.
   </para>
      </section>
      <section role="field" xreflabel="failedListenerDTOs" xml:id="org.osgi.service.http.runtime.dto.RuntimeDTO.failedListenerDTOs">
         <title>public FailedListenerDTO[] failedListenerDTOs</title>
         <para>
Returns the representations of the listeners associated with this runtime
 but currently not used due to some problem. The returned array may be
 empty.
   </para>
      </section>
      <section role="field" xreflabel="failedResourceDTOs" xml:id="org.osgi.service.http.runtime.dto.RuntimeDTO.failedResourceDTOs">
         <title>public FailedResourceDTO[] failedResourceDTOs</title>
         <para>
Returns the representations of the resources associated with this runtime
 but currently not used due to some problem. The returned array may be
 empty.
   </para>
      </section>
      <section role="field" xreflabel="failedServletContextDTOs" xml:id="org.osgi.service.http.runtime.dto.RuntimeDTO.failedServletContextDTOs">
         <title>public FailedServletContextDTO[] failedServletContextDTOs</title>
         <para>
Returns the representations of the <code>javax.servlet.ServletContext</code> objects
 currently not used by the Http service runtime due to some problem.
 The returned array may be empty.
   </para>
      </section>
      <section role="field" xreflabel="failedServletDTOs" xml:id="org.osgi.service.http.runtime.dto.RuntimeDTO.failedServletDTOs">
         <title>public FailedServletDTO[] failedServletDTOs</title>
         <para>
Returns the representations of the <code>javax.servlet.Servlet</code> services
 associated with this runtime but currently not used due to some problem.
 The returned array may be empty.
   </para>
      </section>
      <section role="field" xreflabel="serviceDTO" xml:id="org.osgi.service.http.runtime.dto.RuntimeDTO.serviceDTO">
         <title>public ServiceReferenceDTO serviceDTO</title>
         <para>
The DTO for the corresponding
 <code>org.osgi.service.http.runtime.HttpServiceRuntime</code>. This value is
 never <code>null</code>.
   </para>
      </section>
      <section role="field" xreflabel="servletContextDTOs" xml:id="org.osgi.service.http.runtime.dto.RuntimeDTO.servletContextDTOs">
         <title>public ServletContextDTO[] servletContextDTOs</title>
         <para>
Returns the representations of the <code>javax.servlet.ServletContext</code>
 objects used by the Http Service Runtime. The returned array may be empty
 if the Http Service Runtime is currently not using any
 <code>javax.servlet.ServletContext</code> objects.
   </para>
      </section>
      <section role="method" xreflabel="RuntimeDTO()" xml:id="org.osgi.service.http.runtime.dto.RuntimeDTO.RuntimeDTO--">
         <title>public  RuntimeDTO()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="ServletContextDTO" xml:id="org.osgi.service.http.runtime.dto.ServletContextDTO">
      <title>public class ServletContextDTO<?line-break?> extends DTO</title>
      <para>
Represents a <code>javax.servlet.ServletContext</code> created for servlets,
 resources, servlet Filters, and listeners associated with that servlet
 context. The Servlet Context is usually backed by a
 <link linkend="org.osgi.service.http.context.ServletContextHelper">org.osgi.service.http.context.ServletContextHelper</link> service.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="attributes" xml:id="org.osgi.service.http.runtime.dto.ServletContextDTO.attributes">
         <title>public Map&lt;String,Object&gt; attributes</title>
         <para>
The servlet context attributes.
 
 </para>
         <para>
 The value type must be a numerical type, <code>Boolean</code>, <code>String</code>,
 <code>DTO</code> or an array of any of the former. Therefore this method will
 only return the attributes of the servlet context conforming to this
 constraint. Other attributes are omitted. If there are no attributes
 conforming to the constraint, an empty map is returned.</para>
      </section>
      <section role="field" xreflabel="contextPath" xml:id="org.osgi.service.http.runtime.dto.ServletContextDTO.contextPath">
         <title>public String contextPath</title>
         <para>
The servlet context path.
 
 This is the value returned by the <code>ServletContext.getContextPath()</code>
 method.
   </para>
      </section>
      <section role="field" xreflabel="errorPageDTOs" xml:id="org.osgi.service.http.runtime.dto.ServletContextDTO.errorPageDTOs">
         <title>public ErrorPageDTO[] errorPageDTOs</title>
         <para>
Returns the representations of the error page <code>Servlet</code> services
 associated with this context.
 
 The representations of the error page <code>Servlet</code> services associated
 with this context. The returned array may be empty if this context is
 currently not associated with any error pages.
   </para>
      </section>
      <section role="field" xreflabel="filterDTOs" xml:id="org.osgi.service.http.runtime.dto.ServletContextDTO.filterDTOs">
         <title>public FilterDTO[] filterDTOs</title>
         <para>
Returns the representations of the servlet <code>Filter</code> services
 associated with this context.
 
 The representations of the servlet <code>Filter</code> services associated
 with this context. The returned array may be empty if this context is
 currently not associated with any servlet <code>Filter</code> services.
   </para>
      </section>
      <section role="field" xreflabel="initParams" xml:id="org.osgi.service.http.runtime.dto.ServletContextDTO.initParams">
         <title>public Map&lt;String,String&gt; initParams</title>
         <para>
The servlet context initialization parameters. This is the set of
 parameters provided when registering this context. Additional parameters
 like the Http Service Runtime attributes are not included. If the context
 has no initialization parameters, this map is empty.
   </para>
      </section>
      <section role="field" xreflabel="listenerDTOs" xml:id="org.osgi.service.http.runtime.dto.ServletContextDTO.listenerDTOs">
         <title>public ListenerDTO[] listenerDTOs</title>
         <para>
Returns the representations of the listener services associated with this
 context.
 
 The representations of the listener services associated with this
 context. The returned array may be empty if this context is currently not
 associated with any listener services.
   </para>
      </section>
      <section role="field" xreflabel="name" xml:id="org.osgi.service.http.runtime.dto.ServletContextDTO.name">
         <title>public String name</title>
         <para>
The name of the servlet context.
 The name of the corresponding
 <link linkend="org.osgi.service.http.context.ServletContextHelper">org.osgi.service.http.context.ServletContextHelper</link>.
 </para>
         <para>
 This is the value returned by the
 <code>ServletContext.getServletContextName()</code> method.</para>
      </section>
      <section role="field" xreflabel="resourceDTOs" xml:id="org.osgi.service.http.runtime.dto.ServletContextDTO.resourceDTOs">
         <title>public ResourceDTO[] resourceDTOs</title>
         <para>
Returns the representations of the resource services associated with this
 context.
 
 The representations of the resource services associated with this
 context. The returned array may be empty if this context is currently not
 associated with any resource services.
   </para>
      </section>
      <section role="field" xreflabel="serviceId" xml:id="org.osgi.service.http.runtime.dto.ServletContextDTO.serviceId">
         <title>public long serviceId</title>
         <para>
Service property identifying the servlet context. In the case of a
 servlet context backed by a <code>ServletContextHelper</code> registered in
 the service registry and picked up by a Http Whiteboard Implementation,
 this value is not negative and corresponds to the service id in the
 registry. If the servlet context is not backed by a service registered in
 the service registry, the value is negative and a unique negative value
 is generated by the Http Service Runtime in this case.
   </para>
      </section>
      <section role="field" xreflabel="servletDTOs" xml:id="org.osgi.service.http.runtime.dto.ServletContextDTO.servletDTOs">
         <title>public ServletDTO[] servletDTOs</title>
         <para>
Returns the representations of the <code>Servlet</code> services associated
 with this context.
 
 The representations of the <code>Servlet</code> services associated with this
 context. The returned array may be empty if this context is currently not
 associated with any <code>Servlet</code> services.
   </para>
      </section>
      <section role="method" xreflabel="ServletContextDTO()" xml:id="org.osgi.service.http.runtime.dto.ServletContextDTO.ServletContextDTO--">
         <title>public  ServletContextDTO()</title>
         <para/>
      </section>
   </section>
   <section role="class" xreflabel="ServletDTO" xml:id="org.osgi.service.http.runtime.dto.ServletDTO">
      <title>public class ServletDTO<?line-break?> extends BaseServletDTO</title>
      <para>
Represents a <code>javax.servlet.Servlet</code> currently being used by a servlet
 context.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="patterns" xml:id="org.osgi.service.http.runtime.dto.ServletDTO.patterns">
         <title>public String[] patterns</title>
         <para>
The request mappings for the servlet.
 
 </para>
         <para>
 The specified patterns are used to determine whether a request is mapped
 to the servlet. This array is never empty.</para>
      </section>
      <section role="method" xreflabel="ServletDTO()" xml:id="org.osgi.service.http.runtime.dto.ServletDTO.ServletDTO--">
         <title>public  ServletDTO()</title>
         <para/>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.service.http.whiteboard" xml:id="org.osgi.service.http.whiteboard" xml:base="../../generated/javadoc/docbook/org.osgi.service.http.whiteboard.xml">
   <title>org.osgi.service.http.whiteboard</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.http.whiteboard-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.http.whiteboard-version.number">1.0</edition>
   </info>
   <para>
Http Whiteboard Package Version 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.http.whiteboard; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.http.whiteboard; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants">
                  <code>HttpWhiteboardConstants</code>
               </link> - 
Defines standard constants for the Http Whiteboard services.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="HttpWhiteboardConstants" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants">
      <title>public final class HttpWhiteboardConstants</title>
      <para>
Defines standard constants for the Http Whiteboard services.
   </para>
      <section role="field" xreflabel="DISPATCHER_ASYNC" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.DISPATCHER_ASYNC">
         <title>public static final String DISPATCHER_ASYNC = "ASYNC"</title>
         <para>
Possible value for the <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_DISPATCHER">HTTP_WHITEBOARD_FILTER_DISPATCHER</link>
 property indicating the servlet filter is applied in the asynchronous
 context.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Java Servlet Specification Version 3.0, Section 6.2.5 Filters and the RequestDispatcher</code>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="DISPATCHER_ERROR" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.DISPATCHER_ERROR">
         <title>public static final String DISPATCHER_ERROR = "ERROR"</title>
         <para>
Possible value for the <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_DISPATCHER">HTTP_WHITEBOARD_FILTER_DISPATCHER</link>
 property indicating the servlet filter is applied when an error page is
 called.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Java Servlet Specification Version 3.0, Section 6.2.5 Filters and the RequestDispatcher</code>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="DISPATCHER_FORWARD" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.DISPATCHER_FORWARD">
         <title>public static final String DISPATCHER_FORWARD = "FORWARD"</title>
         <para>
Possible value for the <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_DISPATCHER">HTTP_WHITEBOARD_FILTER_DISPATCHER</link>
 property indicating the servlet filter is applied to forward calls to the
 dispatcher.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Java Servlet Specification Version 3.0, Section 6.2.5 Filters and the RequestDispatcher</code>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="DISPATCHER_INCLUDE" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.DISPATCHER_INCLUDE">
         <title>public static final String DISPATCHER_INCLUDE = "INCLUDE"</title>
         <para>
Possible value for the <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_DISPATCHER">HTTP_WHITEBOARD_FILTER_DISPATCHER</link>
 property indicating the servlet filter is applied to include calls to the
 dispatcher.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Java Servlet Specification Version 3.0, Section 6.2.5 Filters and the RequestDispatcher</code>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="DISPATCHER_REQUEST" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.DISPATCHER_REQUEST">
         <title>public static final String DISPATCHER_REQUEST = "REQUEST"</title>
         <para>
Possible value for the <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_DISPATCHER">HTTP_WHITEBOARD_FILTER_DISPATCHER</link>
 property indicating the servlet filter is applied to client requests.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Java Servlet Specification Version 3.0, Section 6.2.5 Filters and the RequestDispatcher</code>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="HTTP_WHITEBOARD_CONTEXT_INIT_PARAM_PREFIX" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_INIT_PARAM_PREFIX">
         <title>public static final String HTTP_WHITEBOARD_CONTEXT_INIT_PARAM_PREFIX = "context.init."</title>
         <para>
Service property prefix referencing a <link linkend="org.osgi.service.http.context.ServletContextHelper">ServletContextHelper</link>
 service.
 
 </para>
         <para>
 For <link linkend="org.osgi.service.http.context.ServletContextHelper">ServletContextHelper</link> services this prefix can be used for
 service properties to mark them as initialization parameters which can be
 retrieved from the associated servlet context. The prefix is removed from
 the service property name to build the initialization parameter name.

 </para>
         <para>
 For <link linkend="org.osgi.service.http.context.ServletContextHelper">ServletContextHelper</link> services, the value of each
 initialization parameter service property must be of type <code>String</code>.</para>
      </section>
      <section role="field" xreflabel="HTTP_WHITEBOARD_CONTEXT_NAME" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_NAME">
         <title>public static final String HTTP_WHITEBOARD_CONTEXT_NAME = "osgi.http.whiteboard.context.name"</title>
         <para>
Service property specifying the name of an <link linkend="org.osgi.service.http.context.ServletContextHelper">ServletContextHelper</link>
 service.
 
 </para>
         <para>
 For <link linkend="org.osgi.service.http.context.ServletContextHelper">ServletContextHelper</link> services, this service property must be
 specified. Context services without this service property are ignored.
 
 </para>
         <para>
 Servlet, listener, servlet filter, and resource services might refer to a
 specific <link linkend="org.osgi.service.http.context.ServletContextHelper">ServletContextHelper</link> service referencing the name with
 the <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_SELECT">HTTP_WHITEBOARD_CONTEXT_SELECT</link> property.
 
 </para>
         <para>
 For <link linkend="org.osgi.service.http.context.ServletContextHelper">ServletContextHelper</link> services, the value of this service
 property must be of type <code>String</code>. The value must follow the
 "symbolic-name" specification from Section 1.3.2 of the OSGi Core
 Specification.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_PATH">HTTP_WHITEBOARD_CONTEXT_PATH</link>, <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_SELECT">HTTP_WHITEBOARD_CONTEXT_SELECT</link>, <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_DEFAULT_CONTEXT_NAME">HTTP_WHITEBOARD_DEFAULT_CONTEXT_NAME</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="HTTP_WHITEBOARD_CONTEXT_PATH" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_PATH">
         <title>public static final String HTTP_WHITEBOARD_CONTEXT_PATH = "osgi.http.whiteboard.context.path"</title>
         <para>
Service property specifying the path of an <link linkend="org.osgi.service.http.context.ServletContextHelper">ServletContextHelper</link>
 service.
 
 </para>
         <para>
 For <link linkend="org.osgi.service.http.context.ServletContextHelper">ServletContextHelper</link> services this service property is
 required. Context services without this service property are ignored.
 
 </para>
         <para>
 This property defines a context path under which all whiteboard services
 associated with this context are registered. Having different contexts
 with different paths allows to separate the URL space.
 
 </para>
         <para>
 For <link linkend="org.osgi.service.http.context.ServletContextHelper">ServletContextHelper</link> services, the value of this service
 property must be of type <code>String</code>. The value is either a slash for
 the root or it must start with a slash but not end with a slash. Valid
 characters are defined in rfc3986#section-3.3. Contexts with an invalid
 path are ignored.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_NAME">HTTP_WHITEBOARD_CONTEXT_NAME</link>, <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_SELECT">HTTP_WHITEBOARD_CONTEXT_SELECT</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="HTTP_WHITEBOARD_CONTEXT_SELECT" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_SELECT">
         <title>public static final String HTTP_WHITEBOARD_CONTEXT_SELECT = "osgi.http.whiteboard.context.select"</title>
         <para>
Service property referencing a <link linkend="org.osgi.service.http.context.ServletContextHelper">ServletContextHelper</link> service.
 
 </para>
         <para>
 For servlet, listener, servlet filter, or resource services, this service
 property refers to the associated <code>ServletContextHelper</code> service.
 The value of this property is a filter expression which is matched
 against the service registration properties of the
 <code>ServletContextHelper</code> service. If this service property is not
 specified, the default context is used. If there is no context service
 matching, the servlet, listener, servlet filter, or resource service is
 ignored.
 </para>
         <para>
 For example, if a whiteboard service wants to select a servlet context
 helper with the name "Admin" the expression would be
 "(osgi.http.whiteboard.context.name=Admin)". Selecting all
 contexts could be done with
 "(osgi.http.whiteboard.context.name=*)".
 </para>
         <para>
 For servlet, listener, servlet filter, or resource services, the value of
 this service property must be of type <code>String</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_NAME">HTTP_WHITEBOARD_CONTEXT_NAME</link>, <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_PATH">HTTP_WHITEBOARD_CONTEXT_PATH</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="HTTP_WHITEBOARD_DEFAULT_CONTEXT_NAME" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_DEFAULT_CONTEXT_NAME">
         <title>public static final String HTTP_WHITEBOARD_DEFAULT_CONTEXT_NAME = "default"</title>
         <para>
The name of the default <link linkend="org.osgi.service.http.context.ServletContextHelper">ServletContextHelper</link>. If a service is
 registered with this property, it is overriding the default context with
 a custom provided context.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_NAME">HTTP_WHITEBOARD_CONTEXT_NAME</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="HTTP_WHITEBOARD_FILTER_ASYNC_SUPPORTED" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_ASYNC_SUPPORTED">
         <title>public static final String HTTP_WHITEBOARD_FILTER_ASYNC_SUPPORTED = "osgi.http.whiteboard.filter.asyncSupported"</title>
         <para>
Service property specifying whether a servlet <code>Filter</code> service
 supports asynchronous processing.
 
 </para>
         <para>
 By default servlet filters services do not support asynchronous
 processing.
 
 </para>
         <para>
 The value of this service property must be of type <code>Boolean</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Java Servlet Specification Version 3.0, Section 2.3.3.3 Asynchronous Processing</code>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="HTTP_WHITEBOARD_FILTER_DISPATCHER" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_DISPATCHER">
         <title>public static final String HTTP_WHITEBOARD_FILTER_DISPATCHER = "osgi.http.whiteboard.filter.dispatcher"</title>
         <para>
Service property specifying the dispatcher handling of a servlet
 <code>Filter</code>.
 
 </para>
         <para>
 By default servlet filter services are associated with client requests
 only (see value <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.DISPATCHER_REQUEST">DISPATCHER_REQUEST</link>).
 
 </para>
         <para>
 The value of this service property must be of type <code>String</code>,
 <code>String[]</code>, or <code>Collection&lt;String&gt;</code>. Allowed values are
 <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.DISPATCHER_ASYNC">DISPATCHER_ASYNC</link>, <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.DISPATCHER_ERROR">DISPATCHER_ERROR</link>,
 <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.DISPATCHER_FORWARD">DISPATCHER_FORWARD</link>, <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.DISPATCHER_INCLUDE">DISPATCHER_INCLUDE</link>,
 <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.DISPATCHER_REQUEST">DISPATCHER_REQUEST</link>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Java Servlet Specification Version 3.0, Section 6.2.5 Filters and the RequestDispatcher</code>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="HTTP_WHITEBOARD_FILTER_INIT_PARAM_PREFIX" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_INIT_PARAM_PREFIX">
         <title>public static final String HTTP_WHITEBOARD_FILTER_INIT_PARAM_PREFIX = "filter.init."</title>
         <para>
Service property prefix referencing a <link linkend="org.osgi.framework.Filter">Filter</link> service.
 
 </para>
         <para>
 For <link linkend="org.osgi.framework.Filter">Filter</link> services this prefix can be used for service
 properties to mark them as initialization parameters which can be
 retrieved from the associated filter config. The prefix is removed from
 the service property name to build the initialization parameter name.

 </para>
         <para>
 For <link linkend="org.osgi.framework.Filter">Filter</link> services, the value of each initialization parameter
 service property must be of type <code>String</code>.</para>
      </section>
      <section role="field" xreflabel="HTTP_WHITEBOARD_FILTER_NAME" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_NAME">
         <title>public static final String HTTP_WHITEBOARD_FILTER_NAME = "osgi.http.whiteboard.filter.name"</title>
         <para>
Service property specifying the servlet filter name of a <code>Filter</code>
 service.
 
 </para>
         <para>
 This name is used as the value for the
 <code>FilterConfig.getFilterName()</code> method. If this service property is
 not specified, the fully qualified name of the service object's class is
 used as the servlet filter name.
 
 </para>
         <para>
 Servlet filter names should be unique among all servlet filter services
 associated with a single <link linkend="org.osgi.service.http.context.ServletContextHelper">ServletContextHelper</link>.
 
 </para>
         <para>
 The value of this service property must be of type <code>String</code>.</para>
      </section>
      <section role="field" xreflabel="HTTP_WHITEBOARD_FILTER_PATTERN" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_PATTERN">
         <title>public static final String HTTP_WHITEBOARD_FILTER_PATTERN = "osgi.http.whiteboard.filter.pattern"</title>
         <para>
Service property specifying the request mappings for a <code>Filter</code>
 service.
 
 </para>
         <para>
 The specified patterns are used to determine whether a request should be
 mapped to the servlet filter. Filter services without this service
 property or the <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_SERVLET">HTTP_WHITEBOARD_FILTER_SERVLET</link> or the
 <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_REGEX">HTTP_WHITEBOARD_FILTER_REGEX</link> service property are ignored.
 
 </para>
         <para>
 The value of this service property must be of type <code>String</code>,
 <code>String[]</code>, or <code>Collection&lt;String&gt;</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Java Servlet Specification Version 3.0, Section 12.2 Specification of Mappings</code>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="HTTP_WHITEBOARD_FILTER_REGEX" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_REGEX">
         <title>public static final String HTTP_WHITEBOARD_FILTER_REGEX = "osgi.http.whiteboard.filter.regex"</title>
         <para>
Service property specifying the request mappings for a servlet
 <code>Filter</code> service.
 
 </para>
         <para>
 The specified regular expressions are used to determine whether a request
 should be mapped to the servlet filter. The regular expressions must
 follow the syntax defined in <code>java.util.regex.Pattern</code>. Servlet
 filter services without this service property or the
 <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_SERVLET">HTTP_WHITEBOARD_FILTER_SERVLET</link> or the
 <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_PATTERN">HTTP_WHITEBOARD_FILTER_PATTERN</link> service property are ignored.
 
 </para>
         <para>
 The value of this service property must be of type <code>String</code>,
 <code>String[]</code>, or <code>Collection&lt;String&gt;</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>java.util.regex.Pattern</code>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="HTTP_WHITEBOARD_FILTER_SERVLET" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_SERVLET">
         <title>public static final String HTTP_WHITEBOARD_FILTER_SERVLET = "osgi.http.whiteboard.filter.servlet"</title>
         <para>
Service property specifying the <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_NAME">servlet names</link> for a servlet <code>Filter</code> service.
 
 </para>
         <para>
 The specified names are used to determine the servlets whose requests
 should be mapped to the servlet filter. Servlet filter services without
 this service property or the <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_PATTERN">HTTP_WHITEBOARD_FILTER_PATTERN</link> or
 the <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_REGEX">HTTP_WHITEBOARD_FILTER_REGEX</link> service property are ignored.
 
 </para>
         <para>
 The value of this service property must be of type <code>String</code>,
 <code>String[]</code>, or <code>Collection&lt;String&gt;</code>.</para>
      </section>
      <section role="field" xreflabel="HTTP_WHITEBOARD_LISTENER" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_LISTENER">
         <title>public static final String HTTP_WHITEBOARD_LISTENER = "osgi.http.whiteboard.listener"</title>
         <para>
Service property to mark a Listener service as a Whiteboard service.
 Listener services with this property set to the string value "true" will
 be treated as Whiteboard services opting in to being handled by the Http
 Whiteboard implementation. If the value "false" is specified, the service
 is opting out and this case is treated exactly the same as if this
 property is missing. If an invalid value is specified this is treated as
 a failure.
 
 </para>
         <para>
 The value of this service property must be of type <code>String</code>. Valid
 values are "true" and "false" ignoring case.</para>
      </section>
      <section role="field" xreflabel="HTTP_WHITEBOARD_RESOURCE_PATTERN" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_RESOURCE_PATTERN">
         <title>public static final String HTTP_WHITEBOARD_RESOURCE_PATTERN = "osgi.http.whiteboard.resource.pattern"</title>
         <para>
Service property specifying the request mappings for resources.
 
 </para>
         <para>
 The specified patterns are used to determine whether a request should be
 mapped to resources. Resource services without this service property are
 ignored.
 
 </para>
         <para>
 The value of this service property must be of type <code>String</code>,
 <code>String[]</code>, or <code>Collection&lt;String&gt;</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Java Servlet Specification Version 3.0, Section 12.2 Specification of Mappings</code>, <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_RESOURCE_PREFIX">HTTP_WHITEBOARD_RESOURCE_PREFIX</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="HTTP_WHITEBOARD_RESOURCE_PREFIX" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_RESOURCE_PREFIX">
         <title>public static final String HTTP_WHITEBOARD_RESOURCE_PREFIX = "osgi.http.whiteboard.resource.prefix"</title>
         <para>
Service property specifying the resource entry prefix for a resource
 service.
 
 </para>
         <para>
 If a resource service is registered with this property, requests are
 served with bundle resources.
 
 </para>
         <para>
 This prefix is used to map a requested resource to the bundle's entries.
 The value must not end with slash ("/") with the exception that
 a name of the form "/" is used to denote the root of the
 bundle. See the specification text for details on how HTTP requests are
 mapped.

 </para>
         <para>
 The value of this service property must be of type <code>String</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_RESOURCE_PATTERN">HTTP_WHITEBOARD_RESOURCE_PATTERN</link>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="HTTP_WHITEBOARD_SERVLET_ASYNC_SUPPORTED" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_ASYNC_SUPPORTED">
         <title>public static final String HTTP_WHITEBOARD_SERVLET_ASYNC_SUPPORTED = "osgi.http.whiteboard.servlet.asyncSupported"</title>
         <para>
Service property specifying whether a <code>Servlet</code> service supports
 asynchronous processing.
 
 </para>
         <para>
 By default servlet services do not support asynchronous processing.
 
 </para>
         <para>
 The value of this service property must be of type <code>Boolean</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Java Servlet Specification Version 3.0, Section 2.3.3.3 Asynchronous Processing</code>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="HTTP_WHITEBOARD_SERVLET_ERROR_PAGE" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_ERROR_PAGE">
         <title>public static final String HTTP_WHITEBOARD_SERVLET_ERROR_PAGE = "osgi.http.whiteboard.servlet.errorPage"</title>
         <para>
Service property specifying whether a <code>Servlet</code> service acts as an
 error page.
 
 </para>
         <para>
 The service property values may be the name of a fully qualified
 exception class, a three digit HTTP status code, the value "4xx" for all
 error codes in the 400 range, or the value "5xx" for all error codes in
 the 500 range. Any value that is not a three digit number, or one of the
 two special values is considered to be the name of a fully qualified
 exception class.
 
 </para>
         <para>
 The value of this service property must be of type <code>String</code>,
 <code>String[]</code>, or <code>Collection&lt;String&gt;</code>.</para>
      </section>
      <section role="field" xreflabel="HTTP_WHITEBOARD_SERVLET_INIT_PARAM_PREFIX" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_INIT_PARAM_PREFIX">
         <title>public static final String HTTP_WHITEBOARD_SERVLET_INIT_PARAM_PREFIX = "servlet.init."</title>
         <para>
Service property prefix referencing a Servlet service.
 
 </para>
         <para>
 For Servlet services this prefix can be used for service
 properties to mark them as initialization parameters which can be
 retrieved from the associated servlet config. The prefix is removed from
 the service property name to build the initialization parameter name.

 </para>
         <para>
 For Servlet services, the value of each initialization parameter
 service property must be of type <code>String</code>.</para>
      </section>
      <section role="field" xreflabel="HTTP_WHITEBOARD_SERVLET_NAME" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_NAME">
         <title>public static final String HTTP_WHITEBOARD_SERVLET_NAME = "osgi.http.whiteboard.servlet.name"</title>
         <para>
Service property specifying the servlet name of a <code>Servlet</code>
 service.
 
 </para>
         <para>
 This name is used as the value for the
 <code>ServletConfig.getServletName()</code> method. If this service property
 is not specified, the fully qualified name of the service object's class
 is used as the servlet name. Filter services may refer to servlets by
 this name in their <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_SERVLET">HTTP_WHITEBOARD_FILTER_SERVLET</link> service
 property to apply the filter to the servlet.
 
 </para>
         <para>
 Servlet names should be unique among all servlet services associated with
 a single <link linkend="org.osgi.service.http.context.ServletContextHelper">ServletContextHelper</link>.
 
 </para>
         <para>
 The value of this service property must be of type <code>String</code>.</para>
      </section>
      <section role="field" xreflabel="HTTP_WHITEBOARD_SERVLET_PATTERN" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_PATTERN">
         <title>public static final String HTTP_WHITEBOARD_SERVLET_PATTERN = "osgi.http.whiteboard.servlet.pattern"</title>
         <para>
Service property specifying the request mappings for a <code>Servlet</code>
 service.
 
 </para>
         <para>
 The specified patterns are used to determine whether a request should be
 mapped to the servlet. Servlet services without this service property or
 <link linkend="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_ERROR_PAGE">HTTP_WHITEBOARD_SERVLET_ERROR_PAGE</link> are ignored.
 
 </para>
         <para>
 The value of this service property must be of type <code>String</code>,
 <code>String[]</code>, or <code>Collection&lt;String&gt;</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Java Servlet Specification Version 3.0, Section 12.2 Specification of Mappings</code>
            </para>
         </formalpara>
      </section>
      <section role="field" xreflabel="HTTP_WHITEBOARD_TARGET" xml:id="org.osgi.service.http.whiteboard.HttpWhiteboardConstants.HTTP_WHITEBOARD_TARGET">
         <title>public static final String HTTP_WHITEBOARD_TARGET = "osgi.http.whiteboard.target"</title>
         <para>
Service property specifying the target filter to select the Http
 Whiteboard implementation to process the service.
 
 </para>
         <para>
 An Http Whiteboard implementation can define any number of service
 properties which can be referenced by the target filter. The service
 properties should always include the
 <link linkend="org.osgi.service.http.runtime.HttpServiceRuntimeConstants.HTTP_SERVICE_ENDPOINT">osgi.http.endpoint</link> service property if the endpoint information is
 known.
 
 </para>
         <para>
 If this service property is not specified, then all Http Whiteboard
 implementations can process the service.
 
 </para>
         <para>
 The value of this service property must be of type <code>String</code> and be
 a valid <link linkend="org.osgi.framework.Filter">filter string</link>.</para>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="service.http.whiteboard-i21231452"><title>HTTP 1.0
      Specification RFC-1945</title>http://www.ietf.org/rfc/rfc1945.txt, May
      1996</bibliomixed>

      <bibliomixed xml:id="service.http.whiteboard-i21215926"><title>HTTP 1.1
      Specifications RFCs
      7230-7235</title>https://tools.ietf.org/html/rfc7230,
      https://tools.ietf.org/html/rfc7231,
      https://tools.ietf.org/html/rfc7232,
      https://tools.ietf.org/html/rfc7233,
      https://tools.ietf.org/html/rfc7234,
      https://tools.ietf.org/html/rfc7235</bibliomixed>

      <bibliomixed xml:id="service.http.whiteboard-http2"><title>HTTP/2
      Specifications</title>https://http2.github.io</bibliomixed>

      <bibliomixed xml:id="service.http.whiteboard-i21217577"><title>Java
      Servlet 3.1 Specification</title>
      https://jcp.org/aboutJava/communityprocess/final/jsr340/</bibliomixed>

      <bibliomixed xml:id="service.http.whiteboard-portable.java.contracts.ref"><title>Portable
      Java Contract Definitions</title>
      http://www.osgi.org/Specifications/ReferenceContract</bibliomixed>

      <bibliomixed xml:id="service.http.whiteboard-i21220308"><title>RFC 2617:
      HTTP Authentication: Basic and Digest Access
      Authentication</title>http://www.ietf.org/rfc/rfc2617.txt</bibliomixed>

      <bibliomixed xml:id="service.http.whiteboard-whiteboard.pattern.ref"><title>Whiteboard
      Pattern</title>http://www.osgi.org/wiki/uploads/Links/whiteboard.pdf</bibliomixed>

      <bibliomixed xml:id="service.http.whiteboard-service.hook.ref"><title>Core Service
      Hooks</title>OSGi Core, Chapter 55 Service Hook Service
      Specification</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="702" revision="$Id: 9d3cac423aba69c2a81f1e941b0ddfa46ab4dfe1 $" version="5" xml:id="util.xml" xml:base="../702/util.xml.xml">
  <title>XML Parser Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.util.xml-version" linkend="org.osgi.util.xml"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The Extensible Markup Language (XML) has become a popular method of
    describing data. As more bundles use XML to describe their data, a common
    XML Parser becomes necessary in an embedded environment in order to reduce
    the need for space. Not all XML Parsers are equivalent in function,
    however, and not all bundles have the same requirements on an XML
    parser.</para>

    <para>This problem was addressed in the Java API for XML Processing, see
    <xref linkend="i1255594"/> for Java 2 Standard Edition and Enterprise
    Edition. This specification addresses how the classes defined in JAXP can
    be used in an OSGi framework. It defines how:</para>

    <itemizedlist>
      <listitem>
        <para>Implementations of XML parsers can become available to other
        bundles</para>
      </listitem>

      <listitem>
        <para>Bundles can find a suitable parser</para>
      </listitem>

      <listitem>
        <para>A standard parser in a JAR can be transformed to a bundle</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Standards</emphasis> - Leverage existing standards
          in Java based XML parsing: JAXP, SAX and DOM</para>
        </listitem>

        <listitem>
          <para><emphasis>Unmodified JAXP code</emphasis> - Run unmodified
          JAXP code</para>
        </listitem>

        <listitem>
          <para><emphasis>Simple</emphasis> - It should be easy to provide a
          SAX or DOM parser as well as easy to find a matching parser</para>
        </listitem>

        <listitem>
          <para><emphasis>Multiple</emphasis> - It should be possible to have
          multiple implementations of parsers available</para>
        </listitem>

        <listitem>
          <para><emphasis>Extendable</emphasis> - It is likely that parsers
          will be extended in the future with more functionality</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>XMLParserActivator</emphasis> - A utility class that
          registers a parser factory from declarative information in the
          Manifest file.</para>
        </listitem>

        <listitem>
          <para><emphasis>SAXParserFactory</emphasis> - A class that can
          create an instance of a <code>SAXParser</code> class.</para>
        </listitem>

        <listitem>
          <para><emphasis>DocumentBuilderFactory</emphasis> - A class that can
          create an instance of a <code>DocumentBuilder</code> class.</para>
        </listitem>

        <listitem>
          <para><emphasis>SAXParser</emphasis> - A parser, instantiated by a
          <code>SaxParserFactory</code> object, that parses according to the
          SAX specifications.</para>
        </listitem>

        <listitem>
          <para><emphasis>DocumentBuilder</emphasis> - A parser, instantiated
          by a <code>DocumentBuilderFactory</code>, that parses according to
          the DOM specifications.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>XML Parsing diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.442in" contentwidth="4.958in" fileref="xml-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Operations</title>

      <para>A bundle containing a SAX or DOM parser is started. This bundle
      registers a <code>SAXParserFactory</code> and/or a
      <code>DocumentBuilderFactory</code> service object with the Framework.
      Service registration properties describe the features of the parsers to
      other bundles. A bundle that needs an XML parser will get a
      <code>SAXParserFactory</code> or <code>DocumentBuilderFactory</code>
      service object from the Framework service registry. This object is then
      used to instantiate the requested parsers according to their
      specifications.</para>
    </section>
  </section>

  <section>
    <title>JAXP</title>

    <para>XML has become very popular in the last few years because it allows
    the interchange of complex information between different parties. Though
    only a single XML standard exists, there are multiple APIs to XML parsers,
    primarily of two types:</para>

    <itemizedlist>
      <listitem>
        <para>The Simple API for XML (SAX1 and SAX2)</para>
      </listitem>

      <listitem>
        <para>Based on the Document Object Model (DOM 1 and 2)</para>
      </listitem>
    </itemizedlist>

    <para>Both standards, however, define an abstract API that can be
    implemented by different vendors.</para>

    <para>A given XML Parser implementation may support either or both of
    these parser types by implementing the <code>org.w3c.dom</code> and/or
    <code>org.xml.sax</code> packages. In addition, parsers have
    characteristics such as whether they are validating or non-validating
    parsers and whether or not they are name-space aware.</para>

    <para>An application which uses a specific XML Parser must code to that
    specific parser and become coupled to that specific implementation. If the
    parser has implemented <xref linkend="i1255594"/>, however, the
    application developer can code against SAX or DOM and let the runtime
    environment decide which parser implementation is used.</para>

    <para>JAXP uses the concept of a <emphasis>factory</emphasis>. A factory
    object is an object that abstracts the creation of another object. JAXP
    defines a <code>DocumentBuilderFactory</code> and a
    <code>SAXParserFactory</code> class for this purpose.</para>

    <para>JAXP is implemented in the <code>javax.xml.parsers</code> package
    and provides an abstraction layer between an application and a specific
    XML Parser implementation. Using JAXP, applications can choose to use any
    JAXP compliant parser without changing any code, simply by changing a
    System property which specifies the SAX- and DOM factory class
    names.</para>

    <para>In JAXP, the default factory is obtained with a static method in the
    <code>SAXParserFactory</code> or <code>DocumentBuilderFactory</code>
    class. This method will inspect the associated System property and create
    a new instance of that class.</para>
  </section>

  <section>
    <title>XML Parser service</title>

    <para>The current specification of JAXP has the limitation that only one
    of each type of parser factories can be registered. This specification
    specifies how multiple <code>SAXParserFactory</code> objects and
    <code>DocumentBuilderFactory</code> objects can be made available to
    bundles simultaneously.</para>

    <para>Providers of parsers should register a JAXP factory object with the
    OSGi service registry under the factory class name. Service properties are
    used to describe whether the parser:</para>

    <itemizedlist>
      <listitem>
        <para>Is validating</para>
      </listitem>

      <listitem>
        <para>Is name-space aware</para>
      </listitem>

      <listitem>
        <para>Has additional features</para>
      </listitem>
    </itemizedlist>

    <para>With this functionality, bundles can query the OSGi service registry
    for parsers supporting the specific functionality that they
    require.</para>
  </section>

  <section xml:id="i1259424">
    <title>Properties</title>

    <para>Parsers must be registered with a number of properties that qualify
    the service. In this specification, the following properties are
    specified:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.util.xml.XMLParserActivator.PARSER_NAMESPACEAWARE" xrefstyle="hyperlink"/> - The registered parser is aware of
        name-spaces. Name-spaces allow an XML document to consist of
        independently developed DTDs. In an XML document, they are recognized
        by the <code>xmlns</code> attribute and names prefixed with an
        abbreviated name-space identifier, like: <code>&lt;xsl:if
        ...&gt;</code>. The type is a <code>Boolean</code> object that must be
        <code>true</code> when the parser supports name-spaces. All other
        values, or the absence of the property, indicate that the parser does
        not implement name-spaces.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.util.xml.XMLParserActivator.PARSER_VALIDATING" xrefstyle="hyperlink"/> - The registered parser can read the DTD and
        can validate the XML accordingly. The type is a <code>Boolean</code>
        object that must <code>true</code> when the parser is validating. All
        other values, or the absence of the property, indicate that the parser
        does not validate.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Getting a Parser Factory</title>

    <para>Getting a parser factory requires a bundle to get the appropriate
    factory from the service registry. In a simple case in which a
    non-validating, non-name-space aware parser would suffice, it is best to
    use <code>getServiceReference(String)</code>.</para>

    <programlisting>DocumentBuilder getParser(BundleContext context) 
    throws Exception {
    ServiceReference ref = context.getServiceReference(
        DocumentBuilderFactory.class.getName() );
    if ( ref == null )
        return null;
    DocumentBuilderFactory factory = 
        (DocumentBuilderFactory) context.getService(ref);
    return factory.newDocumentBuilder();
}</programlisting>

    <para>In a more demanding case, the filtered version allows the bundle to
    select a parser that is validating and name-space aware:</para>

    <programlisting>SAXParser getParser(BundleContext context) 
    throws Exception {
    ServiceReference refs[] = context.getServiceReferences(
        SAXParserFactory.class.getName(),
            "(&amp;(parser.namespaceAware=true)"
        +   "(parser.validating=true))" );
    if ( refs == null )
        return null;
    SAXParserFactory factory = 
        (SAXParserFactory) context.getService(refs[O]);
    return factory.newSAXParser();
}</programlisting>
  </section>

  <section>
    <title>Adapting a JAXP Parser to OSGi</title>

    <para>If an XML Parser supports JAXP, then it can be converted to an OSGi
    aware bundle by adding a <code>BundleActivator</code> class which
    registers an XML Parser Service. The utility
    <code>org.osgi.util.xml.XMLParserActivator</code> class provides this
    function and can be added (copied, not referenced) to any XML Parser
    bundle, or it can be extended and customized if desired.</para>

    <section>
      <title>JAR Based Services</title>

      <para>Its functionality is based on the definition of the <xref linkend="i1267674"/>. This specification defines a concept for service
      providers. A JAR file can contain an implementation of an abstractly
      defined service. The class (or classes) implementing the service are
      designated from a file in the <code>META-INF/services</code> directory.
      The name of this file is the same as the abstract service class.</para>

      <para>The content of the UTF-8 encoded file is a list of class names
      separated by new lines. White space is ignored and the number sign
      (<code>'#' \u0023</code>) is the comment character.</para>

      <para>JAXP uses this service provider mechanism. It is therefore likely
      that vendors will place these service files in the
      <code>META-INF/services</code> directory.</para>
    </section>

    <section>
      <title>XMLParserActivator</title>

      <para>To support this mechanism, the XML Parser service provides a
      utility class that should be normally delivered with the OSGi framework
      implementation. This class is a Bundle Activator and must start when the
      bundle is started. This class is copied into the parser bundle, and
      <emphasis>not</emphasis> imported.</para>

      <para>The <code>start</code> method of the utility
      <code>BundleActivator</code> class will look in the
      <code>META-INF/services</code> service provider directory for the files
      <code>javax.xml.parsers.SAXParserFactory (</code> <xref linkend="org.osgi.util.xml.XMLParserActivator.SAXFACTORYNAME" xrefstyle="hyperlink"/> ) or
      <code>javax.xml.parsers.DocumentBuilderFactory (</code> <xref linkend="org.osgi.util.xml.XMLParserActivator.DOMFACTORYNAME" xrefstyle="hyperlink"/> ). The full path name is specified in the
      constants <xref linkend="org.osgi.util.xml.XMLParserActivator.SAXCLASSFILE" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.util.xml.XMLParserActivator.DOMCLASSFILE" xrefstyle="hyperlink"/> respectively.</para>

      <para>If either of these files exist, the utility
      <code>BundleActivator</code> class will parse the contents according to
      the specification. A service provider file can contain multiple class
      names. Each name is read and a new instance is created. The following
      example shows the possible content of such a file:</para>

      <programlisting># ACME example SAXParserFactory file
com.acme.saxparser.SAXParserFast            # Fast
com.acme.saxparser.SAXParserValidating      # Validates</programlisting>

      <para>Both the <code>javax.xml.parsers.SAXParserFactory</code> and the
      <code>javax.xml.parsers.DocumentBuilderFactory</code> provide methods
      that describe the features of the parsers they can create. The
      <code>XMLParserActivator</code> activator will use these methods to set
      the values of the properties, as defined in <xref linkend="i1259424"/>,
      that describe the instances.</para>
    </section>

    <section>
      <title>Adapting an Existing JAXP Compatible Parser</title>

      <para>To incorporate this bundle activator into a XML Parser Bundle, do
      the following:</para>

      <itemizedlist>
        <listitem>
          <para>If SAX parsing is supported, create a
          <code>/META-INF/services/javax.xml.parsers.SAXParserFactory</code>
          resource file containing the class names of the
          <code>SAXParserFactory</code> classes.</para>
        </listitem>

        <listitem>
          <para>If DOM parsing is supported, create a
          <code>/META-INF/services/javax.xml.parsers.DocumentBuilderFactory</code>
          file containing the fully qualified class names of the
          <code>DocumentBuilderFactory</code> classes.</para>
        </listitem>

        <listitem>
          <para>Create manifest file which imports the packages
          <code>org.w3c.dom</code>, <code>org.xml.sax</code>, and
          <code>javax.xml.parsers</code>.</para>
        </listitem>

        <listitem>
          <para>Add a Bundle-Activator header to the manifest pointing to the
          <code>XMLParserActivator</code>, the sub-class that was created, or
          a fully custom one.</para>
        </listitem>

        <listitem>
          <para>If the parsers support attributes, properties, or features
          that should be registered as properties so they can be searched,
          extend the <code>XMLParserActivator</code> class and override <xref linkend="org.osgi.util.xml.XMLParserActivator.setSAXProperties-javax.xml.parsers.SAXParserFactory-Hashtable-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.util.xml.XMLParserActivator.setDOMProperties-javax.xml.parsers.DocumentBuilderFactory-Hashtable-" xrefstyle="hyperlink"/>.</para>
        </listitem>

        <listitem>
          <para>Ensure that custom properties are put into the
          <code>Hashtable</code> object. JAXP does not provide a way for
          <code>XMLParserActivator</code> to query the parser to find out what
          properties were added.</para>
        </listitem>

        <listitem>
          <para>Bundles that extend the <code>XMLParserActivator</code> class
          must call the original methods via super to correctly initialize the
          XML Parser Service properties.</para>
        </listitem>

        <listitem>
          <para>Compile this class into the bundle.</para>
        </listitem>

        <listitem>
          <para>Install the new XML Parser Service bundle.</para>
        </listitem>

        <listitem>
          <para>Ensure that the
          <code>org.osgi.util.xml.XMLParserActivator</code> class is contained
          in the bundle.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Usage of JAXP</title>

    <para>A single bundle should export the JAXP, SAX, and DOM APIs. The
    version of contained packages must be appropriately labeled. JAXP 1.1 or
    later is required which references SAX 2 and DOM 2. See <xref linkend="i1255594"/> for the exact version dependencies.</para>

    <para>This specification is related to related packages as defined in the
    JAXP 1.1 document. The following table contains the expected minimum
    versions.</para>

    <table>
      <title>JAXP 1.1 minimum package versions</title>

      <tgroup cols="2">
        <thead>
          <row>
            <entry>Package</entry>

            <entry>Minimum Version</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><para>javax.xml.parsers</para></entry>

            <entry><para>1.1</para></entry>
          </row>

          <row>
            <entry><para>org.xml.sax</para></entry>

            <entry><para>2.0</para></entry>
          </row>

          <row>
            <entry><para>org.xml.sax.helpers</para></entry>

            <entry><para>2.0</para></entry>
          </row>

          <row>
            <entry><para>org.xsml.sax.ext</para></entry>

            <entry><para>1.0</para></entry>
          </row>

          <row>
            <entry><para>org.w3c.dom</para></entry>

            <entry><para>2.0</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The Xerces project from the Apache group, <xref linkend="i1286146"/>, contains a number libraries that implement the
    necessary APIs. These libraries can be wrapped in a bundle to provide the
    relevant packages.</para>
  </section>

  <section>
    <title>Security</title>

    <para>A centralized XML parser is likely to see sensitive information from
    other bundles. Provisioning an XML parser should therefore be limited to
    trusted bundles. This security can be achieved by providing
    <code>ServicePermission[javax.xml.parsers.DocumentBuilderFactory</code> |
    <code>javax.xml.parsers.SAXFactory,REGISTER]</code> to only trusted
    bundles.</para>

    <para>Using an XML parser is a common function, and
    <code>ServicePermission[javax.xml.parsers.DOMParserFactory</code> |
    <code>javax.xml.parsers.SAXFactory, GET]</code> should not be
    restricted.</para>

    <para>The XML parser bundle will need <code>FilePermission[&lt;&lt;ALL
    FILES&gt;&gt;,READ]</code> for parsing of files because it is not known
    beforehand where those files will be located. This requirement further
    implies that the XML parser is a system bundle that must be fully
    trusted.</para>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.util.xml" xml:id="org.osgi.util.xml" xml:base="../../generated/javadoc/docbook/org.osgi.util.xml.xml">
   <title>org.osgi.util.xml</title>
   <info>
      <releaseinfo xml:id="org.osgi.util.xml-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.util.xml-version.number">1.0</edition>
   </info>
   <para>
XML Parser Package Version 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.util.xml; version="[1.0,2.0)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.util.xml.XMLParserActivator">
                  <code>XMLParserActivator</code>
               </link> - 
A BundleActivator class that allows any JAXP compliant XML Parser to register
 itself as an OSGi parser service.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="XMLParserActivator" xml:id="org.osgi.util.xml.XMLParserActivator">
      <title>public class XMLParserActivator<?line-break?> implements BundleActivator, ServiceFactory</title>
      <para>
A BundleActivator class that allows any JAXP compliant XML Parser to register
 itself as an OSGi parser service.
 
 Multiple JAXP compliant parsers can concurrently register by using this
 BundleActivator class. Bundles who wish to use an XML parser can then use the
 framework's service registry to locate available XML Parsers with the desired
 characteristics such as validating and namespace-aware.
 
 </para>
      <para>
 The services that this bundle activator enables a bundle to provide are:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <code>javax.xml.parsers.SAXParserFactory</code>(<link linkend="org.osgi.util.xml.XMLParserActivator.SAXFACTORYNAME">SAXFACTORYNAME</link>)</para>
         </listitem>
         <listitem>
            <para>
               <code>javax.xml.parsers.DocumentBuilderFactory</code>( <link linkend="org.osgi.util.xml.XMLParserActivator.DOMFACTORYNAME">DOMFACTORYNAME</link>
 )</para>
         </listitem>
      </itemizedlist>
      <para>
 The algorithm to find the implementations of the abstract parsers is derived
 from the JAR file specifications, specifically the Services API.
 </para>
      <para>
 An XMLParserActivator assumes that it can find the class file names of the
 factory classes in the following files:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <code>/META-INF/services/javax.xml.parsers.SAXParserFactory</code> is a file
 contained in a jar available to the runtime which contains the implementation
 class name(s) of the SAXParserFactory.</para>
         </listitem>
         <listitem>
            <para>
               <code>/META-INF/services/javax.xml.parsers.DocumentBuilderFactory</code> is a
 file contained in a jar available to the runtime which contains the
 implementation class name(s) of the <code>DocumentBuilderFactory</code>
            </para>
         </listitem>
      </itemizedlist>
      <para>
 If either of the files does not exist, <code>XMLParserActivator</code> assumes
 that the parser does not support that parser type.
 
 </para>
      <para>
         <code>XMLParserActivator</code> attempts to instantiate both the
 <code>SAXParserFactory</code> and the <code>DocumentBuilderFactory</code>. It registers
 each factory with the framework along with service properties:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.util.xml.XMLParserActivator.PARSER_VALIDATING">PARSER_VALIDATING</link>- indicates if this factory supports validating
 parsers. It's value is a <code>Boolean</code>.</para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.util.xml.XMLParserActivator.PARSER_NAMESPACEAWARE">PARSER_NAMESPACEAWARE</link>- indicates if this factory supports
 namespace aware parsers It's value is a <code>Boolean</code>.</para>
         </listitem>
      </itemizedlist>
      <para>
 Individual parser implementations may have additional features, properties,
 or attributes which could be used to select a parser with a filter. These can
 be added by extending this class and overriding the <code>setSAXProperties</code>
 and <code>setDOMProperties</code> methods.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="field" xreflabel="DOMCLASSFILE" xml:id="org.osgi.util.xml.XMLParserActivator.DOMCLASSFILE">
         <title>public static final String DOMCLASSFILE = "/META-INF/services/javax.xml.parsers.DocumentBuilderFactory"</title>
         <para>
Fully qualified path name of DOM Parser Factory Class Name file
   </para>
      </section>
      <section role="field" xreflabel="DOMFACTORYNAME" xml:id="org.osgi.util.xml.XMLParserActivator.DOMFACTORYNAME">
         <title>public static final String DOMFACTORYNAME = "javax.xml.parsers.DocumentBuilderFactory"</title>
         <para>
Filename containing the DOM Parser Factory Class name. Also used as the
 basis for the <code>SERVICE_PID</code> registration property.
   </para>
      </section>
      <section role="field" xreflabel="PARSER_NAMESPACEAWARE" xml:id="org.osgi.util.xml.XMLParserActivator.PARSER_NAMESPACEAWARE">
         <title>public static final String PARSER_NAMESPACEAWARE = "parser.namespaceAware"</title>
         <para>
Service property specifying if factory is configured to support namespace
 aware parsers. The value is of type <code>Boolean</code>.
   </para>
      </section>
      <section role="field" xreflabel="PARSER_VALIDATING" xml:id="org.osgi.util.xml.XMLParserActivator.PARSER_VALIDATING">
         <title>public static final String PARSER_VALIDATING = "parser.validating"</title>
         <para>
Service property specifying if factory is configured to support
 validating parsers. The value is of type <code>Boolean</code>.
   </para>
      </section>
      <section role="field" xreflabel="SAXCLASSFILE" xml:id="org.osgi.util.xml.XMLParserActivator.SAXCLASSFILE">
         <title>public static final String SAXCLASSFILE = "/META-INF/services/javax.xml.parsers.SAXParserFactory"</title>
         <para>
Fully qualified path name of SAX Parser Factory Class Name file
   </para>
      </section>
      <section role="field" xreflabel="SAXFACTORYNAME" xml:id="org.osgi.util.xml.XMLParserActivator.SAXFACTORYNAME">
         <title>public static final String SAXFACTORYNAME = "javax.xml.parsers.SAXParserFactory"</title>
         <para>
Filename containing the SAX Parser Factory Class name. Also used as the
 basis for the <code>SERVICE_PID</code> registration property.
   </para>
      </section>
      <section role="method" xreflabel="XMLParserActivator()" xml:id="org.osgi.util.xml.XMLParserActivator.XMLParserActivator--">
         <title>public  XMLParserActivator()</title>
         <para/>
      </section>
      <section role="method" xreflabel="getService(Bundle,ServiceRegistration)" xml:id="org.osgi.util.xml.XMLParserActivator.getService-Bundle-ServiceRegistration-">
         <title>public Object getService(Bundle bundle,ServiceRegistration registration)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The bundle using the service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>registration</title>
            <para>The <code>ServiceRegistration</code> object for the
        service.</para>
         </formalpara>
         <para role="description">
Creates a new XML Parser Factory object.
 
 </para>
         <para>
 A unique XML Parser Factory object is returned for each call to this
 method.
 
 </para>
         <para>
 The returned XML Parser Factory object will be configured for validating
 and namespace aware support as specified in the service properties of the
 specified ServiceRegistration object.
 
 This method can be overridden to configure additional features in the
 returned XML Parser Factory object.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new, configured XML Parser Factory object or null if a
         configuration error was encountered</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="setDOMProperties(javax.xml.parsers.DocumentBuilderFactory,Hashtable)" xml:id="org.osgi.util.xml.XMLParserActivator.setDOMProperties-javax.xml.parsers.DocumentBuilderFactory-Hashtable-">
         <title>public void setDOMProperties(DocumentBuilderFactory factory,Hashtable props)</title>
         <formalpara role="parameter">
            <title>factory</title>
            <para>- the DocumentBuilderFactory object</para>
         </formalpara>
         <formalpara role="parameter">
            <title>props</title>
            <para>- Hashtable of service properties.</para>
         </formalpara>
         <para>
 Set the customizable DOM Parser Service Properties.
 
 </para>
         <para>
 This method attempts to instantiate a validating parser and a namespace
 aware parser to determine if the parser can support those features. The
 appropriate properties are then set in the specified props object.
 
 </para>
         <para>
 This method can be overridden to add additional DOM2 features and
 properties. If you want to be able to filter searches of the OSGi service
 registry, this method must put a key, value pair into the properties
 object for each feature or property. For example,
 
 properties.put("http://www.acme.com/features/foo", Boolean.TRUE);</para>
      </section>
      <section role="method" xreflabel="setSAXProperties(javax.xml.parsers.SAXParserFactory,Hashtable)" xml:id="org.osgi.util.xml.XMLParserActivator.setSAXProperties-javax.xml.parsers.SAXParserFactory-Hashtable-">
         <title>public void setSAXProperties(SAXParserFactory factory,Hashtable properties)</title>
         <formalpara role="parameter">
            <title>factory</title>
            <para>- the SAXParserFactory object</para>
         </formalpara>
         <formalpara role="parameter">
            <title>properties</title>
            <para>- the properties object for the service</para>
         </formalpara>
         <para>
 Set the customizable SAX Parser Service Properties.
 
 </para>
         <para>
 This method attempts to instantiate a validating parser and a namespace
 aware parser to determine if the parser can support those features. The
 appropriate properties are then set in the specified properties object.
 
 </para>
         <para>
 This method can be overridden to add additional SAX2 features and
 properties. If you want to be able to filter searches of the OSGi service
 registry, this method must put a key, value pair into the properties
 object for each feature or property. For example,
 
 properties.put("http://www.acme.com/features/foo", Boolean.TRUE);</para>
      </section>
      <section role="method" xreflabel="start(BundleContext)" xml:id="org.osgi.util.xml.XMLParserActivator.start-BundleContext-">
         <title>public void start(BundleContext context) throws Exception</title>
         <formalpara role="parameter">
            <title>context</title>
            <para>The execution context of the bundle being started.</para>
         </formalpara>
         <para role="description">
Called when this bundle is started so the Framework can perform the
 bundle-specific activities necessary to start this bundle. This method
 can be used to register services or to allocate any resources that this
 bundle needs.
 
 </para>
         <para>
 This method must complete and return to its caller in a timely manner.
 
 </para>
         <para>
 This method attempts to register a SAX and DOM parser with the
 Framework's service registry.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– If this method throws an exception, this
         bundle is marked as stopped and the Framework will remove this
         bundle's listeners, unregister all services registered by this
         bundle, and release all services used by this bundle.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="stop(BundleContext)" xml:id="org.osgi.util.xml.XMLParserActivator.stop-BundleContext-">
         <title>public void stop(BundleContext context) throws Exception</title>
         <formalpara role="parameter">
            <title>context</title>
            <para>The execution context of the bundle being stopped.</para>
         </formalpara>
         <para role="description">
This method has nothing to do as all active service registrations will
 automatically get unregistered when the bundle stops.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– If this method throws an exception, the
         bundle is still marked as stopped, and the Framework will remove
         the bundle's listeners, unregister all services registered by the
         bundle, and release all services used by the bundle.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="ungetService(Bundle,ServiceRegistration,Object)" xml:id="org.osgi.util.xml.XMLParserActivator.ungetService-Bundle-ServiceRegistration-Object-">
         <title>public void ungetService(Bundle bundle,ServiceRegistration registration,Object service)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The bundle releasing the service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>registration</title>
            <para>The <code>ServiceRegistration</code> object for the
        service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>service</title>
            <para>The XML Parser Factory object returned by a previous call
        to the <code>getService</code> method.</para>
         </formalpara>
         <para role="description">
Releases a XML Parser Factory object.
   </para>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed><title>XML</title>http://www.w3.org/XML</bibliomixed>

      <bibliomixed><title>SAX</title>http://www.saxproject.org/</bibliomixed>

      <bibliomixed><title>DOM Java Language
      Binding</title>http://www.w3.org/TR/REC-DOM-Level-1/java-language-binding.html</bibliomixed>

      <bibliomixed xml:id="i1255594"><title>JAXP</title>http://jaxp.java.net/</bibliomixed>

      <bibliomixed xml:id="i1267674"><title>JAR File specification, services
      directory</title>http://download.oracle.com/javase/1.4.2/docs/guide/jar/jar.html</bibliomixed>

      <bibliomixed xml:id="i1286146"><title>Xerces 2 Java
      Parser</title>http://xerces.apache.org/xerces2-j/</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" label="705" revision="$Id: 5e607514f22b8a60c5c87b11686afa82bc24006d $" version="5" xml:id="util.promise" xml:base="../705/util.promise.xml">
  <title>Promises Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.util.promise-version" linkend="org.osgi.util.promise"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>One of the fundamental pieces of an asynchronous programming model
    is the mechanism by which clients retrieve the result of the asynchronous
    task. Since Java 5, there has been a
    <code>java.util.concurrent.Future</code> interface available in the Java
    class libraries, which means that it is the <emphasis>de facto</emphasis>
    API in Java for handling the result of an asynchronous task. Futures have
    some limitations however in that they have no mechanism for registering
    callbacks. Java 8 introduces the class
    <code>java.util.concurrent.CompletableFuture</code> which addresses this
    but the requirement of Java 8 is unsuitable for many OSGi users at this
    time.</para>

    <para>This specification defines a Promises API which can be used on many
    versions of Java including Java 5 and Java ME CDC/Foundation. The Promises
    API defined by this specification is independent of all other OSGi
    specifications including the OSGi Framework and thus can be easily used
    outside of the OSGi environment.</para>

    <para>A Promise object holds the result of a potentially asynchronous
    task. The receiver of a Promise object can register callbacks on the
    Promise to be notified when the result is available or can block on the
    result becoming available. Promises can be chained together in powerful
    ways to handle asynchronous work flows and recovery.</para>

    <para>Promises capture the effects of latency and errors by making these
    explicit in the API signatures. Latency is represented by callbacks which
    will eventually be called. Errors are represented by the failure member.
    In essence, this is what sets Promises apart from things such as RPC calls
    where such effects are not explicitly captured but rather attempted to be
    transparently handled.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Common concepts</emphasis> - The API is inspired by
          the Promises work in JavaScript and uses the same basic concepts.
          See <xref linkend="util.promise-ref.javascript"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Independent</emphasis> - The design is independent
          of all other OSGi specifications and can be used outside of an OSGi
          environment.</para>
        </listitem>

        <listitem>
          <para><emphasis>Asynchronous</emphasis> - The design supports
          asynchronous tasks.</para>
        </listitem>

        <listitem>
          <para><emphasis>Small</emphasis> - The API and implementation are
          very compact.</para>
        </listitem>

        <listitem>
          <para><emphasis>Complete</emphasis> - The design provides a very
          complete set of operations for Promise which are primitives that can
          be used to address most use cases.</para>
        </listitem>

        <listitem>
          <para><emphasis>Monad</emphasis> - The design supports monadic
          programming. See <xref linkend="util.promise-ref.monad"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Resolution</emphasis> - A Promise can be resolved
          successfully with a value or unsuccessfully with an
          exception.</para>
        </listitem>

        <listitem>
          <para><emphasis>Generified</emphasis> - Generics are used to promote
          type safety.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Promise</emphasis> - A Promise object holds the
          eventual result of a potentially asynchronous task.</para>
        </listitem>

        <listitem>
          <para><emphasis>Callback</emphasis> - The receiver of a Promise can
          register callbacks on the Promise to be notified when the task is
          completed.</para>
        </listitem>

        <listitem>
          <para><emphasis>Deferred</emphasis> - A Deferred object represents
          the potentially asynchronous task and is used to resolve the
          Promise.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Class diagram of org.osgi.util.promise</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.227in" contentwidth="7.000in" fileref="promise-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>Promise</title>

    <para>A Promise object holds the eventual result of a potentially
    asynchronous task. A Promise is either unresolved or resolved. An
    <emphasis>unresolved</emphasis> Promise does not have the result of the
    associated task available while a <emphasis>resolved</emphasis> Promise
    has the result of the associated task available. The <xref linkend="org.osgi.util.promise.Promise.isDone--" xrefstyle="hyperlink"/>
    method must return <code>true</code> if the Promise is resolved and
    <code>false</code> if the Promise is unresolved. A Promise must only be
    resolved once.</para>

    <para>A resolved Promise can be either resolved with a value, which means
    the associated task <emphasis>completed successfully</emphasis> and
    supplied a result, or resolved with a failure, which means the associated
    task <emphasis>completed unsuccessfully</emphasis> and supplied an
    exception. The <xref linkend="org.osgi.util.promise.Promise.getFailure--" xrefstyle="hyperlink"/> method can be called to determine if the resolved
    Promise completed successfully with a value or unsuccessfully with a
    failure. If the <xref linkend="org.osgi.util.promise.Promise.getFailure--" xrefstyle="hyperlink"/> method returns a <code>Throwable</code>, the
    Promise resolved unsuccessfully with a failure. If the <xref linkend="org.osgi.util.promise.Promise.getFailure--" xrefstyle="hyperlink"/> method returns <code>null</code>, the Promise
    resolved successfully with a value that can be obtained from <xref linkend="org.osgi.util.promise.Promise.getValue--" xrefstyle="hyperlink"/>.</para>

    <para>If the Promise is unresolved, then calling <xref linkend="org.osgi.util.promise.Promise.getFailure--" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.util.promise.Promise.getValue--" xrefstyle="hyperlink"/>
    must block until the Promise is resolved. In general, these two methods
    should not be used outside of a callback. Use callbacks to be notified
    when the Promise is resolved. See <xref linkend="util.promise-callbacks"/>.</para>
  </section>

  <section>
    <title>Deferred</title>

    <para><xref linkend="org.osgi.util.promise.Promise" xrefstyle="hyperlink"/> is an interface which can allow for many Promise
    implementations. This API contains the <xref linkend="org.osgi.util.promise.Deferred" xrefstyle="hyperlink"/> class
    which provides a standard Promise implementation. A Deferred object can be
    created with the <xref linkend="org.osgi.util.promise.Deferred.Deferred--" xrefstyle="hyperlink"/> constructor and the Promise associated with the
    new Deferred object can be obtained using <xref linkend="org.osgi.util.promise.Deferred.getPromise--" xrefstyle="hyperlink"/>. This Promise can then be supplied to other
    parties who can use it to be notified of and obtain the eventual
    result.</para>

    <programlisting>public Promise&lt;String&gt; getTimeConsumingAnswer() {
  Deferred&lt;String&gt; deferred = new Deferred&lt;String&gt;();
  asynchronously(() -&gt; doTask(deferred));
  return deferred.getPromise();
}</programlisting>

    <para>A Deferred object can later be used to resolve the associated
    Promise successfully by calling <xref linkend="org.osgi.util.promise.Deferred.resolve-T-" xrefstyle="hyperlink"/> or unsuccessfully by calling <xref linkend="org.osgi.util.promise.Deferred.fail-Throwable-" xrefstyle="hyperlink"/>.</para>

    <programlisting>private void doTask(Deferred&lt;String&gt; deferred) {
  try {
    String answer = computeTimeConsumingAnswer();
    deferred.resolve(answer); // successfully resolve with value
  } catch (Exception e) {
    deferred.fail(e); // unsuccessfully resolve with exception
  }
}</programlisting>

    <para>A Deferred object can also be used to resolve the associated Promise
    with the eventual result of another Promise by calling <xref linkend="org.osgi.util.promise.Deferred.resolveWith-Promise-" xrefstyle="hyperlink"/>.</para>

    <programlisting>private void doTask(Deferred&lt;String&gt; deferred) {
  try {
    Promise&lt;String&gt; answer = getPromiseWithTheAnswer();
    deferred.resolveWith(answer); // resolve with another Promise
  } catch (Exception e) {
    deferred.fail(e); // unsuccessfully resolve with exception
  }
}</programlisting>

    <para>If <xref linkend="org.osgi.util.promise.Deferred.resolve-T-" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.util.promise.Deferred.fail-Throwable-" xrefstyle="hyperlink"/> is called when the Promise associated with the
    Deferred is already resolved, then an Illegal State Exception must be
    thrown.</para>

    <para>Care must be taken in sharing a Deferred object with other parties
    since the other parties can resolve the associated Promise. A Deferred
    object should be made available only to the party that will responsible
    for resolving the associated Promise.</para>
  </section>

  <section xml:id="util.promise-callbacks">
    <title>Callbacks</title>

    <para>To be notified when a Promise has been resolved, callbacks are used.
    The Promise API provides two forms of callbacks: the basic
    <code>Runnable</code> callback and the more specialized <xref linkend="org.osgi.util.promise.Success" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.util.promise.Failure" xrefstyle="hyperlink"/>
    callbacks.</para>

    <para>A callback may be called on a different thread than the thread which
    registered the callback. So the callback must be thread safe but can rely
    upon that the registration of the callback
    <emphasis>happens-before</emphasis> the callback is called.</para>

    <para>Resolving a Promise <emphasis>happens-before</emphasis> any
    registered callback is called. That is, for the resolved Promise, in a
    registered callback <xref linkend="org.osgi.util.promise.Promise.isDone--" xrefstyle="hyperlink"/> must return <code>true</code> and <xref linkend="org.osgi.util.promise.Promise.getValue--" xrefstyle="hyperlink"/>
    and <xref linkend="org.osgi.util.promise.Promise.getFailure--" xrefstyle="hyperlink"/> must not block.</para>

    <para>Callbacks may be registered at any time including before and after a
    Promise has been resolved. If a callback is registered before the Promise
    is resolved, it will be called later when the Promise is resolved. If a
    callback is registered on an already resolved Promise, it will be called
    right away.</para>

    <section>
      <title>Runnable</title>

      <para>The <xref linkend="org.osgi.util.promise.Promise.onResolve-Runnable-" xrefstyle="hyperlink"/> method is used to register a
      <code>Runnable</code> with the Promise which must be called when the
      Promise is resolved either successfully with a value or unsuccessfully
      with a failure. The resolved Promise is not passed to the Runnable, so
      if the Runnable implementation needs access to the resolved Promise, it
      must take care to ensure it has access.</para>

      <programlisting>final Promise&lt;String&gt; answer = getTimeConsumingAnswer();
answer.onResolve(new Runnable() {
  public void run() {
    doSomethingWithAnswer(answer);
  }
});</programlisting>

      <para>The <xref linkend="org.osgi.util.promise.Promise.onResolve-Runnable-" xrefstyle="hyperlink"/> method returns the Promise object upon which it
      is called.</para>
    </section>

    <section>
      <title>Success and Failure</title>

      <para>The <xref linkend="org.osgi.util.promise.Promise.then-Success-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.util.promise.Promise.then-Success-Failure-" xrefstyle="hyperlink"/> methods can be used to register the more
      specialized <xref linkend="org.osgi.util.promise.Success" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.util.promise.Failure" xrefstyle="hyperlink"/>
      callbacks. The <xref linkend="org.osgi.util.promise.Success" xrefstyle="hyperlink"/> callback is only called if the Promise is
      successfully resolved with a value. The <xref linkend="org.osgi.util.promise.Failure" xrefstyle="hyperlink"/> callback
      is only called if the Promise is unsuccessfully resolved with a
      failure.</para>

      <programlisting>Promise&lt;String&gt; answer = getTimeConsumingAnswer();
answer.then(p -&gt; processResult(p.getValue()), p -&gt; handleFailure(p.getFailure()));</programlisting>

      <para>The <code>then</code> methods return a new Promise which can be
      used to chain Promises together.</para>
    </section>
  </section>

  <section xml:id="util.promise-chaining.promises">
    <title>Chaining Promises</title>

    <para>The <xref linkend="org.osgi.util.promise.Promise.then-Success-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.util.promise.Promise.then-Success-Failure-" xrefstyle="hyperlink"/> methods also provide a means to chain Promises
    together. The <code>then</code> methods return a new Promise which is
    chained to the original Promise upon which the <code>then</code> method
    was called. The returned Promise must be resolved when the original
    Promise is resolved after the specified Success or Failure callback is
    executed. The result of the executed callback must be used to resolve the
    returned Promise. A sequence of calls to the <code>then</code> methods can
    be used to create a chain of promises which are resolved in
    sequence.</para>

    <para>If the original Promise is successfully resolved, the Success
    callback is executed and the Promise returned by the Success callback, if
    any, or thrown exception is used to resolve the Promise returned from the
    <code>then</code> method. If the original Promise is resolved with a
    failure, the Failure callback is executed and the Promise returned from
    the <code>then</code> method is resolved with a failure.</para>

    <para>In the following example, a Promise which will supply the name of
    the file to download is chained to a Promise which will return a mirror
    URL to use to download the file which is then further chained to a Promise
    which will return an Input Stream from which to read the download
    file.</para>

    <programlisting>Promise&lt;String&gt; name = getDownloadName();
Promise&lt;URL&gt; mirror = name.then(p -&gt; getMirror(p.getValue()));
Promise&lt;InputStream&gt; in = mirror.then(p -&gt; getStream(p.getValue()));</programlisting>

    <para>Since we probably do not need the intermediate Promises, we can
    collapse the chain into a single statement.</para>

    <programlisting>Promise&lt;InputStream&gt; in = getDownloadName().then(p -&gt; getMirror(p.getValue()))
                                           .then(p -&gt; getStream(p.getValue()));</programlisting>

    <para>The chain of Promises will also propagate any exceptions that occur
    to resolve the last Promise in the chain which means we do not need to do
    any exception handling in the intermediate tasks.</para>
  </section>

  <section xml:id="util.promise-monad.programming">
    <title>Monad</title>

    <para>The Promise API supports monadic programming. See <xref linkend="util.promise-ref.monad"/>. The <xref linkend="org.osgi.util.promise.Promise" xrefstyle="hyperlink"/> interface
    defines a number of interesting methods including <code>map</code>,
    <code>flatMap</code> and <code>filter</code>.</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.util.promise.Promise.filter-Predicate-" xrefstyle="hyperlink"/> - Filter the value of the Promise.</para>

        <para>If the Promise is successfully resolved, the predicate argument
        is called with the value of the Promise. If the predicate accepts the
        value, then the value is used to successfully resolve the Promise
        returned by the filter method. If the predicate does not accept the
        value, the Promise returned by the filter method is unsuccessfully
        resolved with a No Such Element Exception. If the predicate throws an
        exception, the Promise returned by the filter method is unsuccessfully
        resolved with that exception.</para>

        <para>If the Promise is unsuccessfully resolved, the predicate
        argument is not called and the Promise returned by the filter method
        is unsuccessfully resolved with the failure of the Promise.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.util.promise.Promise.map-Function-" xrefstyle="hyperlink"/> - Map the value of the Promise.</para>

        <para>If the Promise is successfully resolved, the function argument
        is called with the value of the Promise. The value returned by the
        function is used to successfully resolve the Promise returned by the
        map method. If the function throws an exception, the Promise returned
        by the map method is unsuccessfully resolved with that
        exception.</para>

        <para>If the Promise is unsuccessfully resolved, the function argument
        is not called and the Promise returned by the map method is
        unsuccessfully resolved with the failure of the Promise.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.util.promise.Promise.flatMap-Function-" xrefstyle="hyperlink"/> - FlatMap the value of the Promise.</para>

        <para>If the Promise is successfully resolved, the function argument
        is called with the value of the Promise. The Promise returned by the
        function is used to resolve the Promise returned by the flatMap
        method. If the function throws an exception, the Promise returned by
        the flatMap method is unsuccessfully resolved with that
        exception.</para>

        <para>If the Promise is unsuccessfully resolved, the function argument
        is not called and the Promise returned by the flatMap method is
        unsuccessfully resolved with the failure of the Promise.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.util.promise.Promise.recover-Function-" xrefstyle="hyperlink"/> - Recover from the unsuccessful resolution of
        the Promise with a recovery value.</para>

        <para>If the Promise is successfully resolved, the function argument
        is not called and the Promise returned by the recover method is
        resolved with the value of the Promise.</para>

        <para>If the Promise is unsuccessfully resolved, the function argument
        is called with the Promise to supply a recovery value. If the recovery
        value is not <code>null</code>, the Promise returned by the recover
        method is successfully resolved with the recovery value. If the
        recovery value is <code>null</code>, the Promise returned by the
        recover method is unsuccessfully resolved with the failure of the
        Promise. If the function throws an exception, the Promise returned by
        the recover method is unsuccessfully resolved with that
        exception.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.util.promise.Promise.recoverWith-Function-" xrefstyle="hyperlink"/> - Recover from the unsuccessful resolution of
        the Promise with a recovery Promise.</para>

        <para>If the Promise is successfully resolved, the function argument
        is not called and the Promise returned by the recover method is
        resolved with the value of the Promise.</para>

        <para>If the Promise is unsuccessfully resolved, the function argument
        is called with the Promise to supply a recovery Promise. If the
        recovery Promise is not <code>null</code>, the Promise returned by the
        recover method is resolved with the recovery Promise. If the recovery
        Promise is <code>null</code>, the Promise returned by the recover
        method is unsuccessfully resolved with the failure of the Promise. If
        the function throws an exception, the Promise returned by the recover
        method is unsuccessfully resolved with that exception.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.util.promise.Promise.fallbackTo-Promise-" xrefstyle="hyperlink"/> - Fall back to the value of the Promise
        argument if the Promise unsuccessfully resolves.</para>

        <para>If the Promise is successfully resolved, the Promise argument is
        not used and the Promise returned by the fallbackTo method is resolved
        with the value of the Promise.</para>

        <para>If the Promise is unsuccessfully resolved, the Promise argument
        is used to provide a fallback value when it becomes resolved. If the
        Promise argument is successfully resolved, the Promise returned by the
        fallbackTo method is resolved with the value of the Promise argument.
        If the Promise argument is unsuccessfully resolved, the Promise
        returned by the fallbackTo method is unsuccessfully resolved with the
        failure of the Promise.</para>
      </listitem>
    </itemizedlist>

    <para>These functions can be used to build pipelines of chained Promises
    that are processed in sequence. For example, in the following chain, the
    value of the original promise, once resolved, is filtered for acceptable
    values. If the filter says the value is not acceptable, the recover method
    will be used to replace it with a default value.</para>

    <programlisting>return promise.filter(v -&gt; isValueOk(v)).recover(p -&gt; getDefaultValue())</programlisting>

    <para>With these chains, one can write powerful programs without the need
    to resort to complex if/else and try/catch logic.</para>
  </section>

  <section>
    <title>Functional Interfaces</title>

    <para>In Java 8, the concept of Functional Interfaces is introduced. See
    <xref linkend="util.promise-ref.functional.interfaces"/>. Functional
    interfaces are interfaces with a single abstract method. Instances of
    functional interfaces can be created with lambda expressions, method
    references, or constructor references. Many methods on <xref linkend="org.osgi.util.promise.Promise" xrefstyle="hyperlink"/> take
    functional interface arguments and so are suitable for use with lambda
    expressions and method references in Java 8.</para>

    <para>Two of these functional interfaces are <xref linkend="org.osgi.util.function.Function" xrefstyle="hyperlink"/> and
    <xref linkend="org.osgi.util.function.Predicate" xrefstyle="hyperlink"/>.
    These are equivalent to functional interfaces which are part of the
    <code>java.util.function</code> package introduced in Java 8. Since OSGi
    intends the Promise API to be usable on versions of Java prior to Java 8,
    we define our own interfaces. In the future, if Java 8 or later, becomes
    the base supported Java level for this specification, OSGi can update the
    <xref linkend="org.osgi.util.promise.Promise" xrefstyle="hyperlink"/>
    interface to add default methods which accept the
    <code>java.util.function</code> versions of these functional
    interfaces.</para>
  </section>

  <section>
    <title>Promises Class</title>

    <para>The <xref linkend="org.osgi.util.promise.Promises" xrefstyle="hyperlink"/> class provides several useful static methods when
    working with Promises.</para>

    <para>Often, you may need to create an already resolved Promise to return
    or chain with another Promise. The <xref linkend="org.osgi.util.promise.Promises.resolved-T-" xrefstyle="hyperlink"/> method can be used to create a new Promise already
    successfully resolved with the specified value. The <xref linkend="org.osgi.util.promise.Promises.failed-Throwable-" xrefstyle="hyperlink"/> method can be used to create a new Promise already
    unsuccessfully resolved with the specified exception.</para>

    <programlisting>  return getTimeConsumingAnswer().fallbackTo(Promises.resolved("Fallback Value"));</programlisting>

    <para>The Promises class also provides the <xref linkend="org.osgi.util.promise.Promises.all-Promise...-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.util.promise.Promises.all-Collection-" xrefstyle="hyperlink"/> methods which return a new Promise that is a latch
    on the specified Promises. The returned Promise must resolve only when all
    of the specified Promises have resolved.</para>
  </section>

  <section>
    <title>Security</title>

    <para>The Promise API does not define any OSGi services nor does the API
    perform any privileged actions. Therefore, it has no security
    considerations.</para>
  </section>

  <section version="5" role="package" xreflabel="org.osgi.util.promise" xml:id="org.osgi.util.promise" xml:base="../../generated/javadoc/docbook/org.osgi.util.promise.xml">
   <title>org.osgi.util.promise</title>
   <info>
      <releaseinfo xml:id="org.osgi.util.promise-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.util.promise-version.number">1.0</edition>
   </info>
   <para>
Promise Package Version 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.util.promise; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.util.promise; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.util.promise.Deferred">
                  <code>Deferred</code>
               </link> - 
A Deferred Promise resolution.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.util.promise.FailedPromisesException">
                  <code>FailedPromisesException</code>
               </link> - 
Promise failure exception for a collection of failed Promises.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.util.promise.Failure">
                  <code>Failure</code>
               </link> - 
Failure callback for a Promise.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.util.promise.Promise">
                  <code>Promise</code>
               </link> - 
A Promise of a value.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.util.promise.Promises">
                  <code>Promises</code>
               </link> - 
Static helper methods for <link linkend="org.osgi.util.promise.Promise">Promise</link>s.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.util.promise.Success">
                  <code>Success</code>
               </link> - 
Success callback for a Promise.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="Deferred" xml:id="org.osgi.util.promise.Deferred">
      <title>public class Deferred&lt;T&gt;</title>
      <formalpara role="parameter">
         <title>&lt;T&gt;</title>
         <para>The value type associated with the created Promise.</para>
      </formalpara>
      <para>
A Deferred Promise resolution.
 
 </para>
      <para>
 Instances of this class can be used to create a <link linkend="org.osgi.util.promise.Promise">Promise</link> that can be
 resolved in the future. The <link linkend="org.osgi.util.promise.Deferred.getPromise--">associated</link> Promise can be
 successfully resolved with <link linkend="org.osgi.util.promise.Deferred.resolve-T-">resolve(Object)</link> or resolved with a
 failure with <link linkend="org.osgi.util.promise.Deferred.fail-Throwable-">fail(Throwable)</link>. It can also be resolved with the
 resolution of another promise using <link linkend="org.osgi.util.promise.Deferred.resolveWith-Promise-">resolveWith(Promise)</link>.
 
 </para>
      <para>
 The associated Promise can be provided to any one, but the Deferred object
 should be made available only to the party that will responsible for
 resolving the Promise.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section role="method" xreflabel="Deferred()" xml:id="org.osgi.util.promise.Deferred.Deferred--">
         <title>public  Deferred()</title>
         <para role="description">
Create a new Deferred with an associated Promise.
   </para>
      </section>
      <section role="method" xreflabel="fail(Throwable)" xml:id="org.osgi.util.promise.Deferred.fail-Throwable-">
         <title>public void fail(Throwable failure)</title>
         <formalpara role="parameter">
            <title>failure</title>
            <para>The failure of the resolved Promise. Must not be
        <code>null</code>.</para>
         </formalpara>
         <para role="description">
Fail the Promise associated with this Deferred.
 
 </para>
         <para>
 After the associated Promise is resolved with the specified failure, all
 registered <link linkend="org.osgi.util.promise.Promise.onResolve-Runnable-">callbacks</link> are called and
 any <link linkend="org.osgi.util.promise.Promise.then-Success-Failure-">chained</link> Promises are resolved.
 
 </para>
         <para>
 Resolving the associated Promise <emphasis>happens-before</emphasis> any registered
 callback is called. That is, in a registered callback,
 <link linkend="org.osgi.util.promise.Promise.isDone--">Promise.isDone()</link> must return <code>true</code> and
 <link linkend="org.osgi.util.promise.Promise.getValue--">Promise.getValue()</link> and <link linkend="org.osgi.util.promise.Promise.getFailure--">Promise.getFailure()</link> must not
 block.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the associated Promise was already
         resolved.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getPromise()" xml:id="org.osgi.util.promise.Deferred.getPromise--">
         <title>public Promise&lt;T&gt; getPromise()</title>
         <para role="description">
Returns the Promise associated with this Deferred.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Promise associated with this Deferred.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="resolve(T)" xml:id="org.osgi.util.promise.Deferred.resolve-T-">
         <title>public void resolve(T value)</title>
         <formalpara role="parameter">
            <title>value</title>
            <para>The value of the resolved Promise.</para>
         </formalpara>
         <para role="description">
Successfully resolve the Promise associated with this Deferred.
 
 </para>
         <para>
 After the associated Promise is resolved with the specified value, all
 registered <link linkend="org.osgi.util.promise.Promise.onResolve-Runnable-">callbacks</link> are called and
 any <link linkend="org.osgi.util.promise.Promise.then-Success-Failure-">chained</link> Promises are resolved.
 
 </para>
         <para>
 Resolving the associated Promise <emphasis>happens-before</emphasis> any registered
 callback is called. That is, in a registered callback,
 <link linkend="org.osgi.util.promise.Promise.isDone--">Promise.isDone()</link> must return <code>true</code> and
 <link linkend="org.osgi.util.promise.Promise.getValue--">Promise.getValue()</link> and <link linkend="org.osgi.util.promise.Promise.getFailure--">Promise.getFailure()</link> must not
 block.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the associated Promise was already
         resolved.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="resolveWith(Promise)" xml:id="org.osgi.util.promise.Deferred.resolveWith-Promise-">
         <title>public Promise&lt;Void&gt; resolveWith(Promise&lt;? extends T&gt; with)</title>
         <formalpara role="parameter">
            <title>with</title>
            <para>A Promise whose value or failure must be used to resolve the
        associated Promise. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Resolve the Promise associated with this Deferred with the specified
 Promise.
 
 </para>
         <para>
 If the specified Promise is successfully resolved, the associated Promise
 is resolved with the value of the specified Promise. If the specified
 Promise is resolved with a failure, the associated Promise is resolved
 with the failure of the specified Promise.
 
 </para>
         <para>
 After the associated Promise is resolved with the specified Promise, all
 registered <link linkend="org.osgi.util.promise.Promise.onResolve-Runnable-">callbacks</link> are called and
 any <link linkend="org.osgi.util.promise.Promise.then-Success-Failure-">chained</link> Promises are resolved.
 
 </para>
         <para>
 Resolving the associated Promise <emphasis>happens-before</emphasis> any registered
 callback is called. That is, in a registered callback,
 <link linkend="org.osgi.util.promise.Promise.isDone--">Promise.isDone()</link> must return <code>true</code> and
 <link linkend="org.osgi.util.promise.Promise.getValue--">Promise.getValue()</link> and <link linkend="org.osgi.util.promise.Promise.getFailure--">Promise.getFailure()</link> must not
 block.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Promise that is resolved only when the associated Promise is
         resolved by the specified Promise. The returned Promise must be
         successfully resolved with the value <code>null</code>, if the
         associated Promise was resolved by the specified Promise. The
         returned Promise must be resolved with a failure of
         IllegalStateException, if the associated Promise was
         already resolved when the specified Promise was resolved.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="FailedPromisesException" xml:id="org.osgi.util.promise.FailedPromisesException">
      <title>public class FailedPromisesException<?line-break?> extends RuntimeException</title>
      <para>
Promise failure exception for a collection of failed Promises.
   </para>
      <section role="method" xreflabel="FailedPromisesException(Collection,Throwable)" xml:id="org.osgi.util.promise.FailedPromisesException.FailedPromisesException-Collection-Throwable-">
         <title>public  FailedPromisesException(Collection&lt;Promise&lt;?&gt;&gt; failed,Throwable cause)</title>
         <formalpara role="parameter">
            <title>failed</title>
            <para>A collection of Promises that have been resolved with a
        failure. Must not be <code>null</code>, must not be empty and all of
        the elements in the collection must not be <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception. This is typically the failure
        of the first Promise in the specified collection.</para>
         </formalpara>
         <para role="description">
Create a new FailedPromisesException with the specified Promises.
   </para>
      </section>
      <section role="method" xreflabel="getFailedPromises()" xml:id="org.osgi.util.promise.FailedPromisesException.getFailedPromises--">
         <title>public Collection&lt;Promise&lt;?&gt;&gt; getFailedPromises()</title>
         <para role="description">
Returns the collection of Promises that have been resolved with a
 failure.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The collection of Promises that have been resolved with a
         failure. The returned collection is unmodifiable.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Failure" xml:id="org.osgi.util.promise.Failure">
      <title>public interface Failure</title>
      <para>
Failure callback for a Promise.
 
 </para>
      <para>
 A Failure callback is registered with a <link linkend="org.osgi.util.promise.Promise">Promise</link> using the
 <link linkend="org.osgi.util.promise.Promise.then-Success-Failure-">Promise.then(Success, Failure)</link> method and is called if the Promise is
 resolved with a failure.
 
 </para>
      <para>
 This is a functional interface and can be used as the assignment target for a
 lambda expression or method reference.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="fail(Promise)" xml:id="org.osgi.util.promise.Failure.fail-Promise-">
         <title>public void fail(Promise&lt;?&gt; resolved) throws Exception</title>
         <formalpara role="parameter">
            <title>resolved</title>
            <para>The failed resolved <link linkend="org.osgi.util.promise.Promise">Promise</link>.</para>
         </formalpara>
         <para role="description">
Failure callback for a Promise.
 
 </para>
         <para>
 This method is called if the Promise with which it is registered resolves
 with a failure.
 
 </para>
         <para>
 In the remainder of this description we will refer to the Promise
 returned by <link linkend="org.osgi.util.promise.Promise.then-Success-Failure-">Promise.then(Success, Failure)</link> when this Failure
 callback was registered as the chained Promise.
 
 </para>
         <para>
 If this methods completes normally, the chained Promise must be failed
 with the same exception which failed the resolved Promise. If this method
 throws an exception, the chained Promise must be failed with the thrown
 exception.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– The chained Promise must be failed with the thrown
         exception.   </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Promise" xml:id="org.osgi.util.promise.Promise">
      <title>public interface Promise&lt;T&gt;</title>
      <formalpara role="parameter">
         <title>&lt;T&gt;</title>
         <para>The value type associated with this Promise.</para>
      </formalpara>
      <para>
A Promise of a value.
 
 </para>
      <para>
 A Promise represents a future value. It handles the interactions for
 asynchronous processing. A <link linkend="org.osgi.util.promise.Deferred">Deferred</link> object can be used to create a
 Promise and later resolve the Promise. A Promise is used by the caller of an
 asynchronous function to get the result or handle the error. The caller can
 either get a callback when the Promise is resolved with a value or an error,
 or the Promise can be used in chaining. In chaining, callbacks are provided
 that receive the resolved Promise, and a new Promise is generated that
 resolves based upon the result of a callback.
 
 </para>
      <para>
 Both <link linkend="org.osgi.util.promise.Promise.onResolve-Runnable-">callbacks</link> and
 <link linkend="org.osgi.util.promise.Promise.then-Success-Failure-">chaining</link> can be repeated any number of times,
 even after the Promise has been resolved.
 </para>
      <para>
 Example callback usage:
 
 </para>
      <programlisting> final Promise&lt;String&gt; foo = foo();
 foo.onResolve(new Runnable() {
   public void run() {
     System.out.println(foo.getValue());
   }
 });</programlisting>
      <para>
 
 Example chaining usage;
 
 </para>
      <programlisting> Success&lt;String,String&gt; doubler = new Success&lt;String,String&gt;() {
   public Promise&lt;String&gt; call(Promise&lt;String&gt; p) throws Exception {
     return Promises.resolved(p.getValue()+p.getValue());
   }
 };
 final Promise&lt;String&gt; foo = foo().then(doubler).then(doubler);
 foo.onResolve(new Runnable() {
   public void run() {
     System.out.println(foo.getValue());
   }
 });</programlisting>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section role="method" xreflabel="fallbackTo(Promise)" xml:id="org.osgi.util.promise.Promise.fallbackTo-Promise-">
         <title>public Promise&lt;T&gt; fallbackTo(Promise&lt;? extends T&gt; fallback)</title>
         <formalpara role="parameter">
            <title>fallback</title>
            <para>The Promise whose value must be used to resolve the
        returned Promise if this Promise resolves with a failure. Must not
        be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Fall back to the value of the specified Promise if this Promise fails.
 
 </para>
         <para>
 If this Promise is successfully resolved, the returned Promise must be
 resolved with the value of this Promise.
 
 </para>
         <para>
 If this Promise is resolved with a failure, the successful result of the
 specified Promise is used to resolve the returned Promise. If the
 specified Promise is resolved with a failure, the returned Promise must
 be failed with the failure of this Promise rather than the failure of the
 specified Promise.
 
 </para>
         <para>
 This method may be called at any time including before and after this
 Promise has been resolved.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Promise that returns the value of this Promise or falls back to
         the value of the specified Promise.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="filter(Predicate)" xml:id="org.osgi.util.promise.Promise.filter-Predicate-">
         <title>public Promise&lt;T&gt; filter(Predicate&lt;?&gt; predicate)</title>
         <formalpara role="parameter">
            <title>predicate</title>
            <para>The Predicate to evaluate the value of this Promise.
        Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Filter the value of this Promise.
 
 </para>
         <para>
 If this Promise is successfully resolved, the returned Promise must
 either be resolved with the value of this Promise, if the specified
 Predicate accepts that value, or failed with a
 <code>NoSuchElementException</code>, if the specified Predicate does not
 accept that value. If the specified Predicate throws an exception, the
 returned Promise must be failed with the exception.
 
 </para>
         <para>
 If this Promise is resolved with a failure, the returned Promise must be
 failed with that failure.
 
 </para>
         <para>
 This method may be called at any time including before and after this
 Promise has been resolved.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Promise that filters the value of this Promise.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="flatMap(Function)" xml:id="org.osgi.util.promise.Promise.flatMap-Function-">
         <title>public Promise&lt;R&gt; flatMap(Function&lt;?,Promise&lt;? extends R&gt;&gt; mapper)</title>
         <formalpara role="parameter">
            <title>Type Arguments</title>
            <para>
               <code>&lt;R&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;R&gt;</title>
            <para>The value type associated with the returned Promise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>mapper</title>
            <para>The Function that must flatMap the value of this Promise to
        a Promise that must be used to resolve the returned Promise. Must
        not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
FlatMap the value of this Promise.
 
 </para>
         <para>
 If this Promise is successfully resolved, the returned Promise must be
 resolved with the Promise from the specified Function as applied to the
 value of this Promise. If the specified Function throws an exception, the
 returned Promise must be failed with the exception.
 
 </para>
         <para>
 If this Promise is resolved with a failure, the returned Promise must be
 failed with that failure.
 
 </para>
         <para>
 This method may be called at any time including before and after this
 Promise has been resolved.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Promise that returns the value of this Promise as mapped by the
         specified Function.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getFailure()" xml:id="org.osgi.util.promise.Promise.getFailure--">
         <title>public Throwable getFailure() throws InterruptedException</title>
         <para role="description">
Returns the failure of this Promise.
 
 </para>
         <para>
 If this Promise is not <link linkend="org.osgi.util.promise.Promise.isDone--">resolved</link>, this method must block
 and wait for this Promise to be resolved before completing.
 
 </para>
         <para>
 If this Promise was resolved with a failure, this method returns with the
 failure of this Promise. If this Promise was successfully resolved, this
 method must return <code>null</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The failure of this resolved Promise or <code>null</code> if this
         Promise was successfully resolved.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>InterruptedException</code>– If the current thread was interrupted while
         waiting.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="getValue()" xml:id="org.osgi.util.promise.Promise.getValue--">
         <title>public T getValue() throws InvocationTargetException, InterruptedException</title>
         <para role="description">
Returns the value of this Promise.
 
 </para>
         <para>
 If this Promise is not <link linkend="org.osgi.util.promise.Promise.isDone--">resolved</link>, this method must block
 and wait for this Promise to be resolved before completing.
 
 </para>
         <para>
 If this Promise was successfully resolved, this method returns with the
 value of this Promise. If this Promise was resolved with a failure, this
 method must throw an <code>InvocationTargetException</code> with the
 <link linkend="org.osgi.util.promise.Promise.getFailure--">failure exception</link> as the cause.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The value of this resolved Promise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>InvocationTargetException</code>– If this Promise was resolved with a
         failure. The cause of the <code>InvocationTargetException</code> is
         the failure exception.   </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>InterruptedException</code>– If the current thread was interrupted while
         waiting.   </para>
         </formalpara>
      </section>
      <section role="method" xreflabel="isDone()" xml:id="org.osgi.util.promise.Promise.isDone--">
         <title>public boolean isDone()</title>
         <para role="description">
Returns whether this Promise has been resolved.
 
 </para>
         <para>
 This Promise may be successfully resolved or resolved with a failure.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this Promise was resolved either successfully or
         with a failure; <code>false</code> if this Promise is unresolved.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="map(Function)" xml:id="org.osgi.util.promise.Promise.map-Function-">
         <title>public Promise&lt;R&gt; map(Function&lt;?,? extends R&gt; mapper)</title>
         <formalpara role="parameter">
            <title>Type Arguments</title>
            <para>
               <code>&lt;R&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;R&gt;</title>
            <para>The value type associated with the returned Promise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>mapper</title>
            <para>The Function that must map the value of this Promise to the
        value that must be used to resolve the returned Promise. Must not
        be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Map the value of this Promise.
 
 </para>
         <para>
 If this Promise is successfully resolved, the returned Promise must be
 resolved with the value of specified Function as applied to the value of
 this Promise. If the specified Function throws an exception, the returned
 Promise must be failed with the exception.
 
 </para>
         <para>
 If this Promise is resolved with a failure, the returned Promise must be
 failed with that failure.
 
 </para>
         <para>
 This method may be called at any time including before and after this
 Promise has been resolved.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Promise that returns the value of this Promise as mapped by the
         specified Function.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="onResolve(Runnable)" xml:id="org.osgi.util.promise.Promise.onResolve-Runnable-">
         <title>public Promise&lt;T&gt; onResolve(Runnable callback)</title>
         <formalpara role="parameter">
            <title>callback</title>
            <para>A callback to be called when this Promise is resolved.
        Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Register a callback to be called when this Promise is resolved.
 
 </para>
         <para>
 The specified callback is called when this Promise is resolved either
 successfully or with a failure.
 
 </para>
         <para>
 This method may be called at any time including before and after this
 Promise has been resolved.
 
 </para>
         <para>
 Resolving this Promise <emphasis>happens-before</emphasis> any registered callback is
 called. That is, in a registered callback, <link linkend="org.osgi.util.promise.Promise.isDone--">isDone()</link> must return
 <code>true</code> and <link linkend="org.osgi.util.promise.Promise.getValue--">getValue()</link> and <link linkend="org.osgi.util.promise.Promise.getFailure--">getFailure()</link> must not
 block.
 
 </para>
         <para>
 A callback may be called on a different thread than the thread which
 registered the callback. So the callback must be thread safe but can rely
 upon that the registration of the callback <emphasis>happens-before</emphasis> the
 registered callback is called.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>This Promise.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="recover(Function)" xml:id="org.osgi.util.promise.Promise.recover-Function-">
         <title>public Promise&lt;T&gt; recover(Function&lt;Promise&lt;?&gt;,? extends T&gt; recovery)</title>
         <formalpara role="parameter">
            <title>recovery</title>
            <para>If this Promise resolves with a failure, the specified
        Function is called to produce a recovery value to be used to
        resolve the returned Promise. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Recover from a failure of this Promise with a recovery value.
 
 </para>
         <para>
 If this Promise is successfully resolved, the returned Promise must be
 resolved with the value of this Promise.
 
 </para>
         <para>
 If this Promise is resolved with a failure, the specified Function is
 applied to this Promise to produce a recovery value.
 </para>
         <itemizedlist>
            <listitem>
               <para>If the recovery value is not <code>null</code>, the returned Promise must
 be resolved with the recovery value.</para>
            </listitem>
            <listitem>
               <para>If the recovery value is <code>null</code>, the returned Promise must be
 failed with the failure of this Promise.</para>
            </listitem>
            <listitem>
               <para>If the specified Function throws an exception, the returned Promise
 must be failed with that exception.</para>
            </listitem>
         </itemizedlist>
         <para>
 To recover from a failure of this Promise with a recovery value of
 <code>null</code>, the <link linkend="org.osgi.util.promise.Promise.recoverWith-Function-">recoverWith(Function)</link> method must be used. The
 specified Function for <link linkend="org.osgi.util.promise.Promise.recoverWith-Function-">recoverWith(Function)</link> can return
 <code>Promises.resolved(null)</code> to supply the desired <code>null</code> value.
 
 </para>
         <para>
 This method may be called at any time including before and after this
 Promise has been resolved.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Promise that resolves with the value of this Promise or
         recovers from the failure of this Promise.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="recoverWith(Function)" xml:id="org.osgi.util.promise.Promise.recoverWith-Function-">
         <title>public Promise&lt;T&gt; recoverWith(Function&lt;Promise&lt;?&gt;,Promise&lt;? extends T&gt;&gt; recovery)</title>
         <formalpara role="parameter">
            <title>recovery</title>
            <para>If this Promise resolves with a failure, the specified
        Function is called to produce a recovery Promise to be used to
        resolve the returned Promise. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Recover from a failure of this Promise with a recovery Promise.
 
 </para>
         <para>
 If this Promise is successfully resolved, the returned Promise must be
 resolved with the value of this Promise.
 
 </para>
         <para>
 If this Promise is resolved with a failure, the specified Function is
 applied to this Promise to produce a recovery Promise.
 </para>
         <itemizedlist>
            <listitem>
               <para>If the recovery Promise is not <code>null</code>, the returned Promise
 must be resolved with the recovery Promise.</para>
            </listitem>
            <listitem>
               <para>If the recovery Promise is <code>null</code>, the returned Promise must be
 failed with the failure of this Promise.</para>
            </listitem>
            <listitem>
               <para>If the specified Function throws an exception, the returned Promise
 must be failed with that exception.</para>
            </listitem>
         </itemizedlist>
         <para>
 This method may be called at any time including before and after this
 Promise has been resolved.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Promise that resolves with the value of this Promise or
         recovers from the failure of this Promise.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="then(Success,Failure)" xml:id="org.osgi.util.promise.Promise.then-Success-Failure-">
         <title>public Promise&lt;R&gt; then(Success&lt;?,? extends R&gt; success,Failure failure)</title>
         <formalpara role="parameter">
            <title>Type Arguments</title>
            <para>
               <code>&lt;R&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;R&gt;</title>
            <para>The value type associated with the returned Promise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>success</title>
            <para>A Success callback to be called when this Promise is
        successfully resolved. May be <code>null</code> if no Success callback
        is required. In this case, the returned Promise must be resolved
        with the value <code>null</code> when this Promise is successfully
        resolved.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>failure</title>
            <para>A Failure callback to be called when this Promise is
        resolved with a failure. May be <code>null</code> if no Failure
        callback is required.</para>
         </formalpara>
         <para role="description">
Chain a new Promise to this Promise with Success and Failure callbacks.
 
 </para>
         <para>
 The specified <link linkend="org.osgi.util.promise.Success">Success</link> callback is called when this Promise is
 successfully resolved and the specified <link linkend="org.osgi.util.promise.Failure">Failure</link> callback is
 called when this Promise is resolved with a failure.
 
 </para>
         <para>
 This method returns a new Promise which is chained to this Promise. The
 returned Promise must be resolved when this Promise is resolved after the
 specified Success or Failure callback is executed. The result of the
 executed callback must be used to resolve the returned Promise. Multiple
 calls to this method can be used to create a chain of promises which are
 resolved in sequence.
 
 </para>
         <para>
 If this Promise is successfully resolved, the Success callback is
 executed and the result Promise, if any, or thrown exception is used to
 resolve the returned Promise from this method. If this Promise is
 resolved with a failure, the Failure callback is executed and the
 returned Promise from this method is failed.
 
 </para>
         <para>
 This method may be called at any time including before and after this
 Promise has been resolved.
 
 </para>
         <para>
 Resolving this Promise <emphasis>happens-before</emphasis> any registered callback is
 called. That is, in a registered callback, <link linkend="org.osgi.util.promise.Promise.isDone--">isDone()</link> must return
 <code>true</code> and <link linkend="org.osgi.util.promise.Promise.getValue--">getValue()</link> and <link linkend="org.osgi.util.promise.Promise.getFailure--">getFailure()</link> must not
 block.
 
 </para>
         <para>
 A callback may be called on a different thread than the thread which
 registered the callback. So the callback must be thread safe but can rely
 upon that the registration of the callback <emphasis>happens-before</emphasis> the
 registered callback is called.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new Promise which is chained to this Promise. The returned
         Promise must be resolved when this Promise is resolved after the
         specified Success or Failure callback, if any, is executed.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="then(Success)" xml:id="org.osgi.util.promise.Promise.then-Success-">
         <title>public Promise&lt;R&gt; then(Success&lt;?,? extends R&gt; success)</title>
         <formalpara role="parameter">
            <title>Type Arguments</title>
            <para>
               <code>&lt;R&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;R&gt;</title>
            <para>The value type associated with the returned Promise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>success</title>
            <para>A Success callback to be called when this Promise is
        successfully resolved. May be <code>null</code> if no Success callback
        is required. In this case, the returned Promise must be resolved
        with the value <code>null</code> when this Promise is successfully
        resolved.</para>
         </formalpara>
         <para role="description">
Chain a new Promise to this Promise with a Success callback.
 
 </para>
         <para>
 This method performs the same function as calling
 <link linkend="org.osgi.util.promise.Promise.then-Success-Failure-">then(Success, Failure)</link> with the specified Success callback and
 <code>null</code> for the Failure callback.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new Promise which is chained to this Promise. The returned
         Promise must be resolved when this Promise is resolved after the
         specified Success, if any, is executed.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.util.promise.Promise.then-Success-Failure-">then(Success, Failure)</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Promises" xml:id="org.osgi.util.promise.Promises">
      <title>public class Promises</title>
      <para>
Static helper methods for <link linkend="org.osgi.util.promise.Promise">Promise</link>s.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="all(Collection)" xml:id="org.osgi.util.promise.Promises.all-Collection-">
         <title>public static Promise&lt;List&lt;T&gt;&gt; all(Collection&lt;Promise&lt;S&gt;&gt; promises)</title>
         <formalpara role="parameter">
            <title>Type Arguments</title>
            <para>
               <code>&lt;T,S extends T&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;T&gt;</title>
            <para>The value type of the List value associated with the returned
        Promise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;S&gt;</title>
            <para>A subtype of the value type of the List value associated with
        the returned Promise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>promises</title>
            <para>The Promises which must be resolved before the returned
        Promise must be resolved. Must not be <code>null</code> and all of the
        elements in the collection must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Create a new Promise that is a latch on the resolution of the specified
 Promises.
 
 </para>
         <para>
 The new Promise acts as a gate and must be resolved after all of the
 specified Promises are resolved.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Promise that is resolved only when all the specified Promises
         are resolved. The returned Promise must be successfully resolved
         with a List of the values in the order of the specified Promises
         if all the specified Promises are successfully resolved. The List
         in the returned Promise is the property of the caller and is
         modifiable. The returned Promise must be resolved with a failure
         of <link linkend="org.osgi.util.promise.FailedPromisesException">FailedPromisesException</link> if any of the specified
         Promises are resolved with a failure. The failure
         <link linkend="org.osgi.util.promise.FailedPromisesException">FailedPromisesException</link> must contain all of the specified
         Promises which resolved with a failure.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="all(Promise...)" xml:id="org.osgi.util.promise.Promises.all-Promise...-">
         <title>public static Promise&lt;List&lt;T&gt;&gt; all(Promise&lt;? extends T&gt; ... promises)</title>
         <formalpara role="parameter">
            <title>Type Arguments</title>
            <para>
               <code>&lt;T&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;T&gt;</title>
            <para>The value type associated with the specified Promises.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>promises</title>
            <para>The Promises which must be resolved before the returned
        Promise must be resolved. Must not be <code>null</code> and all of the
        arguments must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Create a new Promise that is a latch on the resolution of the specified
 Promises.
 
 </para>
         <para>
 The new Promise acts as a gate and must be resolved after all of the
 specified Promises are resolved.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Promise that is resolved only when all the specified Promises
         are resolved. The returned Promise must be successfully resolved
         with a List of the values in the order of the specified Promises
         if all the specified Promises are successfully resolved. The List
         in the returned Promise is the property of the caller and is
         modifiable. The returned Promise must be resolved with a failure
         of <link linkend="org.osgi.util.promise.FailedPromisesException">FailedPromisesException</link> if any of the specified
         Promises are resolved with a failure. The failure
         <link linkend="org.osgi.util.promise.FailedPromisesException">FailedPromisesException</link> must contain all of the specified
         Promises which resolved with a failure.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="failed(Throwable)" xml:id="org.osgi.util.promise.Promises.failed-Throwable-">
         <title>public static Promise&lt;T&gt; failed(Throwable failure)</title>
         <formalpara role="parameter">
            <title>Type Arguments</title>
            <para>
               <code>&lt;T&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;T&gt;</title>
            <para>The value type associated with the returned Promise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>failure</title>
            <para>The failure of the resolved Promise. Must not be
        <code>null</code>.</para>
         </formalpara>
         <para role="description">
Create a new Promise that has been resolved with the specified failure.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new Promise that has been resolved with the specified failure.</para>
         </formalpara>
      </section>
      <section role="method" xreflabel="resolved(T)" xml:id="org.osgi.util.promise.Promises.resolved-T-">
         <title>public static Promise&lt;T&gt; resolved(T value)</title>
         <formalpara role="parameter">
            <title>Type Arguments</title>
            <para>
               <code>&lt;T&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;T&gt;</title>
            <para>The value type associated with the returned Promise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>value</title>
            <para>The value of the resolved Promise.</para>
         </formalpara>
         <para role="description">
Create a new Promise that has been resolved with the specified value.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new Promise that has been resolved with the specified value.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Success" xml:id="org.osgi.util.promise.Success">
      <title>public interface Success&lt;T,R&gt;</title>
      <formalpara role="parameter">
         <title>&lt;T&gt;</title>
         <para>The value type of the resolved Promise passed as input to this
        callback.</para>
      </formalpara>
      <formalpara role="parameter">
         <title>&lt;R&gt;</title>
         <para>The value type of the returned Promise from this callback.</para>
      </formalpara>
      <para>
Success callback for a Promise.
 
 </para>
      <para>
 A Success callback is registered with a <link linkend="org.osgi.util.promise.Promise">Promise</link> using the
 <link linkend="org.osgi.util.promise.Promise.then-Success-">Promise.then(Success)</link> method and is called if the Promise is resolved
 successfully.
 
 </para>
      <para>
 This is a functional interface and can be used as the assignment target for a
 lambda expression or method reference.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="call(Promise)" xml:id="org.osgi.util.promise.Success.call-Promise-">
         <title>public Promise&lt;R&gt; call(Promise&lt;T&gt; resolved) throws Exception</title>
         <formalpara role="parameter">
            <title>resolved</title>
            <para>The successfully resolved <link linkend="org.osgi.util.promise.Promise">Promise</link>.</para>
         </formalpara>
         <para role="description">
Success callback for a Promise.
 
 </para>
         <para>
 This method is called if the Promise with which it is registered resolves
 successfully.
 
 </para>
         <para>
 In the remainder of this description we will refer to the Promise
 returned by this method as the returned Promise and the Promise returned
 by <link linkend="org.osgi.util.promise.Promise.then-Success-">Promise.then(Success)</link> when this Success callback was
 registered as the chained Promise.
 
 </para>
         <para>
 If the returned Promise is <code>null</code> then the chained Promise must
 resolve immediately with a successful value of <code>null</code>. If the
 returned Promise is not <code>null</code> then the chained Promise must be
 resolved when the returned Promise is resolved.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Promise to use to resolve the chained Promise, or
         <code>null</code> if the chained Promise is to be resolved immediately
         with the value <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– The chained Promise must be failed with the thrown
         exception.   </para>
         </formalpara>
      </section>
   </section>
</section>

  <section version="5" role="package" xreflabel="org.osgi.util.function" xml:id="org.osgi.util.function" xml:base="../../generated/javadoc/docbook/org.osgi.util.function.xml">
   <title>org.osgi.util.function</title>
   <info>
      <releaseinfo xml:id="org.osgi.util.function-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.util.function-version.number">1.0</edition>
   </info>
   <para>
Function Package Version 1.0.
 
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest.
 
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.util.function; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.util.function; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.util.function.Function">
                  <code>Function</code>
               </link> - 
A function that accepts a single argument and produces a result.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.util.function.Predicate">
                  <code>Predicate</code>
               </link> - 
A predicate that accepts a single argument and produces a boolean result.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section role="class" xreflabel="Function" xml:id="org.osgi.util.function.Function">
      <title>public interface Function&lt;T,R&gt;</title>
      <formalpara role="parameter">
         <title>&lt;T&gt;</title>
         <para>The type of the function input.</para>
      </formalpara>
      <formalpara role="parameter">
         <title>&lt;R&gt;</title>
         <para>The type of the function output.</para>
      </formalpara>
      <para>
A function that accepts a single argument and produces a result.

 </para>
      <para>
 This is a functional interface and can be used as the assignment target for a
 lambda expression or method reference.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="apply(T)" xml:id="org.osgi.util.function.Function.apply-T-">
         <title>public R apply(T t)</title>
         <formalpara role="parameter">
            <title>t</title>
            <para>The input to this function.</para>
         </formalpara>
         <para role="description">
Applies this function to the specified argument.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The output of this function.</para>
         </formalpara>
      </section>
   </section>
   <section role="class" xreflabel="Predicate" xml:id="org.osgi.util.function.Predicate">
      <title>public interface Predicate&lt;T&gt;</title>
      <formalpara role="parameter">
         <title>&lt;T&gt;</title>
         <para>The type of the predicate input.</para>
      </formalpara>
      <para>
A predicate that accepts a single argument and produces a boolean result.

 </para>
      <para>
 This is a functional interface and can be used as the assignment target for a
 lambda expression or method reference.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section role="method" xreflabel="test(T)" xml:id="org.osgi.util.function.Predicate.test-T-">
         <title>public boolean test(T t)</title>
         <formalpara role="parameter">
            <title>t</title>
            <para>The input to this predicate.</para>
         </formalpara>
         <para role="description">
Evaluates this predicate on the specified argument.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the specified argument is accepted by this
         predicate; <code>false</code> otherwise.</para>
         </formalpara>
      </section>
   </section>
</section>

  <section xml:id="util.promise.references">
    <title>References</title>

    <bibliolist>
      <bibliomixed><title>JavaScript
      Promises</title>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</bibliomixed>

      <bibliomixed xml:id="util.promise-ref.javascript"><title>JavaScript
      Promises</title>http://www.html5rocks.com/en/tutorials/es6/promises/</bibliomixed>

      <bibliomixed><title>ECMAScript 6
      drafts</title>http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts</bibliomixed>

      <bibliomixed xml:id="util.promise-ref.monad"><title>Monad</title>https://en.wikipedia.org/wiki/Monad_%28functional_programming%29</bibliomixed>

      <bibliomixed xml:id="util.promise-ref.functional.interfaces"><title>Function
      Interfaces</title>http://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.8</bibliomixed>
    </bibliolist>
  </section>
</chapter>
</book>