/*
 * osgi.specs Gradle build script
 */
import org.apache.tools.ant.filters.ReplaceTokens

version bnd('osgi.version')

ext.fop_home = file("${bnd.licensed}/fop")
ext.fop_classpath = files(fileTree('dir': new File(fop_home, 'lib'), 'include': '*.jar'),
  fileTree('dir': new File(fop_home, 'build'), 'includes': ['fop.jar', 'fop-hyph.jar']))

def javadoc = tasks.named('javadoc') {
  description 'Build the docbook flavored javadoc.'
  group 'documentation'
  destinationDir = new File(buildDir, 'javadoc')
  ext.javadocxml = new File(destinationDir, 'javadoc.xml')
  ext.stylesheet = file('docbook/xsl/javadoc2docbook.xsl')
  classpath = sourceSets.main.compileClasspath
  inputs.files tasks.named('compileJava'), classpath, stylesheet
  source bnd.allSrcDirs
  bnd.javadoc_specs.split(/\s*,\s*/).each {
    include it.replace('.','/')+'/**/*.java'
  }
  configure(options) {
    memberLevel = JavadocMemberLevel.PROTECTED
    encoding = 'UTF-8'
    title = ''
    doclet 'org.osgi.tools.xmldoclet.XmlDoclet'
    docletpath sourceSets.main.java.outputDir
  }
  doLast {
    ant.xslt('style': stylesheet,
      'in': javadocxml,
      'out': "${destinationDir}/docbook/javadoc.txt") {
      classpath('location': bnd.saxon)
      factory('name': 'com.icl.saxon.TransformerFactoryImpl')
      param('name': 'destdir', 'expression': "${destinationDir}/docbook")
      param('name': 'ddf.only', 'expression': '0')
    }
    ant.xslt('style': stylesheet,
      'in': javadocxml,
      'out': "${destinationDir}/docbook/ddf.txt") {
      classpath('location': bnd.saxon)
      factory('name': 'com.icl.saxon.TransformerFactoryImpl')
      param('name': 'destdir', 'expression': "${destinationDir}/docbook")
      param('name': 'ddf.only', 'expression': '1')
    }
  }
}

def rdmtsummary = tasks.register('rdmtsummary') {
  description 'Build the docbook flavored Residential DMT summary.'
  group 'documentation'
  ext.destinationDir = new File(buildDir, 'residentialdmt')
  ext.treesummaryxml = new File(destinationDir, 'treesummary.xml')
  inputs.files parent.project('dmforest').sourceSets.main.allJava, sourceSets.main.runtimeClasspath
  outputs.dir { destinationDir }
  doFirst {
    project.mkdir(destinationDir)
  }
  doLast {
    treesummaryxml.withOutputStream { os ->
      javaexec {
        classpath sourceSets.main.runtimeClasspath
        main = 'org.osgi.tools.dmt.TreeSummary'
        standardOutput new BufferedOutputStream(os)
        args 'org.osgi.dmt.residential.$'
      }.assertNormalExitValue()
    }
  }
}

def xmlns = tasks.register('xmlns', Copy.class) {
  description 'Build the docbook flavored schemas.'
  group 'documentation'
  from parent.file('xmlns')
  into new File(buildDir, 'xmlns')
  include '**/*.xsd'
  includeEmptyDirs = false
  doLast {
    ant.replaceregexp('match': /.*(<(\w+:)?schema)/,
      'replace': /\1/,
      'flags': 's',
      'encoding': 'UTF-8') {
      fileset('dir': destinationDir, 'includes': '**/*.xsd')
    }
  }
}

def specifications = tasks.register('specifications') {
  description 'Generates all the specifications.'
  group 'documentation'
}
defaultTasks += absoluteProjectPath(specifications.name)

def books = ['core', 'cmpn', 'enterprise']

books.forEach { book ->
    def booktask = tasks.register("${book}.xml") {
      description "Generate the docbook xml file for the book ${book}."
      group 'documentation'
      ext.destinationDir = new File(buildDir, 'book')
      ext.stylesheet = file('docbook/xsl/identity.xsl')
      ext.bookxml = new File(destinationDir, name)
      inputs.files stylesheet, fileTree('dir': 'docbook', 'include': '**/*.xml'), sourceSets.main.runtimeClasspath
      inputs.files javadoc, xmlns
      if (book == 'residential') {
        inputs.files rdmtsummary
      }

      outputs.file bookxml
      doFirst {
        project.mkdir(destinationDir)
      }
      doLast {
        ant.xslt('style': stylesheet,
          'in': "docbook/${book}/book.xml",
          'out': bookxml,
          'force': true) {
          sysproperty('key': 'org.apache.xerces.xni.parser.XMLParserConfiguration',
            'value': 'org.apache.xerces.parsers.XIncludeParserConfiguration')
          classpath {
            fileset('dir': "${fop_home}/lib") {
              include('name': 'xercesImpl*.jar')
              include('name': 'xml-apis*.jar')
            }
            pathelement('location': bnd.saxon)
          }
          factory('name': 'com.icl.saxon.TransformerFactoryImpl')
        }
        javaexec {
          classpath sourceSets.main.runtimeClasspath
          main = 'org.osgi.tools.xmlvalidation.XmlValidator'
          args file("${bnd.licensed}/docbook-xsd/docbook.xsd")
          args bookxml
        }.assertNormalExitValue()
      }
    }

    def bookdifftask = tasks.register("${book}-diff.xml") {
      description "Generate the docbook diff xml file for the book ${book}."
      group 'documentation'
      ext.destinationDir = new File(buildDir, 'book')
      ext.stylesheet = file("${bnd.licensed}/diffmk/style/docbook.xsl")
      ext.baselinexml = file("baseline/${book}.xml")
      ext.bookxml = new File(destinationDir, name)
      inputs.files booktask, stylesheet, baselinexml
      outputs.file bookxml
      doFirst {
        project.mkdir(destinationDir)
      }
      doLast {
        def tmpxml = new File(temporaryDir, 'diff.xml')
        javaexec {
          classpath "${bnd.licensed}/diffmk/bin/diffmk.jar"
          main = 'net.sf.diffmk.DiffMk'
          minHeapSize = '1g'
          maxHeapSize = '2g'
          args '--verbose'
          args '1'
          args '--words'
          args baselinexml
          args booktask.get().bookxml
          args tmpxml
        }.assertNormalExitValue()
        ant.xslt('style': stylesheet,
          'in': tmpxml,
          'out': bookxml) {
          classpath('location': bnd.saxon)
          factory('name': 'com.icl.saxon.TransformerFactoryImpl')
        }
      }
    }

    def fotask = tasks.register("${book}.fo", fotaskConfiguration(book, booktask))
    def fodifftask = tasks.register("${book}-diff.fo", fotaskConfiguration("${book}-diff", bookdifftask))

    def pdftask = tasks.register("${book}.pdf", pdftaskConfiguration(book, book, fotask))
    tasks.register("${book}-diff.pdf", pdftaskConfiguration(book, "${book}-diff", fodifftask))

    def rasterizetask = tasks.register("${book}.rasterize") {
      description "Rasterize SVGs for the book ${book}."
      group 'documentation'

      def imagesXSL = file('docbook/xsl/custom-html-images.xsl')
      ext.destinationDir = new File(buildDir, "images/${book}")

      inputs.files booktask, imagesXSL, fileTree('dir': 'docbook', 'include': '**/*.svg'), sourceSets.main.runtimeClasspath
      outputs.dir destinationDir

      doFirst {
        project.delete(destinationDir)
        project.mkdir(destinationDir)
      }
      doLast {
        def imagesFile = new File(temporaryDir, 'images.txt')
        ant.xslt('style': imagesXSL,
          'in': booktask.get().bookxml,
          'out': imagesFile) {
          classpath('location': bnd.saxon)
          factory('name': 'com.icl.saxon.TransformerFactoryImpl')
        }

        def svgFiles = imagesFile.collect { line ->
          file("docbook/${book}/${line}")
        }

        javaexec {
          systemProperty('scale', '2')
          systemProperty('dpi', '300')
          systemProperty('JAVA_FONTS', file('fonts'))
          classpath sourceSets.main.runtimeClasspath
          main = 'org.osgi.tools.rasterizer.RasterizerMain'
          minHeapSize = '1g'
          maxHeapSize = '2g'
          args destinationDir
          args svgFiles
        }.assertNormalExitValue()
      }
    }

    def htmltask = tasks.register("${book}.html") {
      description "Generate the docbook html files for the book ${book}."
      group 'documentation'

      def stylesheet = file('docbook/xsl/custom-html.xsl')
      def commonXSL = file('docbook/xsl/custom-html-common.xsl')
      def profileXSL = file('docbook/xsl/custom-html-profile.xsl')
      def htmlResources = file('docbook/xsl/html-resources')
      def licensedResources = file("${bnd.licensed}/webresources")
      ext.watermark = 'draft.png'
      ext.destinationDir = new File(buildDir, "html/${book}/")

      inputs.files booktask, rasterizetask, stylesheet, commonXSL, profileXSL, htmlResources, licensedResources
      outputs.dir destinationDir

      doFirst {
        project.delete(destinationDir)
        project.mkdir(destinationDir)
      }
      doLast {
        def tmpxml = new File(temporaryDir, 'book.xml')
        ant.xslt('style': profileXSL,
          'in': booktask.get().bookxml,
          'out': tmpxml,
          'force': true) {
          classpath('location': bnd.saxon)
          factory('name': 'com.icl.saxon.TransformerFactoryImpl')
        }
        ant.xslt('style': stylesheet,
          'in': tmpxml,
          'out': new File(temporaryDir, 'book.txt')) {
          classpath('location': bnd.saxon)
          factory('name': 'com.icl.saxon.TransformerFactoryImpl')
          param('name': 'copyright.year', 'expression': "2000, ${bnd('copyright.year')}")
          param('name': 'draft.watermark.image', 'expression': watermark)
          param('name': 'webhelp.base.dir', 'expression': destinationDir)
          param('name': 'webhelp.default.topic', 'expression': "index.html")
          param('name': 'release.version', 'expression': bnd('osgi.release'))
        }

        copy {
          into destinationDir
          from htmlResources
          from (licensedResources) {
            include '**/*.js'
            into 'js'
            eachFile { fcd ->
              fcd.path = "js/${fcd.name}"
            }
          }
          from (licensedResources) {
            include '**/*.css'
            into 'css'
            eachFile { fcd ->
              fcd.path = "css/${fcd.name}"
            }
          }
          from (rasterizetask) {
            into 'images'
          }
          includeEmptyDirs = false
        }
      }
    }

    def ziptask = tasks.register("${book}.zip", Zip.class) {
      description "Generate a ZIP archive of the docbook html for the book ${book}."
      group 'documentation'
      destinationDir = buildDir
      baseName = "osgi.${book}"
      classifier = 'html'
      from htmltask
    }

    specifications.configure {
        dependsOn pdftask, ziptask
    }
}

private Closure fotaskConfiguration(bookName, xmltask) {
  return {
      description "Generate the docbook fo file for the book ${bookName}."
      group 'documentation'
      ext.destinationDir = new File(buildDir, 'fo')
      ext.stylesheet = file('docbook/xsl/custom-fo.xsl')
      ext.bookfo = new File(destinationDir, name)
      ext.watermark = 'docbook/graphics/draft.svg'
      inputs.files xmltask, stylesheet
      outputs.file bookfo
      doFirst {
        project.mkdir(destinationDir)
      }
      doLast {
        ant.xslt('style': stylesheet,
          'in': xmltask.get().bookxml,
          'out': bookfo) {
          classpath('location': bnd.saxon)
          factory('name': 'com.icl.saxon.TransformerFactoryImpl')
          param('name': 'draft.watermark.image', 'expression': watermark)
          param('name': 'copyright.year', 'expression': "2000, ${bnd('copyright.year')}")
        }
      }
    }
}

private Closure pdftaskConfiguration(basebook, bookName, fotask) {
  return {
      description "Generate the docbook pdf file for the book ${bookName}."
      group 'documentation'
      ext.destinationDir = buildDir
      ext.bookpdf = new File(destinationDir, "osgi.${bookName}-${version}.pdf")
      def fontbasedir = file('fonts')
      def fopxconf = file('docbook/fop/fop-osgi.xconf')
      def log4jprops = file('docbook/fop/log4j.properties')
      inputs.files fotask, fopxconf, log4jprops, fileTree('dir': 'docbook', 'include': '**/*.svg')
      inputs.dir fontbasedir
      outputs.file bookpdf
      doFirst {
        project.mkdir(destinationDir)
      }
      doLast {
        copy {
          from fopxconf
          into temporaryDir
          filter(ReplaceTokens,
            'tokens': ['book.base.url': file("docbook/${basebook}").toURI().toString(),
              'font.base.url': fontbasedir.toURI().toString(),
              'font.base.dir': fontbasedir.absolutePath])
        }
        javaexec {
          systemProperty('java.awt.headless', 'true')
          systemProperty('JAVA_FONTS', fontbasedir)
          systemProperty('log4j.configuration', log4jprops.toURI())
          classpath compileJava.destinationDir
          classpath bnd.log4j
          classpath fop_classpath
          main = 'org.osgi.tools.fop.FOPMain'
          minHeapSize = '1g'
          maxHeapSize = '3g'
          args '-c', new File(temporaryDir, fopxconf.name)
          args '-fo', fotask.get().bookfo
          args '-pdf', bookpdf
        }.assertNormalExitValue()
      }
    }
}

tasks.register('fontmetrics') {
  description 'Build the font metrics.'
  group 'documentation'
  inputs.files fileTree('dir': file('fonts'), 'include': '*.ttf')
  outputs.files inputs.files.collect {
    it.absolutePath.replaceAll(/\.ttf$/, /.xml/)
  }
  doLast {
    inputs.files.each { ttf ->
      javaexec {
        classpath fop_classpath
        main = 'org.apache.fop.fonts.apps.TTFReader'
        args ttf.absolutePath
        args ttf.absolutePath.replaceAll(/\.ttf$/, /.xml/)
      }.assertNormalExitValue()
    }
  }
}
