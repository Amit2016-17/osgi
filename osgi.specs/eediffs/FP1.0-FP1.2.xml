<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE differences SYSTEM "http://depfind.sourceforge.net/dtd/differences.dtd">

<differences>
    <name></name>
    <old>ee.foundation-1.0</old>
    <new>ee.foundation-1.1</new>
    <modified-interfaces>
        <class>
            <name>java.net.SocketOptions</name>
            <new-fields>
                <declaration visibility="public" static="yes" final="yes" type="int" name="IP_MULTICAST_IF2" signature="IP_MULTICAST_IF2" full-signature="java.net.SocketOptions.IP_MULTICAST_IF2">public static final int IP_MULTICAST_IF2</declaration>
                <declaration visibility="public" static="yes" final="yes" type="int" name="IP_MULTICAST_LOOP" signature="IP_MULTICAST_LOOP" full-signature="java.net.SocketOptions.IP_MULTICAST_LOOP">public static final int IP_MULTICAST_LOOP</declaration>
                <declaration visibility="public" static="yes" final="yes" type="int" name="IP_TOS" signature="IP_TOS" full-signature="java.net.SocketOptions.IP_TOS">public static final int IP_TOS</declaration>
                <declaration visibility="public" static="yes" final="yes" type="int" name="SO_BROADCAST" signature="SO_BROADCAST" full-signature="java.net.SocketOptions.SO_BROADCAST">public static final int SO_BROADCAST</declaration>
                <declaration visibility="public" static="yes" final="yes" type="int" name="SO_OOBINLINE" signature="SO_OOBINLINE" full-signature="java.net.SocketOptions.SO_OOBINLINE">public static final int SO_OOBINLINE</declaration>
            </new-fields>
        </class>
    </modified-interfaces>
    <modified-classes>
        <class>
            <name>java.io.File</name>
            <new-constructors>
                <declaration visibility="public" signature="File(java.net.URI)" full-signature="java.io.File.File(java.net.URI)" throws="">public File(java.net.URI)</declaration>
            </new-constructors>
            <new-methods>
                <declaration visibility="public" return-type="java.net.URI" signature="toURI()" full-signature="java.io.File.toURI()" throws="">public java.net.URI toURI()</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.io.FileOutputStream</name>
            <new-constructors>
                <declaration visibility="public" signature="FileOutputStream(java.io.File, boolean)" full-signature="java.io.FileOutputStream.FileOutputStream(java.io.File, boolean)" throws="java.io.FileNotFoundException">public FileOutputStream(java.io.File, boolean) throws java.io.FileNotFoundException</declaration>
            </new-constructors>
        </class>
        <class>
            <name>java.io.FileWriter</name>
            <new-constructors>
                <declaration visibility="public" signature="FileWriter(java.io.File, boolean)" full-signature="java.io.FileWriter.FileWriter(java.io.File, boolean)" throws="java.io.IOException">public FileWriter(java.io.File, boolean) throws java.io.IOException</declaration>
            </new-constructors>
        </class>
        <class>
            <name>java.io.ObjectInputStream</name>
            <new-methods>
                <declaration visibility="public" return-type="java.lang.Object" signature="readUnshared()" full-signature="java.io.ObjectInputStream.readUnshared()" throws="java.io.IOException, java.lang.ClassNotFoundException">public java.lang.Object readUnshared() throws java.io.IOException, java.lang.ClassNotFoundException</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.io.ObjectOutputStream</name>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="writeUnshared(java.lang.Object)" full-signature="java.io.ObjectOutputStream.writeUnshared(java.lang.Object)" throws="java.io.IOException">public void writeUnshared(java.lang.Object) throws java.io.IOException</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.io.ObjectOutputStream$PutField</name>
            <deprecated-methods>
                <declaration visibility="public" abstract="yes" deprecated="yes" return-type="void" signature="write(java.io.ObjectOutput)" full-signature="java.io.ObjectOutputStream$PutField.write(java.io.ObjectOutput)" throws="java.io.IOException">public abstract void write(java.io.ObjectOutput) throws java.io.IOException</declaration>
            </deprecated-methods>
        </class>
        <class>
            <name>java.io.ObjectStreamField</name>
            <new-constructors>
                <declaration visibility="public" signature="ObjectStreamField(java.lang.String, java.lang.Class, boolean)" full-signature="java.io.ObjectStreamField.ObjectStreamField(java.lang.String, java.lang.Class, boolean)" throws="">public ObjectStreamField(java.lang.String, java.lang.Class, boolean)</declaration>
            </new-constructors>
        </class>
        <class>
            <name>java.io.PrintStream</name>
            <new-constructors>
                <declaration visibility="public" signature="PrintStream(java.io.OutputStream, boolean, java.lang.String)" full-signature="java.io.PrintStream.PrintStream(java.io.OutputStream, boolean, java.lang.String)" throws="java.io.UnsupportedEncodingException">public PrintStream(java.io.OutputStream, boolean, java.lang.String) throws java.io.UnsupportedEncodingException</declaration>
            </new-constructors>
        </class>
        <class>
            <name>java.lang.Boolean</name>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="java.lang.String" signature="toString(boolean)" full-signature="java.lang.Boolean.toString(boolean)" throws="">public static java.lang.String toString(boolean)</declaration>
                <declaration visibility="public" static="yes" return-type="java.lang.Boolean" signature="valueOf(boolean)" full-signature="java.lang.Boolean.valueOf(boolean)" throws="">public static java.lang.Boolean valueOf(boolean)</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.lang.Character</name>
            <new-fields>
                <declaration visibility="public" static="yes" final="yes" type="byte" name="DIRECTIONALITY_ARABIC_NUMBER" signature="DIRECTIONALITY_ARABIC_NUMBER" full-signature="java.lang.Character.DIRECTIONALITY_ARABIC_NUMBER">public static final byte DIRECTIONALITY_ARABIC_NUMBER</declaration>
                <declaration visibility="public" static="yes" final="yes" type="byte" name="DIRECTIONALITY_BOUNDARY_NEUTRAL" signature="DIRECTIONALITY_BOUNDARY_NEUTRAL" full-signature="java.lang.Character.DIRECTIONALITY_BOUNDARY_NEUTRAL">public static final byte DIRECTIONALITY_BOUNDARY_NEUTRAL</declaration>
                <declaration visibility="public" static="yes" final="yes" type="byte" name="DIRECTIONALITY_COMMON_NUMBER_SEPARATOR" signature="DIRECTIONALITY_COMMON_NUMBER_SEPARATOR" full-signature="java.lang.Character.DIRECTIONALITY_COMMON_NUMBER_SEPARATOR">public static final byte DIRECTIONALITY_COMMON_NUMBER_SEPARATOR</declaration>
                <declaration visibility="public" static="yes" final="yes" type="byte" name="DIRECTIONALITY_EUROPEAN_NUMBER" signature="DIRECTIONALITY_EUROPEAN_NUMBER" full-signature="java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER">public static final byte DIRECTIONALITY_EUROPEAN_NUMBER</declaration>
                <declaration visibility="public" static="yes" final="yes" type="byte" name="DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR" signature="DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR" full-signature="java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR">public static final byte DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR</declaration>
                <declaration visibility="public" static="yes" final="yes" type="byte" name="DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR" signature="DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR" full-signature="java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR">public static final byte DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR</declaration>
                <declaration visibility="public" static="yes" final="yes" type="byte" name="DIRECTIONALITY_LEFT_TO_RIGHT" signature="DIRECTIONALITY_LEFT_TO_RIGHT" full-signature="java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT">public static final byte DIRECTIONALITY_LEFT_TO_RIGHT</declaration>
                <declaration visibility="public" static="yes" final="yes" type="byte" name="DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING" signature="DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING" full-signature="java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING">public static final byte DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING</declaration>
                <declaration visibility="public" static="yes" final="yes" type="byte" name="DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE" signature="DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE" full-signature="java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE">public static final byte DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE</declaration>
                <declaration visibility="public" static="yes" final="yes" type="byte" name="DIRECTIONALITY_NONSPACING_MARK" signature="DIRECTIONALITY_NONSPACING_MARK" full-signature="java.lang.Character.DIRECTIONALITY_NONSPACING_MARK">public static final byte DIRECTIONALITY_NONSPACING_MARK</declaration>
                <declaration visibility="public" static="yes" final="yes" type="byte" name="DIRECTIONALITY_OTHER_NEUTRALS" signature="DIRECTIONALITY_OTHER_NEUTRALS" full-signature="java.lang.Character.DIRECTIONALITY_OTHER_NEUTRALS">public static final byte DIRECTIONALITY_OTHER_NEUTRALS</declaration>
                <declaration visibility="public" static="yes" final="yes" type="byte" name="DIRECTIONALITY_PARAGRAPH_SEPARATOR" signature="DIRECTIONALITY_PARAGRAPH_SEPARATOR" full-signature="java.lang.Character.DIRECTIONALITY_PARAGRAPH_SEPARATOR">public static final byte DIRECTIONALITY_PARAGRAPH_SEPARATOR</declaration>
                <declaration visibility="public" static="yes" final="yes" type="byte" name="DIRECTIONALITY_POP_DIRECTIONAL_FORMAT" signature="DIRECTIONALITY_POP_DIRECTIONAL_FORMAT" full-signature="java.lang.Character.DIRECTIONALITY_POP_DIRECTIONAL_FORMAT">public static final byte DIRECTIONALITY_POP_DIRECTIONAL_FORMAT</declaration>
                <declaration visibility="public" static="yes" final="yes" type="byte" name="DIRECTIONALITY_RIGHT_TO_LEFT" signature="DIRECTIONALITY_RIGHT_TO_LEFT" full-signature="java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT">public static final byte DIRECTIONALITY_RIGHT_TO_LEFT</declaration>
                <declaration visibility="public" static="yes" final="yes" type="byte" name="DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC" signature="DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC" full-signature="java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC">public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC</declaration>
                <declaration visibility="public" static="yes" final="yes" type="byte" name="DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING" signature="DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING" full-signature="java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING">public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING</declaration>
                <declaration visibility="public" static="yes" final="yes" type="byte" name="DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE" signature="DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE" full-signature="java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE">public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE</declaration>
                <declaration visibility="public" static="yes" final="yes" type="byte" name="DIRECTIONALITY_SEGMENT_SEPARATOR" signature="DIRECTIONALITY_SEGMENT_SEPARATOR" full-signature="java.lang.Character.DIRECTIONALITY_SEGMENT_SEPARATOR">public static final byte DIRECTIONALITY_SEGMENT_SEPARATOR</declaration>
                <declaration visibility="public" static="yes" final="yes" type="byte" name="DIRECTIONALITY_UNDEFINED" signature="DIRECTIONALITY_UNDEFINED" full-signature="java.lang.Character.DIRECTIONALITY_UNDEFINED">public static final byte DIRECTIONALITY_UNDEFINED</declaration>
                <declaration visibility="public" static="yes" final="yes" type="byte" name="DIRECTIONALITY_WHITESPACE" signature="DIRECTIONALITY_WHITESPACE" full-signature="java.lang.Character.DIRECTIONALITY_WHITESPACE">public static final byte DIRECTIONALITY_WHITESPACE</declaration>
                <declaration visibility="public" static="yes" final="yes" type="byte" name="FINAL_QUOTE_PUNCTUATION" signature="FINAL_QUOTE_PUNCTUATION" full-signature="java.lang.Character.FINAL_QUOTE_PUNCTUATION">public static final byte FINAL_QUOTE_PUNCTUATION</declaration>
                <declaration visibility="public" static="yes" final="yes" type="byte" name="INITIAL_QUOTE_PUNCTUATION" signature="INITIAL_QUOTE_PUNCTUATION" full-signature="java.lang.Character.INITIAL_QUOTE_PUNCTUATION">public static final byte INITIAL_QUOTE_PUNCTUATION</declaration>
            </new-fields>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="byte" signature="getDirectionality(char)" full-signature="java.lang.Character.getDirectionality(char)" throws="">public static byte getDirectionality(char)</declaration>
                <declaration visibility="public" static="yes" return-type="boolean" signature="isMirrored(char)" full-signature="java.lang.Character.isMirrored(char)" throws="">public static boolean isMirrored(char)</declaration>
                <declaration visibility="public" static="yes" return-type="java.lang.String" signature="toString(char)" full-signature="java.lang.Character.toString(char)" throws="">public static java.lang.String toString(char)</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.lang.Character$UnicodeBlock</name>
            <new-fields>
                <declaration visibility="public" static="yes" final="yes" type="java.lang.Character$UnicodeBlock" name="BOPOMOFO_EXTENDED" signature="BOPOMOFO_EXTENDED" full-signature="java.lang.Character$UnicodeBlock.BOPOMOFO_EXTENDED">public static final java.lang.Character$UnicodeBlock BOPOMOFO_EXTENDED</declaration>
                <declaration visibility="public" static="yes" final="yes" type="java.lang.Character$UnicodeBlock" name="BRAILLE_PATTERNS" signature="BRAILLE_PATTERNS" full-signature="java.lang.Character$UnicodeBlock.BRAILLE_PATTERNS">public static final java.lang.Character$UnicodeBlock BRAILLE_PATTERNS</declaration>
                <declaration visibility="public" static="yes" final="yes" type="java.lang.Character$UnicodeBlock" name="CHEROKEE" signature="CHEROKEE" full-signature="java.lang.Character$UnicodeBlock.CHEROKEE">public static final java.lang.Character$UnicodeBlock CHEROKEE</declaration>
                <declaration visibility="public" static="yes" final="yes" type="java.lang.Character$UnicodeBlock" name="CJK_RADICALS_SUPPLEMENT" signature="CJK_RADICALS_SUPPLEMENT" full-signature="java.lang.Character$UnicodeBlock.CJK_RADICALS_SUPPLEMENT">public static final java.lang.Character$UnicodeBlock CJK_RADICALS_SUPPLEMENT</declaration>
                <declaration visibility="public" static="yes" final="yes" type="java.lang.Character$UnicodeBlock" name="CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A" signature="CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A" full-signature="java.lang.Character$UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A">public static final java.lang.Character$UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A</declaration>
                <declaration visibility="public" static="yes" final="yes" type="java.lang.Character$UnicodeBlock" name="ETHIOPIC" signature="ETHIOPIC" full-signature="java.lang.Character$UnicodeBlock.ETHIOPIC">public static final java.lang.Character$UnicodeBlock ETHIOPIC</declaration>
                <declaration visibility="public" static="yes" final="yes" type="java.lang.Character$UnicodeBlock" name="IDEOGRAPHIC_DESCRIPTION_CHARACTERS" signature="IDEOGRAPHIC_DESCRIPTION_CHARACTERS" full-signature="java.lang.Character$UnicodeBlock.IDEOGRAPHIC_DESCRIPTION_CHARACTERS">public static final java.lang.Character$UnicodeBlock IDEOGRAPHIC_DESCRIPTION_CHARACTERS</declaration>
                <declaration visibility="public" static="yes" final="yes" type="java.lang.Character$UnicodeBlock" name="KANGXI_RADICALS" signature="KANGXI_RADICALS" full-signature="java.lang.Character$UnicodeBlock.KANGXI_RADICALS">public static final java.lang.Character$UnicodeBlock KANGXI_RADICALS</declaration>
                <declaration visibility="public" static="yes" final="yes" type="java.lang.Character$UnicodeBlock" name="KHMER" signature="KHMER" full-signature="java.lang.Character$UnicodeBlock.KHMER">public static final java.lang.Character$UnicodeBlock KHMER</declaration>
                <declaration visibility="public" static="yes" final="yes" type="java.lang.Character$UnicodeBlock" name="MONGOLIAN" signature="MONGOLIAN" full-signature="java.lang.Character$UnicodeBlock.MONGOLIAN">public static final java.lang.Character$UnicodeBlock MONGOLIAN</declaration>
                <declaration visibility="public" static="yes" final="yes" type="java.lang.Character$UnicodeBlock" name="MYANMAR" signature="MYANMAR" full-signature="java.lang.Character$UnicodeBlock.MYANMAR">public static final java.lang.Character$UnicodeBlock MYANMAR</declaration>
                <declaration visibility="public" static="yes" final="yes" type="java.lang.Character$UnicodeBlock" name="OGHAM" signature="OGHAM" full-signature="java.lang.Character$UnicodeBlock.OGHAM">public static final java.lang.Character$UnicodeBlock OGHAM</declaration>
                <declaration visibility="public" static="yes" final="yes" type="java.lang.Character$UnicodeBlock" name="RUNIC" signature="RUNIC" full-signature="java.lang.Character$UnicodeBlock.RUNIC">public static final java.lang.Character$UnicodeBlock RUNIC</declaration>
                <declaration visibility="public" static="yes" final="yes" type="java.lang.Character$UnicodeBlock" name="SINHALA" signature="SINHALA" full-signature="java.lang.Character$UnicodeBlock.SINHALA">public static final java.lang.Character$UnicodeBlock SINHALA</declaration>
                <declaration visibility="public" static="yes" final="yes" type="java.lang.Character$UnicodeBlock" name="SYRIAC" signature="SYRIAC" full-signature="java.lang.Character$UnicodeBlock.SYRIAC">public static final java.lang.Character$UnicodeBlock SYRIAC</declaration>
                <declaration visibility="public" static="yes" final="yes" type="java.lang.Character$UnicodeBlock" name="THAANA" signature="THAANA" full-signature="java.lang.Character$UnicodeBlock.THAANA">public static final java.lang.Character$UnicodeBlock THAANA</declaration>
                <declaration visibility="public" static="yes" final="yes" type="java.lang.Character$UnicodeBlock" name="UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS" signature="UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS" full-signature="java.lang.Character$UnicodeBlock.UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS">public static final java.lang.Character$UnicodeBlock UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS</declaration>
                <declaration visibility="public" static="yes" final="yes" type="java.lang.Character$UnicodeBlock" name="YI_RADICALS" signature="YI_RADICALS" full-signature="java.lang.Character$UnicodeBlock.YI_RADICALS">public static final java.lang.Character$UnicodeBlock YI_RADICALS</declaration>
                <declaration visibility="public" static="yes" final="yes" type="java.lang.Character$UnicodeBlock" name="YI_SYLLABLES" signature="YI_SYLLABLES" full-signature="java.lang.Character$UnicodeBlock.YI_SYLLABLES">public static final java.lang.Character$UnicodeBlock YI_SYLLABLES</declaration>
            </new-fields>
        </class>
        <class>
            <name>java.lang.Class</name>
            <new-methods>
                <declaration visibility="public" return-type="boolean" signature="desiredAssertionStatus()" full-signature="java.lang.Class.desiredAssertionStatus()" throws="">public boolean desiredAssertionStatus()</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.lang.ClassLoader</name>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="clearAssertionStatus()" full-signature="java.lang.ClassLoader.clearAssertionStatus()" throws="">public void clearAssertionStatus()</declaration>
                <declaration visibility="public" return-type="void" signature="setClassAssertionStatus(java.lang.String, boolean)" full-signature="java.lang.ClassLoader.setClassAssertionStatus(java.lang.String, boolean)" throws="">public void setClassAssertionStatus(java.lang.String, boolean)</declaration>
                <declaration visibility="public" return-type="void" signature="setDefaultAssertionStatus(boolean)" full-signature="java.lang.ClassLoader.setDefaultAssertionStatus(boolean)" throws="">public void setDefaultAssertionStatus(boolean)</declaration>
                <declaration visibility="public" return-type="void" signature="setPackageAssertionStatus(java.lang.String, boolean)" full-signature="java.lang.ClassLoader.setPackageAssertionStatus(java.lang.String, boolean)" throws="">public void setPackageAssertionStatus(java.lang.String, boolean)</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.lang.Double</name>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="int" signature="compare(double, double)" full-signature="java.lang.Double.compare(double, double)" throws="">public static int compare(double, double)</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.lang.Error</name>
            <new-constructors>
                <declaration visibility="public" signature="Error(java.lang.String, java.lang.Throwable)" full-signature="java.lang.Error.Error(java.lang.String, java.lang.Throwable)" throws="">public Error(java.lang.String, java.lang.Throwable)</declaration>
                <declaration visibility="public" signature="Error(java.lang.Throwable)" full-signature="java.lang.Error.Error(java.lang.Throwable)" throws="">public Error(java.lang.Throwable)</declaration>
            </new-constructors>
        </class>
        <class>
            <name>java.lang.Exception</name>
            <new-constructors>
                <declaration visibility="public" signature="Exception(java.lang.String, java.lang.Throwable)" full-signature="java.lang.Exception.Exception(java.lang.String, java.lang.Throwable)" throws="">public Exception(java.lang.String, java.lang.Throwable)</declaration>
                <declaration visibility="public" signature="Exception(java.lang.Throwable)" full-signature="java.lang.Exception.Exception(java.lang.Throwable)" throws="">public Exception(java.lang.Throwable)</declaration>
            </new-constructors>
        </class>
        <class>
            <name>java.lang.Float</name>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="int" signature="compare(float, float)" full-signature="java.lang.Float.compare(float, float)" throws="">public static int compare(float, float)</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.lang.Runtime</name>
            <new-methods>
                <declaration visibility="public" return-type="int" signature="availableProcessors()" full-signature="java.lang.Runtime.availableProcessors()" throws="">public int availableProcessors()</declaration>
                <declaration visibility="public" return-type="long" signature="maxMemory()" full-signature="java.lang.Runtime.maxMemory()" throws="">public long maxMemory()</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.lang.RuntimeException</name>
            <new-constructors>
                <declaration visibility="public" signature="RuntimeException(java.lang.String, java.lang.Throwable)" full-signature="java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)" throws="">public RuntimeException(java.lang.String, java.lang.Throwable)</declaration>
                <declaration visibility="public" signature="RuntimeException(java.lang.Throwable)" full-signature="java.lang.RuntimeException.RuntimeException(java.lang.Throwable)" throws="">public RuntimeException(java.lang.Throwable)</declaration>
            </new-constructors>
        </class>
        <class>
            <name>java.lang.SecurityManager</name>
            <deprecated-methods>
                <declaration visibility="public" deprecated="yes" return-type="void" signature="checkMulticast(java.net.InetAddress, byte)" full-signature="java.lang.SecurityManager.checkMulticast(java.net.InetAddress, byte)" throws="">public void checkMulticast(java.net.InetAddress, byte)</declaration>
            </deprecated-methods>
        </class>
        <class>
            <name>java.lang.String</name>
            <modified-declaration>
                <old-declaration visibility="public" final="yes" super="yes" name="java.lang.String" extends="java.lang.Object" implements="java.io.Serializable, java.lang.Comparable">public final class java.lang.String extends java.lang.Object implements java.io.Serializable, java.lang.Comparable</old-declaration>
                <new-declaration visibility="public" final="yes" super="yes" name="java.lang.String" extends="java.lang.Object" implements="java.io.Serializable, java.lang.CharSequence, java.lang.Comparable">public final class java.lang.String extends java.lang.Object implements java.io.Serializable, java.lang.CharSequence, java.lang.Comparable</new-declaration>
            </modified-declaration>
            <new-methods>
                <declaration visibility="public" return-type="boolean" signature="contentEquals(java.lang.StringBuffer)" full-signature="java.lang.String.contentEquals(java.lang.StringBuffer)" throws="">public boolean contentEquals(java.lang.StringBuffer)</declaration>
                <declaration visibility="public" return-type="java.lang.CharSequence" signature="subSequence(int, int)" full-signature="java.lang.String.subSequence(int, int)" throws="">public java.lang.CharSequence subSequence(int, int)</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.lang.StringBuffer</name>
            <modified-declaration>
                <old-declaration visibility="public" final="yes" super="yes" name="java.lang.StringBuffer" extends="java.lang.Object" implements="java.io.Serializable">public final class java.lang.StringBuffer extends java.lang.Object implements java.io.Serializable</old-declaration>
                <new-declaration visibility="public" final="yes" super="yes" name="java.lang.StringBuffer" extends="java.lang.Object" implements="java.io.Serializable, java.lang.CharSequence">public final class java.lang.StringBuffer extends java.lang.Object implements java.io.Serializable, java.lang.CharSequence</new-declaration>
            </modified-declaration>
            <new-methods>
                <declaration visibility="public" return-type="java.lang.StringBuffer" signature="append(java.lang.StringBuffer)" full-signature="java.lang.StringBuffer.append(java.lang.StringBuffer)" throws="">public java.lang.StringBuffer append(java.lang.StringBuffer)</declaration>
                <declaration visibility="public" return-type="int" signature="indexOf(java.lang.String)" full-signature="java.lang.StringBuffer.indexOf(java.lang.String)" throws="">public int indexOf(java.lang.String)</declaration>
                <declaration visibility="public" return-type="int" signature="indexOf(java.lang.String, int)" full-signature="java.lang.StringBuffer.indexOf(java.lang.String, int)" throws="">public int indexOf(java.lang.String, int)</declaration>
                <declaration visibility="public" return-type="int" signature="lastIndexOf(java.lang.String)" full-signature="java.lang.StringBuffer.lastIndexOf(java.lang.String)" throws="">public int lastIndexOf(java.lang.String)</declaration>
                <declaration visibility="public" return-type="int" signature="lastIndexOf(java.lang.String, int)" full-signature="java.lang.StringBuffer.lastIndexOf(java.lang.String, int)" throws="">public int lastIndexOf(java.lang.String, int)</declaration>
                <declaration visibility="public" return-type="java.lang.CharSequence" signature="subSequence(int, int)" full-signature="java.lang.StringBuffer.subSequence(int, int)" throws="">public java.lang.CharSequence subSequence(int, int)</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.lang.Thread</name>
            <new-constructors>
                <declaration visibility="public" signature="Thread(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String, long)" full-signature="java.lang.Thread.Thread(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String, long)" throws="">public Thread(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String, long)</declaration>
            </new-constructors>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="boolean" signature="holdsLock(java.lang.Object)" full-signature="java.lang.Thread.holdsLock(java.lang.Object)" throws="">public static boolean holdsLock(java.lang.Object)</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.lang.Throwable</name>
            <new-constructors>
                <declaration visibility="public" signature="Throwable(java.lang.String, java.lang.Throwable)" full-signature="java.lang.Throwable.Throwable(java.lang.String, java.lang.Throwable)" throws="">public Throwable(java.lang.String, java.lang.Throwable)</declaration>
                <declaration visibility="public" signature="Throwable(java.lang.Throwable)" full-signature="java.lang.Throwable.Throwable(java.lang.Throwable)" throws="">public Throwable(java.lang.Throwable)</declaration>
            </new-constructors>
            <new-methods>
                <declaration visibility="public" return-type="java.lang.Throwable" signature="getCause()" full-signature="java.lang.Throwable.getCause()" throws="">public java.lang.Throwable getCause()</declaration>
                <declaration visibility="public" return-type="java.lang.StackTraceElement[]" signature="getStackTrace()" full-signature="java.lang.Throwable.getStackTrace()" throws="">public java.lang.StackTraceElement[] getStackTrace()</declaration>
                <declaration visibility="public" return-type="java.lang.Throwable" signature="initCause(java.lang.Throwable)" full-signature="java.lang.Throwable.initCause(java.lang.Throwable)" throws="">public java.lang.Throwable initCause(java.lang.Throwable)</declaration>
                <declaration visibility="public" return-type="void" signature="setStackTrace(java.lang.StackTraceElement[])" full-signature="java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])" throws="">public void setStackTrace(java.lang.StackTraceElement[])</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.net.Authenticator</name>
            <new-methods>
                <declaration visibility="protected" final="yes" return-type="java.lang.String" signature="getRequestingHost()" full-signature="java.net.Authenticator.getRequestingHost()" throws="">protected final java.lang.String getRequestingHost()</declaration>
                <declaration visibility="public" static="yes" return-type="java.net.PasswordAuthentication" signature="requestPasswordAuthentication(java.lang.String, java.net.InetAddress, int, java.lang.String, java.lang.String, java.lang.String)" full-signature="java.net.Authenticator.requestPasswordAuthentication(java.lang.String, java.net.InetAddress, int, java.lang.String, java.lang.String, java.lang.String)" throws="">public static java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String, java.net.InetAddress, int, java.lang.String, java.lang.String, java.lang.String)</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.net.DatagramPacket</name>
            <new-constructors>
                <declaration visibility="public" signature="DatagramPacket(byte[], int, int, java.net.SocketAddress)" full-signature="java.net.DatagramPacket.DatagramPacket(byte[], int, int, java.net.SocketAddress)" throws="java.net.SocketException">public DatagramPacket(byte[], int, int, java.net.SocketAddress) throws java.net.SocketException</declaration>
                <declaration visibility="public" signature="DatagramPacket(byte[], int, java.net.SocketAddress)" full-signature="java.net.DatagramPacket.DatagramPacket(byte[], int, java.net.SocketAddress)" throws="java.net.SocketException">public DatagramPacket(byte[], int, java.net.SocketAddress) throws java.net.SocketException</declaration>
            </new-constructors>
            <new-methods>
                <declaration visibility="public" return-type="java.net.SocketAddress" signature="getSocketAddress()" full-signature="java.net.DatagramPacket.getSocketAddress()" throws="">public java.net.SocketAddress getSocketAddress()</declaration>
                <declaration visibility="public" return-type="void" signature="setSocketAddress(java.net.SocketAddress)" full-signature="java.net.DatagramPacket.setSocketAddress(java.net.SocketAddress)" throws="">public void setSocketAddress(java.net.SocketAddress)</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.net.DatagramSocket</name>
            <new-constructors>
                <declaration visibility="protected" signature="DatagramSocket(java.net.DatagramSocketImpl)" full-signature="java.net.DatagramSocket.DatagramSocket(java.net.DatagramSocketImpl)" throws="">protected DatagramSocket(java.net.DatagramSocketImpl)</declaration>
                <declaration visibility="public" signature="DatagramSocket(java.net.SocketAddress)" full-signature="java.net.DatagramSocket.DatagramSocket(java.net.SocketAddress)" throws="java.net.SocketException">public DatagramSocket(java.net.SocketAddress) throws java.net.SocketException</declaration>
            </new-constructors>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="bind(java.net.SocketAddress)" full-signature="java.net.DatagramSocket.bind(java.net.SocketAddress)" throws="java.net.SocketException">public void bind(java.net.SocketAddress) throws java.net.SocketException</declaration>
                <declaration visibility="public" return-type="void" signature="connect(java.net.SocketAddress)" full-signature="java.net.DatagramSocket.connect(java.net.SocketAddress)" throws="java.net.SocketException">public void connect(java.net.SocketAddress) throws java.net.SocketException</declaration>
                <declaration visibility="public" return-type="boolean" signature="getBroadcast()" full-signature="java.net.DatagramSocket.getBroadcast()" throws="java.net.SocketException">public boolean getBroadcast() throws java.net.SocketException</declaration>
                <declaration visibility="public" return-type="java.net.SocketAddress" signature="getLocalSocketAddress()" full-signature="java.net.DatagramSocket.getLocalSocketAddress()" throws="">public java.net.SocketAddress getLocalSocketAddress()</declaration>
                <declaration visibility="public" return-type="java.net.SocketAddress" signature="getRemoteSocketAddress()" full-signature="java.net.DatagramSocket.getRemoteSocketAddress()" throws="">public java.net.SocketAddress getRemoteSocketAddress()</declaration>
                <declaration visibility="public" return-type="boolean" signature="getReuseAddress()" full-signature="java.net.DatagramSocket.getReuseAddress()" throws="java.net.SocketException">public boolean getReuseAddress() throws java.net.SocketException</declaration>
                <declaration visibility="public" return-type="int" signature="getTrafficClass()" full-signature="java.net.DatagramSocket.getTrafficClass()" throws="java.net.SocketException">public int getTrafficClass() throws java.net.SocketException</declaration>
                <declaration visibility="public" return-type="boolean" signature="isBound()" full-signature="java.net.DatagramSocket.isBound()" throws="">public boolean isBound()</declaration>
                <declaration visibility="public" return-type="boolean" signature="isClosed()" full-signature="java.net.DatagramSocket.isClosed()" throws="">public boolean isClosed()</declaration>
                <declaration visibility="public" return-type="boolean" signature="isConnected()" full-signature="java.net.DatagramSocket.isConnected()" throws="">public boolean isConnected()</declaration>
                <declaration visibility="public" return-type="void" signature="setBroadcast(boolean)" full-signature="java.net.DatagramSocket.setBroadcast(boolean)" throws="java.net.SocketException">public void setBroadcast(boolean) throws java.net.SocketException</declaration>
                <declaration visibility="public" return-type="void" signature="setReuseAddress(boolean)" full-signature="java.net.DatagramSocket.setReuseAddress(boolean)" throws="java.net.SocketException">public void setReuseAddress(boolean) throws java.net.SocketException</declaration>
                <declaration visibility="public" return-type="void" signature="setTrafficClass(int)" full-signature="java.net.DatagramSocket.setTrafficClass(int)" throws="java.net.SocketException">public void setTrafficClass(int) throws java.net.SocketException</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.net.DatagramSocketImpl</name>
            <new-methods>
                <declaration visibility="protected" return-type="void" signature="connect(java.net.InetAddress, int)" full-signature="java.net.DatagramSocketImpl.connect(java.net.InetAddress, int)" throws="java.net.SocketException">protected void connect(java.net.InetAddress, int) throws java.net.SocketException</declaration>
                <declaration visibility="protected" return-type="void" signature="disconnect()" full-signature="java.net.DatagramSocketImpl.disconnect()" throws="">protected void disconnect()</declaration>
                <declaration visibility="protected" abstract="yes" return-type="void" signature="joinGroup(java.net.SocketAddress, java.net.NetworkInterface)" full-signature="java.net.DatagramSocketImpl.joinGroup(java.net.SocketAddress, java.net.NetworkInterface)" throws="java.io.IOException">protected abstract void joinGroup(java.net.SocketAddress, java.net.NetworkInterface) throws java.io.IOException</declaration>
                <declaration visibility="protected" abstract="yes" return-type="void" signature="leaveGroup(java.net.SocketAddress, java.net.NetworkInterface)" full-signature="java.net.DatagramSocketImpl.leaveGroup(java.net.SocketAddress, java.net.NetworkInterface)" throws="java.io.IOException">protected abstract void leaveGroup(java.net.SocketAddress, java.net.NetworkInterface) throws java.io.IOException</declaration>
                <declaration visibility="protected" abstract="yes" return-type="int" signature="peekData(java.net.DatagramPacket)" full-signature="java.net.DatagramSocketImpl.peekData(java.net.DatagramPacket)" throws="java.io.IOException">protected abstract int peekData(java.net.DatagramPacket) throws java.io.IOException</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.net.InetAddress</name>
            <modified-declaration>
                <old-declaration visibility="public" final="yes" super="yes" name="java.net.InetAddress" extends="java.lang.Object" implements="java.io.Serializable">public final class java.net.InetAddress extends java.lang.Object implements java.io.Serializable</old-declaration>
                <new-declaration visibility="public" super="yes" name="java.net.InetAddress" extends="java.lang.Object" implements="java.io.Serializable">public class java.net.InetAddress extends java.lang.Object implements java.io.Serializable</new-declaration>
            </modified-declaration>
            <modified-constructors>
                <feature>
                    <name>java.net.InetAddress.InetAddress()</name>
                    <modified-declaration>
                        <old-declaration visibility="private" signature="InetAddress()" full-signature="java.net.InetAddress.InetAddress()" throws="">private InetAddress()</old-declaration>
                        <new-declaration visibility="package" signature="InetAddress()" full-signature="java.net.InetAddress.InetAddress()" throws="">InetAddress()</new-declaration>
                    </modified-declaration>
                </feature>
            </modified-constructors>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="java.net.InetAddress" signature="getByAddress(byte[])" full-signature="java.net.InetAddress.getByAddress(byte[])" throws="java.net.UnknownHostException">public static java.net.InetAddress getByAddress(byte[]) throws java.net.UnknownHostException</declaration>
                <declaration visibility="public" static="yes" return-type="java.net.InetAddress" signature="getByAddress(java.lang.String, byte[])" full-signature="java.net.InetAddress.getByAddress(java.lang.String, byte[])" throws="java.net.UnknownHostException">public static java.net.InetAddress getByAddress(java.lang.String, byte[]) throws java.net.UnknownHostException</declaration>
                <declaration visibility="public" return-type="java.lang.String" signature="getCanonicalHostName()" full-signature="java.net.InetAddress.getCanonicalHostName()" throws="">public java.lang.String getCanonicalHostName()</declaration>
                <declaration visibility="public" return-type="boolean" signature="isAnyLocalAddress()" full-signature="java.net.InetAddress.isAnyLocalAddress()" throws="">public boolean isAnyLocalAddress()</declaration>
                <declaration visibility="public" return-type="boolean" signature="isLinkLocalAddress()" full-signature="java.net.InetAddress.isLinkLocalAddress()" throws="">public boolean isLinkLocalAddress()</declaration>
                <declaration visibility="public" return-type="boolean" signature="isLoopbackAddress()" full-signature="java.net.InetAddress.isLoopbackAddress()" throws="">public boolean isLoopbackAddress()</declaration>
                <declaration visibility="public" return-type="boolean" signature="isMCGlobal()" full-signature="java.net.InetAddress.isMCGlobal()" throws="">public boolean isMCGlobal()</declaration>
                <declaration visibility="public" return-type="boolean" signature="isMCLinkLocal()" full-signature="java.net.InetAddress.isMCLinkLocal()" throws="">public boolean isMCLinkLocal()</declaration>
                <declaration visibility="public" return-type="boolean" signature="isMCNodeLocal()" full-signature="java.net.InetAddress.isMCNodeLocal()" throws="">public boolean isMCNodeLocal()</declaration>
                <declaration visibility="public" return-type="boolean" signature="isMCOrgLocal()" full-signature="java.net.InetAddress.isMCOrgLocal()" throws="">public boolean isMCOrgLocal()</declaration>
                <declaration visibility="public" return-type="boolean" signature="isMCSiteLocal()" full-signature="java.net.InetAddress.isMCSiteLocal()" throws="">public boolean isMCSiteLocal()</declaration>
                <declaration visibility="public" return-type="boolean" signature="isSiteLocalAddress()" full-signature="java.net.InetAddress.isSiteLocalAddress()" throws="">public boolean isSiteLocalAddress()</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.net.MulticastSocket</name>
            <deprecated-methods>
                <declaration visibility="public" deprecated="yes" return-type="void" signature="send(java.net.DatagramPacket, byte)" full-signature="java.net.MulticastSocket.send(java.net.DatagramPacket, byte)" throws="java.io.IOException">public void send(java.net.DatagramPacket, byte) throws java.io.IOException</declaration>
            </deprecated-methods>
            <new-constructors>
                <declaration visibility="public" signature="MulticastSocket(java.net.SocketAddress)" full-signature="java.net.MulticastSocket.MulticastSocket(java.net.SocketAddress)" throws="java.io.IOException">public MulticastSocket(java.net.SocketAddress) throws java.io.IOException</declaration>
            </new-constructors>
            <new-methods>
                <declaration visibility="public" return-type="boolean" signature="getLoopbackMode()" full-signature="java.net.MulticastSocket.getLoopbackMode()" throws="java.net.SocketException">public boolean getLoopbackMode() throws java.net.SocketException</declaration>
                <declaration visibility="public" return-type="java.net.NetworkInterface" signature="getNetworkInterface()" full-signature="java.net.MulticastSocket.getNetworkInterface()" throws="java.net.SocketException">public java.net.NetworkInterface getNetworkInterface() throws java.net.SocketException</declaration>
                <declaration visibility="public" return-type="void" signature="joinGroup(java.net.SocketAddress, java.net.NetworkInterface)" full-signature="java.net.MulticastSocket.joinGroup(java.net.SocketAddress, java.net.NetworkInterface)" throws="java.io.IOException">public void joinGroup(java.net.SocketAddress, java.net.NetworkInterface) throws java.io.IOException</declaration>
                <declaration visibility="public" return-type="void" signature="leaveGroup(java.net.SocketAddress, java.net.NetworkInterface)" full-signature="java.net.MulticastSocket.leaveGroup(java.net.SocketAddress, java.net.NetworkInterface)" throws="java.io.IOException">public void leaveGroup(java.net.SocketAddress, java.net.NetworkInterface) throws java.io.IOException</declaration>
                <declaration visibility="public" return-type="void" signature="setLoopbackMode(boolean)" full-signature="java.net.MulticastSocket.setLoopbackMode(boolean)" throws="java.net.SocketException">public void setLoopbackMode(boolean) throws java.net.SocketException</declaration>
                <declaration visibility="public" return-type="void" signature="setNetworkInterface(java.net.NetworkInterface)" full-signature="java.net.MulticastSocket.setNetworkInterface(java.net.NetworkInterface)" throws="java.net.SocketException">public void setNetworkInterface(java.net.NetworkInterface) throws java.net.SocketException</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.net.ServerSocket</name>
            <new-constructors>
                <declaration visibility="public" signature="ServerSocket()" full-signature="java.net.ServerSocket.ServerSocket()" throws="java.io.IOException">public ServerSocket() throws java.io.IOException</declaration>
            </new-constructors>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="bind(java.net.SocketAddress)" full-signature="java.net.ServerSocket.bind(java.net.SocketAddress)" throws="java.io.IOException">public void bind(java.net.SocketAddress) throws java.io.IOException</declaration>
                <declaration visibility="public" return-type="void" signature="bind(java.net.SocketAddress, int)" full-signature="java.net.ServerSocket.bind(java.net.SocketAddress, int)" throws="java.io.IOException">public void bind(java.net.SocketAddress, int) throws java.io.IOException</declaration>
                <declaration visibility="public" return-type="java.net.SocketAddress" signature="getLocalSocketAddress()" full-signature="java.net.ServerSocket.getLocalSocketAddress()" throws="">public java.net.SocketAddress getLocalSocketAddress()</declaration>
                <declaration visibility="public" return-type="int" signature="getReceiveBufferSize()" full-signature="java.net.ServerSocket.getReceiveBufferSize()" throws="java.net.SocketException">public int getReceiveBufferSize() throws java.net.SocketException</declaration>
                <declaration visibility="public" return-type="boolean" signature="getReuseAddress()" full-signature="java.net.ServerSocket.getReuseAddress()" throws="java.net.SocketException">public boolean getReuseAddress() throws java.net.SocketException</declaration>
                <declaration visibility="public" return-type="boolean" signature="isBound()" full-signature="java.net.ServerSocket.isBound()" throws="">public boolean isBound()</declaration>
                <declaration visibility="public" return-type="boolean" signature="isClosed()" full-signature="java.net.ServerSocket.isClosed()" throws="">public boolean isClosed()</declaration>
                <declaration visibility="public" return-type="void" signature="setReceiveBufferSize(int)" full-signature="java.net.ServerSocket.setReceiveBufferSize(int)" throws="java.net.SocketException">public void setReceiveBufferSize(int) throws java.net.SocketException</declaration>
                <declaration visibility="public" return-type="void" signature="setReuseAddress(boolean)" full-signature="java.net.ServerSocket.setReuseAddress(boolean)" throws="java.net.SocketException">public void setReuseAddress(boolean) throws java.net.SocketException</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.net.Socket</name>
            <modified-constructors>
                <feature>
                    <name>java.net.Socket.Socket()</name>
                    <modified-declaration>
                        <old-declaration visibility="protected" signature="Socket()" full-signature="java.net.Socket.Socket()" throws="">protected Socket()</old-declaration>
                        <new-declaration visibility="public" signature="Socket()" full-signature="java.net.Socket.Socket()" throws="">public Socket()</new-declaration>
                    </modified-declaration>
                </feature>
            </modified-constructors>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="bind(java.net.SocketAddress)" full-signature="java.net.Socket.bind(java.net.SocketAddress)" throws="java.io.IOException">public void bind(java.net.SocketAddress) throws java.io.IOException</declaration>
                <declaration visibility="public" return-type="void" signature="connect(java.net.SocketAddress)" full-signature="java.net.Socket.connect(java.net.SocketAddress)" throws="java.io.IOException">public void connect(java.net.SocketAddress) throws java.io.IOException</declaration>
                <declaration visibility="public" return-type="void" signature="connect(java.net.SocketAddress, int)" full-signature="java.net.Socket.connect(java.net.SocketAddress, int)" throws="java.io.IOException">public void connect(java.net.SocketAddress, int) throws java.io.IOException</declaration>
                <declaration visibility="public" return-type="java.net.SocketAddress" signature="getLocalSocketAddress()" full-signature="java.net.Socket.getLocalSocketAddress()" throws="">public java.net.SocketAddress getLocalSocketAddress()</declaration>
                <declaration visibility="public" return-type="boolean" signature="getOOBInline()" full-signature="java.net.Socket.getOOBInline()" throws="java.net.SocketException">public boolean getOOBInline() throws java.net.SocketException</declaration>
                <declaration visibility="public" return-type="java.net.SocketAddress" signature="getRemoteSocketAddress()" full-signature="java.net.Socket.getRemoteSocketAddress()" throws="">public java.net.SocketAddress getRemoteSocketAddress()</declaration>
                <declaration visibility="public" return-type="boolean" signature="getReuseAddress()" full-signature="java.net.Socket.getReuseAddress()" throws="java.net.SocketException">public boolean getReuseAddress() throws java.net.SocketException</declaration>
                <declaration visibility="public" return-type="int" signature="getTrafficClass()" full-signature="java.net.Socket.getTrafficClass()" throws="java.net.SocketException">public int getTrafficClass() throws java.net.SocketException</declaration>
                <declaration visibility="public" return-type="boolean" signature="isBound()" full-signature="java.net.Socket.isBound()" throws="">public boolean isBound()</declaration>
                <declaration visibility="public" return-type="boolean" signature="isClosed()" full-signature="java.net.Socket.isClosed()" throws="">public boolean isClosed()</declaration>
                <declaration visibility="public" return-type="boolean" signature="isConnected()" full-signature="java.net.Socket.isConnected()" throws="">public boolean isConnected()</declaration>
                <declaration visibility="public" return-type="boolean" signature="isInputShutdown()" full-signature="java.net.Socket.isInputShutdown()" throws="">public boolean isInputShutdown()</declaration>
                <declaration visibility="public" return-type="boolean" signature="isOutputShutdown()" full-signature="java.net.Socket.isOutputShutdown()" throws="">public boolean isOutputShutdown()</declaration>
                <declaration visibility="public" return-type="void" signature="sendUrgentData(int)" full-signature="java.net.Socket.sendUrgentData(int)" throws="java.io.IOException">public void sendUrgentData(int) throws java.io.IOException</declaration>
                <declaration visibility="public" return-type="void" signature="setOOBInline(boolean)" full-signature="java.net.Socket.setOOBInline(boolean)" throws="java.net.SocketException">public void setOOBInline(boolean) throws java.net.SocketException</declaration>
                <declaration visibility="public" return-type="void" signature="setReuseAddress(boolean)" full-signature="java.net.Socket.setReuseAddress(boolean)" throws="java.net.SocketException">public void setReuseAddress(boolean) throws java.net.SocketException</declaration>
                <declaration visibility="public" return-type="void" signature="setTrafficClass(int)" full-signature="java.net.Socket.setTrafficClass(int)" throws="java.net.SocketException">public void setTrafficClass(int) throws java.net.SocketException</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.net.SocketImpl</name>
            <new-methods>
                <declaration visibility="protected" abstract="yes" return-type="void" signature="connect(java.net.SocketAddress, int)" full-signature="java.net.SocketImpl.connect(java.net.SocketAddress, int)" throws="java.io.IOException">protected abstract void connect(java.net.SocketAddress, int) throws java.io.IOException</declaration>
                <declaration visibility="protected" abstract="yes" return-type="void" signature="sendUrgentData(int)" full-signature="java.net.SocketImpl.sendUrgentData(int)" throws="java.io.IOException">protected abstract void sendUrgentData(int) throws java.io.IOException</declaration>
                <declaration visibility="protected" return-type="boolean" signature="supportsUrgentData()" full-signature="java.net.SocketImpl.supportsUrgentData()" throws="">protected boolean supportsUrgentData()</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.net.URL</name>
            <new-methods>
                <declaration visibility="public" return-type="int" signature="getDefaultPort()" full-signature="java.net.URL.getDefaultPort()" throws="">public int getDefaultPort()</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.net.URLConnection</name>
            <modified-methods>
                <feature>
                    <name>java.net.URLConnection.guessContentTypeFromName(java.lang.String)</name>
                    <modified-declaration>
                        <old-declaration visibility="protected" static="yes" return-type="java.lang.String" signature="guessContentTypeFromName(java.lang.String)" full-signature="java.net.URLConnection.guessContentTypeFromName(java.lang.String)" throws="">protected static java.lang.String guessContentTypeFromName(java.lang.String)</old-declaration>
                        <new-declaration visibility="public" static="yes" return-type="java.lang.String" signature="guessContentTypeFromName(java.lang.String)" full-signature="java.net.URLConnection.guessContentTypeFromName(java.lang.String)" throws="">public static java.lang.String guessContentTypeFromName(java.lang.String)</new-declaration>
                    </modified-declaration>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="addRequestProperty(java.lang.String, java.lang.String)" full-signature="java.net.URLConnection.addRequestProperty(java.lang.String, java.lang.String)" throws="">public void addRequestProperty(java.lang.String, java.lang.String)</declaration>
                <declaration visibility="public" return-type="java.util.Map" signature="getHeaderFields()" full-signature="java.net.URLConnection.getHeaderFields()" throws="">public java.util.Map getHeaderFields()</declaration>
                <declaration visibility="public" return-type="java.util.Map" signature="getRequestProperties()" full-signature="java.net.URLConnection.getRequestProperties()" throws="">public java.util.Map getRequestProperties()</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.net.URLDecoder</name>
            <deprecated-methods>
                <declaration visibility="public" static="yes" deprecated="yes" return-type="java.lang.String" signature="decode(java.lang.String)" full-signature="java.net.URLDecoder.decode(java.lang.String)" throws="">public static java.lang.String decode(java.lang.String)</declaration>
            </deprecated-methods>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="java.lang.String" signature="decode(java.lang.String, java.lang.String)" full-signature="java.net.URLDecoder.decode(java.lang.String, java.lang.String)" throws="java.io.UnsupportedEncodingException">public static java.lang.String decode(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.net.URLEncoder</name>
            <deprecated-methods>
                <declaration visibility="public" static="yes" deprecated="yes" return-type="java.lang.String" signature="encode(java.lang.String)" full-signature="java.net.URLEncoder.encode(java.lang.String)" throws="">public static java.lang.String encode(java.lang.String)</declaration>
            </deprecated-methods>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="java.lang.String" signature="encode(java.lang.String, java.lang.String)" full-signature="java.net.URLEncoder.encode(java.lang.String, java.lang.String)" throws="java.io.UnsupportedEncodingException">public static java.lang.String encode(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.security.AlgorithmParameterGenerator</name>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="java.security.AlgorithmParameterGenerator" signature="getInstance(java.lang.String, java.security.Provider)" full-signature="java.security.AlgorithmParameterGenerator.getInstance(java.lang.String, java.security.Provider)" throws="java.security.NoSuchAlgorithmException">public static java.security.AlgorithmParameterGenerator getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.security.AlgorithmParameters</name>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="java.security.AlgorithmParameters" signature="getInstance(java.lang.String, java.security.Provider)" full-signature="java.security.AlgorithmParameters.getInstance(java.lang.String, java.security.Provider)" throws="java.security.NoSuchAlgorithmException">public static java.security.AlgorithmParameters getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.security.KeyFactory</name>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="java.security.KeyFactory" signature="getInstance(java.lang.String, java.security.Provider)" full-signature="java.security.KeyFactory.getInstance(java.lang.String, java.security.Provider)" throws="java.security.NoSuchAlgorithmException">public static java.security.KeyFactory getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.security.KeyPairGenerator</name>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="java.security.KeyPairGenerator" signature="getInstance(java.lang.String, java.security.Provider)" full-signature="java.security.KeyPairGenerator.getInstance(java.lang.String, java.security.Provider)" throws="java.security.NoSuchAlgorithmException">public static java.security.KeyPairGenerator getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.security.KeyStore</name>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="java.security.KeyStore" signature="getInstance(java.lang.String, java.security.Provider)" full-signature="java.security.KeyStore.getInstance(java.lang.String, java.security.Provider)" throws="java.security.KeyStoreException">public static java.security.KeyStore getInstance(java.lang.String, java.security.Provider) throws java.security.KeyStoreException</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.security.MessageDigest</name>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="java.security.MessageDigest" signature="getInstance(java.lang.String, java.security.Provider)" full-signature="java.security.MessageDigest.getInstance(java.lang.String, java.security.Provider)" throws="java.security.NoSuchAlgorithmException">public static java.security.MessageDigest getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.security.Policy</name>
            <new-methods>
                <declaration visibility="public" return-type="java.security.PermissionCollection" signature="getPermissions(java.security.ProtectionDomain)" full-signature="java.security.Policy.getPermissions(java.security.ProtectionDomain)" throws="">public java.security.PermissionCollection getPermissions(java.security.ProtectionDomain)</declaration>
                <declaration visibility="public" return-type="boolean" signature="implies(java.security.ProtectionDomain, java.security.Permission)" full-signature="java.security.Policy.implies(java.security.ProtectionDomain, java.security.Permission)" throws="">public boolean implies(java.security.ProtectionDomain, java.security.Permission)</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.security.ProtectionDomain</name>
            <new-constructors>
                <declaration visibility="public" signature="ProtectionDomain(java.security.CodeSource, java.security.PermissionCollection, java.lang.ClassLoader, java.security.Principal[])" full-signature="java.security.ProtectionDomain.ProtectionDomain(java.security.CodeSource, java.security.PermissionCollection, java.lang.ClassLoader, java.security.Principal[])" throws="">public ProtectionDomain(java.security.CodeSource, java.security.PermissionCollection, java.lang.ClassLoader, java.security.Principal[])</declaration>
            </new-constructors>
            <new-methods>
                <declaration visibility="public" final="yes" return-type="java.lang.ClassLoader" signature="getClassLoader()" full-signature="java.security.ProtectionDomain.getClassLoader()" throws="">public final java.lang.ClassLoader getClassLoader()</declaration>
                <declaration visibility="public" final="yes" return-type="java.security.Principal[]" signature="getPrincipals()" full-signature="java.security.ProtectionDomain.getPrincipals()" throws="">public final java.security.Principal[] getPrincipals()</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.security.SecureRandom</name>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="java.security.SecureRandom" signature="getInstance(java.lang.String, java.security.Provider)" full-signature="java.security.SecureRandom.getInstance(java.lang.String, java.security.Provider)" throws="java.security.NoSuchAlgorithmException">public static java.security.SecureRandom getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.security.Security</name>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="java.util.Set" signature="getAlgorithms(java.lang.String)" full-signature="java.security.Security.getAlgorithms(java.lang.String)" throws="">public static java.util.Set getAlgorithms(java.lang.String)</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.security.Signature</name>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="java.security.Signature" signature="getInstance(java.lang.String, java.security.Provider)" full-signature="java.security.Signature.getInstance(java.lang.String, java.security.Provider)" throws="java.security.NoSuchAlgorithmException">public static java.security.Signature getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException</declaration>
                <declaration visibility="public" final="yes" return-type="java.security.AlgorithmParameters" signature="getParameters()" full-signature="java.security.Signature.getParameters()" throws="">public final java.security.AlgorithmParameters getParameters()</declaration>
                <declaration visibility="public" final="yes" return-type="boolean" signature="verify(byte[], int, int)" full-signature="java.security.Signature.verify(byte[], int, int)" throws="java.security.SignatureException">public final boolean verify(byte[], int, int) throws java.security.SignatureException</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.security.SignatureSpi</name>
            <new-methods>
                <declaration visibility="protected" return-type="java.security.AlgorithmParameters" signature="engineGetParameters()" full-signature="java.security.SignatureSpi.engineGetParameters()" throws="">protected java.security.AlgorithmParameters engineGetParameters()</declaration>
                <declaration visibility="protected" return-type="boolean" signature="engineVerify(byte[], int, int)" full-signature="java.security.SignatureSpi.engineVerify(byte[], int, int)" throws="java.security.SignatureException">protected boolean engineVerify(byte[], int, int) throws java.security.SignatureException</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.security.cert.CertificateFactory</name>
            <new-methods>
                <declaration visibility="public" final="yes" return-type="java.security.cert.CertPath" signature="generateCertPath(java.io.InputStream)" full-signature="java.security.cert.CertificateFactory.generateCertPath(java.io.InputStream)" throws="java.security.cert.CertificateException">public final java.security.cert.CertPath generateCertPath(java.io.InputStream) throws java.security.cert.CertificateException</declaration>
                <declaration visibility="public" final="yes" return-type="java.security.cert.CertPath" signature="generateCertPath(java.io.InputStream, java.lang.String)" full-signature="java.security.cert.CertificateFactory.generateCertPath(java.io.InputStream, java.lang.String)" throws="java.security.cert.CertificateException">public final java.security.cert.CertPath generateCertPath(java.io.InputStream, java.lang.String) throws java.security.cert.CertificateException</declaration>
                <declaration visibility="public" final="yes" return-type="java.security.cert.CertPath" signature="generateCertPath(java.util.List)" full-signature="java.security.cert.CertificateFactory.generateCertPath(java.util.List)" throws="java.security.cert.CertificateException">public final java.security.cert.CertPath generateCertPath(java.util.List) throws java.security.cert.CertificateException</declaration>
                <declaration visibility="public" final="yes" return-type="java.util.Iterator" signature="getCertPathEncodings()" full-signature="java.security.cert.CertificateFactory.getCertPathEncodings()" throws="">public final java.util.Iterator getCertPathEncodings()</declaration>
                <declaration visibility="public" static="yes" final="yes" return-type="java.security.cert.CertificateFactory" signature="getInstance(java.lang.String, java.security.Provider)" full-signature="java.security.cert.CertificateFactory.getInstance(java.lang.String, java.security.Provider)" throws="java.security.cert.CertificateException">public static final java.security.cert.CertificateFactory getInstance(java.lang.String, java.security.Provider) throws java.security.cert.CertificateException</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.security.cert.CertificateFactorySpi</name>
            <new-methods>
                <declaration visibility="public" return-type="java.security.cert.CertPath" signature="engineGenerateCertPath(java.io.InputStream)" full-signature="java.security.cert.CertificateFactorySpi.engineGenerateCertPath(java.io.InputStream)" throws="java.security.cert.CertificateException">public java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream) throws java.security.cert.CertificateException</declaration>
                <declaration visibility="public" return-type="java.security.cert.CertPath" signature="engineGenerateCertPath(java.io.InputStream, java.lang.String)" full-signature="java.security.cert.CertificateFactorySpi.engineGenerateCertPath(java.io.InputStream, java.lang.String)" throws="java.security.cert.CertificateException">public java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream, java.lang.String) throws java.security.cert.CertificateException</declaration>
                <declaration visibility="public" return-type="java.security.cert.CertPath" signature="engineGenerateCertPath(java.util.List)" full-signature="java.security.cert.CertificateFactorySpi.engineGenerateCertPath(java.util.List)" throws="java.security.cert.CertificateException">public java.security.cert.CertPath engineGenerateCertPath(java.util.List) throws java.security.cert.CertificateException</declaration>
                <declaration visibility="public" return-type="java.util.Iterator" signature="engineGetCertPathEncodings()" full-signature="java.security.cert.CertificateFactorySpi.engineGetCertPathEncodings()" throws="">public java.util.Iterator engineGetCertPathEncodings()</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.security.cert.X509CRL</name>
            <new-methods>
                <declaration visibility="public" return-type="javax.security.auth.x500.X500Principal" signature="getIssuerX500Principal()" full-signature="java.security.cert.X509CRL.getIssuerX500Principal()" throws="">public javax.security.auth.x500.X500Principal getIssuerX500Principal()</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.security.cert.X509Certificate</name>
            <new-methods>
                <declaration visibility="public" return-type="java.util.List" signature="getExtendedKeyUsage()" full-signature="java.security.cert.X509Certificate.getExtendedKeyUsage()" throws="java.security.cert.CertificateParsingException">public java.util.List getExtendedKeyUsage() throws java.security.cert.CertificateParsingException</declaration>
                <declaration visibility="public" return-type="java.util.Collection" signature="getIssuerAlternativeNames()" full-signature="java.security.cert.X509Certificate.getIssuerAlternativeNames()" throws="java.security.cert.CertificateParsingException">public java.util.Collection getIssuerAlternativeNames() throws java.security.cert.CertificateParsingException</declaration>
                <declaration visibility="public" return-type="javax.security.auth.x500.X500Principal" signature="getIssuerX500Principal()" full-signature="java.security.cert.X509Certificate.getIssuerX500Principal()" throws="">public javax.security.auth.x500.X500Principal getIssuerX500Principal()</declaration>
                <declaration visibility="public" return-type="java.util.Collection" signature="getSubjectAlternativeNames()" full-signature="java.security.cert.X509Certificate.getSubjectAlternativeNames()" throws="java.security.cert.CertificateParsingException">public java.util.Collection getSubjectAlternativeNames() throws java.security.cert.CertificateParsingException</declaration>
                <declaration visibility="public" return-type="javax.security.auth.x500.X500Principal" signature="getSubjectX500Principal()" full-signature="java.security.cert.X509Certificate.getSubjectX500Principal()" throws="">public javax.security.auth.x500.X500Principal getSubjectX500Principal()</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.text.DecimalFormatSymbols</name>
            <new-methods>
                <declaration visibility="public" return-type="java.util.Currency" signature="getCurrency()" full-signature="java.text.DecimalFormatSymbols.getCurrency()" throws="">public java.util.Currency getCurrency()</declaration>
                <declaration visibility="public" return-type="void" signature="setCurrency(java.util.Currency)" full-signature="java.text.DecimalFormatSymbols.setCurrency(java.util.Currency)" throws="">public void setCurrency(java.util.Currency)</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.text.FieldPosition</name>
            <new-constructors>
                <declaration visibility="public" signature="FieldPosition(java.text.Format$Field)" full-signature="java.text.FieldPosition.FieldPosition(java.text.Format$Field)" throws="">public FieldPosition(java.text.Format$Field)</declaration>
                <declaration visibility="public" signature="FieldPosition(java.text.Format$Field, int)" full-signature="java.text.FieldPosition.FieldPosition(java.text.Format$Field, int)" throws="">public FieldPosition(java.text.Format$Field, int)</declaration>
            </new-constructors>
            <new-methods>
                <declaration visibility="public" return-type="java.text.Format$Field" signature="getFieldAttribute()" full-signature="java.text.FieldPosition.getFieldAttribute()" throws="">public java.text.Format$Field getFieldAttribute()</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.text.Format</name>
            <new-methods>
                <declaration visibility="public" return-type="java.text.AttributedCharacterIterator" signature="formatToCharacterIterator(java.lang.Object)" full-signature="java.text.Format.formatToCharacterIterator(java.lang.Object)" throws="">public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.text.MessageFormat</name>
            <new-constructors>
                <declaration visibility="public" signature="MessageFormat(java.lang.String, java.util.Locale)" full-signature="java.text.MessageFormat.MessageFormat(java.lang.String, java.util.Locale)" throws="">public MessageFormat(java.lang.String, java.util.Locale)</declaration>
            </new-constructors>
            <new-methods>
                <declaration visibility="public" return-type="java.text.Format[]" signature="getFormatsByArgumentIndex()" full-signature="java.text.MessageFormat.getFormatsByArgumentIndex()" throws="">public java.text.Format[] getFormatsByArgumentIndex()</declaration>
                <declaration visibility="public" return-type="void" signature="setFormatByArgumentIndex(int, java.text.Format)" full-signature="java.text.MessageFormat.setFormatByArgumentIndex(int, java.text.Format)" throws="">public void setFormatByArgumentIndex(int, java.text.Format)</declaration>
                <declaration visibility="public" return-type="void" signature="setFormatsByArgumentIndex(java.text.Format[])" full-signature="java.text.MessageFormat.setFormatsByArgumentIndex(java.text.Format[])" throws="">public void setFormatsByArgumentIndex(java.text.Format[])</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.text.NumberFormat</name>
            <new-methods>
                <declaration visibility="public" return-type="java.util.Currency" signature="getCurrency()" full-signature="java.text.NumberFormat.getCurrency()" throws="">public java.util.Currency getCurrency()</declaration>
                <declaration visibility="public" static="yes" final="yes" return-type="java.text.NumberFormat" signature="getIntegerInstance()" full-signature="java.text.NumberFormat.getIntegerInstance()" throws="">public static final java.text.NumberFormat getIntegerInstance()</declaration>
                <declaration visibility="public" static="yes" return-type="java.text.NumberFormat" signature="getIntegerInstance(java.util.Locale)" full-signature="java.text.NumberFormat.getIntegerInstance(java.util.Locale)" throws="">public static java.text.NumberFormat getIntegerInstance(java.util.Locale)</declaration>
                <declaration visibility="public" return-type="void" signature="setCurrency(java.util.Currency)" full-signature="java.text.NumberFormat.setCurrency(java.util.Currency)" throws="">public void setCurrency(java.util.Currency)</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.util.ArrayList</name>
            <modified-declaration>
                <old-declaration visibility="public" super="yes" name="java.util.ArrayList" extends="java.util.AbstractList" implements="java.io.Serializable, java.lang.Cloneable, java.util.List">public class java.util.ArrayList extends java.util.AbstractList implements java.io.Serializable, java.lang.Cloneable, java.util.List</old-declaration>
                <new-declaration visibility="public" super="yes" name="java.util.ArrayList" extends="java.util.AbstractList" implements="java.io.Serializable, java.lang.Cloneable, java.util.List, java.util.RandomAccess">public class java.util.ArrayList extends java.util.AbstractList implements java.io.Serializable, java.lang.Cloneable, java.util.List, java.util.RandomAccess</new-declaration>
            </modified-declaration>
        </class>
        <class>
            <name>java.util.BitSet</name>
            <new-methods>
                <declaration visibility="public" return-type="int" signature="cardinality()" full-signature="java.util.BitSet.cardinality()" throws="">public int cardinality()</declaration>
                <declaration visibility="public" return-type="void" signature="clear()" full-signature="java.util.BitSet.clear()" throws="">public void clear()</declaration>
                <declaration visibility="public" return-type="void" signature="clear(int, int)" full-signature="java.util.BitSet.clear(int, int)" throws="">public void clear(int, int)</declaration>
                <declaration visibility="public" return-type="void" signature="flip(int)" full-signature="java.util.BitSet.flip(int)" throws="">public void flip(int)</declaration>
                <declaration visibility="public" return-type="void" signature="flip(int, int)" full-signature="java.util.BitSet.flip(int, int)" throws="">public void flip(int, int)</declaration>
                <declaration visibility="public" return-type="java.util.BitSet" signature="get(int, int)" full-signature="java.util.BitSet.get(int, int)" throws="">public java.util.BitSet get(int, int)</declaration>
                <declaration visibility="public" return-type="boolean" signature="intersects(java.util.BitSet)" full-signature="java.util.BitSet.intersects(java.util.BitSet)" throws="">public boolean intersects(java.util.BitSet)</declaration>
                <declaration visibility="public" return-type="boolean" signature="isEmpty()" full-signature="java.util.BitSet.isEmpty()" throws="">public boolean isEmpty()</declaration>
                <declaration visibility="public" return-type="int" signature="nextClearBit(int)" full-signature="java.util.BitSet.nextClearBit(int)" throws="">public int nextClearBit(int)</declaration>
                <declaration visibility="public" return-type="int" signature="nextSetBit(int)" full-signature="java.util.BitSet.nextSetBit(int)" throws="">public int nextSetBit(int)</declaration>
                <declaration visibility="public" return-type="void" signature="set(int, boolean)" full-signature="java.util.BitSet.set(int, boolean)" throws="">public void set(int, boolean)</declaration>
                <declaration visibility="public" return-type="void" signature="set(int, int)" full-signature="java.util.BitSet.set(int, int)" throws="">public void set(int, int)</declaration>
                <declaration visibility="public" return-type="void" signature="set(int, int, boolean)" full-signature="java.util.BitSet.set(int, int, boolean)" throws="">public void set(int, int, boolean)</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.util.Calendar</name>
            <modified-methods>
                <feature>
                    <name>java.util.Calendar.get(int)</name>
                    <modified-declaration>
                        <old-declaration visibility="public" final="yes" return-type="int" signature="get(int)" full-signature="java.util.Calendar.get(int)" throws="">public final int get(int)</old-declaration>
                        <new-declaration visibility="public" return-type="int" signature="get(int)" full-signature="java.util.Calendar.get(int)" throws="">public int get(int)</new-declaration>
                    </modified-declaration>
                </feature>
                <feature>
                    <name>java.util.Calendar.getTimeInMillis()</name>
                    <modified-declaration>
                        <old-declaration visibility="protected" return-type="long" signature="getTimeInMillis()" full-signature="java.util.Calendar.getTimeInMillis()" throws="">protected long getTimeInMillis()</old-declaration>
                        <new-declaration visibility="public" return-type="long" signature="getTimeInMillis()" full-signature="java.util.Calendar.getTimeInMillis()" throws="">public long getTimeInMillis()</new-declaration>
                    </modified-declaration>
                </feature>
                <feature>
                    <name>java.util.Calendar.set(int, int)</name>
                    <modified-declaration>
                        <old-declaration visibility="public" final="yes" return-type="void" signature="set(int, int)" full-signature="java.util.Calendar.set(int, int)" throws="">public final void set(int, int)</old-declaration>
                        <new-declaration visibility="public" return-type="void" signature="set(int, int)" full-signature="java.util.Calendar.set(int, int)" throws="">public void set(int, int)</new-declaration>
                    </modified-declaration>
                </feature>
                <feature>
                    <name>java.util.Calendar.setTimeInMillis(long)</name>
                    <modified-declaration>
                        <old-declaration visibility="protected" return-type="void" signature="setTimeInMillis(long)" full-signature="java.util.Calendar.setTimeInMillis(long)" throws="">protected void setTimeInMillis(long)</old-declaration>
                        <new-declaration visibility="public" return-type="void" signature="setTimeInMillis(long)" full-signature="java.util.Calendar.setTimeInMillis(long)" throws="">public void setTimeInMillis(long)</new-declaration>
                    </modified-declaration>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>java.util.Collections</name>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="int" signature="indexOfSubList(java.util.List, java.util.List)" full-signature="java.util.Collections.indexOfSubList(java.util.List, java.util.List)" throws="">public static int indexOfSubList(java.util.List, java.util.List)</declaration>
                <declaration visibility="public" static="yes" return-type="int" signature="lastIndexOfSubList(java.util.List, java.util.List)" full-signature="java.util.Collections.lastIndexOfSubList(java.util.List, java.util.List)" throws="">public static int lastIndexOfSubList(java.util.List, java.util.List)</declaration>
                <declaration visibility="public" static="yes" return-type="java.util.ArrayList" signature="list(java.util.Enumeration)" full-signature="java.util.Collections.list(java.util.Enumeration)" throws="">public static java.util.ArrayList list(java.util.Enumeration)</declaration>
                <declaration visibility="public" static="yes" return-type="boolean" signature="replaceAll(java.util.List, java.lang.Object, java.lang.Object)" full-signature="java.util.Collections.replaceAll(java.util.List, java.lang.Object, java.lang.Object)" throws="">public static boolean replaceAll(java.util.List, java.lang.Object, java.lang.Object)</declaration>
                <declaration visibility="public" static="yes" return-type="void" signature="rotate(java.util.List, int)" full-signature="java.util.Collections.rotate(java.util.List, int)" throws="">public static void rotate(java.util.List, int)</declaration>
                <declaration visibility="public" static="yes" return-type="void" signature="swap(java.util.List, int, int)" full-signature="java.util.Collections.swap(java.util.List, int, int)" throws="">public static void swap(java.util.List, int, int)</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.util.Locale</name>
            <new-constructors>
                <declaration visibility="public" signature="Locale(java.lang.String)" full-signature="java.util.Locale.Locale(java.lang.String)" throws="">public Locale(java.lang.String)</declaration>
            </new-constructors>
        </class>
        <class>
            <name>java.util.SimpleTimeZone</name>
            <removed-methods>
                <declaration visibility="public" return-type="int" signature="getDSTSavings()" full-signature="java.util.SimpleTimeZone.getDSTSavings()" throws="">public int getDSTSavings()</declaration>
            </removed-methods>
            <new-fields>
                <declaration visibility="public" static="yes" final="yes" type="int" name="STANDARD_TIME" signature="STANDARD_TIME" full-signature="java.util.SimpleTimeZone.STANDARD_TIME">public static final int STANDARD_TIME</declaration>
                <declaration visibility="public" static="yes" final="yes" type="int" name="UTC_TIME" signature="UTC_TIME" full-signature="java.util.SimpleTimeZone.UTC_TIME">public static final int UTC_TIME</declaration>
                <declaration visibility="public" static="yes" final="yes" type="int" name="WALL_TIME" signature="WALL_TIME" full-signature="java.util.SimpleTimeZone.WALL_TIME">public static final int WALL_TIME</declaration>
            </new-fields>
            <new-constructors>
                <declaration visibility="public" signature="SimpleTimeZone(int, java.lang.String, int, int, int, int, int, int, int, int, int, int, int)" full-signature="java.util.SimpleTimeZone.SimpleTimeZone(int, java.lang.String, int, int, int, int, int, int, int, int, int, int, int)" throws="">public SimpleTimeZone(int, java.lang.String, int, int, int, int, int, int, int, int, int, int, int)</declaration>
            </new-constructors>
        </class>
        <class>
            <name>java.util.TimeZone</name>
            <new-methods>
                <declaration visibility="public" return-type="int" signature="getDSTSavings()" full-signature="java.util.TimeZone.getDSTSavings()" throws="">public int getDSTSavings()</declaration>
                <declaration visibility="public" return-type="int" signature="getOffset(long)" full-signature="java.util.TimeZone.getOffset(long)" throws="">public int getOffset(long)</declaration>
            </new-methods>
        </class>
        <class>
            <name>java.util.Vector</name>
            <modified-declaration>
                <old-declaration visibility="public" super="yes" name="java.util.Vector" extends="java.util.AbstractList" implements="java.io.Serializable, java.lang.Cloneable, java.util.List">public class java.util.Vector extends java.util.AbstractList implements java.io.Serializable, java.lang.Cloneable, java.util.List</old-declaration>
                <new-declaration visibility="public" super="yes" name="java.util.Vector" extends="java.util.AbstractList" implements="java.io.Serializable, java.lang.Cloneable, java.util.List, java.util.RandomAccess">public class java.util.Vector extends java.util.AbstractList implements java.io.Serializable, java.lang.Cloneable, java.util.List, java.util.RandomAccess</new-declaration>
            </modified-declaration>
        </class>
    </modified-classes>
    <new-packages>
        <name>javax.microedition.pki</name>
        <name>javax.security.auth.x500</name>
    </new-packages>
    <new-interfaces>
        <name visibility="public" name="java.lang.CharSequence" interface="yes" extends="">java.lang.CharSequence</name>
        <name visibility="public" name="java.util.RandomAccess" interface="yes" extends="">java.util.RandomAccess</name>
        <name visibility="public" name="javax.microedition.io.CommConnection" interface="yes" extends="javax.microedition.io.StreamConnection">javax.microedition.io.CommConnection</name>
        <name visibility="public" name="javax.microedition.io.HttpsConnection" interface="yes" extends="javax.microedition.io.HttpConnection">javax.microedition.io.HttpsConnection</name>
        <name visibility="public" name="javax.microedition.io.SecureConnection" interface="yes" extends="javax.microedition.io.SocketConnection">javax.microedition.io.SecureConnection</name>
        <name visibility="public" name="javax.microedition.io.SecurityInfo" interface="yes" extends="">javax.microedition.io.SecurityInfo</name>
        <name visibility="public" name="javax.microedition.io.ServerSocketConnection" interface="yes" extends="javax.microedition.io.StreamConnectionNotifier">javax.microedition.io.ServerSocketConnection</name>
        <name visibility="public" name="javax.microedition.io.SocketConnection" interface="yes" extends="javax.microedition.io.StreamConnection">javax.microedition.io.SocketConnection</name>
        <name visibility="public" name="javax.microedition.io.UDPDatagramConnection" interface="yes" extends="javax.microedition.io.DatagramConnection">javax.microedition.io.UDPDatagramConnection</name>
    </new-interfaces>
    <new-classes>
        <name visibility="public" super="yes" name="java.lang.AssertionError" extends="java.lang.Error" implements="">java.lang.AssertionError</name>
        <name visibility="public" final="yes" super="yes" name="java.lang.StackTraceElement" extends="java.lang.Object" implements="java.io.Serializable">java.lang.StackTraceElement</name>
        <name visibility="public" super="yes" name="java.math.BigDecimal" extends="java.lang.Number" implements="java.lang.Comparable">java.math.BigDecimal</name>
        <name visibility="public" final="yes" super="yes" name="java.net.Inet4Address" extends="java.net.InetAddress" implements="">java.net.Inet4Address</name>
        <name visibility="public" final="yes" super="yes" name="java.net.Inet6Address" extends="java.net.InetAddress" implements="">java.net.Inet6Address</name>
        <name visibility="public" super="yes" name="java.net.InetSocketAddress" extends="java.net.SocketAddress" implements="">java.net.InetSocketAddress</name>
        <name visibility="public" final="yes" super="yes" name="java.net.NetworkInterface" extends="java.lang.Object" implements="">java.net.NetworkInterface</name>
        <name visibility="public" super="yes" name="java.net.PortUnreachableException" extends="java.net.SocketException" implements="">java.net.PortUnreachableException</name>
        <name visibility="public" super="yes" name="java.net.SocketAddress" abstract="yes" extends="java.lang.Object" implements="java.io.Serializable">java.net.SocketAddress</name>
        <name visibility="public" super="yes" name="java.net.SocketTimeoutException" extends="java.io.InterruptedIOException" implements="">java.net.SocketTimeoutException</name>
        <name visibility="public" final="yes" super="yes" name="java.net.URI" extends="java.lang.Object" implements="java.io.Serializable, java.lang.Comparable">java.net.URI</name>
        <name visibility="public" super="yes" name="java.net.URISyntaxException" extends="java.lang.Exception" implements="">java.net.URISyntaxException</name>
        <name visibility="public" super="yes" name="java.security.cert.CertPath" abstract="yes" extends="java.lang.Object" implements="java.io.Serializable">java.security.cert.CertPath</name>
        <name visibility="public" super="yes" name="java.security.cert.CertPath$CertPathRep" extends="java.lang.Object" implements="java.io.Serializable">java.security.cert.CertPath$CertPathRep</name>
        <name visibility="public" super="yes" name="java.security.spec.PSSParameterSpec" extends="java.lang.Object" implements="java.security.spec.AlgorithmParameterSpec">java.security.spec.PSSParameterSpec</name>
        <name visibility="public" super="yes" name="java.text.DateFormat$Field" extends="java.text.Format$Field" implements="">java.text.DateFormat$Field</name>
        <name visibility="public" super="yes" name="java.text.Format$Field" extends="java.text.AttributedCharacterIterator$Attribute" implements="">java.text.Format$Field</name>
        <name visibility="public" super="yes" name="java.text.MessageFormat$Field" extends="java.text.Format$Field" implements="">java.text.MessageFormat$Field</name>
        <name visibility="public" super="yes" name="java.text.NumberFormat$Field" extends="java.text.Format$Field" implements="">java.text.NumberFormat$Field</name>
        <name visibility="public" final="yes" super="yes" name="java.util.Currency" extends="java.lang.Object" implements="java.io.Serializable">java.util.Currency</name>
        <name visibility="public" super="yes" name="java.util.EventListenerProxy" abstract="yes" extends="java.lang.Object" implements="java.util.EventListener">java.util.EventListenerProxy</name>
        <name visibility="public" super="yes" name="java.util.IdentityHashMap" extends="java.util.AbstractMap" implements="java.io.Serializable, java.lang.Cloneable, java.util.Map">java.util.IdentityHashMap</name>
        <name visibility="public" super="yes" name="java.util.LinkedHashMap" extends="java.util.HashMap" implements="">java.util.LinkedHashMap</name>
        <name visibility="public" super="yes" name="java.util.LinkedHashSet" extends="java.util.HashSet" implements="java.io.Serializable, java.lang.Cloneable, java.util.Set">java.util.LinkedHashSet</name>
    </new-classes>
</differences>
