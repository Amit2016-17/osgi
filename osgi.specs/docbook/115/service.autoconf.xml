<?xml version="1.0" encoding="utf-8"?>
<chapter label="115"
         revision="$Id$"
         version="5" xml:id="service.autoconf"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Auto Configuration Specification</title>

  <info>
    <releaseinfo xml:id="service.autoconf-version">Version
    1.0</releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The purpose of the Auto Configuration specification is to allow the
    configuration of bundles. These bundles can be embedded in Deployment
    Packages or bundles that are already present on the OSGi Service Platform.
    This specification defines the format and processing rules of a Autoconf
    Resource Processor. Resource processors are defined in <phrase
    role="xref">Deployment Admin Specification on page 383</phrase>.</para>

    <para>An Auto Configuration Resource contains information to define
    <code>Configuration</code> objects for the <phrase
    role="xref">Configuration Admin Service Specification on page 79</phrase>.</para>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Autoconf Resource</emphasis> – One or more resources
          in a Deployment Package that are processed by the Autoconf
          Processor.</para>
        </listitem>

        <listitem>
          <para><emphasis>Deployment Package</emphasis> – A named and
          versioned file that groups resources into a single management unit.
          Deployment packages are the unit of deployment and uninstallation.
          Deployment packages can contain bundles and associated
          deployment-time resources that are processed by Resource
          Processors.</para>
        </listitem>

        <listitem>
          <para><emphasis>Resource Processor</emphasis> – A deployment-time
          customizer that accepts a resource in a Deployment Package and turns
          it into a number of artifacts. A resource processor is a service
          that implements the <code>ResourceProcessor</code> interface.</para>
        </listitem>

        <listitem>
          <para><emphasis>Autoconf Resource Processor</emphasis> – The
          Resource Processor that processes the autoconf resources in a
          Deployment Package.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Autoconf Context Diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.896in"
                       contentwidth="4.975in" fileref="autoconf-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Synopsis</title>

      <para>A Deployment Package can contain one or more Autoconf resources.
      The Manifest of the Deployment Package connects this resource to the
      Autoconf Resource Processor. When the Deployment Package is deployed,
      the Autoconf Resource Processor reads the information from the Autoconf
      resources and creates <code>Configuration</code> objects: both Managed
      Service as well as Managed Service Factory <code>Configuration</code>
      objects.</para>

      <para>When the Deployment Package is updated or uninstalled, the
      Autoconf Resource Processor must delete the appropriate Configuration
      objects.</para>
    </section>
  </section>

  <section>
    <title>Configuration Data</title>

    <para>Bundles usually require configuration data when they are deployed.
    For example, a bundle that has to contact a central server needs one or
    more server URLs. In practice, a complete application can consist
    of:</para>

    <itemizedlist>
      <listitem>
        <para>A number of bundles</para>
      </listitem>

      <listitem>
        <para>Their configuration data</para>
      </listitem>

      <listitem>
        <para>Other required resources</para>
      </listitem>
    </itemizedlist>

    <para>The Deployment Package allows such an application to be installed,
    updated, and uninstalled in a single operation. This specification extends
    the Deployment Package with a facility to create
    <code>Configuration</code> objects. The extension uses the Resource
    Processor mechanism to read one or more resources from the Deployment
    Package and create <code>Configuration</code> objects based on these
    resources.</para>

    <para>For example, a Deployment Package contains a single bundle
    <code>Chat</code>. This bundle, when started, registers a Managed Service
    with a PID of <code>com.acme.pid.Chat</code>. The expected Configuration
    Dictionary contains a single property: <code>serverurl</code>.</para>

    <para>The schema explanation for an Autoconf resource can be found in
    <phrase role="xref">Metatype Service Specification on page 129</phrase>.
    An Autoconf resource could look like:</para>

    <programlisting>&lt;xml version="1.0" encoding="UTF-8"&gt;
&lt;metatype:MetaData 
    xmlns:metatype=
        "http://www.osgi.org/xmlns/metatype/v1.1.0"&gt;

  &lt;OCD id="ChatConfiguration"&gt;
    &lt;AD id="server" type="String"&gt;
  &lt;/OCD&gt;

  &lt;Designate pid="com.acme.pid.Chat" 
        bundle="http://www.acme.com/chat.jar&gt;
    &lt;Object ocdref="ChatConfiguration"&gt;
        &lt;Attribute adref="server" name="serverurl" 
            content="http://chat.acme.com"/&gt;
    &lt;/Object&gt;
 &lt;/Designate&gt;

&lt;/metatype:MetaData&gt;</programlisting>

    <para>The <code>OCD</code> element (an abbreviation of Object Class
    Definition) defines the type of the Configuration Dictionary. This typing
    is based on the <phrase role="xref">Metatype Service Specification on
    page 129</phrase>. The <code>Designate</code> element links the
    configuration data to a PID. This PID is the PID for the configuration
    object. The content is defined in an <code>Object</code> element. An
    <code>Object</code> element links to an <code>OCD</code> element and
    defines the values of the attributes in <code>Attribute</code>
    elements.</para>

    <para>The Autoconf Resource Processor in the example is instructed by this
    resource to create a Managed Service Configuration object with a
    Dictionary object that contains
    <code>serverurl="http://chat.acme.com"</code>.</para>

    <para>An Autoconf resource can configure Managed Service configurations,
    as long as the bundle is contained in the same Deployment Package. For
    bundles that are not contained in the Deployment Package, a.k.a.
    <emphasis>foreign bundles</emphasis>, only Managed Service Factory
    configurations can be created. Configuring foreign bundles with a Managed
    Service configuration could create ownership conflicts and is therefore
    explicitly not allowed.</para>

    <para>The Autoconf Resource Processor must be able to handle
    installations, updates, and uninstallations of Deployment Packages.</para>
  </section>

  <section>
    <title>Processing</title>

    <para>The Autoconf Resource Processor must register itself with the
    following PID to become available to the Deployment Admin service:</para>

    <programlisting>org.osgi.deployment.rp.autoconf</programlisting>

    <para>The Autoconf Resource Processor must process each
    <code>Designate</code> element in order of appearance. This element has
    the following information:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>pid</emphasis> – The PID of the Configuration object.
        If the Configuration object is a factory configuration, the PID is
        actually an alias of the actual PID because a factory configuration
        PID is generated.</para>
      </listitem>

      <listitem>
        <para><emphasis>factoryPid</emphasis> – (<code>String</code>) Defines
        a factory PID when this Designate is a <emphasis>factory
        configuration</emphasis>; otherwise it is for a <emphasis>singleton
        configuration</emphasis>.</para>
      </listitem>

      <listitem>
        <para><emphasis>bundle</emphasis> – The location of the bundle. It
        must be used to set the location of the <code>Configuration</code>
        object. This attribute is mandatory for autoconf though it is not
        mandatory for the schema because other applications might not need a
        bundle location.</para>
      </listitem>

      <listitem>
        <para><emphasis>merge</emphasis> – (<code>true|false</code>) Indicates
        that the value of the contained Object definition replaces
        (<code>merge=false</code>) the configuration data, or only replaces
        properties (<code>merge=true</code>) that do not exist in the
        configuration data.</para>
      </listitem>

      <listitem>
        <para><emphasis>optional</emphasis> – (<code>true|false</code>) If
        <code>true</code>, then this Designate element is optional, and errors
        during processing must be ignored. Otherwise, errors during processing
        must abort the installation of the Deployment Package. This requires
        the undoing of any work done so far.</para>
      </listitem>
    </itemizedlist>

    <para>The content of a <code>Designate</code> element is an
    <code>Object</code> element. This element contains the value for the
    configuration Dictionary.</para>

    <para>If the Designate element was marked <code>optional</code>, then any
    errors during these steps can be ignored and the next Designate element
    must be processed.</para>

    <para>A factory configuration is processed differently from a singleton
    configuration. These two different processing methods are discussed in the
    following sections.</para>

    <section>
      <title>Factory Configurations</title>

      <para>Factory configurations can be created and deleted any number of
      times. This concept of multiplicity makes it straightforward to
      associate factory configurations with a Deployment Package. Each
      Deployment Package can create its unique configurations that are
      independent of any other Deployment Packages. When the Deployment
      Package is uninstalled, the created configurations can be deleted
      without any concern for sharing.</para>

      <para>A factory configuration is defined in a <code>Designate</code>
      element. The <code>factoryPid</code> must be set to the PID of the
      related Managed Service Factory service. For example:</para>

      <programlisting> &lt;Designate pid=<emphasis role="strong">"a"</emphasis> factoryPid=<emphasis
          role="strong">"com.acme.a"</emphasis>
                bundle="osgi-dp:com.acme.A"&gt;
    &lt;Object ocdref="a"&gt;
        &lt;Attribute adref="foo" content="Zaphod Beeblebrox"/&gt;
    &lt;/Object&gt;
 &lt;/Designate&gt;</programlisting>

      <para>The Autoconf resource cannot use the actual PID of the
      <code>Configuration</code> object because the Configuration Admin
      service automatically generates the PID of factory configurations. This
      created PID is called the <emphasis>actual</emphasis> PID.</para>

      <para>The Autoconf resource author cannot know the actual PID ahead of
      time. The Autoconf resource must therefore specify a
      <emphasis>alias</emphasis>. The alias does not have to be globally
      unique; it must only be unique for a specific Autoconf resource. The
      Autoconf Processor must maintain the following association (per Autoconf
      resource):</para>

      <programlisting> alias <phrase role="symbol">→</phrase> actual PID</programlisting>

      <para>The alias can be viewed as an Autoconf resource local name for the
      factory configuration PID. The actual PID is generated when the Autoconf
      processor creates a new factory configuration. This mapping is identical
      to the mapping defined for the Configuration Admin Plugin.</para>

      <para>The alias <phrase role="symbol">→</phrase> actual PID association must be used
      by the Autoconf Processor to decide what life cycle operation to
      execute.</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Alias</emphasis> <phrase role="symbol">→</phrase>
          <phrase role="symbol">∅</phrase> – This installation is a first-time installation
          of the factory configuration. The Autoconf resource specifies a
          factory configuration that was not part of a previous installation.
          The Autoconf Processor must therefore create a new factory
          configuration, set the configuration dictionary to the values in the
          <code>Object</code> element (see <xref
          linkend="i1547805" xrefstyle="seeHeadingPage"/> ), and
          create the Alias <phrase role="symbol">→</phrase> Actual association.</para>
        </listitem>

        <listitem>
          <para><emphasis>Alias</emphasis> <phrase role="symbol">→</phrase>
          <emphasis>Actual</emphasis> – The factory configuration already
          exists from a previous Autoconf resource installation. The Autoconf
          Processor must merge or override (depending on the
          <code>merge</code> attribute) the Configuration object designated by
          the actual PID with the values in the <code>Object</code> element
          (see <xref linkend="i1547805"
          xrefstyle="seeHeadingPage"/> ).</para>
        </listitem>

        <listitem>
          <para><phrase role="symbol">∅</phrase> <phrase role="symbol">→</phrase>
          <emphasis>Actual</emphasis> – The Autoconf resource no longer
          contains an alias that it previously contained. The configuration
          identified by the actual PID must be deleted.</para>
        </listitem>
      </itemizedlist>

      <para>Uninstalling an Autoconf resource requires that the Autoconf
      Resource Processor deletes all <code>Configuration</code> objects
      associated with the resource.</para>
    </section>

    <section>
      <title>Singleton Configuration</title>

      <para>A singleton configuration is associated with a Managed Service.
      The Autoconf Resource Processor must only use singleton configurations
      for bundles that are contained in the same Deployment Package as the
      Autoconf resource. The target Deployment Package can provide a list of
      these bundles.</para>

      <para>This ownership policy is required to prevent sharing conflicts.
      For this reason, the <code>bundle</code> attribute in the
      <code>Designate</code> element must be set to the location of the bundle
      so that this ownership is enforced by the Configuration Admin service.
      The location of the bundle is defined by the Bundle Symbolic Name of the
      given bundle prefixed with <code>osgi-dp:</code>.</para>

      <para>The processing must abort with a fatal error if the
      <code>bundle</code> attribute is not set. The Autoconf Resource
      processor must bind the singleton configuration to the given
      bundle.</para>

      <para>If a singleton configuration with a given PID already exists, it
      must be unbound or bound to the same location contained by the
      <code>bundle</code> attribute. Otherwise the processing must
      abort.</para>

      <para>The singleton configuration must be merged with or replaced by the
      information in the <code>Object</code> element, depending on the
      <code>merge</code> attribute as described in <xref
      linkend="i1547805" xrefstyle="seeHeadingPage"/>.</para>
    </section>

    <section>
      <title>Example</title>

      <para>For example, bundle <code>A</code> uses a factory configuration
      with the factory PID <code>com.acme.a</code> and bundle <code>B</code>
      uses a singleton configuration with PID <code>com.acme.b</code>. They
      define the following configuration properties:</para>

      <programlisting>com.acme.a:
gear            Integer
ratio           Vector of Float

com.acme.b:
foo             String
bar             Short[]</programlisting>

      <para>For proper operation, a Deployment Package <code>P</code> needs a
      configuration for <code>com.acme.a</code> and <code>com.acme.b</code>
      with the following values:</para>

      <programlisting>    gear        = 3
    ratio       = {3.14159,  1.41421356, 6.022E23}
    foo         = "Zaphod Beeblebrox"
    bar         = {1,2,3,4,5}</programlisting>

      <para>The corresponding autoconf.xml resource associated with Deployment
      Package <code>P</code> would look like:</para>

      <programlisting>&lt;xml version="1.0" encoding="UTF-8"&gt;
&lt;metatype:MetaData 
    xmlns:metatype=
        "http://www.osgi.org/xmlns/metatype/v1.1.0"&gt;

  &lt;OCD id="a"&gt;
    &lt;AD id="gear"  type="Integer" cardinality="0" /&gt;
    &lt;AD id="ratio" type="Float" cardinality="-3" /&gt;
  &lt;/OCD&gt;

  &lt;OCD id="b"&gt;
    &lt;AD id="foo"   type="String" cardinality="0"/&gt;
    &lt;AD id="bar"   type="Short" cardinality="5"/&gt;
  &lt;/OCD&gt;

  &lt;Designate pid="x" factoryPid="com.acme.a" 
        bundle="osgi-dp:com.acme.a"&gt;
    &lt;Object ocdref="a"&gt;
        &lt;Attribute adref="gear" content="3" /&gt;
        &lt;Attribute adref="ratio"&gt;
            &lt;Value&gt;3.14159&lt;/Value&gt;
            &lt;Value&gt;1.41421356"&lt;/Value&gt;
            &lt;Value&gt;6.022E23"&lt;/Value&gt;
        &lt;/Attribute&gt;
    &lt;/Object&gt;
  &lt;/Designate&gt;

  &lt;Designate pid="com.acme.b"        
        bundle="osgi-dp:com.acme.B"&gt;
    &lt;Object ocdref="b"&gt;
        &lt;Attribute adref="foo" content="Zaphod Beeblebrox"/&gt;
        &lt;Attribute adref="bar"&gt;
            &lt;Value&gt;1&lt;/Value&gt;
            &lt;Value&gt;2&lt;/Value&gt;
            &lt;Value&gt;3&lt;/Value&gt;
            &lt;Value&gt;4&lt;/Value&gt;
            &lt;Value&gt;5&lt;/Value&gt;
        &lt;/Attribute&gt;
    &lt;/Object&gt;
  &lt;/Designate&gt;
&lt;/metatype:MetaData&gt;</programlisting>
    </section>

    <section xml:id="i1547805">
      <title>Assigning a Value</title>

      <para>The Autoconf resources share a scheme and can cooperate with the
      <phrase role="xref">Metatype Service Specification on page 129</phrase>. An Autoconf resource primarily contains a number of values for
      configuration objects in the <code>Designate</code> elements.
      <code>Designate</code> elements:</para>

      <itemizedlist>
        <listitem>
          <para>Are for a factory or singleton configuration
          (<code>factoryPid</code> attribute)</para>
        </listitem>

        <listitem>
          <para>Are bound to a bundle location (<code>bundle</code>
          attribute)</para>
        </listitem>

        <listitem>
          <para>Are meant to be merged with an existing value or replace an
          existing value (<code>merge</code> attribute). Merging means only
          setting the values for which the existing <code>Configuration</code>
          object has no value.</para>
        </listitem>

        <listitem>
          <para>Provide a value for the <code>Configuration</code> object with
          the <code>Object</code> element.</para>
        </listitem>
      </itemizedlist>

      <para><code>Designate</code> elements contain an <code>Object</code>
      element that contains the actual value. <code>Object</code> elements
      refer to an <code>OCD</code> element by name. The <code>OCD</code>
      elements act as a descriptor of the properties.</para>

      <para>The <code>OCD</code> elements that are referred from an
      <code>Object</code> element can be contained in the Autoconf resource,
      or they can come from the Meta Type service. The reference takes place
      through the <code>ocdref</code> attribute of the Object element. The
      Autoconf Resource Processor must first match this name to any OCD
      elements in the Autoconf resources. If the reference cannot be found in
      this file, it must consult the Meta Type service (if present) for the
      bundle that is associated with the PID that is configured.</para>
    </section>

    <section>
      <title>Process Ordering</title>

      <para>The Autoconf Processor must create any factory and singleton
      configurations when it is called with an Autoconf resource. This phase
      should perform as much validation as possible. The configurations must
      be created in the order of appearance in the Autoconf resource.</para>

      <para>In the commit method, the Autoconf Resource Processor must first
      delete all <code>Configuration</code> objects that were uninstalled.
      Thereafter, it must set or update the appropriate
      <code>Configuration</code> objects.</para>

      <para>This ordering implies that a customizer bundle cannot receive
      configuration parameters from an Autoconf resource.</para>
    </section>
  </section>

  <section>
    <title>Security Considerations</title>

    <para>Allowing a deployment package's Autoconf resources to (re)configure
    arbitrary configurations creates security threats. The possible threats
    are discussed in the following sections.</para>

    <section>
      <title>Location Binding</title>

      <para>As described in <phrase role="xref">Configuration Admin Service
      Specification on page 79</phrase>, it is possible for a malicious
      bundle to register a Managed Service under a PID used by another
      (legitimate) bundle. This activity essentially
      <emphasis>hijacks</emphasis> the Managed Service PID, and constitutes a
      denial of service attack on the legitimate bundle (as it never receives
      the configuration information it needs). The Configuration Admin
      specification describes a location binding technique that can be used to
      prevent this attack. The Autoconf Resource Processor must bind
      <code>Configuration</code> objects to locations specified in the
      Autoconf resources using the mandatory <code>bundle</code>
      attribute.</para>
    </section>

    <section>
      <title>Autoconf Resource Permissions</title>

      <para>The capabilities of an Autoconf Resource Processor must be limited
      to the permissions that are granted to the signer of a Deployment
      Package. This is the specified way for the Deployment Admin service to
      act. The Autoconf Resource Processor does not have to take any special
      actions; all its actions are automatically scoped by the signer of the
      Deployment Package.</para>

      <para>This restriction implies, however, that the Autoconf Resource
      Processor must do a <code>doPrivileged</code> method for any actions
      that should not be scoped: for example, when it persists the
      associations of the alias <phrase role="symbol">→</phrase> actual PID.</para>

      <para>A Deployment Package that requires any activity from the Autoconf
      Resource processor must at least provide
      <code>ConfigurationPermission[*,CONFIGURE]</code>.</para>
    </section>
  </section>
</chapter>
