<?xml version="1.0" encoding="utf-8"?><chapter xmlns="http://docbook.org/ns/docbook" version="5" xml:id="i1451986"><title>
XML Parser
Service Specification</title>
<info xml:id="i1367780"><releaseinfo>
Version
1.0</releaseinfo></info>
<section><title>Introduction</title>
<para>The Extensible Markup Language (XML) has become a popular
method of describing data. As more bundles use XML to describe their
data, a common XML Parser becomes necessary in an embedded environment
in order to reduce the need for space. Not all XML Parsers are equivalent
in function, however, and not all bundles have the same requirements
on an XML parser.</para>
<para>This problem was addressed in the Java API for XML Processing,
see 
<phrase role="xref">
<xref xrefstyle="Reference" linkend="i1255594"/></phrase>
 for Java 2 Standard Edition and Enterprise Edition. This specification
addresses how the classes defined in JAXP can be used in an OSGi
framework. It defines how:</para>
<itemizedlist><listitem><para>Implementations of XML parsers can
become available to other bundles</para></listitem>
<listitem><para>Bundles can find a suitable parser</para></listitem>
<listitem><para>A standard parser in a JAR can be transformed to
a bundle</para></listitem></itemizedlist>
<section><title>Essentials</title>
<itemizedlist><listitem><para><emphasis>Standards</emphasis> – Leverage
existing standards in Java based XML parsing: JAXP, SAX and DOM</para></listitem>
<listitem><para><emphasis>Unmodified JAXP code</emphasis> – Run
unmodified JAXP code</para></listitem>
<listitem><para><emphasis>Simple</emphasis> – It should be easy
to provide a SAX or DOM parser as well as easy to find a matching
parser</para></listitem>
<listitem><para><emphasis>Multiple</emphasis> – It should be possible
to have multiple implementations of parsers available</para></listitem>
<listitem><para><emphasis>Extendable</emphasis> – It is likely that
parsers will be extended in the future with more functionality</para></listitem></itemizedlist></section>
<section><title>Entities</title>
<itemizedlist><listitem><para><emphasis>XMLParserActivator</emphasis> –
A utility class that registers a parser factory from declarative
information in the Manifest file.</para></listitem>
<listitem><para><emphasis>SAXParserFactory</emphasis> – A class
that can create an instance of a <code>SAXParser</code> class.</para></listitem>
<listitem><para><emphasis>DocumentBuilderFactory</emphasis> – A
class that can create an instance of a <code>DocumentBuilder</code> class.</para></listitem>
<listitem><para><emphasis>SAXParser</emphasis> – A parser, instantiated
by a <code>SaxParserFactory</code> object, that parses according
to the SAX specifications.</para></listitem>
<listitem><para><emphasis>DocumentBuilder</emphasis> – A parser,
instantiated by a <code>DocumentBuilderFactory</code>, that parses
according to the DOM specifications.</para></listitem></itemizedlist>
<figure><title>XML Parsing diagram</title><mediaobject><imageobject><imagedata fileref="GRAPHIC1" align="center" contentwidth="4.958in" contentdepth="3.442in"/></imageobject></mediaobject></figure></section>
<section><title>Operations</title>
<para role="ExternalReferenceCont"><phrase role="body">A bundle
containing a SAX or DOM parser is started. This bundle registers
a </phrase>
<code>SAXParserFactory</code>
<phrase role="body"> and/or a </phrase>
<code>DocumentBuilderFactory</code>
<phrase role="body"> service object with the Framework. Service
registration properties describe the features of the parsers to
other bundles. A bundle that needs an XML parser will get a </phrase>
<code>SAXParserFactory</code>
<phrase role="body"> or </phrase>
<code>DocumentBuilderFactory</code>
<phrase role="body"> service object from the Framework service
registry. This object is then used to instantiate the requested
parsers according to their specifications.</phrase></para></section></section>
<section><title>JAXP</title>
<para>XML has become very popular in the last few years because
it allows the interchange of complex information between different
parties. Though only a single XML standard exists, there are multiple APIs
to XML parsers, primarily of two types: </para>
<itemizedlist><listitem><para>The Simple API for XML (SAX1 and SAX2)</para></listitem>
<listitem><para>Based on the Document Object Model (DOM 1 and 2)</para></listitem></itemizedlist>
<para>Both standards, however, define an abstract API that can be
implemented by different vendors.</para>
<para>A given XML Parser implementation may support either or both
of these parser types by implementing the <code>org.w3c.dom</code> and/or 
<code>org.xml.sax</code> packages. In addition, parsers have characteristics
such as whether they are validating or non-validating parsers and
whether or not they are name-space aware.</para>
<para>An application which uses a specific XML Parser must code
to that specific parser and become coupled to that specific implementation.
If the parser has implemented 
<phrase role="xref">
<xref xrefstyle="Reference" linkend="i1255594"/></phrase>
, however, the application developer can code against SAX or DOM
and let the runtime environment decide which parser implementation
is used.</para>
<para>JAXP uses the concept of a <emphasis>factory</emphasis>. A
factory object is an object that abstracts the creation of another object.
JAXP defines a <code>DocumentBuilderFactory</code> and a <code>SAXParserFactory</code> class
for this purpose. </para>
<para>JAXP is implemented in the <code>javax.xml.parsers</code> package
and provides an abstraction layer between an application and a specific
XML Parser implementation. Using JAXP, applications can choose to
use any JAXP compliant parser without changing any code, simply
by changing a System property which specifies the SAX- and DOM factory
class names. </para>
<para>In JAXP, the default factory is obtained with a static method
in the <code>SAXParserFactory</code> or <code>DocumentBuilderFactory</code> class
<code>.</code> This method will inspect the associated System property
and create a new instance of that class.</para></section>
<section><title>XML Parser service</title>
<para>The current specification of JAXP has the limitation that
only one of each type of parser factories can be registered. This
specification specifies how multiple <code>SAXParserFactory</code> objects
and <code>DocumentBuilderFactory</code> objects can be made available
to bundles simultaneously. </para>
<para>Providers of parsers should register a JAXP factory object
with the OSGi service registry under the factory class name. Service
properties are used to describe whether the parser:</para>
<itemizedlist><listitem><para>Is validating</para></listitem>
<listitem><para>Is name-space aware</para></listitem>
<listitem><para>Has additional features</para></listitem></itemizedlist>
<para>With this functionality, bundles can query the OSGi service
registry for parsers supporting the specific functionality that
they require.</para></section>
<section xml:id="i1259424"><title>
Properties</title>
<para>Parsers must be registered with a number of properties that
qualify the service. In this specification, the following properties
are specified:</para>
<itemizedlist><listitem><para><phrase role="xref">PARSER_NAMESPACEAWARE</phrase>
 – The registered parser is aware of name-spaces. Name-spaces allow
an XML document to consist of independently developed DTDs. In an
XML document, they are recognized by the <code>xmlns</code> attribute
and names prefixed with an abbreviated name-space identifier, like: 
<code>&lt;xsl:if ...&gt;</code>. The type is a <code>Boolean</code> object that
must be <code>true</code> when the parser supports name-spaces.
All other values, or the absence of the property, indicate that
the parser does not implement name-spaces.</para></listitem>
<listitem><para><phrase role="xref">PARSER_VALIDATING</phrase>
 – The registered parser can read the DTD and can validate the XML
accordingly. The type is a <code>Boolean</code> object that must <code>true</code> when
the parser is validating. All other values, or the absence of the
property, indicate that the parser does not validate.</para></listitem></itemizedlist></section>
<section><title>Getting a Parser Factory</title>
<para>Getting a parser factory requires a bundle to get the appropriate
factory from the service registry. In a simple case in which a non-validating,
non-name-space aware parser would suffice, it is best to use <code>getServiceReference(String)</code>.</para>
<programlisting>DocumentBuilder getParser(BundleContext context) 
	throws Exception {
	ServiceReference ref = context.getServiceReference(
		DocumentBuilderFactory.class.getName() );
	if ( ref == null )
		return null;
	DocumentBuilderFactory factory = 
		(DocumentBuilderFactory) context.getService(ref);
	return factory.newDocumentBuilder();
}</programlisting>
<para>In a more demanding case, the filtered version allows the
bundle to select a parser that is validating and name-space aware:</para>
<programlisting>SAXParser getParser(BundleContext context) 
	throws Exception {
	ServiceReference refs[] = context.getServiceReferences(
		SAXParserFactory.class.getName(),
			"(&amp;(parser.namespaceAware=true)"
		+	"(parser.validating=true))" );
	if ( refs == null )
		return null;
	SAXParserFactory factory = 
		(SAXParserFactory) context.getService(refs[O]);
	return factory.newSAXParser();
}</programlisting></section>
<section><title>Adapting a JAXP Parser to OSGi</title>
<para>If an XML Parser supports JAXP, then it can be converted to
an OSGi aware bundle by adding a <code>BundleActivator</code> class
which registers an XML Parser Service. The utility <code>org.osgi.util.xml.XMLParserActivator</code> class provides
this function and can be added (copied, not referenced) to any XML
Parser bundle, or it can be extended and customized if desired. </para>
<section><title>JAR Based Services</title>
<para>Its functionality is based on the definition of the 
<phrase role="xref">
<xref xrefstyle="Reference" linkend="i1267674"/></phrase>
. This specification defines a concept for service providers. A
JAR file can contain an implementation of an abstractly defined
service. The class (or classes) implementing the service are designated
from a file in the <code>META-INF/services</code> directory. The
name of this file is the same as the abstract service class. </para>
<para>The content of the UTF-8 encoded file is a list of class names
separated by new lines. White space is ignored and the number sign
(<code>’#’ or \u0023</code>) is the comment character.</para>
<para>JAXP uses this service provider mechanism. It is therefore
likely that vendors will place these service files in the <code>META-INF/services</code> directory. </para></section>
<section><title>XMLParserActivator</title>
<para>To support this mechanism, the XML Parser service provides
a utility class that should be normally delivered with the OSGi
framework implementation. This class is a Bundle Activator and must
start when the bundle is started. This class is copied into the
parser bundle, and <emphasis>not</emphasis> imported.</para>
<para>The <code>start</code> method of the utility <code>BundleActivator</code> class
will look in the <code>META-INF/services</code> service provider
directory for the files <code>javax.xml.parsers.SAXParserFactory
(</code>
<phrase role="xref">SAXFACTORYNAME</phrase>
) or <code>javax.xml.parsers.DocumentBuilderFactory (</code>
<phrase role="xref">DOMFACTORYNAME</phrase>
)<code>. </code>The full path name is specified in the constants 
<phrase role="xref">SAXCLASSFILE</phrase>
 and 
<phrase role="xref">DOMCLASSFILE</phrase>
 respectively.</para>
<para>If either of these files exist, the utility <code>BundleActivator</code> class
will parse the contents according to the specification. A service
provider file can contain multiple class names. Each name is read
and a new instance is created. The following example shows the possible
content of such a file:</para>
<programlisting># ACME example SAXParserFactory file
com.acme.saxparser.SAXParserFast															# Fast
com.acme.saxparser.SAXParserValidating															# Validates</programlisting>
<para>Both the <code>javax.xml.parsers.SAXParserFactory</code> and
the <code>javax.xml.parsers.DocumentBuilderFactory</code> provide
methods that describe the features of the parsers they can create.
The <code>XMLParserActivator</code> activator will use these methods
to set the values of the properties, as defined in 
<phrase role="xref">
<xref xrefstyle="seeHeadingPage" linkend="i1259424"/></phrase>
, that describe the instances.</para></section>
<section><title>Adapting an Existing JAXP Compatible Parser</title>
<para> To incorporate this bundle activator into a XML Parser Bundle,
do the following:</para>
<itemizedlist><listitem><para>If SAX parsing is supported, create
a <code>/META-INF/services/javax.xml.parsers.SAXParserFactory</code> resource
file containing the class names of the <code>SAXParserFactory</code> classes.</para></listitem>
<listitem><para>If DOM parsing is supported, create a <code>/META-INF/services/javax.xml.parsers.DocumentBuilderFactory</code> file
containing the fully qualified class names of the <code>DocumentBuilderFactory</code> classes.</para></listitem>
<listitem><para>Create manifest file which imports the packages <code>org.w3c.dom</code>, 
<code>org.xml.sax</code>, and <code>javax.xml.parsers</code>.</para></listitem>
<listitem><para>Add a Bundle-Activator header to the manifest pointing
to the <code>XMLParserActivator</code>, the sub-class that was created,
or a fully custom one.</para></listitem>
<listitem><para>If the parsers support attributes, properties, or
features that should be registered as properties so they can be
searched, extend the <code>XMLParserActivator</code> class and override 
<phrase role="xref">setSAXProperties(javax.xml.parsers.SAXParserFactory,Hashtable)</phrase>
 and 
<phrase role="xref">setDOMProperties(javax.xml.parsers.DocumentBuilderFactory,Hashtable)</phrase>
.</para></listitem>
<listitem><para>Ensure that custom properties are put into the <code>Hashtable</code> object.
JAXP does not provide a way for <code>XMLParserActivator</code> to
query the parser to find out what properties were added. </para></listitem>
<listitem><para>Bundles that extend the <code>XMLParserActivator</code> class
must call the original methods via super to correctly initialize
the XML Parser Service properties.</para></listitem>
<listitem><para>Compile this class into the bundle.</para></listitem>
<listitem><para>Install the new XML Parser Service bundle.</para></listitem>
<listitem><para>Ensure that the <code>org.osgi.util.xml.XMLParserActivator</code> class
is contained in the bundle.</para></listitem></itemizedlist></section></section>
<section><title>Usage of JAXP</title>
<para>A single bundle should export the JAXP, SAX, and DOM APIs.
The version of contained packages must be appropriately labeled.
JAXP 1.1 or later is required which references SAX 2 and DOM 2.
See 
<phrase role="xref">
<xref xrefstyle="Reference" linkend="i1255594"/></phrase>
 for the exact version dependencies.</para>
<para>This specification is related to related packages as defined
in the JAXP 1.1 document.</para><table><title>JAXP 1.1 minimum package versions
</title><tgroup cols="2"><thead><row><entry>Package</entry><entry>Minimum Version</entry></row></thead><tbody><row><entry><para>javax.xml.parsers</para></entry><entry><para>1.1</para></entry></row><row><entry><para>org.xml.sax</para></entry><entry><para>2.0</para></entry></row><row><entry><para>org.xml.sax.helpers</para></entry><entry><para>2.0</para></entry></row><row><entry><para>org.xsml.sax.ext</para></entry><entry><para>1.0</para></entry></row><row><entry><para>org.w3c.dom</para></entry><entry><para>2.0</para></entry></row></tbody></tgroup></table>
<para> 
<phrase role="xref">Table 702.1</phrase>
 contains the expected minimum versions.</para>
<para>The Xerces project from the Apache group, 
<phrase role="xref">
<xref xrefstyle="Reference" linkend="i1286146"/></phrase>
, contains a number libraries that implement the necessary APIs.
These libraries can be wrapped in a bundle to provide the relevant
packages.</para></section>
<section><title>Security</title>
<para>A centralized XML parser is likely to see sensitive information
from other bundles. Provisioning an XML parser should therefore
be limited to trusted bundles. This security can be achieved by
providing <code>ServicePermission[javax.xml.parsers.DocumentBuilderFactory</code> | 
<code>javax.xml.parsers.SAXFactory,REGISTER]</code> to only trusted bundles.</para>
<para>Using an XML parser is a common function, and <code>ServicePermission[javax.xml.parsers.DOMParserFactory</code> | 
<code>javax.xml.parsers.SAXFactory, GET]</code> should not be restricted.</para>
<para>The XML parser bundle will need <code>FilePermission[&lt;&lt;ALL
FILES&gt;&gt;,READ]</code> for parsing of files because it is not known
beforehand where those files will be located. This requirement further
implies that the XML parser is a system bundle that must be fully
trusted.</para></section>
<INSET xml:id="i1453375">org.osgi.util.xml<?FM MARKER [Cross-Ref] org.osgi.util.xml?>
<?FM MARKER [Index] org.osgi.util.xml?>
<?FM MARKER [Cross-Ref] package:org.osgi.util.xml?>

XML Parser Package Version 1.0.  
Bundles wishing to use this package must list the package in the
Import-Package header of the bundle’s manifest. 
Example import for consumers using the API in this package: 
Import-Package: org.osgi.util.xml; version=”[1.0,2.0)”
<?FM MARKER [Cross-Ref] XMLParserActivator?>
<?FM MARKER [Index] XMLParserActivator?>
<?FM MARKER [Index] class:XMLParserActivator?>
XMLParserActivator
public class XMLParserActivator
	implements BundleActivator , ServiceFactory
A BundleActivator class that allows any JAXP compliant XML Parser
to register itself as an OSGi parser service. Multiple JAXP compliant
parsers can concurrently register by using this BundleActivator
class. Bundles who wish to use an XML parser can then use the framework’s
service registry to locate available XML Parsers with the desired
characteristics such as validating and namespace-aware.  
The services that this bundle activator enables a bundle to provide
are: 
javax.xml.parsers.SAXParserFactory(SAXFACTORYNAME) 
javax.xml.parsers.DocumentBuilderFactory( DOMFACTORYNAME) 
The algorithm to find the implementations of the abstract parsers
is derived from the JAR file specifications, specifically the Services
API. 
An XMLParserActivator assumes that it can find the class file names
of the factory classes in the following files: 
/META-INF/services/javax.xml.parsers.SAXParserFactory is a file
contained in a jar available to the runtime which contains the implementation
class name(s) of the SAXParserFactory. 
/META-INF/services/javax.xml.parsers.DocumentBuilderFactory is a
file contained in a jar available to the runtime which contains
the implementation class name(s) of the DocumentBuilderFactory
If either of the files does not exist, XMLParserActivator assumes
that the parser does not support that parser type. 
XMLParserActivator attempts to instantiate both the SAXParserFactory
and the DocumentBuilderFactory. It registers each factory with the
framework along with service properties: 
PARSER_VALIDATING- indicates if this factory supports validating
parsers. It’s value is a Boolean. 
PARSER_NAMESPACEAWARE- indicates if this factory supports namespace
aware parsers It’s value is a Boolean. 
Individual parser implementations may have additional features,
properties, or attributes which could be used to select a parser
with a filter. These can be added by extending this class and overriding
the setSAXProperties and setDOMProperties methods.
	Concurrency	Thread-safe 
<?FM MARKER [Cross-Ref] XMLParserActivator.DOMCLASSFILE?>
<?FM MARKER [Index] XMLParserActivator:DOMCLASSFILE?>
<?FM MARKER [Index] DOMCLASSFILE?>
DOMCLASSFILE
public static final String DOMCLASSFILE = “/META-INF/services/javax.xml.parsers.DocumentBuilderFactory”<?FM MARKER [Index] /META-INF/services/javax.xml.parsers.DocumentBuilderFactory?>

Fully qualified path name of DOM Parser Factory Class Name file 
<?FM MARKER [Cross-Ref] XMLParserActivator.DOMFACTORYNAME?>
<?FM MARKER [Index] XMLParserActivator:DOMFACTORYNAME?>
<?FM MARKER [Index] DOMFACTORYNAME?>
DOMFACTORYNAME
public static final String DOMFACTORYNAME = “javax.xml.parsers.DocumentBuilderFactory”<?FM MARKER [Index] javax.xml.parsers.DocumentBuilderFactory?>

Filename containing the DOM Parser Factory Class name. Also used
as the basis for the SERVICE_PID registration property. 
<?FM MARKER [Cross-Ref] XMLParserActivator.PARSER_NAMESPACEAWARE?>
<?FM MARKER [Index] XMLParserActivator:PARSER_NAMESPACEAWARE?>
<?FM MARKER [Index] PARSER_NAMESPACEAWARE?>
PARSER_NAMESPACEAWARE
public static final String PARSER_NAMESPACEAWARE = “parser.namespaceAware”<?FM MARKER [Index] parser.namespaceAware?>

Service property specifying if factory is configured to support
namespace aware parsers. The value is of type Boolean. 
<?FM MARKER [Cross-Ref] XMLParserActivator.PARSER_VALIDATING?>
<?FM MARKER [Index] XMLParserActivator:PARSER_VALIDATING?>
<?FM MARKER [Index] PARSER_VALIDATING?>
PARSER_VALIDATING
public static final String PARSER_VALIDATING = “parser.validating”<?FM MARKER [Index] parser.validating?>

Service property specifying if factory is configured to support
validating parsers. The value is of type Boolean. 
<?FM MARKER [Cross-Ref] XMLParserActivator.SAXCLASSFILE?>
<?FM MARKER [Index] XMLParserActivator:SAXCLASSFILE?>
<?FM MARKER [Index] SAXCLASSFILE?>
SAXCLASSFILE
public static final String SAXCLASSFILE = “/META-INF/services/javax.xml.parsers.SAXParserFactory”<?FM MARKER [Index] /META-INF/services/javax.xml.parsers.SAXParserFactory?>

Fully qualified path name of SAX Parser Factory Class Name file 
<?FM MARKER [Cross-Ref] XMLParserActivator.SAXFACTORYNAME?>
<?FM MARKER [Index] XMLParserActivator:SAXFACTORYNAME?>
<?FM MARKER [Index] SAXFACTORYNAME?>
SAXFACTORYNAME
public static final String SAXFACTORYNAME = “javax.xml.parsers.SAXParserFactory”<?FM MARKER [Index] javax.xml.parsers.SAXParserFactory?>

Filename containing the SAX Parser Factory Class name. Also used
as the basis for the SERVICE_PID registration property. 
<?FM MARKER [Cross-Ref] XMLParserActivator.XMLParserActivator()?>
<?FM MARKER [Index] XMLParserActivator:XMLParserActivator?>
<?FM MARKER [Index] XMLParserActivator?>
XMLParserActivator()
public XMLParserActivator ( ) 
<?FM MARKER [Cross-Ref] XMLParserActivator.getService(Bundle,ServiceRegistration)?>
<?FM MARKER [Index] XMLParserActivator:getService?>
<?FM MARKER [Index] getService?>
getService(Bundle,ServiceRegistration)
public Object getService ( Bundle bundle , ServiceRegistration registration
) 
	bundle	The bundle using the service.
	registration	The ServiceRegistration object for the service.
	
Creates a new XML Parser Factory object.  
A unique XML Parser Factory object is returned for each call to
this method. 
The returned XML Parser Factory object will be configured for validating
and namespace aware support as specified in the service properties
of the specified ServiceRegistration object.  This method can be
overridden to configure additional features in the returned XML
Parser Factory object.
	Returns	A new, configured XML Parser Factory object or null if
a configuration error was encountered
<?FM MARKER [Cross-Ref] XMLParserActivator.setDOMProperties(javax.xml.parsers.DocumentBuilderFactory,Hashtable)?>
<?FM MARKER [Index] XMLParserActivator:setDOMProperties?>
<?FM MARKER [Index] setDOMProperties?>
setDOMProperties(javax.xml.parsers.DocumentBuilderFactory,Hashtable)
public void setDOMProperties ( DocumentBuilderFactory factory ,
Hashtable props ) 
	factory	- the DocumentBuilderFactory object
	props	- Hashtable of service properties.
	
Set the customizable DOM Parser Service Properties.  
This method attempts to instantiate a validating parser and a namespace
aware parser to determine if the parser can support those features.
The appropriate properties are then set in the specified props object.
 
This method can be overridden to add additional DOM2 features and
properties. If you want to be able to filter searches of the OSGi
service registry, this method must put a key, value pair into the properties
object for each feature or property. For example, properties.put(”http://www.acme.com/features/foo”,
Boolean.TRUE);
<?FM MARKER [Cross-Ref] XMLParserActivator.setSAXProperties(javax.xml.parsers.SAXParserFactory,Hashtable)?>
<?FM MARKER [Index] XMLParserActivator:setSAXProperties?>
<?FM MARKER [Index] setSAXProperties?>
setSAXProperties(javax.xml.parsers.SAXParserFactory,Hashtable)
public void setSAXProperties ( SAXParserFactory factory , Hashtable
properties ) 
	factory	- the SAXParserFactory object
	properties	- the properties object for the service
	
Set the customizable SAX Parser Service Properties.  
This method attempts to instantiate a validating parser and a namespace
aware parser to determine if the parser can support those features.
The appropriate properties are then set in the specified properties
object.  
This method can be overridden to add additional SAX2 features and
properties. If you want to be able to filter searches of the OSGi
service registry, this method must put a key, value pair into the
properties object for each feature or property. For example, properties.put(”http://www.acme.com/features/foo”,
Boolean.TRUE);
<?FM MARKER [Cross-Ref] XMLParserActivator.start(BundleContext)?>
<?FM MARKER [Index] XMLParserActivator:start?>
<?FM MARKER [Index] start?>
start(BundleContext)
public void start ( BundleContext context ) throws Exception
	context	The execution context of the bundle being started.
	
Called when this bundle is started so the Framework can perform
the bundle-specific activities necessary to start this bundle. This
method can be used to register services or to allocate any resources
that this bundle needs. 
This method must complete and return to its caller in a timely manner.
 
This method attempts to register a SAX and DOM parser with the Framework’s
service registry.
	Throws	Exception –  If this method throws an exception, this bundle
is marked as stopped and the Framework will remove this bundle’s
listeners, unregister all services registered by this bundle, and
release all services used by this bundle. 
<?FM MARKER [Cross-Ref] XMLParserActivator.stop(BundleContext)?>
<?FM MARKER [Index] XMLParserActivator:stop?>
<?FM MARKER [Index] stop?>
stop(BundleContext)
public void stop ( BundleContext context ) throws Exception
	context	The execution context of the bundle being stopped.
	
This method has nothing to do as all active service registrations
will automatically get unregistered when the bundle stops. 
	Throws	Exception –  If this method throws an exception, the bundle
is still marked as stopped, and the Framework will remove the bundle’s
listeners, unregister all services registered by the bundle, and
release all services used by the bundle. 
<?FM MARKER [Cross-Ref] XMLParserActivator.ungetService(Bundle,ServiceRegistration,Object)?>
<?FM MARKER [Index] XMLParserActivator:ungetService?>
<?FM MARKER [Index] ungetService?>
ungetService(Bundle,ServiceRegistration,Object)
public void ungetService ( Bundle bundle , ServiceRegistration registration
, Object service ) 
	bundle	The bundle releasing the service.
	registration	The ServiceRegistration object for the service.
	service	The XML Parser Factory object returned by a previous call
to the getService method.
	
Releases a XML Parser Factory object. 

</INSET>
<section><title>References</title>
<para role="ExternalReference">XML</para>
<para role="ExternalReferenceCont">http://www.w3.org/XML</para>
<para role="ExternalReference">SAX</para>
<para role="ExternalReferenceCont">http://www.saxproject.org/</para>
<para role="ExternalReference">DOM Java Language Binding</para>
<para role="ExternalReferenceCont">http://www.w3.org/TR/REC-DOM-Level-1/java-language-binding.html</para>
<para role="ExternalReference" xml:id="i1255594">
JAXP</para>
<para role="ExternalReferenceCont">http://jaxp.java.net/</para>
<para role="ExternalReference" xml:id="i1267674">
JAR
File specification, services directory</para>
<para role="ExternalReferenceCont">http://download.oracle.com/javase/1.4.2/docs/guide/jar/jar.html</para>
<para role="ExternalReference" xml:id="i1286146">
Xerces
2 Java Parser</para>
<para role="ExternalReferenceCont">http://xerces.apache.org/xerces2-j/</para></section></chapter>