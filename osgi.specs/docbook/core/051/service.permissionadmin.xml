<?xml version="1.0" encoding="utf-8"?><chapter xmlns="http://docbook.org/ns/docbook" version="5" xml:id="i1523134"><title>
Permission
Admin Service Specification</title>
<info xml:id="i1668525"><releaseinfo>
Version
1.2</releaseinfo></info>
<section><title>Introduction</title>
<para>Note: The Permission Admin has been superseded by the Conditional
Permission admin. See 
<phrase role="xref">Conditional Permission Admin Service Specification on
page 381</phrase>
.</para>
<para>In the Framework, a bundle can have a single set of permissions.
These permissions are used to verify that a bundle is authorized
to execute privileged code. For example, a <code>FilePermission</code> defines
what files can be used and in what way.</para>
<para>The policy of providing the permissions to the bundle should
be delegated to a Management Agent. For this reason, the Framework
provides the Permission Admin service so that a Management Agent can
administrate the permissions of a bundle and provide defaults for
all bundles.</para>
<para>Related mechanisms of the Framework are discussed in 
<phrase role="xref">Security Overview on page 14</phrase>
.</para>
<section><title>Essentials</title>
<itemizedlist><listitem><para><emphasis>Status information</emphasis> –
The Permission Admin Service must provide status information about
the current permissions of a bundle.</para></listitem>
<listitem><para><emphasis>Administrative</emphasis> – The Permission
Admin Service must allow a Management Agent to set the permissions
before, during, or after a bundle is installed.</para></listitem>
<listitem><para><emphasis>Defaults</emphasis> – The Permission Admin
Service must provide control over default permissions. These are the
permissions for a bundle with no specific permissions set.</para></listitem></itemizedlist></section>
<section><title>Entities</title>
<itemizedlist><listitem><para><emphasis><phrase role="xref">PermissionAdmin</phrase></emphasis>
 – The service that provides access to the permission repository
of the Framework.</para></listitem>
<listitem><para><emphasis><phrase role="xref">PermissionInfo</phrase></emphasis>
 – An object that holds the information needed to construct a <code>Permission</code> object.</para></listitem>
<listitem><para><emphasis>Bundle location</emphasis> – The string
that specifies the bundle location. This is described in 
<phrase role="xref">Bundle Identifiers on page 113</phrase>
.</para></listitem></itemizedlist>
<figure><title> </title><mediaobject><imageobject><imagedata fileref="GRAPHIC1" align="center" contentwidth="7.000in" contentdepth="1.406in"/></imageobject></mediaobject></figure></section>
<section><title>Operation</title>
<para>The Framework maintains a repository of permissions. These
permissions are stored under the bundle location string. Using the
bundle location allows the permissions to be set <emphasis>before</emphasis> a
bundle is downloaded. The Framework must consult this repository
when it needs the permissions of a bundle. When no specific permissions
are set, the bundle must use the default permissions. If no default
is set, the bundle must use <code>java.security.AllPermission</code>.
If the default permissions are changed, a bundle with no specific
permissions must immediately start using the new default permissions.</para>
<para>The Permission Admin service is registered by the Framework’s
system bundle under the <code>org.osgi.service.permissionadmin.</code>
<phrase role="xref">PermissionAdmin</phrase>
 interface. This is an optional singleton service, so at most one
Permission Admin service is registered at any moment in time.</para>
<para>The Permission Admin service provides access to the permission
repository. A Management Agent can get, set, update, and delete
permissions from this repository. A Management Agent can also use
a <code>SynchronousBundleListener</code> object to set the permissions
during the installation or updating of a bundle.</para></section></section>
<section><title>Permission Admin service</title>
<para>The Permission Admin service needs to manipulate the default
permissions and the permissions associated with a specific bundle.
The default permissions and the bundle-specific permissions are stored
persistently. It is possible to set a bundle’s permissions before
the bundle is installed in the Framework because the bundle’s location
is used to set the bundle’s permissions.</para>
<para>The manipulation of a bundle’s permissions, however, may also
be done in real time when a bundle is downloaded or just before
the bundle is downloaded. To support this flexibility, a <code>SynchronousBundleListener</code> object
may be used by a Management Agent to detect the installation or
update of a bundle, and set the required permissions before the
installation completes.</para>
<para>Permissions are activated before the first time a permission
check for a bundle is performed. This means that if a bundle has
opened a file, this file must remain usable even if the permission
to open that file is removed at a later time.</para>
<para>Permission information is <emphasis>not</emphasis> specified
using <code>java.security.Permission</code> objects. The reason
for this approach is the relationship between the required persistence
of the information across the Framework restarts and the concept of
class loaders in the Framework. Actual <code>Permission</code> classes
must be subclasses of <code>Permission</code> and may be exported
from any bundle. The Framework can access these permissions as long as
they are exported, but the Management Agent would have to import
all possible packages that contain permissions. This requirement
would severely limit permission types. Therefore, the Permission
Admin service uses the 
<phrase role="xref">PermissionInfo</phrase>
 class to specify permission information. Objects of this class
are used by the Framework to create <code>Permission</code> objects.</para>
<para><code>PermissionInfo</code> objects restrict the possible <code>Permission</code> objects
that can be used. A <code>Permission</code> subclass can only be
described by a <code>PermissionInfo</code> object when it has the
following characteristics:</para>
<itemizedlist><listitem><para>It must be a subclass of <code>java.security.Permission</code>. </para></listitem>
<listitem><para>It must use the two-argument public constructor <code>type(name,actions)</code>.</para></listitem>
<listitem><para>The class must be available to the Framework code
from the system class path or from any exported package so it can
be loaded by the Framework.</para></listitem>
<listitem><para>The class must be public.</para></listitem></itemizedlist>
<para>If any of these conditions is not met, the <code>PermissionInfo</code> object
must be ignored and an error message should be logged.</para>
<para>The permissions are always set as an array of <code>PermissionInfo</code> objects
to make the assignment of all permissions atomic. </para>
<para>The <code>PermissionAdmin</code> interface provides the following
methods:</para>
<itemizedlist><listitem><para><phrase role="xref">getLocations()</phrase>
 – Returns a list of locations that have permissions assigned to
them. This method allows a Management Agent to examine the current
set of permissions.</para></listitem>
<listitem><para><phrase role="xref">getPermissions(String)</phrase>
 – Returns a list of <code>PermissionInfo</code> objects that are
set for that location, or returns <code>null</code> if no permissions
are set.</para></listitem>
<listitem><para><phrase role="xref">setPermissions(String,PermissionInfo[])</phrase>
 – Associates permissions with a specific location, or returns <code>null</code> when
the permissions should be removed.</para></listitem>
<listitem><para><phrase role="xref">getDefaultPermissions()</phrase>
 – This method returns the list of default permissions.</para></listitem>
<listitem><para><phrase role="xref">setDefaultPermissions(PermissionInfo[])</phrase>
 – This method sets the default permissions.</para></listitem></itemizedlist>
<section><title>File Permission for Relative Path Names</title>
<para>A <code>java.io.FilePermission</code> assigned to a bundle
via the <code>setPermissions</code> method must receive special
treatment if the path argument for the <code>FilePermission</code> is
a relative path name. A relative path name is one that is not absolute.
See the <code>java.io.File.isAbsolute</code> method for more information
on absolute path names.</para>
<para>When a bundle is assigned a <code>FilePermission</code> for
a relative path name, the path name is taken to be relative to the
bundle’s persistent storage area. This allows additional permissions,
such as <code>execute</code>, to be assigned to files in the bundle’s
persistent storage area. For example:</para>
<programlisting>	java.io.FilePermission "-" "execute"</programlisting>
<para>can be used to allow a bundle to execute any file in the bundle’s
persistent storage area.</para>
<para>This only applies to <code>FilePermission</code> objects assigned
to a bundle via the <code>setPermission</code> method. This does
not apply to default permissions. A <code>FilePermission</code> for
a relative path name assigned via the <code>setDefaultPermission</code> method
must be ignored.</para></section></section>
<section><title>Security</title>
<para>The Permission Admin service is a system service that can
be abused. A bundle that can access and use the Permission Admin
service has full control over the OSGi framework. However, many
bundles can have <code>ServicePermission[PermissionAdmin,GET]</code> because
all methods that change the state of the Framework require <code>AdminPermission</code>.</para>
<para>No bundle must have <code>ServicePermission[PermissionAdmin,REGISTER]</code> for
this service because only the Framework should provide this service.</para></section>
<INSET xml:id="i1712735">org.osgi.service.permissionadmin<?FM MARKER [Cross-Ref] org.osgi.service.permissionadmin?>
<?FM MARKER [Index] org.osgi.service.permissionadmin?>
<?FM MARKER [Cross-Ref] package:org.osgi.service.permissionadmin?>

Permission Admin Package Version 1.2.  
Bundles wishing to use this package must list the package in the
Import-Package header of the bundle’s manifest. 
Example import for consumers using the API in this package: 
Import-Package: org.osgi.service.permissionadmin; version=”[1.2,2.0)”
Summary
PermissionAdmin –  The Permission Admin service allows management
agents to manage the permissions of bundles. 
PermissionInfo –  Permission representation used by the Permission
Admin service. 
Permissions
<?FM MARKER [Cross-Ref] PermissionAdmin?>
<?FM MARKER [Index] PermissionAdmin?>
<?FM MARKER [Index] interface:PermissionAdmin?>
PermissionAdmin
public interface PermissionAdmin
The Permission Admin service allows management agents to manage
the permissions of bundles. There is at most one Permission Admin
service present in the OSGi environment. 
Access to the Permission Admin service is protected by corresponding
ServicePermission. In addition AdminPermission is required to actually
set permissions. 
Bundle permissions are managed using a permission table. A bundle’s
location serves as the key into this permission table. The value
of a table entry is the set of permissions (of type PermissionInfo) granted
to the bundle named by the given location. A bundle may have an
entry in the permission table prior to being installed in the Framework.
 
The permissions specified in setDefaultPermissions are used as the
default permissions which are granted to all bundles that do not
have an entry in the permission table.  
Any changes to a bundle’s permissions in the permission table will
take effect no later than when bundle’s java.security.ProtectionDomain
is next involved in a permission check, and will be made persistent. 
Only permission classes on the system classpath or from an exported
package are considered during a permission check. Additionally,
only permission classes that are subclasses of java.security.Permission
and define a 2-argument constructor that takes a name  string and
an actions  string can be used. 
Permissions implicitly granted by the Framework (for example, a
bundle’s permission to access its persistent storage area) cannot
be changed, and are not reflected in the permissions returned by
getPermissions and getDefaultPermissions.
	Concurrency	Thread-safe 
	No Implement	Consumers of this API must not implement this interface 
<?FM MARKER [Cross-Ref] PermissionAdmin.getDefaultPermissions()?>
<?FM MARKER [Index] PermissionAdmin:getDefaultPermissions?>
<?FM MARKER [Index] getDefaultPermissions?>
getDefaultPermissions()
public PermissionInfo[] getDefaultPermissions (  ) 
	
Gets the default permissions.  
These are the permissions granted to any bundle that does not have
permissions assigned to its location.
	Returns	The default permissions, or null if no default permissions
are set.
<?FM MARKER [Cross-Ref] PermissionAdmin.getLocations()?>
<?FM MARKER [Index] PermissionAdmin:getLocations?>
<?FM MARKER [Index] getLocations?>
getLocations()
public String[] getLocations (  ) 
	
Returns the bundle locations that have permissions assigned to them,
that is, bundle locations for which an entry exists in the permission
table. 
	Returns	The locations of bundles that have been assigned any permissions,
or null if the permission table is empty.
<?FM MARKER [Cross-Ref] PermissionAdmin.getPermissions(String)?>
<?FM MARKER [Index] PermissionAdmin:getPermissions?>
<?FM MARKER [Index] getPermissions?>
getPermissions(String)
public PermissionInfo[] getPermissions ( String location ) 
	location	The location of the bundle whose permissions are to be
returned.
	
Gets the permissions assigned to the bundle with the specified location. 
	Returns	The permissions assigned to the bundle with the specified
location, or null if that bundle has not been assigned any permissions.
<?FM MARKER [Cross-Ref] PermissionAdmin.setDefaultPermissions(PermissionInfo[])?>
<?FM MARKER [Index] PermissionAdmin:setDefaultPermissions?>
<?FM MARKER [Index] setDefaultPermissions?>
setDefaultPermissions(PermissionInfo[])
public void setDefaultPermissions ( PermissionInfo[] permissions
) 
	permissions	The default permissions, or null if the default permissions
are to be removed from the permission table.
	
Sets the default permissions.  
These are the permissions granted to any bundle that does not have
permissions assigned to its location.
	Throws	SecurityException –  If the caller does not have AllPermission. 
<?FM MARKER [Cross-Ref] PermissionAdmin.setPermissions(String,PermissionInfo[])?>
<?FM MARKER [Index] PermissionAdmin:setPermissions?>
<?FM MARKER [Index] setPermissions?>
setPermissions(String,PermissionInfo[])
public void setPermissions ( String location , PermissionInfo[]
permissions ) 
	location	The location of the bundle that will be assigned the permissions.
	permissions	The permissions to be assigned, or null if the specified
location is to be removed from the permission table.
	
Assigns the specified permissions to the bundle with the specified
location. 
	Throws	SecurityException –  If the caller does not have AllPermission. 
<?FM MARKER [Cross-Ref] PermissionInfo?>
<?FM MARKER [Index] PermissionInfo?>
<?FM MARKER [Index] class:PermissionInfo?>
PermissionInfo
public class PermissionInfo
Permission representation used by the Permission Admin service.
 
This class encapsulates three pieces of information: a Permission
type  (class name), which must be a subclass of java.security.Permission,
and the name and actions arguments passed to its constructor.  
In order for a permission represented by a PermissionInfo to be
instantiated and considered during a permission check, its Permission
class must be available from the system classpath or an exported package.
This means that the instantiation of a permission represented by
a PermissionInfo may be delayed until the package containing its
Permission class has been exported by a bundle.
	Concurrency	Immutable 
<?FM MARKER [Cross-Ref] PermissionInfo.PermissionInfo(String,String,String)?>
<?FM MARKER [Index] PermissionInfo:PermissionInfo?>
<?FM MARKER [Index] PermissionInfo?>
PermissionInfo(String,String,String)
public PermissionInfo ( String type , String name , String actions
) 
	type	The fully qualified class name of the permission represented
by this PermissionInfo. The class must be a subclass of java.security.Permission
and must define a 2-argument constructor that takes a name string
and an actions string.
	name	The permission name that will be passed as the first argument
to the constructor of the Permission class identified by type.
	actions	The permission actions that will be passed as the second
argument to the constructor of the Permission class identified by
type.
	
Constructs a PermissionInfo from the specified type, name, and actions. 
	Throws	NullPointerException –  If type is null. 
		IllegalArgumentException –  If action is not null and name is
null. 
<?FM MARKER [Cross-Ref] PermissionInfo.PermissionInfo(String)?>
<?FM MARKER [Index] PermissionInfo:PermissionInfo?>
<?FM MARKER [Index] PermissionInfo?>
PermissionInfo(String)
public PermissionInfo ( String encodedPermission ) 
	encodedPermission	The encoded PermissionInfo.
	
Constructs a PermissionInfo object from the specified encoded PermissionInfo
string. White space in the encoded PermissionInfo string is ignored. 
	Throws	IllegalArgumentException –  If the specified encodedPermission
is not properly formatted. 
	See Also	getEncoded()
<?FM MARKER [Cross-Ref] PermissionInfo.equals(Object)?>
<?FM MARKER [Index] PermissionInfo:equals?>
<?FM MARKER [Index] equals?>
equals(Object)
public boolean equals ( Object obj ) 
	obj	The object to test for equality with this PermissionInfo object.
	
Determines the equality of two PermissionInfo objects.  This method
checks that specified object has the same type, name and actions
as this PermissionInfo object. 
	Returns	true if obj is a PermissionInfo, and has the same type,
name and actions as this PermissionInfo object; false otherwise.
<?FM MARKER [Cross-Ref] PermissionInfo.getActions()?>
<?FM MARKER [Index] PermissionInfo:getActions?>
<?FM MARKER [Index] getActions?>
getActions()
public final String getActions ( ) 
	
Returns the actions of the permission represented by this PermissionInfo. 
	Returns	The actions of the permission represented by this PermissionInfo,
or null if the permission does not have any actions associated with
it.
<?FM MARKER [Cross-Ref] PermissionInfo.getEncoded()?>
<?FM MARKER [Index] PermissionInfo:getEncoded?>
<?FM MARKER [Index] getEncoded?>
getEncoded()
public final String getEncoded ( ) 
	
Returns the string encoding of this PermissionInfo in a form suitable
for restoring this PermissionInfo.  
The encoded format is:  
 (type)
or 
 (type “name”)
or 
 (type “name” “actions”)
where name and actions are strings that must be encoded for proper
parsing. Specifically, the &amp;quot;,\, carriage return, and line
feed characters must be escaped using \&amp;quot;, \\,\r, and \n,
respectively.  
The encoded string contains no leading or trailing whitespace characters.
A single space character is used between type and “name“ and between
“name“ and “actions“.
	Returns	The string encoding of this PermissionInfo.
<?FM MARKER [Cross-Ref] PermissionInfo.getName()?>
<?FM MARKER [Index] PermissionInfo:getName?>
<?FM MARKER [Index] getName?>
getName()
public final String getName ( ) 
	
Returns the name of the permission represented by this PermissionInfo. 
	Returns	The name of the permission represented by this PermissionInfo,
or null if the permission does not have a name.
<?FM MARKER [Cross-Ref] PermissionInfo.getType()?>
<?FM MARKER [Index] PermissionInfo:getType?>
<?FM MARKER [Index] getType?>
getType()
public final String getType ( ) 
	
Returns the fully qualified class name of the permission represented
by this PermissionInfo. 
	Returns	The fully qualified class name of the permission represented
by this PermissionInfo.
<?FM MARKER [Cross-Ref] PermissionInfo.hashCode()?>
<?FM MARKER [Index] PermissionInfo:hashCode?>
<?FM MARKER [Index] hashCode?>
hashCode()
public int hashCode ( ) 
	
Returns the hash code value for this object. 
	Returns	A hash code value for this object.
<?FM MARKER [Cross-Ref] PermissionInfo.toString()?>
<?FM MARKER [Index] PermissionInfo:toString?>
<?FM MARKER [Index] toString?>
toString()
public String toString ( ) 
	
Returns the string representation of this PermissionInfo. The string
is created by calling the getEncoded method on this PermissionInfo. 
	Returns	The string representation of this PermissionInfo.

</INSET></chapter>