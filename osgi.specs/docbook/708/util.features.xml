<?xml version="1.0" encoding="utf-8"?>
<chapter label="708"
         revision="$Id$"
         version="5.0" xml:id="util.features"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Features Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.util.features-version"
    linkend="org.osgi.util.features"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>
        OSGi has become a platform capable of running large applications for a variety of purposes, 
        including rich client applications, server-side systems and cloud and container based architectures. 
        As these applications are generally based on many bundles, describing each bundle individually 
        in the application definition becomes unwieldy once the number of bundles reaches a certain level. 

        When developing large scale applications it is often the case that few people know the role of every 
        bundle or configuration item in the application. To keep the architecture understandable a grouping 
        mechanism is needed that allows for the representation of parts of the application into larger 
        entities that keep reasoning about the application manageable. In such a domain members of teams 
        spread across the organization will need to be able to both develop new parts for the application 
        as well as make tweaks or enhancements to their respective parts such as adding configuration and 
        resources or changing one or more bundles relevant to their part of the application.

        The higher level constructs that define the application should be reusable in different contexts, 
        for example if one team has developed a component to handle job processing, different applications 
        should be able to use it, and if needed tune its configuration or other aspects so that it works in 
        each setting without having to know each and every detail that the job processing component is built 
        up from.

        Applications often carry additional definitions, for example configurations or custom artifacts.
        Architects often require that the various components be encapsulated in a single definition.

        Systems are often composed by reusing existing building blocks, combining various applications 
        or subsystems together to create a larger system, where all these building blocks work together.
        The architect of these systems need to think about components without having to dive into the 
        individual implementation details of each subcomponent. 

        This specification defines OSGi Features which can be used to model such applications. Features
        contain the definition of an application or component and can be composed into larger systems.


    </para>

  </section>

  <section>
    <title>Entities</title>

    <para>The following entities are used in this specification:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Entity 1</emphasis> - ...</para>
      </listitem>

      <listitem>
        <para><emphasis>Entity 2</emphasis> - ...</para>
      </listitem>

    </itemizedlist>

      <!--
    <figure pgwide="1">
      <title>Features Entity overview</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="4.100in"
                     contentwidth="6.000in" fileref="features-overview.svg"/>
        </imageobject>
      </mediaobject>
    </figure>
      -->
  </section>

  <section>
    <title>The Model</title>

    <para>text goes here...
    </para>
  </section>
  
  <section>
    <title>Security</title>

    <para>An implementation of this specification will require the use of Java
    Reflection APIs. Therefore it should have the appropriate permissions to
    perform these operations when running under the Java Security
    model.</para>
  </section>

  <!--
  <xi:include href="../../generated/javadoc/docbook/org.osgi.util.features.xml"/>
  -->

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="util.features-jls.ref"><title>The Java Language
      Specification, Java SE 8 Edition</title><biblioid class="uri"><link
      xlink:href="https://docs.oracle.com/javase/specs/jls/se8/html/index.html"/></biblioid></bibliomixed>
    </bibliolist>
  </section>
</chapter>
