<?xml version="1.0" encoding="utf-8"?>
<chapter label="150"
         revision="$Id$"
         version="5" xml:id="service.configurator"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Configurator Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.configurator-version"
    linkend="org.osgi.configurator"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>
    
    <para>OSGi provides a standardized model to provide bundles with configurations. This is specified in 
      the Configuration Admin specification. In this specification, A configuration is identified by a 
      persistent identity (PID). A PID is a unique token, recommended to be conforming to the symbolic 
      name syntax. A configuration consists of a set of properties, where a property consists of a 
      string key and a corresponding value. The type of the value is limited to the primitive types and
      their wrappers, Strings, or Java Arrays/List/Vector of these.
    </para>

    <para>
      Sometimes it is necessary to store binary large objects (BLOB) in configuration. For example, a keystore 
      with certificates. Since configuration admin is not suitable for this, these BLOBs are often stored on
      the files system. The application developers then must manage the life cycles of these files.
    </para>
      
    <para>
      Configurations can be grouped with a factory PID. Configurations with a factory PID are called 
      factory configurations and without it they are called singleton configurations.
    </para>
      
    <para>
      The original specification specified that the configurations were sent to a Managed Service for 
      the singletons and Managed Service Factory services for the factory instances. However, over time 
      component models became popular and a component can rely on configuration. For example, Declarative 
      Services is tightly integrated with Configuration Admin. For these heavy users of configurations 
      a Configuration Listener whiteboard service was added. Configuration update, delete, and bundle 
      location change events are forwarded to this whiteboard service on a background thread.
    </para>

    <para>
      This specification defines a mechanism to feed configurations into the system
      through configuration resources. A single configuration resource can feed multiple PIDs with configuration
      and multiple configuration resources can be provided in a running system.
    </para>

    <para>
      Configuration resources can define configurations for more than one environment, allowing a single set 
      of resources to be used in multiple contexts, such as development, test and production, each of which may 
      have different configuration values.
    </para>
  </section> 
  
  <section>
    <title>Entities</title>
    
    <para>The following entities are used in this specification</para>
    
    <itemizedlist>
      <listitem>
        <para><emphasis>Configuration Admin Service</emphasis> - yyy.</para>
      </listitem>
    
      <listitem>
          <para><emphasis>Configuration Resource</emphasis> - A YAML resource containing
              configuration.</para>
      </listitem>
    
      <listitem>
        <para><emphasis>Configurator</emphasis> - yyy.</para>
      </listitem>
    
      <listitem>
        <para><emphasis>Coordinator Service</emphasis> - yyy.</para>
      </listitem>
    
      <listitem>
        <para><emphasis>Persistent Identity (PID)</emphasis> - yyy.</para>
      </listitem>
    
    </itemizedlist>
    <remark>Add entity diagram</remark>
  </section> 

  <section>
    <title>Configurator Resources</title>
    
    <para>
      The configurator follows the OSGi extender model and looks for JSON configuration files in
      installed bundles, if the bundle has opted-in to be processed.
      In order to get processed, a bundle must require the configurator implementation:
      
      <programlisting>Require-Capability: osgi.implementation;
  filter := (&amp;(osgi.implementation="osgi.configurator"))
              (version&gt;=1.0)(!(version&gt;=2.0)))
      </programlisting>
      
      By default the configuration resources are in the <code>OSGI-INF/configurator</code>
      directory in the bundle.
    </para>
      
    <para>Configuration files are in UTF-8 encoded and have the <code>.json</code> file extension.
      An example configuration resource has the following structure:
      
    <programlisting>{
    // Global Settings
    ":configurator:version" : 1,
    
    // Configurations
    "configurations": [
      {
           "service.pid": "pid.a",
           "key": "val",
           "some_number": 123,
           ":configurator:environments": ["dev","demo"]
      },
      {
           "service.pid": "pid.b",
           "a_boolean" : true
           // No environments specified, always enabled
      }
    ]
}</programlisting>

      Configuration resources provide an array of configurations with the <code>configurations</code> key. 
      Each configuration has a <code>service.pid</code> to target a specific PID in the Configuration Admin
      Service and zero or more configuration values for this PID. Comments in the form of JSMin comments are 
      supported, i.e. any text after <code>//</code> is ignored and any text between <code>/* */</code> is
      ignored. 
    </para>
      
    <para>Configuration objects can define one or more environments by specifying the special key
      <code>:configurator:environments</code>. These configurations are only applied if one or more of these
      environments are active. For more information see <xref linkend="service.configurator.environments"/>. 
    </para>

    <para>This Configurator specification supports configuration resources in version 1. This is specified 
      as <code>":configurator:version": 1</code>. If the configurator version is ommitted, 1 is assumed.
      <remark>This is a bit misleading as we are specifying the configuration resource version. The configurator
      itself might be version 10, but still support configuration resource version 1!</remark>
    </para>
    
    <para>The configurator visits all files in the locations defined with the <code>configurations</code>
      attribute on the <code>osgi.configurator</code> implementation requirement when a bundle that has 
      opted in to be extended by the configurator is <emphasis>installed</emphasis>. By default this directory
      if <code>OSGI-INF/configurator</code>. The files are processed in lexical order.
    </para> 
      
    <para>
      If multiple bundles provide configuration for the same PID ranking rules are used to decide which configuration
      gets applied <remark>see ranking</remark>.   
      The configurator removes the <code>service.pid</code>, any comments and the special 
   	  <code>:configurator:</code> keys from the configuration before providing it to the Configuration Admin Service.
   	  The configurator uses the <code>Configuration.updateIfDifferent()</code> method on the Configuration object
   	  to avoid any volatility in the system if the configuration applied has not been changed. The configurator
   	  obtains any configurations with the location value of <code>?</code> to allow the configurations to be received
   	  by multiple bundles.
   	  <remark>can we force a bundle location?</remark>
    </para>
        
    <para>The configurator defines the following special keys in the configuration resources:
    </para>
      <table pgwide="1">
          <title>Configurator keys</title>
          <tgroup cols="4">
            <colspec colnum="1" colwidth="1*"/>
            <colspec colnum="2" colwidth="0.75*"/>
            <colspec colnum="3" colwidth="0.75*"/>
            <colspec colnum="4" colwidth="2*"/>
            <thead>
              <row>
                <entry>Key</entry>
                <entry>Value type</entry>
                <entry>Scope</entry>
                <entry>Description</entry>
              </row>
            </thead>         
            <tbody>              
              <row>
                <entry><code>:configurator:environments</code></entry>
                <entry>String <emphasis>or</emphasis> Array of String<remark>yes?</remark></entry>
                <entry>Configuration</entry>
                <entry>Environments that this configuration applies to. See <xref linkend="service.configurator.environments"/>.</entry>
              </row>
              
              <row>
                <entry><code>:configurator:policy</code></entry>
                <entry>String <code>default</code> or <code>force</code></entry>
                <entry>Configuration</entry>
                <entry>Specifies the overwrite policy on configurations set through non-configurator sources.
                See <xref linkend="service.configurator.policy"/>.</entry>
              </row>
              
              <row>
                <entry><code>:configurator:ranking</code></entry>
                <entry>Number</entry>
                <entry>Configuration</entry>
                <entry>The ranking for this configuration. See <xref linkend="service.configurator.ranking"/>.</entry>
              </row>

              <row>
                <entry><code>:configurator:version</code></entry>
                <entry>Number</entry>
                <entry>Resource</entry>
                <entry>The version of the configuration resource format. This specification only supports version 1. If
                this entry is ommitted then version 1 is assumed.</entry>
              </row>
            </tbody>
         </tgroup>
      </table>
  </section> 
  
  <section>
    <title>Factory Configurations</title>
    <para>Factory configurations can be addressed in the configuration PID using 
      <code>PID#name</code> structure. This ensures a well-known name for the 
      factory configuration instance. The configurator must use the 
      <code>getFactoryConfiguration()</code> methods on Configuration Admin to 
      create or obtain configurations with the given PID and name.</para>
  </section>

  <section>
    <title>Datatypes</title>
    <para>Configurations values support the datatypes as specified with the 
      <emphasis>Filter Syntax</emphasis> in the OSGi Core Specification.
      Configuration resources are specified in JSON, which supports a more 
      basic set of datatypes. The following table describes how values are 
      converted between configuration values and JSON values.
      <table>
        <title>JSON Conversions</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>From Java type</entry>
              <entry>JSON type</entry>
              <entry>To Java type</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><code>Boolean</code></entry>
              <entry>Boolean</entry>
              <entry><code>Boolean</code></entry>
            </row>
            <row>
              <entry><code>Number</code> or subclass</entry>
              <entry>Number</entry>
              <entry>If the number is a whole number an <code>Integer</code> is created. 
                If the number is too large
                for an <code>Integer</code> a <code>Long</code> is used. 
                If the number is a floating point number a 
                <code>Double</code> is used.</entry>
            </row>
            <row>
              <entry><code>String</code></entry>
              <entry>String</entry>
              <entry><code>String</code></entry>
            </row>
            <row>
              <entry>Array</entry>
              <entry>Array</entry>
              <entry>Array, contents are boxed</entry>
            </row>
            <row>
              <entry><code>Collection</code> or subclass</entry>
              <entry>Array</entry>
              <entry>Array, contents are boxed</entry>
            </row>
            <row>
              <entry><emphasis>other</emphasis></entry>
              <entry>String, conversion according to Converter rules</entry>
              <entry>String</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      
      If a specific datatype is required for a configuration, the configurator can be instructed to 
      convert the JSON value to a given datatype. The target type can be specified by adding a colon 
      <code>:</code> and the desired data type to the property name. Supported datatypes are
      <code>String</code>, <code>Integer</code>, <code>Long</code>, <code>Float</code>, <code>Double</code>,
      <code>Byte</code>, <code>Short</code>, <code>Character</code> and <code>Boolean</code>. Additionally
      arrays of Scalar or primitive types are supported and <code>Collection</code> of scalar. The primitive
      types that can be specified for arrays are: <code>int</code>, <code>long</code>, <code>float</code>,
      <code>double</code>, <code>byte</code>, <code>short</code>, <code>char</code>, <code>boolean</code>. For 
      <code>Collection</code> the configurator picks a suitable implementation that preserves order. 
      An example configuration resource with typed data:
      <programlisting>{
  "configurations": [{      
    "port:Integer" : 300,
    "an.int.array:int[]" : [2, 3, 4],
    "an.Integer.collection:Collection&lt;Integer&gt;" : [2,3,4],
    "complex": {
      "a" : 1,
      "b" : "two"
    }
  }]
}</programlisting>
<remark>Do we support the complex configuration above?</remark>
    </para>
    
    <para>
      As an alternative of specifying datatypes for the configurator, consumers of configuration can convert
      the configuration values to the desired type by using the OSGi Converter <remark>xref</remark>. A convenient way to convert a
      configuration map to the desired datatypes is by converting it to an annotation instance or by using
      a Declarative Services configuration property type.  
    </para>

    <section>
      <title>Binary Data</title>
      <para>In some cases binary data is associated with configurations such as certificates, security keys or 
      other resources. The configurator can manage this binary data. 
      The bundle developer places the binary data in a location in the configuration bundle and references it from 
      the configuration resource, marking its type as <code>binary</code>:
      
      <programlisting>{
  "configurations": [{
    "service.pid" : "my.config",
    "public.key:binary" : "/OSGI-INF/files/mykey.pub"
  }]
}</programlisting>

      When the configurator applies the configuration, it extracts the binary file to a public area on the file system.
      It then applies the configuration with as value the absolute path of the extracted binary file.
      </para> 
      
      <para>
      A binary data property can also specify an array of binary resources by declaring the <code>binary[]</code> datatype.
      Each resource referenced is extracted as a separate file on the filesystem and the value of the property will be an 
      array of strings, each string being the full path of one extracted binary.
      </para>
      
      <para>
      By default a directory called <code>binaries</code> in the bundle data area is used. An alternative location can 
      be specified via the <code>configurator.binaries</code> framework property. The value of this property must be 
      an absolute path on the file system to which the configurator has write access. If the directory does not exist
      or the configurator cannot write to this location, it logs an error and uses the default location instead.
      </para>  
      <remark>I renamed configurator.director to configurator.binaries, hope thats ok</remark>
      <para>When a configuration is removed, its associated binary files are also removed from the file system.
      When a configuration is updated, associated binary files are updated, if necessary. In the case of an update
      the configurator should use a different filename for the extracted binary file to avoid any open file lock issues.
      </para>      
    </section>
  </section>

  <section xml:id="service.configurator.environments">
    <title>Environments</title>
    <para>A single configuration resource or set of configuration resources
      can contain configurations for more than one runtime context for a given 
      PID. These contexts are named <emphasis>environments</emphasis>. Example environments could be 
      <emphasis>test</emphasis> and <emphasis>production</emphasis>. At runtime the active environments are
      obtained from the <code>configurator.environment</code> framework property. This property must be specified
      as a comma-separated string which defines the set of active environments. 
      White space before and after the individual environment 
      names are ignored.
      <remark>Can I chance environments dynamically at runtime? I guess I can change the system property, but how
      will the configuration notice? Do I need to restart the configuration implementation bundle?</remark>
    </para>
    
    <para>
      An example configuration resource for multiple environments can look like this:
      <programlisting>{
  "configurations": [
    {
      "service.pid" : "my.service.pid",
      "foo" : 1,
      ":configurator:environments" : "test"
    },
    {
      "service.pid" : "my.service.pid",
      "foo" : 2,
      ":configurator:environments" : ["stage", "prod"]
    },
    {
      "service.pid" : "my.service.pid",
      "foo" : 100
    }
  ]      
}</programlisting>

      If more than one configuration for a PID can be applied, the one with the highest configuration ranking 
      is applied. All others are ignored for this PID. If two configurations have the same ranking, the first 
      one found is used. In the example above all configurations have the same ranking. If the environment 
      <code>test</code> is active, the first configuration is used, if <code>prod</code> is active, the second 
      configuration is used.
      If neither <code>test</code> nor <code>prod</code> are active, the third configuration is used. If both 
      <code>test</code> and <code>prod</code> are active, the first configuration is used.
    </para>
  </section>
    
  <section xml:id="service.configurator.ranking">
    <title>Ranking</title>
    <para>The order in which the Configurator processes configuration resources in bundles is undefined. To control
      which configurations are in effect configuration ranking can be used. Configuration ranking is similar to
      service ranking; it is an integer which defaults to 0. Configurations with a higher ranking are preferred 
      over configurations with a lower ranking.
      When multiple configurations arrive over time it is possible that the configurator changes the effective
      configuration when a higher ranked configuration arrives later. The design of the configurator is such that
      the effective set of configurations once the system stabilizes is consistent, regardless of the order
      in which bundles are installed and processed.
    </para>
      
    <para>The ranking of a configuration can be specified by adding the <code>:configurator:ranking</code>
      property. The value of this property is converted to an Integer as defined by the Converter specification.
      If the value cannot be converted a warning should be logged. When multiple configurations for a given PID
      have the same ranking
      the bundle providing the configuration with the lowest bundle ID is preferred. 
      If multiple configurations for the same PID with the same ranking are specified within a single bundle, 
      the first one encountered is used.
    </para>

  </section>
  
  <section xml:id="service.configurator.policy">
    <title>Overwrite Policies</title>
    <para>In an IT operations scenario configurations are often updated by a systems administrator to suit the
    deployments requirements. In such scenarios it may be undesirable to have these modifications overwritten 
    by a software update which includes a configuration resource. In some other cases, bundles with configuration
    resources are used to enforce company best practices or compliance with corporate guidelines. 
    This specification defines policies to define the overwrite behavior of the configurator when PIDs are 
    found to be set or modified by another entity.
    </para>
    
    <para>Configuration policies are set by specifying the <code>:configurator:policy</code> property. Accepted 
    values are <code>default</code> and <code>force</code>. This policy defines the behavior if a configuration
    to be applied was set by another entity in the system, or if it was modified from the values set by the 
    configurator.
    
      <table>
        <title>Applying Configurations: Overwrite Policies</title>
        <tgroup cols="3">
          <colspec colnum="1" colwidth="1.25*"/>
          <colspec colnum="2" colwidth="0.75*"/>
          <colspec colnum="3" colwidth="0.75*"/>
          <thead>
            <row>
              <entry>State</entry>
              <entry>Policy <code>default</code></entry>
              <entry>Policy <code>force</code></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>No existing configuration</entry>
              <entry>Configuration is added</entry>
              <entry>Configuration is added</entry>
            </row>
            <row>
              <entry>Configurator set with higher ranking</entry>
              <entry>No action</entry>
              <entry>No action</entry>
            </row>
            <row>
              <entry>Configurator set with lower or equal ranking</entry>
              <entry>Configuration is added</entry>
              <entry>Configuration is added</entry>              
            </row>
            <row>
              <entry>Not set by configurator or modified</entry>
              <entry>No action</entry>
              <entry>Configuration is added</entry>              
            </row>
          </tbody>
        </tgroup>
      </table>
      
      The configurator needs to keep track of configuration change count values to identify configurations 
      that were changed by other entities or administrators.
    </para>
    
    <para>
      When configuration resources are removed, the configurator removes the applicable configurations from
      the system. The configurator policy is also used here to define the removal behavior when configurations 
      were modified outside of the configurator.
      <table>
        <title>Removing Configurations: Overwrite Policies</title>
        <tgroup cols="3">
          <colspec colnum="1" colwidth="1.25*"/>
          <colspec colnum="2" colwidth="0.75*"/>
          <colspec colnum="3" colwidth="0.75*"/>
          <thead>
            <row>
              <entry>State</entry>
              <entry>Policy <code>default</code></entry>
              <entry>Policy <code>force</code></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Configurator set with higher ranking</entry>
              <entry>No action</entry>
              <entry>No action</entry>
            </row>
            <row>
              <entry>Configurator set with lower of equal ranking</entry>
              <entry>Configuration is removed</entry>
              <entry>Configuration is removed</entry>
            </row>
            <row>
              <entry>Not set by configurator or modified</entry>
              <entry>No action</entry>
              <entry>Configuration is removed</entry>              
            </row>
          </tbody>
        </tgroup>
      </table>
      
      When a configuration is removed the configurator checks whether another, lower ranked, configuration resource is 
      available. If present the configurator sets this configuration. 
    </para>
  </section>
    
  <section>
    <title>Intial Configurations</title>
    <para>When the configurator starts it obtains the <code>configurator.initial</code> framework property to prime 
    its state from the runtime environment. If this property is available its value is processed as follows:
    
    <orderedlist>
      <listitem><para>If the value starts with a curly bracket <code>{</code>, ignoring any leading white space,
      the configurator will interpret the value as a literal configuration JSON resource.</para></listitem>
      
      <listitem><para>Otherwise the value is treated as a comma-separated list of URLs. The configurator will
      read the resource at each URL and parse it as a JSON Configuration resource. If any errors occur during 
      this process they are logged and the URL is skipped.</para></listitem>
    </orderedlist>
    
    </para>
  </section>
    
  <section>
    <title>Lifecycle</title>
    
    <para>The configurator requires access to the Configuration Admin service. Therefore the configurator implementation
    should require the Configuration Admin service through a service requirement.
    </para>
    
    <remark>What happens if there are multiple configuration admin services available? And what happens when 
    config admin arrives late, or disappears and is replaced?</remark>    
    
    <para>
    When the configurator starts it processes all installed bundles and applies configurations provided by those bundles.
    The configurator should process as many bundles as possible in a single pass to minimize volatility for PIDs
    where multiple configurations with different rankings are provided.
    </para>
    
    <para>
    The configurator must also check whether configurations that have been installed are still valid. If the bundles that provided
    these configurations have been uninstalled, the associated configurations must be removed. If a bundle is updated 
    the associated configurations are also updated. The configurator calls <code>updateIfDifferent()</code> on the configuration
    to avoid volatility in the system if the actual configuration values did not change.
    </para>
    
    <para>
    When the configurator is stopped the configurations applied will remain in the system.
    </para>
  </section> 

  <section>
    <title>Grouping and Coordinations</title>
    <para>... decide whether this is done here or in configadmin ...</para>
  </section>
    
  <section>
    <title>Security</title>
    <para>...</para>
  </section> 

  <section>
    <title>Capabilities</title>

    <section>
      <title>osgi.implementation Capability</title>

      <para>The Configurator implementation bundle must provide the <link
      linkend="service.namespaces-osgi.implementation.namespace"><code>osgi.implementation</code></link>
      capability with name <code>osgi.configurator</code> with the version of this specification:
      <programlisting>Provide-Capability: osgi.implementation;
       osgi.implementation="osgi.configurator";
       version:Version="1.0"</programlisting>
      </para>
      
      <para>
      Bundles providing configuration resources must require the <code>osgi.implementation</code>
      capability to opt in to being processed by the configurator. The default location for 
      configuration resources is in <code>OSGI-INF/configurator</code>. A bundle can specify 
      alternate locations for configuration resources through the <code>configurations</code> attribute.
      The value of this attribute is <code>String</code> or <code>List&lt;String&gt;</code>.
      Each value represents a path inside the bundle. This path is always relative to the root of the bundle and
      may start with a slash <code>/</code>. A path value of <code>/</code> indicates the root of the bundle.
      The configurator uses <code>Bundle.findEntries()</code> to find all resources with the 
      <code>.json</code> extension. If the <code>configuration</code> attribute specifies multiple paths, these
      are visited in the order specified. Duplicate paths are ignored. Paths that do not exist in the bundle
      are logged as an error and skipped.
      Resources in a single directory are processed in alphabetical order.
      </para>

      <programlisting>Require-Capability: osgi.implementation;
       filter:=(&amp;(osgi.implementation="osgi.configurator")
                 (version&gt;=1.0)(!(version&gt;=2.0)));
       configurations=resources/configs</programlisting>

      <para>This capability must follow the rules defined for the <xref
      linkend="service.namespaces-osgi.implementation.namespace"/>.</para>
    </section>
  </section>
  
  <section>
    <title>Standalone Configurations</title>
    <para>...</para>
  </section>
    
  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed><title><xref linkend="intro.core.release"
      xrefstyle="template:%t"/></title>https://www.osgi.org/developer/specifications/</bibliomixed>
    </bibliolist>
  </section>
</chapter>
