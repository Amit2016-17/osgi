<?xml version="1.0" encoding="utf-8"?>
<chapter label="151"
  revision="$Id$"
  version="5" xml:id="service.serializer"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:ns5="http://www.w3.org/2000/svg"
  xmlns:ns4="http://www.w3.org/1998/Math/MathML"
  xmlns:ns3="http://www.w3.org/1999/xhtml"
  xmlns:ns="http://docbook.org/ns/docbook">
  <title>Serializer Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.serializer-version"
        linkend="org.osgi.service.serializer"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>Object Serialization has been part of Java since version 1.1 and has been widely used.
      However over time the realization became that making the fact that an object was serializable
      should not necessarily be part of its own definition and the <code>java.io.Serializable</code>
      interface, which marks an object as suitable for Java Serialization, became less and less
      used by developers. The desire was to keep the object's class clean and support serializations
      of these objects outside of their own code. Additionally patterns such as Java Beans and 
      Injection became popular. These mechanisms allowed entities outside of the objects to perform
      operations on behalf of the objects. 
    </para>
    <para>External parsers came up that provided ways to serialize and de-serialize 
      objects to formats such as XML and 
      JSON without the need to have the object declared Serializable. OSGi introduced the DTO
      <remark>add link</remark> to support serialization of arbirtrary data. 
    </para>
    <para>With OSGi R7 the Object Converter has been introduced. This converter can convert many 
      Java types into many other Java types and it can also be customized to literally support any
      object conversion that a developer might need. 
      This specification defines an OSGi Service that utilizes the OSGi Converter to serialize and
      de-serialize Java Objects to representations such as JSON and YAML. The Serializer service
      is keyed on the MIME-type of the serialization, so additional services can be added to support
      any other serialization format.
    </para>
  </section> 

  <section>
    <title>Entities</title>

    <para>The following entities are used in this specification</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Converter</emphasis> - yyy.</para>
      </listitem>

      <listitem>
        <para><emphasis>Serialization Service</emphasis> - A service capable of serializing and 
          deserializing Java objects to a file format such as JSON, XML or YAML
        </para>
      </listitem>

      <listitem>
        <para><emphasis>Serialized Resource</emphasis> - A YAML, JSON or orther resource
          containing the serialized representation of an object.</para>
      </listitem>

    </itemizedlist>
    <remark>Add entity diagram</remark>
  </section> 

  <section>
    <title>Serialization Service</title>

    <para>Serialization services can be found in the Service Registry. A serialization service can
      convert to a serialized format and deserialize the serialized format back to a runtime 
      object. Most serialization formats don't have the exact same data types as in Java so in 
      some cases cases serialization and deserialization may not yield a purely identical result. 
      For example JSON does not have the distinction between different types of numbers. So an 
      Integer serialized from a Java Map may be deserialized as a Long if no additional help is 
      provided to the serializer.
      However, serializer services are designed to use the OSGi Converter 
      <remark>link</remark>. Providing a customized converter can assist the serialization process.
      Additionally, the Converter can also be used on the resulting deserialized object to convert
      it into the correct data types, if needed.
    </para>

    <para>
      Serializers are obtained from the OSGi Service Registry by filtering on the 
      <emphasis>mimetype</emphasis> service property. The following service properties are defined
      by this specification to be declared on the Serializer service:

      <table>
        <title>Serializer Service Properties</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Service Property Name</entry>
              <entry>Type</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><code>mimetype</code></entry>
              <entry><code>String+</code></entry>
              <entry>The MIME type(s) supported by this serializer service</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      While Serializers can be used for any data type, this specification defines two portable
      serializations. The YAML Serialization service and the JSON Serialization service.
    </para>
  </section> 

  <section>
    <title>JSON Serializer Service</title>
    <para>
    </para>
  </section>

  <section>
    <title>Security</title>
    <para>...</para>
  </section> 

  <xi:include href="../../generated/javadoc/docbook/org.osgi.service.serializer.xml"/>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed><title><xref linkend="intro.core.release"
            xrefstyle="template:%t"/></title>https://www.osgi.org/developer/specifications/</bibliomixed>
    </bibliolist>
  </section>
</chapter>
