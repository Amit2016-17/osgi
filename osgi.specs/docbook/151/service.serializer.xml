<?xml version="1.0" encoding="utf-8"?>
<chapter label="151"
  revision="$Id$"
  version="5" xml:id="service.serializer"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:ns5="http://www.w3.org/2000/svg"
  xmlns:ns4="http://www.w3.org/1998/Math/MathML"
  xmlns:ns3="http://www.w3.org/1999/xhtml"
  xmlns:ns="http://docbook.org/ns/docbook">
  <title>Serializer Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.serializer-version"
        linkend="org.osgi.service.serializer"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>Object Serialization has been part of Java since version 1.1 and has been widely used.
      However over time the realization became that making the fact that an object was serializable
      should not necessarily be part of its own definition and the <code>java.io.Serializable</code>
      interface, which marks an object as suitable for Java Serialization, became less and less
      used by developers. The desire was to keep the object's class clean and support serializations
      of these objects outside of their own code. Additionally patterns such as Java Beans and 
      Injection became popular. These mechanisms allowed entities outside of the objects to perform
      operations on behalf of the objects. 
    </para>
    <para>External parsers came up that provided ways to serialize and de-serialize 
      objects to formats such as XML and 
      JSON without the need to have the object declared Serializable. OSGi introduced 
      <emphasis>Data Transfer Objects</emphasis> (DTOs)
      to support serialization of arbirtrary data. 
    </para>
    <para>With OSGi R7 the Object Converter has been introduced. This converter can convert many 
      Java types into many other Java types and it can also be customized to literally support any
      object conversion that a developer might need. 
      This specification defines an OSGi Service that can, with the help of the Converter, 
      serialize and
      de-serialize Java Objects to representations such as JSON and YAML. The Serializer service
      is found by looking for the MIME-type of the serialization on the service properties. 
      Additional service objects can be registered to support
      any other serialization formats.
    </para>
  </section> 

  <section>
    <title>Entities</title>

    <itemizedlist>
      <listitem>
        <para><emphasis>Converter</emphasis> - The <xref linkend="service.converter"/> is
          used to assist the serializer in converting Java objects to types supported by
          the serialized type.</para>
      </listitem>

      <listitem>
        <para><emphasis>Serialization Service</emphasis> - A service capable of serializing and 
          deserializing Java objects to a file format such as JSON, XML or YAML
        </para>
      </listitem>

      <listitem>
        <para><emphasis>Serialized Resource</emphasis> - A YAML, JSON or orther resource
          containing the serialized representation of an object.</para>
      </listitem>

    </itemizedlist>
    <remark>Add entity diagram</remark>
  </section> 

  <section>
    <title>Serialization Service</title>

    <para>Serialization services can be found in the Service Registry. A serialization service can
      convert to a serialized format and deserialize the serialized format back to a runtime 
      object. Most serialization formats don't have the exact same data types as Java
      serialization and subsequent deserialization may not yield a purely identical result. 
      For example JSON does not have the distinction between different types of numbers. So an 
      Integer serialized from a Java Map may be deserialized as a Long if no additional help is 
      provided to the serializer.
      However, serializer services are designed to use the <xref linkend="service.converter"/>.
    </para>
    <para>
      Providing a customized converter can assist the serialization process.
      Additionally, the Converter can also be used on the resulting deserialized object to convert
      it into the desired data types, if needed.
    </para>

    <para>
      Serializers are obtained from the OSGi Service Registry by filtering on the 
      <emphasis>mimetype</emphasis> service property. The following service properties are defined
      by this specification to be declared on the Serializer service:

      <table>
        <title>Serializer Service Properties</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Service Property Name</entry>
              <entry>Type</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><code>mimetype</code></entry>
              <entry><code>String+</code></entry>
              <entry>The MIME type(s) supported by this serializer service</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      While Serializers can be used for any format, this specification defines two portable
      serializations. The YAML Serialization service and the JSON Serialization service.
    </para>
  </section> 

  <section>
    <title>JSON Serializer Service</title>
    <para>
      The JSON Serialization Service can serialize objects that can be converted to a Map structure
      to JSON. It can also convert JSON back to Java Objects.
      The JSON Serializer provides a portable serialization that all serializers compliant with this
      specification should support.
    </para>

    <section>
      <title>MIME type</title>
      <para><code>application/json</code></para>
    </section>

    <section>
      <title>Conversions</title>
      <para>
        JSON supports a subset of datatypes supported in Java. When converting to JSON,
        the following conversions are made:
        <table>
          <title>JSON Conversions</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>From Java type</entry>
                <entry>JSON type</entry>
                <entry>To Java type</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><code>Boolean</code></entry>
                <entry>Boolean</entry>
                <entry><code>Boolean</code></entry>
              </row>
              <row>
                <entry><code>Number</code> or subclass</entry>
                <entry>Number</entry>
                <entry>The smallest numerical Java boxed primitive type that can hold the value.
                  If the value contains no decimal point integer types are used. 
                  Otherwise floating point types are used. If no primitive is big enough to hold
                  the value a <code>BigInteger</code> or <code>BigDecimal</code> is used.</entry>
              </row>
              <row>
                <entry><code>String</code></entry>
                <entry>String</entry>
                <entry><code>String</code></entry>
              </row>
              <row>
                <entry>Array</entry>
                <entry>Array</entry>
                <entry>Array, contents are boxed</entry>
              </row>
              <row>
                <entry><code>Collection</code> or subclass</entry>
                <entry>Array</entry>
                <entry>Array, contents are boxed</entry>
              </row>
              <row>
                <entry><code>Map</code> or subclass</entry>
                <entry>Object</entry>
                <entry>The OSGi Converter is used to create the map to hold the object data.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </para>

      <section>
        <title>Other types</title>
        <para>
          Other types are converted to JSON with the help of the Converter. If the source type is a 
          map-like structure, as described
          in <xref linkend="service.converter.special.cases.maps"/>, 
          the object is converted into a map
          before it is converted to a JSON Object. Otherwise it is converted to String before it is 
          inserted in the JSON. 
        </para>
        <para>
          Conversion back from JSON to the target type is done by inspecting the target data type 
          and using the converter to convert to the target type.
        </para>
      </section>
    </section>
    <section>
      <title>Example</title>
      <para>
        The example below shows how the JSON Serializer can be used, the service is obtained
        via a Declarative Services @Reference annotation.
        <programlisting>@Reference(target="mimetype=application/json")
private Serializer jsonSerializer;

private void myMethod() {
  Map&lt;String, Object&gt; m = new LinkedHashMap&lt;&gt;();
  m.put("sKey", "a string");
  m.put("iKey", 42);
  m.put("bKey",  true);
  m.put("noKey", null);
  m.put("simpleArray", new int[] {1,2,3});

  Map&lt;String, Object&gt; m1 = new LinkedHashMap&lt;&gt;();
  m1.put("a", 1L);
  m1.put("b", "hello");
  m.put("simpleObject", m1);

  String json = jsonSerializer.serialize(m).toString(); </programlisting>
          The JSON produced will look as follows:
          <programlisting>{
  "sKey":"a string",
  "iKey":42,
  "bKey":true,
  "noKey":null,
  "simpleArray":[1,2,3],
  "simpleObject":{"a":1,"b":"hello"}
} </programlisting>
        Serializing the JSON back into Java is done with the 
        <xref linkend="org.osgi.service.serializer.Serializer.deserialize-Class-" xrefstyle="hyperlink"/> methods:
<programlisting>  Map dm = jsonSerializer.deserialize(Map.class).from(json);</programlisting>

      </para>
    </section>
  </section>

  <section>
    <title>YAML Serializer Service</title>
    <para>
      The YAML Serialization Service can serialize objects that can be converted to a Map structure
      to YAML. It can also convert YAML back to Java Objects.
    </para>
    <section>
      <title>MIME type</title>
      <para><code>text/yaml</code></para>
    </section>
    <section>
      <title>Convertsion</title>
      <para>
        YAML supports a subset of datatypes supported in Java. When converting to YAML the following
        convertsions are made:
        <table>
          <title>YAML Conversions</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>From Java type</entry>
                <entry>YAML type</entry>
                <entry>To Java type</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><code>Boolean</code></entry>
                <entry><code>!!bool</code></entry>
                <entry><code>Boolean</code></entry>
              </row>
              <row>
                <entry>Integer <code>Number</code> or subclass</entry>
                <entry><code>!!int</code></entry>
                <entry>The smallest numerical Java boxed non-floating point 
                  primitive type that can hold the value.
                  If no primitive is big enough to hold
                  the value a <code>BigInteger</code> is used.</entry>
              </row>
              <row>
                <entry>Floating point <code>Number</code> or subclass</entry>
                <entry><code>!!float</code></entry>
                <entry><code>double</code></entry>
              </row>
              <row>
                <entry><code>String</code></entry>
                <entry><code>!!str</code></entry>
                <entry><code>String</code></entry>
              </row>
              <row>
                <entry>Array</entry>
                <entry><code>!!seq</code></entry>
                <entry>Array, contents are boxed</entry>
              </row>
              <row>
                <entry><code>Collection</code> or subclass</entry>
                <entry><code>!!seq</code></entry>
                <entry>Array, contents are boxed</entry>
              </row>
              <row>
                <entry><code>Map</code> or subclass</entry>
                <entry><code>!!map</code></entry>
                <entry>The OSGi Converter is used to create the map to hold the object data.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </para>

      <section>
        <title>Other types</title>
        <para>
          Other types are converted to YAML with the help of the Converter. If the source type is a 
          map-like structure, as described
          in <xref linkend="service.converter.special.cases.maps"/>, 
          the object is converted into a map
          before it is converted to a YAML serialization. Otherwise it is converted to String before it is 
          inserted in the YAML stream. 
        </para>
        <para>
          Conversion back from YAML to the target type is done by inspecting the target data type 
          and using the converter to convert to the target type.
        </para>
      </section>
    </section>
    
    <section>
      <title>Example</title>
      <para>
        The example below shows how the YAML Serializer can be used, the service is obtained
        via a Declarative Services @Reference annotation.
        <programlisting>@Reference(target="mimetype=text/yaml")
private Serializer yamlSerializer;

private void myMethod() {
  Map&lt;String, Object&gt; m = new LinkedHashMap&lt;&gt;();
  m.put("sKey", "a string");
  m.put("iKey", 42);
  m.put("bKey",  true);
  m.put("noKey", null);
  m.put("simpleArray", new int[] {1,2,3});

  Map&lt;String, Object&gt; m1 = new LinkedHashMap&lt;&gt;();
  m1.put("a", 1L);
  m1.put("b", "hello");
  m.put("simpleObject", m1);

  String yaml = yamlSerializer.serialize(m).toString(); </programlisting>
          The YAML produced will look as follows:
          <programlisting>sKey: 'a string'
iKey: 42
bKey: true
noKey: 
simpleArray: 
  - 1
  - 2
  - 3
simpleObject: 
  a: 1
  b: 'hello' </programlisting>
        Serializing the YAML back into Java is done with the 
        <xref linkend="org.osgi.service.serializer.Serializer.deserialize-Class-" xrefstyle="hyperlink"/> methods:
<programlisting>  Map dm = yamlSerializer.deserialize(Map.class).from(yaml);</programlisting>

      </para>
    </section>
  </section>
  
  <section>
    <title>Security</title>
    <para>...</para>
  </section> 

  <xi:include href="../../generated/javadoc/docbook/org.osgi.service.serializer.xml"/>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed><title><xref linkend="intro.core.release"
            xrefstyle="template:%t"/></title>https://www.osgi.org/developer/specifications/</bibliomixed>
    </bibliolist>
  </section>
</chapter>
