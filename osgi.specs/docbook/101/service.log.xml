<?xml version="1.0" encoding="utf-8"?>
<chapter label="101"
         revision="$Id$"
         version="5" xml:id="service.log"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Log Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.log-version"
    linkend="org.osgi.service.log"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para xml:id="i1492311">The Log Service provides a general purpose message
    logger for the OSGi framework. It consists of several services: a service
    for obtaining Loggers to log information and other services for retrieving
    current or previously recorded log information.</para>

    <para>This specification defines the methods and semantics of interfaces
    which bundle developers can use to log entries and to retrieve log
    entries.</para>

    <para xml:id="i1294527">Bundles can use the Logger Factory to log
    information for the Operator. Other bundles, oriented toward management of
    the environment, can use the Log Stream Provider or Log Reader Service to
    retrieve Log Entry objects that were recorded recently or to receive Log
    Entry objects as they are logged by other bundles.</para>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Logger</emphasis> - An interface that allows a
          bundle to log information, including a message, a level, an
          exception, and a <code>ServiceReference</code> object.</para>
        </listitem>

        <listitem>
          <para><emphasis>LoggerFactory</emphasis> - The service interface
          that allows a bundle to obtain a Logger. A Logger is named and
          associated with a <code>Bundle</code> object.</para>
        </listitem>

        <listitem>
          <para><emphasis>LogService</emphasis> - The legacy service interface
          that allows a bundle to log information, including a message, a
          level, an exception, a <code>ServiceReference</code> object, and a
          <code>Bundle</code> object. The methods of this service are
          deprecated and it is recommended to use LoggerFactory and Loggers
          instead.</para>
        </listitem>

        <listitem>
          <para><emphasis>LogEntry</emphasis> - An interface that allows
          access to a log entry in the log. It includes all the information
          that can be logged through the Logger as well as a time stamp, a
          sequence number, thread information, and location
          information.</para>
        </listitem>

        <listitem>
          <para><emphasis>LogStreamProvider</emphasis> - A service interface
          that allows access to a PushStream of <code>LogEntry</code>
          objects.</para>
        </listitem>

        <listitem>
          <para><emphasis>LogReaderService</emphasis> - A service interface
          that allows access to a list of recent <code>LogEntry</code>
          objects, and allows the registration of a <code>LogListener</code>
          object that receives <code>LogEntry</code> objects as they are
          created.</para>
        </listitem>

        <listitem>
          <para><emphasis>LogListener</emphasis> - The interface for the
          listener to <code>LogEntry</code> objects. Must be registered with
          the Log Reader Service.</para>
        </listitem>

        <listitem>
          <para><emphasis>LoggerContext</emphasis> - An interface that allows
          the configuration of effective logging levels for a Bundle. The
          configuration can be set in Configuration Admin and via method
          calls.</para>
        </listitem>

        <listitem>
          <para><emphasis>LoggerAdmin</emphasis> - A service interface that
          allows for the configuration of logging. The service provides access
          to Logger Context objects.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>The Logger Interface</title>

    <para>The <xref linkend="org.osgi.service.log.Logger"
    xrefstyle="hyperlink"/> interface allows bundle developers to log messages
    that can be distributed to other bundles, which in turn can forward the
    logged entries to a file system, remote system, or some other destination.
    It is inspired by the ideas using in <xref
    linkend="service.log-slf4j.ref"/>.</para>

    <figure pgwide="1">
      <title>Log Class Diagram org.osgi.service.log package</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="4.000in"
                     contentwidth="5.000in" fileref="logservice-classes.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The <code>Logger</code> interface allows the bundle developer
    to:</para>

    <itemizedlist xml:id="i1294532">
      <listitem>
        <para>Specify a message, message parameters, and an exception to be
        logged.</para>
      </listitem>

      <listitem xml:id="i1294533">
        <para>Define the log level representing the severity of the message
        being logged. If the effective log level for the Logger does not impy
        the requested log level, then the logging request is ignored.</para>
      </listitem>

      <listitem>
        <para>Specify the Service associated with the log message.</para>
      </listitem>
    </itemizedlist>

    <para xml:id="i1294534">By obtaining a <code>Logger</code> object from the
    <xref linkend="org.osgi.service.log.LoggerFactory" xrefstyle="hyperlink"/>
    service, a bundle can start logging messages to the Log Service by calling
    one of the <code>Logger</code> methods.</para>

    <para>The <code>Logger</code> interface defines several methods for each
    of the defined log levels. The log levels are:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.log.LogLevel.AUDIT"
        xrefstyle="hyperlink"/> - This log level is used for information that
        must always be logged.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogLevel.ERROR"
        xrefstyle="hyperlink"/> - This log level is used for information about
        an error situation.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogLevel.WARN"
        xrefstyle="hyperlink"/> - This log level is used for information about
        a failure or unwanted situation that is not blocking.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogLevel.INFO"
        xrefstyle="hyperlink"/> - This log level is used for information about
        normal operation.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogLevel.DEBUG"
        xrefstyle="hyperlink"/> - This log level is used for detailed output
        for debugging operations.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogLevel.TRACE"
        xrefstyle="hyperlink"/> - This log level is used for large volume of
        output for tracing operations.</para>
      </listitem>
    </itemizedlist>

    <para xml:id="i1294535">Many of the <code>Logger</code> methods take a
    message format string and message parameters which are formatted together
    to create the log message. In the format string, use a left curly bracket
    (<code>'{' \u007B</code>) followed by a right curly bracket (<code>'}'
    \u007D</code>) as a place holder for a message parameter:
    <code>"{}"</code>. If you need to use the literal <code>"{}"</code> in the
    formatted message, precede the place holder with a reverse solidus
    (<code>'\' \u005C</code>): <code>"\\{}"</code>. If you need to place a
    backslash before the place holder, precede the reverse solidus with a
    reverse solidus: <code>"\\\\{}"</code>. </para>

    <para>You can also add a Throwable and/or ServiceReference to the
    generated <xref linkend="org.osgi.service.log.LogEntry"
    xrefstyle="hyperlink"/> by passing them to the logging methods as
    additional arguments to the <code>Logger</code> method. If the last
    argument is a Throwable or a ServiceReference, it is added to the
    generated <xref linkend="org.osgi.service.log.LogEntry"
    xrefstyle="hyperlink"/> and then, if the next to last argument is a
    ServiceReference or Throwable and not the same type as the last argument,
    it is also added to the generated <xref
    linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/>. These
    arguments will not be used as message parameters. For example: </para>

    <programlisting>logger.info("Found service {}.", serviceReference, serviceReference);
logger.warn("Something named {} happened.", name, serviceReference, throwable);
logger.error("Failed.", exception);</programlisting>

    <para>The following example code records error conditions as log
    messages.</para>

    <programlisting>try (InputStream in = Files.newInputStream(myFile)) {
    int b;
    while ((b = in.read()) != -1 ) {
      ...
    }
} catch (IOException e) {
    logger.error("Cannot access file {}", myFile, e);
}</programlisting>

    <para xml:id="i1294536">Notice that in addition to the error message, the
    exception itself is also logged. Providing this information can
    significantly simplify problem determination by the Operator.</para>
  </section>

  <section>
    <title>Obtaining a Logger</title>

    <para><xref linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/>
    objects can be obtained from the <xref
    linkend="org.osgi.service.log.LoggerFactory" xrefstyle="hyperlink"/>
    service. Loggers are named. Logger names should be in the form of a fully
    qualified Java class names with segments separated by full stop (<code>'.'
    \u002E</code>). For example:</para>

    <programlisting>com.foo.Bar</programlisting>

    <para>Logger names form a hierarchy. A logger name is said to be an
    ancestor of another logger name if the logger name followed by a full stop
    ('.' \u002E) is a prefix of the descendant logger name. The root logger
    name ("<code>ROOT</code>") is the top ancestor of the logger name
    hierarchy. For example:</para>

    <programlisting>com.foo.Bar
com.foo
com
ROOT</programlisting>

    <para>Normally the name of the class which is doing the logging is used as
    the logger name. There are Logger Factory methods which take
    <code>Class</code> objects to simplify this.</para>

    <programlisting>Logger logger = loggerFactory.getLogger(Bar.class);</programlisting>

    <para>The <xref linkend="org.osgi.service.log.LoggerFactory"
    xrefstyle="hyperlink"/> service can be used to obtain two types of Logger
    objects: <xref linkend="org.osgi.service.log.Logger"
    xrefstyle="hyperlink"/> and <xref
    linkend="org.osgi.service.log.FormatterLogger" xrefstyle="hyperlink"/>.
    The <xref linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/>
    object uses SLF4J-style (<code>"{}"</code>) place holders for message
    formatting. The <xref linkend="org.osgi.service.log.FormatterLogger"
    xrefstyle="hyperlink"/> object use printf-style place holders from
    <code>java.util.Formatter</code> for message formatting.</para>

    <programlisting>FormatterLogger logger = loggerFactory.getLogger(Bar.class,
  FormatterLogger.class);
logger.error("Cannot access file %s", myFile);</programlisting>

    <para>Some bundles, such as the Service Component Runtime implementation,
    may need to log on behalf of other bundles. The <xref
    linkend="org.osgi.service.log.LoggerFactory.getLogger-Bundle-String-Class-"
    xrefstyle="hyperlink"/> method can be used to obtain a <xref
    linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/> object
    associated with the specified bundle.</para>

    <programlisting>Logger logger = loggerFactory.getLogger(componentBundle,
  componentImplClass.getName(),
  Logger.class);</programlisting>
  </section>

  <section>
    <title>Logger Configuration</title>

    <para/>

    <figure pgwide="1">
      <title>Log Admin Class Diagram org.osgi.service.log.admin
      package</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="4.000in"
                     contentwidth="5.000in" fileref="logadmin-classes.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para/>
  </section>

  <section>
    <title>Log Level and Error Severity</title>

    <para>The <code>log</code> methods expect a log level indicating error
    severity, which can be used to filter log messages when they are
    retrieved. The severity levels are defined in the <code>LogService</code>
    interface.</para>

    <para>Callers must supply the log levels that they deem appropriate when
    making log requests.</para>

    <para>The following table lists the log levels.</para>

    <table>
      <title>Log Levels</title>

      <tgroup cols="2">
        <colspec colnum="1" colwidth="1.2*"/>

        <colspec colnum="2" colwidth="5*"/>

        <thead>
          <row>
            <entry>Level</entry>

            <entry>Descriptions</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><para><code>LOG_DEBUG</code></para></entry>

            <entry><para>Used for problem determination and may be irrelevant
            to anyone but the bundle developer.</para></entry>
          </row>

          <row>
            <entry><para><code>LOG_ERROR</code></para></entry>

            <entry><para>Indicates the bundle or service may not be
            functional. Action should be taken to correct this
            situation.</para></entry>
          </row>

          <row>
            <entry><para><code>LOG_INFO</code></para></entry>

            <entry><para>May be the result of any change in the bundle or
            service and does not indicate a problem.</para></entry>
          </row>

          <row>
            <entry><para><code>LOG_WARNING</code></para></entry>

            <entry><para>Indicates a bundle or service is still functioning
            but may experience problems in the future because of the warning
            condition.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section>
    <title>Log Stream Provider</title>

    <para/>

    <figure pgwide="1">
      <title>Log Stream Diagram org.osgi.service.log.stream package</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="3.000in"
                     contentwidth="5.000in" fileref="logstream-classes.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para/>
  </section>

  <section xml:id="i1210758">
    <title>Log Reader Service</title>

    <para>The Log Reader Service maintains a list of <code>LogEntry</code>
    objects called the <emphasis>log</emphasis>. The Log Reader Service is a
    service that bundle developers can use to retrieve information contained
    in this log, and receive notifications about <code>LogEntry</code> objects
    when they are created through the Log Service.</para>

    <para>The size of the log is implementation-specific, and it determines
    how far into the past the log entries go. Additionally, some log entries
    may not be recorded in the log in order to save space. In particular,
    <code>LOG_DEBUG</code> log entries may not be recorded. Note that this
    rule is implementation-dependent. Some implementations may allow a
    configurable policy to ignore certain <code>LogEntry</code> object
    types.</para>

    <para>The <code>LogReaderService</code> interface defines these methods
    for retrieving log entries.</para>

    <itemizedlist>
      <listitem>
        <para><code>getLog()</code> - This method retrieves past log entries
        as an enumeration with the most recent entry first.</para>
      </listitem>

      <listitem>
        <para><code>addLogListener(LogListener)</code> - This method is used
        to subscribe to the Log Reader Service in order to receive log
        messages as they occur. Unlike the previously recorded log entries,
        all log messages must be sent to subscribers of the Log Reader Service
        as they are recorded.</para>

        <para>A subscriber to the Log Reader Service must implement the
        <code>LogListener</code> interface.</para>

        <para>After a subscription to the Log Reader Service has been started,
        the subscriber's <code>LogListener.logged</code> method must be called
        with a <code>Log-Entry</code> object for the message each time a
        message is logged.</para>
      </listitem>
    </itemizedlist>

    <para>The <code>LogListener</code> interface defines the following
    method:</para>

    <itemizedlist>
      <listitem>
        <para><code>logged(LogEntry)</code> - This method is called for each
        <code>Log-Entry</code> object created. A Log Reader Service
        implementation must not filter entries to the <code>LogListener</code>
        interface as it is allowed to do for its log. A
        <code>LogListener</code> object should see all <code>LogEntry</code>
        objects that are created.</para>
      </listitem>
    </itemizedlist>

    <para>The delivery of <code>LogEntry</code> objects to the
    <code>LogListener</code> object should be done asynchronously.</para>
  </section>

  <section xml:id="i1231250">
    <title>Log Entry Interface</title>

    <para>The <xref linkend="org.osgi.service.log.LogEntry"
    xrefstyle="hyperlink"/> interface abstracts a log entry. It is a record of
    the information that was passed when an event was logged as well as
    information captured at the time the event was logged. The <xref
    linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/> interface
    defines these methods to retrieve this information.</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getBundle--"
        xrefstyle="hyperlink"/> - This method returns the Bundle object
        associated with the <xref linkend="org.osgi.service.log.Logger"
        xrefstyle="hyperlink"/> used to log the event.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getException--"
        xrefstyle="hyperlink"/> - This method returns the exception, if any,
        logged with the event. In some implementations, the returned exception
        may not be the original exception. To avoid references to a bundle
        defined exception class, thus preventing an uninstalled bundle from
        being garbage collected, the Log Service may return an exception
        object of an implementation defined Throwable subclass. This object
        will attempt to return as much information as possible, such as the
        message and stack trace, from the original exception object .</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getLoggerName--"
        xrefstyle="hyperlink"/> - This name of the <xref
        linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/> used to
        log the event.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getLogLevel--"
        xrefstyle="hyperlink"/> - This method returns the <xref
        linkend="org.osgi.service.log.LogLevel"
        xrefstyle="hyperlink"/>.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getMessage--"
        xrefstyle="hyperlink"/> - This method returns the parameterized
        message.</para>
      </listitem>

      <listitem>
        <para><xref
        linkend="org.osgi.service.log.LogEntry.getServiceReference--"
        xrefstyle="hyperlink"/> - This method returns the
        <code>ServiceReference</code>, if any, logged with the event..</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getTime--"
        xrefstyle="hyperlink"/> - This method returns the time that the log
        entry was created.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getSequence--"
        xrefstyle="hyperlink"/> - This method returns a sequence number which
        increases for each created log entry.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getThreadInfo--"
        xrefstyle="hyperlink"/> - This method returns information about the
        thread that created that logged the event.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getLocation--"
        xrefstyle="hyperlink"/> - This method returns a
        <code>StackTraceElement</code> about the caller that created that
        logged the event.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Mapping of Events</title>

    <para>Implementations of a Log Service must log Framework-generated events
    and map the information to <code>LogEntry</code> objects in a consistent
    way. Framework events must be treated exactly the same as other logged
    events and distributed to all <code>LogListener</code> objects that are
    associated with the Log Reader Service. The following sections define the
    mapping for the three different event types: Bundle, Service, and
    Framework.</para>

    <section>
      <title>Bundle Events Mapping</title>

      <para>A Bundle Event is mapped to a <code>LogEntry</code> object
      according to the following table.</para>

      <table>
        <title>Mapping of Bundle Events to Log Entries</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>Log Entry method</entry>

              <entry>Information about Bundle Event</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>getLevel()</code></entry>

              <entry><para><code>LOG_INFO</code></para></entry>
            </row>

            <row>
              <entry><code>getBundle()</code></entry>

              <entry><para>Identifies the bundle to which the event happened.
              In other words, it identifies the bundle that was installed,
              started, stopped, updated, or uninstalled. This identification
              is obtained by calling <code>getBundle()</code> on the
              <code>BundleEvent</code> object.</para></entry>
            </row>

            <row>
              <entry><code>getException()</code></entry>

              <entry><para><code>null</code></para></entry>
            </row>

            <row>
              <entry><code>getServiceReference()</code></entry>

              <entry><para><code>null</code></para></entry>
            </row>

            <row>
              <entry><code>getMessage()</code></entry>

              <entry><para>The message depends on the event
              type:</para><itemizedlist>
                  <listitem>
                    <para><code>INSTALLED</code> - "BundleEvent
                    INSTALLED"</para>
                  </listitem>

                  <listitem>
                    <para><code>STARTED</code> - "BundleEvent STARTED"</para>
                  </listitem>

                  <listitem>
                    <para><code>STOPPED</code> - "BundleEvent STOPPED"</para>
                  </listitem>

                  <listitem>
                    <para><code>UPDATED</code> - "BundleEvent UPDATED"</para>
                  </listitem>

                  <listitem>
                    <para><code>UNINSTALLED</code> - "BundleEvent
                    UNINSTALLED"</para>
                  </listitem>

                  <listitem>
                    <para><code>RESOLVED</code> - "BundleEvent
                    RESOLVED"</para>
                  </listitem>

                  <listitem>
                    <para><code>UNRESOLVED</code> - "BundleEvent
                    UNRESOLVED"</para>
                  </listitem>
                </itemizedlist></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Service Events Mapping</title>

      <para>A Service Event is mapped to a <code>LogEntry</code> object
      according to the following table.</para>

      <table>
        <title>Mapping of Service Events to Log Entries</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>Log Entry method</entry>

              <entry>Information about Service Event</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>getLevel()</code></entry>

              <entry><para><code>LOG_INFO</code>, except for the
              <code>ServiceEvent.MODIFIED</code> event. This event can happen
              frequently and contains relatively little information. It must
              be logged with a level of <code>LOG_DEBUG</code>.</para></entry>
            </row>

            <row>
              <entry><code>getBundle()</code></entry>

              <entry><para>Identifies the bundle that registered the service
              associated with this event. It is obtained by calling
              <code>getServiceReference().getBundle()</code> on the
              <code>ServiceEvent</code> object.</para></entry>
            </row>

            <row>
              <entry><code>getException()</code></entry>

              <entry><para><code>null</code></para></entry>
            </row>

            <row>
              <entry><code>getServiceReference()</code></entry>

              <entry><para>Identifies a reference to the service associated
              with the event. It is obtained by calling
              <code>getServiceReference()</code> on the
              <code>ServiceEvent</code> object.</para></entry>
            </row>

            <row>
              <entry><code>getMessage()</code></entry>

              <entry><para>This message depends on the actual event type. The
              messages are mapped as follows:</para><itemizedlist>
                  <listitem>
                    <para><code>REGISTERED</code> - "ServiceEvent
                    REGISTERED"</para>
                  </listitem>

                  <listitem>
                    <para><code>MODIFIED</code> - "ServiceEvent
                    MODIFIED"</para>
                  </listitem>

                  <listitem>
                    <para><code>UNREGISTERING</code> - "ServiceEvent
                    UNREGISTERING"</para>
                  </listitem>
                </itemizedlist></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Framework Events Mapping</title>

      <para>A Framework Event is mapped to a LogEntry object according to the
      following table.</para>

      <table>
        <title>Mapping of Framework Event to Log Entries</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>Log Entry method</entry>

              <entry>Information about Framework Event</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>getLevel()</code></entry>

              <entry><para><code>LOG_INFO</code>, except for the
              FrameworkEvent<code>.ERROR</code> event. This event represents
              an error and is logged with a level of
              <code>LOG_ERROR</code>.</para></entry>
            </row>

            <row>
              <entry><code>getBundle()</code></entry>

              <entry><para>Identifies the bundle associated with the event.
              This may be the system bundle. It is obtained by calling
              <code>getBundle()</code> on the <code>FrameworkEvent</code>
              object.</para></entry>
            </row>

            <row>
              <entry><code>getException()</code></entry>

              <entry><para>Identifies the exception associated with the error.
              This will be null for event types other than ERROR. It is
              obtained by calling <code>getThrowable()</code> on the
              <code>FrameworkEvent</code> object.</para></entry>
            </row>

            <row>
              <entry><code>getServiceReference()</code></entry>

              <entry><para><code>null</code></para></entry>
            </row>

            <row>
              <entry><code>getMessage()</code></entry>

              <entry><para>This message depends on the actual event type. The
              messages are mapped as follows:</para><itemizedlist>
                  <listitem>
                    <para><code>STARTED</code> - "FrameworkEvent
                    STARTED"</para>
                  </listitem>

                  <listitem>
                    <para><code>ERROR</code> - "FrameworkEvent ERROR"</para>
                  </listitem>

                  <listitem>
                    <para><code>PACKAGES_REFRESHED</code> - "FrameworkEvent
                    PACKAGES REFRESHED"</para>
                  </listitem>

                  <listitem>
                    <para><code>STARTLEVEL_CHANGED</code> - "FrameworkEvent
                    STARTLEVEL CHANGED"</para>
                  </listitem>

                  <listitem>
                    <para><code>WARNING</code> - "FrameworkEvent
                    WARNING"</para>
                  </listitem>

                  <listitem>
                    <para><code>INFO</code> - "FrameworkEvent INFO"</para>
                  </listitem>
                </itemizedlist></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="i1479168">
      <title>Log Events</title>

      <para>Log events must be delivered by the Log Service implementation to
      the Event Admin service (if present) asynchronously under the
      topic:</para>

      <programlisting>org/osgi/service/log/LogEntry/&lt;event type&gt;</programlisting>

      <para>The logging level is used as event type:</para>

      <programlisting>LOG_ERROR
LOG_WARNING
LOG_INFO
LOG_DEBUG
LOG_OTHER  (when event is not recognized)</programlisting>

      <para>The properties of a log event are:</para>

      <itemizedlist>
        <listitem>
          <para><code>bundle.id</code> - (Long) The source bundle's id.</para>
        </listitem>

        <listitem>
          <para><code>bundle.symbolicName</code> - (<code>String</code>) The
          source bundle's symbolic name. Only set if not
          <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><code>bundle</code> - (<code>Bundle</code>) The source
          bundle.</para>
        </listitem>

        <listitem>
          <para><code>log.level</code> - (<code>Integer</code>) The log
          level.</para>
        </listitem>

        <listitem>
          <para><code>message</code> - (<code>String</code>) The log
          message.</para>
        </listitem>

        <listitem>
          <para><code>timestamp</code> - (<code>Long</code>) The log entry's
          timestamp.</para>
        </listitem>

        <listitem>
          <para>log.entry - (<code>LogEntry</code>) The LogEntry
          object.</para>
        </listitem>
      </itemizedlist>

      <para>If the log entry has an associated Exception:</para>

      <itemizedlist>
        <listitem>
          <para><code>exception.class</code> - (<code>String</code>) The
          fully-qualified class name of the attached exception. Only set if
          the <code>getException</code>method returns a non-<code>null</code>
          value.</para>
        </listitem>

        <listitem>
          <para><code>exception.message</code> - (<code>String</code>) The
          message of the attached Exception. Only set if the Exception message
          is not <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><code>exception</code> - (<code>Throwable</code>) The
          Exception returned by the <code>getException</code> method.</para>
        </listitem>
      </itemizedlist>

      <para>If the <code>getServiceReference</code> method returns a non-
      <code>null</code> value:</para>

      <itemizedlist>
        <listitem>
          <para><code>service</code> - (<code>ServiceReference</code>) The
          result of the <code>getServiceReference</code> method.</para>
        </listitem>

        <listitem>
          <para><code>service.id</code> - (<code>Long</code>) The id of the
          service.</para>
        </listitem>

        <listitem>
          <para><code>service.pid</code> - (<code>String</code>) The service's
          persistent identity. Only set if the <code>service.pid</code>
          service property is not <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><code>service.objectClass</code> - (<code>String[]</code>) The
          object class of the service object.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Log Service</title>

    <para>The members of the <xref linkend="org.osgi.service.log.LogService"
    xrefstyle="hyperlink"/> interface are deprecated. Its <code>log</code>
    methods can still be used by bundles. These <code>log</code> methods are
    now specified to log to the Logger with the logger name
    <code>"LogService"</code> which allows legacy logging to be configured as
    specified above. Furthermore, the integer log level values used with the
    <code>log</code> methods are mapped to the new LogLevels as
    follows:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.log.LogService.LOG_ERROR"
        xrefstyle="hyperlink"/> is mapped to <xref
        linkend="org.osgi.service.log.LogLevel.ERROR"
        xrefstyle="hyperlink"/>.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogService.LOG_WARNING"
        xrefstyle="hyperlink"/> is mapped to <xref
        linkend="org.osgi.service.log.LogLevel.WARN"
        xrefstyle="hyperlink"/>.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogService.LOG_INFO"
        xrefstyle="hyperlink"/> is mapped to <xref
        linkend="org.osgi.service.log.LogLevel.INFO"
        xrefstyle="hyperlink"/>.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogService.LOG_DEBUG"
        xrefstyle="hyperlink"/> is mapped to <xref
        linkend="org.osgi.service.log.LogLevel.DEBUG"
        xrefstyle="hyperlink"/>.</para>
      </listitem>

      <listitem>
        <para>Any other value is mapped to <xref
        linkend="org.osgi.service.log.LogLevel.TRACE"
        xrefstyle="hyperlink"/>.</para>
      </listitem>
    </itemizedlist>

    <para>The integer log level value is stored in the generated <xref
    linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/> to be
    returned by <xref linkend="org.osgi.service.log.LogEntry.getLevel--"
    xrefstyle="hyperlink"/>.</para>
  </section>

  <section>
    <title>Security</title>

    <para>The Log Service should only be implemented by trusted bundles. This
    bundle requires <code>ServicePermission[LogService|LogReaderService,
    REGISTER]</code>. Virtually all bundles should get
    <code>ServicePermission[LogService, GET]</code>. The
    <code>ServicePermission[LogReaderService, GET]</code> should only be
    assigned to trusted bundles.</para>
  </section>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.service.log.xml"/>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.service.log.admin.xml"/>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.service.log.stream.xml"/>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed
      xml:id="service.log-slf4j.ref"><title>SLF4J</title>http://www.slf4j.org</bibliomixed>
    </bibliolist>
  </section>

  <section>
    <title>Changes</title>

    <itemizedlist>
      <listitem>
        <para><remark>BJH Need to list major changes</remark>. </para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
