<?xml version="1.0" encoding="utf-8"?>
<chapter label="141"
         version="5"
         xml:id="service.dal.functions"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Device Abstraction Layer Functions</title>
  <info>
    <releaseinfo xml:id="service.dal.functions-version">Version 1.0</releaseinfo>
  </info>
  <section xml:id="service.dal.functions.introduction">
    <title>Introduction</title>
    <para>
      Concrete function interfaces have to be defined to unify the access
      and control of the basic operations and related properties.
      The current section specifies the minimal basic set of such functionality.
      It can be reused and extended to cover more specific scenarios.
      They are about the control, monitoring and metering information.
    </para>
  </section>
  <section xml:id="service.dal.functions.boolean.control">
    <title>BooleanControl Function</title>
    <para>
      <code>BooleanControl</code> function provides a binary control support.
      The property eventing must follow the definition of Device Abstraction Layer,
      <xref linkend="service.dal.function.event"/>.
      The full function definition is available in the next tables.
    </para>
    <table>
      <title>BooleanControl Operations</title>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><code>reverse</code></entry>
            <entry>
              Reverses the <code>BooleanControl</code> state.
              If the current state represents <code>true</code> value,
              it'll be reversed to <code>false</code>.
              If the current state represents <code>false</code> value,
              it'll be reversed to <code>true</code>.
            </entry>
          </row>
          <row>
            <entry><code>setTrue</code></entry>
            <entry>
              Sets the <code>BooleanControl</code> state to <code>true</code> value.
            </entry>
          </row>
          <row>
            <entry><code>setFalse</code></entry>
            <entry>
              Sets the <code>BooleanControl</code> state to <code>false</code> value.
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>BooleanControl Properties</title>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><code>data</code></entry>
            <entry>
              Contains the current state of <code>BooleanControl</code>.
              The property access can be: readable, writable and eventable.
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>
      Some possible types: light, door, window, power, other type defined in
      <code>org.osgi.service.dal.functions.Types</code> or vendor specific type.
    </para>
    <para>
      <code>BooleanData</code> data structure is used to provide information about
      the function state. That data object contains the boolean value,
      the value collecting time and additional metadata.
      The immutable <code>BooleanData.value</code> field is accessible with
      <code>BooleanData.getValue()</code> getter.
    </para>
    <para>
      The next code snippet sets to <code>true</code> all
      <code>BooleanControl</code> functions.
      <programlisting>ServiceReference[] booleanControlSRefs = context.getServiceReferences(
      BooleanControl.class.getName(), null);
if (null == booleanControlSRefs) {
  return; // no such services
}
for (int i = 0; i &lt; booleanControlSRefs.length; i++) {
  BooleanControl booleanControl = (BooleanControl) context.getService(
      binaryControlSRefs[i]);
  if (null != booleanControl) {
    booleanControl.setTrue();
  }
}</programlisting>
    </para>
  </section>
  <section xml:id="service.dal.functions.boolean.sensor">
    <title>BooleanSensor Function</title>
    <para>
      <code>BooleanSensor</code> function provides binary sensor monitoring.
      It reports its state when an important event is available.
      There are no operations.
      The property eventing must follow the definition of Device Abstraction Layer,
      <xref linkend="service.dal.function.event"/>.
      The full function definition is available in the next tables.
    </para>
    <table>
      <title>BooleanSensor Properties</title>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><code>data</code></entry>
            <entry>
              Contains the current state of <code>BooleanSensor</code>.
              The property access can be: readable and eventable.
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>
      Some possible types: light, gas, smoke, door, window, power, rain, contact,
      fire, occupancy, water, motion, other type defined in
      <code>org.osgi.service.dal.functions.Types</code> or vendor specific type.
    </para>
    <para>
      <code>BooleanSensor</code> and <code>BooleanControl</code> are using
      the same <code>BooleanData</code> data structure to provide information
      about the state.
      For more details see the definition in <xref linkend="service.dal.functions.boolean.control"/>.
    </para>
  </section>
  <section xml:id="service.dal.functions.multi.level.control">
    <title>MultiLevelControl Function</title>
    <para>
      <code>MultiLevelControl</code> function provides multi-level control support.
      The property eventing must follow the definition of Device Abstraction Layer,
      <xref linkend="service.dal.function.event"/>.
      The full function definition is available in the next tables.
    </para>
    <table>
      <title>MultiLevelControl Properties</title>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><code>data</code></entry>
            <entry>
              Contains the current state of <code>MultiLevelControl</code>.
              The property access can be: readable, writable and eventable.
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>
      Some possible types: light, temperature, flow, pressure, humidity, gas,
      smoke, door, window, liquid, power, noisiness, other type defined in
      <code>org.osgi.service.dal.functions.Types</code> or vendor specific type.
    </para>
    <para>
      <code>LevelData</code> data structure is used to provide information about
      the function level. That data object contains the <code>BigDecimal</code>
      value and the value unit.
      The measurement unit is used as it's defined in Device Abstraction Layer,
      <xref linkend="service.dal.function.properties"/>.
      The immutable <code>LevelData.unit</code> field is accessible with
      <code>LevelData.getUnit()</code> getter.
      The immutable <code>LevelData.level</code> field is accessible with
      <code>LevelData.getLevel()</code> getter.
    </para>
  </section>
  <section xml:id="service.dal.functions.multi.level.sensor">
    <title>MultiLevelSensor Function</title>
    <para>
      <code>MultiLevelSensor</code> function provides multi-level sensor monitoring.
      It reports its state when an important event is available.
      There are no operations.
      The property eventing must follow the definition of Device Abstraction Later,
      <xref linkend="service.dal.function.event"/>.
      The full function definition is available in the next tables.
    </para>
    <table>
      <title>MultiLevelControl Properties</title>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><code>data</code></entry>
            <entry>
              Contains the current state of <code>MultiLevelSensor</code>.
              The property access can be: readable and eventable.
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>
      Some possible types: light, temperature, flow, pressure, humidity, gas,
      smoke, door, window, liquid, power, noisiness, rain, other type defined in
      <code>org.osgi.service.dal.functions.Types</code> or vendor specific type.
    </para>
    <para>
      <code>MultiLevelSensor</code> and <code>MultiLevelControl</code> are using
      the same <code>LevelData</code> data structure to provide information about
      the level.
      For more details see the definition of
      <xref linkend="service.dal.functions.multi.level.control"/>.
    </para>
  </section>
  <section xml:id="service.dal.functions.meter">
    <title>Meter Function</title>
    <para>
      <code>Meter</code> function can measure metering information.
    </para>
    <table>
      <title>Meter Operations</title>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><code>resetTotal</code></entry>
            <entry>Resets the total metering info.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Meter Properties</title>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><code>total</code></entry>
            <entry>
              Contains the total consumption.
              It has been measured since the last call of <code>resetTotal</code> or
              device initial run. The property access is readable.
            </entry>
          </row>
          <row>
            <entry><code>current</code></entry>
            <entry>
              Contains the current consumption.
              The property is readable.
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>
      Some possible types: pressure, gas, power, water, heat, cold, other type
      defined in <code>org.osgi.service.dal.functions.Types</code>
      or vendor specific type.
    </para>
    <para>
      <code>Meter</code> function is using the same <code>LevelData</code> data
      structure as  <code>MultiLevelSensor</code> and <code>MultiLevelControl</code>
      to provide metering information.
      For more details see the definition of
      <xref linkend="service.dal.functions.multi.level.control"/>.
      The property eventing must follow the definition of Device Abstraction Layer,
      <xref linkend="service.dal.function.event"/>.
    </para>
    <para>
      <code>Meter</code> function service can be optionally
      registered with <code>Meter.SERVICE_FLOW</code> service property.
      The value type is <code>java.lang.String</code>.
      It contains the metering flow. Currently, the flow can be
      <code>Meter.FLOW_IN</code> or <code>Meter.FLOW_OUT</code>.
    </para>
  </section>
  <section xml:id="service.dal.functions.alarm">
    <title>Alarm Function</title>
    <para>
      <code>Alarm</code> function provides alarm sensor support.
      There is only one eventable property and no operations.
      The property eventing must follow the definition of Device Abstraction Layer,
      <xref linkend="service.dal.function.event"/>.
      The full function definition is available in the next tables.
    </para>
    <table>
      <title>BooleanSensor Properties</title>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><code>alarm</code></entry>
            <entry>
              Specifies the alarm property name. The property is eventable.
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>
      <code>AlarmData</code> data structure is used to provide information about
      the available alarm. That data object contains the alarm type and severity.
    </para>
  </section>
  <section xml:id="service.dal.functions.keypad">
    <title>Keypad Function</title>
    <para>
      <code>Keypad</code> function provides support for keypad control.
      A keypad typically consists of one or more keys/buttons,
      which can be discerned. Different types of key presses like short and long
      press can typically also be detected.
      There is only one eventable property and no operations.
      The property eventing must follow the definition of Device Abstraction Layer,
      <xref linkend="service.dal.function.event"/>.
      The full function definition is available in the next tables.
    </para>
    <table>
      <title>Keypad Properties</title>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><code>key</code></entry>
            <entry>
              Specifies a property name for a key from the keypad.
              The property is eventable.
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>
      <code>KeypadData</code> data structure is used to provide information
      when a change with some key from device keypad has occurred.
      That data object contains the event type, key code and key name.
      Currently, there are a few predefined event types:
      <itemizedlist>
        <listitem>
          <emphasis>EVENT_TYPE_PRESSED</emphasis> – used for a key pressed;
        </listitem>
        <listitem>
          <emphasis>EVENT_TYPE_PRESSED_LONG</emphasis> –
          used for a long key pressed;
        </listitem>
        <listitem>
          <emphasis>EVENT_TYPE_PRESSED_DOUBLE</emphasis> –
          used for a double key pressed;
        </listitem>
        <listitem>
          <emphasis>EVENT_TYPE_PRESSED_DOUBLE_LONG</emphasis> –
          used for a double and long key pressed;
        </listitem>
        <listitem>
          <emphasis>EVENT_TYPE_RELEASED</emphasis> – used for a key released.
        </listitem>
        <listitem>
          <emphasis>EVENT_TYPE_UNKNOWN</emphasis> –
          represents an unknown keypad event type.
        </listitem>
      </itemizedlist>
    </para>
  </section>
  <section xml:id="service.dal.functions.wake.up">
    <title>WakeUp Function</title>
    <para>
      <code>WakeUp</code> function provides device awake monitoring and management.
      It's especially applicable to battery-operated devices.
      Such device can notify the system that it's awake and can receive commands
      with an event to property <code>PROPERTY_AWAKE</code>.
      The property eventing must follow the definition of Device Abstraction Layer,
      <xref linkend="service.dal.function.event"/>.
    </para>
    <para>
      The device can periodically wake up for commands.
      The interval can be managed with
      <code>PROPERTY_WAKE_UP_INTERVAL</code> property.
    </para>
    <para>
      The application can minimize the power consumption with
      <code>sleep()</code> operation.
      As a result, the device will sleep and will not receive commands
      to the next awake.
    </para>
    <table>
      <title>WakeUp Operations</title>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><code>sleep</code></entry>
            <entry>
              The device is forced to sleep to minimize the power consumption.
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>WakeUp Properties</title>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><code>awake</code></entry>
            <entry>
              Specifies the awake eventable property name.
              If the device is awake, it will trigger a property event.
              The property value type is <code>BooleanData</code>.
            </entry>
          </row>
          <row>
            <entry><code>wakeUpInterval</code></entry>
            <entry>
              Specifies the wake up interval.
              The device can periodically wake up and receive commands.
              That interval is managed by this property.
              The property can be readable and writable.
              The property value type is <code>LevelData</code>.
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <xi:include href="../../generated/javadoc/docbook/org.osgi.service.dal.functions.xml"/>
</chapter>
