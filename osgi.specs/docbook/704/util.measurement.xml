<?xml version="1.0" encoding="utf-8"?>
<chapter label="704"
         revision="$Id$"
         version="5" xml:id="i1309363" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Measurement and State Specification</title>

  <info xml:id="i1461918">
    <releaseinfo>Version 1.0</releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The <code>Measurement</code> class is a utility that provides a
    consistent way of handling a diverse range of measurements for bundle
    developers. Its purpose is to simplify the correct handling of
    measurements in OSGi Service Platforms.</para>

    <para>OSGi bundle developers from all over the world have different
    preferences for measurement units, such as feet versus meters. In an OSGi
    environment, bundles developed in different parts of the world can and
    will exchange measurements when collaborating.</para>

    <para>Distributing a measurement such as a simple floating point number
    requires the correct and equal understanding of the measurement’s semantic
    by both the sender and the receiver. Numerous accidents have occurred due
    to misunderstandings between the sender and receiver because there are so
    many different ways to represent the same value. For example, on September
    23, 1999, the Mars Polar Lander was lost because calculations used to
    program the craft's trajectory were input with English units while the
    operation documents specified metric units. See <phrase role="xref"> <xref
    linkend="i1364247" xrefstyle="Reference"/></phrase> for more
    information.</para>

    <para>This Measurement and State Specification defines the norm that
    should be used by all applications that execute in an OSGi Service
    Platform. This specification also provides utility classes.</para>

    <section>
      <title>Measurement Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Numerical error </emphasis>– All floating point
          measurements should be able to have a numerical error.</para>
        </listitem>

        <listitem>
          <para><emphasis>Numerical error calculations
          simplification</emphasis> – Support should be provided to simplify
          measurements calculations.</para>
        </listitem>

        <listitem>
          <para><emphasis>Unit conflict resolution </emphasis>– It must not be
          possible to perform addition or subtraction with different units
          when they are not compatible. For example, it must not be possible
          to add meters to amperes or watts to pascals.</para>
        </listitem>

        <listitem>
          <para><emphasis>Unit coercion</emphasis> – Multiplication and
          division operations involving more than one type of measurement must
          result in a different unit. For example, if meters are divided by
          seconds, the result must be a new unit that represents
          <code>m/s</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Time-stamp</emphasis> – Measurements should contain
          a time-stamp so that bundles can determine the age of a particular
          measurement.</para>
        </listitem>

        <listitem>
          <para><emphasis>Support for floating and discrete values</emphasis>
          – Both floating point values (64 bit Java <code>double</code>
          floats) and discrete measurements (32 bit Java <code>int</code>)
          should be supported.</para>
        </listitem>

        <listitem>
          <para><emphasis>Consistency</emphasis> – The method of error
          calculation and handling of unit types should be consistent.</para>
        </listitem>

        <listitem>
          <para><emphasis>Presentation</emphasis> – The format of measurements
          and specified units should be easy to read and understand.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Measurement Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Measurement object </emphasis>– A
          <code>Measurement</code> object contains a <code>double</code>
          value, a <code>double</code> error, and a long time-stamp. It is
          associated with a <code>Unit</code> object that represents its
          <emphasis>type</emphasis>.</para>
        </listitem>

        <listitem>
          <para><emphasis>State</emphasis> <emphasis>object</emphasis> – A
          State object contains a discrete measurement (<code>int</code>) with
          a time-stamp and a name.</para>
        </listitem>

        <listitem>
          <para><emphasis>Unit</emphasis> <emphasis>object</emphasis> – A
          <code>Unit</code> object represents a unit such as meter, second,
          mol, or Pascal. A number of <code>Unit</code> objects are predefined
          and have common names. Other <code>Unit</code> objects are created
          as needed from the 7 basic Système International d’Unité (SI) units.
          Different units are <emphasis>not</emphasis> used when a conversion
          is sufficient. For example, the unit of a <code>Measurement</code>
          object for length is <emphasis>always</emphasis> meters. If the
          length is needed in feet, then the number of feet is calculated by
          multiplying the value of the <code>Measurement</code> object in
          meters with the necessary conversion factor.</para>
        </listitem>

        <listitem>
          <para><emphasis>Error</emphasis> – When a measurement is taken, it
          is <emphasis>never</emphasis> accurate. This specification defines
          the error as the value that is added and subtracted to the value to
          produce an interval, where the probability is 95% that the actual
          value falls within this interval.</para>
        </listitem>

        <listitem>
          <para><emphasis>Unit</emphasis> – A unit is the
          <emphasis>type</emphasis> of a measurement: meter, feet, liter,
          gallon etc.</para>
        </listitem>

        <listitem>
          <para><emphasis>Base Unit </emphasis>– One of the 7 base units
          defined in the SI.</para>
        </listitem>

        <listitem xml:id="i1345246">
          <para><emphasis>Derived SI unit</emphasis> – A unit is a derived SI
          unit when it is a combination of exponentiated base units. For
          example, a volt (<code>V</code>) is a derived unit because it can be
          expressed as ( <code>m</code><superscript>2</superscript>
          <symbol>×</symbol> <code>kg</code> ) / (
          <code>s</code><superscript>3</superscript> <symbol>×</symbol>
          <code>A</code> ), where <code>m</code>, <code>kg</code>,
          <code>s</code> and <code>A</code> are all base units.</para>
        </listitem>

        <listitem>
          <para><emphasis>Quantitative derivation </emphasis>– A unit is
          quantitatively derived when it is converted to one of the base units
          or derived units using a conversion formula. For example, kilometers
          (<code>km</code>) can be converted to meters (<code>m</code>),
          gallons can be converted to liters, or horsepower can be converted
          to watts.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>, org.osgi.util.measurement</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.053in"
                       contentwidth="6.500in" fileref="GRAPHIC1"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>Measurement Object</title>

    <para>A <code>Measurement</code> object contains a value, an error, and a
    time-stamp It is linked to a <code>Unit</code> object that describes the
    measurement unit in an SI Base Unit or Derived SI Unit.</para>

    <section>
      <title>Value</title>

      <para>The value of the <code>Measurement</code> object is the measured
      value. It is set in a constructor. The type of the value is
      <code>double.</code></para>
    </section>

    <section>
      <title>Error</title>

      <para>The <code>Measurement</code> object can contain a numerical error.
      This error specifies an interval by adding and subtracting the error
      value from the measured value. The type of the error is
      <code>double</code>. A valid error value indicates that the actual
      measured value has a 95% chance of falling within this interval (see
      Figure 2). If the error is not known it should be represented as a
      <code>Double.NaN</code>.</para>

      <figure xml:id="i1243058">
        <title>The Error Interval</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.208in"
                       contentwidth="7.018in" fileref="GRAPHIC2"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Time-stamp</title>

      <para>When a <code>Measurement</code> object is created, the time-stamp
      can be set. A time-stamp is a <code>long</code> value representing the
      number of milliseconds since the epoch midnight of January 1, 1970, UTC
      (this is the value from <code>System.currentTimeMillis()</code>
      method).</para>

      <para>By default, a time-stamp is not set because the call to
      <code>System.currentTimeMillis()</code> incurs overhead. If the
      time-stamp is not set when the <code>Measurement</code> object is
      created, then its default value is zero. If the time-stamp is set, the
      creator of the <code>Measurement</code> object must give the time as an
      argument to the constructor. For example:</para>

      <programlisting>Measurement m = new Measurement( 
    v, e, null, System.currentTimeMillis() );</programlisting>
    </section>
  </section>

  <section>
    <title>Error Calculations</title>

    <para xml:id="i1345264">Once a measurement is taken, it often is used in
    calculations. The error value assigned to the result of a calculation
    depends largely on the error values of the operands. Therefore, the
    <code>Measurement</code> class offers addition, subtraction,
    multiplication, and division functions for measurements and constants.
    These functions take the error into account when performing the specific
    operation.</para>

    <para>The <code>Measurement</code> class uses absolute errors and has
    methods to calculate a new absolute error when multiplication, division,
    addition, or subtraction is performed. Error calculations must therefore
    adhere to the rules listed in <phrase role="xref">Table 704.1</phrase> .
    In this table, <symbol>Δ</symbol><emphasis>a</emphasis> is the absolute
    positive error in a value <emphasis>a</emphasis> and <symbol>Δ</symbol>
    <emphasis>b</emphasis> is the absolute positive error in a value
    <emphasis>b</emphasis>. <emphasis>c</emphasis> is a constant floating
    point value without an error.</para>

    <table>
      <title>Error Calculation Rules</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="1*"/>

        <colspec colnum="2" colwidth="2*"/>

        <colspec colnum="3" colwidth="2*"/>

        <thead>
          <row>
            <entry>Calculation</entry>

            <entry>Function</entry>

            <entry>Error</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><para><emphasis>a </emphasis><symbol>×</symbol><emphasis>
            b</emphasis></para></entry>

            <entry><code>mul(Measurement)</code></entry>

            <entry><para>| <symbol>Δ</symbol><emphasis>a</emphasis>
            <symbol>×</symbol> <emphasis> b </emphasis>| + |
            <emphasis>a</emphasis> <symbol>×</symbol> <emphasis>
            </emphasis><symbol>Δ</symbol><emphasis>b</emphasis>
            |</para></entry>
          </row>

          <row>
            <entry><para><emphasis>a </emphasis>/<emphasis>
            b</emphasis></para></entry>

            <entry><code>div(Measurement)</code></entry>

            <entry><para>( | <symbol>Δ</symbol><emphasis>a</emphasis>
            <symbol>×</symbol> <emphasis> b </emphasis>| + |
            <emphasis>a</emphasis> <symbol>×</symbol> <emphasis>
            </emphasis><symbol>Δ</symbol><emphasis>b</emphasis> | ) /
            <emphasis>b</emphasis><superscript>2</superscript></para></entry>
          </row>

          <row>
            <entry><para><emphasis>a</emphasis> +<emphasis>
            b</emphasis></para></entry>

            <entry><code>add(Measurement)</code></entry>

            <entry><para><symbol>Δ</symbol><emphasis>a +
            </emphasis><symbol>Δ</symbol>
            <emphasis>b</emphasis></para></entry>
          </row>

          <row>
            <entry><para><emphasis>a</emphasis> –<emphasis>
            b</emphasis></para></entry>

            <entry><code>sub(Measurement)</code></entry>

            <entry><para><symbol>Δ</symbol><emphasis>a +
            </emphasis><symbol>Δ</symbol>
            <emphasis>b</emphasis></para></entry>
          </row>

          <row>
            <entry><para><emphasis>a</emphasis> <symbol>×</symbol><emphasis>
            c</emphasis></para></entry>

            <entry><code>mul(double)</code></entry>

            <entry><para>| <symbol>Δ</symbol><emphasis>a
            </emphasis><symbol>×</symbol> <emphasis> c</emphasis>
            |</para></entry>
          </row>

          <row>
            <entry><para><emphasis>a </emphasis>/<emphasis>
            c</emphasis></para></entry>

            <entry><code>div(double)</code></entry>

            <entry><para>| <symbol>Δ</symbol><emphasis>a
            </emphasis>/<emphasis> c</emphasis> |</para></entry>
          </row>

          <row>
            <entry><para><emphasis>a </emphasis>+<emphasis>
            c</emphasis></para></entry>

            <entry><code>add(double)</code></entry>

            <entry><para><symbol>Δ</symbol><emphasis>a</emphasis></para></entry>
          </row>

          <row>
            <entry><para><emphasis>a </emphasis>–<emphasis>
            c</emphasis></para></entry>

            <entry><code>sub(double)</code></entry>

            <entry><para><symbol>Δ</symbol><emphasis>a</emphasis></para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section>
    <title>Constructing and Comparing Measurements</title>

    <para>Measurement objects have a value and an error range, making
    comparing and constructing these objects more complicated than normal
    scalars.</para>

    <section>
      <title>Constructors</title>

      <para>The Measurements object has the following constructors that the
      value, error, unit and timestamp:</para>

      <itemizedlist>
        <listitem>
          <para><phrase
          role="xref">Measurement(double,double,Unit,long)</phrase></para>
        </listitem>

        <listitem>
          <para><phrase
          role="xref">Measurement(double,double,Unit)</phrase></para>
        </listitem>

        <listitem>
          <para><phrase role="xref">Measurement(double,Unit)</phrase></para>
        </listitem>

        <listitem>
          <para><phrase role="xref">Measurement(double)</phrase></para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Identity and Equality</title>

      <para>Both <phrase role="xref">equals(Object)</phrase> and <phrase
      role="xref">hashCode()</phrase> methods are overridden to provide
      value-based equality. Two Measurement objects are equal when the unit,
      error, and value are the same. The time-stamp is not relevant for
      equality or the hash code.</para>
    </section>

    <section>
      <title>Comparing Measurement Objects</title>

      <para>The <code>Measurement</code> class implements the
      <code>java.lang.Comparable</code> interface and thus implements the
      <phrase role="xref">compareTo(Object)</phrase> method. Comparing two
      <code>Measurement</code> objects is not straightforward, however, due to
      the associated error. The error effectively creates a range, so
      comparing two <code>Measurement</code> objects is actually comparing
      intervals.</para>

      <para xml:id="i1345281">Two <code>Measurement</code> objects are
      considered to be equal when their intervals overlap. In all other cases,
      the value is used in the comparison.</para>

      <figure>
        <title>Comparing Measurement Objects</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.500in"
                       contentwidth="4.913in" fileref="GRAPHIC3"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>This comparison implies that the <phrase
      role="xref">equals(Object)</phrase> method may return <code>false</code>
      while the <phrase role="xref">compareTo(Object)</phrase> method returns
      0 for the same <code>Measurement</code> object.</para>
    </section>
  </section>

  <section>
    <title>Unit Object</title>

    <para>Each <code>Measurement</code> object is related to a
    <code>Unit</code> object. The <code>Unit</code> object defines the unit of
    the measurement value and error. For example, the Unit object might define
    the unit of the measurement value and the error as meters
    (<code>m</code>). For convenience, the <code>Unit</code> class defines a
    number of standard units as constants. <code>Measurement</code> objects
    are given a specific <code>Unit</code> with the constructor. The following
    example shows how a measurement can be associated with meters
    (<code>m</code>):</para>

    <programlisting>Measurement length = new Measurement( v, 0.01,Unit.m );</programlisting>

    <para>Units are based on the Système International d’Unité (SI), developed
    after the French Revolution. The SI consists of 7 different units that can
    be combined in many ways to form a large series of derived units. The
    basic 7 units are listed in <phrase role="xref">Table 704.2</phrase>. For
    more information, see <phrase role="xref"> <xref linkend="i1249435"
    xrefstyle="Reference"/></phrase> .</para>

    <table>
      <title>Basic SI units.</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="2*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="2*"/>

        <thead>
          <row>
            <entry>Description</entry>

            <entry>Unit name</entry>

            <entry>Symbol</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>length </code></entry>

            <entry><code xml:id="i1345288"> meter</code></entry>

            <entry><code xml:id="i1345295">m</code></entry>
          </row>

          <row>
            <entry><code>mass</code></entry>

            <entry><code xml:id="i1345289"> kilogram</code></entry>

            <entry><code xml:id="i1345296">kg</code></entry>
          </row>

          <row>
            <entry><code>time</code></entry>

            <entry><code xml:id="i1345290"> second</code></entry>

            <entry><code xml:id="i1345297">s</code></entry>
          </row>

          <row>
            <entry><code>electric current</code></entry>

            <entry><code xml:id="i1345291"> ampere</code></entry>

            <entry><code xml:id="i1345298">A</code></entry>
          </row>

          <row>
            <entry><code>thermodynamic temperature</code></entry>

            <entry><code xml:id="i1345292"> kelvin</code></entry>

            <entry><code xml:id="i1345299">K</code></entry>
          </row>

          <row>
            <entry><code>amount of substance</code></entry>

            <entry><code xml:id="i1345293"> mole</code></entry>

            <entry><code xml:id="i1345300"> mol</code></entry>
          </row>

          <row>
            <entry><code>luminous intensity</code></entry>

            <entry><code xml:id="i1345294"> candela</code></entry>

            <entry><code xml:id="i1345301">cd</code></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Additional units are derived in the following ways:</para>

    <para>Derived units can be a combination of exponentiated base units. For
    example, <code>Hz</code> (Hertz) is the unit for frequencies and is
    actually derived from the calculation of 1/<code>s</code>. A more
    complicated derived unit is volt (<code>V</code>). A volt is
    actually:</para>

    <programlisting> ( <code>m</code><superscript>2</superscript> <symbol>×</symbol><code> kg</code> ) / ( <code>s</code><superscript>3</superscript> <symbol>×</symbol> <code>A</code> )</programlisting>

    <para>The SI defines various derived units with their own name, for
    example pascal (<code>Pa</code>), watt (<code>W</code>), volt
    (<code>V</code>), and many more.</para>

    <para>The <code>Measurement</code> class must maintain its unit by keeping
    track of the exponents of the 7 basic SI units.</para>

    <para>If different units are used in addition or subtraction of
    <code>Measurement</code> objects, an <code>ArithmeticException</code> must
    be thrown.</para>

    <programlisting>Measurement length = new Measurement( v1,0.01, Unit.m );
Measurement duration = new Measurement( v2, 0, Unit.s );
try {
    Measurement r = length.add( duration );
}
catch( ArithmeticException e ) {
    // This must be thrown
}</programlisting>

    <para xml:id="i1345317">When two <code>Measurement</code> objects are
    multiplied, the <code>Unit</code> object of the result contains the sum of
    the exponents. When two <code>Measurement</code> objects are divided, the
    exponents of the <code>Unit</code> object of the result are calculated by
    subtraction of the exponents.</para>

    <para>The <code>Measurement</code> class must support exponents of -64 to
    +63. Overflow must not be reported but must result in an invalid
    <code>Unit</code> object. All calculations with an invalid
    <code>Unit</code> object should result in an invalid <code>Unit</code>
    object. Typical computations generate exponents for units between +/-
    4.</para>

    <section xml:id="i1345323">
      <title>Quantitative Differences</title>

      <para>The base and derived units can be converted to other units that
      are of the same <emphasis>quality,</emphasis> but require a conversion
      because their scales and offsets may differ. For example, degrees
      Fahrenheit, kelvin, and Celsius are all temperatures and, therefore,
      only differ in their quantity. Kelvin and Celsius are the same scale and
      differ only in their starting points. Fahrenheit differs from kelvin in
      that both scale and starting point differ.</para>

      <para>Using different <code>Unit</code> objects for the units that
      differ only in quantity can easily introduce serious software bugs.
      Therefore, the <code>Unit</code> class utilizes the SI units. Any
      exchange of measurements should be done using SI units to prevent these
      errors. When a measurement needs to be displayed, the presentation logic
      should perform the necessary conversions to present it in a localized
      form. For example, when speed is presented in a car purchased in the
      United States, it should be presented as miles instead of meters.</para>
    </section>

    <section>
      <title>Why Use SI Units</title>

      <para>The adoption of the SI in the United States and the United Kingdom
      has met with resistance. This issue raises the question why the SI
      system has to be the preferred measurement system in the OSGi
      Specifications.</para>

      <para xml:id="i1345342">The SI system is utilized because it is the only
      measurement <emphasis>system</emphasis> that has a consistent set of
      base units. The base units can be combined to create a large number of
      derived units without requiring a large number of complicated conversion
      formulas. <phrase role="body"> For example, a watt is simply a
      combination of meters, kilograms, and seconds (</phrase>
      <code>m</code><superscript>2</superscript><symbol>×</symbol><code>kg</code>
      <phrase role="body">/</phrase>
      <code>s</code><superscript>3</superscript>). In contrast, horsepower is
      not easily related to inches, feet, fathoms, yards, furlongs, ounces,
      pounds, stones, or miles. This difficulty is the reason that science has
      utilized the SI for a long time. It is also the reason that the SI has
      been chosen as the system used for the <code>Measurement</code>
      class.</para>

      <para>The purpose of the <code>Measurement</code> class is internal,
      however, and should not restrict the usability of the OSGi environment.
      Users should be able to use the local measurement units when data is
      input or displayed. This choice is the responsibility of the application
      developer.</para>
    </section>
  </section>

  <section>
    <title>State Object</title>

    <para>The <code>State</code> object is used to represent discrete states.
    It contains a time-stamp but does not contain an error or
    <code>Unit</code> object. The <code>Measurement</code> object is not
    suitable to maintain discrete states. For example, a car door can be
    <code>LOCKED</code>, <code>UNLOCKED</code>, or <code>CHILDLOCKED</code>.
    Measuring and operating with these values does not require error
    calculations, nor does it require SI units. Therefore, the
    <code>State</code> object is a simple, named object that holds an integer
    value.</para>
  </section>

  <section>
    <title>Related Standards</title>

    <section>
      <title>GNU Math Library in Kawa</title>

      <para>The open source project Kawa, a scheme-based Java environment, has
      included a <code>gnu.math</code> library that contains unit handling
      similar to this specification. It can be found at <phrase role="xref">
      <xref linkend="i1254696" xrefstyle="Reference"/></phrase> .</para>

      <para>The library seems considerably more complex without offering much
      more functionality than this specification. It also does not strictly
      separate basic SI units such as meter from quantitatively derived units
      such as pica.</para>
    </section>
  </section>

  <section>
    <title>Security Considerations</title>

    <para>The <code>Measurement, Unit,</code> and <code>State</code> classes
    have been made immutable. Instances of these classes can be freely handed
    out to other bundles because they cannot be extended, nor can the value,
    error, or time-stamp be altered after the object is created.</para>
  </section>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.util.measurement.xml"/>

  <section xml:id="util.measurement.references">
    <title>References</title>

    <para role="ExternalReference">SI Units information</para>

    <para
    role="ExternalReferenceCont">http://physics.nist.gov/cuu/Units</para>

    <para role="ExternalReference" xml:id="i1249435">General SI index</para>

    <para role="ExternalReferenceCont">http://en.wikipedia.org/wiki/SI</para>

    <para role="ExternalReference" xml:id="i1253587">JSR 108 Units
    Specification</para>

    <para
    role="ExternalReferenceCont">http://www.jcp.org/jsr/detail/108.jsp</para>

    <para role="ExternalReference" xml:id="i1254696">A Math Library containing
    unit handling in Kawa</para>

    <para role="ExternalReferenceCont">http://www.gnu.org/software/kawa</para>

    <para role="ExternalReference" xml:id="i1364247">Mars Polar Lander
    failure</para>

    <para
    role="ExternalReferenceCont">http://mars.jpl.nasa.gov/msp98/news/mco990930.html</para>
  </section>
</chapter>
