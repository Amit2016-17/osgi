<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5" label="124" xml:id="i3260682" xmlns:xlink='http://www.w3.org/1999/xlink' xmlns:xi="http://www.w3.org/2001/XInclude">
<title>JMX™ Management Model Specification</title>
<info xml:id="i3260715"><releaseinfo>Version 1.1</releaseinfo></info>
<section><title>Introduction</title>
<para>The Java Management Extensions (JMX) is the standard API specification
for providing a management interface to Java SE and Java EE applications.
The JMX specification defines the design patterns, APIs, services
and architecture for application management, network management
and monitoring in the Java programming language. The need to administer,
monitor and manage a container is today recognized as a prerequisite
in the enterprise software domain.</para>
<para>While OSGi defines a rich API for controlling all aspects
of the framework, this API is not suitable for direct usage in the
JMX framework because it was not designed to be remoted. This specification
provides an interface adaptation of the existing OSGi framework,
which can be used to expose an OSGi Framework manipulation API to
any JMX compliant implementation. Interfaces and system semantics
for a monitoring system are specified for exposing the underlying
artifacts of the OSGi framework such as services and bundles. Additionally,
the management of a number of core and compendium services have
been standardized in this document.</para>
<para>Finally, a standardized JMX object naming standard is proposed
so that management objects are uniformly named across implementations
such that any JMX compliant system can find, manipulate and interact
with the framework and artifacts that it manages.</para>
<para>This specification requires version 1.2 or later of JMX, which
implies the use of Java 5.</para>
<section><title>Essentials</title>
<itemizedlist><listitem><para><emphasis>Life Cycle</emphasis> –
Must allow support of full life cycle management of bundles.</para></listitem>
<listitem><para><emphasis>Batch</emphasis> – Support batch oriented
operations to minimize the influence of network capacity and latency.</para></listitem>
<listitem><para><emphasis>Compatible</emphasis> – This specification
must work naturally with JMX.</para></listitem>
<listitem><para><emphasis>Efficient</emphasis> – Minimize the number
of registered objects to not overload the MBean Server and communication
channels.</para></listitem>
<listitem><para><emphasis>Open MBean</emphasis> – Support the Open
MBean layer of JMX instead of using domain specific objects.</para></listitem>
<listitem><para><emphasis>Core</emphasis> – Supports all the Framework’s
operations.</para></listitem>
<listitem><para><emphasis>Core Services</emphasis> – Support the
framework services if registered, except for Conditional Permission Admin. </para></listitem></itemizedlist></section>
<section><title>Entities</title>
<itemizedlist><listitem><para><emphasis>MBean</emphasis> – A Managed
Bean. The core concept of JMX to manage an entity.</para></listitem>
<listitem><para><emphasis>MBean Server </emphasis>– The MBean Server
is the access point for registering MBeans.</para></listitem>
<listitem><para><emphasis>Manager</emphasis> – The entity that implements
the MBeans and registers them with the registered MBean servers.</para></listitem>
<listitem><para><emphasis>Object Name</emphasis> – A name for an
MBean registered with an MBean Server.</para></listitem>
<listitem><para><emphasis>Bundle State MBean</emphasis> – Provides
central access to the state of a bundle in a framework.</para></listitem>
<listitem><para><emphasis>Framework MBean</emphasis> – Represents
the general framework’s state and can be used to manage the life cycle
of bundles.</para></listitem>
<listitem><para><emphasis>Bundle Wiring State MBean</emphasis> –
Provides access to the wiring state of the framework.</para></listitem>
<listitem><para><emphasis>Service State MBean</emphasis> – Provides
access to the service information in the service registry. It provides both
a general MBean interface as well as an Open Type description.</para></listitem>
<listitem><para><emphasis>Configuration Admin MBean</emphasis> –
Can be used to manipulate a Configuration Admin service.</para></listitem>
<listitem><para><emphasis>Permission Admin MBean</emphasis> – Provides
access to the Permission Admin service.</para></listitem>
<listitem><para><emphasis>Provisioning Service MBean</emphasis> –
Provides access to the Provisioning Service.</para></listitem>
<listitem><para><emphasis>User Admin MBean</emphasis> – Provides
access to the User Admin service.</para></listitem>
<listitem><para><emphasis>Item</emphasis> – A helper class to create
Open Types. This class is intended to make the Javadoc easier to
navigate and keep definitions close together. This is otherwise
hard to do with Open Type. This class has no utility for management
applications.</para></listitem>
<listitem><para><emphasis>Open Type</emphasis> – A JMX metadata
standard to describe MBeans.</para></listitem>
<listitem><para><emphasis>Remote Manager</emphasis> – The entity
accessing a MBean Server remotely.</para></listitem>
<listitem><para><emphasis>JConsole</emphasis> – The default Java
Remote Manager.</para></listitem></itemizedlist>
<figure><title> </title><mediaobject><imageobject><imagedata fileref="GRAPHIC1" align="center" contentwidth="7.000in" contentdepth="2.668in"/></imageobject></mediaobject></figure></section>
<section><title>Synopsis</title>
<para>This specification plays a part in both the OSGi framework
as well as in a remote manager. </para>
<para>A JMX OSGi manager bundle obtains one or more MBean servers
that are registered as services. The JMX OSGi manager then registers
all its managed beans: Framework MBean, Bundle State MBean, Package
State MBean, and the Service State MBean under their JMX object
names. If a number of optional services are registered, then the
JMX OSGi bundle must also register a corresponding MBean with the
MBean server for each of the services that it can obtain.</para>
<para>A remote manager can access an MBean Server running in a (remote)
VM. The remote manager can then discover any MBeans. These MBeans
can be manipulated as dynamic types or as specific types as outlined
in this specification. </para></section></section>
<section><title>JMX Overview</title>
<para>JMX is a specification which defines how arbitrary remote
communication protocols and mechanisms can be adapted to interact
with the underlying management APIs exposed by JMX compliant implementations.
JMX is not a remote communication standard, the actual protocols
can vary. The JMX architecture is composed of three levels:</para>
<itemizedlist><listitem><para><emphasis>Instrumentation</emphasis> –
The managed resources of the system are instrumented using <emphasis>managed
beans</emphasis> (a.k.a. MBeans) which expose their management interfaces
through a JMX agent for remote management and monitoring.</para></listitem>
<listitem><para><emphasis>Agent</emphasis> – The JMX agent layer
is mainly represented by the MBean server. This is the <emphasis>managed
object</emphasis> server where the MBeans are registered. The JMX
agent includes a set of functions for manipulating the registered
MBeans, which directly expose and control the underlying resources,
and then make them available to remote managers.</para></listitem>
<listitem><para><emphasis>Remote Manager</emphasis> – The remote
management layer provides the specification for the actual remote communication
protocol adapters and defines standard <emphasis>connectors</emphasis> which
make the JMX agent accessible to remote managers outside of the
Java process that hosts the agent. </para></listitem></itemizedlist>
<para>The JMX Architecture is depicted in 
<phrase role="xref">
<xref xrefstyle="FigureNumber" linkend="i3070609"/></phrase>
.</para>
<figure xml:id="i3070609"><title>JMX Architecture</title><mediaobject><imageobject><imagedata fileref="GRAPHIC2" align="center" contentwidth="5.982in" contentdepth="1.623in"/></imageobject></mediaobject></figure>
<section><title>Connectors and Adapters</title>
<para>Connectors are used to connect an agent with a remote JMX-enabled
managers. This form of communication involves a connector in the
JMX agent and a connector client in the management application.
Protocol adapters provide a management view of the JMX agent through
a given protocol.</para>
<para>Remote managers that connect to a protocol adapter are usually
specific to the given protocol. Remote Managers can be generic consoles
(such as JConsole; see 
<phrase role="xref">
<xref xrefstyle="seeHeadingPage" linkend="i3160796"/></phrase>
), or domain-specific monitoring applications. External applications
can interact with the MBeans through the use of JMX connectors and
protocol adapters.</para></section>
<section><title>Object Name</title>
<para>All managed objects in JMX are referenced via JMX <emphasis>Object
Names</emphasis>. Object Names are strings which can be resolved
within the context of a JMX MBean Server in order. An Object Name
consists of two parts: </para>
<programlisting>ObjectName 	::= domain ’:’ properties
properties			 ::= property ( ’,’ property )*</programlisting>
<para>To avoid collisions between MBeans supplied by different vendors,
a recommended convention is to begin the domain name with the reverse
DNS name of the organization that specifies the MBeans, followed
by a full stop (<code>’.’ \u002E</code>) and a string whose interpretation
is determined by that organization. </para>
<para>MBeans specified by the OSGi Alliance have domains that start
with <code>osgi</code>.</para></section>
<section><title>MBeans</title>
<para>Any object can be registered with an MBean Server and manipulated
remotely over an <emphasis>MBean Server Connection</emphasis>. An
MBean Server Connection can represent the a local MBean Server or
a remote MBean Server. An MBean is always identified by an <emphasis>Object
Name</emphasis>. The Object Name identifies a remote MBean uniquely
within a specific MBean Server Connection. </para>
<para>Standard manipulations of a remote MBean are done through 
<emphasis>attributes</emphasis> and <emphasis>operations</emphasis>,
which are similar to properties and methods for Java beans. Not
all methods on the implementation class can be used, the registering
party must specifically provide access to the methods that can be
called remotely. The registrar can define the exposed operations
with the following mechanisms:</para>
<itemizedlist><listitem><para><emphasis>Design Pattern</emphasis> –
Let the registered object implement an <emphasis>MBean interface</emphasis> that
has the fully qualified name of the implementation class suffixed
with <code>MBean</code>. The MBean server will then limit access
to attributes and properties defined in the MBean interface. For
example, the <code>com.acme.Resource</code> class should implement
the <code>com.acme.ResourceMBean</code> interface. The <code>com.acme.ResourceMBean</code> interface
would define the properties and operations.</para></listitem>
<listitem><para><emphasis>Dynamic MBean</emphasis> – Register a
Dynamic MBean, which handles the access to the operations and attributes
programmatically. The JMX specification provides the <code>DynamicMBean</code> interface
for this purpose. If the MBean registered with an MBean Server implements
this interface, then the MBean Server must get the MBean’s metadata
through the <code>DynamicMBean</code> interface instead of using
reflection. Therefore, Dynamic MBeans can provide more rich metadata
that describes their operations and attributes.</para></listitem>
<listitem><para><emphasis>Standard MBean</emphasis> – Register a
Standard MBean. A standard MBean works the same as the previous
bullet but does not require the implementation class name to map
to the MBean interface name.</para></listitem></itemizedlist>
<para>Attributes map to properties on the registered MBean interface
and operations allow the invocation of an arbitrary method on the
remote MBean with arbitrary parameters. The following code example shows
how to get a the size property of a remote MBean in this way:</para>
<programlisting>void drop( MBeanServerConnection mbs, ObjectNameobjectName) {
  Integer sizeI = (Integer) 
		mbs.getAttribute(objectName, "Size");
  int size = sizeI.intValue();
  if (size &gt; desiredSize) {
    mbs.invoke(objectName,"dropOldest",
		new Integer[] {new Integer(size – desiredSize)},
		new String[] {"int"});
  }
}</programlisting>
<para>In release 1.2 the JMX specification introduced the <emphasis>MBean
Server Invocation Handler</emphasis> to simplify the manipulation
of the remote MBeans by creating a <emphasis>proxy</emphasis> for
an <emphasis>MBean interface</emphasis> that implements all the
relevant methods. An MBean interface defines the methods and properties
for an MBean. The proxy has a reference to an <emphasis>MBean Server
Connection</emphasis>, it can therefore automate the invocation
of the appropriate methods from the MBean interface. Therefore,
by using an MBean interface, it is possible to simplify the remote
manager:</para>
<programlisting>MBeanServer mbs = ...;
CacheControlMBean cacheControl = (CacheControlMBean)
 MbeanServerInvocationHandler.newProxyInstance(
	mbs, objectName, CacheControlMBean.class, false);

int size = cacheControl.getSize();
if (size &gt; desiredSize)
  cacheControl.dropOldest(size - desiredSize);</programlisting>
<para>The creation of the proxy is somewhat verbose, but once it
is available, the MBean can be accessed like a local object. The
proxy is much easier to use and read, and much less error-prone,
than accessing the MBean Server method through invoking operations
and getting attributes.</para>
<para>The MBean interface can also ensure a certain amount of type
safety. The MBean implementation can implement the MBean interface
and the remote manager uses the proxy implementing this interface.
However, neither is required. The MBean can directly implement the
methods without implementing the interface and the remote manager
can directly manipulate the attributes and invocations.</para>
<para>The key advantage is therefore the documentation of the management
interface. Using an MBean interface, this can be done very concisely
and it allows the usage of standard tools for Java source code and
Javadoc.</para></section>
<section xml:id="i3076516"><title>
Open Types</title>
<para>The distributed nature of remote management poses a number
of problems for exchanging general objects.</para>
<itemizedlist><listitem><para><emphasis>Versioning</emphasis> –
All participating parties require access to the same version of
the object’s class.</para></listitem>
<listitem><para><emphasis>Serialization</emphasis> – Not all objects
are easy to serialize.</para></listitem>
<listitem><para><emphasis>Size</emphasis> – Arbitrary objects can
transitively link to large amounts of data.</para></listitem>
<listitem><para><emphasis>Descriptive</emphasis> – Classes provide
little or no support for editing.</para></listitem>
<listitem><para><emphasis>Limited</emphasis> – Classes are Java
specific, making it harder to interact with non-Java environments.</para></listitem></itemizedlist>
<para>An alternative is to limit the management types to be exchanged
to small, well defined set. Open MBeans limit the used data types
to small number of types called the <emphasis>basic types</emphasis>.
These types are supported by all JMX 1.2 and later implementations.
This basic set of types contains:</para>
<itemizedlist><listitem><para><emphasis>Primitives</emphasis> – <code>boolean,
byte, char, short, int, long, float, double.</code></para></listitem>
<listitem><para><emphasis>Primitive Arrays</emphasis> – <code>boolean[],
byte[], char[], short[], int[], long[], float[], double[].</code></para></listitem>
<listitem><para><emphasis>Wrappers</emphasis> – <code>Boolean, Byte,
Character, Short, Integer, Long, Float, Double.</code></para></listitem>
<listitem><para><emphasis>Scalars</emphasis> – <code>String, BigDecimal,
BigInteger, Date, ObjectName.</code></para></listitem>
<listitem><para><emphasis>Complex</emphasis> –  <code>CompositeData,
TabularData</code>, and complex arrays.</para></listitem>
<listitem><para><emphasis>Return</emphasis> – <code> Void, </code>operation
return only<code>.</code></para></listitem></itemizedlist>
<para>The Complex types are unique to JMX, they are used to provide
access to complex data (like objects) without using classes. The
complex types are <emphasis>self describing</emphasis>. The metadata
associated with these complex types allow a remote manager to discover
the structure and automatically construct a (graphic) user interface
for these complex objects.</para>
<para>Open MBeans must be Dynamic MBeans when registered. Furthermore,
they must provide Open MBean variations of the Info objects that
describe the operations and attributes.</para></section></section>
<section><title>OSGi JMX Management</title>
<para>The OSGi JMX Management model is based on Open MBeans, see 
<phrase role="xref">
<xref xrefstyle="seeHeadingPage" linkend="i3076516"/></phrase>
. This specification declares a number of MBeans for the core Framework,
some of the core services, and a number of compendium services.
Though Open MBeans are based on Dynamic MBeans, this specification
uses the traditional MBean interface to define the management interaction
patterns. The implementer of this specification must register an
implementation of these interfaces as a Dynamic MBean. An implementation
should provide the additional Open MBeans Info objects for the operations
and attributes.</para>
<para>This specification defines the following Open MBeans:</para>
<itemizedlist><listitem><para><emphasis>Core Framework</emphasis> – 
<code>FrameworkMBean</code>, <code>BundleStateMBean</code>, <code>ServiceStateMBean</code>, 
<code>BundleWiringStateMBean, </code>and <code>PackageStateMBean</code>.</para></listitem>
<listitem><para><emphasis>Core Services</emphasis> – <code>PermissionAdminMBean</code>.
The Conditional Permission Admin is not included in this specification.</para></listitem>
<listitem><para><emphasis>Compendium Services</emphasis> – <code>ConfigurationAdminMBean</code>, 
<code>UserAdminMBean</code>, <code>ProvisioningServiceMBean</code></para></listitem></itemizedlist>
<section><title>Naming</title>
<para>The MBean interfaces have been named after the service they
manage. That is the <code>ConfigurationAdminMBean</code> interface
manages the Configuration Admin service, which is modelled with the 
<code>ConfigurationAdmin</code> interface.</para>
<para>Package names are constructed from taking the corresponding
resource package and inserting <code>jmx.</code> after <code>org.osgi</code>.
For example</para>
<programlisting>org.osgi.framework											org.osgi.jmx.framework
org.osgi.service.cm											org.osgi.jmx.service.cm</programlisting>
<para>It is not possible to use the MBean interface design pattern
because the MBean interfaces are in OSGi packages. The design pattern
requires the fully qualified name of the implementation suffixed
with MBean to match the MBean interface name. This would require
that the implementation class resides in an OSGi package, which
would extend these packages.</para>
<para>However, the <code>StandardMBean</code> class allows the association
of one of the OSGi MBean interfaces with an arbitrary class.</para></section>
<section><title>Object Naming</title>
<para>Object Names for OSGi managed MBeans must follow the following
structure:</para>
<programlisting>object-name					::= ( core | compendium ) 
							’,version=’ 							version 
							’,framework=’ 							framework
							’,uuid=’ 							uuid
							(’,’ key ’=’ value )*
core					::= ’osgi.core:’ framework-type
compendium					::= ’osgi.compendium:’ service-type
framework-type::= ( ’type=’ token ) | service-type
service-type					::= ’service=’ token
framework					::= &lt;Bundle symbolic name of the system bundle&gt;
uuid					::= &lt;org.osgi.framework.uuid Framework property’svalue&gt;
key					::= &lt;any jmx supported key&gt;
value					::= &lt;any jmx supported value&gt;</programlisting>
<para>There are the following additional constraints:</para>
<itemizedlist><listitem><para><emphasis>Spaces</emphasis> – Spaces
between any of the terminals are not permitted. </para></listitem>
<listitem><para><emphasis>Version</emphasis> – The <code>version</code> must
be limited to a major and minor version part. The given version
must identify the package of the corresponding resource. For example,
if the Configuration Admin service is on version <code>1.3.2.200910101250</code>,
then the version in the Object Name must be <code>1.3</code>.</para></listitem>
<listitem><para><emphasis>Service</emphasis> – The <code>service-type</code> should
use the package name of the corresponding service. For example,
for Configuration Admin this would be <code>service=cm</code>.</para></listitem></itemizedlist>
<para>The Object Name must contain the framework bundle symbolic
name and its UUID so that multiple instances on the same VM can
be discriminated. An example of an Object Name is:</para>
<programlisting>osgi.core:type=framework,version=1.7,framework=org.apache.felix.framework,<code>«</code>
	uuid=f81d4fae-7dec-11d0-a765-00a0c91e6bf6</programlisting>
<para>The advantage of the framework property is that it can be
used to simplify the querying for the MBeans using Object Name 
<emphasis>patterns</emphasis>. Patterns are names have an asterisk 
<code>(’*’ \u002A)</code>. For instance, the following query allows
a client to find all Framework MBeans for an Apache Felix implementation without
having to rely on knowing the UUID:</para>
<programlisting>ObjectName on = new ObjectName(
	"osgi.core:type=framework,"
	+	"version=1.7,framework=org.apache.felix.framework,*");
Set&lt;ObjectInstance&gt; instances = mserver.queryMBeans(on,null);</programlisting>
<para>Furthermore, in many cases, a JMX client may appropriately
assume that only a single instance of the OSGi framework exists
in the managed system, as in the following example:</para>
<programlisting>ObjectName on = new ObjectName(“osgi.core:type=framework,version=1.7,*”);
Set&lt;ObjectInstance&gt; instances = mserver.queryMBeans(on,null);</programlisting>
<para>The <code>uuid</code> and <code>framework</code> property
keys are only applicable to OSGi JMX Management Model Specification
Version 1.1 and above.</para>
<para>To maintain backward compatibility, a OSGi JMX Framework package
Version 1.7 may register the first instantiation of an OSGi framework
using both the Version 1.0 Object Names as well as the Object Names
outlined in this specification. In other words, a JMX client may
not specify the <code>uuid</code> and/or framework properties, and
still retrieve the MBeans for a OSGi framework instance.</para>
<para>The actual object name prefixes are defined in the MBean interfaces.
For example, the Object Name for the Configuration Admin MBean is:</para>
<programlisting>osgi.compendium:service=cm,version=1.3</programlisting>
<para>It is the responsibility of the party registering the MBean
to suffix this with the framework and UUID.</para>
<para>In this specification, all management interfaces are specified
to return opaque Strings or longs rather than Object Names so that
the MBean interfaces contain no JMX specific artifacts and can be
used with a variety of remote access protocols such as SNMP, etc.
Non JMX use of these APIs can use these Strings as their own opaque
identifiers without any change to the interfaces themselves.</para></section>
<section><title>The MBean Server</title>
<para>An implementation of this specification must find all MBean
Servers services that it has access to. It should then register
all MBeans with each server found in the service registry.</para>
<para>A compliant implementation must register all the framework’s
MBeans: <code>FrameworkMBean, BundleStateMBean, ServiceStateMBean,
BundleWiringStateMBean and PackageStateMBean</code>. The registration
of the compendium services is optional. However, if they are registered
they must implement the behavior as defined in this specification.</para></section>
<section><title>Registrations</title>
<para>The OSGi MBeans are designed to minimize the notifications.
That is, the objects model a command interface to access the required
information. Their registration is not intended to signify anything else
than the start of the manager bundle and the availability of the
underlying resource.</para>
<para>Implementations must always register only one of each of the
Framework MBean types (Framework MBean, Service State MBean, Bundle
State MBean, Wiring State MBean, and Package State MBean). All other
MBean types depend on the registered services they manage. Each
service requires its unique MBean. If no corresponding service is
present, then no MBean should be registered. Modified events must
be ignored. If a manager supports a specific OSGi MBean for a compendium
service then it must register an MBean for each instance of that
service.</para></section></section>
<section><title>MBeans</title>
<para>This specification defines MBean interfaces listed in 
<phrase role="xref">Table 124.1 on page 435</phrase>
 The Object Name specified in this table is broken into a number
of lines for readability, however, newlines and whitespace is not
allowed in the Object Name.</para><table><title>
MBeans</title><tgroup cols="3"><tbody><row><entry>MBean</entry><entry>Object Name</entry><entry>Description</entry></row><row><entry><para><phrase role="xref">FrameworkMBean</phrase></para></entry><entry><code>osgi.core:</code><code>type=framework,</code><code>version=1.7</code></entry><entry><para>Provides access to bundle life cycle methods of the
framework including batch install and update operations. See 
<phrase role="xref">FrameworkMBean on page 452</phrase>
.</para></entry></row><row><entry><para><phrase role="xref">BundleStateMBean</phrase></para></entry><entry><code>osgi.core:</code><code>type=bundleState</code><code>version=1.7</code></entry><entry><para>Provides detailed access to the state of one bundle
and aggregated state of a group of bundles. See 
<phrase role="xref">BundleStateMBean on page 443</phrase>
.</para></entry></row><row><entry><para><phrase role="xref">ServiceStateMBean</phrase></para></entry><entry><code>osgi.core:</code><code>type=serviceState</code><code>version=1.7</code></entry><entry><para>Provides detailed access to the state of one service
and aggregated state of a group of services. 
<phrase role="xref">ServiceStateMBean on page 461</phrase></para></entry></row><row><entry><para><phrase role="xref">PackageStateMBean</phrase></para></entry><entry><code>osgi.core:</code><code>type=packageState,</code><code>version=1.5</code></entry><entry><para>Provides detailed access to the state of one package
and aggregated state of a group of packages. See 
<phrase role="xref">PackageStateMBean on page 459</phrase>
.</para></entry></row><row><entry><para><phrase role="xref">PermissionAdminMBean</phrase></para></entry><entry><code>osgi.core:</code><code>service=permissionadmin,</code>
<code>version=1.2</code></entry><entry><para>Based on the Permission Admin service. See 
<phrase role="xref">PermissionAdminMBean on page 468</phrase>
.</para></entry></row><row><entry><para><phrase role="xref">ConfigurationAdminMBean</phrase></para></entry><entry><code>osgi.compendium:</code><code>service=cm,</code><code>version=1.3</code></entry><entry><para>Manages a Configuration Admin service. See 
<phrase role="xref">ConfigurationAdminMBean on page 465</phrase>
.</para></entry></row><row><entry><para><phrase role="xref">ProvisioningServiceMBean</phrase></para></entry><entry><code>osgi.compendium:</code><code>service=provisioning,</code>
<code>version=1.2</code></entry><entry><para>Manages a Provisioning Service. See 
<phrase role="xref">ProvisioningServiceMBean on page 469</phrase>
.</para></entry></row><row><entry><para><phrase role="xref">UserAdminMBean</phrase></para></entry><entry><code>osgi.compendium:</code><code>service=useradmin,</code>
<code>version=1.1</code></entry><entry><para>Manages a User Admin service. See 
<phrase role="xref">UserAdminMBean on page 470</phrase></para></entry></row><row><entry><para><phrase role="xref">BundleWiringStateMBean</phrase></para></entry><entry><code>osgi.core:</code><code>service=wiringState,</code><code>version=1.1</code>
</entry><entry><para>Reflects the Framework’s wiring state, see 
<phrase role="xref">BundleWiringStateMBean on page 479</phrase>
.</para></entry></row></tbody></tgroup></table></section>
<section><title>Item</title>
<para>The MBean interfaces do not only define the Java interface,
they also define the Open Types. These types are defined with the 
<phrase role="xref">Item</phrase>
 class in this specification to simplify the definitions; the Item
class has no role in a management application. The Item class is
used to allow the items used in Composite Types to be encoded in
the interface. This is not possible with the standard Open Types
because they use exceptions and use parallel arrays. For example,
the following code defines a static Open Type without the Item class:</para>
<programlisting>static CompositeType HEADER;
static {
   try {
     HEADER = new CompositeType( "HEADER" "This is a header", 
		new String[] {"KEY", "VALUE"},
		new String[] {"A key for a header", "A value for a header"},
		new OpenType[] { SimpleType.STRING, SimpleType.STRING });
   catch(OpenDataException e) {
     ...
   }
}</programlisting>
<para>This code can be replaced with the <code>Item</code> class:</para>
<programlisting>static Item KEY = new Item("KEY", "A key forheader", SimpleType.STRING );
static Item VALUE = new Item("VALUE", "A value for header",SimpleType.STRING );
static CompositeType HEADER = Item.composite( "HEADER", "Thisis a header",
	KEY, VALUE );</programlisting>
<para>The Item class also provides a number of convenience methods
to construct the different Open Types. However, the intention is
to simplify the specification definitions, not as an aid in management
operations.</para></section>
<section><title>Security</title>
<para>Exposing any system remotely opens up a, potentially, devastating
security hole in a system. Remote entities should establish their
identity and the management system should be able to control the access
these entities have over the management system. JMX seamlessly inter
operates with the Java Authentication and Authorization Service
(JAAS) and Java 2 platform Standard Edition (Java SE) Security Architecture.</para>
<para>The JMX OSGi manager must have access to the services it manages
and the operations it invokes. It is likely that this bundle requires
All Permission because it needs to invoke operations on the Conditional
Permission Admin. It is strongly advised that implementations limit
the set of available permissions based on authenticating the remote
manager.</para></section>
<section><title>Changes</title>
<itemizedlist><listitem><para>The Object Names now contain framework
name and UUID</para></listitem>
<listitem><para>Versions are updated</para></listitem>
<listitem><para>Added <code>Version</code> to the scalar types</para></listitem>
<listitem><para>Added a 
<phrase role="xref">BundleWiringStateMBean</phrase>
 reflecting the Framework’s Wiring API</para></listitem>
<listitem><para>Changed 
<phrase role="xref">BundleStateMBean</phrase>
, 
<phrase role="xref">FrameworkMBean</phrase>
, 
<phrase role="xref">ServiceStateMBean</phrase></para></listitem>
<listitem><para>Clarified how lists are encoded for properties</para></listitem></itemizedlist></section>
<INSET xml:id="i3412565">org.osgi.jmx<?FM MARKER [Cross-Ref] org.osgi.jmx?>
<?FM MARKER [Index] org.osgi.jmx?>
<?FM MARKER [Cross-Ref] package:org.osgi.jmx?>

OSGi JMX Package Version 1.1. 
Bundles wishing to use this package must list the package in the
Import-Package header of the bundle’s manifest. This package has
two types of users: the consumers that use the API in this package and
the providers that implement the API in this package. 
Example import for consumers using the API in this package: 
Import-Package: org.osgi.jmx; version=”[1.1,2.0)”
Example import for providers implementing the API in this package: 
Import-Package: org.osgi.jmx; version=”[1.1,1.2)”
Summary
Item –  The item class enables the definition of open types in the
appropriate interfaces. 
JmxConstants –  Constants for OSGi JMX Specification. 
Permissions
<?FM MARKER [Cross-Ref] Item?>
<?FM MARKER [Index] Item?>
<?FM MARKER [Index] class:Item?>
Item
public class Item
The item class enables the definition of open types in the appropriate
interfaces. This class contains a number of methods that make it
possible to create open types for CompositeType, TabularType, and ArrayType.
The normal creation throws a checked exception, making it impossible
to use them in a static initializer. The constructors are also not
very suitable for static construction.  An Item instance describes
an item in a Composite Type. It groups the triplet of name, description,
and Open Type. These Item instances allows the definitions of an
item to stay together. 
	Concurrency	Immutable 
<?FM MARKER [Cross-Ref] Item.Item(String,String,javax.management.openmbean.OpenType,String...)?>
<?FM MARKER [Index] Item:Item?>
<?FM MARKER [Index] Item?>
Item(String,String,javax.management.openmbean.OpenType,String...)
public Item ( String name , String description , OpenType type ,
String ... restrictions ) 
	name	The name of the item.
	description	The description of the item.
	type	The Open Type of this item.
	restrictions	Ignored, contains list of restrictions
	
Create a triple of name, description, and type. This triplet is
used in the creation of a Composite Type. 
<?FM MARKER [Cross-Ref] Item.arrayType(int,javax.management.openmbean.OpenType)?>
<?FM MARKER [Index] Item:arrayType?>
<?FM MARKER [Index] arrayType?>
arrayType(int,javax.management.openmbean.OpenType)
public static ArrayType arrayType ( int dim , OpenType elementType
) 
	dim	The dimension
	elementType	The element type
	
Return a new Array Type. 
	Returns	A new Array Type
<?FM MARKER [Cross-Ref] Item.compositeType(String,String,Item...)?>
<?FM MARKER [Index] Item:compositeType?>
<?FM MARKER [Index] compositeType?>
compositeType(String,String,Item...)
public static CompositeType compositeType ( String name , String
description , Item ... items ) 
	name	The name of the Tabular Type.
	description	The description of the Tabular Type.
	items	The items that describe the composite type.
	
Create a Composite Type 
	Returns	a new Composite Type
	Throws	RuntimeException –  when the Tabular Type throws an OpenDataException 
<?FM MARKER [Cross-Ref] Item.extend(javax.management.openmbean.CompositeType,String,String,Item...)?>
<?FM MARKER [Index] Item:extend?>
<?FM MARKER [Index] extend?>
extend(javax.management.openmbean.CompositeType,String,String,Item...)
public static CompositeType extend ( CompositeType parent , String
name , String description , Item ... items ) 
	parent	The parent type, can be null
	name	The name of the type
	description	The description of the type
	items	The items that should be added/override to the parent type
	
Extend a Composite Type by adding new items. Items can override
items in the parent type. 
	Returns	A new Composite Type that extends the parent type
	Throws	RuntimeException –  when an OpenDataException is thrown 
<?FM MARKER [Cross-Ref] Item.tabularType(String,String,javax.management.openmbean.CompositeType,String...)?>
<?FM MARKER [Index] Item:tabularType?>
<?FM MARKER [Index] tabularType?>
tabularType(String,String,javax.management.openmbean.CompositeType,String...)
public static TabularType tabularType ( String name , String description
, CompositeType rowType , String ... index ) 
	name	The name of the Tabular Type.
	description	The description of the Tabular Type.
	rowType	The Open Type for a row
	index	The names of the items that form the index .
	
Create a Tabular Type. 
	Returns	A new Tabular Type composed from the parameters.
	Throws	RuntimeException –  when the Tabular Type throws an OpenDataException 
<?FM MARKER [Cross-Ref] JmxConstants?>
<?FM MARKER [Index] JmxConstants?>
<?FM MARKER [Index] class:JmxConstants?>
JmxConstants
public class JmxConstants
Constants for OSGi JMX Specification.  Additionally, this class
contains a number of utility types that are used in different places
in the specification. These are LONG_ARRAY_TYPE, STRING_ARRAY_TYPE,
and PROPERTIES_TYPE. 
	Concurrency	Immutable 
<?FM MARKER [Cross-Ref] JmxConstants.ARRAY_OF?>
<?FM MARKER [Index] JmxConstants:ARRAY_OF?>
<?FM MARKER [Index] ARRAY_OF?>
ARRAY_OF
public static final String ARRAY_OF = “Array of “<?FM MARKER [Index] `Array of '?>

For an encoded array we need to start with ARRAY_OF. This must be
followed by one of the names in SCALAR. 
<?FM MARKER [Cross-Ref] JmxConstants.BIGDECIMAL?>
<?FM MARKER [Index] JmxConstants:BIGDECIMAL?>
<?FM MARKER [Index] BIGDECIMAL?>
BIGDECIMAL
public static final String BIGDECIMAL = “BigDecimal”<?FM MARKER [Index] BigDecimal?>

Value for PROPERTY_TYPE value in the case of java.math.BigDecimal
<?FM MARKER [Cross-Ref] JmxConstants.BIGINTEGER?>
<?FM MARKER [Index] JmxConstants:BIGINTEGER?>
<?FM MARKER [Index] BIGINTEGER?>
BIGINTEGER
public static final String BIGINTEGER = “BigInteger”<?FM MARKER [Index] BigInteger?>

Value for PROPERTY_TYPE value in the case of java.math.BigInteger
<?FM MARKER [Cross-Ref] JmxConstants.BOOLEAN?>
<?FM MARKER [Index] JmxConstants:BOOLEAN?>
<?FM MARKER [Index] BOOLEAN?>
BOOLEAN
public static final String BOOLEAN = “Boolean”<?FM MARKER [Index] Boolean?>

Value for PROPERTY_TYPE value in the case of java.lang.Boolean
<?FM MARKER [Cross-Ref] JmxConstants.BYTE?>
<?FM MARKER [Index] JmxConstants:BYTE?>
<?FM MARKER [Index] BYTE?>
BYTE
public static final String BYTE = “Byte”<?FM MARKER [Index] Byte?>

Value for PROPERTY_TYPE value in the case of java.lang.Byte
<?FM MARKER [Cross-Ref] JmxConstants.CHARACTER?>
<?FM MARKER [Index] JmxConstants:CHARACTER?>
<?FM MARKER [Index] CHARACTER?>
CHARACTER
public static final String CHARACTER = “Character”<?FM MARKER [Index] Character?>

Value for PROPERTY_TYPE value in the case of java.lang.Character
<?FM MARKER [Cross-Ref] JmxConstants.DOUBLE?>
<?FM MARKER [Index] JmxConstants:DOUBLE?>
<?FM MARKER [Index] DOUBLE?>
DOUBLE
public static final String DOUBLE = “Double”<?FM MARKER [Index] Double?>

Value for PROPERTY_TYPE value in the case of java.lang.Double
<?FM MARKER [Cross-Ref] JmxConstants.FLOAT?>
<?FM MARKER [Index] JmxConstants:FLOAT?>
<?FM MARKER [Index] FLOAT?>
FLOAT
public static final String FLOAT = “Float”<?FM MARKER [Index] Float?>

Value for PROPERTY_TYPE value in the case of java.lang.Float
<?FM MARKER [Cross-Ref] JmxConstants.INTEGER?>
<?FM MARKER [Index] JmxConstants:INTEGER?>
<?FM MARKER [Index] INTEGER?>
INTEGER
public static final String INTEGER = “Integer”<?FM MARKER [Index] Integer?>

Value for PROPERTY_TYPE value in the case of java.lang.Integer
<?FM MARKER [Cross-Ref] JmxConstants.KEY?>
<?FM MARKER [Index] JmxConstants:KEY?>
<?FM MARKER [Index] KEY?>
KEY
public static final String KEY = “Key”<?FM MARKER [Index] Key?>

The key KEY. 
<?FM MARKER [Cross-Ref] JmxConstants.KEY_ITEM?>
<?FM MARKER [Index] JmxConstants:KEY_ITEM?>
<?FM MARKER [Index] KEY_ITEM?>
KEY_ITEM
public static final Item KEY_ITEM
The key of a property. The key is KEY and the type is SimpleType.STRING. 
<?FM MARKER [Cross-Ref] JmxConstants.LONG?>
<?FM MARKER [Index] JmxConstants:LONG?>
<?FM MARKER [Index] LONG?>
LONG
public static final String LONG = “Long”<?FM MARKER [Index] Long?>

Value for PROPERTY_TYPE value in the case of java.lang.Long
<?FM MARKER [Cross-Ref] JmxConstants.LONG_ARRAY_TYPE?>
<?FM MARKER [Index] JmxConstants:LONG_ARRAY_TYPE?>
<?FM MARKER [Index] LONG_ARRAY_TYPE?>
LONG_ARRAY_TYPE
public static final ArrayType LONG_ARRAY_TYPE
The MBean Open type for an array of longs 
<?FM MARKER [Cross-Ref] JmxConstants.OSGI_COMPENDIUM?>
<?FM MARKER [Index] JmxConstants:OSGI_COMPENDIUM?>
<?FM MARKER [Index] OSGI_COMPENDIUM?>
OSGI_COMPENDIUM
public static final String OSGI_COMPENDIUM = “osgi.compendium”<?FM MARKER [Index] osgi.compendium?>

The domain name of the selected OSGi compendium MBeans 
<?FM MARKER [Cross-Ref] JmxConstants.OSGI_CORE?>
<?FM MARKER [Index] JmxConstants:OSGI_CORE?>
<?FM MARKER [Index] OSGI_CORE?>
OSGI_CORE
public static final String OSGI_CORE = “osgi.core”<?FM MARKER [Index] osgi.core?>

The domain name of the core OSGi MBeans 
<?FM MARKER [Cross-Ref] JmxConstants.P_BOOLEAN?>
<?FM MARKER [Index] JmxConstants:P_BOOLEAN?>
<?FM MARKER [Index] P_BOOLEAN?>
P_BOOLEAN
public static final String P_BOOLEAN = “boolean”<?FM MARKER [Index] boolean?>

Value for PROPERTY_TYPE value in the case of the boolean primitive
type. 
<?FM MARKER [Cross-Ref] JmxConstants.P_BYTE?>
<?FM MARKER [Index] JmxConstants:P_BYTE?>
<?FM MARKER [Index] P_BYTE?>
P_BYTE
public static final String P_BYTE = “byte”<?FM MARKER [Index] byte?>

Value for PROPERTY_TYPE value in the case of the byte primitive
type. 
<?FM MARKER [Cross-Ref] JmxConstants.P_CHAR?>
<?FM MARKER [Index] JmxConstants:P_CHAR?>
<?FM MARKER [Index] P_CHAR?>
P_CHAR
public static final String P_CHAR = “char”<?FM MARKER [Index] char?>

Value for PROPERTY_TYPE value in the case of the char primitive
type. 
<?FM MARKER [Cross-Ref] JmxConstants.P_DOUBLE?>
<?FM MARKER [Index] JmxConstants:P_DOUBLE?>
<?FM MARKER [Index] P_DOUBLE?>
P_DOUBLE
public static final String P_DOUBLE = “double”<?FM MARKER [Index] double?>

Value for PROPERTY_TYPE value in the case of the double primitive
type. 
<?FM MARKER [Cross-Ref] JmxConstants.P_FLOAT?>
<?FM MARKER [Index] JmxConstants:P_FLOAT?>
<?FM MARKER [Index] P_FLOAT?>
P_FLOAT
public static final String P_FLOAT = “float”<?FM MARKER [Index] float?>

Value for PROPERTY_TYPE value in the case of the float primitive
type. 
<?FM MARKER [Cross-Ref] JmxConstants.P_INT?>
<?FM MARKER [Index] JmxConstants:P_INT?>
<?FM MARKER [Index] P_INT?>
P_INT
public static final String P_INT = “int”<?FM MARKER [Index] int?>

Value for PROPERTY_TYPE value in the case of the int primitive type. 
<?FM MARKER [Cross-Ref] JmxConstants.P_LONG?>
<?FM MARKER [Index] JmxConstants:P_LONG?>
<?FM MARKER [Index] P_LONG?>
P_LONG
public static final String P_LONG = “long”<?FM MARKER [Index] long?>

Value for PROPERTY_TYPE value in the case of the long primitive
type. 
<?FM MARKER [Cross-Ref] JmxConstants.P_SHORT?>
<?FM MARKER [Index] JmxConstants:P_SHORT?>
<?FM MARKER [Index] P_SHORT?>
P_SHORT
public static final String P_SHORT = “short”<?FM MARKER [Index] short?>

Value for PROPERTY_TYPE value in the case of the short primitive
type. 
<?FM MARKER [Cross-Ref] JmxConstants.PROPERTIES_TYPE?>
<?FM MARKER [Index] JmxConstants:PROPERTIES_TYPE?>
<?FM MARKER [Index] PROPERTIES_TYPE?>
PROPERTIES_TYPE
public static final TabularType PROPERTIES_TYPE
Describes a map with properties. The row type is PROPERTY_TYPE.
The index is defined to the KEY of the property. 
<?FM MARKER [Cross-Ref] JmxConstants.PROPERTY_TYPE?>
<?FM MARKER [Index] JmxConstants:PROPERTY_TYPE?>
<?FM MARKER [Index] PROPERTY_TYPE?>
PROPERTY_TYPE
public static final CompositeType PROPERTY_TYPE
A Composite Type describing a a single property. A property consists
of the following items KEY_ITEM, VALUE_ITEM, and TYPE_ITEM. 
<?FM MARKER [Cross-Ref] JmxConstants.SCALAR?>
<?FM MARKER [Index] JmxConstants:SCALAR?>
<?FM MARKER [Index] SCALAR?>
SCALAR
public static final List&lt;String&gt; SCALAR
A set of all scalars that can be used in the TYPE property of a
PROPERTIES_TYPE. This contains the following names: 
BIGDECIMAL
BIGINTEGER
BOOLEAN
BYTE
CHARACTER
DOUBLE
FLOAT
INTEGER
LONG
SHORT
STRING
VERSION
P_BYTE
P_CHAR
P_DOUBLE
P_FLOAT
P_INT
P_LONG
P_SHORT
<?FM MARKER [Cross-Ref] JmxConstants.SHORT?>
<?FM MARKER [Index] JmxConstants:SHORT?>
<?FM MARKER [Index] SHORT?>
SHORT
public static final String SHORT = “Short”<?FM MARKER [Index] Short?>

Value for PROPERTY_TYPE value in the case of java.lang.Short
<?FM MARKER [Cross-Ref] JmxConstants.STRING?>
<?FM MARKER [Index] JmxConstants:STRING?>
<?FM MARKER [Index] STRING?>
STRING
public static final String STRING = “String”<?FM MARKER [Index] String?>

Value for PROPERTY_TYPE value in the case of java.lang.String
<?FM MARKER [Cross-Ref] JmxConstants.STRING_ARRAY_TYPE?>
<?FM MARKER [Index] JmxConstants:STRING_ARRAY_TYPE?>
<?FM MARKER [Index] STRING_ARRAY_TYPE?>
STRING_ARRAY_TYPE
public static final ArrayType STRING_ARRAY_TYPE
The MBean Open type for an array of strings 
<?FM MARKER [Cross-Ref] JmxConstants.TYPE?>
<?FM MARKER [Index] JmxConstants:TYPE?>
<?FM MARKER [Index] TYPE?>
TYPE
public static final String TYPE = “Type”<?FM MARKER [Index] Type?>

The key TYPE. 
<?FM MARKER [Cross-Ref] JmxConstants.TYPE_ITEM?>
<?FM MARKER [Index] JmxConstants:TYPE_ITEM?>
<?FM MARKER [Index] TYPE_ITEM?>
TYPE_ITEM
public static final Item TYPE_ITEM
The type of the property. The key is TYPE and the type is SimpleType.STRING.
This string must follow the following syntax: 
 type      ::= scalar | vector | array
 vector    ::= ‘Vector of’ scalar
 array     ::= ‘Array of’ (scalar | primitive)
 scalar    ::= ‘String‘ | ‘BigInteger‘ | ‘BigDecimal‘
              | ‘Byte‘ | ‘Character‘ | ‘Short‘
              | ‘Integer‘ | ‘Long‘ | ‘Float‘
              | ‘Double‘ | ‘Version‘
 primitive ::= ‘byte‘ | ‘char‘ | ‘short‘
              | ‘int‘ | ‘long‘ | ‘float‘
              | ‘double‘
This encoding does not support arrays in vectors or arrays. Arrays
and vectors can only contain scalars. List properties are encoded
as arrays. Empty lists, arrays or vectors are not represented. Null
is not an allowed value. 
For example, the encoding of a byte array byte[] {1,2,3,5,7} would
look like:  
   type:  ‘Array of byte’
   value: 1,2,3,5,7
Quoting can be used as follows: 
   type:  ‘Array of String’
   value: ‘abc’, ‘def’, ‘\’quoted\’’, “’quoted’”, “\\”
<?FM MARKER [Cross-Ref] JmxConstants.VALUE?>
<?FM MARKER [Index] JmxConstants:VALUE?>
<?FM MARKER [Index] VALUE?>
VALUE
public static final String VALUE = “Value”<?FM MARKER [Index] Value?>

The key VALUE. 
<?FM MARKER [Cross-Ref] JmxConstants.VALUE_ITEM?>
<?FM MARKER [Index] JmxConstants:VALUE_ITEM?>
<?FM MARKER [Index] VALUE_ITEM?>
VALUE_ITEM
public static final Item VALUE_ITEM
The value of a property. The key is VALUE and the type is SimpleType.STRING.
A value will be encoded by the string given in TYPE. The syntax
for this type is given in TYPE_ITEM. 
<?FM MARKER [Cross-Ref] JmxConstants.VECTOR_OF?>
<?FM MARKER [Index] JmxConstants:VECTOR_OF?>
<?FM MARKER [Index] VECTOR_OF?>
VECTOR_OF
public static final String VECTOR_OF = “Vector of “<?FM MARKER [Index] `Vector of '?>

For an encoded vector we need to start with ARRAY_OF. This must
be followed by one of the names in SCALAR. 
<?FM MARKER [Cross-Ref] JmxConstants.VERSION?>
<?FM MARKER [Index] JmxConstants:VERSION?>
<?FM MARKER [Index] VERSION?>
VERSION
public static final String VERSION = “Version”<?FM MARKER [Index] Version?>

Value for PROPERTY_TYPE value in the case of Version
	Since	1.1

</INSET><INSET xml:id="i3412922">org.osgi.jmx.framework<?FM MARKER [Cross-Ref] org.osgi.jmx.framework?>
<?FM MARKER [Index] org.osgi.jmx.framework?>
<?FM MARKER [Cross-Ref] package:org.osgi.jmx.framework?>

OSGi JMX Framework Package Version 1.7.  
Bundles wishing to use this package must list the package in the
Import-Package header of the bundle’s manifest. This package has
two types of users: the consumers that use the API in this package and
the providers that implement the API in this package. 
Example import for consumers using the API in this package: 
Import-Package: org.osgi.jmx.framework; version=”[1.7,2.0)”
Example import for providers implementing the API in this package: 
Import-Package: org.osgi.jmx.framework; version=”[1.7,1.8)”
Summary
BundleStateMBean –  This MBean represents the Bundle state of the
framework. 
FrameworkMBean –  The FrameworkMbean provides mechanisms to exert
control over the framework. 
PackageStateMBean –  This MBean provides information about the package
state of the framework. 
ServiceStateMBean –  This MBean represents the Service state of
the framework. 
Permissions
<?FM MARKER [Cross-Ref] BundleStateMBean?>
<?FM MARKER [Index] BundleStateMBean?>
<?FM MARKER [Index] interface:BundleStateMBean?>
BundleStateMBean
public interface BundleStateMBean
This MBean represents the Bundle state of the framework. This MBean
also emits events that clients can use to get notified of the changes
in the bundle state of the framework. 
	Concurrency	Thread-safe 
<?FM MARKER [Cross-Ref] BundleStateMBean.ACTIVATION_POLICY_USED?>
<?FM MARKER [Index] BundleStateMBean:ACTIVATION_POLICY_USED?>
<?FM MARKER [Index] ACTIVATION_POLICY_USED?>
ACTIVATION_POLICY_USED
public static final String ACTIVATION_POLICY_USED = “ActivationPolicyUsed”<?FM MARKER [Index] ActivationPolicyUsed?>

The key ACTIVATION_POLICY_USED, used in ACTIVATION_POLICY_USED_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.ACTIVATION_POLICY_USED_ITEM?>
<?FM MARKER [Index] BundleStateMBean:ACTIVATION_POLICY_USED_ITEM?>
<?FM MARKER [Index] ACTIVATION_POLICY_USED_ITEM?>
ACTIVATION_POLICY_USED_ITEM
public static final Item ACTIVATION_POLICY_USED_ITEM
The item containing the indication whether the bundle activation
policy must be used in BUNDLE_TYPE. The key is ACTIVATION_POLICY_USED
and the type is SimpleType.BOOLEAN. 
<?FM MARKER [Cross-Ref] BundleStateMBean.ACTIVE?>
<?FM MARKER [Index] BundleStateMBean:ACTIVE?>
<?FM MARKER [Index] ACTIVE?>
ACTIVE
public static final String ACTIVE = “ACTIVE”<?FM MARKER [Index] ACTIVE?>

Constant ACTIVE for the STATE
<?FM MARKER [Cross-Ref] BundleStateMBean.BUNDLE_EVENT_TYPE?>
<?FM MARKER [Index] BundleStateMBean:BUNDLE_EVENT_TYPE?>
<?FM MARKER [Index] BUNDLE_EVENT_TYPE?>
BUNDLE_EVENT_TYPE
public static final CompositeType BUNDLE_EVENT_TYPE
The Composite Type that represents a bundle event. This composite
consists of: 
IDENTIFIER
LOCATION
SYMBOLIC_NAME
EVENT
<?FM MARKER [Cross-Ref] BundleStateMBean.BUNDLE_TYPE?>
<?FM MARKER [Index] BundleStateMBean:BUNDLE_TYPE?>
<?FM MARKER [Index] BUNDLE_TYPE?>
BUNDLE_TYPE
public static final CompositeType BUNDLE_TYPE
The Composite Type that represents a bundle. This composite consist
of: 
EXPORTED_PACKAGES
FRAGMENT
FRAGMENTS
HEADERS
HOSTS
IDENTIFIER
IMPORTED_PACKAGES
LAST_MODIFIED
LOCATION
ACTIVATION_POLICY_USED
PERSISTENTLY_STARTED
REGISTERED_SERVICES
REMOVAL_PENDING
REQUIRED
REQUIRED_BUNDLES
REQUIRING_BUNDLES
START_LEVEL
STATE
SERVICES_IN_USE
SYMBOLIC_NAME
VERSION
It is used by BUNDLES_TYPE. 
<?FM MARKER [Cross-Ref] BundleStateMBean.BUNDLES_TYPE?>
<?FM MARKER [Index] BundleStateMBean:BUNDLES_TYPE?>
<?FM MARKER [Index] BUNDLES_TYPE?>
BUNDLES_TYPE
public static final TabularType BUNDLES_TYPE
The Tabular Type for a list of bundles. The row type is BUNDLE_TYPE
and the index is IDENTIFIER. 
<?FM MARKER [Cross-Ref] BundleStateMBean.EVENT?>
<?FM MARKER [Index] BundleStateMBean:EVENT?>
<?FM MARKER [Index] EVENT?>
EVENT
public static final String EVENT = “BundleEvent”<?FM MARKER [Index] BundleEvent?>

The key EVENT, used in EVENT_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.EVENT_ITEM?>
<?FM MARKER [Index] BundleStateMBean:EVENT_ITEM?>
<?FM MARKER [Index] EVENT_ITEM?>
EVENT_ITEM
public static final Item EVENT_ITEM
The item containing the event type. The key is EVENT and the type
is SimpleType.INTEGER
<?FM MARKER [Cross-Ref] BundleStateMBean.EXPORTED_PACKAGES?>
<?FM MARKER [Index] BundleStateMBean:EXPORTED_PACKAGES?>
<?FM MARKER [Index] EXPORTED_PACKAGES?>
EXPORTED_PACKAGES
public static final String EXPORTED_PACKAGES = “ExportedPackages”<?FM MARKER [Index] ExportedPackages?>

The key EXPORTED_PACKAGES, used in EXPORTED_PACKAGES_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.EXPORTED_PACKAGES_ITEM?>
<?FM MARKER [Index] BundleStateMBean:EXPORTED_PACKAGES_ITEM?>
<?FM MARKER [Index] EXPORTED_PACKAGES_ITEM?>
EXPORTED_PACKAGES_ITEM
public static final Item EXPORTED_PACKAGES_ITEM
The item containing the exported package names in BUNDLE_TYPE .The
key is EXPORTED_PACKAGES and the the type is JmxConstants.STRING_ARRAY_TYPE. 
<?FM MARKER [Cross-Ref] BundleStateMBean.FRAGMENT?>
<?FM MARKER [Index] BundleStateMBean:FRAGMENT?>
<?FM MARKER [Index] FRAGMENT?>
FRAGMENT
public static final String FRAGMENT = “Fragment”<?FM MARKER [Index] Fragment?>

The key FRAGMENT, used in FRAGMENT_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.FRAGMENT_ITEM?>
<?FM MARKER [Index] BundleStateMBean:FRAGMENT_ITEM?>
<?FM MARKER [Index] FRAGMENT_ITEM?>
FRAGMENT_ITEM
public static final Item FRAGMENT_ITEM
The item containing the fragment status in BUNDLE_TYPE. The key
is FRAGMENT and the the type is SimpleType.BOOLEAN. 
<?FM MARKER [Cross-Ref] BundleStateMBean.FRAGMENTS?>
<?FM MARKER [Index] BundleStateMBean:FRAGMENTS?>
<?FM MARKER [Index] FRAGMENTS?>
FRAGMENTS
public static final String FRAGMENTS = “Fragments”<?FM MARKER [Index] Fragments?>

The key FRAGMENTS, used in FRAGMENTS_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.FRAGMENTS_ITEM?>
<?FM MARKER [Index] BundleStateMBean:FRAGMENTS_ITEM?>
<?FM MARKER [Index] FRAGMENTS_ITEM?>
FRAGMENTS_ITEM
public static final Item FRAGMENTS_ITEM
The item containing the list of fragments the bundle is host to
in BUNDLE_TYPE. The key is FRAGMENTS and the type is JmxConstants.LONG_ARRAY_TYPE. 
<?FM MARKER [Cross-Ref] BundleStateMBean.HEADER_TYPE?>
<?FM MARKER [Index] BundleStateMBean:HEADER_TYPE?>
<?FM MARKER [Index] HEADER_TYPE?>
HEADER_TYPE
public static final CompositeType HEADER_TYPE
The Composite Type describing an entry in bundle headers. It consists
of KEY_ITEM and VALUE_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.HEADERS?>
<?FM MARKER [Index] BundleStateMBean:HEADERS?>
<?FM MARKER [Index] HEADERS?>
HEADERS
public static final String HEADERS = “Headers”<?FM MARKER [Index] Headers?>

The key HEADERS, used in HEADERS_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.HEADERS_ITEM?>
<?FM MARKER [Index] BundleStateMBean:HEADERS_ITEM?>
<?FM MARKER [Index] HEADERS_ITEM?>
HEADERS_ITEM
public static final Item HEADERS_ITEM
The item containing the bundle headers in BUNDLE_TYPE. The key is
HEADERS and the the type is HEADERS_TYPE. 
<?FM MARKER [Cross-Ref] BundleStateMBean.HEADERS_TYPE?>
<?FM MARKER [Index] BundleStateMBean:HEADERS_TYPE?>
<?FM MARKER [Index] HEADERS_TYPE?>
HEADERS_TYPE
public static final TabularType HEADERS_TYPE
The Tabular Type describing the type of the Tabular Data value that
is returned from getHeaders(long) method. The primary item is KEY_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.HOSTS?>
<?FM MARKER [Index] BundleStateMBean:HOSTS?>
<?FM MARKER [Index] HOSTS?>
HOSTS
public static final String HOSTS = “Hosts”<?FM MARKER [Index] Hosts?>

The key HOSTS, used in HOSTS_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.HOSTS_ITEM?>
<?FM MARKER [Index] BundleStateMBean:HOSTS_ITEM?>
<?FM MARKER [Index] HOSTS_ITEM?>
HOSTS_ITEM
public static final Item HOSTS_ITEM
The item containing the bundle identifiers representing the hosts
in BUNDLE_TYPE. The key is HOSTS and the type is JmxConstants.LONG_ARRAY_TYPE
<?FM MARKER [Cross-Ref] BundleStateMBean.IDENTIFIER?>
<?FM MARKER [Index] BundleStateMBean:IDENTIFIER?>
<?FM MARKER [Index] IDENTIFIER?>
IDENTIFIER
public static final String IDENTIFIER = “Identifier”<?FM MARKER [Index] Identifier?>

The key IDENTIFIER, used in IDENTIFIER_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.IDENTIFIER_ITEM?>
<?FM MARKER [Index] BundleStateMBean:IDENTIFIER_ITEM?>
<?FM MARKER [Index] IDENTIFIER_ITEM?>
IDENTIFIER_ITEM
public static final Item IDENTIFIER_ITEM
The item containing the bundle identifier in BUNDLE_TYPE. The key
is IDENTIFIER and the the type is SimpleType.LONG. 
<?FM MARKER [Cross-Ref] BundleStateMBean.IMPORTED_PACKAGES?>
<?FM MARKER [Index] BundleStateMBean:IMPORTED_PACKAGES?>
<?FM MARKER [Index] IMPORTED_PACKAGES?>
IMPORTED_PACKAGES
public static final String IMPORTED_PACKAGES = “ImportedPackages”<?FM MARKER [Index] ImportedPackages?>

The key IMPORTED_PACKAGES, used in EXPORTED_PACKAGES_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.IMPORTED_PACKAGES_ITEM?>
<?FM MARKER [Index] BundleStateMBean:IMPORTED_PACKAGES_ITEM?>
<?FM MARKER [Index] IMPORTED_PACKAGES_ITEM?>
IMPORTED_PACKAGES_ITEM
public static final Item IMPORTED_PACKAGES_ITEM
The item containing the imported package names in BUNDLE_TYPE .The
key is IMPORTED_PACKAGES and the the type is JmxConstants.STRING_ARRAY_TYPE. 
<?FM MARKER [Cross-Ref] BundleStateMBean.INSTALLED?>
<?FM MARKER [Index] BundleStateMBean:INSTALLED?>
<?FM MARKER [Index] INSTALLED?>
INSTALLED
public static final String INSTALLED = “INSTALLED”<?FM MARKER [Index] INSTALLED?>

Constant INSTALLED for the STATE
<?FM MARKER [Cross-Ref] BundleStateMBean.KEY?>
<?FM MARKER [Index] BundleStateMBean:KEY?>
<?FM MARKER [Index] KEY?>
KEY
public static final String KEY = “Key”<?FM MARKER [Index] Key?>

The key KEY, used in KEY_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.KEY_ITEM?>
<?FM MARKER [Index] BundleStateMBean:KEY_ITEM?>
<?FM MARKER [Index] KEY_ITEM?>
KEY_ITEM
public static final Item KEY_ITEM
The item describing the key of a bundle header entry. The key is
KEY and the type is SimpleType.STRING. 
<?FM MARKER [Cross-Ref] BundleStateMBean.LAST_MODIFIED?>
<?FM MARKER [Index] BundleStateMBean:LAST_MODIFIED?>
<?FM MARKER [Index] LAST_MODIFIED?>
LAST_MODIFIED
public static final String LAST_MODIFIED = “LastModified”<?FM MARKER [Index] LastModified?>

The key LAST_MODIFIED, used in LAST_MODIFIED_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.LAST_MODIFIED_ITEM?>
<?FM MARKER [Index] BundleStateMBean:LAST_MODIFIED_ITEM?>
<?FM MARKER [Index] LAST_MODIFIED_ITEM?>
LAST_MODIFIED_ITEM
public static final Item LAST_MODIFIED_ITEM
The item containing the last modified time in the BUNDLE_TYPE. The
key is LAST_MODIFIED and the the type is SimpleType.LONG. 
<?FM MARKER [Cross-Ref] BundleStateMBean.LOCATION?>
<?FM MARKER [Index] BundleStateMBean:LOCATION?>
<?FM MARKER [Index] LOCATION?>
LOCATION
public static final String LOCATION = “Location”<?FM MARKER [Index] Location?>

The key LOCATION, used in LOCATION_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.LOCATION_ITEM?>
<?FM MARKER [Index] BundleStateMBean:LOCATION_ITEM?>
<?FM MARKER [Index] LOCATION_ITEM?>
LOCATION_ITEM
public static final Item LOCATION_ITEM
The item containing the bundle location in BUNDLE_TYPE. The key
is LOCATION and the the type is SimpleType.STRING. 
<?FM MARKER [Cross-Ref] BundleStateMBean.OBJECTNAME?>
<?FM MARKER [Index] BundleStateMBean:OBJECTNAME?>
<?FM MARKER [Index] OBJECTNAME?>
OBJECTNAME
public static final String OBJECTNAME = “osgi.core:type=bundleState,version=1.7”<?FM MARKER [Index] osgi.core:type=bundleState,version=1.7?>

The Object Name prefix for this mbean. The full object name also
contains the framework name and uuid as properties. 
<?FM MARKER [Cross-Ref] BundleStateMBean.PERSISTENTLY_STARTED?>
<?FM MARKER [Index] BundleStateMBean:PERSISTENTLY_STARTED?>
<?FM MARKER [Index] PERSISTENTLY_STARTED?>
PERSISTENTLY_STARTED
public static final String PERSISTENTLY_STARTED = “PersistentlyStarted”<?FM MARKER [Index] PersistentlyStarted?>

The key PERSISTENTLY_STARTED, used in PERSISTENTLY_STARTED_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.PERSISTENTLY_STARTED_ITEM?>
<?FM MARKER [Index] BundleStateMBean:PERSISTENTLY_STARTED_ITEM?>
<?FM MARKER [Index] PERSISTENTLY_STARTED_ITEM?>
PERSISTENTLY_STARTED_ITEM
public static final Item PERSISTENTLY_STARTED_ITEM
The item containing the indication of persistently started in BUNDLE_TYPE.
The key is PERSISTENTLY_STARTED and the the type is SimpleType.BOOLEAN. 
<?FM MARKER [Cross-Ref] BundleStateMBean.REGISTERED_SERVICES?>
<?FM MARKER [Index] BundleStateMBean:REGISTERED_SERVICES?>
<?FM MARKER [Index] REGISTERED_SERVICES?>
REGISTERED_SERVICES
public static final String REGISTERED_SERVICES = “RegisteredServices”<?FM MARKER [Index] RegisteredServices?>

The key REGISTERED_SERVICES, used in REGISTERED_SERVICES_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.REGISTERED_SERVICES_ITEM?>
<?FM MARKER [Index] BundleStateMBean:REGISTERED_SERVICES_ITEM?>
<?FM MARKER [Index] REGISTERED_SERVICES_ITEM?>
REGISTERED_SERVICES_ITEM
public static final Item REGISTERED_SERVICES_ITEM
The item containing the registered services of the bundle in BUNDLE_TYPE.
The key is REGISTERED_SERVICES and the the type is JmxConstants.LONG_ARRAY_TYPE. 
<?FM MARKER [Cross-Ref] BundleStateMBean.REMOVAL_PENDING?>
<?FM MARKER [Index] BundleStateMBean:REMOVAL_PENDING?>
<?FM MARKER [Index] REMOVAL_PENDING?>
REMOVAL_PENDING
public static final String REMOVAL_PENDING = “RemovalPending”<?FM MARKER [Index] RemovalPending?>

The key REMOVAL_PENDING, used in REMOVAL_PENDING_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.REMOVAL_PENDING_ITEM?>
<?FM MARKER [Index] BundleStateMBean:REMOVAL_PENDING_ITEM?>
<?FM MARKER [Index] REMOVAL_PENDING_ITEM?>
REMOVAL_PENDING_ITEM
public static final Item REMOVAL_PENDING_ITEM
The item containing the indication of removal pending in BUNDLE_TYPE.
The key is REMOVAL_PENDING and the type is SimpleType.BOOLEAN. 
<?FM MARKER [Cross-Ref] BundleStateMBean.REQUIRED?>
<?FM MARKER [Index] BundleStateMBean:REQUIRED?>
<?FM MARKER [Index] REQUIRED?>
REQUIRED
public static final String REQUIRED = “Required”<?FM MARKER [Index] Required?>

The key REQUIRED, used in REQUIRED_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.REQUIRED_BUNDLES?>
<?FM MARKER [Index] BundleStateMBean:REQUIRED_BUNDLES?>
<?FM MARKER [Index] REQUIRED_BUNDLES?>
REQUIRED_BUNDLES
public static final String REQUIRED_BUNDLES = “RequiredBundles”<?FM MARKER [Index] RequiredBundles?>

The key REQUIRED_BUNDLES, used in REQUIRED_BUNDLES_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.REQUIRED_BUNDLES_ITEM?>
<?FM MARKER [Index] BundleStateMBean:REQUIRED_BUNDLES_ITEM?>
<?FM MARKER [Index] REQUIRED_BUNDLES_ITEM?>
REQUIRED_BUNDLES_ITEM
public static final Item REQUIRED_BUNDLES_ITEM
The item containing the required bundles in BUNDLE_TYPE. The key
is REQUIRED_BUNDLES and the type is JmxConstants.LONG_ARRAY_TYPE
<?FM MARKER [Cross-Ref] BundleStateMBean.REQUIRED_ITEM?>
<?FM MARKER [Index] BundleStateMBean:REQUIRED_ITEM?>
<?FM MARKER [Index] REQUIRED_ITEM?>
REQUIRED_ITEM
public static final Item REQUIRED_ITEM
The item containing the required status in BUNDLE_TYPE. The key
is REQUIRED and the the type is SimpleType.BOOLEAN. 
<?FM MARKER [Cross-Ref] BundleStateMBean.REQUIRING_BUNDLES?>
<?FM MARKER [Index] BundleStateMBean:REQUIRING_BUNDLES?>
<?FM MARKER [Index] REQUIRING_BUNDLES?>
REQUIRING_BUNDLES
public static final String REQUIRING_BUNDLES = “RequiringBundles”<?FM MARKER [Index] RequiringBundles?>

The key REQUIRING_BUNDLES, used in REQUIRING_BUNDLES_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.REQUIRING_BUNDLES_ITEM?>
<?FM MARKER [Index] BundleStateMBean:REQUIRING_BUNDLES_ITEM?>
<?FM MARKER [Index] REQUIRING_BUNDLES_ITEM?>
REQUIRING_BUNDLES_ITEM
public static final Item REQUIRING_BUNDLES_ITEM
The item containing the bundles requiring this bundle in BUNDLE_TYPE.
The key is REQUIRING_BUNDLES and the type is JmxConstants.LONG_ARRAY_TYPE
<?FM MARKER [Cross-Ref] BundleStateMBean.RESOLVED?>
<?FM MARKER [Index] BundleStateMBean:RESOLVED?>
<?FM MARKER [Index] RESOLVED?>
RESOLVED
public static final String RESOLVED = “RESOLVED”<?FM MARKER [Index] RESOLVED?>

Constant RESOLVED for the STATE
<?FM MARKER [Cross-Ref] BundleStateMBean.SERVICES_IN_USE?>
<?FM MARKER [Index] BundleStateMBean:SERVICES_IN_USE?>
<?FM MARKER [Index] SERVICES_IN_USE?>
SERVICES_IN_USE
public static final String SERVICES_IN_USE = “ServicesInUse”<?FM MARKER [Index] ServicesInUse?>

The key SERVICES_IN_USE, used in SERVICES_IN_USE_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.SERVICES_IN_USE_ITEM?>
<?FM MARKER [Index] BundleStateMBean:SERVICES_IN_USE_ITEM?>
<?FM MARKER [Index] SERVICES_IN_USE_ITEM?>
SERVICES_IN_USE_ITEM
public static final Item SERVICES_IN_USE_ITEM
The item containing the services in use by this bundle in BUNDLE_TYPE.
The key is SERVICES_IN_USE and the the type is JmxConstants.LONG_ARRAY_TYPE. 
<?FM MARKER [Cross-Ref] BundleStateMBean.START_LEVEL?>
<?FM MARKER [Index] BundleStateMBean:START_LEVEL?>
<?FM MARKER [Index] START_LEVEL?>
START_LEVEL
public static final String START_LEVEL = “StartLevel”<?FM MARKER [Index] StartLevel?>

The key START_LEVEL, used in START_LEVEL_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.START_LEVEL_ITEM?>
<?FM MARKER [Index] BundleStateMBean:START_LEVEL_ITEM?>
<?FM MARKER [Index] START_LEVEL_ITEM?>
START_LEVEL_ITEM
public static final Item START_LEVEL_ITEM
The item containing the start level in BUNDLE_TYPE. The key is START_LEVEL
and the the type is SimpleType.INTEGER. 
<?FM MARKER [Cross-Ref] BundleStateMBean.STARTING?>
<?FM MARKER [Index] BundleStateMBean:STARTING?>
<?FM MARKER [Index] STARTING?>
STARTING
public static final String STARTING = “STARTING”<?FM MARKER [Index] STARTING?>

Constant STARTING for the STATE
<?FM MARKER [Cross-Ref] BundleStateMBean.STATE?>
<?FM MARKER [Index] BundleStateMBean:STATE?>
<?FM MARKER [Index] STATE?>
STATE
public static final String STATE = “State”<?FM MARKER [Index] State?>

The key STATE, used in STATE_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.STATE_ITEM?>
<?FM MARKER [Index] BundleStateMBean:STATE_ITEM?>
<?FM MARKER [Index] STATE_ITEM?>
STATE_ITEM
public static final Item STATE_ITEM
The item containing the bundle state in BUNDLE_TYPE. The key is
STATE and the the type is SimpleType.STRING. The returned values
must be one of the following strings: 
INSTALLED
RESOLVED
STARTING
ACTIVE
STOPPING
UNINSTALLED
UNKNOWN
<?FM MARKER [Cross-Ref] BundleStateMBean.STOPPING?>
<?FM MARKER [Index] BundleStateMBean:STOPPING?>
<?FM MARKER [Index] STOPPING?>
STOPPING
public static final String STOPPING = “STOPPING”<?FM MARKER [Index] STOPPING?>

Constant STOPPING for the STATE
<?FM MARKER [Cross-Ref] BundleStateMBean.SYMBOLIC_NAME?>
<?FM MARKER [Index] BundleStateMBean:SYMBOLIC_NAME?>
<?FM MARKER [Index] SYMBOLIC_NAME?>
SYMBOLIC_NAME
public static final String SYMBOLIC_NAME = “SymbolicName”<?FM MARKER [Index] SymbolicName?>

The key SYMBOLIC_NAME, used in SYMBOLIC_NAME_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.SYMBOLIC_NAME_ITEM?>
<?FM MARKER [Index] BundleStateMBean:SYMBOLIC_NAME_ITEM?>
<?FM MARKER [Index] SYMBOLIC_NAME_ITEM?>
SYMBOLIC_NAME_ITEM
public static final Item SYMBOLIC_NAME_ITEM
The item containing the symbolic name in BUNDLE_TYPE. The key is
SYMBOLIC_NAME and the the type is SimpleType.STRING. 
<?FM MARKER [Cross-Ref] BundleStateMBean.UNINSTALLED?>
<?FM MARKER [Index] BundleStateMBean:UNINSTALLED?>
<?FM MARKER [Index] UNINSTALLED?>
UNINSTALLED
public static final String UNINSTALLED = “UNINSTALLED”<?FM MARKER [Index] UNINSTALLED?>

Constant UNINSTALLED for the STATE
<?FM MARKER [Cross-Ref] BundleStateMBean.UNKNOWN?>
<?FM MARKER [Index] BundleStateMBean:UNKNOWN?>
<?FM MARKER [Index] UNKNOWN?>
UNKNOWN
public static final String UNKNOWN = “UNKNOWN”<?FM MARKER [Index] UNKNOWN?>

Constant UNKNOWN for the STATE
<?FM MARKER [Cross-Ref] BundleStateMBean.VALUE?>
<?FM MARKER [Index] BundleStateMBean:VALUE?>
<?FM MARKER [Index] VALUE?>
VALUE
public static final String VALUE = “Value”<?FM MARKER [Index] Value?>

The key VALUE, used in VALUE_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.VALUE_ITEM?>
<?FM MARKER [Index] BundleStateMBean:VALUE_ITEM?>
<?FM MARKER [Index] VALUE_ITEM?>
VALUE_ITEM
public static final Item VALUE_ITEM
The item describing the value of a bundle header entry. The key
is VALUE and the type is SimpleType.STRING. 
<?FM MARKER [Cross-Ref] BundleStateMBean.VERSION?>
<?FM MARKER [Index] BundleStateMBean:VERSION?>
<?FM MARKER [Index] VERSION?>
VERSION
public static final String VERSION = “Version”<?FM MARKER [Index] Version?>

The key VERSION, used in VERSION_ITEM. 
<?FM MARKER [Cross-Ref] BundleStateMBean.VERSION_ITEM?>
<?FM MARKER [Index] BundleStateMBean:VERSION_ITEM?>
<?FM MARKER [Index] VERSION_ITEM?>
VERSION_ITEM
public static final Item VERSION_ITEM
The item containing the symbolic name in BUNDLE_TYPE. The key is
SYMBOLIC_NAME and the the type is SimpleType.STRING. 
<?FM MARKER [Cross-Ref] BundleStateMBean.getBundle(long)?>
<?FM MARKER [Index] BundleStateMBean:getBundle?>
<?FM MARKER [Index] getBundle?>
getBundle(long)
public CompositeData getBundle ( long bundleIdentifier ) throws
IOException
	bundleIdentifier	the bundle identifier of the requested bundle
	
Obtain the information regarding a single bundle.  The result is
defined by the BUNDLE_TYPE CompositeType. 
	Returns	A CompositeData object with the bundle information
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.getBundleIds()?>
<?FM MARKER [Index] BundleStateMBean:getBundleIds?>
<?FM MARKER [Index] getBundleIds?>
getBundleIds()
public long[] getBundleIds (  )  throws IOException
	
List all bundle IDs in the framework. 
	Returns	all the bundle ids in the framework.
	Throws	IOException –  if the operation fails 
<?FM MARKER [Cross-Ref] BundleStateMBean.getExportedPackages(long)?>
<?FM MARKER [Index] BundleStateMBean:getExportedPackages?>
<?FM MARKER [Index] getExportedPackages?>
getExportedPackages(long)
public String[] getExportedPackages ( long bundleId )  throws IOException
	bundleId	
	
Answer the list of exported packages for this bundle. 
	Returns	the array of package names, combined with their version
in the format &lt;packageName;version&gt;
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.getFragments(long)?>
<?FM MARKER [Index] BundleStateMBean:getFragments?>
<?FM MARKER [Index] getFragments?>
getFragments(long)
public long[] getFragments ( long bundleId )  throws IOException
	bundleId	
	
Answer the list of the bundle ids of the fragments associated with
this bundle 
	Returns	the array of bundle identifiers
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.getHeader(long,String)?>
<?FM MARKER [Index] BundleStateMBean:getHeader?>
<?FM MARKER [Index] getHeader?>
getHeader(long,String)
public String getHeader ( long bundleId , String key ) throws IOException
	bundleId	the unique identifier of the bundle
	key	the key of the header to look up
	
Retrieve a single header from the bundle headers. 
	Returns	the value of associated header
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.getHeader(long,String,String)?>
<?FM MARKER [Index] BundleStateMBean:getHeader?>
<?FM MARKER [Index] getHeader?>
getHeader(long,String,String)
public String getHeader ( long bundleId , String key , String locale
) throws IOException
	bundleId	the unique identifier of the bundle
	key	the key of the header to look up
	locale	the locale name into which the header value is to be localized.
The value of this parameter follows the same rules as the locale
parameter in Bundle.getHeaders(String locale)
	
Retrieve a single header from the bundle headers.  
This method performs the same function as getHeaders(long bundleId)
except the manifest header values are localized to the specified
locale.
	Returns	the value of associated header
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.getHeaders(long)?>
<?FM MARKER [Index] BundleStateMBean:getHeaders?>
<?FM MARKER [Index] getHeaders?>
getHeaders(long)
public TabularData getHeaders ( long bundleId ) throws IOException
	bundleId	the unique identifier of the bundle
	
Answer the headers for the bundle uniquely identified by the bundle
id. The Tabular Data is typed by the HEADERS_TYPE. 
	Returns	the table of associated header key and values
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.getHeaders(long,String)?>
<?FM MARKER [Index] BundleStateMBean:getHeaders?>
<?FM MARKER [Index] getHeaders?>
getHeaders(long,String)
public TabularData getHeaders ( long bundleId , String locale )
throws IOException
	bundleId	the unique identifier of the bundle
	locale	the locale name into which the header values are to be localized.
The value of this parameter follows the same rules as the locale
parameter in Bundle.getHeaders(String locale)
	
Answer the headers for the bundle uniquely identified by the bundle
id. The Tabular Data is typed by the HEADERS_TYPE.  
This method performs the same function as getHeaders(long bundleId)
except the manifest header values are localized to the specified
locale.
	Returns	the table of associated header key and values
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.getHosts(long)?>
<?FM MARKER [Index] BundleStateMBean:getHosts?>
<?FM MARKER [Index] getHosts?>
getHosts(long)
public long[] getHosts ( long fragment )  throws IOException
	fragment	the bundle id of the fragment
	
Answer the list of bundle ids of the bundles which host a fragment 
	Returns	the array of bundle identifiers
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.getImportedPackages(long)?>
<?FM MARKER [Index] BundleStateMBean:getImportedPackages?>
<?FM MARKER [Index] getImportedPackages?>
getImportedPackages(long)
public String[] getImportedPackages ( long bundleId )  throws IOException
	bundleId	the bundle identifier
	
Answer the array of the packages imported by this bundle 
	Returns	the array of package names, combined with their version
in the format &lt;packageName;version&gt;
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.getLastModified(long)?>
<?FM MARKER [Index] BundleStateMBean:getLastModified?>
<?FM MARKER [Index] getLastModified?>
getLastModified(long)
public long getLastModified ( long bundleId ) throws IOException
	bundleId	the unique identifier of a bundle
	
Answer the last modified time of a bundle 
	Returns	the last modified time
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.getLocation(long)?>
<?FM MARKER [Index] BundleStateMBean:getLocation?>
<?FM MARKER [Index] getLocation?>
getLocation(long)
public String getLocation ( long bundleId ) throws IOException
	bundleId	the identifier of the bundle
	
Answer the location of the bundle. 
	Returns	The location string of this bundle
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.getRegisteredServices(long)?>
<?FM MARKER [Index] BundleStateMBean:getRegisteredServices?>
<?FM MARKER [Index] getRegisteredServices?>
getRegisteredServices(long)
public long[] getRegisteredServices ( long bundleId )  throws IOException
	bundleId	the bundle identifier
	
Answer the list of service identifiers representing the services
this bundle exports 
	Returns	the list of service identifiers
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.getRequiredBundles(long)?>
<?FM MARKER [Index] BundleStateMBean:getRequiredBundles?>
<?FM MARKER [Index] getRequiredBundles?>
getRequiredBundles(long)
public long[] getRequiredBundles ( long bundleIdentifier )  throws
IOException
	bundleIdentifier	the bundle identifier to find the dependencies
for
	
Answer an array of ids of bundles the given bundle depends on. 
	Returns	the bundle identifiers of the dependencies
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.getRequiringBundles(long)?>
<?FM MARKER [Index] BundleStateMBean:getRequiringBundles?>
<?FM MARKER [Index] getRequiringBundles?>
getRequiringBundles(long)
public long[] getRequiringBundles ( long bundleIdentifier )  throws
IOException
	bundleIdentifier	the bundle identifier
	
Answer the list of identifiers of the bundles which require this
bundle 
	Returns	the list of bundle identifiers
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.getServicesInUse(long)?>
<?FM MARKER [Index] BundleStateMBean:getServicesInUse?>
<?FM MARKER [Index] getServicesInUse?>
getServicesInUse(long)
public long[] getServicesInUse ( long bundleIdentifier )  throws
IOException
	bundleIdentifier	the bundle identifier
	
Answer the list of service identifiers which refer to the the services
this bundle is using 
	Returns	the list of service identifiers
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.getStartLevel(long)?>
<?FM MARKER [Index] BundleStateMBean:getStartLevel?>
<?FM MARKER [Index] getStartLevel?>
getStartLevel(long)
public int getStartLevel ( long bundleId ) throws IOException
	bundleId	the identifier of the bundle
	
Answer the start level of the bundle 
	Returns	the start level
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.getState(long)?>
<?FM MARKER [Index] BundleStateMBean:getState?>
<?FM MARKER [Index] getState?>
getState(long)
public String getState ( long bundleId ) throws IOException
	bundleId	the identifier of the bundle
	
Answer the symbolic name of the state of the bundle 
	Returns	the string name of the bundle state
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.getSymbolicName(long)?>
<?FM MARKER [Index] BundleStateMBean:getSymbolicName?>
<?FM MARKER [Index] getSymbolicName?>
getSymbolicName(long)
public String getSymbolicName ( long bundleId ) throws IOException
	bundleId	the identifier of the bundle
	
Answer the symbolic name of the bundle 
	Returns	the symbolic name
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.getVersion(long)?>
<?FM MARKER [Index] BundleStateMBean:getVersion?>
<?FM MARKER [Index] getVersion?>
getVersion(long)
public String getVersion ( long bundleId ) throws IOException
	bundleId	the identifier of the bundle
	
Answer the location of the bundle. 
	Returns	The location string of this bundle
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.isActivationPolicyUsed(long)?>
<?FM MARKER [Index] BundleStateMBean:isActivationPolicyUsed?>
<?FM MARKER [Index] isActivationPolicyUsed?>
isActivationPolicyUsed(long)
public boolean isActivationPolicyUsed ( long bundleId ) throws IOException
	bundleId	the identifier of the bundle
	
Answer whether the specified bundle’s autostart setting indicates
that the activation policy declared in the bundle’s manifest must
be used. 
	Returns	true if the bundle’s autostart setting indicates the activation
policy declared in the manifest must be used. false if the bundle
must be eagerly activated.
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.isFragment(long)?>
<?FM MARKER [Index] BundleStateMBean:isFragment?>
<?FM MARKER [Index] isFragment?>
isFragment(long)
public boolean isFragment ( long bundleId ) throws IOException
	bundleId	the identifier of the bundle
	
Answer whether the bundle is a fragment or not 
	Returns	true if the bundle is a fragment
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.isPersistentlyStarted(long)?>
<?FM MARKER [Index] BundleStateMBean:isPersistentlyStarted?>
<?FM MARKER [Index] isPersistentlyStarted?>
isPersistentlyStarted(long)
public boolean isPersistentlyStarted ( long bundleId ) throws IOException
	bundleId	the identifier of the bundle
	
Answer if the bundle is persistently started when its start level
is reached 
	Returns	true if the bundle is persistently started
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.isRemovalPending(long)?>
<?FM MARKER [Index] BundleStateMBean:isRemovalPending?>
<?FM MARKER [Index] isRemovalPending?>
isRemovalPending(long)
public boolean isRemovalPending ( long bundleId ) throws IOException
	bundleId	the identifier of the bundle
	
Answer true if the bundle is pending removal 
	Returns	true if the bundle is pending removal
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.isRequired(long)?>
<?FM MARKER [Index] BundleStateMBean:isRequired?>
<?FM MARKER [Index] isRequired?>
isRequired(long)
public boolean isRequired ( long bundleId ) throws IOException
	bundleId	the identifier of the bundle
	
Answer true if the bundle is required by another bundle 
	Returns	true if the bundle is required by another bundle
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] BundleStateMBean.listBundles()?>
<?FM MARKER [Index] BundleStateMBean:listBundles?>
<?FM MARKER [Index] listBundles?>
listBundles()
public TabularData listBundles ( ) throws IOException
	
Answer the bundle state of the system in tabular form.  Each row
of the returned table represents a single bundle. The Tabular Data
consists of Composite Data that is type by BUNDLES_TYPE. 
	Returns	the tabular representation of the bundle state
	Throws	IOException –  if the operation fails 
<?FM MARKER [Cross-Ref] BundleStateMBean.listBundles(String...)?>
<?FM MARKER [Index] BundleStateMBean:listBundles?>
<?FM MARKER [Index] listBundles?>
listBundles(String...)
public TabularData listBundles ( String ... items ) throws IOException
	items	The names of the items to include in the result.
	
Answer the bundle state of the system in tabular form.  Each row
of the returned table represents a single bundle. The Tabular Data
consists of Composite Data that is type by BUNDLES_TYPE.  This method
supports specifying the items that are included in the result. Note
that the IDENTIFIER item is always returns as this the key in the
TabularData structure. 
	Returns	the tabular representation of the bundle state
	Throws	IOException –  if the operation fails 
<?FM MARKER [Cross-Ref] FrameworkMBean?>
<?FM MARKER [Index] FrameworkMBean?>
<?FM MARKER [Index] interface:FrameworkMBean?>
FrameworkMBean
public interface FrameworkMBean
The FrameworkMbean provides mechanisms to exert control over the
framework. For many operations, it provides a batch mechanism to
avoid excessive message passing when interacting remotely. 
	Concurrency	Thread-safe 
<?FM MARKER [Cross-Ref] FrameworkMBean.BATCH_ACTION_RESULT_TYPE?>
<?FM MARKER [Index] FrameworkMBean:BATCH_ACTION_RESULT_TYPE?>
<?FM MARKER [Index] BATCH_ACTION_RESULT_TYPE?>
BATCH_ACTION_RESULT_TYPE
public static final CompositeType BATCH_ACTION_RESULT_TYPE
The Composite Type for a batch action result. refreshBundle(long)
and refreshBundles(long[]). Notice that a batch action result returns
uses an id for the BUNDLE_IN_ERROR while the BATCH_INSTALL_RESULT_TYPE
uses a location.  This Composite Type consists of the following
items: 
BUNDLE_IN_ERROR_ID_ITEM
COMPLETED_ITEM
ERROR_ITEM
REMAINING_ID_ITEM
SUCCESS_ITEM
<?FM MARKER [Cross-Ref] FrameworkMBean.BATCH_INSTALL_RESULT_TYPE?>
<?FM MARKER [Index] FrameworkMBean:BATCH_INSTALL_RESULT_TYPE?>
<?FM MARKER [Index] BATCH_INSTALL_RESULT_TYPE?>
BATCH_INSTALL_RESULT_TYPE
public static final CompositeType BATCH_INSTALL_RESULT_TYPE
The Composite Type which represents the result of a batch install
operation. It is used in installBundles(String[]) and installBundlesFromURL(String[],
String[]).  This Composite Type consists of the following items: 
BUNDLE_IN_ERROR_LOCATION_ITEM
COMPLETED_ITEM
ERROR_ITEM
P 
SUCCESS_ITEM
<?FM MARKER [Cross-Ref] FrameworkMBean.BATCH_RESOLVE_RESULT_TYPE?>
<?FM MARKER [Index] FrameworkMBean:BATCH_RESOLVE_RESULT_TYPE?>
<?FM MARKER [Index] BATCH_RESOLVE_RESULT_TYPE?>
BATCH_RESOLVE_RESULT_TYPE
public static final CompositeType BATCH_RESOLVE_RESULT_TYPE
The Composite Type which represents the result of a batch resolve
operation. It is used in refreshBundlesAndWait(long[]) and resolve(long[]).
 This Composite Type consists of the following items: 
COMPLETED_ITEM
SUCCESS_ITEM
<?FM MARKER [Cross-Ref] FrameworkMBean.BUNDLE_IN_ERROR?>
<?FM MARKER [Index] FrameworkMBean:BUNDLE_IN_ERROR?>
<?FM MARKER [Index] BUNDLE_IN_ERROR?>
BUNDLE_IN_ERROR
public static final String BUNDLE_IN_ERROR = “BundleInError”<?FM MARKER [Index] BundleInError?>

The key for BUNDLE_IN_ERROR. This key is used with two different
items: BUNDLE_IN_ERROR_ID_ITEM and BUNDLE_IN_ERROR_LOCATION_ITEM
that each have a different type for this key. It is used in BATCH_ACTION_RESULT_TYPE
and BATCH_INSTALL_RESULT_TYPE. 
<?FM MARKER [Cross-Ref] FrameworkMBean.BUNDLE_IN_ERROR_ID_ITEM?>
<?FM MARKER [Index] FrameworkMBean:BUNDLE_IN_ERROR_ID_ITEM?>
<?FM MARKER [Index] BUNDLE_IN_ERROR_ID_ITEM?>
BUNDLE_IN_ERROR_ID_ITEM
public static final Item BUNDLE_IN_ERROR_ID_ITEM
The item containing the bundle which caused the error during the
batch operation. This item describes the bundle in error as an id.
The key is BUNDLE_IN_ERROR and the type is SimpleType.LONG. It is
used in BATCH_ACTION_RESULT_TYPE. 
	See Also	BUNDLE_IN_ERROR_LOCATION_ITEM for the item that has a
location for the bundle in error.
<?FM MARKER [Cross-Ref] FrameworkMBean.BUNDLE_IN_ERROR_LOCATION_ITEM?>
<?FM MARKER [Index] FrameworkMBean:BUNDLE_IN_ERROR_LOCATION_ITEM?>
<?FM MARKER [Index] BUNDLE_IN_ERROR_LOCATION_ITEM?>
BUNDLE_IN_ERROR_LOCATION_ITEM
public static final Item BUNDLE_IN_ERROR_LOCATION_ITEM
The item containing the bundle which caused the error during the
batch operation. This item describes the bundle in error as a location.
The key is BUNDLE_IN_ERROR and the type is SimpleType.STRING. It
is used in BATCH_INSTALL_RESULT_TYPE. 
	See Also	BUNDLE_IN_ERROR_ID_ITEM for the item that has the id for
the bundle in error.
<?FM MARKER [Cross-Ref] FrameworkMBean.COMPLETED?>
<?FM MARKER [Index] FrameworkMBean:COMPLETED?>
<?FM MARKER [Index] COMPLETED?>
COMPLETED
public static final String COMPLETED = “Completed”<?FM MARKER [Index] Completed?>

The key COMPLETED, used in COMPLETED_ITEM. 
<?FM MARKER [Cross-Ref] FrameworkMBean.COMPLETED_ITEM?>
<?FM MARKER [Index] FrameworkMBean:COMPLETED_ITEM?>
<?FM MARKER [Index] COMPLETED_ITEM?>
COMPLETED_ITEM
public static final Item COMPLETED_ITEM
The item containing the list of bundles completing the batch operation.
The key is COMPLETED and the type is JmxConstants.LONG_ARRAY_TYPE.
It is used in BATCH_ACTION_RESULT_TYPE and BATCH_INSTALL_RESULT_TYPE. 
<?FM MARKER [Cross-Ref] FrameworkMBean.ERROR?>
<?FM MARKER [Index] FrameworkMBean:ERROR?>
<?FM MARKER [Index] ERROR?>
ERROR
public static final String ERROR = “Error”<?FM MARKER [Index] Error?>

The key ERROR, used in ERROR_ITEM. 
<?FM MARKER [Cross-Ref] FrameworkMBean.ERROR_ITEM?>
<?FM MARKER [Index] FrameworkMBean:ERROR_ITEM?>
<?FM MARKER [Index] ERROR_ITEM?>
ERROR_ITEM
public static final Item ERROR_ITEM
The item containing the error message of the batch operation. The
key is ERROR and the type is SimpleType.STRING. It is used in BATCH_ACTION_RESULT_TYPE
and BATCH_INSTALL_RESULT_TYPE. 
<?FM MARKER [Cross-Ref] FrameworkMBean.OBJECTNAME?>
<?FM MARKER [Index] FrameworkMBean:OBJECTNAME?>
<?FM MARKER [Index] OBJECTNAME?>
OBJECTNAME
public static final String OBJECTNAME = “osgi.core:type=framework,version=1.7”<?FM MARKER [Index] osgi.core:type=framework,version=1.7?>

The Object Name prefix for this mbean. The full object name also
contains the framework name and uuid as properties. 
<?FM MARKER [Cross-Ref] FrameworkMBean.REMAINING?>
<?FM MARKER [Index] FrameworkMBean:REMAINING?>
<?FM MARKER [Index] REMAINING?>
REMAINING
public static final String REMAINING = “Remaining”<?FM MARKER [Index] Remaining?>

The key REMAINING, used in REMAINING_ID_ITEM and REMAINING_LOCATION_ITEM. 
<?FM MARKER [Cross-Ref] FrameworkMBean.REMAINING_ID_ITEM?>
<?FM MARKER [Index] FrameworkMBean:REMAINING_ID_ITEM?>
<?FM MARKER [Index] REMAINING_ID_ITEM?>
REMAINING_ID_ITEM
public static final Item REMAINING_ID_ITEM
The item containing the list of remaining bundles unprocessed by
the failing batch operation. The key is REMAINING and the type is
JmxConstants.LONG_ARRAY_TYPE. It is used in BATCH_ACTION_RESULT_TYPE
and BATCH_INSTALL_RESULT_TYPE. 
<?FM MARKER [Cross-Ref] FrameworkMBean.REMAINING_LOCATION_ITEM?>
<?FM MARKER [Index] FrameworkMBean:REMAINING_LOCATION_ITEM?>
<?FM MARKER [Index] REMAINING_LOCATION_ITEM?>
REMAINING_LOCATION_ITEM
public static final Item REMAINING_LOCATION_ITEM
The item containing the list of remaining bundles unprocessed by
the failing batch operation. The key is REMAINING and the type is
JmxConstants.STRING_ARRAY_TYPE. It is used in BATCH_ACTION_RESULT_TYPE
and BATCH_INSTALL_RESULT_TYPE. 
<?FM MARKER [Cross-Ref] FrameworkMBean.SUCCESS?>
<?FM MARKER [Index] FrameworkMBean:SUCCESS?>
<?FM MARKER [Index] SUCCESS?>
SUCCESS
public static final String SUCCESS = “Success”<?FM MARKER [Index] Success?>

The SUCCESS, used in SUCCESS_ITEM. 
<?FM MARKER [Cross-Ref] FrameworkMBean.SUCCESS_ITEM?>
<?FM MARKER [Index] FrameworkMBean:SUCCESS_ITEM?>
<?FM MARKER [Index] SUCCESS_ITEM?>
SUCCESS_ITEM
public static final Item SUCCESS_ITEM
The item that indicates if this operation was successful. The key
is SUCCESS and the type is SimpleType.BOOLEAN. It is used in BATCH_ACTION_RESULT_TYPE
and BATCH_INSTALL_RESULT_TYPE. 
<?FM MARKER [Cross-Ref] FrameworkMBean.getDependencyClosure(long[])?>
<?FM MARKER [Index] FrameworkMBean:getDependencyClosure?>
<?FM MARKER [Index] getDependencyClosure?>
getDependencyClosure(long[])
public long[] getDependencyClosure ( long[] bundles ) throws IOException
	bundles	The initial bundles IDs for which to generate the dependency
closure.
	
Returns the dependency closure for the specified bundles.  
A graph of bundles is computed starting with the specified bundles.
The graph is expanded by adding any bundle that is either wired
to a package that is currently exported by a bundle in the graph
or requires a bundle in the graph. The graph is fully constructed
when there is no bundle outside the graph that is wired to a bundle
in the graph. The graph may contain UNINSTALLED bundles that are removal
pending.
	Returns	A bundle ID array containing a snapshot of the dependency
closure of the specified bundles, or an empty array if there were
no specified bundles.
	Throws	IOException –  if the operation failed 
		IllegalArgumentException –  if a bundle indicated does not exist 
<?FM MARKER [Cross-Ref] FrameworkMBean.getFrameworkStartLevel()?>
<?FM MARKER [Index] FrameworkMBean:getFrameworkStartLevel?>
<?FM MARKER [Index] getFrameworkStartLevel?>
getFrameworkStartLevel()
public int getFrameworkStartLevel ( ) throws IOException
	
Retrieve the framework start level 
	Returns	the framework start level
	Throws	IOException –  if the operation failed 
<?FM MARKER [Cross-Ref] FrameworkMBean.getInitialBundleStartLevel()?>
<?FM MARKER [Index] FrameworkMBean:getInitialBundleStartLevel?>
<?FM MARKER [Index] getInitialBundleStartLevel?>
getInitialBundleStartLevel()
public int getInitialBundleStartLevel ( ) throws IOException
	
Answer the initial start level assigned to a bundle when it is first
started 
	Returns	the start level
	Throws	IOException –  if the operation failed 
<?FM MARKER [Cross-Ref] FrameworkMBean.getProperty(String)?>
<?FM MARKER [Index] FrameworkMBean:getProperty?>
<?FM MARKER [Index] getProperty?>
getProperty(String)
public String getProperty ( String key ) throws IOException
	key	The name of the requested property.
	
Returns the value of the specified property. If the key is not found
in the Framework properties, the system properties are then searched.
The method returns null if the property is not found. 
	Returns	The value of the requested property, or null if the property
is undefined.
	Throws	IOException –  if the operation failed 
<?FM MARKER [Cross-Ref] FrameworkMBean.getRemovalPendingBundles()?>
<?FM MARKER [Index] FrameworkMBean:getRemovalPendingBundles?>
<?FM MARKER [Index] getRemovalPendingBundles?>
getRemovalPendingBundles()
public long[] getRemovalPendingBundles (  )  throws IOException
	
Returns the bundles IDs that have non-current, in use bundle wirings.
This is typically the bundles which have been updated or uninstalled
since the last call to refreshBundles(long[]). 
	Returns	A bundle ID array containing a snapshot of the bundles
which have non-current, in use bundle wirings, or an empty array
if there are no such bundles.
	Throws	IOException –  if the operation failed 
<?FM MARKER [Cross-Ref] FrameworkMBean.installBundle(String)?>
<?FM MARKER [Index] FrameworkMBean:installBundle?>
<?FM MARKER [Index] installBundle?>
installBundle(String)
public long installBundle ( String location ) throws IOException
	location	the location of the bundle to install
	
Install the bundle indicated by the bundleLocations 
	Returns	the bundle id the installed bundle
	Throws	IOException –  if the operation does not succeed 
<?FM MARKER [Cross-Ref] FrameworkMBean.installBundleFromURL(String,String)?>
<?FM MARKER [Index] FrameworkMBean:installBundleFromURL?>
<?FM MARKER [Index] installBundleFromURL?>
installBundleFromURL(String,String)
public long installBundleFromURL ( String location , String url
) throws IOException
	location	the location to assign to the bundle
	url	the URL which will supply the bytes for the bundle
	
Install the bundle indicated by the bundleLocations 
	Returns	the bundle id the installed bundle
	Throws	IOException –  if the operation does not succeed 
<?FM MARKER [Cross-Ref] FrameworkMBean.installBundles(String[])?>
<?FM MARKER [Index] FrameworkMBean:installBundles?>
<?FM MARKER [Index] installBundles?>
installBundles(String[])
public CompositeData installBundles ( String[] locations )  throws
IOException
	locations	the array of locations of the bundles to install
	
Batch install the bundles indicated by the list of bundleLocationUrls 
	Returns	the resulting state from executing the operation
	Throws	IOException –  if the operation does not succeed 
	See Also	BATCH_INSTALL_RESULT_TYPE for the precise specification
of the CompositeData type representing the returned result.
<?FM MARKER [Cross-Ref] FrameworkMBean.installBundlesFromURL(String[],String[])?>
<?FM MARKER [Index] FrameworkMBean:installBundlesFromURL?>
<?FM MARKER [Index] installBundlesFromURL?>
installBundlesFromURL(String[],String[])
public CompositeData installBundlesFromURL ( String[] locations
, String[] urls ) throws IOException
	locations	the array of locations to assign to the installed bundles
	urls	the array of urls which supply the bundle bytes
	
Batch install the bundles indicated by the list of bundleLocationUrls 
	Returns	the resulting state from executing the operation
	Throws	IOException –  if the operation does not succeed 
	See Also	for the precise specification of the CompositeData type
representing the returned result.
<?FM MARKER [Cross-Ref] FrameworkMBean.refreshBundle(long)?>
<?FM MARKER [Index] FrameworkMBean:refreshBundle?>
<?FM MARKER [Index] refreshBundle?>
refreshBundle(long)
public void refreshBundle ( long bundleIdentifier ) throws IOException
	bundleIdentifier	the bundle identifier
	
Force the update, replacement or removal of the packages identified
by the specified bundle. 
	Throws	IOException –  if the operation failed 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] FrameworkMBean.refreshBundleAndWait(long)?>
<?FM MARKER [Index] FrameworkMBean:refreshBundleAndWait?>
<?FM MARKER [Index] refreshBundleAndWait?>
refreshBundleAndWait(long)
public boolean refreshBundleAndWait ( long bundleIdentifier ) throws
IOException
	bundleIdentifier	the bundle identifier
	
Force the update, replacement or removal of the packages identified
by the specified bundle and wait until completed. 
	Returns	whether the bundle was successfully resolved after being
refreshed.
	Throws	IOException –  if the operation failed 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] FrameworkMBean.refreshBundles(long[])?>
<?FM MARKER [Index] FrameworkMBean:refreshBundles?>
<?FM MARKER [Index] refreshBundles?>
refreshBundles(long[])
public void refreshBundles ( long[] bundleIdentifiers )  throws
IOException
	bundleIdentifiers	The identifiers of the bundles to refresh, or
null for all bundles with packages pending removal.
	
Force the update, replacement or removal of the packages identified
by the list of bundles. 
	Throws	IOException –  if the operation failed 
		IllegalArgumentException –  if a bundle indicated does not exist 
<?FM MARKER [Cross-Ref] FrameworkMBean.refreshBundlesAndWait(long[])?>
<?FM MARKER [Index] FrameworkMBean:refreshBundlesAndWait?>
<?FM MARKER [Index] refreshBundlesAndWait?>
refreshBundlesAndWait(long[])
public CompositeData refreshBundlesAndWait ( long[] bundleIdentifiers
)  throws IOException
	bundleIdentifiers	The identifiers of the bundles to refresh, or
null for all bundles with packages pending removal.
	
Force the update, replacement or removal of the packages identified
by the list of bundles and wait until completed. 
	Returns	the result of the refresh operation
	Throws	IOException –  if the operation failed 
		IllegalArgumentException –  if a bundle indicated does not exist 
	See Also	for the precise specification of the CompositeData type
representing the returned result.
<?FM MARKER [Cross-Ref] FrameworkMBean.resolve(long[])?>
<?FM MARKER [Index] FrameworkMBean:resolve?>
<?FM MARKER [Index] resolve?>
resolve(long[])
public CompositeData resolve ( long[] bundleIdentifiers )  throws
IOException
	bundleIdentifiers	The identifiers of the bundles to resolve, or
null to resolve all unresolved bundles.
	
Same as resolveBundles(long[]) but with a more detailed return type. 
	Returns	the resulting state from executing the operation
	Throws	IOException –  if the operation failed 
		IllegalArgumentException –  if a bundle indicated does not exist 
	See Also	for the precise specification of the CompositeData type
representing the returned result.
<?FM MARKER [Cross-Ref] FrameworkMBean.resolveBundle(long)?>
<?FM MARKER [Index] FrameworkMBean:resolveBundle?>
<?FM MARKER [Index] resolveBundle?>
resolveBundle(long)
public boolean resolveBundle ( long bundleIdentifier ) throws IOException
	bundleIdentifier	the bundle identifier
	
Resolve the bundle indicated by the unique symbolic name and version 
	Returns	true if the bundle was resolved, false otherwise
	Throws	IOException –  if the operation does not succeed 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] FrameworkMBean.resolveBundles(long[])?>
<?FM MARKER [Index] FrameworkMBean:resolveBundles?>
<?FM MARKER [Index] resolveBundles?>
resolveBundles(long[])
public boolean resolveBundles ( long[] bundleIdentifiers )  throws
IOException
	bundleIdentifiers	The identifiers of the bundles to resolve, or
null to resolve all unresolved bundles.
	
Batch resolve the bundles indicated by the list of bundle identifiers 
	Returns	true if the bundles were resolved, false otherwise
	Throws	IOException –  if the operation does not succeed 
		IllegalArgumentException –  if a bundle indicated does not exist 
<?FM MARKER [Cross-Ref] FrameworkMBean.restartFramework()?>
<?FM MARKER [Index] FrameworkMBean:restartFramework?>
<?FM MARKER [Index] restartFramework?>
restartFramework()
public void restartFramework ( ) throws IOException
	
Restart the framework by updating the system bundle 
	Throws	IOException –  if the operation failed 
<?FM MARKER [Cross-Ref] FrameworkMBean.setBundleStartLevel(long,int)?>
<?FM MARKER [Index] FrameworkMBean:setBundleStartLevel?>
<?FM MARKER [Index] setBundleStartLevel?>
setBundleStartLevel(long,int)
public void setBundleStartLevel ( long bundleIdentifier , int newlevel
) throws IOException
	bundleIdentifier	the bundle identifier
	newlevel	the new start level for the bundle
	
Set the start level for the bundle identifier 
	Throws	IOException –  if the operation failed 
<?FM MARKER [Cross-Ref] FrameworkMBean.setBundleStartLevels(long[],int[])?>
<?FM MARKER [Index] FrameworkMBean:setBundleStartLevels?>
<?FM MARKER [Index] setBundleStartLevels?>
setBundleStartLevels(long[],int[])
public CompositeData setBundleStartLevels ( long[] bundleIdentifiers
, int[] newlevels ) throws IOException
	bundleIdentifiers	the array of bundle identifiers
	newlevels	the array of new start level for the bundles
	
Set the start levels for the list of bundles. 
	Returns	the resulting state from executing the operation
	Throws	IOException –  if the operation failed 
	See Also	for the precise specification of the CompositeData type
representing the returned result.
<?FM MARKER [Cross-Ref] FrameworkMBean.setFrameworkStartLevel(int)?>
<?FM MARKER [Index] FrameworkMBean:setFrameworkStartLevel?>
<?FM MARKER [Index] setFrameworkStartLevel?>
setFrameworkStartLevel(int)
public void setFrameworkStartLevel ( int newlevel ) throws IOException
	newlevel	the new start level
	
Set the start level for the framework 
	Throws	IOException –  if the operation failed 
<?FM MARKER [Cross-Ref] FrameworkMBean.setInitialBundleStartLevel(int)?>
<?FM MARKER [Index] FrameworkMBean:setInitialBundleStartLevel?>
<?FM MARKER [Index] setInitialBundleStartLevel?>
setInitialBundleStartLevel(int)
public void setInitialBundleStartLevel ( int newlevel ) throws IOException
	newlevel	the new start level
	
Set the initial start level assigned to a bundle when it is first
started 
	Throws	IOException –  if the operation failed 
<?FM MARKER [Cross-Ref] FrameworkMBean.shutdownFramework()?>
<?FM MARKER [Index] FrameworkMBean:shutdownFramework?>
<?FM MARKER [Index] shutdownFramework?>
shutdownFramework()
public void shutdownFramework ( ) throws IOException
	
Shutdown the framework by stopping the system bundle 
	Throws	IOException –  if the operation failed 
<?FM MARKER [Cross-Ref] FrameworkMBean.startBundle(long)?>
<?FM MARKER [Index] FrameworkMBean:startBundle?>
<?FM MARKER [Index] startBundle?>
startBundle(long)
public void startBundle ( long bundleIdentifier ) throws IOException
	bundleIdentifier	the bundle identifier
	
Start the bundle indicated by the bundle identifier 
	Throws	IOException –  if the operation does not succeed 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] FrameworkMBean.startBundles(long[])?>
<?FM MARKER [Index] FrameworkMBean:startBundles?>
<?FM MARKER [Index] startBundles?>
startBundles(long[])
public CompositeData startBundles ( long[] bundleIdentifiers ) 
throws IOException
	bundleIdentifiers	the array of bundle identifiers
	
Batch start the bundles indicated by the list of bundle identifier 
	Returns	the resulting state from executing the operation
	Throws	IOException –  if the operation does not succeed 
	See Also	for the precise specification of the CompositeData type
representing the returned result.
<?FM MARKER [Cross-Ref] FrameworkMBean.stopBundle(long)?>
<?FM MARKER [Index] FrameworkMBean:stopBundle?>
<?FM MARKER [Index] stopBundle?>
stopBundle(long)
public void stopBundle ( long bundleIdentifier ) throws IOException
	bundleIdentifier	the bundle identifier
	
Stop the bundle indicated by the bundle identifier 
	Throws	IOException –  if the operation does not succeed 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] FrameworkMBean.stopBundles(long[])?>
<?FM MARKER [Index] FrameworkMBean:stopBundles?>
<?FM MARKER [Index] stopBundles?>
stopBundles(long[])
public CompositeData stopBundles ( long[] bundleIdentifiers )  throws
IOException
	bundleIdentifiers	the array of bundle identifiers
	
Batch stop the bundles indicated by the list of bundle identifier 
	Returns	the resulting state from executing the operation
	Throws	IOException –  if the operation does not succeed 
	See Also	BATCH_ACTION_RESULT_TYPE for the precise specification
of the CompositeData type representing the returned result.
<?FM MARKER [Cross-Ref] FrameworkMBean.uninstallBundle(long)?>
<?FM MARKER [Index] FrameworkMBean:uninstallBundle?>
<?FM MARKER [Index] uninstallBundle?>
uninstallBundle(long)
public void uninstallBundle ( long bundleIdentifier ) throws IOException
	bundleIdentifier	the bundle identifier
	
Uninstall the bundle indicated by the bundle identifier 
	Throws	IOException –  if the operation does not succeed 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] FrameworkMBean.uninstallBundles(long[])?>
<?FM MARKER [Index] FrameworkMBean:uninstallBundles?>
<?FM MARKER [Index] uninstallBundles?>
uninstallBundles(long[])
public CompositeData uninstallBundles ( long[] bundleIdentifiers
)  throws IOException
	bundleIdentifiers	the array of bundle identifiers
	
Batch uninstall the bundles indicated by the list of bundle identifiers 
	Returns	the resulting state from executing the operation
	Throws	IOException –  if the operation does not succeed 
	See Also	BATCH_ACTION_RESULT_TYPE for the precise specification
of the CompositeData type representing the returned result.
<?FM MARKER [Cross-Ref] FrameworkMBean.updateBundle(long)?>
<?FM MARKER [Index] FrameworkMBean:updateBundle?>
<?FM MARKER [Index] updateBundle?>
updateBundle(long)
public void updateBundle ( long bundleIdentifier ) throws IOException
	bundleIdentifier	the bundle identifier
	
Update the bundle indicated by the bundle identifier 
	Throws	IOException –  if the operation does not succeed 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] FrameworkMBean.updateBundleFromURL(long,String)?>
<?FM MARKER [Index] FrameworkMBean:updateBundleFromURL?>
<?FM MARKER [Index] updateBundleFromURL?>
updateBundleFromURL(long,String)
public void updateBundleFromURL ( long bundleIdentifier , String
url ) throws IOException
	bundleIdentifier	the bundle identifier
	url	the URL to use to update the bundle
	
Update the bundle identified by the bundle identifier 
	Throws	IOException –  if the operation does not succeed 
		IllegalArgumentException –  if the bundle indicated does not exist 
<?FM MARKER [Cross-Ref] FrameworkMBean.updateBundles(long[])?>
<?FM MARKER [Index] FrameworkMBean:updateBundles?>
<?FM MARKER [Index] updateBundles?>
updateBundles(long[])
public CompositeData updateBundles ( long[] bundleIdentifiers )
 throws IOException
	bundleIdentifiers	the array of bundle identifiers
	
Batch update the bundles indicated by the list of bundle identifier. 
	Returns	the resulting state from executing the operation
	Throws	IOException –  if the operation does not succeed 
	See Also	BATCH_ACTION_RESULT_TYPE for the precise specification
of the CompositeData type representing the returned result.
<?FM MARKER [Cross-Ref] FrameworkMBean.updateBundlesFromURL(long[],String[])?>
<?FM MARKER [Index] FrameworkMBean:updateBundlesFromURL?>
<?FM MARKER [Index] updateBundlesFromURL?>
updateBundlesFromURL(long[],String[])
public CompositeData updateBundlesFromURL ( long[] bundleIdentifiers
, String[] urls ) throws IOException
	bundleIdentifiers	the array of bundle identifiers
	urls	the array of URLs to use to update the bundles
	
Update the bundle uniquely identified by the bundle symbolic name
and version using the contents of the supplied urls. 
	Returns	the resulting state from executing the operation
	Throws	IOException –  if the operation does not succeed 
		IllegalArgumentException –  if the bundle indicated does not exist 
	See Also	BATCH_ACTION_RESULT_TYPE for the precise specification
of the CompositeData type representing the returned result.
<?FM MARKER [Cross-Ref] FrameworkMBean.updateFramework()?>
<?FM MARKER [Index] FrameworkMBean:updateFramework?>
<?FM MARKER [Index] updateFramework?>
updateFramework()
public void updateFramework ( ) throws IOException
	
Update the framework by updating the system bundle. 
	Throws	IOException –  if the operation failed 
<?FM MARKER [Cross-Ref] PackageStateMBean?>
<?FM MARKER [Index] PackageStateMBean?>
<?FM MARKER [Index] interface:PackageStateMBean?>
PackageStateMBean
public interface PackageStateMBean
This MBean provides information about the package state of the framework. 
	Concurrency	Thread-safe 
<?FM MARKER [Cross-Ref] PackageStateMBean.EXPORTING_BUNDLES?>
<?FM MARKER [Index] PackageStateMBean:EXPORTING_BUNDLES?>
<?FM MARKER [Index] EXPORTING_BUNDLES?>
EXPORTING_BUNDLES
public static final String EXPORTING_BUNDLES = “ExportingBundles”<?FM MARKER [Index] ExportingBundles?>

The key EXPORTING_BUNDLE, used in EXPORTING_BUNDLES_ITEM. 
<?FM MARKER [Cross-Ref] PackageStateMBean.EXPORTING_BUNDLES_ITEM?>
<?FM MARKER [Index] PackageStateMBean:EXPORTING_BUNDLES_ITEM?>
<?FM MARKER [Index] EXPORTING_BUNDLES_ITEM?>
EXPORTING_BUNDLES_ITEM
public static final Item EXPORTING_BUNDLES_ITEM
The item containing the bundle identifier in PACKAGE_TYPE. The key
is EXPORTING_BUNDLES and the type is JmxConstants.LONG_ARRAY_TYPE. 
<?FM MARKER [Cross-Ref] PackageStateMBean.IMPORTING_BUNDLES?>
<?FM MARKER [Index] PackageStateMBean:IMPORTING_BUNDLES?>
<?FM MARKER [Index] IMPORTING_BUNDLES?>
IMPORTING_BUNDLES
public static final String IMPORTING_BUNDLES = “ImportingBundles”<?FM MARKER [Index] ImportingBundles?>

The key IMPORTING_BUNDLES, used in IMPORTING_BUNDLES_ITEM. 
<?FM MARKER [Cross-Ref] PackageStateMBean.IMPORTING_BUNDLES_ITEM?>
<?FM MARKER [Index] PackageStateMBean:IMPORTING_BUNDLES_ITEM?>
<?FM MARKER [Index] IMPORTING_BUNDLES_ITEM?>
IMPORTING_BUNDLES_ITEM
public static final Item IMPORTING_BUNDLES_ITEM
The item containing the bundle identifier in PACKAGE_TYPE. The key
is IMPORTING_BUNDLES and the type is JmxConstants.LONG_ARRAY_TYPE. 
<?FM MARKER [Cross-Ref] PackageStateMBean.NAME?>
<?FM MARKER [Index] PackageStateMBean:NAME?>
<?FM MARKER [Index] NAME?>
NAME
public static final String NAME = “Name”<?FM MARKER [Index] Name?>

The key NAME, used in NAME_ITEM. 
<?FM MARKER [Cross-Ref] PackageStateMBean.NAME_ITEM?>
<?FM MARKER [Index] PackageStateMBean:NAME_ITEM?>
<?FM MARKER [Index] NAME_ITEM?>
NAME_ITEM
public static final Item NAME_ITEM
The item containing the name of the package in PACKAGE_TYPE. The
key is NAME and the type is SimpleType.LONG. 
<?FM MARKER [Cross-Ref] PackageStateMBean.OBJECTNAME?>
<?FM MARKER [Index] PackageStateMBean:OBJECTNAME?>
<?FM MARKER [Index] OBJECTNAME?>
OBJECTNAME
public static final String OBJECTNAME = “osgi.core:type=packageState,version=1.5”<?FM MARKER [Index] osgi.core:type=packageState,version=1.5?>

The fully qualified object name of this MBean. 
<?FM MARKER [Cross-Ref] PackageStateMBean.PACKAGE_TYPE?>
<?FM MARKER [Index] PackageStateMBean:PACKAGE_TYPE?>
<?FM MARKER [Index] PACKAGE_TYPE?>
PACKAGE_TYPE
public static final CompositeType PACKAGE_TYPE
The Composite Type for a CompositeData representing a package. This
type consists of: 
EXPORTING_BUNDLES_ITEM
IMPORTING_BUNDLES_ITEM
NAME_ITEM
REMOVAL_PENDING_ITEM
VERSION_ITEM
The key is defined as NAME and EXPORTING_BUNDLES
<?FM MARKER [Cross-Ref] PackageStateMBean.PACKAGES_TYPE?>
<?FM MARKER [Index] PackageStateMBean:PACKAGES_TYPE?>
<?FM MARKER [Index] PACKAGES_TYPE?>
PACKAGES_TYPE
public static final TabularType PACKAGES_TYPE
The Tabular Type used in listPackages(). They key is NAME, VERSION,
and EXPORTING_BUNDLES. 
<?FM MARKER [Cross-Ref] PackageStateMBean.REMOVAL_PENDING?>
<?FM MARKER [Index] PackageStateMBean:REMOVAL_PENDING?>
<?FM MARKER [Index] REMOVAL_PENDING?>
REMOVAL_PENDING
public static final String REMOVAL_PENDING = “RemovalPending”<?FM MARKER [Index] RemovalPending?>

The name of the item containing the pending removal status of the
package in the CompositeData. Used 
<?FM MARKER [Cross-Ref] PackageStateMBean.REMOVAL_PENDING_ITEM?>
<?FM MARKER [Index] PackageStateMBean:REMOVAL_PENDING_ITEM?>
<?FM MARKER [Index] REMOVAL_PENDING_ITEM?>
REMOVAL_PENDING_ITEM
public static final Item REMOVAL_PENDING_ITEM
The item representing the removal pending status of a package. The
key is REMOVAL_PENDING and the type is SimpleType.BOOLEAN. 
<?FM MARKER [Cross-Ref] PackageStateMBean.VERSION?>
<?FM MARKER [Index] PackageStateMBean:VERSION?>
<?FM MARKER [Index] VERSION?>
VERSION
public static final String VERSION = “Version”<?FM MARKER [Index] Version?>

The name of the item containing the package version in the CompositeData.
Used in VERSION_ITEM. 
<?FM MARKER [Cross-Ref] PackageStateMBean.VERSION_ITEM?>
<?FM MARKER [Index] PackageStateMBean:VERSION_ITEM?>
<?FM MARKER [Index] VERSION_ITEM?>
VERSION_ITEM
public static final Item VERSION_ITEM
The item containing the version of the package in PACKAGE_TYPE.
The key is VERSION and the type is SimpleType.STRING. 
<?FM MARKER [Cross-Ref] PackageStateMBean.getExportingBundles(String,String)?>
<?FM MARKER [Index] PackageStateMBean:getExportingBundles?>
<?FM MARKER [Index] getExportingBundles?>
getExportingBundles(String,String)
public long[] getExportingBundles ( String packageName , String
version )  throws IOException
	packageName	- the package name
	version	- the version of the package
	
Answer the identifier of the bundle exporting the package 
	Returns	the bundle identifiers exporting such a package
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the package indicated does not
exist 
<?FM MARKER [Cross-Ref] PackageStateMBean.getImportingBundles(String,String,long)?>
<?FM MARKER [Index] PackageStateMBean:getImportingBundles?>
<?FM MARKER [Index] getImportingBundles?>
getImportingBundles(String,String,long)
public long[] getImportingBundles ( String packageName , String
version , long exportingBundle )  throws IOException
	packageName	The package name
	version	The version of the package
	exportingBundle	The exporting bundle for the given package
	
Answer the list of identifiers of the bundles importing the package 
	Returns	the list of bundle identifiers
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the package indicated does not
exist 
<?FM MARKER [Cross-Ref] PackageStateMBean.isRemovalPending(String,String,long)?>
<?FM MARKER [Index] PackageStateMBean:isRemovalPending?>
<?FM MARKER [Index] isRemovalPending?>
isRemovalPending(String,String,long)
public boolean isRemovalPending ( String packageName , String version
, long exportingBundle ) throws IOException
	packageName	The package name
	version	The version of the package
	exportingBundle	The bundle exporting the package
	
Answer if this package is exported by a bundle which has been updated
or uninstalled 
	Returns	true if this package is being exported by a bundle that
has been updated or uninstalled.
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the package indicated does not
exist 
<?FM MARKER [Cross-Ref] PackageStateMBean.listPackages()?>
<?FM MARKER [Index] PackageStateMBean:listPackages?>
<?FM MARKER [Index] listPackages?>
listPackages()
public TabularData listPackages (  )  throws IOException
	
Answer the package state of the system in tabular form  The Tabular
Data is typed by PACKAGES_TYPE, which has PACKAGE_TYPE as its Composite
Type. 
	Returns	the tabular representation of the package state
	Throws	IOException –  When fails 
<?FM MARKER [Cross-Ref] ServiceStateMBean?>
<?FM MARKER [Index] ServiceStateMBean?>
<?FM MARKER [Index] interface:ServiceStateMBean?>
ServiceStateMBean
public interface ServiceStateMBean
This MBean represents the Service state of the framework. This MBean
also emits events that clients can use to get notified of the changes
in the service state of the framework. 
	Concurrency	Thread-safe 
<?FM MARKER [Cross-Ref] ServiceStateMBean.BUNDLE_IDENTIFIER?>
<?FM MARKER [Index] ServiceStateMBean:BUNDLE_IDENTIFIER?>
<?FM MARKER [Index] BUNDLE_IDENTIFIER?>
BUNDLE_IDENTIFIER
public static final String BUNDLE_IDENTIFIER = “BundleIdentifier”<?FM MARKER [Index] BundleIdentifier?>

The key BUNDLE_IDENTIFIER, used in BUNDLE_IDENTIFIER_ITEM. 
<?FM MARKER [Cross-Ref] ServiceStateMBean.BUNDLE_IDENTIFIER_ITEM?>
<?FM MARKER [Index] ServiceStateMBean:BUNDLE_IDENTIFIER_ITEM?>
<?FM MARKER [Index] BUNDLE_IDENTIFIER_ITEM?>
BUNDLE_IDENTIFIER_ITEM
public static final Item BUNDLE_IDENTIFIER_ITEM
The item containing the bundle identifier in SERVICE_TYPE. The key
is BUNDLE_IDENTIFIER and the type is SimpleType.LONG . 
<?FM MARKER [Cross-Ref] ServiceStateMBean.BUNDLE_LOCATION?>
<?FM MARKER [Index] ServiceStateMBean:BUNDLE_LOCATION?>
<?FM MARKER [Index] BUNDLE_LOCATION?>
BUNDLE_LOCATION
public static final String BUNDLE_LOCATION = “BundleLocation”<?FM MARKER [Index] BundleLocation?>

The key BUNDLE_LOCATION, used in SERVICE_EVENT_TYPE. 
<?FM MARKER [Cross-Ref] ServiceStateMBean.BUNDLE_LOCATION_ITEM?>
<?FM MARKER [Index] ServiceStateMBean:BUNDLE_LOCATION_ITEM?>
<?FM MARKER [Index] BUNDLE_LOCATION_ITEM?>
BUNDLE_LOCATION_ITEM
public static final Item BUNDLE_LOCATION_ITEM
The item containing the bundle location in EVENT_ITEM. The key is
BUNDLE_LOCATION and the the type is SimpleType.STRING . 
<?FM MARKER [Cross-Ref] ServiceStateMBean.BUNDLE_SYMBOLIC_NAME?>
<?FM MARKER [Index] ServiceStateMBean:BUNDLE_SYMBOLIC_NAME?>
<?FM MARKER [Index] BUNDLE_SYMBOLIC_NAME?>
BUNDLE_SYMBOLIC_NAME
public static final String BUNDLE_SYMBOLIC_NAME = “BundleSymbolicName”<?FM MARKER [Index] BundleSymbolicName?>

The key BUNDLE_SYMBOLIC_NAME, used in SERVICE_EVENT_TYPE. 
<?FM MARKER [Cross-Ref] ServiceStateMBean.BUNDLE_SYMBOLIC_NAME_ITEM?>
<?FM MARKER [Index] ServiceStateMBean:BUNDLE_SYMBOLIC_NAME_ITEM?>
<?FM MARKER [Index] BUNDLE_SYMBOLIC_NAME_ITEM?>
BUNDLE_SYMBOLIC_NAME_ITEM
public static final Item BUNDLE_SYMBOLIC_NAME_ITEM
The item containing the symbolic name in EVENT. The key is BUNDLE_SYMBOLIC_NAME
and the the type is SimpleType.STRING. 
<?FM MARKER [Cross-Ref] ServiceStateMBean.EVENT?>
<?FM MARKER [Index] ServiceStateMBean:EVENT?>
<?FM MARKER [Index] EVENT?>
EVENT
public static final String EVENT = “ServiceEvent”<?FM MARKER [Index] ServiceEvent?>

The key EVENT, used in EVENT_ITEM. 
<?FM MARKER [Cross-Ref] ServiceStateMBean.EVENT_ITEM?>
<?FM MARKER [Index] ServiceStateMBean:EVENT_ITEM?>
<?FM MARKER [Index] EVENT_ITEM?>
EVENT_ITEM
public static final Item EVENT_ITEM
The item containing the event type. The key is EVENT and the type
is SimpleType.INTEGER
<?FM MARKER [Cross-Ref] ServiceStateMBean.IDENTIFIER?>
<?FM MARKER [Index] ServiceStateMBean:IDENTIFIER?>
<?FM MARKER [Index] IDENTIFIER?>
IDENTIFIER
public static final String IDENTIFIER = “Identifier”<?FM MARKER [Index] Identifier?>

The key IDENTIFIER, used IDENTIFIER_ITEM. 
<?FM MARKER [Cross-Ref] ServiceStateMBean.IDENTIFIER_ITEM?>
<?FM MARKER [Index] ServiceStateMBean:IDENTIFIER_ITEM?>
<?FM MARKER [Index] IDENTIFIER_ITEM?>
IDENTIFIER_ITEM
public static final Item IDENTIFIER_ITEM
The item containing the service identifier in SERVICE_TYPE. The
key is IDENTIFIER and the type is SimpleType.LONG. 
<?FM MARKER [Cross-Ref] ServiceStateMBean.OBJECT_CLASS?>
<?FM MARKER [Index] ServiceStateMBean:OBJECT_CLASS?>
<?FM MARKER [Index] OBJECT_CLASS?>
OBJECT_CLASS
public static final String OBJECT_CLASS = “objectClass”<?FM MARKER [Index] objectClass?>

The key OBJECT_CLASS, used OBJECT_CLASS_ITEM. 
<?FM MARKER [Cross-Ref] ServiceStateMBean.OBJECT_CLASS_ITEM?>
<?FM MARKER [Index] ServiceStateMBean:OBJECT_CLASS_ITEM?>
<?FM MARKER [Index] OBJECT_CLASS_ITEM?>
OBJECT_CLASS_ITEM
public static final Item OBJECT_CLASS_ITEM
The item containing the interfaces of the service in SERVICE_TYPE.
The key is OBJECT_CLASS and the type is JmxConstants.STRING_ARRAY_TYPE. 
<?FM MARKER [Cross-Ref] ServiceStateMBean.OBJECTNAME?>
<?FM MARKER [Index] ServiceStateMBean:OBJECTNAME?>
<?FM MARKER [Index] OBJECTNAME?>
OBJECTNAME
public static final String OBJECTNAME = “osgi.core:type=serviceState,version=1.7”<?FM MARKER [Index] osgi.core:type=serviceState,version=1.7?>

The Object Name prefix for this mbean. The full object name also
contains the framework name and uuid as properties. 
<?FM MARKER [Cross-Ref] ServiceStateMBean.PROPERTIES?>
<?FM MARKER [Index] ServiceStateMBean:PROPERTIES?>
<?FM MARKER [Index] PROPERTIES?>
PROPERTIES
public static final String PROPERTIES = “Properties”<?FM MARKER [Index] Properties?>

The key PROPERTIES, used in PROPERTIES_ITEM. 
<?FM MARKER [Cross-Ref] ServiceStateMBean.PROPERTIES_ITEM?>
<?FM MARKER [Index] ServiceStateMBean:PROPERTIES_ITEM?>
<?FM MARKER [Index] PROPERTIES_ITEM?>
PROPERTIES_ITEM
public static final Item PROPERTIES_ITEM
The item containing service properties in SERVICE_TYPE. The key
is PROPERTIES and the type is JmxConstants.PROPERTIES_TYPE. 
<?FM MARKER [Cross-Ref] ServiceStateMBean.SERVICE_EVENT_TYPE?>
<?FM MARKER [Index] ServiceStateMBean:SERVICE_EVENT_TYPE?>
<?FM MARKER [Index] SERVICE_EVENT_TYPE?>
SERVICE_EVENT_TYPE
public static final CompositeType SERVICE_EVENT_TYPE
The Composite Type that represents a service event. This composite
consists of: 
IDENTIFIER
OBJECT_CLASS
BUNDLE_LOCATION
BUNDLE_SYMBOLIC_NAME
EVENT
<?FM MARKER [Cross-Ref] ServiceStateMBean.SERVICE_TYPE?>
<?FM MARKER [Index] ServiceStateMBean:SERVICE_TYPE?>
<?FM MARKER [Index] SERVICE_TYPE?>
SERVICE_TYPE
public static final CompositeType SERVICE_TYPE
The Composite Type for a CompositeData representing a service. This
type consists of: 
BUNDLE_IDENTIFIER
IDENTIFIER
OBJECT_CLASS
PROPERTIES
USING_BUNDLES
<?FM MARKER [Cross-Ref] ServiceStateMBean.SERVICES_TYPE?>
<?FM MARKER [Index] ServiceStateMBean:SERVICES_TYPE?>
<?FM MARKER [Index] SERVICES_TYPE?>
SERVICES_TYPE
public static final TabularType SERVICES_TYPE
The Tabular Type for a Service table. The rows consists of SERVICE_TYPE
Composite Data and the index is IDENTIFIER . 
<?FM MARKER [Cross-Ref] ServiceStateMBean.USING_BUNDLES?>
<?FM MARKER [Index] ServiceStateMBean:USING_BUNDLES?>
<?FM MARKER [Index] USING_BUNDLES?>
USING_BUNDLES
public static final String USING_BUNDLES = “UsingBundles”<?FM MARKER [Index] UsingBundles?>

The key USING_BUNDLES, used in USING_BUNDLES_ITEM. 
<?FM MARKER [Cross-Ref] ServiceStateMBean.USING_BUNDLES_ITEM?>
<?FM MARKER [Index] ServiceStateMBean:USING_BUNDLES_ITEM?>
<?FM MARKER [Index] USING_BUNDLES_ITEM?>
USING_BUNDLES_ITEM
public static final Item USING_BUNDLES_ITEM
The item containing the bundles using the service in SERVICE_TYPE.
The key is USING_BUNDLES and the type is JmxConstants.LONG_ARRAY_TYPE. 
<?FM MARKER [Cross-Ref] ServiceStateMBean.getBundleIdentifier(long)?>
<?FM MARKER [Index] ServiceStateMBean:getBundleIdentifier?>
<?FM MARKER [Index] getBundleIdentifier?>
getBundleIdentifier(long)
public long getBundleIdentifier ( long serviceId ) throws IOException
	serviceId	the identifier of the service
	
Answer the bundle identifier of the bundle which registered the
service 
	Returns	the identifier for the bundle
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the service indicated does not
exist 
<?FM MARKER [Cross-Ref] ServiceStateMBean.getObjectClass(long)?>
<?FM MARKER [Index] ServiceStateMBean:getObjectClass?>
<?FM MARKER [Index] getObjectClass?>
getObjectClass(long)
public String[] getObjectClass ( long serviceId )  throws IOException
	serviceId	the identifier of the service
	
Answer the list of interfaces that this service implements 
	Returns	the list of interfaces
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the service indicated does not
exist 
<?FM MARKER [Cross-Ref] ServiceStateMBean.getProperties(long)?>
<?FM MARKER [Index] ServiceStateMBean:getProperties?>
<?FM MARKER [Index] getProperties?>
getProperties(long)
public TabularData getProperties ( long serviceId ) throws IOException
	serviceId	the identifier of the service
	
Answer the map of properties associated with this service. 
	Returns	the table of properties. These include the standard mandatory
service.id and objectClass properties as defined in the org.osgi.framework.Constants
interface
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the service indicated does not
exist 
	See Also	for the details of the TabularType
<?FM MARKER [Cross-Ref] ServiceStateMBean.getProperty(long,String)?>
<?FM MARKER [Index] ServiceStateMBean:getProperty?>
<?FM MARKER [Index] getProperty?>
getProperty(long,String)
public CompositeData getProperty ( long serviceId , String key )
throws IOException
	serviceId	the identifier of the service
	key	the property key
	
Return a single property from the specified service. 
	Returns	a CompositeData object holding the value and data type
of the property.
	Throws	IOException –  if the operation fails 
	See Also	for the details of the CompositeType.
<?FM MARKER [Cross-Ref] ServiceStateMBean.getService(long)?>
<?FM MARKER [Index] ServiceStateMBean:getService?>
<?FM MARKER [Index] getService?>
getService(long)
public CompositeData getService ( long serviceId ) throws IOException
	serviceId	the ID of the service to look up
	
Obtain information about a given service.  The result is defined
by the CompositeType SERVICE_TYPE. 
	Returns	A CompositeData object with the service information
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the service indicated does not
exist 
<?FM MARKER [Cross-Ref] ServiceStateMBean.getServiceIds()?>
<?FM MARKER [Index] ServiceStateMBean:getServiceIds?>
<?FM MARKER [Index] getServiceIds?>
getServiceIds()
public long[] getServiceIds (  )  throws IOException
	
List all service IDs in the framework. 
	Returns	all the service ids in the framework.
	Throws	IOException –  if the operation fails 
<?FM MARKER [Cross-Ref] ServiceStateMBean.getUsingBundles(long)?>
<?FM MARKER [Index] ServiceStateMBean:getUsingBundles?>
<?FM MARKER [Index] getUsingBundles?>
getUsingBundles(long)
public long[] getUsingBundles ( long serviceId )  throws IOException
	serviceId	the identifier of the service
	
Answer the list of identifiers of the bundles that use the service 
	Returns	the list of bundle identifiers
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the service indicated does not
exist 
<?FM MARKER [Cross-Ref] ServiceStateMBean.listServices()?>
<?FM MARKER [Index] ServiceStateMBean:listServices?>
<?FM MARKER [Index] listServices?>
listServices()
public TabularData listServices ( ) throws IOException
	
Answer the service state of the system in tabular form. 
	Returns	the tabular representation of the service state
	Throws	IOException –  If the operation fails 
		IllegalArgumentException –  if the service indicated does not
exist 
	See Also	for the details of the TabularType
<?FM MARKER [Cross-Ref] ServiceStateMBean.listServices(String,String)?>
<?FM MARKER [Index] ServiceStateMBean:listServices?>
<?FM MARKER [Index] listServices?>
listServices(String,String)
public TabularData listServices ( String clazz , String filter )
throws IOException
	clazz	The class name with which the services were registered or
null for any class name.
	filter	A filter expression to match the services or null for no
additional filter.
	
Answer the service state of the system in tabular form. This method
allows the specification of a class name and a filter to select
services to be provided. 
	Returns	the tabular representation of the service state
	Throws	IOException –  If the operation fails 
		IllegalArgumentException –  if the service indicated does not
exist 
	See Also	for the details of the TabularType
<?FM MARKER [Cross-Ref] ServiceStateMBean.listServices(String,String,String...)?>
<?FM MARKER [Index] ServiceStateMBean:listServices?>
<?FM MARKER [Index] listServices?>
listServices(String,String,String...)
public TabularData listServices ( String clazz , String filter ,
String ... serviceTypeItems ) throws IOException
	clazz	The class name with which the services were registered or
null for any class name.
	filter	A filter expression to match the services or null for no
additional filter.
	serviceTypeItems	The names of the SERVICE_TYPE items to include
in the result. For example “objectClass” or “Properties”. Note that
the result always returns the “Identifier” item since this serves
as the key in the resulting table.
	
Answer the service state of the system in tabular form. Apart from
class name and filter, this method allows the specification of a
subset of the SERVICE_TYPE items to be included in the result. Selecting only
the relevant Service Type items may save bandwidth and improve performance
over a remote connection. 
	Returns	the tabular representation of the service state
	Throws	IOException –  If the operation fails 
		IllegalArgumentException –  if the service indicated does not
exist 
	See Also	for the details of the TabularType

</INSET><INSET xml:id="i3414551">org.osgi.jmx.service.cm<?FM MARKER [Cross-Ref] org.osgi.jmx.service.cm?>
<?FM MARKER [Index] org.osgi.jmx.service.cm?>
<?FM MARKER [Cross-Ref] package:org.osgi.jmx.service.cm?>

OSGi JMX Configuration Admin Package Version 1.3.  
Bundles wishing to use this package must list the package in the
Import-Package header of the bundle’s manifest. This package has
two types of users: the consumers that use the API in this package and
the providers that implement the API in this package. 
Example import for consumers using the API in this package: 
Import-Package: org.osgi.jmx.service.cm; version=”[1.3,2.0)”
Example import for providers implementing the API in this package: 
Import-Package: org.osgi.jmx.service.cm; version=”[1.3,1.4)”
<?FM MARKER [Cross-Ref] ConfigurationAdminMBean?>
<?FM MARKER [Index] ConfigurationAdminMBean?>
<?FM MARKER [Index] interface:ConfigurationAdminMBean?>
ConfigurationAdminMBean
public interface ConfigurationAdminMBean
This MBean provides the management interface to the OSGi Configuration
Administration Service. 
	Concurrency	Thread-safe 
<?FM MARKER [Cross-Ref] ConfigurationAdminMBean.OBJECTNAME?>
<?FM MARKER [Index] ConfigurationAdminMBean:OBJECTNAME?>
<?FM MARKER [Index] OBJECTNAME?>
OBJECTNAME
public static final String OBJECTNAME = “osgi.compendium:service=cm,version=1.3”<?FM MARKER [Index] osgi.compendium:service=cm,version=1.3?>

The object name for this mbean. 
<?FM MARKER [Cross-Ref] ConfigurationAdminMBean.createFactoryConfiguration(String)?>
<?FM MARKER [Index] ConfigurationAdminMBean:createFactoryConfiguration?>
<?FM MARKER [Index] createFactoryConfiguration?>
createFactoryConfiguration(String)
public String createFactoryConfiguration ( String factoryPid ) throws
IOException
	factoryPid	the persistent id of the factory
	
Create a new configuration instance for the supplied persistent
id of the factory, answering the PID of the created configuration 
	Returns	the PID of the created configuration
	Throws	IOException –  if the operation failed 
<?FM MARKER [Cross-Ref] ConfigurationAdminMBean.createFactoryConfigurationForLocation(String,String)?>
<?FM MARKER [Index] ConfigurationAdminMBean:createFactoryConfigurationForLocation?>
<?FM MARKER [Index] createFactoryConfigurationForLocation?>
createFactoryConfigurationForLocation(String,String)
public String createFactoryConfigurationForLocation ( String factoryPid
, String location ) throws IOException
	factoryPid	the persistent id of the factory
	location	the bundle location
	
Create a factory configuration for the supplied persistent id of
the factory and the bundle location bound to bind the created configuration
to, answering the PID of the created configuration 
	Returns	the pid of the created configuation
	Throws	IOException –  if the operation failed 
<?FM MARKER [Cross-Ref] ConfigurationAdminMBean.delete(String)?>
<?FM MARKER [Index] ConfigurationAdminMBean:delete?>
<?FM MARKER [Index] delete?>
delete(String)
public void delete ( String pid ) throws IOException
	pid	the persistent identifier of the configuration
	
Delete the configuration 
	Throws	IOException –  if the operation fails 
<?FM MARKER [Cross-Ref] ConfigurationAdminMBean.deleteConfigurations(String)?>
<?FM MARKER [Index] ConfigurationAdminMBean:deleteConfigurations?>
<?FM MARKER [Index] deleteConfigurations?>
deleteConfigurations(String)
public void deleteConfigurations ( String filter ) throws IOException
	filter	the string representation of the org.osgi.framework.Filter
	
Delete the configurations matching the filter specification. 
	Throws	IOException –  if the operation failed 
		IllegalArgumentException –  if the filter is invalid 
<?FM MARKER [Cross-Ref] ConfigurationAdminMBean.deleteForLocation(String,String)?>
<?FM MARKER [Index] ConfigurationAdminMBean:deleteForLocation?>
<?FM MARKER [Index] deleteForLocation?>
deleteForLocation(String,String)
public void deleteForLocation ( String pid , String location ) throws
IOException
	pid	the persistent identifier of the configuration
	location	the bundle location
	
Delete the configuration 
	Throws	IOException –  if the operation fails 
<?FM MARKER [Cross-Ref] ConfigurationAdminMBean.getBundleLocation(String)?>
<?FM MARKER [Index] ConfigurationAdminMBean:getBundleLocation?>
<?FM MARKER [Index] getBundleLocation?>
getBundleLocation(String)
public String getBundleLocation ( String pid ) throws IOException
	pid	the persistent identifier of the configuration
	
Answer the bundle location the configuration is bound to 
	Returns	the bundle location
	Throws	IOException –  if the operation fails 
<?FM MARKER [Cross-Ref] ConfigurationAdminMBean.getConfigurations(String)?>
<?FM MARKER [Index] ConfigurationAdminMBean:getConfigurations?>
<?FM MARKER [Index] getConfigurations?>
getConfigurations(String)
public String[][] getConfigurations ( String filter ) throws IOException
	filter	the string representation of the org.osgi.framework.Filter
	
Answer the list of PID/Location pairs of the configurations managed
by this service 
	Returns	the list of configuration PID/Location pairs
	Throws	IOException –  if the operation failed 
		IllegalArgumentException –  if the filter is invalid 
<?FM MARKER [Cross-Ref] ConfigurationAdminMBean.getFactoryPid(String)?>
<?FM MARKER [Index] ConfigurationAdminMBean:getFactoryPid?>
<?FM MARKER [Index] getFactoryPid?>
getFactoryPid(String)
public String getFactoryPid ( String pid ) throws IOException
	pid	the persistent identifier of the configuration
	
Answer the factory PID if the configuration is a factory configuration,
null otherwise. 
	Returns	the factory PID
	Throws	IOException –  if the operation fails 
<?FM MARKER [Cross-Ref] ConfigurationAdminMBean.getFactoryPidForLocation(String,String)?>
<?FM MARKER [Index] ConfigurationAdminMBean:getFactoryPidForLocation?>
<?FM MARKER [Index] getFactoryPidForLocation?>
getFactoryPidForLocation(String,String)
public String getFactoryPidForLocation ( String pid , String location
) throws IOException
	pid	the persistent identifier of the configuration
	location	the bundle location
	
Answer the factory PID if the configuration is a factory configuration,
null otherwise. 
	Returns	the factory PID
	Throws	IOException –  if the operation fails 
<?FM MARKER [Cross-Ref] ConfigurationAdminMBean.getProperties(String)?>
<?FM MARKER [Index] ConfigurationAdminMBean:getProperties?>
<?FM MARKER [Index] getProperties?>
getProperties(String)
public TabularData getProperties ( String pid ) throws IOException
	pid	the persistent identifier of the configuration
	
Answer the contents of the configuration. 
	Returns	the table of contents
	Throws	IOException –  if the operation fails 
	See Also	JmxConstants.PROPERTIES_TYPE for the details of the TabularType
<?FM MARKER [Cross-Ref] ConfigurationAdminMBean.getPropertiesForLocation(String,String)?>
<?FM MARKER [Index] ConfigurationAdminMBean:getPropertiesForLocation?>
<?FM MARKER [Index] getPropertiesForLocation?>
getPropertiesForLocation(String,String)
public TabularData getPropertiesForLocation ( String pid , String
location ) throws IOException
	pid	the persistent identifier of the configuration
	location	the bundle location
	
Answer the contents of the configuration. 
	Returns	the table of contents
	Throws	IOException –  if the operation fails 
	See Also	JmxConstants.PROPERTIES_TYPE for the details of the TabularType
<?FM MARKER [Cross-Ref] ConfigurationAdminMBean.setBundleLocation(String,String)?>
<?FM MARKER [Index] ConfigurationAdminMBean:setBundleLocation?>
<?FM MARKER [Index] setBundleLocation?>
setBundleLocation(String,String)
public void setBundleLocation ( String pid , String location ) throws
IOException
	pid	the persistent identifier of the configuration
	location	the bundle location
	
Set the bundle location the configuration is bound to 
	Throws	IOException –  if the operation fails 
<?FM MARKER [Cross-Ref] ConfigurationAdminMBean.update(String,javax.management.openmbean.TabularData)?>
<?FM MARKER [Index] ConfigurationAdminMBean:update?>
<?FM MARKER [Index] update?>
update(String,javax.management.openmbean.TabularData)
public void update ( String pid , TabularData properties ) throws
IOException
	pid	the persistent identifier of the configuration
	properties	the table of properties
	
Update the configuration with the supplied properties For each property
entry, the following row is supplied. 
	Throws	IOException –  if the operation fails 
	See Also	JmxConstants.PROPERTIES_TYPE for the details of the TabularType
<?FM MARKER [Cross-Ref] ConfigurationAdminMBean.updateForLocation(String,String,javax.management.openmbean.TabularData)?>
<?FM MARKER [Index] ConfigurationAdminMBean:updateForLocation?>
<?FM MARKER [Index] updateForLocation?>
updateForLocation(String,String,javax.management.openmbean.TabularData)
public void updateForLocation ( String pid , String location , TabularData
properties ) throws IOException
	pid	the persistent identifier of the configuration
	location	the bundle location
	properties	the table of properties
	
Update the configuration with the supplied properties For each property
entry, the following row is supplied. 
	Throws	IOException –  if the operation fails 
	See Also	JmxConstants.PROPERTIES_TYPE for the details of the TabularType

</INSET><INSET xml:id="i3415202">org.osgi.jmx.service.permissionadmin<?FM MARKER [Cross-Ref] org.osgi.jmx.service.permissionadmin?>
<?FM MARKER [Index] org.osgi.jmx.service.permissionadmin?>
<?FM MARKER [Cross-Ref] package:org.osgi.jmx.service.permissionadmin?>

OSGi JMX Permission Admin Package Version 1.2.  
Bundles wishing to use this package must list the package in the
Import-Package header of the bundle’s manifest. This package has
two types of users: the consumers that use the API in this package and
the providers that implement the API in this package. 
Example import for consumers using the API in this package: 
Import-Package: org.osgi.jmx.service.permissionadmin; version=”[1.2,2.0)”
Example import for providers implementing the API in this package: 
Import-Package: org.osgi.jmx.service.permissionadmin; version=”[1.2,1.3)”
<?FM MARKER [Cross-Ref] PermissionAdminMBean?>
<?FM MARKER [Index] PermissionAdminMBean?>
<?FM MARKER [Index] interface:PermissionAdminMBean?>
PermissionAdminMBean
public interface PermissionAdminMBean
This MBean represents the OSGi Permission Manager Service 
	Concurrency	Thread-safe 
<?FM MARKER [Cross-Ref] PermissionAdminMBean.OBJECTNAME?>
<?FM MARKER [Index] PermissionAdminMBean:OBJECTNAME?>
<?FM MARKER [Index] OBJECTNAME?>
OBJECTNAME
public static final String OBJECTNAME = “osgi.core:service=permissionadmin,version=1.2”<?FM MARKER [Index] osgi.core:service=permissionadmin,version=1.2?>

Permission Admin MBean object name. 
<?FM MARKER [Cross-Ref] PermissionAdminMBean.getPermissions(String)?>
<?FM MARKER [Index] PermissionAdminMBean:getPermissions?>
<?FM MARKER [Index] getPermissions?>
getPermissions(String)
public String[] getPermissions ( String location )  throws IOException
	location	location identifying the bundle
	
Answer the list of encoded permissions of the bundle specified by
the bundle location 
	Returns	the array of String encoded permissions
	Throws	IOException –  if the operation fails 
<?FM MARKER [Cross-Ref] PermissionAdminMBean.listDefaultPermissions()?>
<?FM MARKER [Index] PermissionAdminMBean:listDefaultPermissions?>
<?FM MARKER [Index] listDefaultPermissions?>
listDefaultPermissions()
public String[] listDefaultPermissions (  )  throws IOException
	
Answer the list of encoded permissions representing the default
permissions assigned to bundle locations that have no assigned permissions 
	Returns	the array of String encoded permissions
	Throws	IOException –  if the operation fails 
<?FM MARKER [Cross-Ref] PermissionAdminMBean.listLocations()?>
<?FM MARKER [Index] PermissionAdminMBean:listLocations?>
<?FM MARKER [Index] listLocations?>
listLocations()
public String[] listLocations (  )  throws IOException
	
Answer the bundle locations that have permissions assigned to them 
	Returns	the bundle locations
	Throws	IOException –  if the operation fails 
<?FM MARKER [Cross-Ref] PermissionAdminMBean.setDefaultPermissions(String[])?>
<?FM MARKER [Index] PermissionAdminMBean:setDefaultPermissions?>
<?FM MARKER [Index] setDefaultPermissions?>
setDefaultPermissions(String[])
public void setDefaultPermissions ( String[] encodedPermissions
)  throws IOException
	encodedPermissions	the string encoded permissions
	
Set the default permissions assigned to bundle locations that have
no assigned permissions 
	Throws	IOException –  if the operation fails 
<?FM MARKER [Cross-Ref] PermissionAdminMBean.setPermissions(String,String[])?>
<?FM MARKER [Index] PermissionAdminMBean:setPermissions?>
<?FM MARKER [Index] setPermissions?>
setPermissions(String,String[])
public void setPermissions ( String location , String[] encodedPermissions
)  throws IOException
	location	the location of the bundle
	encodedPermissions	the string encoded permissions to set
	
Set the permissions on the bundle specified by the bundle location 
	Throws	IOException –  if the operation fails 

</INSET><INSET xml:id="i3415280">org.osgi.jmx.service.provisioning<?FM MARKER [Cross-Ref] org.osgi.jmx.service.provisioning?>
<?FM MARKER [Index] org.osgi.jmx.service.provisioning?>
<?FM MARKER [Cross-Ref] package:org.osgi.jmx.service.provisioning?>

OSGi JMX Initial Provisioning Package Version 1.2.  
Bundles wishing to use this package must list the package in the
Import-Package header of the bundle’s manifest. This package has
two types of users: the consumers that use the API in this package and
the providers that implement the API in this package. 
Example import for consumers using the API in this package: 
Import-Package: org.osgi.jmx.service.provisioning; version=”[1.2,2.0)”
Example import for providers implementing the API in this package: 
Import-Package: org.osgi.jmx.service.provisioning; version=”[1.2,1.3)”
<?FM MARKER [Cross-Ref] ProvisioningServiceMBean?>
<?FM MARKER [Index] ProvisioningServiceMBean?>
<?FM MARKER [Index] interface:ProvisioningServiceMBean?>
ProvisioningServiceMBean
public interface ProvisioningServiceMBean
This MBean represents the management interface to the OSGi Initial
Provisioning Service 
	Concurrency	Thread-safe 
<?FM MARKER [Cross-Ref] ProvisioningServiceMBean.OBJECTNAME?>
<?FM MARKER [Index] ProvisioningServiceMBean:OBJECTNAME?>
<?FM MARKER [Index] OBJECTNAME?>
OBJECTNAME
public static final String OBJECTNAME = “osgi.compendium:service=provisioning,version=1.2”<?FM MARKER [Index] osgi.compendium:service=provisioning,version=1.2?>

Provisioning MBean object name. 
<?FM MARKER [Cross-Ref] ProvisioningServiceMBean.addInformation(javax.management.openmbean.TabularData)?>
<?FM MARKER [Index] ProvisioningServiceMBean:addInformation?>
<?FM MARKER [Index] addInformation?>
addInformation(javax.management.openmbean.TabularData)
public void addInformation ( TabularData info ) throws IOException
	info	the set of Provisioning Information key/value pairs to add
to the Provisioning Information dictionary. Any keys are values
that are of an invalid type will be silently ignored.
	
Adds the key/value pairs contained in info to the Provisioning Information
dictionary. This method causes the PROVISIONING_UPDATE_COUNT to
be incremented. 
	Throws	IOException –  if the operation fails 
	See Also	JmxConstants.PROPERTIES_TYPE for details of the Tabular
Data
<?FM MARKER [Cross-Ref] ProvisioningServiceMBean.addInformationFromZip(String)?>
<?FM MARKER [Index] ProvisioningServiceMBean:addInformationFromZip?>
<?FM MARKER [Index] addInformationFromZip?>
addInformationFromZip(String)
public void addInformationFromZip ( String zipURL ) throws IOException
	zipURL	the String form of the URL that will be resolved into a
ZipInputStream which will be used to add key/value pairs to the
Provisioning Information dictionary and install and start bundles.
If a ZipEntry does not have an Extra field that corresponds to one
of the four defined MIME types ( MIME_STRING, MIME_BYTE_ARRAY,MIME_BUNDLE,
and MIME_BUNDLE_URL) in will be silently ignored.
	
Processes the ZipInputStream contents of the provided zipURL and
extracts information to add to the Provisioning Information dictionary,
as well as, install/update and start bundles. This method causes the
PROVISIONING_UPDATE_COUNT to be incremented. 
	Throws	IOException –  if an error occurs while processing the ZipInputStream
of the URL. No additions will be made to the Provisioning Information
dictionary and no bundles must be started or installed. 
<?FM MARKER [Cross-Ref] ProvisioningServiceMBean.listInformation()?>
<?FM MARKER [Index] ProvisioningServiceMBean:listInformation?>
<?FM MARKER [Index] listInformation?>
listInformation()
public TabularData listInformation ( ) throws IOException
	
Returns a table representing the Provisioning Information Dictionary. 
	Returns	The table representing the manager dictionary.
	Throws	IOException –  if the operation fails 
	See Also	JmxConstants.PROPERTIES_TYPE for details of the Tabular
Data
<?FM MARKER [Cross-Ref] ProvisioningServiceMBean.setInformation(javax.management.openmbean.TabularData)?>
<?FM MARKER [Index] ProvisioningServiceMBean:setInformation?>
<?FM MARKER [Index] setInformation?>
setInformation(javax.management.openmbean.TabularData)
public void setInformation ( TabularData info ) throws IOException
	info	the new set of Provisioning Information key/value pairs. Any
keys are values that are of an invalid type will be silently ignored.
	
Replaces the Provisioning Information dictionary with the entries
of the supplied table. This method causes the PROVISIONING_UPDATE_COUNT
to be incremented. 
	Throws	IOException –  if the operation fails 
	See Also	JmxConstants.PROPERTIES_TYPE for details of the Tabular
Data

</INSET>
<INSET xml:id="i3415350"><phrase>org.osgi.jmx.service.useradmin<?FM MARKER [Cross-Ref] org.osgi.jmx.service.useradmin?>
<?FM MARKER [Index] org.osgi.jmx.service.useradmin?>
<?FM MARKER [Cross-Ref] package:org.osgi.jmx.service.useradmin?>

OSGi JMX User Admin Package Version 1.1.  
Bundles wishing to use this package must list the package in the
Import-Package header of the bundle’s manifest. This package has
two types of users: the consumers that use the API in this package and
the providers that implement the API in this package. 
Example import for consumers using the API in this package: 
Import-Package: org.osgi.jmx.service.useradmin; version=”[1.1,2.0)”
Example import for providers implementing the API in this package: 
Import-Package: org.osgi.jmx.service.useradmin; version=”[1.1,1.2)”
<?FM MARKER [Cross-Ref] UserAdminMBean?>
<?FM MARKER [Index] UserAdminMBean?>
<?FM MARKER [Index] interface:UserAdminMBean?>
UserAdminMBean
public interface UserAdminMBean
This MBean provides the management interface to the OSGi User Manager
Service 
	Concurrency	Thread-safe 
<?FM MARKER [Cross-Ref] UserAdminMBean.AUTORIZATION_TYPE?>
<?FM MARKER [Index] UserAdminMBean:AUTORIZATION_TYPE?>
<?FM MARKER [Index] AUTORIZATION_TYPE?>
AUTORIZATION_TYPE
public static final CompositeType AUTORIZATION_TYPE
The Composite Type for an Authorization object. It consists of the
NAME_ITEM and ROLES_ITEM items. 
<?FM MARKER [Cross-Ref] UserAdminMBean.CREDENTIALS?>
<?FM MARKER [Index] UserAdminMBean:CREDENTIALS?>
<?FM MARKER [Index] CREDENTIALS?>
CREDENTIALS
public static final String CREDENTIALS = “Credentials”<?FM MARKER [Index] Credentials?>

The CREDENTIALS key, used in CREDENTIALS_ITEM. 
<?FM MARKER [Cross-Ref] UserAdminMBean.CREDENTIALS_ITEM?>
<?FM MARKER [Index] UserAdminMBean:CREDENTIALS_ITEM?>
<?FM MARKER [Index] CREDENTIALS_ITEM?>
CREDENTIALS_ITEM
public static final Item CREDENTIALS_ITEM
The item containing the credentials of a user. The key is CREDENTIALS
and the type is JmxConstants.PROPERTIES_TYPE . 
<?FM MARKER [Cross-Ref] UserAdminMBean.GROUP_TYPE?>
<?FM MARKER [Index] UserAdminMBean:GROUP_TYPE?>
<?FM MARKER [Index] GROUP_TYPE?>
GROUP_TYPE
public static final CompositeType GROUP_TYPE
The Composite Type for a Group. It extends USER_TYPE and adds MEMBERS_ITEM,
and REQUIRED_MEMBERS_ITEM.  This type extends the USER_TYPE. It
adds: 
MEMBERS
REQUIRED_MEMBERS
If there are no members or required members an empty array is returned
in the respective items. 
<?FM MARKER [Cross-Ref] UserAdminMBean.MEMBERS?>
<?FM MARKER [Index] UserAdminMBean:MEMBERS?>
<?FM MARKER [Index] MEMBERS?>
MEMBERS
public static final String MEMBERS = “Members”<?FM MARKER [Index] Members?>

The MEMBERS key, used in MEMBERS_ITEM. 
<?FM MARKER [Cross-Ref] UserAdminMBean.MEMBERS_ITEM?>
<?FM MARKER [Index] UserAdminMBean:MEMBERS_ITEM?>
<?FM MARKER [Index] MEMBERS_ITEM?>
MEMBERS_ITEM
public static final Item MEMBERS_ITEM
The item containing the members of a group. The key is MEMBERS and
the type is JmxConstants.STRING_ARRAY_TYPE. It is used in GROUP_TYPE. 
<?FM MARKER [Cross-Ref] UserAdminMBean.NAME?>
<?FM MARKER [Index] UserAdminMBean:NAME?>
<?FM MARKER [Index] NAME?>
NAME
public static final String NAME = “Name”<?FM MARKER [Index] Name?>

The key NAME, used in NAME_ITEM. 
<?FM MARKER [Cross-Ref] UserAdminMBean.NAME_ITEM?>
<?FM MARKER [Index] UserAdminMBean:NAME_ITEM?>
<?FM MARKER [Index] NAME_ITEM?>
NAME_ITEM
public static final Item NAME_ITEM
The item for the user name for an authorization object. The key
is NAME and the type is SimpleType.STRING. 
<?FM MARKER [Cross-Ref] UserAdminMBean.OBJECTNAME?>
<?FM MARKER [Index] UserAdminMBean:OBJECTNAME?>
<?FM MARKER [Index] OBJECTNAME?>
OBJECTNAME
public static final String OBJECTNAME = “osgi.compendium:service=useradmin,version=1.1”<?FM MARKER [Index] osgi.compendium:service=useradmin,version=1.1?>

User Admin MBean object name. 
<?FM MARKER [Cross-Ref] UserAdminMBean.PROPERTIES?>
<?FM MARKER [Index] UserAdminMBean:PROPERTIES?>
<?FM MARKER [Index] PROPERTIES?>
PROPERTIES
public static final String PROPERTIES = “Properties”<?FM MARKER [Index] Properties?>

The PROPERTIES key, used in PROPERTIES_ITEM. 
<?FM MARKER [Cross-Ref] UserAdminMBean.PROPERTIES_ITEM?>
<?FM MARKER [Index] UserAdminMBean:PROPERTIES_ITEM?>
<?FM MARKER [Index] PROPERTIES_ITEM?>
PROPERTIES_ITEM
public static final Item PROPERTIES_ITEM
The item containing the properties of a Role. The key is PROPERTIES
and the type is JmxConstants.PROPERTIES_TYPE. 
<?FM MARKER [Cross-Ref] UserAdminMBean.REQUIRED_MEMBERS?>
<?FM MARKER [Index] UserAdminMBean:REQUIRED_MEMBERS?>
<?FM MARKER [Index] REQUIRED_MEMBERS?>
REQUIRED_MEMBERS
public static final String REQUIRED_MEMBERS = “RequiredMembers”<?FM MARKER [Index] RequiredMembers?>

The REQUIRED_MEMBERS key, used in REQUIRED_MEMBERS_ITEM. 
<?FM MARKER [Cross-Ref] UserAdminMBean.REQUIRED_MEMBERS_ITEM?>
<?FM MARKER [Index] UserAdminMBean:REQUIRED_MEMBERS_ITEM?>
<?FM MARKER [Index] REQUIRED_MEMBERS_ITEM?>
REQUIRED_MEMBERS_ITEM
public static final Item REQUIRED_MEMBERS_ITEM
The item containing the required members of a group. The key is
REQUIRED_MEMBERS and the type is JmxConstants.STRING_ARRAY_TYPE.
It is used in GROUP_TYPE . 
<?FM MARKER [Cross-Ref] UserAdminMBean.ROLE_TYPE?>
<?FM MARKER [Index] UserAdminMBean:ROLE_TYPE?>
<?FM MARKER [Index] ROLE_TYPE?>
ROLE_TYPE
public static final CompositeType ROLE_TYPE
The Composite Type for a Role. It contains the following items: 
NAME
TYPE
PROPERTIES
<?FM MARKER [Cross-Ref] UserAdminMBean.ROLES?>
<?FM MARKER [Index] UserAdminMBean:ROLES?>
<?FM MARKER [Index] ROLES?>
ROLES
public static final String ROLES = “Roles”<?FM MARKER [Index] Roles?>

The key ROLES, used in ROLES_ITEM. 
<?FM MARKER [Cross-Ref] UserAdminMBean.ROLES_ITEM?>
<?FM MARKER [Index] UserAdminMBean:ROLES_ITEM?>
<?FM MARKER [Index] ROLES_ITEM?>
ROLES_ITEM
public static final Item ROLES_ITEM
The item containing the roles for this authorization object. The
key is ROLES. and the type is JmxConstants.STRING_ARRAY_TYPE. 
<?FM MARKER [Cross-Ref] UserAdminMBean.TYPE?>
<?FM MARKER [Index] UserAdminMBean:TYPE?>
<?FM MARKER [Index] TYPE?>
TYPE
public static final String TYPE = “Type”<?FM MARKER [Index] Type?>

The Role TYPE key, used in TYPE_ITEM. 
<?FM MARKER [Cross-Ref] UserAdminMBean.TYPE_ITEM?>
<?FM MARKER [Index] UserAdminMBean:TYPE_ITEM?>
<?FM MARKER [Index] TYPE_ITEM?>
TYPE_ITEM
public static final Item TYPE_ITEM
The item containing the type of the roles encapsulated by this authorization
object. The key is TYPE and the type is SimpleType.INTEGER. 
<?FM MARKER [Cross-Ref] UserAdminMBean.USER_TYPE?>
<?FM MARKER [Index] UserAdminMBean:USER_TYPE?>
<?FM MARKER [Index] USER_TYPE?>
USER_TYPE
public static final CompositeType USER_TYPE
A Composite Type for a User. A User contains its Role description
and adds the credentials. It extends ROLE_TYPE and adds CREDENTIALS_ITEM.
 This type extends the ROLE_TYPE. It adds: 
CREDENTIALS
<?FM MARKER [Cross-Ref] UserAdminMBean.addCredential(String,byte[],String)?>
<?FM MARKER [Index] UserAdminMBean:addCredential?>
<?FM MARKER [Index] addCredential?>
addCredential(String,byte[],String)
public void addCredential ( String key , byte[] value , String username
)  throws IOException
	key	The key of the credential to add
	value	The value of the credential to add
	username	The name of the user that gets the credential.
	
Add credentials to a user, associated with the supplied key 
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the username is not a User 
<?FM MARKER [Cross-Ref] UserAdminMBean.addCredentialString(String,String,String)?>
<?FM MARKER [Index] UserAdminMBean:addCredentialString?>
<?FM MARKER [Index] addCredentialString?>
addCredentialString(String,String,String)
public void addCredentialString ( String key , String value , String
username ) throws IOException
	key	The key of the credential to add
	value	The value of the credential to add
	username	The name of the user that gets the credential.
	
Add credentials to a user, associated with the supplied key 
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the username is not a User 
<?FM MARKER [Cross-Ref] UserAdminMBean.addMember(String,String)?>
<?FM MARKER [Index] UserAdminMBean:addMember?>
<?FM MARKER [Index] addMember?>
addMember(String,String)
public boolean addMember ( String groupname , String rolename )
throws IOException
	groupname	The group name that receives the rolename as member.
	rolename	The rolename (User or Group) that must be added.
	
Add a member to the group. 
	Returns	true if the role was added to the group
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if an invalid group name or role name
is specified 
<?FM MARKER [Cross-Ref] UserAdminMBean.addProperty(String,byte[],String)?>
<?FM MARKER [Index] UserAdminMBean:addProperty?>
<?FM MARKER [Index] addProperty?>
addProperty(String,byte[],String)
public void addProperty ( String key , byte[] value , String rolename
)  throws IOException
	key	The added property key
	value	The added byte[] property value
	rolename	The role name that receives the property
	
Add or update a property on a role. 
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if an invalid role name is specified 
<?FM MARKER [Cross-Ref] UserAdminMBean.addPropertyString(String,String,String)?>
<?FM MARKER [Index] UserAdminMBean:addPropertyString?>
<?FM MARKER [Index] addPropertyString?>
addPropertyString(String,String,String)
public void addPropertyString ( String key , String value , String
rolename ) throws IOException
	key	The key of the property to add
	value	The value of the property to add (String)
	rolename	The role name
	
Add or update a property on a role 
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if an invalid role name is specified 
<?FM MARKER [Cross-Ref] UserAdminMBean.addRequiredMember(String,String)?>
<?FM MARKER [Index] UserAdminMBean:addRequiredMember?>
<?FM MARKER [Index] addRequiredMember?>
addRequiredMember(String,String)
public boolean addRequiredMember ( String groupname , String rolename
) throws IOException
	groupname	The group name that is addded
	rolename	The role that
	
Add a required member to the group 
	Returns	true if the role was added to the group
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if an invalid group name or role name
is specified 
<?FM MARKER [Cross-Ref] UserAdminMBean.createGroup(String)?>
<?FM MARKER [Index] UserAdminMBean:createGroup?>
<?FM MARKER [Index] createGroup?>
createGroup(String)
public void createGroup ( String name ) throws IOException
	name	Name of the group to create
	
Create a Group 
	Throws	IOException –  if the operation fails 
<?FM MARKER [Cross-Ref] UserAdminMBean.createRole(String)?>
<?FM MARKER [Index] UserAdminMBean:createRole?>
<?FM MARKER [Index] createRole?>
createRole(String)
public void createRole ( String name ) throws IOException
	name	Ignored.
	
This method was specified in error and must not be used. 
	Throws	IOException –  This method will throw an exception if called. 
	Deprecated	This method was specified in error. It does not function
and must not be used. Use either createUser(String) or createGroup(String).
<?FM MARKER [Cross-Ref] UserAdminMBean.createUser(String)?>
<?FM MARKER [Index] UserAdminMBean:createUser?>
<?FM MARKER [Index] createUser?>
createUser(String)
public void createUser ( String name ) throws IOException
	name	Name of the user to create
	
Create a User 
	Throws	IOException –  if the operation fails 
<?FM MARKER [Cross-Ref] UserAdminMBean.getAuthorization(String)?>
<?FM MARKER [Index] UserAdminMBean:getAuthorization?>
<?FM MARKER [Index] getAuthorization?>
getAuthorization(String)
public CompositeData getAuthorization ( String user ) throws IOException
	user	The user name
	
Answer the authorization for the user name.  The Composite Data
is typed by AUTORIZATION_TYPE. 
	Returns	the Authorization typed by AUTORIZATION_TYPE.
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the user name is not a User 
<?FM MARKER [Cross-Ref] UserAdminMBean.getCredentials(String)?>
<?FM MARKER [Index] UserAdminMBean:getCredentials?>
<?FM MARKER [Index] getCredentials?>
getCredentials(String)
public TabularData getCredentials ( String username ) throws IOException
	username	The user name
	
Answer the credentials associated with a user.  The returned Tabular
Data is typed by JmxConstants.PROPERTIES_TYPE. 
	Returns	the credentials associated with the user, see JmxConstants.PROPERTIES_TYPE
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the user name is not a User 
<?FM MARKER [Cross-Ref] UserAdminMBean.getGroup(String)?>
<?FM MARKER [Index] UserAdminMBean:getGroup?>
<?FM MARKER [Index] getGroup?>
getGroup(String)
public CompositeData getGroup ( String groupname ) throws IOException
	groupname	The group name
	
Answer the Group associated with the group name.  The returned Composite
Data is typed by GROUP_TYPE
	Returns	the Group, see GROUP_TYPE
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the group name is not a Group 
<?FM MARKER [Cross-Ref] UserAdminMBean.getGroups(String)?>
<?FM MARKER [Index] UserAdminMBean:getGroups?>
<?FM MARKER [Index] getGroups?>
getGroups(String)
public String[] getGroups ( String filter )  throws IOException
	filter	The filter to apply
	
Answer the list of group names 
	Returns	The list of group names
	Throws	IOException –  if the operation fails 
<?FM MARKER [Cross-Ref] UserAdminMBean.getImpliedRoles(String)?>
<?FM MARKER [Index] UserAdminMBean:getImpliedRoles?>
<?FM MARKER [Index] getImpliedRoles?>
getImpliedRoles(String)
public String[] getImpliedRoles ( String username )  throws IOException
	username	The name of the user that has the implied roles
	
Answer the list of implied roles for a user 
	Returns	The list of role names
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the username is not a User 
<?FM MARKER [Cross-Ref] UserAdminMBean.getMembers(String)?>
<?FM MARKER [Index] UserAdminMBean:getMembers?>
<?FM MARKER [Index] getMembers?>
getMembers(String)
public String[] getMembers ( String groupname )  throws IOException
	groupname	The name of the group to get the members from
	
Answer the the user names which are members of the group 
	Returns	The list of user names
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the groupname is not a Group 
<?FM MARKER [Cross-Ref] UserAdminMBean.getProperties(String)?>
<?FM MARKER [Index] UserAdminMBean:getProperties?>
<?FM MARKER [Index] getProperties?>
getProperties(String)
public TabularData getProperties ( String rolename ) throws IOException
	rolename	The name of the role to get properties from
	
Answer the properties associated with a role.  The returned Tabular
Data is typed by JmxConstants.PROPERTIES_TYPE. 
	Returns	the properties associated with the role, see JmxConstants.PROPERTIES_TYPE
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the rolename is not a role 
<?FM MARKER [Cross-Ref] UserAdminMBean.getRequiredMembers(String)?>
<?FM MARKER [Index] UserAdminMBean:getRequiredMembers?>
<?FM MARKER [Index] getRequiredMembers?>
getRequiredMembers(String)
public String[] getRequiredMembers ( String groupname )  throws
IOException
	groupname	The name of the group to get the required members from
	
Answer the list of user names which are required members of this
group 
	Returns	The list of user names
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the group name is not a Group 
<?FM MARKER [Cross-Ref] UserAdminMBean.getRole(String)?>
<?FM MARKER [Index] UserAdminMBean:getRole?>
<?FM MARKER [Index] getRole?>
getRole(String)
public CompositeData getRole ( String name ) throws IOException
	name	The name of the role to get the data from
	
Answer the role associated with a name.  The returned Composite
Data is typed by ROLE_TYPE. 
	Returns	the Role, see ROLE_TYPE
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the name is not a role 
<?FM MARKER [Cross-Ref] UserAdminMBean.getRoles(String)?>
<?FM MARKER [Index] UserAdminMBean:getRoles?>
<?FM MARKER [Index] getRoles?>
getRoles(String)
public String[] getRoles ( String filter )  throws IOException
	filter	The string representation of the org.osgi.framework.Filter
that is used to filter the roles by applying to the properties,
if null all roles are returned.
	
Answer the list of role names which match the supplied filter 
	Returns	The list the role names
	Throws	IOException –  if the operation fails 
<?FM MARKER [Cross-Ref] UserAdminMBean.getUser(String)?>
<?FM MARKER [Index] UserAdminMBean:getUser?>
<?FM MARKER [Index] getUser?>
getUser(String)
public CompositeData getUser ( String username ) throws IOException
	username	The name of the requested user
	
Answer the User associated with the user name.  The returned Composite
Data is typed by USER_TYPE. 
	Returns	The User, see USER_TYPE
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the username is not a User 
<?FM MARKER [Cross-Ref] UserAdminMBean.getUsers(String)?>
<?FM MARKER [Index] UserAdminMBean:getUsers?>
<?FM MARKER [Index] getUsers?>
getUsers(String)
public String[] getUsers ( String filter )  throws IOException
	filter	The filter to apply
	
Answer the list of user names in the User Admin database 
	Returns	The list of user names
	Throws	IOException –  if the operation fails 
<?FM MARKER [Cross-Ref] UserAdminMBean.getUserWithProperty(String,String)?>
<?FM MARKER [Index] UserAdminMBean:getUserWithProperty?>
<?FM MARKER [Index] getUserWithProperty?>
getUserWithProperty(String,String)
public String getUserWithProperty ( String key , String value )
throws IOException
	key	The key to compare
	value	The value to compare
	
Answer the user name with the given property key-value pair from
the User Admin service database. 
	Returns	The User
	Throws	IOException –  if the operation fails 
<?FM MARKER [Cross-Ref] UserAdminMBean.listGroups()?>
<?FM MARKER [Index] UserAdminMBean:listGroups?>
<?FM MARKER [Index] listGroups?>
listGroups()
public String[] listGroups (  )  throws IOException
	
Answer the list of group names 
	Returns	The list of group names
	Throws	IOException –  if the operation fails 
<?FM MARKER [Cross-Ref] UserAdminMBean.listRoles()?>
<?FM MARKER [Index] UserAdminMBean:listRoles?>
<?FM MARKER [Index] listRoles?>
listRoles()
public String[] listRoles (  )  throws IOException
	
Answer the list of role names in the User Admin database 
	Returns	The list of role names
	Throws	IOException –  if the operation fails 
<?FM MARKER [Cross-Ref] UserAdminMBean.listUsers()?>
<?FM MARKER [Index] UserAdminMBean:listUsers?>
<?FM MARKER [Index] listUsers?>
listUsers()
public String[] listUsers (  )  throws IOException
	
Answer the list of user names in the User Admin database 
	Returns	The list of user names
	Throws	IOException –  if the operation fails 
<?FM MARKER [Cross-Ref] UserAdminMBean.removeCredential(String,String)?>
<?FM MARKER [Index] UserAdminMBean:removeCredential?>
<?FM MARKER [Index] removeCredential?>
removeCredential(String,String)
public void removeCredential ( String key , String username ) throws
IOException
	key	The key of the credential to remove
	username	The name of the user for which the credential must be
removed
	
Remove the credential associated with the given user 
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the username is not a User 
<?FM MARKER [Cross-Ref] UserAdminMBean.removeGroup(String)?>
<?FM MARKER [Index] UserAdminMBean:removeGroup?>
<?FM MARKER [Index] removeGroup?>
removeGroup(String)
public boolean removeGroup ( String name ) throws IOException
	name	
	
Remove the Group associated with the name 
	Returns	true if the remove succeeded
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the name is not a Group 
<?FM MARKER [Cross-Ref] UserAdminMBean.removeMember(String,String)?>
<?FM MARKER [Index] UserAdminMBean:removeMember?>
<?FM MARKER [Index] removeMember?>
removeMember(String,String)
public boolean removeMember ( String groupname , String rolename
) throws IOException
	groupname	The group name
	rolename	
	
Remove a role from the group 
	Returns	true if the role was removed from the group
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the groupname is not a Group 
<?FM MARKER [Cross-Ref] UserAdminMBean.removeProperty(String,String)?>
<?FM MARKER [Index] UserAdminMBean:removeProperty?>
<?FM MARKER [Index] removeProperty?>
removeProperty(String,String)
public void removeProperty ( String key , String rolename ) throws
IOException
	key	
	rolename	
	
Remove a property from a role 
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the rolename is not a role 
<?FM MARKER [Cross-Ref] UserAdminMBean.removeRole(String)?>
<?FM MARKER [Index] UserAdminMBean:removeRole?>
<?FM MARKER [Index] removeRole?>
removeRole(String)
public boolean removeRole ( String name ) throws IOException
	name	
	
Remove the Role associated with the name 
	Returns	true if the remove succeeded
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the name is not a role 
<?FM MARKER [Cross-Ref] UserAdminMBean.removeUser(String)?>
<?FM MARKER [Index] UserAdminMBean:removeUser?>
<?FM MARKER [Index] removeUser?>
removeUser(String)
public boolean removeUser ( String name ) throws IOException
	name	
	
Remove the User associated with the name 
	Returns	true if the remove succeeded
	Throws	IOException –  if the operation fails 
		IllegalArgumentException –  if the name is not a User 

</phrase></INSET>
<INSET xml:id="i3414730">org.osgi.jmx.framework.wiring<?FM MARKER [Cross-Ref] org.osgi.jmx.framework.wiring?>
<?FM MARKER [Index] org.osgi.jmx.framework.wiring?>
<?FM MARKER [Cross-Ref] package:org.osgi.jmx.framework.wiring?>

OSGi JMX Framework Wiring Package Version 1.1.  
Bundles wishing to use this package must list the package in the
Import-Package header of the bundle’s manifest. This package has
two types of users: the consumers that use the API in this package and
the providers that implement the API in this package. 
Example import for consumers using the API in this package: 
Import-Package: org.osgi.jmx.framework.wiring; version=”[1.1,2.0)”
Example import for providers implementing the API in this package: 
Import-Package: org.osgi.jmx.framework.wiring; version=”[1.1,1.2)”
<?FM MARKER [Cross-Ref] BundleWiringStateMBean?>
<?FM MARKER [Index] BundleWiringStateMBean?>
<?FM MARKER [Index] interface:BundleWiringStateMBean?>
BundleWiringStateMBean
public interface BundleWiringStateMBean
This MBean represents the bundle wiring state. 
It can be used to retrieve the declared capabilities, declared requirements,
and wiring for the current and past revisions of bundles.
	Concurrency	Thread-safe 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.ATTRIBUTES?>
<?FM MARKER [Index] BundleWiringStateMBean:ATTRIBUTES?>
<?FM MARKER [Index] ATTRIBUTES?>
ATTRIBUTES
public static final String ATTRIBUTES = “Attributes”<?FM MARKER [Index] Attributes?>

The key of ATTRIBUTES_ITEM. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.ATTRIBUTES_ITEM?>
<?FM MARKER [Index] BundleWiringStateMBean:ATTRIBUTES_ITEM?>
<?FM MARKER [Index] ATTRIBUTES_ITEM?>
ATTRIBUTES_ITEM
public static final Item ATTRIBUTES_ITEM
The item containing the attributes of a capability or requirement.
Used in BUNDLE_REQUIREMENT_TYPE and BUNDLE_CAPABILITY_TYPE. The
key is ATTRIBUTES and the type is ATTRIBUTES_TYPE. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.ATTRIBUTES_TYPE?>
<?FM MARKER [Index] BundleWiringStateMBean:ATTRIBUTES_TYPE?>
<?FM MARKER [Index] ATTRIBUTES_TYPE?>
ATTRIBUTES_TYPE
public static final TabularType ATTRIBUTES_TYPE
The Tabular Type that holds the attributes for a capability or requirements.
The row type is JmxConstants.PROPERTY_TYPE and the index is JmxConstants.KEY. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.BUNDLE_CAPABILITY?>
<?FM MARKER [Index] BundleWiringStateMBean:BUNDLE_CAPABILITY?>
<?FM MARKER [Index] BUNDLE_CAPABILITY?>
BUNDLE_CAPABILITY
public static final String BUNDLE_CAPABILITY = “BundleCapability”<?FM MARKER [Index] BundleCapability?>

The key of BUNDLE_CAPABILITY_ITEM. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.BUNDLE_CAPABILITY_ITEM?>
<?FM MARKER [Index] BundleWiringStateMBean:BUNDLE_CAPABILITY_ITEM?>
<?FM MARKER [Index] BUNDLE_CAPABILITY_ITEM?>
BUNDLE_CAPABILITY_ITEM
public static final Item BUNDLE_CAPABILITY_ITEM
The item containing a capability for a bundle in BUNDLE_WIRE_TYPE.
The key is BUNDLE_CAPABILITY and the type is BUNDLE_CAPABILITY_TYPE. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.BUNDLE_CAPABILITY_TYPE?>
<?FM MARKER [Index] BundleWiringStateMBean:BUNDLE_CAPABILITY_TYPE?>
<?FM MARKER [Index] BUNDLE_CAPABILITY_TYPE?>
BUNDLE_CAPABILITY_TYPE
public static final CompositeType BUNDLE_CAPABILITY_TYPE
The Composite Type that represents the capability of a bundle. 
The composite consists of: 
NAMESPACE
ATTRIBUTES
DIRECTIVES
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.BUNDLE_ID?>
<?FM MARKER [Index] BundleWiringStateMBean:BUNDLE_ID?>
<?FM MARKER [Index] BUNDLE_ID?>
BUNDLE_ID
public static final String BUNDLE_ID = “BundleId”<?FM MARKER [Index] BundleId?>

The key of BUNDLE_ID_ITEM. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.BUNDLE_ID_ITEM?>
<?FM MARKER [Index] BundleWiringStateMBean:BUNDLE_ID_ITEM?>
<?FM MARKER [Index] BUNDLE_ID_ITEM?>
BUNDLE_ID_ITEM
public static final Item BUNDLE_ID_ITEM
The item containing a bundle ID. They key is BUNDLE_ID and the type
is a long. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.BUNDLE_REQUIREMENT?>
<?FM MARKER [Index] BundleWiringStateMBean:BUNDLE_REQUIREMENT?>
<?FM MARKER [Index] BUNDLE_REQUIREMENT?>
BUNDLE_REQUIREMENT
public static final String BUNDLE_REQUIREMENT = “BundleRequirement”<?FM MARKER [Index] BundleRequirement?>

The key of BUNDLE_REQUIREMENT_ITEM. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.BUNDLE_REQUIREMENT_ITEM?>
<?FM MARKER [Index] BundleWiringStateMBean:BUNDLE_REQUIREMENT_ITEM?>
<?FM MARKER [Index] BUNDLE_REQUIREMENT_ITEM?>
BUNDLE_REQUIREMENT_ITEM
public static final Item BUNDLE_REQUIREMENT_ITEM
The item containing a requirement for a bundle in BUNDLE_WIRE_TYPE.
The key is BUNDLE_REQUIREMENT and the type is BUNDLE_REQUIREMENT_TYPE. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.BUNDLE_REQUIREMENT_TYPE?>
<?FM MARKER [Index] BundleWiringStateMBean:BUNDLE_REQUIREMENT_TYPE?>
<?FM MARKER [Index] BUNDLE_REQUIREMENT_TYPE?>
BUNDLE_REQUIREMENT_TYPE
public static final CompositeType BUNDLE_REQUIREMENT_TYPE
The Composite Type that represents the requirement of a bundle.
 The composite consists of: 
NAMESPACE
ATTRIBUTES
DIRECTIVES
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.BUNDLE_REVISION_ID?>
<?FM MARKER [Index] BundleWiringStateMBean:BUNDLE_REVISION_ID?>
<?FM MARKER [Index] BUNDLE_REVISION_ID?>
BUNDLE_REVISION_ID
public static final String BUNDLE_REVISION_ID = “BundleRevisionId”<?FM MARKER [Index] BundleRevisionId?>

The key of BUNDLE_REVISION_ID_ITEM. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.BUNDLE_REVISION_ID_ITEM?>
<?FM MARKER [Index] BundleWiringStateMBean:BUNDLE_REVISION_ID_ITEM?>
<?FM MARKER [Index] BUNDLE_REVISION_ID_ITEM?>
BUNDLE_REVISION_ID_ITEM
public static final Item BUNDLE_REVISION_ID_ITEM
The item containing a bundle revision ID. A bundle revision ID is
always local to the result of a JMX invocation and do not have a
defined meaning across invocation calls. They are used where a result can
potentially contain multiple revisions of the same bundle. The key
is BUNDLE_REVISION_ID and the type is an integer. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.BUNDLE_WIRE_TYPE?>
<?FM MARKER [Index] BundleWiringStateMBean:BUNDLE_WIRE_TYPE?>
<?FM MARKER [Index] BUNDLE_WIRE_TYPE?>
BUNDLE_WIRE_TYPE
public static final CompositeType BUNDLE_WIRE_TYPE
The Composite type that represents a bundle wire describing the
live association between a provider of a capability and a requirer
of the corresponding requirement. 
The composite consists of: 
BUNDLE_REQUIREMENT
BUNDLE_CAPABILITY
PROVIDER_BUNDLE_ID
PROVIDER_BUNDLE_REVISION_ID
REQUIRER_BUNDLE_ID
REQUIRER_BUNDLE_REVISION_ID
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.BUNDLE_WIRES_TYPE_ARRAY?>
<?FM MARKER [Index] BundleWiringStateMBean:BUNDLE_WIRES_TYPE_ARRAY?>
<?FM MARKER [Index] BUNDLE_WIRES_TYPE_ARRAY?>
BUNDLE_WIRES_TYPE_ARRAY
public static final ArrayType BUNDLE_WIRES_TYPE_ARRAY
An array of BUNDLE_WIRE_TYPEs. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.BUNDLE_WIRING_TYPE?>
<?FM MARKER [Index] BundleWiringStateMBean:BUNDLE_WIRING_TYPE?>
<?FM MARKER [Index] BUNDLE_WIRING_TYPE?>
BUNDLE_WIRING_TYPE
public static final CompositeType BUNDLE_WIRING_TYPE
The Composite Type that represents a bundle wiring. The composite
consists of: 
BUNDLE_ID
BUNDLE_REVISION_ID
REQUIREMENTS
CAPABILITIES
REQUIRED_WIRES
PROVIDED_WIRES
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.BUNDLES_WIRING_TYPE?>
<?FM MARKER [Index] BundleWiringStateMBean:BUNDLES_WIRING_TYPE?>
<?FM MARKER [Index] BUNDLES_WIRING_TYPE?>
BUNDLES_WIRING_TYPE
public static final TabularType BUNDLES_WIRING_TYPE
The Tabular Type to hold the wiring of a number of bundles. The
row type is BUNDLE_WIRING_TYPE and the index is the combination
of the BUNDLE_ID and the BUNDLE_REVISION_ID. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.CAPABILITIES?>
<?FM MARKER [Index] BundleWiringStateMBean:CAPABILITIES?>
<?FM MARKER [Index] CAPABILITIES?>
CAPABILITIES
public static final String CAPABILITIES = “Capabilities”<?FM MARKER [Index] Capabilities?>

The key of CAPABILITIES_ITEM. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.CAPABILITIES_ITEM?>
<?FM MARKER [Index] BundleWiringStateMBean:CAPABILITIES_ITEM?>
<?FM MARKER [Index] CAPABILITIES_ITEM?>
CAPABILITIES_ITEM
public static final Item CAPABILITIES_ITEM
The item containing the capabilities in REVISION_CAPABILITIES_TYPE
and BUNDLE_WIRING_TYPE. The key is CAPABILITIES and the type is
CAPABILITY_TYPE_ARRAY. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.CAPABILITY_TYPE_ARRAY?>
<?FM MARKER [Index] BundleWiringStateMBean:CAPABILITY_TYPE_ARRAY?>
<?FM MARKER [Index] CAPABILITY_TYPE_ARRAY?>
CAPABILITY_TYPE_ARRAY
public static final ArrayType CAPABILITY_TYPE_ARRAY
An array of BUNDLE_CAPABILITY_TYPEs. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.DIRECTIVE_TYPE?>
<?FM MARKER [Index] BundleWiringStateMBean:DIRECTIVE_TYPE?>
<?FM MARKER [Index] DIRECTIVE_TYPE?>
DIRECTIVE_TYPE
public static final CompositeType DIRECTIVE_TYPE
The Composite Type that represents a directive for a capability
or requirement. The composite consists of: 
KEY
VALUE
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.DIRECTIVES?>
<?FM MARKER [Index] BundleWiringStateMBean:DIRECTIVES?>
<?FM MARKER [Index] DIRECTIVES?>
DIRECTIVES
public static final String DIRECTIVES = “Directives”<?FM MARKER [Index] Directives?>

The key of DIRECTIVES_ITEM. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.DIRECTIVES_ITEM?>
<?FM MARKER [Index] BundleWiringStateMBean:DIRECTIVES_ITEM?>
<?FM MARKER [Index] DIRECTIVES_ITEM?>
DIRECTIVES_ITEM
public static final Item DIRECTIVES_ITEM
The item containing the directives of a capability or requirement.
Used in BUNDLE_REQUIREMENT_TYPE and BUNDLE_CAPABILITY_TYPE. The
key is DIRECTIVES and the type is DIRECTIVES_TYPE. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.DIRECTIVES_TYPE?>
<?FM MARKER [Index] BundleWiringStateMBean:DIRECTIVES_TYPE?>
<?FM MARKER [Index] DIRECTIVES_TYPE?>
DIRECTIVES_TYPE
public static final TabularType DIRECTIVES_TYPE
The Tabular Type that holds the directives for a capability or requirement.
The row type is DIRECTIVE_TYPE and the index is KEY. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.KEY?>
<?FM MARKER [Index] BundleWiringStateMBean:KEY?>
<?FM MARKER [Index] KEY?>
KEY
public static final String KEY = “Key”<?FM MARKER [Index] Key?>

The key of KEY_ITEM. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.KEY_ITEM?>
<?FM MARKER [Index] BundleWiringStateMBean:KEY_ITEM?>
<?FM MARKER [Index] KEY_ITEM?>
KEY_ITEM
public static final Item KEY_ITEM
The item containing the key of a capability or requirement directive.
Used in DIRECTIVE_TYPE. The key is KEY and the type is a String. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.NAMESPACE?>
<?FM MARKER [Index] BundleWiringStateMBean:NAMESPACE?>
<?FM MARKER [Index] NAMESPACE?>
NAMESPACE
public static final String NAMESPACE = “Namespace”<?FM MARKER [Index] Namespace?>

The key of NAMESPACE_ITEM. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.NAMESPACE_ITEM?>
<?FM MARKER [Index] BundleWiringStateMBean:NAMESPACE_ITEM?>
<?FM MARKER [Index] NAMESPACE_ITEM?>
NAMESPACE_ITEM
public static final Item NAMESPACE_ITEM
The item containing the namespace for a capability or requirement.
Used in BUNDLE_REQUIREMENT_TYPE and BUNDLE_CAPABILITY_TYPE. The
key is NAMESPACE and the type is a String. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.OBJECTNAME?>
<?FM MARKER [Index] BundleWiringStateMBean:OBJECTNAME?>
<?FM MARKER [Index] OBJECTNAME?>
OBJECTNAME
public static final String OBJECTNAME = “osgi.core:type=wiringState,version=1.1”<?FM MARKER [Index] osgi.core:type=wiringState,version=1.1?>

The Object Name prefix for this mbean. The full object name also
contains the framework name and uuid as properties. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.PROVIDED_WIRES?>
<?FM MARKER [Index] BundleWiringStateMBean:PROVIDED_WIRES?>
<?FM MARKER [Index] PROVIDED_WIRES?>
PROVIDED_WIRES
public static final String PROVIDED_WIRES = “ProvidedWires”<?FM MARKER [Index] ProvidedWires?>

The key of PROVIDED_WIRES_ITEM. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.PROVIDED_WIRES_ITEM?>
<?FM MARKER [Index] BundleWiringStateMBean:PROVIDED_WIRES_ITEM?>
<?FM MARKER [Index] PROVIDED_WIRES_ITEM?>
PROVIDED_WIRES_ITEM
public static final Item PROVIDED_WIRES_ITEM
The item containing the provided wires in BUNDLE_WIRING_TYPE. The
key is PROVIDED_WIRES and the type is BUNDLE_WIRES_TYPE_ARRAY. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.PROVIDER_BUNDLE_ID?>
<?FM MARKER [Index] BundleWiringStateMBean:PROVIDER_BUNDLE_ID?>
<?FM MARKER [Index] PROVIDER_BUNDLE_ID?>
PROVIDER_BUNDLE_ID
public static final String PROVIDER_BUNDLE_ID = “ProviderBundleId”<?FM MARKER [Index] ProviderBundleId?>

The key of PROVIDER_BUNDLE_ID_ITEM. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.PROVIDER_BUNDLE_ID_ITEM?>
<?FM MARKER [Index] BundleWiringStateMBean:PROVIDER_BUNDLE_ID_ITEM?>
<?FM MARKER [Index] PROVIDER_BUNDLE_ID_ITEM?>
PROVIDER_BUNDLE_ID_ITEM
public static final Item PROVIDER_BUNDLE_ID_ITEM
The item containing the provider bundle ID in BUNDLE_WIRE_TYPE.
The key is PROVIDER_BUNDLE_ID and the type is a long. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.PROVIDER_BUNDLE_REVISION_ID?>
<?FM MARKER [Index] BundleWiringStateMBean:PROVIDER_BUNDLE_REVISION_ID?>
<?FM MARKER [Index] PROVIDER_BUNDLE_REVISION_ID?>
PROVIDER_BUNDLE_REVISION_ID
public static final String PROVIDER_BUNDLE_REVISION_ID = “ProviderBundleRevisionId”<?FM MARKER [Index] ProviderBundleRevisionId?>

The key of PROVIDER_BUNDLE_REVISION_ID_ITEM. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.PROVIDER_BUNDLE_REVISION_ID_ITEM?>
<?FM MARKER [Index] BundleWiringStateMBean:PROVIDER_BUNDLE_REVISION_ID_ITEM?>
<?FM MARKER [Index] PROVIDER_BUNDLE_REVISION_ID_ITEM?>
PROVIDER_BUNDLE_REVISION_ID_ITEM
public static final Item PROVIDER_BUNDLE_REVISION_ID_ITEM
The local ID of a provider revision in BUNDLE_WIRE_TYPE. This ID
is local to the result where it resides and has no defined meaning
across multiple invocations. The key is PROVIDER_BUNDLE_REVISION_ID
and the type is an int. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.REQUIRED_WIRES?>
<?FM MARKER [Index] BundleWiringStateMBean:REQUIRED_WIRES?>
<?FM MARKER [Index] REQUIRED_WIRES?>
REQUIRED_WIRES
public static final String REQUIRED_WIRES = “RequiredWires”<?FM MARKER [Index] RequiredWires?>

The key of REQUIRED_WIRES_ITEM. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.REQUIRED_WIRES_ITEM?>
<?FM MARKER [Index] BundleWiringStateMBean:REQUIRED_WIRES_ITEM?>
<?FM MARKER [Index] REQUIRED_WIRES_ITEM?>
REQUIRED_WIRES_ITEM
public static final Item REQUIRED_WIRES_ITEM
The item containing the required wires in BUNDLE_WIRING_TYPE. The
key is REQUIRED_WIRES and the type is BUNDLE_WIRES_TYPE_ARRAY. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.REQUIREMENT_TYPE_ARRAY?>
<?FM MARKER [Index] BundleWiringStateMBean:REQUIREMENT_TYPE_ARRAY?>
<?FM MARKER [Index] REQUIREMENT_TYPE_ARRAY?>
REQUIREMENT_TYPE_ARRAY
public static final ArrayType REQUIREMENT_TYPE_ARRAY
An array of BUNDLE_REQUIREMENT_TYPEs. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.REQUIREMENTS?>
<?FM MARKER [Index] BundleWiringStateMBean:REQUIREMENTS?>
<?FM MARKER [Index] REQUIREMENTS?>
REQUIREMENTS
public static final String REQUIREMENTS = “Requirements”<?FM MARKER [Index] Requirements?>

The key of REQUIREMENTS_ITEM. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.REQUIREMENTS_ITEM?>
<?FM MARKER [Index] BundleWiringStateMBean:REQUIREMENTS_ITEM?>
<?FM MARKER [Index] REQUIREMENTS_ITEM?>
REQUIREMENTS_ITEM
public static final Item REQUIREMENTS_ITEM
The item containing the requirements in REVISION_REQUIREMENTS_TYPE
and BUNDLE_WIRING_TYPE. The key is REQUIREMENTS and the type is
REQUIREMENT_TYPE_ARRAY. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.REQUIRER_BUNDLE_ID?>
<?FM MARKER [Index] BundleWiringStateMBean:REQUIRER_BUNDLE_ID?>
<?FM MARKER [Index] REQUIRER_BUNDLE_ID?>
REQUIRER_BUNDLE_ID
public static final String REQUIRER_BUNDLE_ID = “RequirerBundleId”<?FM MARKER [Index] RequirerBundleId?>

The key of REQUIRER_BUNDLE_ID_ITEM. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.REQUIRER_BUNDLE_ID_ITEM?>
<?FM MARKER [Index] BundleWiringStateMBean:REQUIRER_BUNDLE_ID_ITEM?>
<?FM MARKER [Index] REQUIRER_BUNDLE_ID_ITEM?>
REQUIRER_BUNDLE_ID_ITEM
public static final Item REQUIRER_BUNDLE_ID_ITEM
The item containing the requirer bundle ID in BUNDLE_WIRE_TYPE.
The key is REQUIRER_BUNDLE_ID and the type is long. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.REQUIRER_BUNDLE_REVISION_ID?>
<?FM MARKER [Index] BundleWiringStateMBean:REQUIRER_BUNDLE_REVISION_ID?>
<?FM MARKER [Index] REQUIRER_BUNDLE_REVISION_ID?>
REQUIRER_BUNDLE_REVISION_ID
public static final String REQUIRER_BUNDLE_REVISION_ID = “RequirerBundleRevisionId”<?FM MARKER [Index] RequirerBundleRevisionId?>

The key of REQUIRER_BUNDLE_REVISION_ID_ITEM. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.REQUIRER_BUNDLE_REVISION_ID_ITEM?>
<?FM MARKER [Index] BundleWiringStateMBean:REQUIRER_BUNDLE_REVISION_ID_ITEM?>
<?FM MARKER [Index] REQUIRER_BUNDLE_REVISION_ID_ITEM?>
REQUIRER_BUNDLE_REVISION_ID_ITEM
public static final Item REQUIRER_BUNDLE_REVISION_ID_ITEM
The local ID of a requirer revision in BUNDLE_WIRE_TYPE. This ID
is local to the result where it resides and has no defined meaning
across multiple invocations. The key is REQUIRER_BUNDLE_REVISION_ID
and the type is an int. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.REVISION_CAPABILITIES_TYPE?>
<?FM MARKER [Index] BundleWiringStateMBean:REVISION_CAPABILITIES_TYPE?>
<?FM MARKER [Index] REVISION_CAPABILITIES_TYPE?>
REVISION_CAPABILITIES_TYPE
public static final CompositeType REVISION_CAPABILITIES_TYPE
The Composite Type that represents the capabilities for a revision.
The composite consists of: 
BUNDLE_REVISION_ID
CAPABILITIES
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.REVISION_REQUIREMENTS_TYPE?>
<?FM MARKER [Index] BundleWiringStateMBean:REVISION_REQUIREMENTS_TYPE?>
<?FM MARKER [Index] REVISION_REQUIREMENTS_TYPE?>
REVISION_REQUIREMENTS_TYPE
public static final CompositeType REVISION_REQUIREMENTS_TYPE
The Composite Type that represents the requirements of a revision.
The composite consists of: 
BUNDLE_REVISION_ID
REQUIREMENTS
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.REVISIONS_CAPABILITIES_TYPE?>
<?FM MARKER [Index] BundleWiringStateMBean:REVISIONS_CAPABILITIES_TYPE?>
<?FM MARKER [Index] REVISIONS_CAPABILITIES_TYPE?>
REVISIONS_CAPABILITIES_TYPE
public static final TabularType REVISIONS_CAPABILITIES_TYPE
The Tabular Type that holds the capabilities of a revision. The
row type is REVISION_CAPABILITIES_TYPE and the index is BUNDLE_REVISION_ID. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.REVISIONS_REQUIREMENTS_TYPE?>
<?FM MARKER [Index] BundleWiringStateMBean:REVISIONS_REQUIREMENTS_TYPE?>
<?FM MARKER [Index] REVISIONS_REQUIREMENTS_TYPE?>
REVISIONS_REQUIREMENTS_TYPE
public static final TabularType REVISIONS_REQUIREMENTS_TYPE
The Tabular Type that hold the requirements of a revision. The row
type is REVISION_REQUIREMENTS_TYPE and the index is BUNDLE_REVISION_ID. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.VALUE?>
<?FM MARKER [Index] BundleWiringStateMBean:VALUE?>
<?FM MARKER [Index] VALUE?>
VALUE
public static final String VALUE = “Value”<?FM MARKER [Index] Value?>

The key of VALUE. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.VALUE_ITEM?>
<?FM MARKER [Index] BundleWiringStateMBean:VALUE_ITEM?>
<?FM MARKER [Index] VALUE_ITEM?>
VALUE_ITEM
public static final Item VALUE_ITEM
The item containing the value of a capability or requirement directive.
Used in DIRECTIVE_TYPE. They key is VALUE and the type is a String. 
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.getCurrentRevisionDeclaredCapabilities(long,String)?>
<?FM MARKER [Index] BundleWiringStateMBean:getCurrentRevisionDeclaredCapabilities?>
<?FM MARKER [Index] getCurrentRevisionDeclaredCapabilities?>
getCurrentRevisionDeclaredCapabilities(long,String)
public CompositeData[] getCurrentRevisionDeclaredCapabilities (
long bundleId , String namespace )  throws IOException , JMException
	bundleId	The bundle ID.
	namespace	The namespace of the capabilities to be returned by this
operation.
	
Returns the capabilities for the current bundle revision. 
	Returns	the declared capabilities for the current revision of bundleId
and namespace.
	Throws	JMException –  if there is a JMX problem. 
		IOException –  if the connection could not be made because of
a communication problem. 
	See Also	for the details of the CompositeData.
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.getCurrentRevisionDeclaredRequirements(long,String)?>
<?FM MARKER [Index] BundleWiringStateMBean:getCurrentRevisionDeclaredRequirements?>
<?FM MARKER [Index] getCurrentRevisionDeclaredRequirements?>
getCurrentRevisionDeclaredRequirements(long,String)
public CompositeData[] getCurrentRevisionDeclaredRequirements (
long bundleId , String namespace )  throws IOException , JMException
	bundleId	The bundle ID.
	namespace	The namespace of the requirements to be returned by this
operation.
	
Returns the requirements for the current bundle revision. 
	Returns	the declared requirements for the current revision of bundleId
and namespace.
	Throws	JMException –  if there is a JMX problem. 
		IOException –  if the connection could not be made because of
a communication problem. 
	See Also	for the details of the CompositeData.
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.getCurrentWiring(long,String)?>
<?FM MARKER [Index] BundleWiringStateMBean:getCurrentWiring?>
<?FM MARKER [Index] getCurrentWiring?>
getCurrentWiring(long,String)
public CompositeData getCurrentWiring ( long bundleId , String namespace
) throws IOException , JMException
	bundleId	The bundle ID.
	namespace	The namespace of the requirements and capabilities for
which to return information.
	
Returns the bundle wiring for the current bundle revision. 
	Returns	the wiring information for the current revision of bundleId
and namespace.
	Throws	JMException –  if there is a JMX problem. 
		IOException –  if the connection could not be made because of
a communication problem. 
	See Also	for the details of the CompositeData.
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.getCurrentWiringClosure(long,String)?>
<?FM MARKER [Index] BundleWiringStateMBean:getCurrentWiringClosure?>
<?FM MARKER [Index] getCurrentWiringClosure?>
getCurrentWiringClosure(long,String)
public TabularData getCurrentWiringClosure ( long rootBundleId ,
String namespace ) throws IOException , JMException
	rootBundleId	the root bundle of the closure.
	namespace	The namespace of the requirements and capabilities for
which to return information.
	
Returns the bundle wiring closure for the current revision of the
specified bundle. The wiring closure contains all the wirings from
the root bundle revision to all bundle revisions it is wired to
and all their transitive wirings. 
	Returns	a tabular representation of all the wirings in the closure.
The bundle revision IDs only have meaning in the context of the
current result. The revision of the rootBundle is set to 0. Therefore
the root bundle of the closure can be looked up in the table by
its bundle ID and revision 0.
	Throws	JMException –  if there is a JMX problem. 
		IOException –  if the connection could not be made because of
a communication problem. 
	See Also	for the details of the TabularData.
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.getRevisionsDeclaredCapabilities(long,String)?>
<?FM MARKER [Index] BundleWiringStateMBean:getRevisionsDeclaredCapabilities?>
<?FM MARKER [Index] getRevisionsDeclaredCapabilities?>
getRevisionsDeclaredCapabilities(long,String)
public TabularData getRevisionsDeclaredCapabilities ( long bundleId
, String namespace ) throws IOException , JMException
	bundleId	The bundle ID.
	namespace	The namespace of the capabilities to be returned by this
operation.
	
Returns the capabilities for all revisions of the bundle. 
	Returns	the declared capabilities for all revisions of bundleId
	Throws	JMException –  if there is a JMX problem. 
		IOException –  if the connection could not be made because of
a communication problem. 
	See Also	for the details of TabularData.  The capabilities are
in no particular order, and may change in subsequent calls to this
operation.
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.getRevisionsDeclaredRequirements(long,String)?>
<?FM MARKER [Index] BundleWiringStateMBean:getRevisionsDeclaredRequirements?>
<?FM MARKER [Index] getRevisionsDeclaredRequirements?>
getRevisionsDeclaredRequirements(long,String)
public TabularData getRevisionsDeclaredRequirements ( long bundleId
, String namespace ) throws IOException , JMException
	bundleId	The bundle ID.
	namespace	The namespace of the requirements to be returned by this
operation.
	
Returns the requirements for all revisions of the bundle. 
	Returns	the declared requirements for all revisions of bundleId.
	Throws	JMException –  if there is a JMX problem. 
		IOException –  if the connection could not be made because of
a communication problem. 
	See Also	for the details of TabularData.  The requirements are
in no particular order, and may change in subsequent calls to this
operation.
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.getRevisionsWiring(long,String)?>
<?FM MARKER [Index] BundleWiringStateMBean:getRevisionsWiring?>
<?FM MARKER [Index] getRevisionsWiring?>
getRevisionsWiring(long,String)
public TabularData getRevisionsWiring ( long bundleId , String namespace
) throws IOException , JMException
	bundleId	The bundle ID.
	namespace	The namespace of the requirements and capabilities for
which to return information.
	
Returns the bundle wirings for all revisions of the bundle. 
	Returns	the wiring information for all revisions of bundleId and
namespace.
	Throws	JMException –  if there is a JMX problem. 
		IOException –  if the connection could not be made because of
a communication problem. 
	See Also	for the details of TabularData.  The bundle wirings are
in no particular order, and may change in subsequent calls to this
operations.
<?FM MARKER [Cross-Ref] BundleWiringStateMBean.getRevisionsWiringClosure(long,String)?>
<?FM MARKER [Index] BundleWiringStateMBean:getRevisionsWiringClosure?>
<?FM MARKER [Index] getRevisionsWiringClosure?>
getRevisionsWiringClosure(long,String)
public TabularData getRevisionsWiringClosure ( long rootBundleId
, String namespace ) throws IOException , JMException
	rootBundleId	The root bundle ID.
	namespace	The namespace of the requirements and capabilities for
which to return information.
	
Returns the bundle wiring closure for all revisions of the specified
bundle. The wiring closure contains all the wirings from the root
bundle revision to all bundle revisions it is wired to and all their transitive
wirings. 
	Returns	a tabular representation of all the wirings in the closure.
The bundle revision IDs only have meaning in the context of the
current result.
	Throws	JMException –  if there is a JMX problem. 
		IOException –  if the connection could not be made because of
a communication problem. 
	See Also	for the details of TabularData.  The bundle wirings are
in no particular order, and may change in subsequent calls to this
operation. Furthermore, the bundle revision IDs are local and cannot
be reused across invocations.

</INSET>
<section><title>References</title>
<para role="ExternalReference">JMX</para>
<para role="ExternalReferenceCont">http://en.wikipedia.org/wiki/JMX</para>
<para role="ExternalReference">Java Management Extensions (JMX)
Technology Overview </para>
<para role="ExternalReferenceCont">http://docs.oracle.com/javase/1.5.0/docs/guide/jmx/overview/JMXoverviewTOC.html</para>
<para role="ExternalReference" xml:id="i3067363">
JSR
3: Java Management Extensions (JMX) Specification</para>
<para role="ExternalReferenceCont">http://www.jcp.org/en/jsr/detailid=3</para>
<para role="ExternalReference">JSR 255: Java Management Extensions
(JMX) Specification, version 2.0</para>
<para role="ExternalReferenceCont">http://www.jcp.org/en/jsr/detailid=255</para>
<para role="ExternalReference">JSR 160: JavaTM Management Extensions
(JMX) Remote API</para>
<para role="ExternalReferenceCont">http://www.jcp.org/en/jsr/detailid=160</para>
<para role="ExternalReference">JSR 262: Web Services Connector
for Java Management Extensions (JMX) Agents</para>
<para role="ExternalReferenceCont">http://www.jcp.org/en/jsr/detailid=262</para>
<para role="ExternalReference">JavaTM Management Extensions (JMXTM)API
Specification </para>
<para role="ExternalReferenceCont">http://docs.oracle.com/javase/1.5.0/docs/guide/jmx/spec.html </para>
<para role="ExternalReference" xml:id="i3160796">
Using
JConsole to Monitor Applications </para>
<para role="ExternalReferenceCont">http://java.sun.com/developer/technicalArticles/J2SE/jconsole.html </para></section
</chapter>
