<?xml version="1.0" encoding="utf-8"?><chapter xmlns="http://docbook.org/ns/docbook" version="5"><title>Introduction</title>
<para>The OSGi Enterprise Expert Group (EEG) is chartered to define
the technical requirements and specifications to tailor and extend
the OSGi framework to address information technology software infrastructure
use cases found in enterprise scenarios.</para>
<para>The EEG technical areas of concern include:</para>
<itemizedlist><listitem><para>Scaling, including multi-container
and multi-process environments</para></listitem>
<listitem><para>Distributed and/or federated service model for:</para>
<itemizedlist><listitem><para>Multiple OSGi frameworks </para></listitem>
<listitem><para>External, heterogeneous systems</para></listitem></itemizedlist></listitem>
<listitem><para>Requirements for extensions to the OSGi publish/find/bind
service model</para></listitem>
<listitem><para>Enterprise-class life cycle and configuration management</para></listitem>
<listitem><para>Integration of established Java EE technology into
OSGi</para></listitem></itemizedlist>
<para>This specification is based on 
<phrase role="xref">
<xref xrefstyle="HeadingOnly" linkend="i449862"/></phrase>
. The specification combines previously published, as well as new,
OSGi services that address the common use cases of enterprise application
and application server developers. It serves as a first reference
point for the suggested audience when considering the use of OSGi
in their environment to fulfill their own needs or to better serve
the needs of their customers. This collection of services is taken
from the complete set of available specifications and narrowed down
to what can be relevant to the enterprise domain.</para>
<para>The services of the Enterprise Specification have been designed
to integrate with OSGi and cooperate with each other. None of the
listed service specifications is mandatory; all service specifications
are optional. However, services provided must follow their specification
completely. </para>
<para>It is not suggested, or expected, that an enterprise solution
will incorporate support for all listed specifications, instead
a customized subset to satisfy the requirements at hand is recommended.
A solution can further include other core and compendium services
that are not listed as part of the Enterprise Specification. The
selection of appropriate services should be driven by requirements
and use cases. </para>
<para>The Enterprise Specification includes the recommended specifications
for a number of areas. The services of the Enterprise Specification
have been designed to guarantee integration with OSGi and cooperation
among each other. Since the last release, the specifications have
been expanded with support for Application deployment through the
Subsystems specification, Provisioning with the Repository and Resolver,
and integration with the JavaSE Service Loader mechanism. Together
they address more use-cases found in the enterprise context and
provide a powerful set of tools to build enterprise OSGi deployments.</para>
<para>These Enterprise Specification areas are described in the
following sections.</para>
<section><title>Overview of Services</title>
<section><title>Component Models</title>
<para>While the OSGi framework API is relatively simple to use,
it is still considered infrastructure that can bleed into the application
code of a bundle. This Enterprise Specification therefore provides
multiple, interoperable, Dependency Injection based component models.
These DI models ensure decoupling of the application code from the
OSGi APIs; they provide an OSGi bundle programming model with minimal
implementation dependencies and virtually no accidental complexity
in the Java code. Both models provide support for handling the life
cycle of services, albeit in different ways. These component models
are the Declarative Services Specification and the Blueprint Container
Specification:</para>
<itemizedlist><listitem><para><emphasis>Declarative Services Specification</emphasis> –
The Declarative Services specification provides dependency injection
for services. It handles the service life cycle dynamics by notifying
the component or managing the component’s life cycle. See chapter 
<phrase role="xref">112 Declarative Services Specification</phrase>
.</para></listitem>
<listitem><para><emphasis>Blueprint Container Specification</emphasis> –
The Blueprint Container is derived from the Spring Dynamic Module
project. It provides a general DI framework; services are supported
by proxying them and damping their life cycle. See chapter 
<phrase role="xref">121 Blueprint Container Specification</phrase>
.</para></listitem></itemizedlist></section>
<section><title>Distributed Services</title>
<para>The OSGi framework provides a local service registry for bundles
to communicate through service objects, where a service is an object
that one bundle registers and another bundle looks up. The Enterprise
Specification enhances this model by defining endpoints that represent
services hosted in a remote systems. It allows for seamless access
to remote services within the OSGi framework without changing the
service layer. The remote system may or may not be based on OSGi.</para>
<para>The Enterprise Specification includes the specifications of:</para>
<itemizedlist><listitem><para><emphasis>Remote Services</emphasis> -
The Remote Services specification defines a number of service properties
that participating bundles can use to convey information to a distribution
provider.The distribution provider creates endpoints that are accessible
to remote clients or registers proxies that access services hosted external
to the OSGi framework. See chapter 
<phrase role="xref">100 Remote Services</phrase>
.</para></listitem>
<listitem><para><emphasis>Remote Service Admin Specification</emphasis> -
The Remote Services Admin Service Specification defines an API for
the distribution provider and discovery of services in a network.
A management agent can use this API to provide an actual distribution
policy. This management agent can export and import services as
well as discovering services in the network. See 
<phrase role="xref">122 Remote Service Admin Service Specification</phrase>
.</para></listitem>
<listitem><para><emphasis>SCA Configuration Type</emphasis> – Distribution
providers support a number of communication protocols configured
by specific configuration types. The SCA Remote Services Configuration
Specification defines such a configuration type. See 
<phrase role="xref">129 SCA Configuration Type Specification</phrase>
.</para></listitem></itemizedlist></section>
<section><title>Web Applications and HTTP Servlets</title>
<para>Current Java EE architectures almost always require support
for web technologies in the form of Java Servlets or Web Applications.
The Enterprise Specification includes two complementary service specifications
in support:</para>
<itemizedlist><listitem><para><emphasis>Web Application Specification</emphasis> -
The Web Application specification provides support for web applications
written to the Servlet 2.5 specification as well as the JSP 2.1
specification. This specification details how web applications packaged
as a WAR or as bundles (WABs) can be installed into an OSGi framework,
as well as how this application can use OSGi services. See 
<phrase role="xref">128 Web Applications Specification</phrase>
.</para></listitem>
<listitem><para><emphasis>Http Service Specification</emphasis> -
Bundle developers typically need to develop communication and user
interface solutions for standard technologies such as HTTP, HTML,
XML, and servlets. The Http Service supports two standard techniques
for this purpose: registering servlets and registering resources.
See 
<phrase role="xref">102 Http Service Specification</phrase>
.</para></listitem></itemizedlist></section>
<section><title>Event models</title>
<para>The OSGi service model is based on synchronous APIs. Support
for asynchronous invocations and event driven interactions usually
involves the definition of listeners. However, this model does not scale
well for fine grained events that must be dispatched to many different
handlers. The Enterprise Specification therefore contains the:</para>
<itemizedlist><listitem><para><emphasis>Event Admin Service Specification</emphasis> -
The Event Admin service provides an inter-bundle communication mechanism.
It is based on a event publish and subscribe model, popular in many
message based systems. See 
<phrase role="xref">113 Event Admin Service Specification</phrase>
.</para></listitem></itemizedlist></section>
<section><title>Management and Configuration services</title>
<para>Support for managing the servers and their applications is
essential to all enterprise systems. The Enterprise Specification
includes several services addressing the need to manage the framework
from the outside as well as configuring individual bundles and applications
from within the OSGi framework.</para>
<itemizedlist><listitem><para><emphasis>JMX™ Management Model Specification</emphasis> -
The Java Management Extensions (JMX) is the standard API specification
for providing a management interface to Java SE and Java EE applications.
The JMX Management Model specification provides an MBean interface
adaptation of the existing OSGi framework artifacts; these can then
be used to expose an OSGi Framework manipulation API over JMX. See 
<phrase role="xref">124 JMX™ Management Model Specification</phrase>
.</para></listitem>
<listitem><para><emphasis>User Admin Service Specification</emphasis> –
The User Admin Service Specification provides authorization for OSGi
framework actions based on authenticated users, instead of using
the Java code-based permission model. See 
<phrase role="xref">107 User Admin Service Specification</phrase>
.</para></listitem>
<listitem><para><emphasis>Initial Provisioning Specification</emphasis> -
This specification defines how the Management Agent can make its way
into the OSGi framework, and gives a structured view of the problems
and their corresponding resolution methods. The purpose of this
specification is to enable the management of a OSGi framework by
an operator, and (optionally) to hand over the management of the
OSGi framework later to another operator. See 
<phrase role="xref">110 Initial Provisioning Specification</phrase>
.</para></listitem>
<listitem><para><emphasis>Configuration Admin Service Specification</emphasis> -
The Configuration Admin service allows an operator to set the configuration
information of bundles. See 
<phrase role="xref">104 Configuration Admin Service Specification</phrase>
.</para></listitem>
<listitem><para><emphasis>Metatype Service Specification</emphasis> -
The Metatype specification defines interfaces that allow bundle
developers to describe attribute types in a computer readable form
using metadata. It is mostly used in conjunction with the Configuration
Admin Service. See 
<phrase role="xref">105 Metatype Service Specification</phrase>
.</para></listitem></itemizedlist></section>
<section><title>Naming and Directory services</title>
<para>Naming and directory services are well established and useful
tools in enterprise applications. The Enterprise Specification includes
the:</para>
<itemizedlist><listitem><para><emphasis>JNDI Services Specification</emphasis> –
The Java Naming and Directory Interface (JNDI) is a registry technology in
Java applications, both in the Java SE and Java EE space. JNDI provides
a vendor-neutral set of APIs that allow clients to interact with
a naming service. See 
<phrase role="xref">126 JNDI Services Specification</phrase>
.</para></listitem></itemizedlist></section>
<section><title>Database Access</title>
<para>There are multiple approaches available to model and persist
data in databases. The Enterprise Specification includes support
for the common technologies:</para>
<itemizedlist><listitem><para><emphasis>JDBC™ Service Specification</emphasis> –
provides an API for applications to interact with relational database
systems from different vendors. See 
<phrase role="xref">125 JDBC™ Service Specification</phrase>
.</para></listitem>
<listitem><para><emphasis>JPA Service Specification</emphasis> –
The Java Persistence API (JPA) is a specification that sets a standard
for persistence in enterprise and non-enterprise JRE™-based environments.
The JPA Service Specification defines how bundles may access and
use JPA persistence units in applications, as well as how a JPA implementation
can become available and be invoked within an OSGi framework. See 
<phrase role="xref">127 JPA Service Specification</phrase>
.</para></listitem></itemizedlist></section>
<section><title>Transaction Support</title>
<para>The support for transactions in Java is well defined outside
of the OSGi specification. The Enterprise Specification includes
the:</para>
<itemizedlist><listitem><para><emphasis>JTA Transaction Services
Specification</emphasis> – This specification provides the User
Transaction, Transaction Manager, and Synchronization Registry services,
which are based on their counterparts in the Java EE™ JTA Specifications.
These services can be used to demarcate transaction boundaries,
enlists durable and volatile resources, and provides transactional
aware code to influence the outcome of a transaction and synchronize
with the ending of a transaction. See 
<phrase role="xref">123 JTA Transaction Services Specification</phrase>
.</para></listitem></itemizedlist></section>
<section><title>Miscellaneous Supporting Services</title>
<para>Services providing solutions to common infrastructure requirements
include:</para>
<itemizedlist><listitem><para><emphasis>Log Service Specification</emphasis> –
Provides a general purpose message logger for the OSGi framework.
See 
<phrase role="xref">101 Log Service Specification</phrase>
.</para></listitem>
<listitem><para><emphasis>XML Parser Service Specification</emphasis> –
Addresses how the classes defined in JAXP can be used in an OSGi framework.
See 
<phrase role="xref">702 XML Parser Service Specification</phrase>
.</para></listitem>
<listitem><para><emphasis>Service Loader Mediator Specification</emphasis> –
Addresses common problems of bundles that rely on the JRE provided
Service Loader API to load custom Service Provider Implementations.
This specification describes how to use the service registry for
lookup of Service Providers as well as a solution for existing code
to continue functioning using Service Loader API in a OSGi environment.
See 
<phrase role="xref">133 Service Loader Mediator Specification</phrase>
.</para></listitem>
<listitem><para><emphasis>Coordinator Specification</emphasis> –
The Coordinator service provides a mechanism for multiple parties
to collaborate on a common task without a priori knowledge of who
will collaborate in that task. The service provides a rendezvous
for an initiator to create a Coordination where collaborators can
decide to participate. When the Coordination is ended, all participants
are informed. See 
<phrase role="xref">130 Coordinator Service Specification</phrase>
.</para></listitem></itemizedlist></section></section>
<section><title>Application and Provisioning Support</title>
<para>The support for applications in OSGi environments has long
been missing. The term ‘application’ may mean different things to
different people, therefore, rather than defining what an application
is, the OSGi specification provides a set of enabling services and
specifications to aid in the definition, composition, deployment,
and governance of a group of bundles and resources in an OSGi environment.
The specifications are essential building blocks and provide from
low level resolution to higher level composition abstractions that
a management agent can use to build the necessary tools for managing
OSGi applications.</para>
<itemizedlist><listitem><para><emphasis>Resolver Hook Service Specification</emphasis> -
An enabling technology defined by the Core Specification for OSGi frameworks
to support isolation of bundles.</para></listitem>
<listitem><para><emphasis>Resolver Specification</emphasis> - A
service that can be the base for provisioning, deployment, build,
and diagnostic tooling. Based on the generic Requirement/Capability
model from the Core Specification a management agent can use the
Resolver service to compute the set of necessary resources needed
to satisfy the given set of requirements. These requirements could
represent the dependencies of a core set of bundles that need to
be deployed. While the framework already hosts a Resolver for Bundle
wiring, this specification makes a generic Resolver available as
a service to resolve dependencies on resources beyond Bundle wiring.
See 
<phrase role="xref">136 Resolver Service Specification</phrase>
.</para></listitem>
<listitem><para><emphasis>Repository Specification</emphasis> -
The Repository specification provides a standard API to access (possibly remote)
repositories. Resources can be obtained from the repository by specifying
declarative requirements, which might include for example ‘provide
all resources that export a given package’ or ‘provide the bundle
with the given symbolic name and version’, but can also be used
with any other generic capabilities. While the Repository API can
be used on its own, in conjunction with the Resolver Specification
it provides the capability to manage retrieval of external resources
during the resolution process. Typically one or multiple repositories
provide the metadata for the Resolver service to draw the resolution
from. A management agent can then use the repositories to apply
the result of the resolution. See 
<phrase role="xref">132 Repository Service Specification</phrase>
.</para></listitem>
<listitem><para> <emphasis>Subsystems Specification</emphasis> -
The core framework defines the life cycle of bundles and their relationships, but
it is missing the ability to define a common life cycle and scoping
rules for a set of bundles that are conceptually tied together.
The Subsystems Specification provides the ability not only to group multiple
bundles into a single manageable entity, but furthermore include
arbitrary resources in this grouping. This allows for complete isolation
as well as various sharing models of code, services, and resources
through a management agent. See 
<phrase role="xref">134 Subsystem Service Specification</phrase>
.</para></listitem></itemizedlist></section>
<section><title>Reader Level</title>
<para>This specification is written for the following audiences:</para>
<itemizedlist><listitem><para>Application developers</para></listitem>
<listitem><para>Framework and system service developers (system
developers)</para></listitem>
<listitem><para>Architects</para></listitem></itemizedlist>
<para>This specification assumes that the reader has at least one
year of practical experience in writing Java programs. Experience
with enterprise systems and server-environments is a plus. Application
developers must be aware that the OSGi environment is significantly
more dynamic than traditional desktop or server environments.</para>
<para>System developers require a very deep understanding of Java.
At least three years of Java coding experience in a system environment
is recommended. A Framework implementation will use areas of Java
that are not normally encountered in traditional applications. Detailed
understanding is required of class loaders, garbage collection,
Java 2 security, and Java native library loading.</para>
<para>Architects should focus on the introduction of each subject.
This introduction contains a general overview of the subject, the
requirements that influenced its design, and a short description
of its operation as well as the entities that are used. The introductory
sections require knowledge of Java concepts like classes and interfaces,
but should not require coding experience.</para>
<para>Most of these specifications are equally applicable to application
developers and system developers.</para></section>
<section><title>Version Information</title>
<para>This document is the Enterprise Specification for the OSGi
Enterprise Release 5. </para>
<section xml:id="i449862"><title>
OSGi Core Release
5</title>
<para>This specification is based on the OSGi Core Release 5. This
specification can be downloaded from:</para>
<programlisting>http://www.osgi.org/Release5</programlisting></section>
<section><title>Component Versions</title>
<para>Components in this specification have their own specification
version, independent of this specification. The following table
summarizes the packages and specification versions for the different
subjects. </para><table><title>
Packages
and versions</title><tgroup cols="3"><thead><row><entry>Item</entry><entry>Package(s)</entry><entry>Version</entry></row></thead><tbody><row><entry><code><phrase role="xref">100 Remote Services</phrase></code></entry><entry><code>-</code></entry><entry><code><phrase role="xref">Version 1.0</phrase></code></entry></row><row><entry><code><phrase role="xref">101 Log Service Specification</phrase></code></entry><entry><code>org.osgi.service.log</code></entry><entry><code><phrase role="xref">Version 1.3</phrase></code></entry></row><row><entry><code><phrase role="xref">102 Http Service Specification</phrase></code></entry><entry><code>org.osgi.service.http</code></entry><entry><code><phrase role="xref">Version 1.2</phrase></code></entry></row><row><entry><code><phrase role="xref">104 Configuration Admin Service
Specification</phrase></code></entry><entry><code>org.osgi.service.cm</code></entry><entry><code><phrase role="xref">Version 1.5</phrase></code></entry></row><row><entry><code><phrase role="xref">105 Metatype Service Specification</phrase></code></entry><entry><code>org.osgi.service.metatype</code></entry><entry><code><phrase role="xref">Version 1.2</phrase></code></entry></row><row><entry><code><phrase role="xref">107 User Admin Service Specification</phrase></code></entry><entry><code>org.osgi.service.useradmin</code></entry><entry><code><phrase role="xref">Version 1.1</phrase></code></entry></row><row><entry><code><phrase role="xref">110 Initial Provisioning Specification</phrase></code></entry><entry><code>org.osgi.service.provisioning</code></entry><entry><code><phrase role="xref">Version 1.2</phrase></code></entry></row><row><entry><code><phrase role="xref">112 Declarative Services Specification</phrase></code></entry><entry><code>org.osgi.service.component</code></entry><entry><code><phrase role="xref">Version 1.2</phrase></code></entry></row><row><entry><code><phrase role="xref">113 Event Admin Service Specification</phrase></code></entry><entry><code>org.osgi.service.event</code></entry><entry><code><phrase role="xref">Version 1.3</phrase></code></entry></row><row><entry><code><phrase role="xref">121 Blueprint Container Specification</phrase></code></entry><entry><code>org.osgi.blueprint.container</code>
<code>org.osgi.blueprint.reflect</code></entry><entry><code><phrase role="xref">Version 1.0</phrase></code></entry></row><row><entry><code><phrase role="xref">122 Remote Service Admin Service
Specification</phrase></code></entry><entry><code>org.osgi.service.remoteserviceadmin</code></entry><entry><code><phrase role="xref">Version 1.0</phrase></code></entry></row><row><entry><code><phrase role="xref">123 JTA Transaction Services
Specification</phrase></code></entry><entry><code>-</code></entry><entry><code><phrase role="xref">Version 1.0</phrase></code></entry></row><row><entry><code><phrase role="xref">124 JMX™ Management Model Specification</phrase></code></entry><entry><code>org.osgi.jmx<superscript>1</superscript></code></entry><entry><code><phrase role="xref">Version 1.1</phrase></code></entry></row><row><entry><code><phrase role="xref">125 JDBC™ Service Specification</phrase></code></entry><entry><code>org.osgi.service.jdbc</code></entry><entry><code><phrase role="xref">Version 1.0</phrase></code></entry></row><row><entry><code><phrase role="xref">126 JNDI Services Specification</phrase></code></entry><entry><code>org.osgi.service.jndi</code></entry><entry><code><phrase role="xref">Version 1.0</phrase></code></entry></row><row><entry><code><phrase role="xref">127 JPA Service Specification</phrase></code></entry><entry><code>org.osgi.service.jpa</code></entry><entry><code><phrase role="xref">Version 1.0</phrase></code></entry></row><row><entry><code><phrase role="xref">128 Web Applications Specification</phrase></code></entry><entry><code>-</code></entry><entry><code><phrase role="xref">Version 1.0</phrase></code></entry></row><row><entry><code><phrase role="xref">129 SCA Configuration Type Specification</phrase></code></entry><entry><code>-</code></entry><entry><code><phrase role="xref">Version 1.0</phrase></code></entry></row><row><entry><code><phrase role="xref">130 Coordinator Service Specification</phrase></code></entry><entry><code>org.osgi.service.coordinator</code></entry><entry><code><phrase role="xref">Version 1.0</phrase></code></entry></row><row><entry><code><phrase role="xref">136 Resolver Service Specification</phrase></code></entry><entry><code>org.osgi.service.resolver</code></entry><entry><code><phrase role="xref">Version 1.0</phrase></code></entry></row><row><entry><code><phrase role="xref">132 Repository Service Specification</phrase></code></entry><entry><code>org.osgi.service.repository</code></entry><entry><code><phrase role="xref">Version 1.0</phrase></code></entry></row><row><entry><code><phrase role="xref">133 Service Loader Mediator Specification</phrase></code></entry><entry><code>org.osgi.service.serviceloader</code></entry><entry><code><phrase role="xref">Version 1.0</phrase></code></entry></row><row><entry><code><phrase role="xref">134 Subsystem Service Specification</phrase></code></entry><entry><code>org.osgi.service.subsystem</code></entry><entry><code><phrase role="xref">Version 1.0</phrase></code></entry></row><row><entry><code><phrase role="xref">135 Common Namespaces Specification</phrase></code></entry><entry><code>org.osgi.namespaces</code></entry><entry><code><phrase role="xref">Version 1.0</phrase></code></entry></row><row><entry><code><phrase role="xref">702 XML Parser Service Specification</phrase></code></entry><entry><code>org.osgi.util.xml</code></entry><entry><code><phrase role="xref">Version 1.0</phrase></code></entry></row></tbody></tgroup></table>
<para>When a component is represented in a bundle, a 
<code>version</code>
 attribute is needed in the declaration of the Import-Package or
Export-Package manifest headers.</para></section>
<section><title>Note</title>
<orderedlist><listitem><para>The 
<code>org.osgi.jmx</code>
 sub-packages are individually versioned to be aligned with the
service they manage.</para></listitem></orderedlist></section></section>
<section><title>Changes</title>
<itemizedlist><listitem><para>The Remote Services specification
has been moved from the OSGi Core Specification to chapter 100, see 
<phrase role="xref">Remote Services on page 7</phrase>
.</para></listitem>
<listitem><para>Updated 
<phrase role="xref">Configuration Admin Service Specification on
page 45</phrase>
.</para></listitem>
<listitem><para>Updated 
<phrase role="xref">Metatype Service Specification on page 87</phrase>
.</para></listitem>
<listitem><para>Updated 
<phrase role="xref">Declarative Services Specification on page 147</phrase>
.</para></listitem>
<listitem><para>Updated 
<phrase role="xref">Event Admin Service Specification on page 195</phrase>
.</para></listitem>
<listitem><para>Updated 
<phrase role="xref">JMX™ Management Model Specification on page 349</phrase>
.</para></listitem>
<listitem><para>Added 
<phrase role="xref">Coordinator Service Specification on page 483</phrase>
.</para></listitem>
<listitem><para>Added 
<phrase role="xref">Resolver Service Specification on page 605</phrase>
.</para></listitem>
<listitem><para>Added 
<phrase role="xref">Repository Service Specification on page 511</phrase>
.</para></listitem>
<listitem><para>Added 
<phrase role="xref">Service Loader Mediator Specification on page 525</phrase></para></listitem>
<listitem><para>Added 
<phrase role="xref">Subsystem Service Specification on page 539</phrase>
.</para></listitem>
<listitem><para>Added 
<phrase role="xref">Common Namespaces Specification on page 599</phrase>
.</para></listitem>
<listitem><para>The Tracker Specification has been moved to the
Core.</para></listitem></itemizedlist></section></chapter>