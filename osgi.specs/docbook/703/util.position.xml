<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5" xml:id="i1271199" xmlns:xlink='http://www.w3.org/1999/xlink' xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Position  Specification</title>
<info xml:id="i1323481"><releaseinfo>Version 1.0</releaseinfo></info>
<section><title>Introduction</title>
<para>The <code>Position</code> class is a utility providing bundle
developers with a consistent way of handling geographic positions
in OSGi applications. The <code>Position</code> class is intended
to be used with the Wire Admin service but has wider applicability.</para>
<para xml:id="i1271205">The <code>Position</code> class is designed
to be compatible with the 
Global
Positioning System (GPS). This specification will not define or
explain the complexities of positioning information. It is assumed
that the reader has the appropriate background to understand this
information.</para>
<section><title>Essentials</title>
<itemizedlist><listitem><para><emphasis>Position</emphasis> – Provide
an information object that has well defined semantics for a position.</para></listitem>
<listitem><para><emphasis>WGS-84</emphasis> – Use the World Geodetic
System 84 as the datum.</para></listitem>
<listitem><para><emphasis>Speed</emphasis> – Provide speed and track
information.</para></listitem>
<listitem><para><emphasis>Errors</emphasis> – Position information
always has certain errors or cannot be measured at all. This information
must be available to the users of the information.</para></listitem>
<listitem><para><emphasis>Units</emphasis> – Use SI units for all
measurements.</para></listitem>
<listitem><para><emphasis>Wire Admin</emphasis> – This specification
must work within the Wire Admin service.</para></listitem></itemizedlist></section>
<section><title>Entities</title>
<itemizedlist><listitem><para><emphasis>Position</emphasis> – An
object containing the different aspects of a position.</para></listitem>
<listitem><para><emphasis>Measurement</emphasis> – Contains a typed
measurement made at a certain time and with a specified error.</para></listitem></itemizedlist>
<figure><title>Class Diagram, org.osgi.util.position</title>
<mediaobject><imageobject><imagedata fileref="GRAPHIC1" align="center" contentwidth="4.922in" contentdepth="1.221in"/></imageobject></mediaobject></figure></section></section>
<section><title>Positioning</title>
<para>The <code>Position</code> class is used to give information
about the position and movement of a vehicle with a specified amount
of uncertainty. The position is based on WGS-84. </para>
<para>The Position class offers the following information:</para>
<itemizedlist><listitem><para><phrase role="xref">getLatitude()</phrase>
 – The WGS-84 latitude of the current position. The unit of a latitude
must be rad (radians).</para></listitem>
<listitem><para><phrase role="xref">getLongitude()</phrase>
 – The WGS-84 <?FM MARKER [Hypertext] longitude?>
longitude of the current position. The unit of a longitude must
be rad (radians).</para></listitem>
<listitem xml:id="i1271218"><para><phrase role="xref">getAltitude()</phrase>
 – Altitude is expressed as height in meters above the WGS-84 ellipsoid.
This value can differ from the actual height above 
mean sea
level depending on the place on earth where the measurement is taken place.
This value is not corrected for the geoid.</para></listitem>
<listitem><para><phrase role="xref">getTrack()</phrase>
 – The true north course of the vehicle in radians.</para></listitem>
<listitem><para><phrase role="xref">getSpeed()</phrase>
 – The ground speed. This speed must not include vertical speed.</para></listitem></itemizedlist></section>
<section><title>Units</title>
<para>Longitude and latitude are represented in radians, not degrees.
This is consistent with the use of the <code>Measurement</code> object.
Radians can be converted to degrees with the following formula,
when <code>lonlat</code> is the longitude or latitude:</para>
<programlisting>degrees = (lonlat / <symbol>π</symbol>) *180</programlisting>
<para>Calculation errors are significantly reduced when all calculations
are done with a single unit system. This approach increases the
complexity of presentation, but presentations are usually localized
and require conversion anyway. Also, the radians are the units in
the SI system and the java.lang.Math class uses only radians for
angles.</para></section>
<section><title>Optimizations</title>
<para>A <code>Position</code> object must be immutable. It must
remain its original values after it is created.</para>
<para>The <code>Position</code> class is not final. This approach
implies that developers are allowed to sub-class it and provide
optimized implementations. For example, it is possible that the <code>Measurement</code> objects
are only constructed when actually requested.</para></section>
<section><title>Errors</title>
<para>Positioning information is never exact. Even large errors
can exist in certain conditions. For this reason, the <code>Position</code> class
returns all its measurements as <code>Measurement</code> objects.
The <code>Measurement</code> class maintains an error value for
each measurement.</para>
<para>In certain cases it is not possible to supply a value; in
those cases, the method should return a <code>NaN</code> as specified
in the <code>Measurement</code> class.</para></section>
<section><title>Using Position With Wire Admin</title>
<para xml:id="i1271250">The primary reason the Position is specified,
is to use it with the 
<phrase role="xref">Wire Admin Service Specification on page 205</phrase>
. A bundle that needs position information should register a 
Consumer service
and the configuration should connect this service to an appropriate
Producer service. </para></section>
<section><title>Related Standards</title>
<section xml:id="i1271252"><title>
JSR 179</title>
<para xml:id="i1271253">In JCP,
started 
<phrase role="xref">
<xref xrefstyle="Reference" linkend="i1255323"/></phrase>
. This API is targeted at embedded systems and is likely to not
contain some of the features found in this API. This API is targeted
to be reviewed at Q4 of 2002. This API should be considered in a
following release.</para></section></section>
<section><title>Security</title>
<para>The security aspects of the <code>Position</code> class are
delegated to the security aspects of the Wire Admin service. The <code>Position</code> object
only carries the information. The Wire Admin service will define
what Consumer services will receive position information from what
Producer services. It is therefore up to the administrator of the
Wire Admin service to assure that only trusted bundles receive this
information, or can supply it.</para></section>
<INSET xml:id="i1366978">org.osgi.util.position<?FM MARKER [Cross-Ref] org.osgi.util.position?>
<?FM MARKER [Index] org.osgi.util.position?>
<?FM MARKER [Cross-Ref] package:org.osgi.util.position?>

Position Package Version 1.0.  
Bundles wishing to use this package must list the package in the
Import-Package header of the bundle’s manifest. 
Example import for consumers using the API in this package: 
Import-Package: org.osgi.util.position; version=”[1.0,2.0)”
<?FM MARKER [Index] Position?>
<?FM MARKER [Index] class:Position?>
Position
public class Position
Position represents a geographic location, based on the WGS84 System
(World Geodetic System 1984). 
The org.osgi.util.measurement.Measurement class is used to represent
the values that make up a position. 
A given position object may lack any of it’s components, i.e. the
altitude may not be known. Such missing values will be represented
by null. 
Position does not override the implementation of either equals()
or hashCode() because it is not clear how missing values should
be handled. It is up to the user of a position to determine how
best to compare two position objects. A Position object is immutable.
	Concurrency	Immutable 
<?FM MARKER [Cross-Ref] Position.Position(Measurement,Measurement,Measurement,Measurement,Measurement)?>
<?FM MARKER [Index] Position:Position?>
<?FM MARKER [Index] Position?>
Position(Measurement,Measurement,Measurement,Measurement,Measurement)
public Position ( Measurement lat , Measurement lon , Measurement
alt , Measurement speed , Measurement track ) 
	lat	a Measurement object specifying the latitude in radians, or
null
	lon	a Measurement object specifying the longitude in radians, or
null
	alt	a Measurement object specifying the altitude in meters, or
null
	speed	a Measurement object specifying the speed in meters per second,
or null
	track	a Measurement object specifying the track in radians, or
null
	
Constructs a Position object with the given values. 
<?FM MARKER [Cross-Ref] Position.getAltitude()?>
<?FM MARKER [Index] Position:getAltitude?>
<?FM MARKER [Index] getAltitude?>
getAltitude()
public Measurement getAltitude ( ) 
	
Returns the altitude of this position in meters. 
	Returns	a Measurement object in Unit.m representing the altitude
in meters above the ellipsoid null if the altitude is not known.
<?FM MARKER [Cross-Ref] Position.getLatitude()?>
<?FM MARKER [Index] Position:getLatitude?>
<?FM MARKER [Index] getLatitude?>
getLatitude()
public Measurement getLatitude ( ) 
	
Returns the latitude of this position in radians. 
	Returns	a Measurement object in Unit.rad representing the latitude,
or null if the latitude is not known..
<?FM MARKER [Cross-Ref] Position.getLongitude()?>
<?FM MARKER [Index] Position:getLongitude?>
<?FM MARKER [Index] getLongitude?>
getLongitude()
public Measurement getLongitude ( ) 
	
Returns the longitude of this position in radians. 
	Returns	a Measurement object in Unit.rad representing the longitude,
or null if the longitude is not known.
<?FM MARKER [Cross-Ref] Position.getSpeed()?>
<?FM MARKER [Index] Position:getSpeed?>
<?FM MARKER [Index] getSpeed?>
getSpeed()
public Measurement getSpeed ( ) 
	
Returns the ground speed of this position in meters per second. 
	Returns	a Measurement object in Unit.m_s representing the speed,
or null if the speed is not known..
<?FM MARKER [Cross-Ref] Position.getTrack()?>
<?FM MARKER [Index] Position:getTrack?>
<?FM MARKER [Index] getTrack?>
getTrack()
public Measurement getTrack ( ) 
	
Returns the track of this position in radians as a compass heading.
The track is the extrapolation of previous previously measured positions
to a future position. 
	Returns	a Measurement object in Unit.rad representing the track,
or null if the track is not known..

</INSET>
<section xml:id="i1239633"><title>
References</title>
<para role="ExternalReference">World Geodetic System 84 (WGS-84)</para>
<para role="ExternalReferenceCont">http://earth-info.nga.mil/GandG/publications/tr8350.2/tr8350_2.html</para>
<para role="ExternalReference" xml:id="i1255323">
Location
API for J2ME</para>
<para role="ExternalReferenceCont">http://www.jcp.org/jsr/detail/179.jsp</para></section></chapter>