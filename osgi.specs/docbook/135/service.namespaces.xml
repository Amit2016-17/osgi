<?xml version="1.0" encoding="utf-8"?>
<chapter label="135"
         revision="$Id$"
         version="5" xml:id="service.namespaces"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Common Namespaces Specification</title>

  <info>
    <releaseinfo xml:id="service.namespaces-version">Version
    1.0</releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>A key aspect of the OSGi general dependency model based on
    requirements and capabilities is the concept of a
    <emphasis>Namespace</emphasis>. A Namespace defines the semantics of a
    Requirement-Capability pair. The generic model is defined in the <xref linkend="i1777721" xrefstyle="Reference"/>.
    This section defines a number of Namespaces that are not part of the
    <phrase role="xref">OSGi Core Release 5</phrase> specification. Unless an
    attribute is specifically overridden, all Namespaces inherit the
    attributes and directives of the default Namespace as defined <xref linkend="i1777761" xrefstyle="Reference"/>.</para>

    <para>Each Namespace is defined with the following items:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Name</emphasis> – the name of an attribute or
        directive</para>
      </listitem>

      <listitem>
        <para><emphasis>Kind</emphasis> – Defines where the attribute or
        directive can be used</para>

        <itemizedlist>
          <listitem>
            <para><code>CA</code> – Capability Attribute</para>
          </listitem>

          <listitem>
            <para><code>CD</code> – Capability Directive</para>
          </listitem>

          <listitem>
            <para><code>RA</code> – Requirement Attribute</para>
          </listitem>

          <listitem>
            <para><code>RD</code> – Requirement Directive</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis>M/O</emphasis> – Mandatory (<code>M</code>) or
        Optional (<code>O</code>)</para>
      </listitem>

      <listitem>
        <para><emphasis>Type</emphasis> – The data type</para>
      </listitem>

      <listitem>
        <para><emphasis>Syntax</emphasis> – Any syntax rules. The syntax
        refers in general to the syntaxes defined in <xref linkend="i1777866" xrefstyle="Reference"/> and <xref linkend="i1777884" xrefstyle="Reference"/>.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="i1772810">
    <title>osgi.extender Namespace</title>

    <para>An <emphasis>Extender</emphasis> is a bundle that uses the life
    cycle events from another bundle, the <emphasis>extendee</emphasis>, to
    extend that bundle’s functionality when that bundle is active. It can use
    metadata (headers, or files inside the extendee) to control its
    functionality. Extendees therefore have a dependency on the Extender that
    can be modeled with the <code>osgi.extender</code> namespace. The
    definition for this namespace can be found in <phrase role="xref">Table
    135.1</phrase> and the <xref linkend="org.osgi.namespace.extender.ExtenderNamespace"/>
    class.</para>

    <table>
      <title>osgi.extender Namespace</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="2*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="4*"/>

        <colspec colnum="6" colwidth="6*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.extender</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>symbolic-name</code></entry>

            <entry><para>A symbolic name for the extender. These names are
            defined in their respective specifications and should in general
            use the specification top level package name. For example,
            <code>org.acme.foo</code>. The OSGi Alliance reserves names that
            start with <code>osgi.</code>.</para></entry>
          </row>

          <row>
            <entry><code>version</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>Version</code></entry>

            <entry><code>version</code></entry>

            <entry><para>A version. This version must correspond to the
            specification of the extender.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Specifications for extenders (Blueprint, Declarative Services, etc.)
    should specify the values for these attributes. Extenders that provide
    such a capability should list the packages that they use in their
    specification in the <code>uses</code> directive of that capability to
    ensure class space consistency. Extenders can extend an extendee bundle
    even if that bundle does not require the extender unless the specification
    explicitly forbids this. For example an OSGi Blueprint Container could
    declare its capability with the following manifest header:</para>

    <programlisting>Provide-Capability: osgi.extender; 
   osgi.extender="osgi.blueprint";
   uses:=
     "org.osgi.service.blueprint.container,org.osgi.service.blueprint.reflect";
   version:Version="1.0"</programlisting>

    <para>A bundle that depends on a Blueprint Container could require such an
    extender with the following manifest header:</para>

    <programlisting>Require-Capability: osgi.extender;
  filter:="(&amp;(osgi.extender=osgi.blueprint)(version&gt;=1.0))"</programlisting>
  </section>

  <section>
    <title>osgi.contract Namespace</title>

    <para>Products or technologies often have a number of related APIs
    consisting of a large set of packages. Some IDEs have not optimized for
    OSGi and requires work for each imported package. In these development
    environments using modularized systems tends to require a significant
    amount of manual effort to manage the imported packages.</para>

    <para>The <code>osgi.contract</code> Namespace addresses this IDE
    deficiency. It allows a developer to specify a single name and version for
    a contract that can then be expanded to a potentially large number of
    packages. For example, a developer can then specify a dependency on Java
    Enterprise Edition 6 contract that can be provided by an application
    server.</para>

    <para>The <code>osgi.contract</code> Namespace provides such a name and
    binds it to a set of packages with the uses constraint. The bundle that
    declares this contract must then import or export each of the listed
    packages with the correct versioning. Such a bundle is called a
    <emphasis>contract bundle</emphasis>.</para>

    <para>An <code>osgi.contract</code> capability can then be used in the
    following ways:</para>

    <itemizedlist>
      <listitem>
        <para>IDEs can use the information in the <code>uses</code> directive
        to make all those packages available on the build path. In this case
        the developer no longer has to specify each package separately.</para>
      </listitem>

      <listitem>
        <para>During run time the <code>uses</code> clause is used to enforce
        that all packages in the contract form a consistent class
        space.</para>
      </listitem>
    </itemizedlist>

    <para>The <code>uses</code> directive will make it impossible to get wired
    to packages that are not valid for the contract. Since the uses constrains
    enforce the consistency, it is in principle not necessary to version the
    imported packages on client bundles since only the correctly versioned
    packages can be used. Contracts are aggregates and therefore make clients
    depend on the whole and all their transitive dependencies, even if the
    client only uses a single package of the contract.</para>

    <para>The recommended way of using contracts is to create a contract
    bundle that provides the <code>osgi.contract</code> capability and imports
    the packages with their required version range. For example:</para>

    <programlisting>Provide-Capability: osgi.contract;
    osgi.contract=Servlet;
    version:Version=2.5;
    uses:="javax.servlet,javax.servlet.http"
Import-Package:
    javax.servlet;      version="[1.0,2)",
    javax.servlet.http; version="[1.0,2)"</programlisting>

    <para>A client bundle that requires the Servlet 2.5 contract can then have
    the following manifest:</para>

    <programlisting>Require-Capability: osgi.contract;
    filter:="(&amp;(osgi.contract=Servlet)(version&gt;=2.5))",
Import-Package:
    javax.servlet, javax.servlet.http</programlisting>

    <para>The client bundle will be constrained by the contract’s uses
    constraints and automatically gets the correct packages. In this example,
    no semantic versioning is used for the contract because the Servlets
    Specifications do not use semantic versioning (version 3.0 is backward
    compatible with 2.X).</para>

    <para>In this model it is even possible to use the normally not
    recommended DynamicImport-Package header with a wild card since also this
    header is constrained by the uses constraints. However, using a full
    wildcard can also dynamically import packages that are not part of the
    contract. To prevent these unwanted dynamic imports, the exporter could
    include an attribute on the exports. For example:</para>

    <programlisting>Require-Capability: osgi.contract;
    filter:="(&amp;(osgi.contract=Servlet)(version&gt;=2.5))"
DynamicImport-Package: *;Servlet=contract</programlisting>

    <para>However, this model requires the exporter to specify an agreed
    attribute. The contract bundle does not require such coordination; it also
    allows the package exporters to reside in different and unrelated
    bundles.</para>

    <para>The definition of the <code>osgi.contract</code> Namespace is in
    <phrase role="xref">Table 135.2</phrase> and in the <xref linkend="org.osgi.namespace.contract.ContractNamespace"/> class.</para>

    <table>
      <title>osgi.contract Namespace</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="2*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="4*"/>

        <colspec colnum="6" colwidth="6*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.contract</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>symbolic-name</code></entry>

            <entry><para>A symbolic name for the contract. </para></entry>
          </row>

          <row>
            <entry><code>version</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>Version</code></entry>

            <entry><code>version</code></entry>

            <entry><para>A version for the contract</para></entry>
          </row>

          <row>
            <entry><code>uses</code></entry>

            <entry><code>CD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><para><code>package-name</code></para><para><code>( ’,’
            package-name )</code></para></entry>

            <entry><para>For a contract, the standard uses clause is used to
            indicate which packages are part of the contract. The imports or
            exports of those packages link these packages to a particular
            version.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section>
    <title>osgi.service Namespace</title>

    <para>The Service Namespace is intended to be used for:</para>

    <itemizedlist>
      <listitem>
        <para>Preventing a bundle from resolving if there is not at least one
        bundle that potentially can register a specific service.</para>
      </listitem>

      <listitem>
        <para>Providing a hint to the provisioning agent that the bundle
        requires a given service.</para>
      </listitem>

      <listitem>
        <para>Used as template for specifications like Blueprint and
        Declarative Services to express their provided and referenced services
        in the Repository model, see <phrase role="xref">Repository Service
        Specification on page 649</phrase>.</para>
      </listitem>
    </itemizedlist>

    <para>A bundle providing this capability indicates that it can register
    such a service with at least the given custom attributes as service
    properties. At resolve time this is a promise since there is no guarantee
    that during runtime the bundle will actually register such a service;
    clients must handle this with the normal runtime dependency managers like
    Blueprint, Declarative Services, or others.</para>

    <para>See <phrase role="xref">Table 135.3</phrase> and the <xref linkend="org.osgi.namespace.service.ServiceNamespace"/> class for this namespace
    definition.</para>

    <table>
      <title>osgi.service Namespace</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="2*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="4*"/>

        <colspec colnum="6" colwidth="6*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>objectClass</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>LIst&lt;String&gt;</code></entry>

            <entry><para><code>qname</code></para><para><code>(’,’
            qname)*</code></para></entry>

            <entry><para>The fully qualified name of the object class of the
            service. </para></entry>
          </row>

          <row>
            <entry><code>*</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>*</code></entry>

            <entry><code>*</code></entry>

            <entry><para>Custom attributes that will be provided as service
            properties if they do not conflict with the service properties
            rules and are not private service properties (start with a full
            stop (<code>’.’ \u002E</code>).</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.namespace.contract.xml"/>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.namespace.extender.xml"/>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.namespace.service.xml"/>

  <section>
    <title>References</title>

    <para role="ExternalReference" xml:id="i1772882">Specification
    References</para>

    <para
    role="ExternalReferenceCont">http://www.osgi.org/Specifications/Reference</para>

    <para role="ExternalReference" xml:id="i1777721">Resources API
    Specification</para>

    <para role="ExternalReferenceCont"><phrase role="xref">OSGi Core Release
    5</phrase>, chapter <phrase role="xref">6 Resource API
    Specification</phrase></para>

    <para role="ExternalReference" xml:id="i1777761">Framework Namespaces
    Specification</para>

    <para role="ExternalReferenceCont"><phrase role="xref">OSGi Core Release
    5</phrase>, chapter <phrase role="xref">8 Framework Namespaces
    Specification</phrase></para>

    <para role="ExternalReference" xml:id="i1777866">General Syntax
    Definitions</para>

    <para role="ExternalReferenceCont"><phrase role="xref">OSGi Core Release
    5</phrase>, section <phrase role="xref">1.3.2 General Syntax
    Definitions</phrase></para>

    <para role="ExternalReference" xml:id="i1777884">Common Headers</para>

    <para role="ExternalReferenceCont"><phrase role="xref">OSGi Core Release
    5</phrase>, section <phrase role="xref">3.2.4 Common Header
    Syntax</phrase></para>
  </section>
</chapter>
