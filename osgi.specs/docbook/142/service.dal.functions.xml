<?xml version="1.0" encoding="utf-8"?>
<chapter label="142"
         version="5"
         xml:id="service.dal.functions"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Device Abstraction Layer Functions</title>
  <info>
    <releaseinfo xml:id="service.dal.functions-version">Version 1.0</releaseinfo>
  </info>
  <section xml:id="service.dal.functions.introduction">
    <title>Introduction</title>
    <para>
      Concrete function interfaces are used to unity the access
      and the control of the basic device operations and the related properties.
      The current section specifies the minimal set of such functionalities.
      They can be extended or replaced to cover domain specific scenarios.
      The set is not closed and can be incorporated with vendor specific functions.
      There is support for: control, monitoring and metering information.
    </para>
  </section>
  <section xml:id="service.dal.functions.list">
    <title>Functions</title>
    <section xml:id="service.dal.functions.boolean.control">
      <title>BooleanControl</title>
      <para>
        <code>BooleanControl</code> function provides a binary control support.
        The property eventing must follow the definition of Device Abstraction Layer,
        <xref linkend="service.dal.function.event"/>.
        The full function definition is available in the next tables.
      </para>
      <table>
        <title>BooleanControl Operations</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><code>reverse</code></entry>
              <entry>
                Reverses the <code>BooleanControl</code> state.
                If the current state represents <code>true</code> value,
                it'll be reversed to <code>false</code>.
                If the current state represents <code>false</code> value,
                it'll be reversed to <code>true</code>.
              </entry>
            </row>
            <row>
              <entry><code>setTrue</code></entry>
              <entry>
                Sets the <code>BooleanControl</code> state to <code>true</code> value.
              </entry>
            </row>
            <row>
              <entry><code>setFalse</code></entry>
              <entry>
                Sets the <code>BooleanControl</code> state to <code>false</code> value.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>BooleanControl Properties</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><code>data</code></entry>
              <entry>
                Contains the current state of <code>BooleanControl</code>.
                The property access can be any combination of:
                readable, writable and eventable.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>
        Different types can be used as a value of
        <code>Function.SERVICE_TYPE</code> service property.
        The next list contains some suitable to <code>BooleanControl</code>:
        <itemizedlist>
          <listitem>
            <code>Types.LIGHT</code> - indicates that there is a light device control.
            <code>true</code> state means that the light device will be turned on.
            <code>false</code> state means that the light device will be turned off.
          </listitem>
          <listitem>
            <code>Types.DOOR</code> - indicates that there is a door position control.
            <code>true</code> state means that the door will be opened.
            <code>false</code> state means that the the door will be closed.
          </listitem>
          <listitem>
            <code>Types.WINDOW</code> - indicates that there is a window position control.
            <code>true</code> state means that the window will be opened.
            <code>false</code> state means that the the window will be closed.
          </listitem>
          <listitem>
            <code>Types.POWER</code> - indicates that there is electricity control.
            <code>true</code> state means that the power will be restored.
            <code>false</code> state means that the power will be cut.
          </listitem>
          <listitem>
            other type defined in
            <code>org.osgi.service.dal.functions.Types</code>
          </listitem>
          <listitem>vendor specific</listitem>
        </itemizedlist>
      </para>
      <para>
        The function is using <xref linkend="service.dal.functions.data.boolean"/>
        data structure to provide the control state.
      </para>
      <para>
        The next code snippet sets to <code>true</code> all
        <code>BooleanControl</code> functions, which control the light.
        <programlisting>ServiceReference[] booleanControlSRefs = context.getServiceReferences(
      BooleanControl.class.getName(),
      '(' + Function.SERVICE_TYPE + '=' + Types.LIGHT + ')');
if (null == booleanControlSRefs) {
  return; // no such services
}
for (int i = 0; i &lt; booleanControlSRefs.length; i++) {
  BooleanControl booleanControl = (BooleanControl) context.getService(
      booleanControlSRefs[i]);
  if (null != booleanControl) {
    booleanControl.setTrue();
  }
}</programlisting>
      </para>
    </section>
    <section xml:id="service.dal.functions.boolean.sensor">
      <title>BooleanSensor</title>
      <para>
        <code>BooleanSensor</code> function provides binary sensor monitoring.
        It reports the state when an important event is available.
        There are no operations.
        The property eventing must follow the definition of Device Abstraction Layer,
        <xref linkend="service.dal.function.event"/>.
        The full function definition is available in the next table.
      </para>
      <table>
        <title>BooleanSensor Properties</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><code>data</code></entry>
              <entry>
                Contains the current state of <code>BooleanSensor</code>.
                The property access can be any combination of: readable and eventable.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>
        Different types can be used as a value of
        <code>Function.SERVICE_TYPE</code> service property.
        The next list contains some suitable to <code>BooleanSensor</code>:
        <itemizedlist>
          <listitem>
            <code>Types.LIGHT</code> - indicates that the <code>BooleanSensor</code>
            can detected light. <code>true</code> state means that there is light.
            <code>false</code> state means that there is no light.
          </listitem>
          <listitem>
            <code>Types.GAS</code> - indicates that the <code>BooleanSensor</code>
            supports gas detection. <code>true</code> state means there is gas.
            <code>false</code> state means that there is no gas.
          </listitem>
          <listitem>
            <code>Types.SMOKE</code> - indicates that the <code>BooleanSensor</code>
            can detect smoke. <code>true</code> state means that there is smoke.
            <code>false</code> state means that there is no smoke.
          </listitem>
          <listitem>
            <code>Types.DOOR</code> - indicates that the <code>BooleanSensor</code>
            can detect the door state. <code>true</code> state means that the door is
            opened. <code>false</code> state means that the door is closed.
          </listitem>
          <listitem>
            <code>Types.WINDOW</code> - indicates that the <code>BooleanSensor</code>
            can window state. <code>true</code> state means that the window is
            opened. <code>false</code> state means that the window is closed.
          </listitem>
          <listitem>
            <code>Types.POWER</code> - indicates that the <code>BooleanSensor</code>
            can detect motion. <code>true</code> state means that there is power
            restore. <code>false</code> state means that there is power cut.
          </listitem>
          <listitem>
            <code>Types.RAIN</code> - indicates that the <code>BooleanSensor</code>
            can detect rain. <code>true</code> state means that there is rain.
            <code>false</code> state means that there is no rain.
          </listitem>
          <listitem>
            <code>Types.CONTACT</code> - indicates that the <code>BooleanSensor</code>
            can detect contact. <code>true</code> state means that there is contact.
            <code>false</code> state means that there is no contact.
          </listitem>
          <listitem>
            <code>Types.FIRE</code> - indicates that the <code>BooleanSensor</code>
            can detect fire. <code>true</code> state means that there is fire.
            <code>false</code> state means that there is no fire.
          </listitem>
          <listitem>
            <code>Types.OCCUPANCY</code> - indicates that the <code>BooleanSensor</code>
            can detect presence. <code>true</code> state means that someone is
            detected. <code>false</code> state means that nobody is detected.
          </listitem>
          <listitem>
            <code>Types.WATER</code> - indicates that the <code>BooleanSensor</code>
            can detect water leak. <code>true</code> state means that there is water
            leak. <code>false</code> state means that there is no water leak.
          </listitem>
          <listitem>
            <code>Types.MOTION</code> - indicates that the <code>BooleanSensor</code>
            can detect motion. <code>true</code> state means that there is motion
            detection. <code>false</code> state means that there is no motion
            detection.
          </listitem>
          <listitem>      
            other type defined in
            <code>org.osgi.service.dal.functions.Types</code>
          </listitem>
          <listitem>vendor specific</listitem>
        </itemizedlist>
      </para>
      <para>
        The function is using <xref linkend="service.dal.functions.data.boolean"/>
        data structure to provide the sensor state.
      </para>
    </section>
    <section xml:id="service.dal.functions.multi.level.control">
      <title>MultiLevelControl</title>
      <para>
        <code>MultiLevelControl</code> function provides multi-level control support.
        The property eventing must follow the definition of Device Abstraction Layer,
        <xref linkend="service.dal.function.event"/>.
        The full function definition is available in the next table.
      </para>
      <table>
        <title>MultiLevelControl Properties</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><code>data</code></entry>
              <entry>
                Contains the current state of <code>MultiLevelControl</code>.
                The property access can be any combination of: readable, writable and eventable.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>
        Different types can be used as a value of
        <code>Function.SERVICE_TYPE</code> service property.
        The next list contains some suitable to <code>MultiLevelControl</code>:
        <itemizedlist>
          <listitem>
            <code>Types.LIGHT</code> - indicates that the
            <code>MultiLevelControl</code> can control light devices. Usually, such
            devices are called dimmable. <code>MultiLevelControl</code> minimum value
            can switch off the device and <code>MultiLevelControl</code> maximum
            value can increase the device light to the maximum possible value.
          </listitem>
          <listitem>
            <code>Types.TEMPERATURE</code> - indicates that the
            <code>MultiLevelControl</code> can control temperature devices.
            For example, such device can be thermostat.
            <code>MultiLevelControl</code> minimum value is the lowest supported temperature.
            <code>MultiLevelControl</code> maximum value is the highest supported
            temperature.
          </listitem>
          <listitem>
            <code>Types.FLOW</code> - indicates that the
            <code>MultiLevelControl</code> can control the flow level.
            <code>MultiLevelControl</code> minimum value is the minimum supported
            flow level. <code>MultiLevelControl</code> maximum value is the maximum
            supported flow level.
          </listitem>
          <listitem>
            <code>Types.PRESSURE</code> - indicates that the
            <code>MultiLevelControl</code> can control the pressure level.
            <code>MultiLevelControl</code> minimum value is the lowest supported
            pressure level. <code>MultiLevelControl</code> maximum value is the
            highest supported pressure level.
          </listitem>
          <listitem>
            <code>Types.HUMIDITY</code> - indicates that the
            <code>MultiLevelControl</code> can control the humidity level.
            It's typical functionality for HVAC (heating, ventilation, and air
            conditioning) devices. <code>MultiLevelControl</code> minimum value is
            the lowest supported humidity level. <code>MultiLevelControl</code>
            maximum value is the highest supported humidity level.
          </listitem>
          <listitem>
            <code>Types.GAS</code> - indicates that the
            <code>MultiLevelControl</code> can control the gas level.
            <code>MultiLevelControl</code> minimum value is the lowest supported gas
            level. <code>MultiLevelControl</code> maximum value is the highest
            supported gas level.
          </listitem>
          <listitem>
            <code>Types.SMOKE</code> - indicates that the
            <code>MultiLevelControl</code> can control the smoke level.
            <code>MultiLevelControl</code> minimum value is the lowest supported
            smoke level. <code>MultiLevelControl</code> maximum value is the highest
            supported smoke level.
          </listitem>
          <listitem>
            <code>Types.DOOR</code> - indicates that the
            <code>MultiLevelControl</code> can control the door position.
            <code>MultiLevelControl</code> minimum value can completely close the
            door. <code>MultiLevelControl</code> maximum value can open the door to
            the maximum allowed position.
          </listitem>
          <listitem>
            <code>Types.WINDOW</code> - indicates that the
            <code>MultiLevelControl</code> can control the window position.
            <code>MultiLevelControl</code> minimum value can completely close the
            window. <code>MultiLevelControl</code> maximum value can open the window
            to the maximum allowed position.
          </listitem>
          <listitem>
            <code>Types.LIQUID</code> - indicates that the
            <code>MultiLevelControl</code> can control the liquid level.
            <code>MultiLevelControl</code> minimum value is the lowest supported
            liquid level. <code>MultiLevelControl</code> maximum value is the highest
            supported liquid level.
          </listitem>
          <listitem>
            <code>Types.POWER</code> - indicates that the
            <code>MultiLevelControl</code> can control the power level.
            <code>MultiLevelControl</code> minimum value is the lowest supported
            power level. <code>MultiLevelControl</code> maximum value is the highest
            supported power level.
          </listitem>
          <listitem>
            <code>Types.NOISINESS</code> - indicates that the
            <code>MultiLevelControl</code> can control the noise level.
            <code>MultiLevelControl</code> minimum value is the lowest supported
            noise level. <code>MultiLevelControl</code> maximum value is the highest
            supported noise level.
          </listitem>
          <listitem>
            other type defined in
            <code>org.osgi.service.dal.functions.Types</code>
          </listitem>
          <listitem>vendor specific</listitem>
        </itemizedlist>
      </para>
      <para>
        The function is using <xref linkend="service.dal.functions.data.level"/>
        data structure to provide the level.
      </para>
    </section>
    <section xml:id="service.dal.functions.multi.level.sensor">
      <title>MultiLevelSensor</title>
      <para>
        <code>MultiLevelSensor</code> function provides multi-level sensor monitoring.
        It reports its state when an important event is available.
        There are no operations.
        The property eventing must follow the definition of Device Abstraction Later,
        <xref linkend="service.dal.function.event"/>.
        The full function definition is available in the next table.
      </para>
      <table>
        <title>MultiLevelSensor Properties</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><code>data</code></entry>
              <entry>
                Contains the current state of <code>MultiLevelSensor</code>.
                The property access can be any combination of: readable and eventable.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>
        Different types can be used as a value of
        <code>Function.SERVICE_TYPE</code> service property.
        The next list contains some suitable to <code>MultiLevelSensor</code>:
        <itemizedlist>
          <listitem>
            <code>Types.LIGHT</code> - indicates that the sensor can monitor the light level.
          </listitem>
          <listitem>
            <code>Types.TEMPERATURE</code> - indicates that the sensor can monitor the temperature.
          </listitem>
          <listitem>
            <code>Types.FLOW</code> - indicates that the sensor can monitor the flow level.
          </listitem>
          <listitem>
            <code>Types.PRESSURE</code> - indicates that the sensor can monitor the pressure level.
          </listitem>
          <listitem>
            <code>Types.HUMIDITY</code> - indicates that the sensor can monitor the humidity level.
          </listitem>
          <listitem>
            <code>Types.GAS</code> - indicates that the sensor can monitor the gas level.
          </listitem>
          <listitem>
            <code>Types.SMOKE</code> - indicates that the sensor can monitor the smoke level.
          </listitem>
          <listitem>
            <code>Types.DOOR</code> - indicates that the sensor can monitor the door position.
          </listitem>
          <listitem>
            <code>Types.WINDOW</code> - indicates that the sensor can monitor the window position.
          </listitem>
          <listitem>
            <code>Types.LIQUID</code> - indicates that the sensor can monitor the liquid level.
          </listitem>
          <listitem>
            <code>Types.POWER</code> - indicates that the sensor can monitor the power level.
          </listitem>
          <listitem>
            <code>Types.NOISINESS</code> - indicates that the sensor can monitor the noise level.
          </listitem>
          <listitem>
            <code>Types.RAIN</code> - indicates that the <code>MultiLevelSensor</code> can monitor the rain rate.
          </listitem>
          <listitem>
            other type defined in
            <code>org.osgi.service.dal.functions.Types</code>
          </listitem>
          <listitem>vendor specific</listitem>
        </itemizedlist>
      </para>
      <para>
        The function is using <xref linkend="service.dal.functions.data.level"/>
        data structure to provide the level.
      </para>
    </section>
    <section xml:id="service.dal.functions.meter">
      <title>Meter</title>
      <para>
        <code>Meter</code> function can measure metering information.
        It provides the current and total consumptions or generations.
        The property eventing must follow the definition of Device Abstraction Later,
        <xref linkend="service.dal.function.event"/>.
        The full function definition is available in the next tables.
      </para>
      <table>
        <title>Meter Operations</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><code>resetTotal</code></entry>
              <entry>Resets the total metering info.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Meter Properties</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><code>total</code></entry>
              <entry>
                Contains the total consumption or generation.
                It has been measured since the last call of <code>resetTotal</code> or
                device initial run. The property access is readable.
              </entry>
            </row>
            <row>
              <entry><code>current</code></entry>
              <entry>
                Contains the current consumption or generation.
                The property access is readable.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>
        Different types can be used as a value of
        <code>Function.SERVICE_TYPE</code> service property.
        The next list contains some suitable to <code>Meter</code>:
        <itemizedlist>
          <listitem>
            <code>Types.PRESSURE</code> -
            indicates that the <code>Meter</code> measures pressure.
          </listitem>
          <listitem>
            <code>Types.GAS</code> -
            indicates that the <code>Meter</code> measures the gas consumption.
          </listitem>
          <listitem>
            <code>Types.POWER</code> -
            indicates that the <code>Meter</code> measures the power consumption.
          </listitem>
          <listitem>
            <code>Types.WATER</code> -
            indicates that the <code>Meter</code> measures water consumption.
          </listitem>
          <listitem>
            <code>Types.HEAT</code> -
            indicates that the <code>Meter</code> measures thermal energy provided by a source.
          </listitem>
          <listitem>
            <code>Types.COLD</code> -
            indicates that the <code>Meter</code> measures thermal energy provided by a source.
          </listitem>
          <listitem>
            other type defined in
            <code>org.osgi.service.dal.functions.Types</code>
          </listitem>
          <listitem>vendor specific</listitem>
        </itemizedlist>
      </para>
      <para>
        The function is using <xref linkend="service.dal.functions.data.level"/>
        data structure to provide metering information.
      </para>
      <para>
        <code>Meter</code> function service can be optionally
        registered with <code>Meter.SERVICE_FLOW</code> service property.
        The value type is <code>java.lang.String</code>.
        It contains the metering flow. Currently, the flow can be
        <code>Meter.FLOW_IN</code> for consumption or
        <code>Meter.FLOW_OUT</code> for generation.
      </para>
    </section>
    <section xml:id="service.dal.functions.alarm">
      <title>Alarm</title>
      <para>
        <code>Alarm</code> function provides alarm sensor support.
        There is only one eventable property and no operations.
        The property eventing must follow the definition of Device Abstraction Layer,
        <xref linkend="service.dal.function.event"/>.
        The full function definition is available in the next table.
      </para>
      <table>
        <title>BooleanSensor Properties</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><code>alarm</code></entry>
              <entry>
                Specifies the alarm property name. The property is eventable.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>
        The function is using <xref linkend="service.dal.functions.data.alarm"/>
        data structure to report the alarm.
        The property eventing must follow the definition of Device Abstraction Layer,
        <xref linkend="service.dal.function.event"/>.
      </para>
    </section>
    <section xml:id="service.dal.functions.keypad">
      <title>Keypad</title>
      <para>
        <code>Keypad</code> function provides support for keypad control.
        A keypad typically consists of one or more keys/buttons,
        which can be discerned. Different types of key presses like short and long
        press can typically also be detected.
        There is only one eventable property and no operations.
        The property eventing must follow the definition of Device Abstraction Layer,
        <xref linkend="service.dal.function.event"/>.
        The full function definition is available in the next table.
      </para>
      <table>
        <title>Keypad Properties</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><code>key</code></entry>
              <entry>
                Specifies a property name for a key from the keypad.
                The property is eventable.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>
        The function is using <xref linkend="service.dal.functions.data.keypad"/>
        data structure to report the keys.
      </para>
    </section>
    <section xml:id="service.dal.functions.wake.up">
      <title>WakeUp</title>
      <para>
        <code>WakeUp</code> function provides device awake monitoring and management.
        It's especially applicable to battery-operated devices.
        Such device can notify the system that it's awake and can receive commands
        with an event to property <code>PROPERTY_AWAKE</code>.
        The property eventing must follow the definition of Device Abstraction Layer,
        <xref linkend="service.dal.function.event"/>.
      </para>
      <para>
        The device can periodically wake up for commands.
        The interval can be managed with
        <code>PROPERTY_WAKE_UP_INTERVAL</code> property.
      </para>
      <para>
        The application can minimize the power consumption with
        <code>sleep()</code> operation.
        As a result of the call, the device will sleep and will not receive commands
        to the next awake.
      </para>
      <table>
        <title>WakeUp Operations</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><code>sleep</code></entry>
              <entry>
                The device is forced to sleep to minimize the power consumption.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>WakeUp Properties</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><code>awake</code></entry>
              <entry>
                Specifies the awake eventable property name.
                If the device is awake, it will trigger a property event.
                The property value type is
                <xref linkend="service.dal.functions.data.boolean"/>.
              </entry>
            </row>
            <row>
              <entry><code>wakeUpInterval</code></entry>
              <entry>
                Specifies the wake up interval.
                The device can periodically wake up and receive commands.
                That interval is managed by this property.
                The property can be readable and writable.
                The property value type is
                <xref linkend="service.dal.functions.data.level"/>.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>
  <section xml:id="service.dal.functions.data">
    <title>Functions Data</title>
    <para>
      <code>FunctionData</code> classes are wrappers on top of the java types
      to cover the requirements of the functions in this section.
      They can be received with the getter methods and
      can be reported with <code>FunctionEvent</code>.
      The value can be described with different properties like:
      <itemizedlist>
        <listitem>
          timestamp - the timestamp is the difference
          between the value collecting time and midnight, January 1, 1970 UTC.
          It's measured in milliseconds. The device driver is responsible to generate
          that value when the value is received from the device.
        </listitem>
        <listitem>
          unit - represents the value unit as it's defined in
          <xref linkend="service.dal.function.properties"/>.
        </listitem>
        <listitem>
          description - represents a human readable description of the value. 
        </listitem>
      </itemizedlist>
    </para>
    <section xml:id="service.dal.functions.data.boolean">
      <title>BooleanData</title>
      <para>
        This data structure is used by <xref linkend="service.dal.functions.boolean.control"/>,
        <xref linkend="service.dal.functions.boolean.sensor"/> and
        <xref linkend="service.dal.functions.wake.up"/>.
      </para>
      <para>
        It provides information about the function state.
        That data object contains the boolean value,
        the value collecting time and additional metadata.
        The immutable <code>BooleanData.value</code> field is accessible with
        <code>BooleanData.getValue()</code> getter.
        Other fields are inherited form the parent class <code>FunctionData</code>.
      </para>
      <para>
        Two <code>BooleanData</code> instances are equal
        if they contain equal metadata, timestamp and boolean value.
      </para>
      <para>
        <code>java.lang.Comparable.compareTo(Object)</code> method compares
        <code>BooleanData</code> instance with the given argument.
        The argument can be:
        <itemizedlist>
          <listitem>
            <code>Boolean</code> - the method returns <code>0</code>
            if this instance contains equivalent boolean value.
            <code>-1</code> if this instance contains
            <code>false</code> and the argument is <code>true</code>.
            <code>1</code> if this instance contains
            <code>true</code> and the argument is <code>false</code>.
          </listitem>
          <listitem>
            <code>BooleanData</code> - the method returns <code>-1</code>
            if metadata or timestamp are not equivalent.
            Otherwise, the boolean value is compared
            with the same rules as <code>Boolean</code> argument.
          </listitem>
          <listitem>
            <code>Map</code> - the map must be built according the rules of
            <code>BooleanData(Map)</code> constructor.
            Metadata, timestamp and value are compared according to
            <code>BooleanData</code> and <code>Boolean</code> argument rules.
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <section xml:id="service.dal.functions.data.level">
      <title>LevelData</title>
      <para>
        This data structure is used by <xref linkend="service.dal.functions.multi.level.control"/>,
        <xref linkend="service.dal.functions.multi.level.sensor"/>,
        <xref linkend="service.dal.functions.meter"/> and
        <xref linkend="service.dal.functions.wake.up"/>.
      </para>
      <para>
        It provides information about the function level.
        That data object contains <code>BigDecimal</code>
        value and the value unit.
        The measurement unit is used as it's defined in
        <xref linkend="service.dal.function.properties"/>.
        The immutable <code>LevelData.unit</code> field is accessible with
        <code>LevelData.getUnit()</code> getter.
        The immutable <code>LevelData.level</code> field is accessible with
        <code>LevelData.getLevel()</code> getter.
      </para>
      <para>
        Two <code>LevelData</code> instances are equal
        if they contain equal metadata, timestamp, unit and level.
      </para>
      <para>
        <code>java.lang.Comparable.compareTo(Object)</code> method compares
        <code>LevelData</code> instance with the given argument.
        The argument can be:
        <itemizedlist>
          <listitem>
            <code>BigDecimal</code> - the method returns the result of
            <code>BigDecimal.compareTo(Object)</code> for
            <code>LevelData</code> instance level and the specified argument.
          </listitem>
          <listitem>
            <code>LevelData</code> - the method returns <code>-1</code>
            if metadata, timestamp or unit are not equivalent.
            Otherwise, the level is compared with the same rules as
            <code>BigDecimal</code> argument.
          </listitem>
          <listitem>
            <code>Map</code> - the map must be built according the rules of
            <code>LevelData(Map)</code> constructor.
            Metadata, timestamp, unit and level are compared according to
            <code>BigDecimal</code> and <code>LevelData</code> argument rules.
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <section xml:id="service.dal.functions.data.alarm">
      <title>AlarmData</title>
      <para>
        This data structure is used by <xref linkend="service.dal.functions.alarm"/>.
      </para>
      <para>
        <code>AlarmData</code> data structure is used to provide information about
        the available alarm. That data object contains:
        <itemizedlist>
          <listitem>
            alarm type - indicates the meaning of the alarm like
            smoke, power fail etc.
          </listitem>
          <listitem>
            alarm severity - indicates the alarm importance level like
            low, high etc.
          </listitem>
        </itemizedlist>
        The immutable <code>AlarmData.severity</code> field is accessible with
        <code>AlarmData.getSeverity()</code> getter.
        The immutable <code>AlarmData.type</code> field is accessible with
        <code>AlarmData.getType()</code> getter.
      </para>
      <para>
        Two <code>AlarmData</code> instances are equal
        if they contain equal metadata, timestamp, type and severity.
      </para>
      <para>
        <code>java.lang.Comparable.compareTo(Object)</code> method compares
        <code>AlarmData</code> instance with the given argument.
        The argument can be:
        <itemizedlist>
          <listitem>
            <code>AlarmData</code> - the method returns <code>-1</code>
            if metadata,timestamp, type or severity are not equivalent.
            <code>0</code> if all fields are equivalent.
            <code>1</code> if all fields are equivalent and
            this instance severity is greater than the severity of the specified argument.
          </listitem>
          <listitem>
            <code>Map</code> - the map must be built according the rules of
            <code>AlarmData(Map)</code> constructor.
            Metadata, timestamp, type and severity are compared according to
            <code>AlarmData</code> argument rules.
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <section xml:id="service.dal.functions.data.keypad">
      <title>KeypadData</title>
      <para>
        This data structure is used by <xref linkend="service.dal.functions.keypad"/>.
      </para>
      <para>
        <code>KeypadData</code> data structure is used to provide information
        when a change with some key from device keypad has occurred.
        That data object contains the event type, key code and key name.
        Currently, there are a few predefined event types:
        <itemizedlist>
          <listitem>
            <emphasis>EVENT_TYPE_PRESSED</emphasis> – used for a key pressed;
          </listitem>
          <listitem>
            <emphasis>EVENT_TYPE_PRESSED_LONG</emphasis> –
            used for a long key pressed;
          </listitem>
          <listitem>
            <emphasis>EVENT_TYPE_PRESSED_DOUBLE</emphasis> –
            used for a double key pressed;
          </listitem>
          <listitem>
            <emphasis>EVENT_TYPE_PRESSED_DOUBLE_LONG</emphasis> –
            used for a double and long key pressed;
          </listitem>
          <listitem>
            <emphasis>EVENT_TYPE_RELEASED</emphasis> – used for a key released.
          </listitem>
          <listitem>
            <emphasis>EVENT_TYPE_UNKNOWN</emphasis> –
            represents an unknown keypad event type.
          </listitem>
        </itemizedlist>
        The immutable <code>KeypadData.eventType</code> field is accessible with
        <code>KeypadData.getEventType()</code> getter.
        The immutable <code>KeypadData.keyCode</code> field is accessible with
        <code>KeypadData.getKeyCode()</code> getter.
        The immutable <code>KeypadData.keyName</code> field is accessible with
        <code>KeypadData.getKeyName()</code> getter.
      </para>
      <para>
        Two <code>KeypadData</code> instances are equal
        if they contain equal metadata, timestamp, event type, key code and key name.
      </para>
      <para>
        <code>java.lang.Comparable.compareTo(Object)</code> method compares
        <code>KeypadData</code> instance with the given argument.
        The argument can be:
        <itemizedlist>
          <listitem>
            <code>KeypadData</code> - the method returns <code>-1</code> if metadata,
            timestamp, event type, key code or key name are not equivalent.
            <code>0</code> if all fields are equivalent.
          </listitem>
          <listitem>
            <code>Map</code> - the map must be built according the rules of
            <code>KeypadData(Map)</code> constructor.
            Metadata, timestamp, event type, key code and key name are
            compared according to <code>KeypadData</code> argument rules.
          </listitem>
        </itemizedlist>
      </para>
    </section>
  </section>
  <xi:include href="../../generated/javadoc/docbook/org.osgi.service.dal.functions.xml"/>
  <xi:include href="../../generated/javadoc/docbook/org.osgi.service.dal.functions.data.xml"/>
</chapter>
