/*
 * $Date$
 * 
 * Copyright (c) OSGi Alliance (2007). All Rights Reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.osgi.framework.hooks;

import java.util.Dictionary;

import org.osgi.framework.BundleContext;
import org.osgi.framework.ServiceReference;
import org.osgi.framework.ServiceRegistration;

/**
 * OSGi Framework Service Registry Hooks.
 * 
 * Bundles registering this service will be called during framework service
 * registry publish (register service), find (get service references) and bind
 * (get service object) operations. Pre and post operation calls are made to
 * allows the hook implementor to take action at the beginning and/or completion
 * of the service registry operation.
 * 
 * The inner classes defined for the hooks are used to encapsulate the
 * parameters of the operation and allow the pre hook to return a new set of
 * parameters. The return value of the pre hook will be used by the service
 * registry to perform the operation and will be passed to the post hook. The
 * hook implementor can thus match pre and post hook calls for any given service
 * registry operation. The values returned by the hooks must pass all the tests
 * required of parameters supplied to and values returned by the BundleContext
 * service methods.
 * 
 * This is an abstract class to allow for future extension and to supply default
 * implementations.
 * 
 * TODO hook chaining issues. - investigate stack-based model per Peter's idea.
 * This addresses the matching issue below since the stack is the matcher.
 * 
 * TODO matching pre and post operations. Using parameter objects works unless
 * hooks are chained. Might need some other means of operation identity.
 * 
 * TODO What shall be done about exceptions thrown by the hook methods? Shall an
 * exception just be noted and the operation continue? YES and hook removed from
 * chain Bad return values from hook will also result in removal from chain. Failure of a 
 * hook will result in failure of the current operation.
 * 
 * TODO Security - just use ServicePermission to register the hook. Investigate
 * use of AdminPermission to provide fine grained control. The hook bundle
 * would need AdminPermission.HOOK for the target bundle.
 * 
 * TODO Should we provide hooks on ServiceEvent delivery? YES pass event and set
 * of bundle which can be filtered by hook. Add overload
 * addServiceListener(ServiceListener, String[] names)
 * 
 * TODO need hook for add and remove service listeners to see who is interested
 * in what. When a hook is registered, the framework will "storm" it with
 * information on the current set of service listener interests.
 * 
 * TODO ServiceRegistryHooks will NOT be called for other ServiceRegistryHook
 * services so that they cannot interfere.
 * 
 * @ThreadSafe
 * @version $Revision$
 */
public abstract class ServiceRegistryHooks {

	/**
	 * Pre publish hook method. This method is called at the beginning of a
	 * service publish ({@link BundleContext#registerService(String[], Object, Dictionary)})
	 * operation by the publishing bundle.
	 * 
	 * @param context The bundle context of the publishing bundle.
	 * @param publish The service publish parameters supplied by the publishing
	 *        bundle.
	 * @return The publish operation parameters to be used by the service
	 *         registry. The implementor can return the specified publish
	 *         parameter or supply a new one.
	 */
	public Publish prePublish(BundleContext context, Publish publish) {
		return publish;
	}

	/**
	 * Post publish hook method. This method is called at the completion of a
	 * service publish ({@link BundleContext#registerService(String[], Object, Dictionary)})
	 * operation before returning to the publishing bundle.
	 * 
	 * @param context The bundle context of the publishing bundle.
	 * @param publish The parameters of the publish operation returned by the
	 *        pre publish hook.
	 * @param registration The ServiceRegistration generated by the service
	 *        registry.
	 * @return The ServiceRegistration to be returned to the publishing bundle.
	 *         The implementor can return the specified registration parameter
	 *         or supply an alternative registration object. An alternative
	 *         registration object must wrap the specified registration
	 *         parameter to support modify and unregistration operations on the
	 *         service.
	 */
	public ServiceRegistration postPublish(BundleContext context,
			Publish publish, ServiceRegistration registration) {
		return registration;
	}

	/**
	 * Pre find hook method. This method is called at the beginning of a service
	 * find ({@link BundleContext#getServiceReferences(String, String)})
	 * operation by the finding bundle.
	 * 
	 * @param context The bundle context of the finding bundle.
	 * @param find The service find parameters supplied by the finding bundle.
	 * @return The find operation parameters to be used by the service registry.
	 *         The implementor can return the specified find parameter or supply
	 *         a new one.
	 */
	public Find preFind(BundleContext context, Find find) {
		return find;
	}

	/**
	 * Post find hook method. This method is called at the completion of a
	 * service find ({@link BundleContext#getServiceReferences(String, String)})
	 * operation before returning to the finding bundle.
	 * 
	 * @param context The bundle context of the finding bundle.
	 * @param find The service find parameters returned by the pre find hook.
	 * @param references The ServiceReferences found be the service registry.
	 * @return The ServiceReferences to be returned to the finding bundle. The
	 *         implementor can return the specified references parameter or
	 *         supply an alternative array of references.
	 */
	public ServiceReference[] postFind(BundleContext context, Find find,
			ServiceReference[] references) {
		return references;
	}

	/**
	 * Pre bind hook method. This method is called at the beginning of a service
	 * bind ({@link BundleContext#getService(ServiceReference)}) operation by
	 * the binding bundle.
	 * 
	 * @param context The bundle context of the binding bundle.
	 * @param bind The service bind parameters supplied by the binding bundle.
	 * @return The bind operation parameters to be used by the service registry.
	 *         The implementor can return the specified bind parameter or supply
	 *         a new one.
	 */
	public Bind preBind(BundleContext context, Bind bind) {
		return bind;
	}

	/**
	 * Post bind hook method. This method is called at the completion of a
	 * service bind ({@link BundleContext#getService(ServiceReference)})
	 * operation before returning to the binding bundle.
	 * 
	 * @param context The bundle context of the finding bundle.
	 * @param bind The service bind parameters returned by the pre bind hook.
	 * @param service The service object from the service registry.
	 * @return The service object to return to the binding bundle. The
	 *         implementor can return the specified service parameter or supply
	 *         an alternative service object.
	 */
	public Object postBind(BundleContext context, Bind bind, Object service) {
		return service;
	}

	/**
	 * Publish operation parameters.
	 * 
	 * @see BundleContext#registerService(String[], Object, Dictionary)
	 * @Immutable
	 */
	public static class Publish {
		private final String[]		names;
		private final Object		service;
		private final Dictionary	properties;

		/**
		 * Create an immutable Publish object.
		 * 
		 * @param names The class names under which the service is to be
		 *        published.
		 * @param service The service object or a <code>ServiceFactory</code>
		 *        object to be published.
		 * @param properties The properties of the service to be published or
		 *        <code>null</code> if the service has no properties.
		 */
		public Publish(String[] names, Object service, Dictionary properties) {
			this.names = names;
			this.service = service;
			this.properties = properties;
		}

		/**
		 * Return the class names under which the service is to be published.
		 * 
		 * While this object is immutable, the returned value is a mutable copy
		 * which can be altered and used to create a new Publish object.
		 * 
		 * @return An array containing the class names under which the service
		 *         is to be published.
		 */
		public String[] getNames() {
			return names;
		}

		/**
		 * Return the object to be published as the service.
		 * 
		 * @return The object to be published as the service.
		 */
		public Object getService() {
			return service;
		}

		/**
		 * Returns the properties of the service to be published.
		 * 
		 * While this object is immutable, the returned value is a mutable copy
		 * which can be altered and used to create a new Publish object.
		 * 
		 * @return The properties of the service to be published or
		 *         <code>null</code> if the service has no properties.
		 */
		public Dictionary getProperties() {
			return properties;
		}
	}

	/**
	 * Find operation parameters.
	 * 
	 * @see BundleContext#getServiceReferences(String, String)
	 * @see BundleContext#getAllServiceReferences(String, String)
	 * @Immutable
	 */
	public static class Find {
		private final String	name;
		private final String	filter;
		private final boolean	allServices;

		/**
		 * Create an immutable Find object.
		 * 
		 * @param name The class name of the services to find or
		 *        <code>null</code> to find all services.
		 * @param filter The filter criteria of the services to find or
		 *        <code>null</code> for no filter criteria.
		 * @param allServices <code>true</code> if the find operation is the
		 *        result of a call to
		 *        {@link BundleContext#getAllServiceReferences(String, String)}
		 */
		public Find(String name, String filter, boolean allServices) {
			this.name = name;
			this.filter = filter;
			this.allServices = allServices;
		}

		/**
		 * Returns The class name of the services to find.
		 * 
		 * @return The class name of the services to find or <code>null</code>
		 *         to find all services.
		 */
		public String getName() {
			return name;
		}

		/**
		 * Returns The filter criteria of the services to find.
		 * 
		 * @return The filter criteria of the services to find or
		 *         <code>null</code> for no filter criteria.
		 */
		public String getFilter() {
			return filter;
		}

		/**
		 * Returns if the find operation is the result of a call to
		 * {@link BundleContext#getAllServiceReferences(String, String)}
		 * 
		 * @return <code>true</code> if the find operation is the result of a
		 *         call to
		 *         {@link BundleContext#getAllServiceReferences(String, String)}
		 */
		public boolean isAllServices() {
			return allServices;
		}
	}

	/**
	 * Bind operation parameters.
	 * 
	 * @see BundleContext#getService(ServiceReference)
	 * @Immutable
	 */
	public static class Bind {
		private ServiceReference	reference;

		/**
		 * Create an immutable Bind object.
		 * 
		 * @param reference A reference to the service to which to bind.
		 */
		public Bind(ServiceReference reference) {
			this.reference = reference;
		}

		/**
		 * Returns a reference to the service to which to bind.
		 * 
		 * @return A reference to the service to which to bind.
		 */
		public ServiceReference getReference() {
			return reference;
		}
	}
}
