/*
 * $Date$
 *
 * Copyright (c) OSGi Alliance (2001, 2008). All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package java.sql;
public abstract interface DatabaseMetaData {
	public abstract boolean allProceduresAreCallable() throws java.sql.SQLException;
	public abstract boolean allTablesAreSelectable() throws java.sql.SQLException;
	public abstract boolean dataDefinitionCausesTransactionCommit() throws java.sql.SQLException;
	public abstract boolean dataDefinitionIgnoredInTransactions() throws java.sql.SQLException;
	public abstract boolean deletesAreDetected(int var0) throws java.sql.SQLException;
	public abstract boolean doesMaxRowSizeIncludeBlobs() throws java.sql.SQLException;
	public abstract java.sql.ResultSet getAttributes(java.lang.String var0, java.lang.String var1, java.lang.String var2, java.lang.String var3) throws java.sql.SQLException;
	public abstract java.sql.ResultSet getBestRowIdentifier(java.lang.String var0, java.lang.String var1, java.lang.String var2, int var3, boolean var4) throws java.sql.SQLException;
	public abstract java.lang.String getCatalogSeparator() throws java.sql.SQLException;
	public abstract java.lang.String getCatalogTerm() throws java.sql.SQLException;
	public abstract java.sql.ResultSet getCatalogs() throws java.sql.SQLException;
	public abstract java.sql.ResultSet getColumnPrivileges(java.lang.String var0, java.lang.String var1, java.lang.String var2, java.lang.String var3) throws java.sql.SQLException;
	public abstract java.sql.ResultSet getColumns(java.lang.String var0, java.lang.String var1, java.lang.String var2, java.lang.String var3) throws java.sql.SQLException;
	public abstract java.sql.Connection getConnection() throws java.sql.SQLException;
	public abstract java.sql.ResultSet getCrossReference(java.lang.String var0, java.lang.String var1, java.lang.String var2, java.lang.String var3, java.lang.String var4, java.lang.String var5) throws java.sql.SQLException;
	public abstract int getDatabaseMajorVersion() throws java.sql.SQLException;
	public abstract int getDatabaseMinorVersion() throws java.sql.SQLException;
	public abstract java.lang.String getDatabaseProductName() throws java.sql.SQLException;
	public abstract java.lang.String getDatabaseProductVersion() throws java.sql.SQLException;
	public abstract int getDefaultTransactionIsolation() throws java.sql.SQLException;
	public abstract int getDriverMajorVersion();
	public abstract int getDriverMinorVersion();
	public abstract java.lang.String getDriverName() throws java.sql.SQLException;
	public abstract java.lang.String getDriverVersion() throws java.sql.SQLException;
	public abstract java.sql.ResultSet getExportedKeys(java.lang.String var0, java.lang.String var1, java.lang.String var2) throws java.sql.SQLException;
	public abstract java.lang.String getExtraNameCharacters() throws java.sql.SQLException;
	public abstract java.lang.String getIdentifierQuoteString() throws java.sql.SQLException;
	public abstract java.sql.ResultSet getImportedKeys(java.lang.String var0, java.lang.String var1, java.lang.String var2) throws java.sql.SQLException;
	public abstract java.sql.ResultSet getIndexInfo(java.lang.String var0, java.lang.String var1, java.lang.String var2, boolean var3, boolean var4) throws java.sql.SQLException;
	public abstract int getJDBCMajorVersion() throws java.sql.SQLException;
	public abstract int getJDBCMinorVersion() throws java.sql.SQLException;
	public abstract int getMaxBinaryLiteralLength() throws java.sql.SQLException;
	public abstract int getMaxCatalogNameLength() throws java.sql.SQLException;
	public abstract int getMaxCharLiteralLength() throws java.sql.SQLException;
	public abstract int getMaxColumnNameLength() throws java.sql.SQLException;
	public abstract int getMaxColumnsInGroupBy() throws java.sql.SQLException;
	public abstract int getMaxColumnsInIndex() throws java.sql.SQLException;
	public abstract int getMaxColumnsInOrderBy() throws java.sql.SQLException;
	public abstract int getMaxColumnsInSelect() throws java.sql.SQLException;
	public abstract int getMaxColumnsInTable() throws java.sql.SQLException;
	public abstract int getMaxConnections() throws java.sql.SQLException;
	public abstract int getMaxCursorNameLength() throws java.sql.SQLException;
	public abstract int getMaxIndexLength() throws java.sql.SQLException;
	public abstract int getMaxProcedureNameLength() throws java.sql.SQLException;
	public abstract int getMaxRowSize() throws java.sql.SQLException;
	public abstract int getMaxSchemaNameLength() throws java.sql.SQLException;
	public abstract int getMaxStatementLength() throws java.sql.SQLException;
	public abstract int getMaxStatements() throws java.sql.SQLException;
	public abstract int getMaxTableNameLength() throws java.sql.SQLException;
	public abstract int getMaxTablesInSelect() throws java.sql.SQLException;
	public abstract int getMaxUserNameLength() throws java.sql.SQLException;
	public abstract java.lang.String getNumericFunctions() throws java.sql.SQLException;
	public abstract java.sql.ResultSet getPrimaryKeys(java.lang.String var0, java.lang.String var1, java.lang.String var2) throws java.sql.SQLException;
	public abstract java.sql.ResultSet getProcedureColumns(java.lang.String var0, java.lang.String var1, java.lang.String var2, java.lang.String var3) throws java.sql.SQLException;
	public abstract java.lang.String getProcedureTerm() throws java.sql.SQLException;
	public abstract java.sql.ResultSet getProcedures(java.lang.String var0, java.lang.String var1, java.lang.String var2) throws java.sql.SQLException;
	public abstract int getResultSetHoldability() throws java.sql.SQLException;
	public abstract java.lang.String getSQLKeywords() throws java.sql.SQLException;
	public abstract int getSQLStateType() throws java.sql.SQLException;
	public abstract java.lang.String getSchemaTerm() throws java.sql.SQLException;
	public abstract java.sql.ResultSet getSchemas() throws java.sql.SQLException;
	public abstract java.lang.String getSearchStringEscape() throws java.sql.SQLException;
	public abstract java.lang.String getStringFunctions() throws java.sql.SQLException;
	public abstract java.sql.ResultSet getSuperTables(java.lang.String var0, java.lang.String var1, java.lang.String var2) throws java.sql.SQLException;
	public abstract java.sql.ResultSet getSuperTypes(java.lang.String var0, java.lang.String var1, java.lang.String var2) throws java.sql.SQLException;
	public abstract java.lang.String getSystemFunctions() throws java.sql.SQLException;
	public abstract java.sql.ResultSet getTablePrivileges(java.lang.String var0, java.lang.String var1, java.lang.String var2) throws java.sql.SQLException;
	public abstract java.sql.ResultSet getTableTypes() throws java.sql.SQLException;
	public abstract java.sql.ResultSet getTables(java.lang.String var0, java.lang.String var1, java.lang.String var2, java.lang.String[] var3) throws java.sql.SQLException;
	public abstract java.lang.String getTimeDateFunctions() throws java.sql.SQLException;
	public abstract java.sql.ResultSet getTypeInfo() throws java.sql.SQLException;
	public abstract java.sql.ResultSet getUDTs(java.lang.String var0, java.lang.String var1, java.lang.String var2, int[] var3) throws java.sql.SQLException;
	public abstract java.lang.String getURL() throws java.sql.SQLException;
	public abstract java.lang.String getUserName() throws java.sql.SQLException;
	public abstract java.sql.ResultSet getVersionColumns(java.lang.String var0, java.lang.String var1, java.lang.String var2) throws java.sql.SQLException;
	public abstract boolean insertsAreDetected(int var0) throws java.sql.SQLException;
	public abstract boolean isCatalogAtStart() throws java.sql.SQLException;
	public abstract boolean isReadOnly() throws java.sql.SQLException;
	public abstract boolean locatorsUpdateCopy() throws java.sql.SQLException;
	public abstract boolean nullPlusNonNullIsNull() throws java.sql.SQLException;
	public abstract boolean nullsAreSortedAtEnd() throws java.sql.SQLException;
	public abstract boolean nullsAreSortedAtStart() throws java.sql.SQLException;
	public abstract boolean nullsAreSortedHigh() throws java.sql.SQLException;
	public abstract boolean nullsAreSortedLow() throws java.sql.SQLException;
	public abstract boolean othersDeletesAreVisible(int var0) throws java.sql.SQLException;
	public abstract boolean othersInsertsAreVisible(int var0) throws java.sql.SQLException;
	public abstract boolean othersUpdatesAreVisible(int var0) throws java.sql.SQLException;
	public abstract boolean ownDeletesAreVisible(int var0) throws java.sql.SQLException;
	public abstract boolean ownInsertsAreVisible(int var0) throws java.sql.SQLException;
	public abstract boolean ownUpdatesAreVisible(int var0) throws java.sql.SQLException;
	public abstract boolean storesLowerCaseIdentifiers() throws java.sql.SQLException;
	public abstract boolean storesLowerCaseQuotedIdentifiers() throws java.sql.SQLException;
	public abstract boolean storesMixedCaseIdentifiers() throws java.sql.SQLException;
	public abstract boolean storesMixedCaseQuotedIdentifiers() throws java.sql.SQLException;
	public abstract boolean storesUpperCaseIdentifiers() throws java.sql.SQLException;
	public abstract boolean storesUpperCaseQuotedIdentifiers() throws java.sql.SQLException;
	public abstract boolean supportsANSI92EntryLevelSQL() throws java.sql.SQLException;
	public abstract boolean supportsANSI92FullSQL() throws java.sql.SQLException;
	public abstract boolean supportsANSI92IntermediateSQL() throws java.sql.SQLException;
	public abstract boolean supportsAlterTableWithAddColumn() throws java.sql.SQLException;
	public abstract boolean supportsAlterTableWithDropColumn() throws java.sql.SQLException;
	public abstract boolean supportsBatchUpdates() throws java.sql.SQLException;
	public abstract boolean supportsCatalogsInDataManipulation() throws java.sql.SQLException;
	public abstract boolean supportsCatalogsInIndexDefinitions() throws java.sql.SQLException;
	public abstract boolean supportsCatalogsInPrivilegeDefinitions() throws java.sql.SQLException;
	public abstract boolean supportsCatalogsInProcedureCalls() throws java.sql.SQLException;
	public abstract boolean supportsCatalogsInTableDefinitions() throws java.sql.SQLException;
	public abstract boolean supportsColumnAliasing() throws java.sql.SQLException;
	public abstract boolean supportsConvert() throws java.sql.SQLException;
	public abstract boolean supportsConvert(int var0, int var1) throws java.sql.SQLException;
	public abstract boolean supportsCoreSQLGrammar() throws java.sql.SQLException;
	public abstract boolean supportsCorrelatedSubqueries() throws java.sql.SQLException;
	public abstract boolean supportsDataDefinitionAndDataManipulationTransactions() throws java.sql.SQLException;
	public abstract boolean supportsDataManipulationTransactionsOnly() throws java.sql.SQLException;
	public abstract boolean supportsDifferentTableCorrelationNames() throws java.sql.SQLException;
	public abstract boolean supportsExpressionsInOrderBy() throws java.sql.SQLException;
	public abstract boolean supportsExtendedSQLGrammar() throws java.sql.SQLException;
	public abstract boolean supportsFullOuterJoins() throws java.sql.SQLException;
	public abstract boolean supportsGetGeneratedKeys() throws java.sql.SQLException;
	public abstract boolean supportsGroupBy() throws java.sql.SQLException;
	public abstract boolean supportsGroupByBeyondSelect() throws java.sql.SQLException;
	public abstract boolean supportsGroupByUnrelated() throws java.sql.SQLException;
	public abstract boolean supportsIntegrityEnhancementFacility() throws java.sql.SQLException;
	public abstract boolean supportsLikeEscapeClause() throws java.sql.SQLException;
	public abstract boolean supportsLimitedOuterJoins() throws java.sql.SQLException;
	public abstract boolean supportsMinimumSQLGrammar() throws java.sql.SQLException;
	public abstract boolean supportsMixedCaseIdentifiers() throws java.sql.SQLException;
	public abstract boolean supportsMixedCaseQuotedIdentifiers() throws java.sql.SQLException;
	public abstract boolean supportsMultipleOpenResults() throws java.sql.SQLException;
	public abstract boolean supportsMultipleResultSets() throws java.sql.SQLException;
	public abstract boolean supportsMultipleTransactions() throws java.sql.SQLException;
	public abstract boolean supportsNamedParameters() throws java.sql.SQLException;
	public abstract boolean supportsNonNullableColumns() throws java.sql.SQLException;
	public abstract boolean supportsOpenCursorsAcrossCommit() throws java.sql.SQLException;
	public abstract boolean supportsOpenCursorsAcrossRollback() throws java.sql.SQLException;
	public abstract boolean supportsOpenStatementsAcrossCommit() throws java.sql.SQLException;
	public abstract boolean supportsOpenStatementsAcrossRollback() throws java.sql.SQLException;
	public abstract boolean supportsOrderByUnrelated() throws java.sql.SQLException;
	public abstract boolean supportsOuterJoins() throws java.sql.SQLException;
	public abstract boolean supportsPositionedDelete() throws java.sql.SQLException;
	public abstract boolean supportsPositionedUpdate() throws java.sql.SQLException;
	public abstract boolean supportsResultSetConcurrency(int var0, int var1) throws java.sql.SQLException;
	public abstract boolean supportsResultSetHoldability(int var0) throws java.sql.SQLException;
	public abstract boolean supportsResultSetType(int var0) throws java.sql.SQLException;
	public abstract boolean supportsSavepoints() throws java.sql.SQLException;
	public abstract boolean supportsSchemasInDataManipulation() throws java.sql.SQLException;
	public abstract boolean supportsSchemasInIndexDefinitions() throws java.sql.SQLException;
	public abstract boolean supportsSchemasInPrivilegeDefinitions() throws java.sql.SQLException;
	public abstract boolean supportsSchemasInProcedureCalls() throws java.sql.SQLException;
	public abstract boolean supportsSchemasInTableDefinitions() throws java.sql.SQLException;
	public abstract boolean supportsSelectForUpdate() throws java.sql.SQLException;
	public abstract boolean supportsStatementPooling() throws java.sql.SQLException;
	public abstract boolean supportsStoredProcedures() throws java.sql.SQLException;
	public abstract boolean supportsSubqueriesInComparisons() throws java.sql.SQLException;
	public abstract boolean supportsSubqueriesInExists() throws java.sql.SQLException;
	public abstract boolean supportsSubqueriesInIns() throws java.sql.SQLException;
	public abstract boolean supportsSubqueriesInQuantifieds() throws java.sql.SQLException;
	public abstract boolean supportsTableCorrelationNames() throws java.sql.SQLException;
	public abstract boolean supportsTransactionIsolationLevel(int var0) throws java.sql.SQLException;
	public abstract boolean supportsTransactions() throws java.sql.SQLException;
	public abstract boolean supportsUnion() throws java.sql.SQLException;
	public abstract boolean supportsUnionAll() throws java.sql.SQLException;
	public abstract boolean updatesAreDetected(int var0) throws java.sql.SQLException;
	public abstract boolean usesLocalFilePerTable() throws java.sql.SQLException;
	public abstract boolean usesLocalFiles() throws java.sql.SQLException;
	public final static short attributeNoNulls = 0;
	public final static short attributeNullable = 1;
	public final static short attributeNullableUnknown = 2;
	public final static int bestRowNotPseudo = 1;
	public final static int bestRowPseudo = 2;
	public final static int bestRowSession = 2;
	public final static int bestRowTemporary = 0;
	public final static int bestRowTransaction = 1;
	public final static int bestRowUnknown = 0;
	public final static int columnNoNulls = 0;
	public final static int columnNullable = 1;
	public final static int columnNullableUnknown = 2;
	public final static int importedKeyCascade = 0;
	public final static int importedKeyInitiallyDeferred = 5;
	public final static int importedKeyInitiallyImmediate = 6;
	public final static int importedKeyNoAction = 3;
	public final static int importedKeyNotDeferrable = 7;
	public final static int importedKeyRestrict = 1;
	public final static int importedKeySetDefault = 4;
	public final static int importedKeySetNull = 2;
	public final static int procedureColumnIn = 1;
	public final static int procedureColumnInOut = 2;
	public final static int procedureColumnOut = 4;
	public final static int procedureColumnResult = 3;
	public final static int procedureColumnReturn = 5;
	public final static int procedureColumnUnknown = 0;
	public final static int procedureNoNulls = 0;
	public final static int procedureNoResult = 1;
	public final static int procedureNullable = 1;
	public final static int procedureNullableUnknown = 2;
	public final static int procedureResultUnknown = 0;
	public final static int procedureReturnsResult = 2;
	public final static int sqlStateSQL99 = 2;
	public final static int sqlStateXOpen = 1;
	public final static short tableIndexClustered = 1;
	public final static short tableIndexHashed = 2;
	public final static short tableIndexOther = 3;
	public final static short tableIndexStatistic = 0;
	public final static int typeNoNulls = 0;
	public final static int typeNullable = 1;
	public final static int typeNullableUnknown = 2;
	public final static int typePredBasic = 2;
	public final static int typePredChar = 1;
	public final static int typePredNone = 0;
	public final static int typeSearchable = 3;
	public final static int versionColumnNotPseudo = 1;
	public final static int versionColumnPseudo = 2;
	public final static int versionColumnUnknown = 0;
}

