<?xml version='1.0' encoding='utf-8'?>
<top>
  <package name='test.xmldoclet.sample' fqn='test.xmldoclet.sample' qn='test.xmldoclet.sample'>
   <lead/>
   <description/>

<import name='java.io'/>
<import name='java.util'/>
  <class name='Sample' fqn='test.xmldoclet.sample.Sample' qn='Sample' package='test.xmldoclet.sample' typeParam='&lt;T,K extends Serializable&gt;' modifiers='public class' superclass='Object'>
   <lead/>
   <description/>
<param name='&lt;T&gt;'>This is a T</param>
   <param name='&lt;K&gt;'>This is a K</param>
  <class name='Sample' fqn='test.xmldoclet.sample.Sample' qn='Sample' package='test.xmldoclet.sample' typeParam='&lt;T,K extends Serializable&gt;' modifiers='public class' superclass='Object'>
   <lead/>
   <description/>
<param name='&lt;T&gt;'>This is a T</param>
   <param name='&lt;K&gt;'>This is a K</param>
  <class name='Sample' fqn='test.xmldoclet.sample.Sample' qn='Sample' package='test.xmldoclet.sample' typeParam='&lt;T,K extends Serializable&gt;' modifiers='public class' superclass='Object'>
   <lead/>
   <description/>
<param name='&lt;T&gt;'>This is a T</param>
   <param name='&lt;K&gt;'>This is a K</param>
<implements name='Collection' fqn='java.util.Collection' qn='Collection&lt;String&gt;' package='java.util' local='test.xmldoclet.sample.Sample&lt;T, K extends java.io.Serializable&gt;'/>
    <method name='Sample' fqn='test.xmldoclet.sample.Sample' qn='Sample.Sample()' package='test.xmldoclet.sample' typeArgs='' modifiers='public' signature='()' flatSignature='()' isConstructor='true'>
   <lead/>
   <description/>

     </method>
    <field name='list' fqn='test.xmldoclet.sample.Sample.list' qn='Sample.list' package='test.xmldoclet.sample' modifiers='public' typeName='List&lt;Map&lt;T,K&gt;&gt;' qualifiedTypeName='java.util.List'>
   <lead/>
   <description/>

     </field>
    <method name='foo' fqn='test.xmldoclet.sample.Sample.foo' qn='Sample.foo(X,String...)' package='test.xmldoclet.sample' modifiers='public' typeName='Collection&lt;Integer&gt;' qualifiedTypeName='java.util.Collection' typeArgs='&lt;X extends Collection&lt;X&gt;&gt;' dimension='' signature='(X, java.lang.String...)' flatSignature='(X,String...)'>
   <lead/>
   <description/>

    <parameter name='x' dimension='' typeName='X' fqn='X' varargs='false'/>
    <parameter name='strings' dimension=' ...' typeName='String' fqn='java.lang.String' varargs='true'/>
     </method>
    <method name='xyz' fqn='test.xmldoclet.sample.Sample.xyz' qn='Sample.xyz()' package='test.xmldoclet.sample' modifiers='public' typeName='int' qualifiedTypeName='int' typeArgs='&lt;X&gt;' dimension='' signature='()' flatSignature='()'>
   <lead/>
   <description/>

     </method>
    <method name='method' fqn='test.xmldoclet.sample.Sample.method' qn='Sample.method(T,X)' package='test.xmldoclet.sample' modifiers='public' typeName='X extends T' qualifiedTypeName='X' typeArgs='&lt;X extends T&gt;' dimension='' signature='(T, X)' flatSignature='(T,X)'>
   <lead/>
   <description/>
<param name='&lt;X&gt;'>an X</param>
   <param name='a'>an a</param>
   <param name='b'>a b</param>
<return>whatever</return>
    <parameter name='a' dimension='' typeName='T' fqn='T' varargs='false'/>
    <parameter name='b' dimension='' typeName='X' fqn='X' varargs='false'/>
     </method>
    <method name='list' fqn='test.xmldoclet.sample.Sample.list' qn='Sample.list(List&lt;T&gt;,String&gt;)' package='test.xmldoclet.sample' modifiers='public' typeName='void' qualifiedTypeName='void' typeArgs='' dimension='' signature='(java.util.List&lt;T&gt;, java.util.List&lt;java.lang.String&gt;)' flatSignature='(List&lt;T&gt;,String&gt;)'>
   <lead/>
   <description/>

    <parameter name='a' dimension='' typeName='List&lt;T&gt;' fqn='java.util.List' varargs='false'/>
    <parameter name='b' dimension='' typeName='List&lt;String&gt;' fqn='java.util.List' varargs='false'/>
     </method>
    <method name='add' fqn='test.xmldoclet.sample.Sample.add' qn='Sample.add(String)' package='test.xmldoclet.sample' modifiers='public' typeName='boolean' qualifiedTypeName='boolean' typeArgs='' dimension='' signature='(java.lang.String)' flatSignature='(String)'>
   <lead/>
   <description/>

    <parameter name='var0' dimension='' typeName='String' fqn='java.lang.String' varargs='false'/>
     </method>
    <method name='addAll' fqn='test.xmldoclet.sample.Sample.addAll' qn='Sample.addAll(Collection&lt;?,extends,String&gt;)' package='test.xmldoclet.sample' modifiers='public' typeName='boolean' qualifiedTypeName='boolean' typeArgs='' dimension='' signature='(java.util.Collection&lt;? extends java.lang.String&gt;)' flatSignature='(Collection&lt;?,extends,String&gt;)'>
   <lead/>
   <description/>

    <parameter name='var0' dimension='' typeName='Collection&lt;? extends String&gt;' fqn='java.util.Collection' varargs='false'/>
     </method>
    <method name='clear' fqn='test.xmldoclet.sample.Sample.clear' qn='Sample.clear()' package='test.xmldoclet.sample' modifiers='public' typeName='void' qualifiedTypeName='void' typeArgs='' dimension='' signature='()' flatSignature='()'>
   <lead/>
   <description/>

     </method>
    <method name='contains' fqn='test.xmldoclet.sample.Sample.contains' qn='Sample.contains(Object)' package='test.xmldoclet.sample' modifiers='public' typeName='boolean' qualifiedTypeName='boolean' typeArgs='' dimension='' signature='(java.lang.Object)' flatSignature='(Object)'>
   <lead/>
   <description/>

    <parameter name='var0' dimension='' typeName='Object' fqn='java.lang.Object' varargs='false'/>
     </method>
    <method name='containsAll' fqn='test.xmldoclet.sample.Sample.containsAll' qn='Sample.containsAll(Collection&lt;?&gt;)' package='test.xmldoclet.sample' modifiers='public' typeName='boolean' qualifiedTypeName='boolean' typeArgs='' dimension='' signature='(java.util.Collection&lt;?&gt;)' flatSignature='(Collection&lt;?&gt;)'>
   <lead/>
   <description/>

    <parameter name='var0' dimension='' typeName='Collection&lt;?&gt;' fqn='java.util.Collection' varargs='false'/>
     </method>
    <method name='isEmpty' fqn='test.xmldoclet.sample.Sample.isEmpty' qn='Sample.isEmpty()' package='test.xmldoclet.sample' modifiers='public' typeName='boolean' qualifiedTypeName='boolean' typeArgs='' dimension='' signature='()' flatSignature='()'>
   <lead/>
   <description/>

     </method>
    <method name='iterator' fqn='test.xmldoclet.sample.Sample.iterator' qn='Sample.iterator()' package='test.xmldoclet.sample' modifiers='public' typeName='Iterator&lt;String&gt;' qualifiedTypeName='java.util.Iterator' typeArgs='' dimension='' signature='()' flatSignature='()'>
   <lead/>
   <description/>

     </method>
    <method name='remove' fqn='test.xmldoclet.sample.Sample.remove' qn='Sample.remove(Object)' package='test.xmldoclet.sample' modifiers='public' typeName='boolean' qualifiedTypeName='boolean' typeArgs='' dimension='' signature='(java.lang.Object)' flatSignature='(Object)'>
   <lead/>
   <description/>

    <parameter name='var0' dimension='' typeName='Object' fqn='java.lang.Object' varargs='false'/>
     </method>
    <method name='removeAll' fqn='test.xmldoclet.sample.Sample.removeAll' qn='Sample.removeAll(Collection&lt;?&gt;)' package='test.xmldoclet.sample' modifiers='public' typeName='boolean' qualifiedTypeName='boolean' typeArgs='' dimension='' signature='(java.util.Collection&lt;?&gt;)' flatSignature='(Collection&lt;?&gt;)'>
   <lead/>
   <description/>

    <parameter name='var0' dimension='' typeName='Collection&lt;?&gt;' fqn='java.util.Collection' varargs='false'/>
     </method>
    <method name='retainAll' fqn='test.xmldoclet.sample.Sample.retainAll' qn='Sample.retainAll(Collection&lt;?&gt;)' package='test.xmldoclet.sample' modifiers='public' typeName='boolean' qualifiedTypeName='boolean' typeArgs='' dimension='' signature='(java.util.Collection&lt;?&gt;)' flatSignature='(Collection&lt;?&gt;)'>
   <lead/>
   <description/>

    <parameter name='var0' dimension='' typeName='Collection&lt;?&gt;' fqn='java.util.Collection' varargs='false'/>
     </method>
    <method name='size' fqn='test.xmldoclet.sample.Sample.size' qn='Sample.size()' package='test.xmldoclet.sample' modifiers='public' typeName='int' qualifiedTypeName='int' typeArgs='' dimension='' signature='()' flatSignature='()'>
   <lead/>
   <description/>

     </method>
    <method name='toArray' fqn='test.xmldoclet.sample.Sample.toArray' qn='Sample.toArray()' package='test.xmldoclet.sample' modifiers='public' typeName='Object' qualifiedTypeName='java.lang.Object' typeArgs='' dimension='[]' signature='()' flatSignature='()'>
   <lead/>
   <description/>

     </method>
    <method name='toArray' fqn='test.xmldoclet.sample.Sample.toArray' qn='Sample.toArray(T[])' package='test.xmldoclet.sample' modifiers='public' typeName='T' qualifiedTypeName='T' typeArgs='&lt;T&gt;' dimension='[]' signature='(T[])' flatSignature='(T[])'>
   <lead/>
   <description/>

    <parameter name='var0' dimension='[]' typeName='T' fqn='T' varargs='false'/>
     </method>
  </class>
  </package>
</top>
