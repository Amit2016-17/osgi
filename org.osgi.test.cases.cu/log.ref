#before each run
[begin=testControlUnitConstants]
org.osgi.control.id: "org.osgi.control.id"
org.osgi.control.type: "org.osgi.control.type"
org.osgi.control.version: "org.osgi.control.version"
org.osgi.control.parent.id: "org.osgi.control.parent.id"
org.osgi.control.parent.type: "org.osgi.control.parent.type"
org.osgi.control.event.auto_receive: "org.osgi.control.event.auto_receive"
org.osgi.control.event.filter: "org.osgi.control.event.filter"
org.osgi.control.event.sync: "org.osgi.control.event.sync"
org.osgi.control.var.id: "org.osgi.control.var.id"
org.osgi.control.var.list: "org.osgi.control.var.list"
[end=testControlUnitConstants]

[begin=testCreationOfCUs]
#Creation with all arguments set to null java.lang.NullPointerException
#Creation with an unknown CU org.osgi.service.cu.admin.ControlUnitAdminException
#Creation with a ManagedControlUnit org.osgi.service.cu.admin.ControlUnitAdminException
#Creation from a CUFactory with other arguments set to null org.osgi.service.cu.ControlUnitException
#Creation from a CUFactory with an unknown method org.osgi.service.cu.ControlUnitException
#Creation from a CUFactory with wrong arguments org.osgi.service.cu.ControlUnitException
Creation from a CUFactory with correct arguments: OK
[end=testCreationOfCUs]

[begin=testDestructionOfCUs]
#Destruction with all arguments set to null java.lang.NullPointerException
#Destruction of an unknown CU org.osgi.service.cu.admin.ControlUnitAdminException
Destruction from a CUFactory: type = door, id = door.x: OK
Destruction of CU: type = door, id = door.1: OK
[end=testDestructionOfCUs]

[begin=testFindCUs]
#Find CUs with all arguments set to null:  java.lang.NullPointerException
#Find CUs with a wrong find method:  org.osgi.service.cu.ControlUnitException
Find CUs with a correct find method: OK
door.4
door.3
door.2
door.1
[end=testFindCUs]

[begin=testListCUs]
List All CU Types: OK
hip.gyro
hip
door
hip.tacho
hip.position
window
#List of Parent CUs with all arguments set to null:  java.lang.NullPointerException
List Parent CUs of a Managed CU without parents: OK
List Parent CUs of a Managed CU with parents: OK
hip.id
List Parent CUs of a CUFactory without parents: OK
List Parent CUs of a CUFactory with parents: OK
#List Parent Types with arguments set to null:  java.lang.NullPointerException
List Parent Types with an unknown CU: OK
List Parent Types of a Managed CU without parents: OK
List Parent Types of a Managed CU with parents: OK
hip
List Parent Types of a FactoryCU without parents: OK
List Parent Types of a FactoryCU with parents: OK
door
#List SubCUs of a Managed CU with arguments set to null:  java.lang.NullPointerException
List SubCUs of a Managed CU without children: OK
List SubCUs of a Managed CU with children: OK
hip.gyro.id
List SubCUs of a CUFactory without children: OK
List SubCUs of a CUFactory with children: OK
#List Sub Types with arguments set to null:  java.lang.NullPointerException
List Sub Types with an unknown CU: OK
List Sub Types of a Managed CU without children: OK
List Sub Types of a Managed CU with children: OK
hip.gyro
hip.tacho
List Sub Types of a FactoryCU without children: OK
List Sub Types of a FactoryCU with children: OK
window
#Retrieve a CU with arguments set to null:  java.lang.NullPointerException
Retrieve a CU with type unknown, id unknown: OK
Retrieve a CU with type known, id unknown: OK
Retrieve a CU with type = hip, id = hip.id: OK
CU found
Retrieve a CU with type = door, id = door.4: OK
CU found
#Retrieve Type Version of a CU with type = null:  java.lang.NullPointerException
#Retrieve Type Version of a CU with type unknown:  org.osgi.service.cu.admin.ControlUnitAdminException
Retrieve Type Version of a CU with type = hip: OK
[end=testListCUs]

[begin=testInvokeAction]
#Invoke an action with all arguments set to null:  java.lang.NullPointerException
#Invoke an unknown action:  org.osgi.service.cu.ControlUnitException
Invoke an action without arguments: OK, result = 1.0 V
#Invoke an action with wrong arguments:  org.osgi.service.cu.ControlUnitException
Invoke an action with correct arguments: OK
[end=testInvokeAction]

[begin=testQueryStateVariable]
#Query a state variable with all arguments set to null:  java.lang.NullPointerException
#Query an unknown state variable:  org.osgi.service.cu.ControlUnitException
Query a state variable: OK, result = 1
[end=testQueryStateVariable]

[begin=testControlUnit]
Access a ControlUnit: OK
type = hip.tacho
id = hip.tacho.id
Invoke an action : OK, result = false
Query a state variable value: OK, result = 1
[end=testControlUnit]

[begin=testSVListeners]
<NoFilterListener> Type = door, Id = door.4, varId = state, value = 2
<NoFilterListener> Type = window, Id = window.1, varId = state, value = 2
<EventFilterListener> Type = window, Id = window.1, varId = state, value = 2
[end=testSVListeners]

[begin=testCUListeners]
<NoFilterListener> EventType=2, CUType=window, Id=window.1
<NoFilterListener> EventType=2, CUType=window, Id=window.2
<NoFilterListener> EventType=2, CUType=window, Id=window.3
<NoFilterListener> EventType=2, CUType=window, Id=window.4
<NoFilterListener> EventType=1, CUType=window, Id=window.1
<EventFilterListener> EventType=1, CUType=window, Id=window.1
<NoFilterListener> EventType=1, CUType=window, Id=window.2
<NoFilterListener> EventType=1, CUType=window, Id=window.3
<NoFilterListener> EventType=1, CUType=window, Id=window.4
<NoFilterListener> EventType=4, CUType=door, Id=null
<NoFilterListener> EventType=4, CUType=window, Id=null
<NoFilterListener> EventType=3, CUType=door, Id=null
<NoFilterListener> EventType=3, CUType=window, Id=null
[end=testCUListeners]

[begin=testHierarchyListeners]
<NoFilterListener> EventType=1, CUType=hip.gyro, CUId=hip.gyro.id, parentType=hip, parentId=hip.id
<NoFilterListener> EventType=1, CUType=hip.tacho, CUId=hip.tacho.id, parentType=hip, parentId=hip.id
<NoFilterListener> EventType=2, CUType=hip.gyro, CUId=hip.gyro.id, parentType=hip, parentId=hip.id
<NoFilterListener> EventType=2, CUType=hip.tacho, CUId=hip.tacho.id, parentType=hip, parentId=hip.id
Change properties to attach then detach hip.position to its parent hip
<NoFilterListener> EventType=2, CUType=hip.position, CUId=hip.position.id, parentType=hip, parentId=hip.id
<NoFilterListener> EventType=1, CUType=hip.position, CUId=hip.position.id, parentType=hip, parentId=hip.id
<EventFilterListener> EventType=1, CUType=hip.position, CUId=hip.position.id, parentType=hip, parentId=hip.id
[end=testHierarchyListeners]

#after each run