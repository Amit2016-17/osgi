<?xml version='1.0'?>
<?xml-stylesheet type="text/xsl" href="xyz.xsl" alternate='yes'?>
<?xml-stylesheet type="text/xsl" href="testreport.xsl" alternate='yes'?>

<testreport
	target='/Ws/osgi/org.osgi.test.cases.log/generated/org.osgi.test.cases.log.jar'
	time='Wed Feb 10 17:25:22 CET 2010' framework='org.eclipse.osgi.launch.Equinox@643c0007'>
	<bundle location='System Bundle' modified='1265819122061' state='32'
		id='0' bsn='org.eclipse.osgi' version='3.5.1.R35x_v20090827' />
	<bundle
		location='/Ws/osgi/org.osgi.impl.service.log/generated/org.osgi.impl.service.log.jar'
		modified='1265819122742' state='32' id='1' bsn='org.osgi.impl.service.log'
		version='1.3.2.201002100525' />
	<bundle
		location='/Ws/osgi/licensed/repo/org.apache.felix.configadmin/org.apache.felix.configadmin-1.2.4.jar'
		modified='1265819122750' state='32' id='2' bsn='org.apache.felix.configadmin'
		version='1.2.4' />
	<bundle
		location='/Ws/osgi/org.osgi.test.cases.log/generated/org.osgi.test.cases.log.jar'
		modified='1265819122779' state='32' id='3' bsn='org.osgi.test.cases.log'
		version='3.0.0.201002100525' />
	<test name='testLog' class='org.osgi.test.cases.log.junit.LogTestCase'>
		<failure name='testLog(org.osgi.test.cases.log.junit.LogTestCase)'
			type='junit.framework.AssertionFailedError' message=''>
<![CDATA[
junit.framework.AssertionFailedError
	at junit.framework.Assert.fail(Assert.java:47)
	at junit.framework.Assert.fail(Assert.java:53)
	at org.osgi.test.cases.log.junit.LogTestCase.testLog(LogTestCase.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at aQute.junit.runtime.Target.doTesting(Target.java:215)
	at aQute.junit.runtime.Target.run(Target.java:57)
	at aQute.junit.runtime.Target.main(Target.java:37)
]]>
		</failure>
	</test>
	<test name='testMultipleListeners' class='org.osgi.test.cases.log.junit.LogTestCase'>
	</test>
	<test name='testSignature' class='org.osgi.test.cases.log.junit.SignatureTestCase'>
	</test>
	<coverage>

		<coverage>
			<class name='org.osgi.service.log.LogEntry' package='org.osgi.service.log'
				short='LogEntry'>
				<method pretty='Bundle LogEntry.getBundle()' public='true'
					constructor='false' name='getBundle' descriptor='()Lorg/osgi/framework/Bundle;'>
					<ref
						pretty='void LogTestCase.assertLog(LogReader[],Bundle,ServiceReference,int,String,Throwable)'
						constructor='false' name='assertLog'
						descriptor='([Lorg/osgi/test/cases/log/junit/LogReader;Lorg/osgi/framework/Bundle;Lorg/osgi/framework/ServiceReference;ILjava/lang/String;Ljava/lang/Throwable;)V' />
				</method>
				<method pretty='Throwable LogEntry.getException()' public='true'
					constructor='false' name='getException' descriptor='()Ljava/lang/Throwable;'>
					<ref
						pretty='void LogTestCase.assertLog(LogReader[],Bundle,ServiceReference,int,String,Throwable)'
						constructor='false' name='assertLog'
						descriptor='([Lorg/osgi/test/cases/log/junit/LogReader;Lorg/osgi/framework/Bundle;Lorg/osgi/framework/ServiceReference;ILjava/lang/String;Ljava/lang/Throwable;)V' />
				</method>
				<method pretty='int LogEntry.getLevel()' public='true'
					constructor='false' name='getLevel' descriptor='()I'>
					<ref
						pretty='void LogTestCase.assertLog(LogReader[],Bundle,ServiceReference,int,String,Throwable)'
						constructor='false' name='assertLog'
						descriptor='([Lorg/osgi/test/cases/log/junit/LogReader;Lorg/osgi/framework/Bundle;Lorg/osgi/framework/ServiceReference;ILjava/lang/String;Ljava/lang/Throwable;)V' />
				</method>
				<method pretty='String LogEntry.getMessage()' public='true'
					constructor='false' name='getMessage' descriptor='()Ljava/lang/String;'>
					<ref
						pretty='void LogTestCase.assertLog(LogReader[],Bundle,ServiceReference,int,String,Throwable)'
						constructor='false' name='assertLog'
						descriptor='([Lorg/osgi/test/cases/log/junit/LogReader;Lorg/osgi/framework/Bundle;Lorg/osgi/framework/ServiceReference;ILjava/lang/String;Ljava/lang/Throwable;)V' />
					<ref pretty='void LogReader.logged(LogEntry)' public='true'
						constructor='false' name='logged' descriptor='(Lorg/osgi/service/log/LogEntry;)V' />
				</method>
				<method pretty='ServiceReference LogEntry.getServiceReference()'
					public='true' constructor='false' name='getServiceReference'
					descriptor='()Lorg/osgi/framework/ServiceReference;'>
					<ref
						pretty='void LogTestCase.assertLog(LogReader[],Bundle,ServiceReference,int,String,Throwable)'
						constructor='false' name='assertLog'
						descriptor='([Lorg/osgi/test/cases/log/junit/LogReader;Lorg/osgi/framework/Bundle;Lorg/osgi/framework/ServiceReference;ILjava/lang/String;Ljava/lang/Throwable;)V' />
				</method>
				<method pretty='long LogEntry.getTime()' public='true'
					constructor='false' name='getTime' descriptor='()J'>
					<ref
						pretty='void LogTestCase.assertLog(LogReader[],Bundle,ServiceReference,int,String,Throwable)'
						constructor='false' name='assertLog'
						descriptor='([Lorg/osgi/test/cases/log/junit/LogReader;Lorg/osgi/framework/Bundle;Lorg/osgi/framework/ServiceReference;ILjava/lang/String;Ljava/lang/Throwable;)V' />
				</method>
			</class>
			<class name='org.osgi.service.log.LogListener' package='org.osgi.service.log'
				short='LogListener'>
				<method pretty='void LogListener.logged(LogEntry)' public='true'
					constructor='false' name='logged' descriptor='(Lorg/osgi/service/log/LogEntry;)V' />
			</class>
			<class name='org.osgi.service.log.LogReaderService' package='org.osgi.service.log'
				short='LogReaderService'>
				<method pretty='void LogReaderService.addLogListener(LogListener)'
					public='true' constructor='false' name='addLogListener'
					descriptor='(Lorg/osgi/service/log/LogListener;)V'>
					<ref pretty='void LogTestCase.testMultipleListeners()' public='true'
						constructor='false' name='testMultipleListeners' descriptor='()V' />
					<ref pretty='void LogTestCase.testLog()' public='true'
						constructor='false' name='testLog' descriptor='()V' />
				</method>
				<method pretty='Enumeration LogReaderService.getLog()'
					public='true' constructor='false' name='getLog' descriptor='()Ljava/util/Enumeration;' />
				<method pretty='void LogReaderService.removeLogListener(LogListener)'
					public='true' constructor='false' name='removeLogListener'
					descriptor='(Lorg/osgi/service/log/LogListener;)V'>
					<ref pretty='void LogTestCase.testMultipleListeners()' public='true'
						constructor='false' name='testMultipleListeners' descriptor='()V' />
				</method>
			</class>
			<class name='org.osgi.service.log.LogService' package='org.osgi.service.log'
				short='LogService'>
				<method pretty='void LogService.log(int,String)' public='true'
					constructor='false' name='log' descriptor='(ILjava/lang/String;)V'>
					<ref
						pretty='void LogTestCase.assertLog(LogReader[],Bundle,ServiceReference,int,String,Throwable)'
						constructor='false' name='assertLog'
						descriptor='([Lorg/osgi/test/cases/log/junit/LogReader;Lorg/osgi/framework/Bundle;Lorg/osgi/framework/ServiceReference;ILjava/lang/String;Ljava/lang/Throwable;)V' />
				</method>
				<method pretty='void LogService.log(int,String,Throwable)'
					public='true' constructor='false' name='log'
					descriptor='(ILjava/lang/String;Ljava/lang/Throwable;)V'>
					<ref
						pretty='void LogTestCase.assertLog(LogReader[],Bundle,ServiceReference,int,String,Throwable)'
						constructor='false' name='assertLog'
						descriptor='([Lorg/osgi/test/cases/log/junit/LogReader;Lorg/osgi/framework/Bundle;Lorg/osgi/framework/ServiceReference;ILjava/lang/String;Ljava/lang/Throwable;)V' />
				</method>
				<method pretty='void LogService.log(ServiceReference,int,String)'
					public='true' constructor='false' name='log'
					descriptor='(Lorg/osgi/framework/ServiceReference;ILjava/lang/String;)V'>
					<ref
						pretty='void LogTestCase.assertLog(LogReader[],Bundle,ServiceReference,int,String,Throwable)'
						constructor='false' name='assertLog'
						descriptor='([Lorg/osgi/test/cases/log/junit/LogReader;Lorg/osgi/framework/Bundle;Lorg/osgi/framework/ServiceReference;ILjava/lang/String;Ljava/lang/Throwable;)V' />
				</method>
				<method pretty='void LogService.log(ServiceReference,int,String,Throwable)'
					public='true' constructor='false' name='log'
					descriptor='(Lorg/osgi/framework/ServiceReference;ILjava/lang/String;Ljava/lang/Throwable;)V'>
					<ref
						pretty='void LogTestCase.assertLog(LogReader[],Bundle,ServiceReference,int,String,Throwable)'
						constructor='false' name='assertLog'
						descriptor='([Lorg/osgi/test/cases/log/junit/LogReader;Lorg/osgi/framework/Bundle;Lorg/osgi/framework/ServiceReference;ILjava/lang/String;Ljava/lang/Throwable;)V' />
				</method>
			</class>
		</coverage>
	</coverage>
</testreport>
