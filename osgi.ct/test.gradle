/*
 * osgi.ct Gradle test execution script
 */

if (project == rootProject) { // we are not applied from the main build
  project.layout.buildDirectory.value(project.layout.projectDirectory.dir('generated'))
  ext.riBuildDir = project.file('../osgi.ri/generated')
}

tasks.addRule('Pattern: prepct.<name>: Prepare the CT for <name>.') { taskName ->
  if (taskName.startsWith('prepct.')) {
    task(taskName) {
      ext.book = taskName - 'prepct.'
      description "Prepare the CT for ${book}."
      group 'verification'
      ext.destinationDirectory = project.objects.directoryProperty().value(project.layout.buildDirectory.dir("osgi.ct.${book}"))
      inputs.files fileTree(riBuildDir).include('osgi.ri.core*.jar', "osgi.ri.${book}*.jar")
      inputs.files fileTree(project.layout.buildDirectory).include("osgi.ct.${book}*.jar")
      doFirst {
        project.delete(destinationDirectory)
        project.mkdir(destinationDirectory)
      }
      doLast {
        inputs.files.each { jar ->
          copy {
            from zipTree(jar)
            into destinationDirectory
          }
        }
      }
    }
  }
}

tasks.addRule('Pattern: ct.<name>: Run the CT for <name>.') { taskName ->
  if (taskName.startsWith('ct.')) {
    task(taskName) {
      ext.book = taskName - 'ct.'
      description "Run the CT for ${book}."
      group 'verification'
      ext.destinationDirectory = project.objects.directoryProperty().value(project.layout.buildDirectory.dir("osgi.ct.${book}"))
      dependsOn "prepct.${book}"
      doLast {
        javaexec {
          workingDir file(destinationDirectory)
          main = '-jar' // first arg must be the bnd jar
          args file(destinationDirectory.file('jar/bnd.jar'))
          args '--exceptions'
          args 'runtests'
          args '--title', "osgi.ct.${book}"
        }.assertNormalExitValue()
      }
    }
  }
}
