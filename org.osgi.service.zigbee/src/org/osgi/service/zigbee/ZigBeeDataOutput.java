/*
 * Copyright (c) OSGi Alliance (2016). All Rights Reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.osgi.service.zigbee;

import java.io.IOException;

/**
 * The {@code ZigBeeDataOutput} interface is designed for converting java data
 * types into a series of bytes. The purpose of this interface is the same as
 * the DataOutput interface provided by java, with the difference that in this
 * interface, the generated bytes ordering is little endian, whereas in the
 * DataOutput is big endian.
 * 
 * @author $Id$
 */
public interface ZigBeeDataOutput {

	/**
	 * Appends a byte to the data output
	 * 
	 * @param value The value to append
	 */
	public void writeByte(byte value);

	/**
	 * Appends an int value to the data output.
	 * 
	 * @param value The int value to append
	 * @param size The size in bytes that have to be actually appended. The size
	 *        must be in the range (1,4]
	 *        
	 * @throws IOException If an I/O error occurs.
	 */
	public void writeInt(int value, int size) throws IOException;

	/**
	 * Appends a long to to the data output.
	 * 
	 * @param value The long value to append
	 * @param size The size in bytes that have to be actually appended. The size
	 *        must be in the range (1,8]
	 * 
	 * @throws IOException If an I/O error occurs.
	 */
	public void writeLong(long value, int size) throws IOException;

	/**
	 * Appends on the Data Output Stream a float value
	 * 
	 * @param value The float value to append
	 * @param size The size in bytes that have to be actually appended. The size
	 *        must be 2 (for semi precision floats) or 4 (for standard precision
	 *        floats)
	 * 
	 * @throws IOException If an I/O error occurs.
	 */
	public void writeFloat(float value, int size) throws IOException;

	/**
	 * Appends on the Data Output Stream a double value
	 * 
	 * @param value The double value to append
	 * 
	 * @throws IOException If an I/O error occurs.
	 */
	public void writeDouble(double value) throws IOException;

	/**
	 * Appends on the Data Output Stream a bytes value starting from bytes[0]
	 * 
	 * @param bytes The bytes value to append
	 * @param length The length in bytes that have to be actually appended.
	 * 
	 * @throws IOException If an I/O error occurs.
	 */
	public void writeBytes(byte[] bytes, int length) throws IOException;

}
