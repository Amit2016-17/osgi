/*
 * OSGi companion code Gradle script
 */

jar {
  ext.javadocIncludes = new File(docsDir, 'javadocIncludes.txt')
  outputs.file javadocIncludes
  doLast {
    project.mkdir(javadocIncludes.parent)
    javadocIncludes.text = bnd.project.getExports().collect { packageRef, attrs ->
       "${packageRef.getBinary()}/*.java"
    }.join(',')
  }
  ext.javadocVersion = new File(docsDir, 'javadocVersion.txt')
  outputs.file javadocVersion
  doLast {
    project.mkdir(javadocVersion.parent)
    def version = bnd.project.getVersion(project.name)
    javadocVersion.text = bnd.project.getReplacer().process("\${versionmask;===s;${version}}", bnd.project)
  }
}

javadoc {
  inputs.files jar
  source bnd.allSrcDirs
  ext.javadocTitle = bnd('javadoc.title', project.name)
  configure(options) {
    bottom = "${bnd.copyright_html} Licensed under the <a href=\"{@docRoot}/LICENSE.html\">OSGi Specification License, Version 2.0</a>"
    memberLevel = JavadocMemberLevel.PROTECTED
    charSet = 'UTF-8'
    encoding = 'UTF-8'
    docEncoding = 'UTF-8'
    version = false
    use = true
    splitIndex = true
    author = false
    noDeprecated = false
    noDeprecatedList = false
    noIndex = false
    noNavBar = false
    noTree = false
    tags = ['Immutable:t:"Immutable"',
            'ThreadSafe:t:"ThreadSafe"',
            'NotThreadSafe:t:"NotThreadSafe"',
            'GuardedBy:mf:"Guarded By:"',
            'security:m:"Required Permissions"',
            'noimplement:t:"Consumers of this API must not implement this interface"']
    links('http://docs.oracle.com/javase/8/docs/api/')
  }
  // compute dependencies on other javadoc builds based upon the classpath
  def pattern = project.name.startsWith('osgi.') ? ~/^(osgi\.([^\/]*))/ : ~/^(org\.osgi\.([^\/]*))/
  compileJava.classpath.each {
    def entry = rootProject.relativePath(it).replace(File.separatorChar, '/' as char)
    def matcher = pattern.matcher(entry)
    if (matcher) {
      def linkProject = project(":${matcher[0][1]}")
      dependsOn linkProject.javadoc
    }
  }
  /* Turn off javadoc 8 overly pedantic lint checking */
  if (JavaVersion.current().isJava8Compatible()) {
    options.addStringOption('Xdoclint:none', '-quiet') 
  }
  doFirst {
    project.delete(destinationDir)
    def javadocTitleVersion = project.name.startsWith('osgi.') ? "Release ${bnd.osgi_release}" : "Version ${jar.javadocVersion.text}"
    options.docTitle = "OSGi&trade; ${javadocTitle} ${javadocTitleVersion}"
    options.windowTitle = "OSGi ${javadocTitle} ${javadocTitleVersion}"
    options.header = "<b>OSGi&trade; ${javadocTitle}</b><br/>${javadocTitleVersion}"
    include jar.javadocIncludes.text.tokenize(',')
    compileJava.classpath.each {
      def entry = rootProject.relativePath(it).replace(File.separatorChar, '/' as char)
      def matcher = pattern.matcher(entry)
      if (matcher) {
        def linkProject = project(":${matcher[0][1]}")
        options.linksOffline("../../${linkProject.name}/${linkProject.jar.javadocVersion.text}", linkProject.javadoc.destinationDir.absolutePath)
      }
    }
    logger.info 'Title         : {}', options.windowTitle
    logger.info 'Packages      : {}', includes
    logger.info 'Destdir       : {}', destinationDir
  }
  def legal = rootProject.file('osgi.companion/legal/javadoc')
  inputs.dir legal
  doLast {
    copy {
      from legal
      into destinationDir
    }
  }
}

release {
  dependsOn javadoc
}
