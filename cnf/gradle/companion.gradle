/*
 * OSGi companion code Gradle script
 */

version bnd('spec.version', bnd('osgi.version'))

ext.javadocSpecs = bnd("${project.name}.specs", project.name)
ext.javadocTitle = bnd('javadoc.title', project.name)

task javadoc(overwrite: true, type: Javadoc) {
  description 'Build the javadoc.'
  group 'documentation'
  dependsOn compileJava
  classpath = configurations.compile
  source bnd.allSrcDirs
  javadocSpecs.split(/\s*,\s*/).each {
    include it.replace('.','/')+'/**/*.java'
  }
  configure(options) {
    docTitle = "OSGi&trade; ${javadocTitle} Release ${bnd.osgi_release}"
    windowTitle = "OSGi ${javadocTitle} Release ${bnd.osgi_release}"
    bottom = "<font size=-1>${bnd.copyright_html} Licensed under the <a href=\"{@docRoot}/LICENSE.html\">OSGi Specification License, Version 2.0</a></font>"
    header = "<b>OSGi&trade; ${javadocTitle}</b><br/><font size=-1>Release ${bnd.osgi_release}</font>"
    memberLevel = JavadocMemberLevel.PROTECTED
    charSet = 'UTF-8'
    encoding = 'UTF-8'
    docEncoding = 'UTF-8'
    version = false
    use = true
    splitIndex = true
    author = false
    noDeprecated = false
    noDeprecatedList = false
    noIndex = false
    noNavBar = false
    noTree = false
    tags = ['Immutable:t:"Immutable"',
            'ThreadSafe:t:"ThreadSafe"',
            'NotThreadSafe:t:"NotThreadSafe"',
            'GuardedBy:mf:"Guarded By:"',
            'security:m:"Required Permissions"',
            'noimplement:t:"Consumers of this API must not implement this interface"']
    classpath bnd.project.bootclasspath*.file
    links('http://docs.oracle.com/javase/6/docs/api/')
  }
  if (project.name.startsWith('osgi.')) {
    // compute dependencies on other javadoc builds based upon the classpath
    classpath.each {
      def matcher = rootProject.relativePath(it) =~ /^(osgi\.([^\/]*))/
      if (matcher) {
        dependsOn ":${matcher[0][1]}:javadoc"
        options.linksOffline("../${matcher[0][2]}", rootProject.file("${matcher[0][1]}/${relativePath(destinationDir)}").absolutePath)
      }
    }
  }
  /* Turn off javadoc 8 overly pedantic lint checking */
  if (JavaVersion.current().isJava8Compatible()) {
    options.addStringOption('Xdoclint:none', '-quiet') 
  }
  doFirst {
    project.delete(destinationDir)
    logger.info "Title         : ${options.windowTitle}"
    logger.info "Packages      : ${javadocSpecs}"
    logger.info "Destdir       : ${destinationDir}"
  }
  def license = rootProject.file('osgi.companion/legal/OSGiSpecificationLicense-v20.html')
  inputs.file license
  doLast {
    copy {
      from license
      into destinationDir
      rename {
        'LICENSE.html'
      }
    }
  }
}

task(type: Jar, 'javadocJar') {
  description 'Jar the javadoc.'
  group 'documentation'
  dependsOn javadoc
  from javadoc.destinationDir
  classifier 'javadoc'
}

task(type: Jar, 'sourcesJar') {
  description 'Jar the sources.'
  group 'documentation'
  dependsOn jar
  from zipTree(jar.archivePath).matching {
    include 'OSGI-OPT/src/**'
  }
  eachFile { FileCopyDetails fcp ->
    fcp.path = fcp.path - 'OSGI-OPT/src/'
  }
  includeEmptyDirs = false
  classifier = 'sources'
}

assemble {
  dependsOn javadocJar, sourcesJar
}
