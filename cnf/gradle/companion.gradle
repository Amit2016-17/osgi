/*
 * OSGi companion code Gradle script
 */

jar {
  ext.javadocIncludes = new File(docsDir, 'javadoc.includes')
  outputs.file javadocIncludes
  doLast {
    project.mkdir(javadocIncludes.parent)
    javadocIncludes.text = bnd.project.getExports().collect { packageRef, attrs ->
       "${packageRef.getBinary()}/*.java"
    }.join(',')
  }
}

javadoc {
  inputs.files jar
  source bnd.allSrcDirs
  ext.javadocTitle = bnd('javadoc.title', project.name)
  configure(options) {
    docTitle = "OSGi&trade; ${javadocTitle} Release ${bnd.osgi_release}"
    windowTitle = "OSGi ${javadocTitle} Release ${bnd.osgi_release}"
    bottom = "${bnd.copyright_html} Licensed under the <a href=\"{@docRoot}/LICENSE.html\">OSGi Specification License, Version 2.0</a>"
    header = "<b>OSGi&trade; ${javadocTitle}</b><br/>Release ${bnd.osgi_release}"
    memberLevel = JavadocMemberLevel.PROTECTED
    charSet = 'UTF-8'
    encoding = 'UTF-8'
    docEncoding = 'UTF-8'
    version = false
    use = true
    splitIndex = true
    author = false
    noDeprecated = false
    noDeprecatedList = false
    noIndex = false
    noNavBar = false
    noTree = false
    tags = ['Immutable:t:"Immutable"',
            'ThreadSafe:t:"ThreadSafe"',
            'NotThreadSafe:t:"NotThreadSafe"',
            'GuardedBy:mf:"Guarded By:"',
            'security:m:"Required Permissions"',
            'noimplement:t:"Consumers of this API must not implement this interface"']
    links('http://docs.oracle.com/javase/8/docs/api/')
  }
  if (project.name.startsWith('osgi.')) {
    // compute dependencies on other javadoc builds based upon the classpath
    compileJava.classpath.each {
      def entry = rootProject.relativePath(it).replace(File.separatorChar, '/' as char)
      def matcher = entry =~ /^(osgi\.([^\/]*))/
      if (matcher) {
        def linkProject = project(":${matcher[0][1]}")
        dependsOn linkProject.javadoc
        options.linksOffline("../../${matcher[0][1]}/${linkProject.bnd.osgi_version}", linkProject.javadoc.destinationDir.absolutePath)
      }
    }
  }
  /* Turn off javadoc 8 overly pedantic lint checking */
  if (JavaVersion.current().isJava8Compatible()) {
    options.addStringOption('Xdoclint:none', '-quiet') 
  }
  doFirst {
    project.delete(destinationDir)
    include jar.javadocIncludes.text.tokenize(',')
    logger.info 'Title         : {}', options.windowTitle
    logger.info 'Packages      : {}', includes
    logger.info 'Destdir       : {}', destinationDir
  }
  def legal = rootProject.file('osgi.companion/legal/javadoc')
  inputs.dir legal
  doLast {
    copy {
      from legal
      into destinationDir
    }
  }
}

release {
  dependsOn javadoc
}
