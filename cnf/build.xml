<?xml version="1.0" encoding="UTF-8"?>
<!--
	The is main OSGi build file. It is included from projects
	as is. 
-->
<project name="master" default="none">
	<!-- 
	     INIT
	     The target is a dependent of all other targets.
	     It's purpose is to set up the environment only once
	     and avoid it being repeatedly done for each antcall.
	-->
	<target name="init" unless="initialized">
		<dirname property="project" file="${ant.file}" />
		<dirname property="workspace" file="${project}" />
		<basename property="project.name" file="${project}" />
		<property environment="env" />

		<!-- Task defs, removed the recursive search for performance
		     reasons 
		-->
		<taskdef resource="org/osgi/tools/btool/taskdef.properties"
		         classpath="${workspace}/cnf/jar/btool.jar" />
		<taskdef resource="net/sf/antcontrib/antcontrib.properties"
		         classpath="${workspace}/cnf/ant-contrib/ant-contrib-0.6.jar" />

		<!-- Include properies files in the following order:
				Project properties
				User properties
				Default properties
		-->
		<property file="${project}/build.properties" />
		<property file="${env.HOME}/osgi.properties" />
		<property file="${workspace}/cnf/build.properties" />

		<!-- get the classpath and build info from eclipse -->
		<btool eclipse="${project}" />
		<property name="project.bootclasspath" value="" />

		<!-- mark init has been run -->
		<property name="initialized" value="set" />
	</target>

	<!-- 
		PUBLISH
		The main target. It will build the jar file(s) and publish them.
	-->
	<target name="publish" depends="init,dependencies,compile,jars">
	</target>

	<!-- 
		DEPENDENCIES
		Build project dependencies.
	-->
	<target name="dependencies" depends="init">
		<echo>Publish ${project.name}</echo>
		<subant target="publish"
		        inheritAll="false"
		        buildpath="${project.buildpath}">
			<property name="release.dir" value="${project}" />
		</subant>
	</target>

	<!--
	     COMPILE
	     Compile the sources. 
	-->
	<target name="compile" depends="init" if="project.sourcepath">
		<echo>Compile ${project.sourcepath} 
		${project.bootclasspath}
		${project.classpath}</echo>

		<javac fork="yes"
		       executable="${javac}"
		       srcdir="${project.sourcepath}"
		       destdir="${project.bindir}"
		       classpath="${project.classpath}"
		       bootclasspath="${project.bootclasspath}"
		       deprecation="true"
		       listfiles="true"
		       target="${javac.target}"
		       source="${javac.source}"
		       debug="${javac.debug}"
		       includeAntRuntime="no"
		       verbose="${verbose}" />
	</target>

	<!-- 
		JARS
		Iterate of the jars to build.
	-->
	<target name="jars" depends="init" if="jars.compile.order">
		<echo>JARs ${jars.compile.order}</echo>
		<delete verbose="${verbose}">
			<fileset dir="${project}" includes="${jars.compile.order}" />
		</delete>

		<!-- For each jar file, build it -->
		<foreach list="${jars.compile.order}"
		         delimiter=" ,"
		         target="-jar"
		         param="item.jarFile"
		         inheritAll="true" />
		<!-- Release each JAR file -->
		<foreach list="${bin.includes}"
		         delimiter=" ,"
		         target="-release"
		         param="item.jarFile"
		         inheritAll="true" />
	</target>

	<!--
	     JAR
	     Build the jar file with btool. Due to ants fantastic lack of
	     variable handling, we have to refer to giving btool property names
	     so it can do the expansion of properties itself ...
	     
	     eclipse             project directory
	     analyse             Analyse the manifest
	     showmanifest        List the manifest on the console
	     silent              Suppress messages
	     includeProperty     name of the property that is a 
	                         list of include files (may rename with 
	                         an = in the name)
	     expandProperty      name of the property that is a list
	                         of package names. If the package name
	                         is enclosed in square brackets, it is
	                         assumed to be exported
	     contentFoldersProperty List of source folders
	     ipaProperty         Property name for ipa parameters. ipa
	                         is the file used in initial provisioning
	     ignoreVersions      Do not use version on automatic import/export
	-->
	<target name="-jar" depends="init">
		<echo>JAR ${item.jarFile}</echo>
		<btool jar="${project}/${item.jarFile}"
		       eclipse="${project}"
		       analyse="${btool.analyse}"
		       showmanifest="${btool.showmanifest}"
		       sources="${btool.sources}"
		       includeProperty="include.${item.jarFile}"
		       expandProperty="expand.${item.jarFile}"
		       contentFoldersProperty="source.${item.jarFile}"
		       excludeImportProperty="excludeImport.${item.jarFile}"
		       includeExportProperty="includeExport.${item.jarFile}"
		       ipaProperty="ipa.${item.jarFile}"
		       verbose="${verbose}"
		       ignoreVersions="${btool.noversion}" />
	</target>

	<!--
	    RELEASE
	    Copy the JAR file to the osgi.released directory.
	-->
	<target name="-release" depends="init" if="release.dir">
		<copy overwrite="true"
		      todir="${release.dir}"
		      verbose="${verbose}"
		      file="${item.jarFile}" />
	</target>

	<!--
	     CLEAN
	-->
	<target name="clean" depends="init,localclean">
		<subant target="clean"
		        inheritAll="false"
		        buildpath="${project.buildpath}">
		</subant>
	</target>

	<target name="localclean" depends="init">
		<delete quiet="true" includeEmptyDirs="true" verbose="${verbose}">
			<fileset dir="${project.bindir}" includes="**/*.bak **/*.class" />
			<fileset dir="${project}"
			         includes="**/*.bak **/~* ${jars.compile.order}" />
		</delete>
	</target>

	<!--
	     ECHO
	-->
	<target name="echo" depends="init">
		<echo>BIN:   ${project.bindir}</echo>
		<echo>SRCE:  ${project.sourcepath}</echo>
		<echo>BOOT:  ${project.bootclasspath}</echo>
		<echo>CP:    ${project.classpath}</echo>
		<echo>NAME:  ${project.name}</echo>
		<echo>VERS:  ${project.version}</echo>
		<echo>CAT:   ${project.category}</echo>
		<echo>DEP:   ${project.buildpath}</echo>
		<echo>VRB:   ${verbose}</echo>
		<echo>JAVAC: ${javac}</echo>
	</target>

	<!--
	     Default Target
	-->
	<target name="none">
		<fail message="This ant script should never be directly called." />
	</target>

</project>
