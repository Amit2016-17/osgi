<?xml version="1.0" encoding="UTF-8"?>
<!--
	The is main OSGi build file. It is included from projects
	as is.
	
	It is described in http://www2.osgi.org/members/Build/HomePage 
-->
<project name="master" default="none">

	<target name="all" depends="publish">
		<!-- all target is a synonym for publish target -->
	</target>
	<target name="publish" depends="init,dependencies,compile,jars,release,deploy">
		<echo>Exit project ${project.name}</echo>
	</target>

	<target name="deploy" depends="init,dependencies,compile,jars,release" unless="nodeploy">
		<bnddeploy>
			<fileset dir="${target}" includes="${bin.includes}" />
		</bnddeploy>
	</target>

	<!-- 
	     INIT
	     The target is a dependent of all other targets.
	     It's purpose is to set up the environment only once
	     and avoid it being repeatedly done for each antcall.
	-->

	<target name="init" unless="initialized">
		<dirname property="projectdir" file="${ant.file}" />
		<dirname property="workspacedir" file="${projectdir}" />
		<taskdef resource="aQute/bnd/ant/taskdef.properties" classpath="${workspacedir}/licensed/repo/biz.aQute.bnd/biz.aQute.bnd-latest.jar" />

		<available file="bnd.bnd" property="use.bnd" />

		<bndproperties basedir="${projectdir}" print="${print}" />

		<!-- Now we have the same properties set as bnd 
		-->

		<taskdef resource="org/osgi/tools/build/ant/taskdef.properties" classpath="${repo}/org.osgi.tools.btool/org.osgi.tools.btool-latest.jar" />
		<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="${workspace}/licensed/ant-contrib/ant-contrib-0.6.jar" />

		<btool eclipse="${project}" prebuild="${prebuild}" />

		<!-- mark init has been run -->
		<property name="initialized" value="set" />
		<echo>Enter project ${project.name}</echo>
	</target>

	<!-- 
		DEPENDENCIES
		Build project dependencies.
	-->
	<target name="dependencies" depends="init" if="project.buildpath">
		<subant target="publish" inheritAll="false" buildpath="${project.buildpath}">
			<property name="release.dir" value="${target}" />
		</subant>
	</target>

	<!--
	     Test
	-->
	<target name="test" depends="jars">
		<!-- add the test env (junit, osgi tester) -->
		<echo>${project.classpath}</echo>
		<junit printsummary="yes" haltonfailure="yes">
			<classpath>
				<pathelement path="${project.classpath}" />
				<pathelement location="${licensed-repo}/com.springsource.junit/com.springsource.junit-3.8.2.jar" />
				<pathelement location="${licensed-repo}/biz.aQute.bnd/biz.aQute.bnd-latest.jar" />
			</classpath>

			<formatter type="plain" />

			<batchtest fork="yes" todir="${target}">
				<fileset dir="${src}">
					<include name="**/*Test*.java" />
					<exclude name="**/AllTests.java" />
					<exclude name="**/*TestCase*.java" />
				</fileset>
			</batchtest>
		</junit>

	</target>

	<!--
	     COMPILE
	     Compile the sources. 
	-->
	<target name="compile" depends="init" if="project.sourcepath">
		<echo>"${project.sourcepath}"</echo>
		<javac fork="yes" executable="${javac}" srcdir="${project.sourcepath}" destdir="${project.bindir}" classpath="${project.classpath}" bootclasspath="${project.bootclasspath}" deprecation="true" listfiles="true" target="${javac.target}" source="${javac.source}" debug="${javac.debug}" includeAntRuntime="no" verbose="${verbose}" />
	</target>

	<!-- 
		JARS
		Iterate of the jars to build.
	-->
	<target name="jars" depends="-mktarget,jars-btool,jars-bnd,copy-from">
	</target>

	<target name="-mktarget">
		<mkdir dir="${target}" />
	</target>

	<target name="copy-from" if="copy.from">
		<copy overwrite="true" file="${copy.from}" tofile="${target}/${p}.jar" preservelastmodified="true" />
	</target>

	<!-- Use the older btool tool -->
	<target name="jars-btool" depends="init" if="jars.compile.order">
		<echo>JARs ${jars.compile.order}</echo>
		<!-- For each jar file, build it -->
		<foreach list="${jars.compile.order}" delimiter=" ," target="-jar" param="item.jarFile" inheritAll="true" />
	</target>

	<!-- Use the next generation bnd tool -->
	<target name="jars-bnd" depends="init" if="use.bnd">
		<echo>JARs ${use.bnd}</echo>
		<antcall target="-interleave">
			<param name="x" value="before.${item.jarFile}" />
		</antcall>
		<bnd eclipse="true" failok="false" exceptions="true" files="bnd.bnd" output="${target}" />
	</target>

	<target name="-jar" depends="-btool,-signjar" />

	<!--
	     BTOOL
	     Build the jar file with btool. Due to ants fantastic lack of
	     variable handling, we have to refer to giving btool property names
	     so it can do the expansion of properties itself ...
	     
	     eclipse             project directory
	     analyse             Analyse the manifest
	     showmanifest        List the manifest on the console
	     manifestVersion	 Manifest version
	     silent              Suppress messages
	     includeProperty     name of the property that is a 
	                         list of include files (may rename with 
	                         an = in the name)
	     expandProperty      name of the property that is a list
	                         of package names. If the package name
	                         is enclosed in square brackets, it is
	                         assumed to be exported
	     ipaProperty         Property name for ipa parameters. ipa
	                         is the file used in initial provisioning
	     ignoreVersions      Do not use version on automatic import/export
	     compress			true/false
	-->
	<target name="-btool">
		<echo>JAR ${item.jarFile}</echo>
		<antcall target="-interleave">
			<param name="x" value="before.${item.jarFile}" />
		</antcall>

		<btool jar="${target}/${item.jarFile}" failok="${btool.failok}" eclipse="${project}" analyse="${btool.analyse}" showmanifest="${btool.showmanifest}" includeProperty="include.${item.jarFile}" expandProperty="expand.${item.jarFile}" contentFoldersProperty="source.${item.jarFile}" excludeImportProperty="excludeImport.${item.jarFile}" includeExportProperty="includeExport.${item.jarFile}" ipaProperty="ipa.${item.jarFile}" verbose="${verbose}" sources="${btool.sources}" ignoreVersions="${btool.noversion}" manifestVersion="${btool.manifestVersion}" modified="${base.modified}" extraRoots="root.${item.jarFile}" noExtraHeaders="${btool.noextraheaders}" compress="${btool.compressed}" doNotCopy="${doNotCopy}" />
	</target>

	<target name="-signjar" if="sign.${item.jarFile}">
		<signjar jar="${target}/${item.jarFile}" signedjar="${target}/${item.jarFile}.signed" keystore="${workspace}/cnf/certificate/.keystore" storepass="testtest" keypass="testtest" alias="test" />
	</target>


	<!--
	  If you specify before.<jarfile>.jar=target, then we will
	  call this target before the creation of the jar file.
	-->
	<target name="-interleave" if="${x}">
		<indirect inputName="${x}" outputName="before" />
		<antcall target="${before}" />
	</target>

	<!--
	    RELEASE
	    Copy the JAR file to the osgi.released directory.
	-->
	<target name="release" depends="init" if="release.dir">
		<copy todir="${release.dir}" verbose="${verbose}" preservelastmodified="true">
			<fileset dir="${target}" includes="${bin.includes}" />
		</copy>
	</target>

	<!--
	     CLEAN
	-->
	<target name="deepclean" depends="init,clean" if="project.buildpath">
		<subant target="deepclean" inheritAll="false" buildpath="${project.buildpath}" />
	</target>

	<target name="clean" depends="init">
		<delete quiet="true" includeEmptyDirs="true" verbose="${verbose}">
			<fileset dir="${project.bindir}" includes="**/*.bak **/*.class" />
			<fileset dir="${project}" includes="**/*.bak **/~* *.jar" />
			<fileset dir="${target}" />
		</delete>
	</target>

	<!--
	     ECHO
	-->
	<target name="echo" depends="init">
		<echo>verbose:                ${verbose}</echo>
		<echo>project.bindir:         ${project.bindir}</echo>
		<echo>project.sourcepath:     ${project.sourcepath}</echo>
		<echo>project.bootclasspath:  ${project.bootclasspath}</echo>
		<echo>project.classpath:      ${project.classpath}</echo>
		<echo>project.name:           ${project.name}</echo>
		<echo>project.version:        ${project.version}</echo>
		<echo>project.buildpath:      ${project.buildpath}</echo>
		<echo>javac:                  ${javac}</echo>
		<echo>p:                      ${p}</echo>
		<echo>btool.manifestVersion:  ${btool.manifestVersion}</echo>
		<echo>btool.analyse:          ${btool.analyse}</echo>
		<echo>btool.showmanifest:     ${btool.showmanifest}</echo>
		<echo>btool.noversion:     	  ${btool.noversion}</echo>
		<echo>btool.sources:     	  ${btool.sources}</echo>
		<echo>btool.noextraheaders:   ${btool.noextraheaders}</echo>
		<echo>jars.compile.order:     ${jars.compile.order}</echo>
		<echo>bin.includes:           ${bin.includes}</echo>
		<echo>prebuild:               ${prebuild}</echo>
		<echo>base.modfied:           ${base.modified} (${base.modified.readable})</echo>
		<echo>target:                 ${target}</echo>
		<echo>licensed repo:          ${licensed-repo}</echo>
		<echo>repo:                   ${repo}</echo>
		<echo>use.bnd:                ${use.bnd}</echo>
		<echo>nodeploy:               ${nodeploy}</echo>

	</target>

	<!--
	     Default Target
	-->
	<target name="none">
		<fail message="This ant script should never be directly called." />
	</target>

	<!--
		Check out the projects that are part of the build.
	-->
	<target name="co" depends="init">
		<cvs cvsRoot=":pserver:www2.osgi.org:/cvshome/build" dest="${workspace}" package="${specs},${impls},${tests}" />
	</target>
</project>
