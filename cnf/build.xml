<?xml version="1.0" encoding="UTF-8"?>
<!--
	The is main OSGi build file. It is included from projects
	as is.
	
	It is described in http://www2.osgi.org/members/Build/HomePage 
-->
<project name="master" default="none">

	<target name="all" depends="publish">
		<!-- all target is a synonym for publish target -->
	</target>
	<target name="publish" depends="init,dependencies,compile,jars,release,deploy">
		<echo>Exit project ${project.name}</echo>
	</target>

	<target name="deploy" depends="init,dependencies,compile,jars,release" unless="nodeploy">
		<bnddeploy>
			<fileset dir="${target}" includes="${bin.includes}" />
		</bnddeploy>
	</target>

	<!-- 
	     INIT
	     The target is a dependent of all other targets.
	     It's purpose is to set up the environment only once
	     and avoid it being repeatedly done for each antcall.
	-->

	<target name="init" unless="initialized">
		<!-- The following two properties are local to this file to get bootstrapped. 
		   The actual properties to be used should be project.dir, and project.workspace. These
		properties are set by bnd -->
		<dirname property="projectdir" file="${ant.file}" />
		<dirname property="workspacedir" file="${projectdir}" />
		
		<taskdef resource="aQute/bnd/ant/taskdef.properties" classpath="${workspacedir}/licensed/repo/biz.aQute.bnd/biz.aQute.bnd-latest.jar" />

		<bndprepare basedir="${projectdir}" print="false" top="${top}"/>
		<!-- Now we have the same properties set as bnd 
		-->
			
		<taskdef resource="org/osgi/tools/build/ant/taskdef.properties" classpath="${repo}/org.osgi.tools.btool/org.osgi.tools.btool-latest.jar" />
		<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="${project.workspace}/licensed/ant-contrib/ant-contrib-0.6.jar" />

		
		<!-- mark init has been run -->
		<property name="initialized" value="set" />
		<echo>Enter project ${project.name} (${top})</echo>
	</target>

	<!-- 
		DEPENDENCIES
		Build project dependencies. The execution of the dependencies is
		restricted to 1 level because bnd calculates the dependencies. This
		is controlled through the top property. If this is set, the method
		will not execute. This method will set that property and it will set
		it in the child ant.
	-->
	<target name="dependencies" depends="init" if="project.dependson" unless="top">
		<property name="top" value="${target}" />
		
		<!-- Have to compile the bnd plugins before ... -->		
        <subant target="compile" inheritAll="false" buildpath="../cnf">
            <property name="top" value="${top}" />
        </subant>
		
		<!-- Nowbuild all dependends on their dependency order -->
		<subant target="publish" inheritAll="false" buildpath="${project.dependson}">
			<property name="top" value="${top}" />
		</subant>
	</target>

	<!--
	     Test
	-->
	<target name="test" depends="compile">
		<bnd command="test" exceptions="true" basedir="${projectdir}"/>
	</target>

	<!--
	     COMPILE
	     Compile the sources. 
	-->
	<target name="compile" depends="init" if="project.sourcepath">
		<echo>${project.sourcepath} ${project.output}</echo>
		<mkdir dir="${project.output}"/>
		<javac fork="yes" 
			executable="${javac}" 
			srcdir="${project.sourcepath}" 
			destdir="${project.output}" 
			classpath="${project.buildpath}" 
			bootclasspath="${project.bootclasspath}" 
			deprecation="true" 
			listfiles="true" 
			target="${javac.target}" 
			source="${javac.source}" 
			debug="${javac.debug}" 
			includeAntRuntime="no" 
			verbose="${verbose}" />
		
		<!-- 
		  The eclipse compiler copies resources but the Javac compiler does not
		  If ${src} == ${bin} then this is not necessary, but unfortunately, now 
		  it is. 
		--> 
		<copy todir="${project.output}" verbose="${verbose}" preservelastmodified="true">
			<fileset dir="${project.sourcepath}">
                <exclude name="**/*.java"/>
                <exclude name="**/*.class"/>
			</fileset>
		</copy>
	</target>

	<!-- 
		JARS
		Iterate of the jars to build.
	-->
	<target name="jars" depends="-mktarget,jars-bnd,copy-from">
	</target>

	<target name="-mktarget" if="target">
		<mkdir dir="${target}" />
	</target>

	<target name="copy-from" if="copy.from">
		<copy overwrite="true" file="${copy.from}" tofile="${target}/${p}.jar" preservelastmodified="true" />
	</target>

	<!-- Use the next generation bnd tool -->
	<target name="jars-bnd" depends="init">
		<antcall target="-interleave">
			<param name="x" value="before.${item.jarFile}" />
		</antcall>
		<bndproject basedir="${projectdir}"/>
	</target>


	<target name="-signjar" if="sign.${item.jarFile}">
		<signjar jar="${target}/${item.jarFile}" signedjar="${target}/${item.jarFile}.signed" keystore="${project.workspace}/cnf/keystore" storepass="testtest" keypass="testtest" alias="test" />
	</target>


	<!--
	  If you specify before.<jarfile>.jar=target, then we will
	  call this target before the creation of the jar file.
	-->
	<target name="-interleave" if="${x}">
		<indirect inputName="${x}" outputName="before" />
		<antcall target="${before}" />
	</target>

	<!--
	    RELEASE
	    Copy the JAR file to the osgi.released directory.
	-->
	<target name="release" depends="init" if="top">
		<!--
		<copy todir="${top}" verbose="${verbose}" preservelastmodified="true">
			<fileset dir="${target}" includes="${bin.includes}" />
		</copy> -->
	</target>

	<!--
	     CLEAN
	-->
	<target name="deepclean" depends="init,clean" if="project.dependson">
		<subant target="clean" inheritAll="false" buildpath="${project.dependson}"/>
	</target>

	<target name="clean" depends="init">
		<delete quiet="true" includeEmptyDirs="true" verbose="${verbose}">
			<fileset dir="${project.output}" />
			<fileset dir="${target}" />
		</delete>
	</target>

	<!--
	     ECHO
	-->
	<target name="echo" depends="init">
		<echo>verbose:                ${verbose}</echo>
		<echo>project.name:           ${project.name}</echo>
		<echo>project.output:         ${project.output}</echo>
		<echo>project.sourcepath:     ${project.sourcepath}</echo>
		<echo>project.allsourcepath:  ${project.allsourcepath}</echo>
		<echo>project.buildpath:      ${project.buildpath}</echo>
		<echo>project.testpath:       ${project.testpath}</echo>
		<echo>project.dependson:      ${project.dependson}</echo>
		<echo>project.bootclasspath:  ${project.bootclasspath}</echo>
		<echo>project.workspace:      ${project.workspace}</echo>
		<echo>javac:                  ${javac}</echo>
		<echo>p:                      ${p}</echo>
		<echo>btool.manifestVersion:  ${btool.manifestVersion}</echo>
		<echo>btool.analyse:          ${btool.analyse}</echo>
		<echo>btool.showmanifest:     ${btool.showmanifest}</echo>
		<echo>btool.noversion:     	  ${btool.noversion}</echo>
		<echo>btool.sources:     	  ${btool.sources}</echo>
		<echo>btool.noextraheaders:   ${btool.noextraheaders}</echo>
		<echo>jars.compile.order:     ${jars.compile.order}</echo>
		<echo>bin.includes:           ${bin.includes}</echo>
		<echo>base.modfied:           ${base.modified} (${base.modified.readable})</echo>
		<echo>target:                 ${target}</echo>
		<echo>licensed repo:          ${licensed-repo}</echo>
		<echo>repo:                   ${repo}</echo>
		<echo>nodeploy:               ${nodeploy}</echo>
		<echo>-dependson:             ${project.dependson}</echo>

	</target>

	<!--
	     Default Target
	-->
	<target name="none">
		<fail message="This ant script should never be directly called." />
	</target>

</project>
