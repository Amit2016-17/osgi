# Very general
project.dependson       = ${p-dependson;:}
project.bootclasspath   = ${p-bootclasspath;:}
project.buildpath       = ${p-buildpath;:}
project.sourcepath      = ${p-sourcepath;:}
project.allsourcepath   = ${p-allsourcepath;:}
project.output          = ${p-output}
project.testpath        = ${p-testpath;:}
project.workspace		= ${workspace}
project.dir				= ${project}

-verbose				= true
verbose					= false
src                     = src
bin                     = bin
target-dir				= generated
target					= ${project}/${target-dir}
build					= ${workspace}/cnf
licensed				= ${workspace}/licensed
repo					= ${build}/repo
licensed-repo			= ${licensed}/repo
project.name            = ${basename;${project}}
p			            = ${project.name}
prebuild				= 

# Java compiler options
java 					= java
javac 					= javac
javac.debug				= on
javac.source 			= 1.8
javac.target 			= 1.8
javac.profile           = compact1



#Bnd options
-sources               	= true
-sourcepath             = ${project}/${src}

-plugin = aQute.lib.deployer.FileRepo; \
            name='Main'; \
            location="${repo}"; \
            readonly=true, \
          aQute.lib.deployer.FileRepo; \
            name='Licensed'; \
            location="${licensed-repo}"; \
            readonly=true, \
          aQute.bnd.signing.JartoolSigner; \
            keystore="${build}/keystore"; \
            keypass=testtest; \
            storepass=testtest, \
          Packaging; \
            path:="${build}/${bin}"; \
            command:=-pack, \
          CTPackaging; \
            path:="${build}/${bin}"; \
            command:=-ctpack, \
          SignatureTest; \
            path:="${build}/${bin}"; \
            command:="-signaturetest"


-make                   =  \
  (*).(jar);                             type=bnd;  recipe="bnd/$1.bnd"


# Time options
# base.modified is used by bnd to not make when files are not changed
base.modified			= ${fmodified;${build}/ant/master.xml,${build}/build.bnd,${project}/bnd.bnd,${project}/build.xml}
base.modified.readable	= ${long2date;${base.modified}}
project.build			= ${tstamp;yyyyMMddHHmm}

copyright = Copyright (c) OSGi Alliance (2000, ${tstamp;yyyy}). All Rights Reserved.
copyright.html = Copyright &copy; OSGi Alliance (2000, ${tstamp;yyyy}). All Rights Reserved.

osgi.release				= 7
osgi.version				= ${osgi.release}.0

build.version				= ${osgi.version}.0.${project.build}

# Documentation
Bundle-Copyright       	= ${copyright}
Bundle-Vendor			= OSGi Alliance
Bundle-Version			= ${build.version}
-removeheaders			= Include-Resource, Private-Package, Conditional-Package

junit.package			= junit.framework;version=3.8
junit					= com.springsource.junit;version=3.8;export="${junit.package}"

-runpath							= \
	org.osgi.impl.framework;		version=latest, \
	${junit}

# Use the following for framework RI development	
#-runpath							= \
#	org.eclipse.osgi;		version=snapshot, \
#	${junit}

-runtrace=true
runproperties = report=true, \
	osgi.resolverMode=strict
runsecureproperties = ${runproperties}, \
	org.osgi.framework.security=osgi, \
	org.osgi.framework.trust.repositories=${build}/keystore

-runproperties = ${runproperties}

testcases = ${sort;${classes;extending;junit.framework.TestCase;concrete}}


