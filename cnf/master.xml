<?xml version="1.0" encoding="UTF-8"?>
<!--
	The is master OSGi build file. It is included from projects
	as is.
-->
<project name="master" default="publish">

	<target name="all" depends="publish">
		<!-- all target is a synonym for publish target -->
	</target>
	
	<!-- 
	     INIT
	     The target is a dependent of all other targets.
	     It's purpose is to set up the environment only once
	     and avoid it being repeatedly done for each antcall.
	-->

	<target name="init" unless="initialized">
		<!-- mark init has been run -->
		<antversion property="initialized" atleast="1.8" />
		<fail unless="initialized" message="Ant version is not at least 1.8" />

		<!-- The following three properties are local to this file to get bootstrapped. 
		   The actual properties to be used should be project.dir, project.workspace and
		   project.name. Those properties are set by bnd -->
		<dirname property="-projectdir" file="${ant.file}" />
		<dirname property="-workspacedir" file="${-projectdir}" />
		<basename property="-projectname" file="${-projectdir}" />
		<echo>Enter project ${-projectname} (${top})</echo>
		
		<taskdef resource="aQute/bnd/ant/taskdef.properties" classpath="${-workspacedir}/licensed/repo/biz.aQute.bnd/biz.aQute.bnd-latest.jar" />

		<bndprepare basedir="${-projectdir}" print="false" top="${top}"/>
		<!-- Now we have the same properties set as bnd 
		-->
	</target>

	<!-- 
		DEPENDENCIES
		Build project dependencies. The execution of the dependencies is
		restricted to 1 level because bnd calculates the dependencies. This
		is controlled through the top property. If this is set, the method
		will not execute. This method will set that property and it will set
		it in the child ant.
	-->
	<target name="dependencies" depends="init" if="project.dependson" unless="top">
		<property name="top" value="${target}" />
		
		<!-- Have to compile the bnd plugins before ... -->		
        <subant target="" inheritAll="false" buildpath="${build}">
            <property name="top" value="${top}" />
        </subant>
		
		<!-- Now build all dependends in their dependency order -->
		<subant target="" inheritAll="false" buildpath="${project.dependson}">
			<property name="top" value="${top}" />
		</subant>
	</target>

	<!--
	     COMPILE
	     Compile the sources. 
	-->
	<macrodef name="javac.macro">
		<attribute name="output" default="${project.output}"/>
		<attribute name="bootclasspath" default="${project.bootclasspath}"/>
		<attribute name="target" default="${javac.target}"/>
		<sequential>
			<echo>Compile ${project.sourcepath} to @{output}</echo>
			<echo>-source ${javac.source} -target @{target} -bootclasspath @{bootclasspath}</echo>
			<mkdir dir="@{output}"/>
			<javac fork="yes"
				executable="${javac}"
				srcdir="${project.sourcepath}"
				destdir="@{output}"
				classpath="${project.buildpath}"
				bootclasspath="@{bootclasspath}"
				deprecation="true"
				listfiles="true"
				target="@{target}"
				source="${javac.source}"
				encoding="UTF-8"
				debug="${javac.debug}"
				includeAntRuntime="no"
				verbose="${verbose}" />
		</sequential>
	</macrodef>

	<target name="compile" depends="dependencies,-compilejsr14" if="project.sourcepath">
		<javac.macro bootclasspath="${-project.bootclasspath}" target="${-javac.target}" />
		
		<!-- The eclipse compiler copies resources but javac does not --> 
		<copy todir="${project.output}" verbose="${verbose}" preservelastmodified="true">
			<fileset dir="${project.sourcepath}">
                <exclude name="**/*.java"/>
                <exclude name="**/*.class"/>
			</fileset>
		</copy>
	</target>

	<target name="-compilejsr14" depends="-checkjsr14" if="-jsr14compile">
		<javac.macro output="${target}/jsr14" />
	</target>

	<target name="-checkjsr14">
		<!-- If the jsr14 property is false, then we build jsr14 projects
		first with jsr14, if the compiler supports jsr14, and then with 1.5
		for the final output.
		-->

		<!-- default is to build jsr14 output. Run ant with -Djsr14=no to generate 1.5 output. -->
		<property name="jsr14" value="true" />
		<!--  javac 1.5 and 1.6 support -target jsr14 -->
		<condition property="-jsr14supported" value="true" else="false">
			<matches pattern="^1\.[5-6]$" string="${ant.java.version}"/>
		</condition>
		<!-- Project requests jsr14 if source is 1.5, target is jsr14 and ee is minimum -->
		<condition property="-jsr14target">
			<and>
				<equals arg1="1.5" arg2="${javac.source}" casesensitive="false" />
				<equals arg1="jsr14" arg2="${javac.target}" casesensitive="false" />
				<matches pattern="^$|.*[/\\]ee\.minimum-[.0-9]+\.jar$" string="${project.bootclasspath}" casesensitive="false" />
			</and>
		</condition>
		<!-- Set -javac.target to 1.5 if project requests jsr14 and build does not want or javac does not support jsr14 -->
		<condition property="-javac.target" value="1.5" else="${javac.target}">
			<and>
				<isset property="-jsr14target" />
				<or>
					<isfalse value="${jsr14}"/>
					<isfalse value="${-jsr14supported}"/>
				</or>
			</and>
		</condition>
		<!-- Set -project.bootclasspath to 1.5 if project requests jsr14 and build does not want or javac does not support jsr14 -->
		<condition property="-project.bootclasspath" value="${ee.j2se-15.jar}" else="${project.bootclasspath}">
			<and>
				<isset property="-jsr14target" />
				<or>
					<isfalse value="${jsr14}"/>
					<isfalse value="${-jsr14supported}"/>
				</or>
				<length string="${project.bootclasspath}" trim="true" when="greater" length="0" />
			</and>
		</condition>
		<!-- Compile jsr14 if project requests jsr14, build does not want jsr14, javac supports jsr14 and there is something to compile -->
		<condition property="-jsr14compile">
			<and>
				<isset property="-jsr14target" />
				<isfalse value="${jsr14}"/>
				<istrue value="${-jsr14supported}"/>
				<isset property="project.sourcepath" />
			</and>
		</condition>
	</target>

	<!--
	     Test
	-->
	<target name="test" depends="compile">
		<bnd command="test" exceptions="true" basedir="${project.dir}"/>
	</target>

	<!-- 
		JARS
	-->
	<target name="jars" depends="compile">
		<mkdir dir="${target}" />
		<bndproject basedir="${project.dir}"/>
	</target>

	<target name="deploy" depends="jars" unless="nodeploy">
		<bnddeploy>
			<fileset dir="${target}" includes="${bin.includes}" />
		</bnddeploy>
	</target>

	<target name="publish" depends="deploy">
		<echo>Exit project ${project.name}</echo>
	</target>

	<!--
	     CLEAN
	-->
	<target name="deepclean" depends="clean" if="project.dependson">
		<subant target="clean" inheritAll="false" buildpath="${project.dependson}"/>
		<subant target="clean" inheritAll="false" buildpath="${build}"/>
	</target>

	<target name="clean" depends="init">
		<delete quiet="true" includeEmptyDirs="true" verbose="${verbose}">
			<fileset dir="${project.output}" />
			<fileset dir="${target}" />
		</delete>
	</target>

	<!--
	     ECHO
	-->
	<target name="echo" depends="init">
		<echo>verbose:                ${verbose}</echo>
		<echo>project.workspace:      ${project.workspace}</echo>
		<echo>project.dir:            ${project.dir}</echo>
		<echo>project.name:           ${project.name}</echo>
		<echo>project.output:         ${project.output}</echo>
		<echo>project.sourcepath:     ${project.sourcepath}</echo>
		<echo>project.allsourcepath:  ${project.allsourcepath}</echo>
		<echo>project.buildpath:      ${project.buildpath}</echo>
		<echo>project.testpath:       ${project.testpath}</echo>
		<echo>project.dependson:      ${project.dependson}</echo>
		<echo>project.bootclasspath:  ${project.bootclasspath}</echo>
		<echo>javac:                  ${javac}</echo>
		<echo>javac.source:           ${javac.source}</echo>
		<echo>javac.target:           ${javac.target}</echo>
		<echo>javac.compliance:       ${javac.compliance}</echo>
		<echo>base.modfied:           ${base.modified} (${base.modified.readable})</echo>
		<echo>target:                 ${target}</echo>
		<echo>repo:                   ${repo}</echo>
		<echo>licensed repo:          ${licensed-repo}</echo>
		<echo>released repo:          ${released-repo}</echo>
		<echo>nodeploy:               ${nodeploy}</echo>
	</target>

</project>
