<?xml version="1.0" encoding="UTF-8"?>
<!--
	The is master OSGi build file. It is included from projects
	as is.
-->
<project name="master" default="publish" xmlns:if="ant:if" xmlns:unless="ant:unless">

	<target name="all" depends="publish">
		<!-- all target is a synonym for publish target -->
	</target>
	
	<!-- 
	     INIT
	     The target is a dependent of all other targets.
	     It's purpose is to set up the environment only once
	     and avoid it being repeatedly done for each antcall.
	-->

	<target name="init" unless="initialized">
		<!-- mark init has been run -->
		<antversion property="initialized" atleast="1.9.1" />
		<fail unless="initialized" message="This build requires ant version 1.9.1 or later." />

		<!-- The following three properties are local to this file to get bootstrapped. 
		   The actual properties to be used should be project.dir, project.workspace and
		   project.name. Those properties are set by bnd -->
		<dirname property="-projectdir" file="${ant.file}" />
		<dirname property="-workspacedir" file="${-projectdir}" />
		<basename property="-projectname" file="${-projectdir}" />
		<echo if:set="top">Enter project ${-projectname} (${top})</echo>
		<echo unless:set="top">Enter project ${-projectname}</echo>
		
		<taskdef resource="aQute/bnd/ant/taskdef.properties" classpath="${-workspacedir}/licensed/repo/biz.aQute.bnd/biz.aQute.bnd-latest.jar" />

		<bndprepare basedir="${-projectdir}" print="false" top="${top}"/>
		<!-- Now we have the same properties set as bnd 
		-->
	</target>

	<!-- 
		DEPENDENCIES
		Build project dependencies. The execution of the dependencies is
		restricted to 1 level because bnd calculates the dependencies. This
		is controlled through the top property. If this is set, the method
		will not execute. This method will set that property and it will set
		it in the child ant.
	-->
	<target name="dependencies" depends="init" unless="top">
		<property name="top" value="${project.name}" />
		
		<!-- Have to compile the bnd plugins before ... -->		
        <subant target="" inheritAll="false" buildpath="${build}">
            <property name="top" value="${top}" />
        </subant>
		
		<!-- Now build all dependents in their dependency order -->
		<subant target="" inheritAll="false" buildpath="${project.dependson}" unless:blank="${project.dependson}">
			<property name="top" value="${top}" />
		</subant>
	</target>

	<!--
	     COMPILE
	     Compile the sources. 
	-->
	<target name="compile" depends="dependencies" if="project.sourcepath">
        <mkdir dir="${project.output}"/>
        <echo>Compile ${project.sourcepath} to ${project.output}</echo>
        <echo unless:blank="${javac.profile}">-source ${javac.source} -target ${javac.target} -profile ${javac.profile}</echo>
        <echo if:blank="${javac.profile}">-source ${javac.source} -target ${javac.target}</echo>
        <javac fork="yes"
            executable="${javac}"
            srcdir="${project.sourcepath}"
            destdir="${project.output}"
            classpath="${project.buildpath}"
            includeAntRuntime="no"
            deprecation="true"
            listfiles="true"
            source="${javac.source}"
            target="${javac.target}"
            debug="${javac.debug}"
            encoding="UTF-8"
            verbose="${verbose}">
            <compilerarg line="-profile ${javac.profile}" unless:blank="${javac.profile}"/>
        	<bootclasspath path="${project.bootclasspath}" unless:blank="${project.bootclasspath}"/>
        </javac>
		<!-- The eclipse compiler copies resources but javac does not --> 
		<copy todir="${project.output}" verbose="${verbose}" preservelastmodified="true">
			<fileset dir="${project.sourcepath}">
                <exclude name="**/*.java"/>
                <exclude name="**/*.class"/>
			</fileset>
		</copy>
	</target>

	<!--
	     Test
	-->
	<target name="test" depends="compile">
		<bnd command="test" exceptions="true" basedir="${project.dir}"/>
	</target>

	<!-- 
		JARS
	-->
	<target name="jars" depends="compile">
		<mkdir dir="${target}" />
		<bndproject basedir="${project.dir}"/>
	</target>

	<target name="release" depends="jars">
		<bndrelease unless:blank="${-releaserepo}" />
	</target>

	<target name="publish" depends="release">
		<echo>Exit project ${project.name} (${top})</echo>
	</target>

	<!--
	     CLEAN
	-->
	<target name="deepclean" depends="clean" if="project.dependson">
		<subant target="clean" inheritAll="false" buildpath="${project.dependson}"/>
		<subant target="clean" inheritAll="false" buildpath="${build}"/>
	</target>

	<target name="clean" depends="init">
		<delete quiet="true" includeEmptyDirs="true" verbose="${verbose}">
			<fileset dir="${project.output}" />
			<fileset dir="${target}" />
		</delete>
	</target>

	<!--
	     ECHO
	-->
	<target name="echo" depends="init">
		<echo>verbose:                ${verbose}</echo>
		<echo>project.workspace:      ${project.workspace}</echo>
		<echo>project.dir:            ${project.dir}</echo>
		<echo>project.name:           ${project.name}</echo>
		<echo>project.output:         ${project.output}</echo>
		<echo>project.sourcepath:     ${project.sourcepath}</echo>
		<echo>project.allsourcepath:  ${project.allsourcepath}</echo>
		<echo>project.buildpath:      ${project.buildpath}</echo>
		<echo>project.testpath:       ${project.testpath}</echo>
		<echo>project.dependson:      ${project.dependson}</echo>
		<echo>project.bootclasspath:  ${project.bootclasspath}</echo>
		<echo>javac:                  ${javac}</echo>
		<echo>javac.source:           ${javac.source}</echo>
		<echo>javac.target:           ${javac.target}</echo>
		<echo>javac.compliance:       ${javac.compliance}</echo>
		<echo>javac.profile:          ${javac.profile}</echo>
		<echo>base.modfied:           ${base.modified} (${base.modified.readable})</echo>
		<echo>target:                 ${target}</echo>
		<echo>repo:                   ${repo}</echo>
		<echo>licensed repo:          ${licensed-repo}</echo>
		<echo>released repo:          ${released-repo}</echo>
		<echo>-releaserepo:           ${-releaserepo}</echo>
	</target>

</project>
